/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Fetches processor types. Note that we do not use ListProcessorTypes here because it is not paginated.
   */
  documentaiProjectsLocationsFetchProcessorTypes(
    req: operations.DocumentaiProjectsLocationsFetchProcessorTypesRequest,
    security: operations.DocumentaiProjectsLocationsFetchProcessorTypesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsFetchProcessorTypesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DocumentaiProjectsLocationsFetchProcessorTypesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{parent}:fetchProcessorTypes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsFetchProcessorTypesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsFetchProcessorTypesResponse =
        new operations.DocumentaiProjectsLocationsFetchProcessorTypesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDocumentaiV1beta3FetchProcessorTypesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDocumentaiV1beta3FetchProcessorTypesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists information about the supported locations for this service.
   */
  documentaiProjectsLocationsList(
    req: operations.DocumentaiProjectsLocationsListRequest,
    security: operations.DocumentaiProjectsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DocumentaiProjectsLocationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{name}/locations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DocumentaiProjectsLocationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsListResponse =
        new operations.DocumentaiProjectsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudLocationListLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudLocationListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
   */
  documentaiProjectsLocationsOperationsCancel(
    req: operations.DocumentaiProjectsLocationsOperationsCancelRequest,
    security: operations.DocumentaiProjectsLocationsOperationsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsOperationsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DocumentaiProjectsLocationsOperationsCancelRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{name}:cancel",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsOperationsCancelSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsOperationsCancelResponse =
        new operations.DocumentaiProjectsLocationsOperationsCancelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleProtobufEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a processor type detail.
   */
  documentaiProjectsLocationsProcessorTypesGet(
    req: operations.DocumentaiProjectsLocationsProcessorTypesGetRequest,
    security: operations.DocumentaiProjectsLocationsProcessorTypesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorTypesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DocumentaiProjectsLocationsProcessorTypesGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta3/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorTypesGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorTypesGetResponse =
        new operations.DocumentaiProjectsLocationsProcessorTypesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDocumentaiV1beta3ProcessorType = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDocumentaiV1beta3ProcessorType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the processor types that exist.
   */
  documentaiProjectsLocationsProcessorTypesList(
    req: operations.DocumentaiProjectsLocationsProcessorTypesListRequest,
    security: operations.DocumentaiProjectsLocationsProcessorTypesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorTypesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DocumentaiProjectsLocationsProcessorTypesListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{parent}/processorTypes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorTypesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorTypesListResponse =
        new operations.DocumentaiProjectsLocationsProcessorTypesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDocumentaiV1beta3ListProcessorTypesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDocumentaiV1beta3ListProcessorTypesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a processor from the type processor that the user chose. The processor will be at "ENABLED" state by default after its creation.
   */
  documentaiProjectsLocationsProcessorsCreate(
    req: operations.DocumentaiProjectsLocationsProcessorsCreateRequest,
    security: operations.DocumentaiProjectsLocationsProcessorsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DocumentaiProjectsLocationsProcessorsCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{parent}/processors",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDocumentaiV1beta3ProcessorInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorsCreateResponse =
        new operations.DocumentaiProjectsLocationsProcessorsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDocumentaiV1beta3Processor = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDocumentaiV1beta3Processor
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Disables a processor
   */
  documentaiProjectsLocationsProcessorsDisable(
    req: operations.DocumentaiProjectsLocationsProcessorsDisableRequest,
    security: operations.DocumentaiProjectsLocationsProcessorsDisableSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorsDisableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DocumentaiProjectsLocationsProcessorsDisableRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{name}:disable",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorsDisableSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorsDisableResponse =
        new operations.DocumentaiProjectsLocationsProcessorsDisableResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Enables a processor
   */
  documentaiProjectsLocationsProcessorsEnable(
    req: operations.DocumentaiProjectsLocationsProcessorsEnableRequest,
    security: operations.DocumentaiProjectsLocationsProcessorsEnableSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorsEnableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DocumentaiProjectsLocationsProcessorsEnableRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{name}:enable",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorsEnableSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorsEnableResponse =
        new operations.DocumentaiProjectsLocationsProcessorsEnableResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Send a document for Human Review. The input document should be processed by the specified processor.
   */
  documentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocument(
    req: operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentRequest,
    security: operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{humanReviewConfig}:reviewDocument",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDocumentaiV1beta3ReviewDocumentRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentResponse =
        new operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all processors which belong to this project.
   */
  documentaiProjectsLocationsProcessorsList(
    req: operations.DocumentaiProjectsLocationsProcessorsListRequest,
    security: operations.DocumentaiProjectsLocationsProcessorsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DocumentaiProjectsLocationsProcessorsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{parent}/processors",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorsListResponse =
        new operations.DocumentaiProjectsLocationsProcessorsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDocumentaiV1beta3ListProcessorsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDocumentaiV1beta3ListProcessorsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in the [Document] format.
   */
  documentaiProjectsLocationsProcessorsProcessorVersionsBatchProcess(
    req: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessRequest,
    security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{name}:batchProcess",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDocumentaiV1beta3BatchProcessRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessResponse =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the processor version, all artifacts under the processor version will be deleted.
   */
  documentaiProjectsLocationsProcessorsProcessorVersionsDelete(
    req: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteRequest,
    security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta3/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteResponse =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deploys the processor version.
   */
  documentaiProjectsLocationsProcessorsProcessorVersionsDeploy(
    req: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployRequest,
    security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeploySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{name}:deploy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeploySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployResponse =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Evaluates a ProcessorVersion against annotated documents, producing an Evaluation.
   */
  documentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersion(
    req: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionRequest,
    security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{processorVersion}:evaluateProcessorVersion",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDocumentaiV1beta3EvaluateProcessorVersionRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionResponse =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a set of evaluations for a given processor version.
   */
  documentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsList(
    req: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListRequest,
    security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{parent}/evaluations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListResponse =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDocumentaiV1beta3ListEvaluationsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDocumentaiV1beta3ListEvaluationsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Imports a processor version from source processor version.
   */
  documentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersion(
    req: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionRequest,
    security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{parent}/processorVersions:importProcessorVersion",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDocumentaiV1beta3ImportProcessorVersionRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionResponse =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all versions of a processor.
   */
  documentaiProjectsLocationsProcessorsProcessorVersionsList(
    req: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListRequest,
    security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{parent}/processorVersions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListResponse =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDocumentaiV1beta3ListProcessorVersionsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDocumentaiV1beta3ListProcessorVersionsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Processes a single document.
   */
  documentaiProjectsLocationsProcessorsProcessorVersionsProcess(
    req: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessRequest,
    security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{name}:process",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDocumentaiV1beta3ProcessRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessResponse =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDocumentaiV1beta3ProcessResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDocumentaiV1beta3ProcessResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Trains a new processor version. Operation metadata is returned as cloud_documentai_core.TrainProcessorVersionMetadata.
   */
  documentaiProjectsLocationsProcessorsProcessorVersionsTrain(
    req: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainRequest,
    security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{parent}/processorVersions:train",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDocumentaiV1beta3TrainProcessorVersionRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainResponse =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Undeploys the processor version.
   */
  documentaiProjectsLocationsProcessorsProcessorVersionsUndeploy(
    req: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployRequest,
    security: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeploySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{name}:undeploy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeploySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployResponse =
        new operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Set the default (active) version of a Processor that will be used in ProcessDocument and BatchProcessDocuments.
   */
  documentaiProjectsLocationsProcessorsSetDefaultProcessorVersion(
    req: operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionRequest,
    security: operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/{processor}:setDefaultProcessorVersion",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDocumentaiV1beta3SetDefaultProcessorVersionRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionResponse =
        new operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }
}
