"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import entitymappinglogentry as shared_entitymappinglogentry
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityMapping:
    r"""Details of the mappings of a database entity."""
    
    draft_entity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('draftEntity'), 'exclude': lambda f: f is None }})
    r"""Target entity full name. The draft entity can also include a column, index or constraint using the same naming notation schema.table.column."""  
    mapping_log: Optional[list[shared_entitymappinglogentry.EntityMappingLogEntry]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mappingLog'), 'exclude': lambda f: f is None }})
    r"""Entity mapping log entries. Multiple rules can be effective and contribute changes to a converted entity, such as a rule can handle the entity name, another rule can handle an entity type. In addition, rules which did not change the entity are also logged along with the reason preventing them to do so."""  
    source_entity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceEntity'), 'exclude': lambda f: f is None }})
    r"""Source entity full name. The source entity can also be a column, index or constraint using the same naming notation schema.table.column."""  
    