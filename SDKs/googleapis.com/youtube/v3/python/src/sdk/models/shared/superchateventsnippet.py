"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import channelprofiledetails as shared_channelprofiledetails
from ..shared import superstickermetadata as shared_superstickermetadata
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SuperChatEventSnippet:
    
    amount_micros: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amountMicros'), 'exclude': lambda f: f is None }})
    r"""The purchase amount, in micros of the purchase currency. e.g., 1 is represented as 1000000."""  
    channel_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelId'), 'exclude': lambda f: f is None }})
    r"""Channel id where the event occurred."""  
    comment_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commentText'), 'exclude': lambda f: f is None }})
    r"""The text contents of the comment left by the user."""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the event occurred."""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The currency in which the purchase was made. ISO 4217."""  
    display_string: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayString'), 'exclude': lambda f: f is None }})
    r"""A rendered string that displays the purchase amount and currency (e.g., \\"$1.00\\"). The string is rendered for the given language."""  
    is_super_sticker_event: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSuperStickerEvent'), 'exclude': lambda f: f is None }})
    r"""True if this event is a Super Sticker event."""  
    message_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageType'), 'exclude': lambda f: f is None }})
    r"""The tier for the paid message, which is based on the amount of money spent to purchase the message."""  
    super_sticker_metadata: Optional[shared_superstickermetadata.SuperStickerMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('superStickerMetadata'), 'exclude': lambda f: f is None }})  
    supporter_details: Optional[shared_channelprofiledetails.ChannelProfileDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supporterDetails'), 'exclude': lambda f: f is None }})  
    