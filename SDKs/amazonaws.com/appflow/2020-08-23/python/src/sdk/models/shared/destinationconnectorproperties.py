"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customconnectordestinationproperties as shared_customconnectordestinationproperties
from ..shared import customerprofilesdestinationproperties as shared_customerprofilesdestinationproperties
from ..shared import eventbridgedestinationproperties as shared_eventbridgedestinationproperties
from ..shared import honeycodedestinationproperties as shared_honeycodedestinationproperties
from ..shared import marketodestinationproperties as shared_marketodestinationproperties
from ..shared import redshiftdestinationproperties as shared_redshiftdestinationproperties
from ..shared import s3destinationproperties as shared_s3destinationproperties
from ..shared import salesforcedestinationproperties as shared_salesforcedestinationproperties
from ..shared import sapodatadestinationproperties as shared_sapodatadestinationproperties
from ..shared import snowflakedestinationproperties as shared_snowflakedestinationproperties
from ..shared import upsolverdestinationproperties as shared_upsolverdestinationproperties
from ..shared import zendeskdestinationproperties as shared_zendeskdestinationproperties
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DestinationConnectorProperties:
    r"""This stores the information that is required to query a particular connector."""
    
    custom_connector: Optional[shared_customconnectordestinationproperties.CustomConnectorDestinationProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomConnector'), 'exclude': lambda f: f is None }})  
    customer_profiles: Optional[shared_customerprofilesdestinationproperties.CustomerProfilesDestinationProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerProfiles'), 'exclude': lambda f: f is None }})  
    event_bridge: Optional[shared_eventbridgedestinationproperties.EventBridgeDestinationProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventBridge'), 'exclude': lambda f: f is None }})  
    honeycode: Optional[shared_honeycodedestinationproperties.HoneycodeDestinationProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Honeycode'), 'exclude': lambda f: f is None }})  
    lookout_metrics: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LookoutMetrics'), 'exclude': lambda f: f is None }})  
    marketo: Optional[shared_marketodestinationproperties.MarketoDestinationProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Marketo'), 'exclude': lambda f: f is None }})  
    redshift: Optional[shared_redshiftdestinationproperties.RedshiftDestinationProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Redshift'), 'exclude': lambda f: f is None }})  
    s3: Optional[shared_s3destinationproperties.S3DestinationProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3'), 'exclude': lambda f: f is None }})  
    salesforce: Optional[shared_salesforcedestinationproperties.SalesforceDestinationProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Salesforce'), 'exclude': lambda f: f is None }})  
    sapo_data: Optional[shared_sapodatadestinationproperties.SAPODataDestinationProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SAPOData'), 'exclude': lambda f: f is None }})  
    snowflake: Optional[shared_snowflakedestinationproperties.SnowflakeDestinationProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Snowflake'), 'exclude': lambda f: f is None }})  
    upsolver: Optional[shared_upsolverdestinationproperties.UpsolverDestinationProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Upsolver'), 'exclude': lambda f: f is None }})  
    zendesk: Optional[shared_zendeskdestinationproperties.ZendeskDestinationProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Zendesk'), 'exclude': lambda f: f is None }})  
    