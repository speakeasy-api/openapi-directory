/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * ConsentInformationResponse200Json - Body of the JSON response for a successfull get consent request.
 */
public class ConsentInformationResponse200Json {
    /**
     * A list of hyperlinks to be recognised by the TPP.
     * 
     * Links of type "account" and/or "cardAccount", depending on the nature of the consent.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    public java.util.Map<String, HrefType> links;

    public ConsentInformationResponse200Json withLinks(java.util.Map<String, HrefType> links) {
        this.links = links;
        return this;
    }
    
    /**
     * Requested access services for a consent.
     * 
     */
    @JsonProperty("access")
    public AccountAccess access;

    public ConsentInformationResponse200Json withAccess(AccountAccess access) {
        this.access = access;
        return this;
    }
    
    /**
     * This is the overall lifecycle status of the consent.
     * 
     * Valid values are:
     *   - 'received': The consent data have been received and are technically correct.
     *     The data is not authorised yet.
     *   - 'rejected': The consent data have been rejected e.g. since no successful authorisation has taken place.
     *   - 'valid': The consent is accepted and valid for GET account data calls and others as specified in the consent object.
     *   - 'revokedByPsu': The consent has been revoked by the PSU towards the ASPSP.
     *   - 'expired': The consent expired.
     *   - 'terminatedByTpp': The corresponding TPP has terminated the consent by applying the DELETE method to the consent resource.
     *   - 'partiallyAuthorised': The consent is due to a multi-level authorisation, some but not all mandated authorisations have been performed yet.
     * 
     * The ASPSP might add further codes. These codes then shall be contained in the ASPSP's documentation of the XS2A interface 
     * and has to be added to this API definition as well.
     * 
     */
    @JsonProperty("consentStatus")
    public ConsentStatusEnum consentStatus;

    public ConsentInformationResponse200Json withConsentStatus(ConsentStatusEnum consentStatus) {
        this.consentStatus = consentStatus;
        return this;
    }
    
    /**
     * This field indicates the requested maximum frequency for an access without PSU involvement per day.
     * For a one-off access, this attribute is set to "1".
     * 
     * The frequency needs to be greater equal to one.
     * 
     * If not otherwise agreed bilaterally between TPP and ASPSP, the frequency is less equal to 4.
     * 
     */
    @JsonProperty("frequencyPerDay")
    public Long frequencyPerDay;

    public ConsentInformationResponse200Json withFrequencyPerDay(Long frequencyPerDay) {
        this.frequencyPerDay = frequencyPerDay;
        return this;
    }
    
    /**
     * This date is containing the date of the last action on the consent object either through
     * the XS2A interface or the PSU/ASPSP interface having an impact on the status.
     * 
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("lastActionDate")
    public LocalDate lastActionDate;

    public ConsentInformationResponse200Json withLastActionDate(LocalDate lastActionDate) {
        this.lastActionDate = lastActionDate;
        return this;
    }
    
    /**
     * "true", if the consent is for recurring access to the account data.
     * 
     * "false", if the consent is for one access to the account data.
     * 
     */
    @JsonProperty("recurringIndicator")
    public Boolean recurringIndicator;

    public ConsentInformationResponse200Json withRecurringIndicator(Boolean recurringIndicator) {
        this.recurringIndicator = recurringIndicator;
        return this;
    }
    
    /**
     * This parameter is defining a valid until date (including the mentioned date) for the requested consent. 
     * The content is the local ASPSP date in ISO-Date format, e.g. 2017-10-30.
     * 
     * Future dates might get adjusted by ASPSP. 
     * 
     * If a maximal available date is requested, a date in far future is to be used: "9999-12-31". 
     * 
     * In both cases the consent object to be retrieved by the get consent request will contain the adjusted date.
     * 
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("validUntil")
    public LocalDate validUntil;

    public ConsentInformationResponse200Json withValidUntil(LocalDate validUntil) {
        this.validUntil = validUntil;
        return this;
    }
    
    public ConsentInformationResponse200Json(@JsonProperty("access") AccountAccess access, @JsonProperty("consentStatus") ConsentStatusEnum consentStatus, @JsonProperty("frequencyPerDay") Long frequencyPerDay, @JsonProperty("lastActionDate") LocalDate lastActionDate, @JsonProperty("recurringIndicator") Boolean recurringIndicator, @JsonProperty("validUntil") LocalDate validUntil) {
        this.access = access;
        this.consentStatus = consentStatus;
        this.frequencyPerDay = frequencyPerDay;
        this.lastActionDate = lastActionDate;
        this.recurringIndicator = recurringIndicator;
        this.validUntil = validUntil;
  }
}
