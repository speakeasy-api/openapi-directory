"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import milestone as shared_milestone
from enum import Enum
from typing import Optional

class IssuesListMilestonesDirectionEnum(str, Enum):
    r"""The direction of the sort. Either `asc` or `desc`."""
    ASC = 'asc'
    DESC = 'desc'

class IssuesListMilestonesSortEnum(str, Enum):
    r"""What to sort results by. Either `due_on` or `completeness`."""
    DUE_ON = 'due_on'
    COMPLETENESS = 'completeness'

class IssuesListMilestonesStateEnum(str, Enum):
    r"""The state of the milestone. Either `open`, `closed`, or `all`."""
    OPEN = 'open'
    CLOSED = 'closed'
    ALL = 'all'


@dataclasses.dataclass
class IssuesListMilestonesRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    direction: Optional[IssuesListMilestonesDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""The direction of the sort. Either `asc` or `desc`."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results per page (max 100)."""  
    sort: Optional[IssuesListMilestonesSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""What to sort results by. Either `due_on` or `completeness`."""  
    state: Optional[IssuesListMilestonesStateEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""The state of the milestone. Either `open`, `closed`, or `all`."""  
    

@dataclasses.dataclass
class IssuesListMilestonesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Resource not found"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    milestones: Optional[list[shared_milestone.Milestone]] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    