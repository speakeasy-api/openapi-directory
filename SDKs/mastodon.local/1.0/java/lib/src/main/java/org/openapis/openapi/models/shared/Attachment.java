/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Attachment - Represents a file or media attachment that can be added to a status.
 * https://docs.joinmastodon.org/entities/attachment/
 */
public class Attachment {
    /**
     * A hash computed by the [BlurHash algorithm](https://github.com/woltapp/blurhash), for generating colorful preview thumbnails when media has not been downloaded yet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blurhash")
    public String blurhash;
    public Attachment withBlurhash(String blurhash) {
        this.blurhash = blurhash;
        return this;
    }
    
    /**
     * Alternate text that describes what is in the media attachment, to be used for the visually impaired or when media attachments do not load.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Attachment withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The ID of the attachment in the database. Cast from an integer but not guaranteed to be a number
     */
    @JsonProperty("id")
    public String id;
    public Attachment withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Metadata returned by Paperclip.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meta")
    public java.util.Map<String, Object> meta;
    public Attachment withMeta(java.util.Map<String, Object> meta) {
        this.meta = meta;
        return this;
    }
    
    /**
     * The location of a scaled-down preview of the attachment.
     */
    @JsonProperty("preview_url")
    public String previewUrl;
    public Attachment withPreviewUrl(String previewUrl) {
        this.previewUrl = previewUrl;
        return this;
    }
    
    /**
     * The location of the full-size original attachment on the remote website. String or null if the attachment is local.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_url")
    public String remoteUrl;
    public Attachment withRemoteUrl(String remoteUrl) {
        this.remoteUrl = remoteUrl;
        return this;
    }
    
    /**
     * A shorter URL for the attachment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text_url")
    public String textUrl;
    public Attachment withTextUrl(String textUrl) {
        this.textUrl = textUrl;
        return this;
    }
    
    /**
     * The type of the attachment.
     */
    @JsonProperty("type")
    public AttachmentTypeEnum type;
    public Attachment withType(AttachmentTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The location of the original full-size attachment.
     */
    @JsonProperty("url")
    public String url;
    public Attachment withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
