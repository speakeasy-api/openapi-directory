"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import describeconnectorresponse as shared_describeconnectorresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class DescribeConnectorRequestBodyConnectorTypeEnum(str, Enum):
    r"""The connector type, such as CUSTOMCONNECTOR, Saleforce, Marketo. Please choose CUSTOMCONNECTOR for Lambda based custom connectors."""
    SALESFORCE = 'Salesforce'
    SINGULAR = 'Singular'
    SLACK = 'Slack'
    REDSHIFT = 'Redshift'
    S3 = 'S3'
    MARKETO = 'Marketo'
    GOOGLEANALYTICS = 'Googleanalytics'
    ZENDESK = 'Zendesk'
    SERVICENOW = 'Servicenow'
    DATADOG = 'Datadog'
    TRENDMICRO = 'Trendmicro'
    SNOWFLAKE = 'Snowflake'
    DYNATRACE = 'Dynatrace'
    INFORNEXUS = 'Infornexus'
    AMPLITUDE = 'Amplitude'
    VEEVA = 'Veeva'
    EVENT_BRIDGE = 'EventBridge'
    LOOKOUT_METRICS = 'LookoutMetrics'
    UPSOLVER = 'Upsolver'
    HONEYCODE = 'Honeycode'
    CUSTOMER_PROFILES = 'CustomerProfiles'
    SAPO_DATA = 'SAPOData'
    CUSTOM_CONNECTOR = 'CustomConnector'
    PARDOT = 'Pardot'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeConnectorRequestBody:
    
    connector_type: DescribeConnectorRequestBodyConnectorTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorType') }})
    r"""The connector type, such as CUSTOMCONNECTOR, Saleforce, Marketo. Please choose CUSTOMCONNECTOR for Lambda based custom connectors."""  
    connector_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorLabel'), 'exclude': lambda f: f is None }})
    r"""The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/."""  
    

@dataclasses.dataclass
class DescribeConnectorRequest:
    
    request_body: DescribeConnectorRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class DescribeConnectorResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    describe_connector_response: Optional[shared_describeconnectorresponse.DescribeConnectorResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    