/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).
 */
export class UpdateMitigationActionRequestBodyActionParams extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "addThingsToThingGroupParams" })
  @Type(() => shared.AddThingsToThingGroupParams)
  addThingsToThingGroupParams?: shared.AddThingsToThingGroupParams;

  @SpeakeasyMetadata()
  @Expose({ name: "enableIoTLoggingParams" })
  @Type(() => shared.EnableIoTLoggingParams)
  enableIoTLoggingParams?: shared.EnableIoTLoggingParams;

  @SpeakeasyMetadata()
  @Expose({ name: "publishFindingToSnsParams" })
  @Type(() => shared.PublishFindingToSnsParams)
  publishFindingToSnsParams?: shared.PublishFindingToSnsParams;

  @SpeakeasyMetadata()
  @Expose({ name: "replaceDefaultPolicyVersionParams" })
  @Type(() => shared.ReplaceDefaultPolicyVersionParams)
  replaceDefaultPolicyVersionParams?: shared.ReplaceDefaultPolicyVersionParams;

  @SpeakeasyMetadata()
  @Expose({ name: "updateCACertificateParams" })
  @Type(() => shared.UpdateCACertificateParams)
  updateCACertificateParams?: shared.UpdateCACertificateParams;

  @SpeakeasyMetadata()
  @Expose({ name: "updateDeviceCertificateParams" })
  @Type(() => shared.UpdateDeviceCertificateParams)
  updateDeviceCertificateParams?: shared.UpdateDeviceCertificateParams;
}

export class UpdateMitigationActionRequestBody extends SpeakeasyBase {
  /**
   * The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "actionParams" })
  @Type(() => UpdateMitigationActionRequestBodyActionParams)
  actionParams?: UpdateMitigationActionRequestBodyActionParams;

  /**
   * The ARN of the IAM role that is used to apply the mitigation action.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn?: string;
}

export class UpdateMitigationActionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateMitigationActionRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The friendly name for the mitigation action. You cannot change the name by using <code>UpdateMitigationAction</code>. Instead, you must delete and recreate the mitigation action with the new name.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=actionName",
  })
  actionName: string;
}

export class UpdateMitigationActionResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateMitigationActionResponse?: shared.UpdateMitigationActionResponse;
}
