/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * User groups
 */
public class Groups {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Groups(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Add group members
     * ### Description:
     * Add members to a group.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; change groups&lt;/span&gt; required.
     * 
     * ### Postcondition: 
     * New members are added to the group.
     * 
     * ### Further Information:
     * Batch function.  
     * The newly provided members will be added to the existing ones.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AddGroupMembersResponse addGroupMembers(org.openapis.openapi.models.operations.AddGroupMembersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AddGroupMembersPathParams.class, baseUrl, "/v4/groups/{group_id}/users", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AddGroupMembersResponse res = new org.openapis.openapi.models.operations.AddGroupMembersResponse() {{
            group = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Group out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Group.class);
                res.group = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Create new user group
     * ### Description:
     * Create a new user group.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; change groups&lt;/span&gt; required.
     * 
     * ### Postcondition: 
     * A new user group is created.
     * 
     * ### Further Information:
     * * If a group should **NOT** expire, leave `expireAt` empty.
     * * Group names are limited to **150** characters
     * * Forbidden characters in group name: [`&lt;`, `&gt;`]
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateGroupResponse createGroup(org.openapis.openapi.models.operations.CreateGroupRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/groups");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateGroupResponse res = new org.openapis.openapi.models.operations.CreateGroupResponse() {{
            group = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Group out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Group.class);
                res.group = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 409 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Remove user group
     * ### Description:
     * Delete a user group.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; delete groups&lt;/span&gt; required.
     * 
     * ### Postcondition: 
     * User group is deleted.
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RemoveGroupResponse removeGroup(org.openapis.openapi.models.operations.RemoveGroupRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RemoveGroupPathParams.class, baseUrl, "/v4/groups/{group_id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RemoveGroupResponse res = new org.openapis.openapi.models.operations.RemoveGroupResponse() {{
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Remove group members
     * ### Description:  
     * Remove group members.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; change groups&lt;/span&gt; required.
     * 
     * ### Postcondition: 
     * Provided users are removed from the user group.
     * 
     * ### Further Information:
     * Batch function.  
     * The provided users are removed from the user group. Maximum number of users to remove in one request is 200.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RemoveGroupMembersResponse removeGroupMembers(org.openapis.openapi.models.operations.RemoveGroupMembersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RemoveGroupMembersPathParams.class, baseUrl, "/v4/groups/{group_id}/users", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RemoveGroupMembersResponse res = new org.openapis.openapi.models.operations.RemoveGroupMembersResponse() {{
            group = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Group out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Group.class);
                res.group = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request user group
     * ### Description:  
     * Retrieve detailed information about a user group.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read groups&lt;/span&gt; required.
     * 
     * ### Postcondition: 
     * User group is returned.
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestGroupResponse requestGroup(org.openapis.openapi.models.operations.RequestGroupRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RequestGroupPathParams.class, baseUrl, "/v4/groups/{group_id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestGroupResponse res = new org.openapis.openapi.models.operations.RequestGroupResponse() {{
            group = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Group out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Group.class);
                res.group = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request group member users or / and users who can become a member
     * ### Description:  
     * Retrieve a list of group member users or / and users who can become a member.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read groups&lt;/span&gt; required.
     * 
     * ### Postcondition: 
     * List of users is returned.
     * 
     * ### Further Information:
     * 
     * ### Filtering:
     * All filter fields are connected via logical conjunction (**AND**)  
     * Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  
     * 
     * &lt;details style="padding-left: 10px"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;
     * 
     * `isMember:eq:false|user:cn:searchString`  
     * Get all users that are **NOT** in this group **AND** whose (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) is like `searchString`.
     * 
     * &lt;/details&gt;
     * 
     * ### Filtering options:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
     * | :--- | :--- | :--- | :--- | :--- |
     * | `user` | User filter | `cn` | User contains value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`). | `search String` |
     * | `isMember` | Filter group members | `eq` |  | &lt;ul&gt;&lt;li&gt;`true`&lt;/li&gt;&lt;li&gt;`false`&lt;/li&gt;&lt;li&gt;`any`&lt;/li&gt;&lt;/ul&gt;default: `true` |
     * 
     * &lt;/details&gt;
     * 
     * ### Deprecated filtering options:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
     * | :--- | :--- | :--- | :--- | :--- |
     * | &lt;del&gt;`displayName`&lt;/del&gt; | User display name filter (use `user` filter) | `cn` | User display name contains value (`firstName` **OR** `lastName` **OR** `email`). | `search String` |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestGroupMembersResponse requestGroupMembers(org.openapis.openapi.models.operations.RequestGroupMembersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RequestGroupMembersPathParams.class, baseUrl, "/v4/groups/{group_id}/users", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RequestGroupMembersQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestGroupMembersResponse res = new org.openapis.openapi.models.operations.RequestGroupMembersResponse() {{
            groupUserList = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GroupUserList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GroupUserList.class);
                res.groupUserList = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request list of roles assigned to the group
     * ### Description:  
     * Retrieve a list of all roles granted to a group.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read groups&lt;/span&gt; required.
     * 
     * ### Postcondition: 
     * List of granted roles is returned.
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestGroupRolesResponse requestGroupRoles(org.openapis.openapi.models.operations.RequestGroupRolesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RequestGroupRolesPathParams.class, baseUrl, "/v4/groups/{group_id}/roles", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestGroupRolesResponse res = new org.openapis.openapi.models.operations.RequestGroupRolesResponse() {{
            roleList = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleList.class);
                res.roleList = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request rooms granted to the group or / and rooms that can be granted
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128679; Deprecated since v4.10.0&lt;/h3&gt;
     * 
     * ### Description:  
     * Retrieves a list of rooms granted to the group and / or that can be granted.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read groups&lt;/span&gt; required.
     * 
     * ### Postcondition: 
     * List of rooms is returned.
     * 
     * ### Further Information:
     * 
     * ### Filtering:
     * All filter fields are connected via logical conjunction (**AND**)  
     * Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  
     * 
     * &lt;details style="padding-left: 10px"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;
     * 
     * `isGranted:eq:false|name:cn:searchString`  
     * Get all rooms where the group is **NOT** granted **AND** whose name is like `searchString`.
     * 
     * &lt;/details&gt;
     * 
     * ### Filtering options:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
     * | :--- | :--- | :--- | :--- | :--- |
     * | `name` | Room name filter | `cn` | Room name contains value. | `search String` |
     * | `isGranted` | Filter rooms which the group is (not) granted | `eq` |  | &lt;ul&gt;&lt;li&gt;`true`&lt;/li&gt;&lt;li&gt;`false`&lt;/li&gt;&lt;li&gt;`any`&lt;/li&gt;&lt;/ul&gt;default: `true` |
     * | `effectivePerm` | Filter rooms with DIRECT or DIRECT **AND** EFFECTIVE permissions&lt;ul&gt;&lt;li&gt;`false`: DIRECT permissions&lt;/li&gt;&lt;li&gt;`true`:  DIRECT **AND** EFFECTIVE permissions&lt;/li&gt;&lt;/ul&gt;DIRECT means: e.g. room administrator grants `read` permissions to group of users **directly** on desired room.&lt;br&gt;EFFECTIVE means: e.g. group of users gets `read` permissions on desired room through **inheritance**. | `eq` |  | `true or false`&lt;br&gt;default: `true` |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestGroupRoomsResponse requestGroupRooms(org.openapis.openapi.models.operations.RequestGroupRoomsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RequestGroupRoomsPathParams.class, baseUrl, "/v4/groups/{group_id}/rooms", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RequestGroupRoomsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestGroupRoomsResponse res = new org.openapis.openapi.models.operations.RequestGroupRoomsResponse() {{
            roomTreeDataList = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoomTreeDataList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoomTreeDataList.class);
                res.roomTreeDataList = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request list of user groups
     * ### Description:  
     * Returns a list of user groups.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read groups&lt;/span&gt; required.
     * 
     * ### Postcondition: 
     * List of user groups is returned.
     * 
     * ### Further Information:
     * 
     * ### Filtering:
     * All filter fields are connected via logical conjunction (**AND**)  
     * Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  
     * 
     * &lt;details style="padding-left: 10px"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;
     * 
     * `name:cn:searchString`  
     * Filter by group name containing `searchString`.
     * 
     * &lt;/details&gt;
     * 
     * ### Filtering options:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
     * | :--- | :--- | :--- | :--- | :--- |
     * | `name` | Group name filter | `cn` | Group name contains value. | `search String` |
     * | `hasRole` | (**`NEW`**) Group role filter&lt;br&gt;For more information about roles check **`GET /roles`** API | `eq` | Group role equals value. | &lt;ul&gt;&lt;li&gt;`CONFIG_MANAGER` - Manages global configuration&lt;/li&gt;&lt;li&gt;`USER_MANAGER` - Manages users&lt;/li&gt;&lt;li&gt;`GROUP_MANAGER` - Manages user groups&lt;/li&gt;&lt;li&gt;`ROOM_MANAGER` - Manages top level rooms&lt;/li&gt;&lt;li&gt;`LOG_AUDITOR` - Reads audit logs&lt;/li&gt;&lt;li&gt;`NONMEMBER_VIEWER` - Views users and groups when having room _"manage"_ permission&lt;/li&gt;&lt;/ul&gt; |
     * 
     * &lt;/details&gt;
     * 
     * ---
     * 
     * ### Sorting:
     * Sort string syntax: `FIELD_NAME:ORDER`  
     * `ORDER` can be `asc` or `desc`.  
     * Multiple sort fields are supported.  
     * 
     * &lt;details style="padding-left: 10px"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;
     * 
     * `name:asc|expireAt:desc`  
     * Sort by `name` ascending **AND** by `expireAt` descending.
     * 
     * &lt;/details&gt;
     * 
     * ### Sorting options:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | `FIELD_NAME` | Description |
     * | :--- | :--- |
     * | `name` | Group name |
     * | `createdAt` | Creation date |
     * | `expireAt` | Expiration date |
     * | `cntUsers` | Amount of users |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestGroupsResponse requestGroups(org.openapis.openapi.models.operations.RequestGroupsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/groups");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RequestGroupsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestGroupsResponse res = new org.openapis.openapi.models.operations.RequestGroupsResponse() {{
            groupList = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GroupList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GroupList.class);
                res.groupList = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request rooms where the group is defined as last admin group
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.10.0&lt;/h3&gt;
     * 
     * ### Description:  
     * Retrieve a list of all rooms where the group is defined as last admin group.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; change groups&lt;/span&gt; required.
     * 
     * ### Postcondition: 
     * List of rooms is returned. 
     * 
     * ### Further Information:
     * An empty list is returned if no rooms were found where the group is defined as last admin group.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestLastAdminRoomsGroupsResponse requestLastAdminRoomsGroups(org.openapis.openapi.models.operations.RequestLastAdminRoomsGroupsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RequestLastAdminRoomsGroupsPathParams.class, baseUrl, "/v4/groups/{group_id}/last_admin_rooms", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestLastAdminRoomsGroupsResponse res = new org.openapis.openapi.models.operations.RequestLastAdminRoomsGroupsResponse() {{
            lastAdminGroupRoomList = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.LastAdminGroupRoomList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.LastAdminGroupRoomList.class);
                res.lastAdminGroupRoomList = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Update user group's metadata
     * ### Description:  
     * Update user group's metadata .
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; change groups&lt;/span&gt; required.
     * 
     * ### Postcondition: 
     * User group's metadata is changed.
     * 
     * ### Further Information:
     * * If a group should **NOT** expire, leave `expireAt` empty.
     * * Group names are limited to **150** characters
     * * **All** characters are allowed.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateGroupResponse updateGroup(org.openapis.openapi.models.operations.UpdateGroupRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateGroupPathParams.class, baseUrl, "/v4/groups/{group_id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateGroupResponse res = new org.openapis.openapi.models.operations.UpdateGroupResponse() {{
            group = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Group out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Group.class);
                res.group = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 409 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }
}