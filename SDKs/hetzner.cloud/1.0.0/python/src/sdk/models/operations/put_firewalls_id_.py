"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutFirewallsIDUpdateFirewallRequest:
    
    labels: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""User-defined labels (key-value pairs)"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""New Firewall name"""  
    

@dataclasses.dataclass
class PutFirewallsIDRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of the resource"""  
    request_body: Optional[PutFirewallsIDUpdateFirewallRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesServer:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    
class PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum(str, Enum):
    r"""Type of resource referenced"""
    SERVER = 'server'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResources:
    
    server: Optional[PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesServer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server'), 'exclude': lambda f: f is None }})  
    type: Optional[PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of resource referenced"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutFirewallsIDFirewallResponseFirewallAppliedToLabelSelector:
    
    selector: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selector') }})
    r"""Label selector"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutFirewallsIDFirewallResponseFirewallAppliedToServer:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    
class PutFirewallsIDFirewallResponseFirewallAppliedToTypeEnum(str, Enum):
    r"""Type of resource referenced"""
    SERVER = 'server'
    LABEL_SELECTOR = 'label_selector'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutFirewallsIDFirewallResponseFirewallAppliedTo:
    
    type: PutFirewallsIDFirewallResponseFirewallAppliedToTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of resource referenced"""  
    applied_to_resources: Optional[list[PutFirewallsIDFirewallResponseFirewallAppliedToAppliedToResources]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applied_to_resources'), 'exclude': lambda f: f is None }})  
    label_selector: Optional[PutFirewallsIDFirewallResponseFirewallAppliedToLabelSelector] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_selector'), 'exclude': lambda f: f is None }})  
    server: Optional[PutFirewallsIDFirewallResponseFirewallAppliedToServer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server'), 'exclude': lambda f: f is None }})  
    
class PutFirewallsIDFirewallResponseFirewallRuleDirectionEnum(str, Enum):
    r"""Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`."""
    IN = 'in'
    OUT = 'out'

class PutFirewallsIDFirewallResponseFirewallRuleProtocolEnum(str, Enum):
    r"""Type of traffic to allow"""
    TCP = 'tcp'
    UDP = 'udp'
    ICMP = 'icmp'
    ESP = 'esp'
    GRE = 'gre'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutFirewallsIDFirewallResponseFirewallRule:
    
    direction: PutFirewallsIDFirewallResponseFirewallRuleDirectionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction') }})
    r"""Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`."""  
    protocol: PutFirewallsIDFirewallResponseFirewallRuleProtocolEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol') }})
    r"""Type of traffic to allow"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the Rule"""  
    destination_ips: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_ips'), 'exclude': lambda f: f is None }})
    r"""List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most."""  
    port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port'), 'exclude': lambda f: f is None }})
    r"""Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`."""  
    source_ips: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_ips'), 'exclude': lambda f: f is None }})
    r"""List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutFirewallsIDFirewallResponseFirewall:
    
    applied_to: list[PutFirewallsIDFirewallResponseFirewallAppliedTo] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applied_to') }})  
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Resource was created (in ISO-8601 format)"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Resource. Must be unique per Project."""  
    rules: list[PutFirewallsIDFirewallResponseFirewallRule] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules') }})  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""User-defined labels (key-value pairs)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutFirewallsIDFirewallResponse:
    r"""The `firewall` key contains the Firewall that was just updated"""
    
    firewall: PutFirewallsIDFirewallResponseFirewall = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firewall') }})  
    

@dataclasses.dataclass
class PutFirewallsIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    firewall_response: Optional[PutFirewallsIDFirewallResponse] = dataclasses.field(default=None)
    r"""The `firewall` key contains the Firewall that was just updated"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    