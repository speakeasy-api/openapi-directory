// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetResolverDnssecConfigXAmzTargetEnum
type GetResolverDnssecConfigXAmzTargetEnum string

const (
	GetResolverDnssecConfigXAmzTargetEnumRoute53ResolverGetResolverDnssecConfig GetResolverDnssecConfigXAmzTargetEnum = "Route53Resolver.GetResolverDnssecConfig"
)

func (e GetResolverDnssecConfigXAmzTargetEnum) ToPointer() *GetResolverDnssecConfigXAmzTargetEnum {
	return &e
}

func (e *GetResolverDnssecConfigXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Route53Resolver.GetResolverDnssecConfig":
		*e = GetResolverDnssecConfigXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetResolverDnssecConfigXAmzTargetEnum: %v", v)
	}
}

type GetResolverDnssecConfigRequest struct {
	GetResolverDnssecConfigRequest shared.GetResolverDnssecConfigRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                  *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256              *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                 *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                       *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken              *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                  *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders              *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                     GetResolverDnssecConfigXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetResolverDnssecConfigResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// Success
	GetResolverDnssecConfigResponse *shared.GetResolverDnssecConfigResponse
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
