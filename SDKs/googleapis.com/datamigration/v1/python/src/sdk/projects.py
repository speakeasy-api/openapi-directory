"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def datamigration_projects_locations_connection_profiles_create(self, request: operations.DatamigrationProjectsLocationsConnectionProfilesCreateRequest, security: operations.DatamigrationProjectsLocationsConnectionProfilesCreateSecurity) -> operations.DatamigrationProjectsLocationsConnectionProfilesCreateResponse:
        r"""Creates a new connection profile in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsConnectionProfilesCreateRequest, base_url, '/v1/{parent}/connectionProfiles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "connection_profile_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsConnectionProfilesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsConnectionProfilesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_connection_profiles_list(self, request: operations.DatamigrationProjectsLocationsConnectionProfilesListRequest, security: operations.DatamigrationProjectsLocationsConnectionProfilesListSecurity) -> operations.DatamigrationProjectsLocationsConnectionProfilesListResponse:
        r"""Retrieves a list of all connection profiles in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsConnectionProfilesListRequest, base_url, '/v1/{parent}/connectionProfiles', request)
        
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsConnectionProfilesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsConnectionProfilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListConnectionProfilesResponse])
                res.list_connection_profiles_response = out

        return res

    def datamigration_projects_locations_conversion_workspaces_apply(self, request: operations.DatamigrationProjectsLocationsConversionWorkspacesApplyRequest, security: operations.DatamigrationProjectsLocationsConversionWorkspacesApplySecurity) -> operations.DatamigrationProjectsLocationsConversionWorkspacesApplyResponse:
        r"""Applies draft tree onto a specific destination database."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsConversionWorkspacesApplyRequest, base_url, '/v1/{name}:apply', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "apply_conversion_workspace_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsConversionWorkspacesApplyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsConversionWorkspacesApplyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_conversion_workspaces_commit(self, request: operations.DatamigrationProjectsLocationsConversionWorkspacesCommitRequest, security: operations.DatamigrationProjectsLocationsConversionWorkspacesCommitSecurity) -> operations.DatamigrationProjectsLocationsConversionWorkspacesCommitResponse:
        r"""Marks all the data in the conversion workspace as committed."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsConversionWorkspacesCommitRequest, base_url, '/v1/{name}:commit', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "commit_conversion_workspace_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsConversionWorkspacesCommitRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsConversionWorkspacesCommitResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_conversion_workspaces_convert(self, request: operations.DatamigrationProjectsLocationsConversionWorkspacesConvertRequest, security: operations.DatamigrationProjectsLocationsConversionWorkspacesConvertSecurity) -> operations.DatamigrationProjectsLocationsConversionWorkspacesConvertResponse:
        r"""Creates a draft tree schema for the destination database."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsConversionWorkspacesConvertRequest, base_url, '/v1/{name}:convert', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "convert_conversion_workspace_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsConversionWorkspacesConvertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsConversionWorkspacesConvertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_conversion_workspaces_create(self, request: operations.DatamigrationProjectsLocationsConversionWorkspacesCreateRequest, security: operations.DatamigrationProjectsLocationsConversionWorkspacesCreateSecurity) -> operations.DatamigrationProjectsLocationsConversionWorkspacesCreateResponse:
        r"""Creates a new conversion workspace in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsConversionWorkspacesCreateRequest, base_url, '/v1/{parent}/conversionWorkspaces', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "conversion_workspace_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsConversionWorkspacesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsConversionWorkspacesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_conversion_workspaces_describe_conversion_workspace_revisions(self, request: operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsRequest, security: operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsSecurity) -> operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsResponse:
        r"""Retrieves a list of committed revisions of a specific conversion workspace."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsRequest, base_url, '/v1/{conversionWorkspace}:describeConversionWorkspaceRevisions', request)
        
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DescribeConversionWorkspaceRevisionsResponse])
                res.describe_conversion_workspace_revisions_response = out

        return res

    def datamigration_projects_locations_conversion_workspaces_describe_database_entities(self, request: operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesRequest, security: operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesSecurity) -> operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesResponse:
        r"""Describes the database entities tree for a specific conversion workspace and a specific tree type. Database entities are not resources like conversion workspaces or mapping rules, and they can't be created, updated or deleted. Instead, they are simple data objects describing the structure of the client database."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesRequest, base_url, '/v1/{conversionWorkspace}:describeDatabaseEntities', request)
        
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DescribeDatabaseEntitiesResponse])
                res.describe_database_entities_response = out

        return res

    def datamigration_projects_locations_conversion_workspaces_list(self, request: operations.DatamigrationProjectsLocationsConversionWorkspacesListRequest, security: operations.DatamigrationProjectsLocationsConversionWorkspacesListSecurity) -> operations.DatamigrationProjectsLocationsConversionWorkspacesListResponse:
        r"""Lists conversion workspaces in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsConversionWorkspacesListRequest, base_url, '/v1/{parent}/conversionWorkspaces', request)
        
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsConversionWorkspacesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsConversionWorkspacesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListConversionWorkspacesResponse])
                res.list_conversion_workspaces_response = out

        return res

    def datamigration_projects_locations_conversion_workspaces_mapping_rules_import(self, request: operations.DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportRequest, security: operations.DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportSecurity) -> operations.DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportResponse:
        r"""Imports the mapping rules for a given conversion workspace. Supports various formats of external rules files."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportRequest, base_url, '/v1/{parent}/mappingRules:import', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "import_mapping_rules_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsConversionWorkspacesMappingRulesImportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_conversion_workspaces_rollback(self, request: operations.DatamigrationProjectsLocationsConversionWorkspacesRollbackRequest, security: operations.DatamigrationProjectsLocationsConversionWorkspacesRollbackSecurity) -> operations.DatamigrationProjectsLocationsConversionWorkspacesRollbackResponse:
        r"""Rolls back a conversion workspace to the last committed snapshot."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsConversionWorkspacesRollbackRequest, base_url, '/v1/{name}:rollback', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsConversionWorkspacesRollbackRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsConversionWorkspacesRollbackResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_conversion_workspaces_search_background_jobs(self, request: operations.DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsRequest, security: operations.DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsSecurity) -> operations.DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsResponse:
        r"""Searches/lists the background jobs for a specific conversion workspace. The background jobs are not resources like conversion workspaces or mapping rules, and they can't be created, updated or deleted. Instead, they are a way to expose the data plane jobs log."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsRequest, base_url, '/v1/{conversionWorkspace}:searchBackgroundJobs', request)
        
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchBackgroundJobsResponse])
                res.search_background_jobs_response = out

        return res

    def datamigration_projects_locations_conversion_workspaces_seed(self, request: operations.DatamigrationProjectsLocationsConversionWorkspacesSeedRequest, security: operations.DatamigrationProjectsLocationsConversionWorkspacesSeedSecurity) -> operations.DatamigrationProjectsLocationsConversionWorkspacesSeedResponse:
        r"""Imports a snapshot of the source database into the conversion workspace."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsConversionWorkspacesSeedRequest, base_url, '/v1/{name}:seed', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "seed_conversion_workspace_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsConversionWorkspacesSeedRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsConversionWorkspacesSeedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_fetch_static_ips(self, request: operations.DatamigrationProjectsLocationsFetchStaticIpsRequest, security: operations.DatamigrationProjectsLocationsFetchStaticIpsSecurity) -> operations.DatamigrationProjectsLocationsFetchStaticIpsResponse:
        r"""Fetches a set of static IP addresses that need to be allowlisted by the customer when using the static-IP connectivity method."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsFetchStaticIpsRequest, base_url, '/v1/{name}:fetchStaticIps', request)
        
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsFetchStaticIpsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsFetchStaticIpsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchStaticIpsResponse])
                res.fetch_static_ips_response = out

        return res

    def datamigration_projects_locations_list(self, request: operations.DatamigrationProjectsLocationsListRequest, security: operations.DatamigrationProjectsLocationsListSecurity) -> operations.DatamigrationProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsListRequest, base_url, '/v1/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def datamigration_projects_locations_migration_jobs_create(self, request: operations.DatamigrationProjectsLocationsMigrationJobsCreateRequest, security: operations.DatamigrationProjectsLocationsMigrationJobsCreateSecurity) -> operations.DatamigrationProjectsLocationsMigrationJobsCreateResponse:
        r"""Creates a new migration job in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsMigrationJobsCreateRequest, base_url, '/v1/{parent}/migrationJobs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "migration_job_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsMigrationJobsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsMigrationJobsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_migration_jobs_generate_ssh_script(self, request: operations.DatamigrationProjectsLocationsMigrationJobsGenerateSSHScriptRequest, security: operations.DatamigrationProjectsLocationsMigrationJobsGenerateSSHScriptSecurity) -> operations.DatamigrationProjectsLocationsMigrationJobsGenerateSSHScriptResponse:
        r"""Generate a SSH configuration script to configure the reverse SSH connectivity."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsMigrationJobsGenerateSSHScriptRequest, base_url, '/v1/{migrationJob}:generateSshScript', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "generate_ssh_script_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsMigrationJobsGenerateSSHScriptRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsMigrationJobsGenerateSSHScriptResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SSHScript])
                res.ssh_script = out

        return res

    def datamigration_projects_locations_migration_jobs_get_iam_policy(self, request: operations.DatamigrationProjectsLocationsMigrationJobsGetIamPolicyRequest, security: operations.DatamigrationProjectsLocationsMigrationJobsGetIamPolicySecurity) -> operations.DatamigrationProjectsLocationsMigrationJobsGetIamPolicyResponse:
        r"""Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsMigrationJobsGetIamPolicyRequest, base_url, '/v1/{resource}:getIamPolicy', request)
        
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsMigrationJobsGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsMigrationJobsGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def datamigration_projects_locations_migration_jobs_list(self, request: operations.DatamigrationProjectsLocationsMigrationJobsListRequest, security: operations.DatamigrationProjectsLocationsMigrationJobsListSecurity) -> operations.DatamigrationProjectsLocationsMigrationJobsListResponse:
        r"""Lists migration jobs in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsMigrationJobsListRequest, base_url, '/v1/{parent}/migrationJobs', request)
        
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsMigrationJobsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsMigrationJobsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListMigrationJobsResponse])
                res.list_migration_jobs_response = out

        return res

    def datamigration_projects_locations_migration_jobs_patch(self, request: operations.DatamigrationProjectsLocationsMigrationJobsPatchRequest, security: operations.DatamigrationProjectsLocationsMigrationJobsPatchSecurity) -> operations.DatamigrationProjectsLocationsMigrationJobsPatchResponse:
        r"""Updates the parameters of a single migration job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsMigrationJobsPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "migration_job_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsMigrationJobsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsMigrationJobsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_migration_jobs_promote(self, request: operations.DatamigrationProjectsLocationsMigrationJobsPromoteRequest, security: operations.DatamigrationProjectsLocationsMigrationJobsPromoteSecurity) -> operations.DatamigrationProjectsLocationsMigrationJobsPromoteResponse:
        r"""Promote a migration job, stopping replication to the destination and promoting the destination to be a standalone database."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsMigrationJobsPromoteRequest, base_url, '/v1/{name}:promote', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsMigrationJobsPromoteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsMigrationJobsPromoteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_migration_jobs_restart(self, request: operations.DatamigrationProjectsLocationsMigrationJobsRestartRequest, security: operations.DatamigrationProjectsLocationsMigrationJobsRestartSecurity) -> operations.DatamigrationProjectsLocationsMigrationJobsRestartResponse:
        r"""Restart a stopped or failed migration job, resetting the destination instance to its original state and starting the migration process from scratch."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsMigrationJobsRestartRequest, base_url, '/v1/{name}:restart', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsMigrationJobsRestartRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsMigrationJobsRestartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_migration_jobs_resume(self, request: operations.DatamigrationProjectsLocationsMigrationJobsResumeRequest, security: operations.DatamigrationProjectsLocationsMigrationJobsResumeSecurity) -> operations.DatamigrationProjectsLocationsMigrationJobsResumeResponse:
        r"""Resume a migration job that is currently stopped and is resumable (was stopped during CDC phase)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsMigrationJobsResumeRequest, base_url, '/v1/{name}:resume', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsMigrationJobsResumeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsMigrationJobsResumeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_migration_jobs_set_iam_policy(self, request: operations.DatamigrationProjectsLocationsMigrationJobsSetIamPolicyRequest, security: operations.DatamigrationProjectsLocationsMigrationJobsSetIamPolicySecurity) -> operations.DatamigrationProjectsLocationsMigrationJobsSetIamPolicyResponse:
        r"""Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsMigrationJobsSetIamPolicyRequest, base_url, '/v1/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsMigrationJobsSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsMigrationJobsSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def datamigration_projects_locations_migration_jobs_start(self, request: operations.DatamigrationProjectsLocationsMigrationJobsStartRequest, security: operations.DatamigrationProjectsLocationsMigrationJobsStartSecurity) -> operations.DatamigrationProjectsLocationsMigrationJobsStartResponse:
        r"""Start an already created migration job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsMigrationJobsStartRequest, base_url, '/v1/{name}:start', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsMigrationJobsStartRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsMigrationJobsStartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_migration_jobs_stop(self, request: operations.DatamigrationProjectsLocationsMigrationJobsStopRequest, security: operations.DatamigrationProjectsLocationsMigrationJobsStopSecurity) -> operations.DatamigrationProjectsLocationsMigrationJobsStopResponse:
        r"""Stops a running migration job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsMigrationJobsStopRequest, base_url, '/v1/{name}:stop', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsMigrationJobsStopRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsMigrationJobsStopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_migration_jobs_test_iam_permissions(self, request: operations.DatamigrationProjectsLocationsMigrationJobsTestIamPermissionsRequest, security: operations.DatamigrationProjectsLocationsMigrationJobsTestIamPermissionsSecurity) -> operations.DatamigrationProjectsLocationsMigrationJobsTestIamPermissionsResponse:
        r"""Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \\"fail open\\" without warning."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsMigrationJobsTestIamPermissionsRequest, base_url, '/v1/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsMigrationJobsTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsMigrationJobsTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestIamPermissionsResponse])
                res.test_iam_permissions_response = out

        return res

    def datamigration_projects_locations_migration_jobs_verify(self, request: operations.DatamigrationProjectsLocationsMigrationJobsVerifyRequest, security: operations.DatamigrationProjectsLocationsMigrationJobsVerifySecurity) -> operations.DatamigrationProjectsLocationsMigrationJobsVerifyResponse:
        r"""Verify a migration job, making sure the destination can reach the source and that all configuration and prerequisites are met."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsMigrationJobsVerifyRequest, base_url, '/v1/{name}:verify', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsMigrationJobsVerifyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsMigrationJobsVerifyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_operations_cancel(self, request: operations.DatamigrationProjectsLocationsOperationsCancelRequest, security: operations.DatamigrationProjectsLocationsOperationsCancelSecurity) -> operations.DatamigrationProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsOperationsCancelRequest, base_url, '/v1/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def datamigration_projects_locations_operations_list(self, request: operations.DatamigrationProjectsLocationsOperationsListRequest, security: operations.DatamigrationProjectsLocationsOperationsListSecurity) -> operations.DatamigrationProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsOperationsListRequest, base_url, '/v1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    def datamigration_projects_locations_private_connections_create(self, request: operations.DatamigrationProjectsLocationsPrivateConnectionsCreateRequest, security: operations.DatamigrationProjectsLocationsPrivateConnectionsCreateSecurity) -> operations.DatamigrationProjectsLocationsPrivateConnectionsCreateResponse:
        r"""Creates a new private connection in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsPrivateConnectionsCreateRequest, base_url, '/v1/{parent}/privateConnections', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "private_connection_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsPrivateConnectionsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsPrivateConnectionsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_private_connections_delete(self, request: operations.DatamigrationProjectsLocationsPrivateConnectionsDeleteRequest, security: operations.DatamigrationProjectsLocationsPrivateConnectionsDeleteSecurity) -> operations.DatamigrationProjectsLocationsPrivateConnectionsDeleteResponse:
        r"""Deletes a single Database Migration Service private connection."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsPrivateConnectionsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsPrivateConnectionsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsPrivateConnectionsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datamigration_projects_locations_private_connections_get(self, request: operations.DatamigrationProjectsLocationsPrivateConnectionsGetRequest, security: operations.DatamigrationProjectsLocationsPrivateConnectionsGetSecurity) -> operations.DatamigrationProjectsLocationsPrivateConnectionsGetResponse:
        r"""Gets details of a single private connection."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsPrivateConnectionsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsPrivateConnectionsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsPrivateConnectionsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PrivateConnection])
                res.private_connection = out

        return res

    def datamigration_projects_locations_private_connections_list(self, request: operations.DatamigrationProjectsLocationsPrivateConnectionsListRequest, security: operations.DatamigrationProjectsLocationsPrivateConnectionsListSecurity) -> operations.DatamigrationProjectsLocationsPrivateConnectionsListResponse:
        r"""Retrieves a list of private connections in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatamigrationProjectsLocationsPrivateConnectionsListRequest, base_url, '/v1/{parent}/privateConnections', request)
        
        query_params = utils.get_query_params(operations.DatamigrationProjectsLocationsPrivateConnectionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatamigrationProjectsLocationsPrivateConnectionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPrivateConnectionsResponse])
                res.list_private_connections_response = out

        return res

    