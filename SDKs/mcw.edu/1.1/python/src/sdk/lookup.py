"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared

class Lookup:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_ensembl_gene_mapping_using_get(self, request: operations.GETEnsemblGeneMappingUsingGETRequest) -> operations.GETEnsemblGeneMappingUsingGETResponse:
        r"""Translate an RGD ID to an Ensembl Gene  ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETEnsemblGeneMappingUsingGETRequest, base_url, '/lookup/id/map/EnsemblGene/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETEnsemblGeneMappingUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_ensembl_gene_mapping_using_post(self, request: shared.RGDIDListRequest) -> operations.GetEnsemblGeneMappingUsingPOSTResponse:
        r"""Translate RGD IDs to Ensembl Gene IDs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/lookup/id/map/EnsemblGene'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEnsemblGeneMappingUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [201, 401, 403, 404]:
            pass

        return res

    def get_ensembl_protein_mapping_using_get(self, request: operations.GETEnsemblProteinMappingUsingGETRequest) -> operations.GETEnsemblProteinMappingUsingGETResponse:
        r"""Translate an RGD ID to an Ensembl Protein ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETEnsemblProteinMappingUsingGETRequest, base_url, '/lookup/id/map/EnsemblProtein/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETEnsemblProteinMappingUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_ensembl_protein_mapping_using_post(self, request: shared.RGDIDListRequest) -> operations.GetEnsemblProteinMappingUsingPOSTResponse:
        r"""Translate RGD IDs to Ensembl Protein IDs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/lookup/id/map/EnsemblProtein'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEnsemblProteinMappingUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [201, 401, 403, 404]:
            pass

        return res

    def get_ensembl_transcript_mapping_using_get(self, request: operations.GETEnsemblTranscriptMappingUsingGETRequest) -> operations.GETEnsemblTranscriptMappingUsingGETResponse:
        r"""Translate an RGD ID to an Ensembl Transcript ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETEnsemblTranscriptMappingUsingGETRequest, base_url, '/lookup/id/map/EnsemblTranscript/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETEnsemblTranscriptMappingUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_ensembl_transcript_mapping_using_post(self, request: shared.RGDIDListRequest) -> operations.GetEnsemblTranscriptMappingUsingPOSTResponse:
        r"""Translate RGD IDs to Ensembl Transcript IDs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/lookup/id/map/EnsemblTranscript'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEnsemblTranscriptMappingUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [201, 401, 403, 404]:
            pass

        return res

    def get_gtex_mapping_using_get(self, request: operations.GETGTEXMappingUsingGETRequest) -> operations.GETGTEXMappingUsingGETResponse:
        r"""Translate an RGD ID to an GTEx ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGTEXMappingUsingGETRequest, base_url, '/lookup/id/map/GTEx/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGTEXMappingUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_gtex_mapping_using_post(self, request: shared.RGDIDListRequest) -> operations.GetGTEXMappingUsingPOSTResponse:
        r"""Translate RGD IDs to GTEx IDs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/lookup/id/map/GTEx'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGTEXMappingUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [201, 401, 403, 404]:
            pass

        return res

    def get_gen_bank_nucleotide_mapping_using_get(self, request: operations.GETGenBankNucleotideMappingUsingGETRequest) -> operations.GETGenBankNucleotideMappingUsingGETResponse:
        r"""Translate an RGD ID to a GenBank Nucleotide ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGenBankNucleotideMappingUsingGETRequest, base_url, '/lookup/id/map/GenBankNucleotide/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGenBankNucleotideMappingUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_gen_bank_nucleotide_mapping_using_post(self, request: shared.RGDIDListRequest) -> operations.GetGenBankNucleotideMappingUsingPOSTResponse:
        r"""Translate RGD IDs to GenBank Nucleotide IDs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/lookup/id/map/GenBankNucleotide'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGenBankNucleotideMappingUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [201, 401, 403, 404]:
            pass

        return res

    def get_gen_bank_protein_mapping_using_get(self, request: operations.GETGenBankProteinMappingUsingGETRequest) -> operations.GETGenBankProteinMappingUsingGETResponse:
        r"""Translate an RGD ID to a GenBank Protein ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGenBankProteinMappingUsingGETRequest, base_url, '/lookup/id/map/GenBankProtein/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGenBankProteinMappingUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_gen_bank_protein_mapping_using_post(self, request: shared.RGDIDListRequest) -> operations.GetGenBankProteinMappingUsingPOSTResponse:
        r"""Translate RGD IDs to GenBank Protein IDs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/lookup/id/map/GenBankProtein'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGenBankProteinMappingUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [201, 401, 403, 404]:
            pass

        return res

    def get_gene_types_using_get(self) -> operations.GETGeneTypesUsingGETResponse:
        r"""Returns a list of gene types avialable in RGD"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/lookup/geneTypes'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGeneTypesUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_hgnc_mapping_using_get(self, request: operations.GETHGNCMappingUsingGETRequest) -> operations.GETHGNCMappingUsingGETResponse:
        r"""Translate an RGD ID to an HGNC ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETHGNCMappingUsingGETRequest, base_url, '/lookup/id/map/HGNC/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETHGNCMappingUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_hgnc_mapping_using_post(self, request: shared.RGDIDListRequest) -> operations.GetHGNCMappingUsingPOSTResponse:
        r"""Translate RGD IDs to HGNC IDs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/lookup/id/map/HGNC'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetHGNCMappingUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [201, 401, 403, 404]:
            pass

        return res

    def get_mgi_mapping_using_get(self, request: operations.GETMGIMappingUsingGETRequest) -> operations.GETMGIMappingUsingGETResponse:
        r"""Translate an RGD ID to an MGI ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETMGIMappingUsingGETRequest, base_url, '/lookup/id/map/MGI/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETMGIMappingUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_mgi_mapping_using_post(self, request: shared.RGDIDListRequest) -> operations.GetMGIMappingUsingPOSTResponse:
        r"""Translate RGD IDs to MGI IDs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/lookup/id/map/MGI'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMGIMappingUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [201, 401, 403, 404]:
            pass

        return res

    def get_maps_using_get(self, request: operations.GETMapsUsingGETRequest) -> operations.GETMapsUsingGETResponse:
        r"""Return a list assembly maps for a species"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETMapsUsingGETRequest, base_url, '/lookup/maps/{speciesTypeKey}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETMapsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_maps_using_get_1(self, request: operations.GETMapsUsingGET1Request) -> operations.GETMapsUsingGET1Response:
        r"""Return a standardUnit for an ontology if it exists"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETMapsUsingGET1Request, base_url, '/lookup/standardUnit/{accId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETMapsUsingGET1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.get_maps_using_get_1_200_wildcard_string = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_ncbi_gene_mapping_using_get(self, request: operations.GETNCBIGeneMappingUsingGETRequest) -> operations.GETNCBIGeneMappingUsingGETResponse:
        r"""Translate an RGD ID to an NCBI Gene ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETNCBIGeneMappingUsingGETRequest, base_url, '/lookup/id/map/NCBIGene/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETNCBIGeneMappingUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_ncbi_gene_mapping_using_post(self, request: shared.RGDIDListRequest) -> operations.GetNCBIGeneMappingUsingPOSTResponse:
        r"""Translate RGD IDs to NCBI Gene IDs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/lookup/id/map/NCBIGene'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNCBIGeneMappingUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [201, 401, 403, 404]:
            pass

        return res

    def get_species_types_using_get(self) -> operations.GETSpeciesTypesUsingGETResponse:
        r"""Return a Map of species type keys available in RGD"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/lookup/speciesTypeKeys'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETSpeciesTypesUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_uni_prot_mapping_using_get(self, request: operations.GETUniProtMappingUsingGETRequest) -> operations.GETUniProtMappingUsingGETResponse:
        r"""Translate an RGD ID to a UniProt ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETUniProtMappingUsingGETRequest, base_url, '/lookup/id/map/UniProt/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETUniProtMappingUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_uni_prot_mapping_using_post(self, request: shared.RGDIDListRequest) -> operations.GetUniProtMappingUsingPOSTResponse:
        r"""Translate RGD IDs to UniProt IDs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/lookup/id/map/UniProt'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUniProtMappingUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [201, 401, 403, 404]:
            pass

        return res

    