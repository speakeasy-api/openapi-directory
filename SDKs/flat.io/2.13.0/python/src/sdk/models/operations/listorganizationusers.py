"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import flaterrorresponse as shared_flaterrorresponse
from ..shared import role_enum as shared_role_enum
from ..shared import sortdirection_enum as shared_sortdirection_enum
from ..shared import userdetailsadmin as shared_userdetailsadmin
from typing import Optional


@dataclasses.dataclass
class ListOrganizationUsersSecurity:
    
    o_auth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class ListOrganizationUsersRequest:
    
    direction: Optional[shared_sortdirection_enum.SortDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""Sort direction"""  
    group: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'group', 'style': 'form', 'explode': True }})
    r"""Filter users by group"""  
    license_expiration_date: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'licenseExpirationDate', 'style': 'form', 'explode': True }})
    r"""Filter users by license expiration date or `active` / `notActive`"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""This is the maximum number of objects that may be returned"""  
    next: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next', 'style': 'form', 'explode': True }})
    r"""An opaque string cursor to fetch the next page of data.
    The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
    """  
    no_active_license: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'noActiveLicense', 'style': 'form', 'explode': True }})
    r"""Filter users who don't have an active license"""  
    only_ids: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'onlyIds', 'style': 'form', 'explode': True }})
    r"""Return only user ids"""  
    previous: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'previous', 'style': 'form', 'explode': True }})
    r"""An opaque string cursor to fetch the previous page of data.
    The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
    """  
    q: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""The query to search"""  
    role: Optional[list[shared_role_enum.RoleEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'role', 'style': 'form', 'explode': True }})
    r"""Filter users by role"""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""The order to sort the user list"""  
    

@dataclasses.dataclass
class ListOrganizationUsersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    flat_error_response: Optional[shared_flaterrorresponse.FlatErrorResponse] = dataclasses.field(default=None)
    r"""Error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    user_details_admins: Optional[list[shared_userdetailsadmin.UserDetailsAdmin]] = dataclasses.field(default=None)
    r"""List of users"""  
    