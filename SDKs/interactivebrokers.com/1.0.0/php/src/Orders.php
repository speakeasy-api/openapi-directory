<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Orders 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Cancel Order
     * 
     * Cancels the order with the referenced Customer Order ID for the account passed in the URL.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAccountsAccountOrdersCustomerOrderIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAccountsAccountOrdersCustomerOrderIdResponse
     */
	public function deleteAccountsAccountOrdersCustomerOrderId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAccountsAccountOrdersCustomerOrderIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAccountsAccountOrdersCustomerOrderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{account}/orders/{CustomerOrderId}', \OpenAPI\OpenAPI\Models\Operations\DeleteAccountsAccountOrdersCustomerOrderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAccountsAccountOrdersCustomerOrderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteAccountsAccountOrdersCustomerOrderId200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\DeleteAccountsAccountOrdersCustomerOrderId200ApplicationJSON>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 408) {
        }

        return $response;
    }
	
    /**
     * Open Orders
     * 
     * Returns a list of orders for the account passed in the URL
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountsAccountOrdersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountsAccountOrdersResponse
     */
	public function getAccountsAccountOrders(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountsAccountOrdersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountsAccountOrdersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{account}/orders', \OpenAPI\OpenAPI\Models\Operations\GetAccountsAccountOrdersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountsAccountOrdersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderStates = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OrderState>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 408) {
        }

        return $response;
    }
	
    /**
     * Return specific order info
     * 
     * Returns the order with the referenced Customer Order ID for the account passed in the URL.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountsAccountOrdersCustomerOrderIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountsAccountOrdersCustomerOrderIdResponse
     */
	public function getAccountsAccountOrdersCustomerOrderId(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountsAccountOrdersCustomerOrderIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountsAccountOrdersCustomerOrderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{account}/orders/{CustomerOrderId}', \OpenAPI\OpenAPI\Models\Operations\GetAccountsAccountOrdersCustomerOrderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountsAccountOrdersCustomerOrderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderStates = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OrderState>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 408) {
        }

        return $response;
    }
	
    /**
     * Place Order
     * 
     * Places order
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAccountsAccountOrdersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAccountsAccountOrdersResponse
     */
	public function postAccountsAccountOrders(
        \OpenAPI\OpenAPI\Models\Operations\PostAccountsAccountOrdersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAccountsAccountOrdersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{account}/orders', \OpenAPI\OpenAPI\Models\Operations\PostAccountsAccountOrdersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAccountsAccountOrdersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderStates = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OrderState>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 408) {
        }

        return $response;
    }
	
    /**
     * Modify Order
     * 
     * Allows the caller to modify the order with the referenced Customer Order ID specified in the URL. A separate Customer Order ID must be provided in the request body for the modification.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutAccountsAccountOrdersCustomerOrderIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutAccountsAccountOrdersCustomerOrderIdResponse
     */
	public function putAccountsAccountOrdersCustomerOrderId(
        \OpenAPI\OpenAPI\Models\Operations\PutAccountsAccountOrdersCustomerOrderIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutAccountsAccountOrdersCustomerOrderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{account}/orders/{CustomerOrderId}', \OpenAPI\OpenAPI\Models\Operations\PutAccountsAccountOrdersCustomerOrderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutAccountsAccountOrdersCustomerOrderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putAccountsAccountOrdersCustomerOrderId200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\PutAccountsAccountOrdersCustomerOrderId200ApplicationJSON>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 408) {
        }

        return $response;
    }
}