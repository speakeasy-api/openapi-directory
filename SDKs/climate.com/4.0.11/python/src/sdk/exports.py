"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Exports:
    r"""General data export endpoints."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def fetch_export_contents_by_id(self, request: operations.FetchExportContentsByIDRequest, security: operations.FetchExportContentsByIDSecurity) -> operations.FetchExportContentsByIDResponse:
        r"""Retrieve the binary contents of a processed export request.
        Downloads larger than `5MiB` (`5242880 bytes`) in size must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB` (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FetchExportContentsByIDRequest, base_url, '/v4/exports/{exportId}/contents', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchExportContentsByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            res.headers = http_res.headers
            
        elif http_res.status_code == 206:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.body = http_res.content
        elif http_res.status_code == 304:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out
        elif http_res.status_code in [400, 401, 403, 404, 409, 410, 416, 429, 500, 503]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def fetch_export_status_by_id(self, request: operations.FetchExportStatusByIDRequest, security: operations.FetchExportStatusByIDSecurity) -> operations.FetchExportStatusByIDResponse:
        r"""Retrieve the status of an Export.
        Check the status of an **Export** by ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FetchExportStatusByIDRequest, base_url, '/v4/exports/{exportId}/status', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchExportStatusByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ExportStatus])
                res.export_status = out
        elif http_res.status_code in [400, 401, 403, 404, 429, 500, 503]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_export(self, request: shared.Export, security: operations.PostExportSecurity) -> operations.PostExportResponse:
        r"""Initiate a new export request.
        Step one in requesting a data product. The method will return an **Export** ID which the caller will use in subsequent `GET` requests.
        The following `contentTypes` may be requested:
          * __application/vnd.climate.acrsi.geojson__ (Beta)
             Exports the planting activities accessible by the authenticated user and optionally filtered by resource owner
             as a [GeoJSON Feature Collection](https://tools.ietf.org/html/rfc7946#page-12).
        
             The export request definition must contain the following properties:
               * plantingStartDate
               * plantingEndDate
               * resourceOwnerId
        
             Requires `exports:read` and `plantingActivitySummary:read` scope.
          
          * __application/vnd.climate.harvest.geojson__
             Exports the harvesting activities accessible by the authenticated user and optionally filtered by resource owner
             as a [GeoJSON Feature Collection](https://tools.ietf.org/html/rfc7946#page-12).
        
             The export request definition must contain the following properties:
               * harvestStartDate
               * harvestEndDate
               * resourceOwnerId
        
             Requires `exports:read` and `plantingActivitySummary:read` scope.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v4/exports'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostExportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreatedExport])
                res.created_export = out
        elif http_res.status_code in [400, 401, 403, 429, 500, 503]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    