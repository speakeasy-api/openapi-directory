// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// GetBatchByExternalIDResponseBodyOptionalLink - A link to a related resource, or an empty object if there is no resource to link to
type GetBatchByExternalIDResponseBodyOptionalLink struct {
	// The URL of the linked resource, if any
	Href *string `json:"href,omitempty"`
	// The type of resource, or the type of relationship to the parent resource
	Type *string `json:"type,omitempty"`
}

// GetBatchByExternalIDResponseBodyLabelDownload - Reference to the various downloadable file formats for the generated label
type GetBatchByExternalIDResponseBodyLabelDownload struct {
	// The URL of the linked resource, if any
	Href *string `json:"href,omitempty"`
	// The URL for the pdf generated label
	Pdf *string `json:"pdf,omitempty"`
	// The URL for the png generated label
	Png *string `json:"png,omitempty"`
	// The URL for the zpl generated label
	Zpl *string `json:"zpl,omitempty"`
}

// GetBatchByExternalIDResponseBodyLabelFormatEnum - The possible file formats in which shipping labels can be downloaded.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
//
// |Label Format  | Supported Carriers
// |--------------|-----------------------------------
// |`pdf`         | All carriers
// |`png`         | `fedex` <br> `stamps_com` <br> `ups` <br> `usps`
// |`zpl`         | `access_worldwide` <br> `apc` <br> `asendia` <br> `dhl_global_mail` <br> `dhl_express` <br> `dhl_express_australia` <br> `dhl_express_canada` <br> `dhl_express_worldwide` <br> `dhl_express_uk` <br> `dpd` <br> `endicia` <br> `fedex` <br> `fedex_uk` <br> `firstmile` <br> `imex` <br> `newgistics` <br> `ontrac` <br> `rr_donnelley` <br> `stamps_com` <br> `ups` <br> `usps`
type GetBatchByExternalIDResponseBodyLabelFormatEnum string

const (
	GetBatchByExternalIDResponseBodyLabelFormatEnumPdf GetBatchByExternalIDResponseBodyLabelFormatEnum = "pdf"
	GetBatchByExternalIDResponseBodyLabelFormatEnumPng GetBatchByExternalIDResponseBodyLabelFormatEnum = "png"
	GetBatchByExternalIDResponseBodyLabelFormatEnumZpl GetBatchByExternalIDResponseBodyLabelFormatEnum = "zpl"
)

func (e GetBatchByExternalIDResponseBodyLabelFormatEnum) ToPointer() *GetBatchByExternalIDResponseBodyLabelFormatEnum {
	return &e
}

func (e *GetBatchByExternalIDResponseBodyLabelFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		fallthrough
	case "png":
		fallthrough
	case "zpl":
		*e = GetBatchByExternalIDResponseBodyLabelFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBatchByExternalIDResponseBodyLabelFormatEnum: %v", v)
	}
}

// GetBatchByExternalIDResponseBodyLabelLayoutEnum - The available layouts (sizes) in which shipping labels can be downloaded.  The label format determines which sizes are supported.  `4x6` is supported for all label formats, whereas `letter` (8.5" x 11") is only supported for `pdf` format.
type GetBatchByExternalIDResponseBodyLabelLayoutEnum string

const (
	GetBatchByExternalIDResponseBodyLabelLayoutEnumFourx6 GetBatchByExternalIDResponseBodyLabelLayoutEnum = "4x6"
	GetBatchByExternalIDResponseBodyLabelLayoutEnumLetter GetBatchByExternalIDResponseBodyLabelLayoutEnum = "letter"
)

func (e GetBatchByExternalIDResponseBodyLabelLayoutEnum) ToPointer() *GetBatchByExternalIDResponseBodyLabelLayoutEnum {
	return &e
}

func (e *GetBatchByExternalIDResponseBodyLabelLayoutEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "4x6":
		fallthrough
	case "letter":
		*e = GetBatchByExternalIDResponseBodyLabelLayoutEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBatchByExternalIDResponseBodyLabelLayoutEnum: %v", v)
	}
}

// GetBatchByExternalIDResponseBodyBatchStatusEnum - The possible batch status values
type GetBatchByExternalIDResponseBodyBatchStatusEnum string

const (
	GetBatchByExternalIDResponseBodyBatchStatusEnumOpen                GetBatchByExternalIDResponseBodyBatchStatusEnum = "open"
	GetBatchByExternalIDResponseBodyBatchStatusEnumQueued              GetBatchByExternalIDResponseBodyBatchStatusEnum = "queued"
	GetBatchByExternalIDResponseBodyBatchStatusEnumProcessing          GetBatchByExternalIDResponseBodyBatchStatusEnum = "processing"
	GetBatchByExternalIDResponseBodyBatchStatusEnumCompleted           GetBatchByExternalIDResponseBodyBatchStatusEnum = "completed"
	GetBatchByExternalIDResponseBodyBatchStatusEnumCompletedWithErrors GetBatchByExternalIDResponseBodyBatchStatusEnum = "completed_with_errors"
	GetBatchByExternalIDResponseBodyBatchStatusEnumArchived            GetBatchByExternalIDResponseBodyBatchStatusEnum = "archived"
	GetBatchByExternalIDResponseBodyBatchStatusEnumNotifying           GetBatchByExternalIDResponseBodyBatchStatusEnum = "notifying"
	GetBatchByExternalIDResponseBodyBatchStatusEnumInvalid             GetBatchByExternalIDResponseBodyBatchStatusEnum = "invalid"
)

func (e GetBatchByExternalIDResponseBodyBatchStatusEnum) ToPointer() *GetBatchByExternalIDResponseBodyBatchStatusEnum {
	return &e
}

func (e *GetBatchByExternalIDResponseBodyBatchStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "queued":
		fallthrough
	case "processing":
		fallthrough
	case "completed":
		fallthrough
	case "completed_with_errors":
		fallthrough
	case "archived":
		fallthrough
	case "notifying":
		fallthrough
	case "invalid":
		*e = GetBatchByExternalIDResponseBodyBatchStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBatchByExternalIDResponseBodyBatchStatusEnum: %v", v)
	}
}

// GetBatchByExternalIDResponseBody - Batches are an advanced feature of ShipEngine designed for users who need to generate hundreds or
// thousands of labels at a time.
type GetBatchByExternalIDResponseBody struct {
	// Link to batch errors endpoint
	BatchErrorsURL GetBatchByExternalIDResponseBodyOptionalLink `json:"batch_errors_url"`
	// A string that uniquely identifies the batch
	BatchID string `json:"batch_id"`
	// Link to batch labels query
	BatchLabelsURL OptionalLink `json:"batch_labels_url"`
	// Custom notes you can add for each created batch
	BatchNotes string `json:"batch_notes"`
	// The batch number.
	BatchNumber string `json:"batch_number"`
	// The batch shipments endpoint
	BatchShipmentsURL OptionalLink `json:"batch_shipments_url"`
	// The number of labels generated in the batch
	Completed int `json:"completed"`
	// The total of errors, warnings, and completed properties
	Count int `json:"count"`
	// The date and time the batch was created in ShipEngine
	CreatedAt time.Time `json:"created_at"`
	// The number of errors that occurred while generating the batch
	Errors int `json:"errors"`
	// A string that uniquely identifies the external batch
	ExternalBatchID string `json:"external_batch_id"`
	// The form download for any customs that are needed
	FormDownload GetBatchByExternalIDResponseBodyOptionalLink `json:"form_download"`
	// The number of forms for customs that are available for download
	Forms int `json:"forms"`
	// The label download for the batch
	LabelDownload GetBatchByExternalIDResponseBodyLabelDownload   `json:"label_download"`
	LabelFormat   GetBatchByExternalIDResponseBodyLabelFormatEnum `json:"label_format"`
	// label layout
	LabelLayout GetBatchByExternalIDResponseBodyLabelLayoutEnum `json:"label_layout"`
	// The date and time the batch was processed in ShipEngine
	ProcessedAt time.Time                                       `json:"processed_at"`
	Status      GetBatchByExternalIDResponseBodyBatchStatusEnum `json:"status"`
	// The number of warnings that occurred while generating the batch
	Warnings int `json:"warnings"`
}
