"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Management:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def analytics_management_accounts_list(self, request: operations.AnalyticsManagementAccountsListRequest, security: operations.AnalyticsManagementAccountsListSecurity) -> operations.AnalyticsManagementAccountsListResponse:
        r"""Lists all accounts to which the user has access."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/management/accounts'
        
        query_params = utils.get_query_params(operations.AnalyticsManagementAccountsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementAccountsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def analytics_management_goals_list(self, request: operations.AnalyticsManagementGoalsListRequest, security: operations.AnalyticsManagementGoalsListSecurity) -> operations.AnalyticsManagementGoalsListResponse:
        r"""Lists goals to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementGoalsListRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementGoalsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementGoalsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def analytics_management_profiles_list(self, request: operations.AnalyticsManagementProfilesListRequest, security: operations.AnalyticsManagementProfilesListSecurity) -> operations.AnalyticsManagementProfilesListResponse:
        r"""Lists views (profiles) to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfilesListRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementProfilesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def analytics_management_segments_list(self, request: operations.AnalyticsManagementSegmentsListRequest, security: operations.AnalyticsManagementSegmentsListSecurity) -> operations.AnalyticsManagementSegmentsListResponse:
        r"""Lists advanced segments to which the user has access."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/management/segments'
        
        query_params = utils.get_query_params(operations.AnalyticsManagementSegmentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementSegmentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def analytics_management_webproperties_list(self, request: operations.AnalyticsManagementWebpropertiesListRequest, security: operations.AnalyticsManagementWebpropertiesListSecurity) -> operations.AnalyticsManagementWebpropertiesListResponse:
        r"""Lists web properties to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementWebpropertiesListRequest, base_url, '/management/accounts/{accountId}/webproperties', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementWebpropertiesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementWebpropertiesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    