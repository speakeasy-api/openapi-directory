// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateWorkspaceAPIKeyPathParams struct {
	// The ID of the workspace to create an API key.
	WorkspaceID string `pathParam:"style=simple,explode=false,name=workspaceId"`
}

type CreateWorkspaceAPIKeyHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateWorkspaceAPIKeyRequestBody struct {
	// Specifies the name of the key. Keynames must be unique to the workspace.
	KeyName string `json:"keyName"`
	// <p>Specifies the permission level of the key.</p> <p> Valid values: <code>VIEWER</code>|<code>EDITOR</code>|<code>ADMIN</code> </p>
	KeyRole string `json:"keyRole"`
	// Specifies the time in seconds until the key expires. Keys can be valid for up to 30 days.
	SecondsToLive int64 `json:"secondsToLive"`
}

type CreateWorkspaceAPIKeyRequest struct {
	PathParams CreateWorkspaceAPIKeyPathParams
	Headers    CreateWorkspaceAPIKeyHeaders
	Request    CreateWorkspaceAPIKeyRequestBody `request:"mediaType=application/json"`
}

type CreateWorkspaceAPIKeyResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateWorkspaceAPIKeyResponse *shared.CreateWorkspaceAPIKeyResponse
	// InternalServerException
	InternalServerException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
