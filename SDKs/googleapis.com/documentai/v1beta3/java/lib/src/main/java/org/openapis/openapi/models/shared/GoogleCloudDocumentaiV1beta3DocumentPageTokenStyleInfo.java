/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo - Font and other text style attributes.
 */
public class GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo {
    /**
     * Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&amp;red green:&amp;green blue:&amp;blue alpha:&amp;alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha &lt;= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red &lt;&lt; 16) | (green &lt;&lt; 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i &lt; missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backgroundColor")
    public GoogleTypeColor backgroundColor;

    public GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo withBackgroundColor(GoogleTypeColor backgroundColor) {
        this.backgroundColor = backgroundColor;
        return this;
    }
    
    /**
     * Whether the text is bold (equivalent to font_weight is at least `700`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bold")
    public Boolean bold;

    public GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo withBold(Boolean bold) {
        this.bold = bold;
        return this;
    }
    
    /**
     * Font size in points (`1` point is `\u00b9\u2044\u2087\u2082` inches).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fontSize")
    public Integer fontSize;

    public GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo withFontSize(Integer fontSize) {
        this.fontSize = fontSize;
        return this;
    }
    
    /**
     * Name or style of the font.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fontType")
    public String fontType;

    public GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo withFontType(String fontType) {
        this.fontType = fontType;
        return this;
    }
    
    /**
     * TrueType weight on a scale `100` (thin) to `1000` (ultra-heavy). Normal is `400`, bold is `700`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fontWeight")
    public Integer fontWeight;

    public GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo withFontWeight(Integer fontWeight) {
        this.fontWeight = fontWeight;
        return this;
    }
    
    /**
     * Whether the text is handwritten.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("handwritten")
    public Boolean handwritten;

    public GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo withHandwritten(Boolean handwritten) {
        this.handwritten = handwritten;
        return this;
    }
    
    /**
     * Whether the text is italic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("italic")
    public Boolean italic;

    public GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo withItalic(Boolean italic) {
        this.italic = italic;
        return this;
    }
    
    /**
     * Letter spacing in points.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("letterSpacing")
    public Double letterSpacing;

    public GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo withLetterSpacing(Double letterSpacing) {
        this.letterSpacing = letterSpacing;
        return this;
    }
    
    /**
     * Font size in pixels, equal to _unrounded font_size_ * _resolution_ \u00f7 `72.0`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pixelFontSize")
    public Double pixelFontSize;

    public GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo withPixelFontSize(Double pixelFontSize) {
        this.pixelFontSize = pixelFontSize;
        return this;
    }
    
    /**
     * Whether the text is in small caps.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smallcaps")
    public Boolean smallcaps;

    public GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo withSmallcaps(Boolean smallcaps) {
        this.smallcaps = smallcaps;
        return this;
    }
    
    /**
     * Whether the text is strikethrough.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("strikeout")
    public Boolean strikeout;

    public GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo withStrikeout(Boolean strikeout) {
        this.strikeout = strikeout;
        return this;
    }
    
    /**
     * Whether the text is a subscript.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscript")
    public Boolean subscript;

    public GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo withSubscript(Boolean subscript) {
        this.subscript = subscript;
        return this;
    }
    
    /**
     * Whether the text is a superscript.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("superscript")
    public Boolean superscript;

    public GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo withSuperscript(Boolean superscript) {
        this.superscript = superscript;
        return this;
    }
    
    /**
     * Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&amp;red green:&amp;green blue:&amp;blue alpha:&amp;alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha &lt;= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red &lt;&lt; 16) | (green &lt;&lt; 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i &lt; missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("textColor")
    public GoogleTypeColor textColor;

    public GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo withTextColor(GoogleTypeColor textColor) {
        this.textColor = textColor;
        return this;
    }
    
    /**
     * Whether the text is underlined.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("underlined")
    public Boolean underlined;

    public GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo withUnderlined(Boolean underlined) {
        this.underlined = underlined;
        return this;
    }
    
    public GoogleCloudDocumentaiV1beta3DocumentPageTokenStyleInfo(){}
}
