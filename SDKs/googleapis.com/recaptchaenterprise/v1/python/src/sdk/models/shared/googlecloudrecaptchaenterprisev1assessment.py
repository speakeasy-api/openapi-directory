"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudrecaptchaenterprisev1accountdefenderassessment as shared_googlecloudrecaptchaenterprisev1accountdefenderassessment
from ..shared import googlecloudrecaptchaenterprisev1accountverificationinfo as shared_googlecloudrecaptchaenterprisev1accountverificationinfo
from ..shared import googlecloudrecaptchaenterprisev1event as shared_googlecloudrecaptchaenterprisev1event
from ..shared import googlecloudrecaptchaenterprisev1firewallpolicyassessment as shared_googlecloudrecaptchaenterprisev1firewallpolicyassessment
from ..shared import googlecloudrecaptchaenterprisev1fraudpreventionassessment as shared_googlecloudrecaptchaenterprisev1fraudpreventionassessment
from ..shared import googlecloudrecaptchaenterprisev1privatepasswordleakverification as shared_googlecloudrecaptchaenterprisev1privatepasswordleakverification
from ..shared import googlecloudrecaptchaenterprisev1riskanalysis as shared_googlecloudrecaptchaenterprisev1riskanalysis
from ..shared import googlecloudrecaptchaenterprisev1tokenproperties as shared_googlecloudrecaptchaenterprisev1tokenproperties
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudRecaptchaenterpriseV1AssessmentInput:
    r"""A reCAPTCHA Enterprise assessment resource."""
    
    account_defender_assessment: Optional[shared_googlecloudrecaptchaenterprisev1accountdefenderassessment.GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountDefenderAssessment'), 'exclude': lambda f: f is None }})
    r"""Account defender risk assessment."""  
    account_verification: Optional[shared_googlecloudrecaptchaenterprisev1accountverificationinfo.GoogleCloudRecaptchaenterpriseV1AccountVerificationInfoInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountVerification'), 'exclude': lambda f: f is None }})
    r"""Information about account verification, used for identity verification."""  
    event: Optional[shared_googlecloudrecaptchaenterprisev1event.GoogleCloudRecaptchaenterpriseV1Event] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event'), 'exclude': lambda f: f is None }})
    r"""The event being assessed."""  
    firewall_policy_assessment: Optional[shared_googlecloudrecaptchaenterprisev1firewallpolicyassessment.GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firewallPolicyAssessment'), 'exclude': lambda f: f is None }})
    r"""Policy config assessment."""  
    fraud_prevention_assessment: Optional[shared_googlecloudrecaptchaenterprisev1fraudpreventionassessment.GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fraudPreventionAssessment'), 'exclude': lambda f: f is None }})
    r"""Assessment for Fraud Prevention."""  
    private_password_leak_verification: Optional[shared_googlecloudrecaptchaenterprisev1privatepasswordleakverification.GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerificationInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privatePasswordLeakVerification'), 'exclude': lambda f: f is None }})
    r"""Private password leak verification info."""  
    risk_analysis: Optional[shared_googlecloudrecaptchaenterprisev1riskanalysis.GoogleCloudRecaptchaenterpriseV1RiskAnalysis] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('riskAnalysis'), 'exclude': lambda f: f is None }})
    r"""Risk analysis result for an event."""  
    token_properties: Optional[shared_googlecloudrecaptchaenterprisev1tokenproperties.GoogleCloudRecaptchaenterpriseV1TokenProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokenProperties'), 'exclude': lambda f: f is None }})
    r"""Properties of the provided event token."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudRecaptchaenterpriseV1Assessment:
    r"""A reCAPTCHA Enterprise assessment resource."""
    
    account_defender_assessment: Optional[shared_googlecloudrecaptchaenterprisev1accountdefenderassessment.GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountDefenderAssessment'), 'exclude': lambda f: f is None }})
    r"""Account defender risk assessment."""  
    account_verification: Optional[shared_googlecloudrecaptchaenterprisev1accountverificationinfo.GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountVerification'), 'exclude': lambda f: f is None }})
    r"""Information about account verification, used for identity verification."""  
    event: Optional[shared_googlecloudrecaptchaenterprisev1event.GoogleCloudRecaptchaenterpriseV1Event] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event'), 'exclude': lambda f: f is None }})
    r"""The event being assessed."""  
    firewall_policy_assessment: Optional[shared_googlecloudrecaptchaenterprisev1firewallpolicyassessment.GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firewallPolicyAssessment'), 'exclude': lambda f: f is None }})
    r"""Policy config assessment."""  
    fraud_prevention_assessment: Optional[shared_googlecloudrecaptchaenterprisev1fraudpreventionassessment.GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fraudPreventionAssessment'), 'exclude': lambda f: f is None }})
    r"""Assessment for Fraud Prevention."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name for the Assessment in the format \\"projects/{project}/assessments/{assessment}\\"."""  
    private_password_leak_verification: Optional[shared_googlecloudrecaptchaenterprisev1privatepasswordleakverification.GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privatePasswordLeakVerification'), 'exclude': lambda f: f is None }})
    r"""Private password leak verification info."""  
    risk_analysis: Optional[shared_googlecloudrecaptchaenterprisev1riskanalysis.GoogleCloudRecaptchaenterpriseV1RiskAnalysis] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('riskAnalysis'), 'exclude': lambda f: f is None }})
    r"""Risk analysis result for an event."""  
    token_properties: Optional[shared_googlecloudrecaptchaenterprisev1tokenproperties.GoogleCloudRecaptchaenterpriseV1TokenProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokenProperties'), 'exclude': lambda f: f is None }})
    r"""Properties of the provided event token."""  
    