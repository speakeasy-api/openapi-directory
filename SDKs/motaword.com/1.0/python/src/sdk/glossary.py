"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Glossary:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_glossary_json(self, request: operations.CreateGlossaryJSONRequest) -> operations.CreateGlossaryJSONResponse:
        r"""Upload a glossary file
        Upload a new glossary file to your project to be used during translation. Glossaries can be CSV or TBX files.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateGlossaryJSONRequest, base_url, '/projects/{projectId}/glossaries', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "glossary_upload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGlossaryJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Glossary])
                res.glossary = out
        elif http_res.status_code in [400, 404, 405, 406, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def create_glossary_multipart(self, request: operations.CreateGlossaryMultipartRequest) -> operations.CreateGlossaryMultipartResponse:
        r"""Upload a glossary file
        Upload a new glossary file to your project to be used during translation. Glossaries can be CSV or TBX files.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateGlossaryMultipartRequest, base_url, '/projects/{projectId}/glossaries', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "glossary_upload_request1", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGlossaryMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Glossary])
                res.glossary = out
        elif http_res.status_code in [400, 404, 405, 406, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def delete_glossary(self, request: operations.DeleteGlossaryRequest) -> operations.DeleteGlossaryResponse:
        r"""Delete a glossary
        Delete the existing glossary from the project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteGlossaryRequest, base_url, '/projects/{projectId}/glossaries/{glossaryId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteGlossaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [404, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def download_global_glossary(self) -> operations.DownloadGlobalGlossaryResponse:
        r"""Download account glossary.
        Download your corporate account's global glossary. This endpoint is available only for corporate account customers. This glossary will be automatically attached to each new project under your account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/glossary'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadGlobalGlossaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.download_global_glossary_200_application_json_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def download_glossary(self, request: operations.DownloadGlossaryRequest) -> operations.DownloadGlossaryResponse:
        r"""Download a glossary
        Download a previously uploaded glossary file.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DownloadGlossaryRequest, base_url, '/projects/{projectId}/glossaries/{glossaryId}/download', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadGlossaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.download_glossary_200_application_json_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_glossaries(self, request: operations.GetGlossariesRequest) -> operations.GetGlossariesResponse:
        r"""View glossaries
        View a list of glossaries previously uploaded to the project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGlossariesRequest, base_url, '/projects/{projectId}/glossaries', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGlossariesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GlossaryList])
                res.glossary_list = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_glossary(self, request: operations.GetGlossaryRequest) -> operations.GetGlossaryResponse:
        r"""View a glossary
        View the details of a glossary file uploaded to a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGlossaryRequest, base_url, '/projects/{projectId}/glossaries/{glossaryId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGlossaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Glossary])
                res.glossary = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_global_glossary_json(self, request: shared.AccountGlossaryUploadRequest) -> operations.UpdateGlobalGlossaryJSONResponse:
        r"""Create or update the account glossary
        Update your corporate account's global glossary. This endpoint is available only for corporate account customers. This glossary will be automatically attached to each new project under your account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/glossary'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateGlobalGlossaryJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [400, 405]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_global_glossary_multipart(self, request: shared.AccountGlossaryUploadRequest1) -> operations.UpdateGlobalGlossaryMultipartResponse:
        r"""Create or update the account glossary
        Update your corporate account's global glossary. This endpoint is available only for corporate account customers. This glossary will be automatically attached to each new project under your account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/glossary'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateGlobalGlossaryMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [400, 405]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_glossary_json(self, request: operations.UpdateGlossaryJSONRequest) -> operations.UpdateGlossaryJSONResponse:
        r"""Update a glossary
        Update the existing glossary file in the project. Public users are allowed to have only 1 glossary per project and file name and contents will replaced with the new glossary file that you are uploading via this endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateGlossaryJSONRequest, base_url, '/projects/{projectId}/glossaries/{glossaryId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "glossary_upload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateGlossaryJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Glossary])
                res.glossary = out
        elif http_res.status_code in [400, 404, 405, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_glossary_multipart(self, request: operations.UpdateGlossaryMultipartRequest) -> operations.UpdateGlossaryMultipartResponse:
        r"""Update a glossary
        Update the existing glossary file in the project. Public users are allowed to have only 1 glossary per project and file name and contents will replaced with the new glossary file that you are uploading via this endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateGlossaryMultipartRequest, base_url, '/projects/{projectId}/glossaries/{glossaryId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "glossary_upload_request1", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateGlossaryMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Glossary])
                res.glossary = out
        elif http_res.status_code in [400, 404, 405, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    