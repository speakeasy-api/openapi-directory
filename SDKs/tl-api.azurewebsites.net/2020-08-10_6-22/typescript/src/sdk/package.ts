/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Package {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete existing package
   *
   */
  packageDelete(
    req: operations.PackageDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PackageDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PackageDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/Package";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PackageDeleteResponse =
        new operations.PackageDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfBoolean = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfBoolean
            );
          }
          break;
        case [400, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfString = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfString
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiException = utils.objectToClass(
              httpRes?.data,
              shared.ApiException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get package details by packageId
   *
   */
  packageGet(
    req: operations.PackageGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PackageGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PackageGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/Package";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PackageGetResponse =
        new operations.PackageGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfPackageDTO = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfPackageDTO
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiException = utils.objectToClass(
              httpRes?.data,
              shared.ApiException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Insert new package into the system
   *
   */
  packagePost(
    req: shared.PackageDTO,
    config?: AxiosRequestConfig
  ): Promise<operations.PackagePostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.PackageDTO(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/Package";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PackagePostResponse =
        new operations.PackagePostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfStatusDTO = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfStatusDTO
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiException = utils.objectToClass(
              httpRes?.data,
              shared.ApiException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update existing package by its ID
   *
   */
  packagePut(
    req: shared.PackageDTO,
    config?: AxiosRequestConfig
  ): Promise<operations.PackagePutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.PackageDTO(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/Package";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PackagePutResponse =
        new operations.PackagePutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfStatusDTO = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfStatusDTO
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiException = utils.objectToClass(
              httpRes?.data,
              shared.ApiException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Search packages
   *
   */
  packageSearch(
    req: operations.PackageSearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PackageSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PackageSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/Package/Search";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PackageSearchResponse =
        new operations.PackageSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfPackageSearchDTOS = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.defaultResponseDTOOfPackageSearchDTOS = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfPackageSearchDTO,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfListOfPackageSearchDTO =
              utils.objectToClass(
                httpRes?.data,
                shared.DefaultResponseDTOOfListOfPackageSearchDTO
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiException = utils.objectToClass(
              httpRes?.data,
              shared.ApiException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Status update of existing package
   */
  packageUpdateStatus(
    req: operations.PackageUpdateStatusRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PackageUpdateStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PackageUpdateStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/Package/UpdateStatus";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PackageUpdateStatusResponse =
        new operations.PackageUpdateStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfBoolean = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfBoolean
            );
          }
          break;
        case [400, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultResponseDTOOfString = utils.objectToClass(
              httpRes?.data,
              shared.DefaultResponseDTOOfString
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiException = utils.objectToClass(
              httpRes?.data,
              shared.ApiException
            );
          }
          break;
      }

      return res;
    });
  }
}
