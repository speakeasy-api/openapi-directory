// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GroupsGetStatisticsAggregatedSingleStatusEnum - Status of group ("deleted"/"active")
type GroupsGetStatisticsAggregatedSingleStatusEnum string

const (
	GroupsGetStatisticsAggregatedSingleStatusEnumDeleted GroupsGetStatisticsAggregatedSingleStatusEnum = "deleted"
	GroupsGetStatisticsAggregatedSingleStatusEnumActive  GroupsGetStatisticsAggregatedSingleStatusEnum = "active"
)

func (e GroupsGetStatisticsAggregatedSingleStatusEnum) ToPointer() *GroupsGetStatisticsAggregatedSingleStatusEnum {
	return &e
}

func (e *GroupsGetStatisticsAggregatedSingleStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deleted":
		fallthrough
	case "active":
		*e = GroupsGetStatisticsAggregatedSingleStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupsGetStatisticsAggregatedSingleStatusEnum: %v", v)
	}
}

// GroupsGetStatisticsAggregatedSingleTimeFrameEnum - Timeframe of the request. See list at $timeframeList
type GroupsGetStatisticsAggregatedSingleTimeFrameEnum string

const (
	GroupsGetStatisticsAggregatedSingleTimeFrameEnumToday         GroupsGetStatisticsAggregatedSingleTimeFrameEnum = "today"
	GroupsGetStatisticsAggregatedSingleTimeFrameEnumYesterday     GroupsGetStatisticsAggregatedSingleTimeFrameEnum = "yesterday"
	GroupsGetStatisticsAggregatedSingleTimeFrameEnumLast7         GroupsGetStatisticsAggregatedSingleTimeFrameEnum = "last7"
	GroupsGetStatisticsAggregatedSingleTimeFrameEnumLast30        GroupsGetStatisticsAggregatedSingleTimeFrameEnum = "last30"
	GroupsGetStatisticsAggregatedSingleTimeFrameEnumLastmonth     GroupsGetStatisticsAggregatedSingleTimeFrameEnum = "lastmonth"
	GroupsGetStatisticsAggregatedSingleTimeFrameEnumCurrentmonth  GroupsGetStatisticsAggregatedSingleTimeFrameEnum = "currentmonth"
	GroupsGetStatisticsAggregatedSingleTimeFrameEnumPreviousmonth GroupsGetStatisticsAggregatedSingleTimeFrameEnum = "previousmonth"
	GroupsGetStatisticsAggregatedSingleTimeFrameEnumLast90        GroupsGetStatisticsAggregatedSingleTimeFrameEnum = "last90"
	GroupsGetStatisticsAggregatedSingleTimeFrameEnumLast120       GroupsGetStatisticsAggregatedSingleTimeFrameEnum = "last120"
	GroupsGetStatisticsAggregatedSingleTimeFrameEnumLast180       GroupsGetStatisticsAggregatedSingleTimeFrameEnum = "last180"
	GroupsGetStatisticsAggregatedSingleTimeFrameEnumLast12months  GroupsGetStatisticsAggregatedSingleTimeFrameEnum = "last12months"
	GroupsGetStatisticsAggregatedSingleTimeFrameEnumLastyear      GroupsGetStatisticsAggregatedSingleTimeFrameEnum = "lastyear"
	GroupsGetStatisticsAggregatedSingleTimeFrameEnumCurrentyear   GroupsGetStatisticsAggregatedSingleTimeFrameEnum = "currentyear"
	GroupsGetStatisticsAggregatedSingleTimeFrameEnumBeginning     GroupsGetStatisticsAggregatedSingleTimeFrameEnum = "beginning"
	GroupsGetStatisticsAggregatedSingleTimeFrameEnumCustom        GroupsGetStatisticsAggregatedSingleTimeFrameEnum = "custom"
)

func (e GroupsGetStatisticsAggregatedSingleTimeFrameEnum) ToPointer() *GroupsGetStatisticsAggregatedSingleTimeFrameEnum {
	return &e
}

func (e *GroupsGetStatisticsAggregatedSingleTimeFrameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "today":
		fallthrough
	case "yesterday":
		fallthrough
	case "last7":
		fallthrough
	case "last30":
		fallthrough
	case "lastmonth":
		fallthrough
	case "currentmonth":
		fallthrough
	case "previousmonth":
		fallthrough
	case "last90":
		fallthrough
	case "last120":
		fallthrough
	case "last180":
		fallthrough
	case "last12months":
		fallthrough
	case "lastyear":
		fallthrough
	case "currentyear":
		fallthrough
	case "beginning":
		fallthrough
	case "custom":
		*e = GroupsGetStatisticsAggregatedSingleTimeFrameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupsGetStatisticsAggregatedSingleTimeFrameEnum: %v", v)
	}
}

type GroupsGetStatisticsAggregatedSingleRequest struct {
	// Is the group is marked as favourite
	Favourite *bool `queryParam:"style=form,explode=true,name=favourite"`
	// If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)
	FromDay *string `queryParam:"style=form,explode=true,name=fromDay"`
	// If using "yesterday" or "today" timeframe you can ask for the hourly detail
	Hourly *bool `queryParam:"style=form,explode=true,name=hourly"`
	// Status of group ("deleted"/"active")
	Status *GroupsGetStatisticsAggregatedSingleStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// A comma separated list of tags you want to filter with.
	Tag *string `queryParam:"style=form,explode=true,name=tag"`
	// Timeframe of the request. See list at $timeframeList
	TimeFrame GroupsGetStatisticsAggregatedSingleTimeFrameEnum `queryParam:"style=form,explode=true,name=timeFrame"`
	// If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)
	ToDay *string `queryParam:"style=form,explode=true,name=toDay"`
}

type GroupsGetStatisticsAggregatedSingleResponse struct {
	APICoreDtoAggregatedAggregatedResult *shared.APICoreDtoAggregatedAggregatedResult
	ContentType                          string
	StatusCode                           int
	RawResponse                          *http.Response
}
