<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class VisionExamples 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create an Example
     * 
     * Adds an example with the specified label to a dataset.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddExampleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddExampleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddExampleResponse
     */
	public function addExample(
        \OpenAPI\OpenAPI\Models\Operations\AddExampleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddExampleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddExampleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/vision/datasets/{datasetId}/examples', \OpenAPI\OpenAPI\Models\Operations\AddExampleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddExampleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Example', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get All Examples for Label
     * 
     * Returns all the examples for the specified label. Returns both uploaded examples and feedback examples.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetExamplesByLabel1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetExamplesByLabel1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetExamplesByLabel1Response
     */
	public function getExamplesByLabel1(
        \OpenAPI\OpenAPI\Models\Operations\GetExamplesByLabel1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\GetExamplesByLabel1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetExamplesByLabel1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/vision/examples');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetExamplesByLabel1Request::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetExamplesByLabel1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exampleList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExampleList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get All Examples
     * 
     * Returns all the examples for the specified dataset. By default, returns examples created by uploading them from a .zip file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetExamples1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetExamples1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetExamples1Response
     */
	public function getExamples1(
        \OpenAPI\OpenAPI\Models\Operations\GetExamples1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\GetExamples1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetExamples1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/vision/datasets/{datasetId}/examples', \OpenAPI\OpenAPI\Models\Operations\GetExamples1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetExamples1Request::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetExamples1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exampleList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExampleList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Feedback Example
     * 
     * Adds a feedback example to the dataset associated with the specified model.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProvideFeedback1RequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProvideFeedback1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProvideFeedback1Response
     */
	public function provideFeedback1(
        \OpenAPI\OpenAPI\Models\Operations\ProvideFeedback1RequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\ProvideFeedback1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProvideFeedback1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/vision/feedback');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProvideFeedback1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Example', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create Feedback Examples From a Zip File
     * 
     * Adds feedback examples to the dataset associated with the specified object detection model.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsync1RequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsync1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsync1Response
     */
	public function updateDatasetAsync1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsync1RequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsync1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsync1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/vision/bulkfeedback');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsync1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataset = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Dataset', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create Examples From a Zip File
     * 
     * Adds examples from a .zip file to a dataset. You can use this call only with a dataset that was created from a .zip file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsync2Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsync2Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsync2Response
     */
	public function updateDatasetAsync2(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsync2Request $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsync2Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsync2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/vision/datasets/{datasetId}/upload', \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsync2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsync2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataset = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Dataset', 'json');
            }
        }

        return $response;
    }
}