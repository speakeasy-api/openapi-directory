"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Oidc:
    r"""Endpoints to manage GitHub OIDC configuration using the REST API."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def oidc_get_oidc_custom_sub_template_for_org(self, request: operations.OidcGetOidcCustomSubTemplateForOrgRequest) -> operations.OidcGetOidcCustomSubTemplateForOrgResponse:
        r"""Get the customization template for an OIDC subject claim for an organization
        Gets the customization template for an OpenID Connect (OIDC) subject claim.
        You must authenticate using an access token with the `read:org` scope to use this endpoint.
        GitHub Apps must have the `organization_administration:write` permission to use this endpoint.
        https://docs.github.com/enterprise-server@3.8/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.OidcGetOidcCustomSubTemplateForOrgRequest, base_url, '/orgs/{org}/actions/oidc/customization/sub', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OidcGetOidcCustomSubTemplateForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OidcCustomSub])
                res.oidc_custom_sub = out

        return res

    def oidc_update_oidc_custom_sub_template_for_org(self, request: operations.OidcUpdateOidcCustomSubTemplateForOrgRequest) -> operations.OidcUpdateOidcCustomSubTemplateForOrgResponse:
        r"""Set the customization template for an OIDC subject claim for an organization
        Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.
        You must authenticate using an access token with the `write:org` scope to use this endpoint.
        GitHub Apps must have the `admin:org` permission to use this endpoint.
        https://docs.github.com/enterprise-server@3.8/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.OidcUpdateOidcCustomSubTemplateForOrgRequest, base_url, '/orgs/{org}/actions/oidc/customization/sub', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "oidc_custom_sub", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OidcUpdateOidcCustomSubTemplateForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    