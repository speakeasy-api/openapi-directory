// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TwoHundredResultResultAstPackagePathTypeEnum - The type of the path operation
type TwoHundredResultResultAstPackagePathTypeEnum string

const (
	TwoHundredResultResultAstPackagePathTypeEnumImport  TwoHundredResultResultAstPackagePathTypeEnum = "import"
	TwoHundredResultResultAstPackagePathTypeEnumPackage TwoHundredResultResultAstPackagePathTypeEnum = "package"
)

func (e TwoHundredResultResultAstPackagePathTypeEnum) ToPointer() *TwoHundredResultResultAstPackagePathTypeEnum {
	return &e
}

func (e *TwoHundredResultResultAstPackagePathTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "import":
		fallthrough
	case "package":
		*e = TwoHundredResultResultAstPackagePathTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TwoHundredResultResultAstPackagePathTypeEnum: %v", v)
	}
}

type TwoHundredResultResultAstPackagePath struct {
	// The type of the path operation
	Type *TwoHundredResultResultAstPackagePathTypeEnum `json:"type,omitempty"`
	// The path variable
	Value *string `json:"value,omitempty"`
}

type TwoHundredResultResultAstPackage struct {
	// The path to the package
	Path []TwoHundredResultResultAstPackagePath `json:"path,omitempty"`
}

type TwoHundredResultResultAstRulesBodyTermsValue struct {
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

type TwoHundredResultResultAstRulesBodyTerms struct {
	// The type of the term variable
	Type *string `json:"type,omitempty"`
	// The list of types and values for the term variable
	Value []TwoHundredResultResultAstRulesBodyTermsValue `json:"value,omitempty"`
}

type TwoHundredResultResultAstRulesBody struct {
	// The location of this term in the list (starts at 0)
	Index *float64 `json:"index,omitempty"`
	// The type/value pairing for this term
	Terms []TwoHundredResultResultAstRulesBodyTerms `json:"terms,omitempty"`
}

// TwoHundredResultResultAstRulesHeadKey - The type/value pairing for this rule's head
type TwoHundredResultResultAstRulesHeadKey struct {
	// The type of the head
	Type *string `json:"type,omitempty"`
	// The value of the head
	Value *string `json:"value,omitempty"`
}

type TwoHundredResultResultAstRulesHead struct {
	// The type/value pairing for this rule's head
	Key *TwoHundredResultResultAstRulesHeadKey `json:"key,omitempty"`
	// The head of the rule
	Name *string `json:"name,omitempty"`
}

type TwoHundredResultResultAstRules struct {
	// A list of the terms in this rule
	Body []TwoHundredResultResultAstRulesBody `json:"body,omitempty"`
	Head *TwoHundredResultResultAstRulesHead  `json:"head,omitempty"`
}

// TwoHundredResultResultAst - The types for declarations and runtime objects passed to your implementation. This consists of an abstract syntax tree (AST) of policy modules, package and import declarations, rules, expressions, and terms.
// https://godoc.org/github.com/open-policy-agent/opa/ast - AST
type TwoHundredResultResultAst struct {
	Package *TwoHundredResultResultAstPackage `json:"package,omitempty"`
	// When OPA evaluates a rule, it generates the content of a [virtual documents](https://www.openpolicyagent.org/docs/latest/philosophy/#the-opa-document-model)
	Rules []TwoHundredResultResultAstRules `json:"rules,omitempty"`
}

type TwoHundredResultResult struct {
	// The types for declarations and runtime objects passed to your implementation. This consists of an abstract syntax tree (AST) of policy modules, package and import declarations, rules, expressions, and terms.
	Ast *TwoHundredResultResultAst `json:"ast,omitempty"`
	// The name of a policy module
	ID *string `json:"id,omitempty"`
	// A string representation of the full Rego policy
	Raw *string `json:"raw,omitempty"`
}

// TwoHundredResult - Success
type TwoHundredResult struct {
	Result []TwoHundredResultResult `json:"result,omitempty"`
}
