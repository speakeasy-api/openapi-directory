/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class BooksLayersVolumeAnnotationsListSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class BooksLayersVolumeAnnotationsListRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * The content version for the requested volume.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=contentVersion",
  })
  contentVersion: string;

  /**
   * The end offset to end retrieving data from.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=endOffset",
  })
  endOffset?: string;

  /**
   * The end position to end retrieving data from.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=endPosition",
  })
  endPosition?: string;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * The ID for the layer to get the annotations.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=layerId",
  })
  layerId: string;

  /**
   * The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: 'en_US'.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=locale",
  })
  locale?: string;

  /**
   * Maximum number of results to return
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: number;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * The value of the nextToken from the previous page.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pageToken",
  })
  pageToken?: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * Set to true to return deleted annotations. updatedMin must be in the request to use this. Defaults to false.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=showDeleted",
  })
  showDeleted?: boolean;

  /**
   * String to identify the originator of this request.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=source",
  })
  source?: string;

  /**
   * The start offset to start retrieving data from.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=startOffset",
  })
  startOffset?: string;

  /**
   * The start position to start retrieving data from.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=startPosition",
  })
  startPosition?: string;

  /**
   * RFC 3339 timestamp to restrict to items updated prior to this timestamp (exclusive).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=updatedMax",
  })
  updatedMax?: string;

  /**
   * RFC 3339 timestamp to restrict to items updated since this timestamp (inclusive).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=updatedMin",
  })
  updatedMin?: string;

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;

  /**
   * The version of the volume annotations that you are requesting.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=volumeAnnotationsVersion",
  })
  volumeAnnotationsVersion?: string;

  /**
   * The volume to retrieve annotations for.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=volumeId",
  })
  volumeId: string;
}

export class BooksLayersVolumeAnnotationsListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  volumeannotations?: shared.Volumeannotations;
}
