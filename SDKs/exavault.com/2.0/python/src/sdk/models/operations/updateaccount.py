"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import accountresponse as shared_accountresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAccountUpdateAccountRequestBodyAllowedIPRanges:
    
    ip_end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipEnd'), 'exclude': lambda f: f is None }})  
    ip_start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipStart'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAccountUpdateAccountRequestBodyBrandingSettingsValues:
    
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companyName'), 'exclude': lambda f: f is None }})
    r"""Custom company name to include in copyright and title bar."""  
    custom_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customEmail'), 'exclude': lambda f: f is None }})
    r"""Address to use as sender of email messages generated by ExaVault"""  
    theme: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('theme'), 'exclude': lambda f: f is None }})
    r"""Color scheme for web file manager. Valid options are **default**, **light** and **dark**"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAccountUpdateAccountRequestBodyAccountQuotaValues:
    
    notice_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noticeEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether the system should email the account owner if the account storage exceeds the noticeThreshold value. Storage notice emails are sent no mo once per day."""  
    notice_threshold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noticeThreshold'), 'exclude': lambda f: f is None }})
    r"""Percent of account storage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive)."""  
    transactions_notice_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionsNoticeEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether the system should email the account owner if the daily transaction usage exceeds the transactionsNoticeThreshold value. Transaction notice emails are sent no more than once per day."""  
    transactions_notice_threshold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionsNoticeThreshold'), 'exclude': lambda f: f is None }})
    r"""Percent of daily transaction usage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAccountUpdateAccountRequestBody:
    r"""Update Account Settings"""
    
    account_onboarding: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountOnboarding'), 'exclude': lambda f: f is None }})
    r"""Whether extra help popups can be enabled for users in the web file manager."""  
    allowed_ip_ranges: Optional[list[UpdateAccountUpdateAccountRequestBodyAllowedIPRanges]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedIpRanges'), 'exclude': lambda f: f is None }})
    r"""IP Address Ranges for restricting account access"""  
    branding_settings: Optional[UpdateAccountUpdateAccountRequestBodyBrandingSettingsValues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brandingSettings'), 'exclude': lambda f: f is None }})  
    complex_passwords: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complexPasswords'), 'exclude': lambda f: f is None }})
    r"""Whether to require complex passwords for all passwords."""  
    custom_signature: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customSignature'), 'exclude': lambda f: f is None }})
    r"""Signature to be automatically added to the bottom of emails generated by the account."""  
    email_content: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailContent'), 'exclude': lambda f: f is None }})
    r"""Content of welcome email template."""  
    email_subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailSubject'), 'exclude': lambda f: f is None }})
    r"""Subject line for welcome emails"""  
    external_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalDomain'), 'exclude': lambda f: f is None }})
    r"""Custom address used for web file manager. Not available for all account types."""  
    quota: Optional[UpdateAccountUpdateAccountRequestBodyAccountQuotaValues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quota'), 'exclude': lambda f: f is None }})  
    secure_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secureOnly'), 'exclude': lambda f: f is None }})
    r"""Whether unencrypted FTP connections should be denied for the account."""  
    show_referral_links: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showReferralLinks'), 'exclude': lambda f: f is None }})
    r"""Whether to display links for others to sign up on share views and invitation emails"""  
    

@dataclasses.dataclass
class UpdateAccountRequest:
    
    ev_access_token: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-access-token', 'style': 'simple', 'explode': False }})
    r"""Access token required to make the API call."""  
    ev_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-api-key', 'style': 'simple', 'explode': False }})
    r"""API Key required to make the API call."""  
    request_body: Optional[UpdateAccountUpdateAccountRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    r"""Update Account Settings"""  
    

@dataclasses.dataclass
class UpdateAccountResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    account_response: Optional[shared_accountresponse.AccountResponse] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    