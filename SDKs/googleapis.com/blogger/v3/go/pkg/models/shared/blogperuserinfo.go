// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BlogPerUserInfoRoleEnum - Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER).
type BlogPerUserInfoRoleEnum string

const (
	BlogPerUserInfoRoleEnumViewTypeUnspecified BlogPerUserInfoRoleEnum = "VIEW_TYPE_UNSPECIFIED"
	BlogPerUserInfoRoleEnumReader              BlogPerUserInfoRoleEnum = "READER"
	BlogPerUserInfoRoleEnumAuthor              BlogPerUserInfoRoleEnum = "AUTHOR"
	BlogPerUserInfoRoleEnumAdmin               BlogPerUserInfoRoleEnum = "ADMIN"
)

func (e *BlogPerUserInfoRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "VIEW_TYPE_UNSPECIFIED":
		fallthrough
	case "READER":
		fallthrough
	case "AUTHOR":
		fallthrough
	case "ADMIN":
		*e = BlogPerUserInfoRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BlogPerUserInfoRoleEnum: %s", s)
	}
}

type BlogPerUserInfo struct {
	// ID of the Blog resource.
	BlogID *string `json:"blogId,omitempty"`
	// True if the user has Admin level access to the blog.
	HasAdminAccess *bool `json:"hasAdminAccess,omitempty"`
	// The kind of this entity. Always blogger#blogPerUserInfo.
	Kind *string `json:"kind,omitempty"`
	// The Photo Album Key for the user when adding photos to the blog.
	PhotosAlbumKey *string `json:"photosAlbumKey,omitempty"`
	// Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER).
	Role *BlogPerUserInfoRoleEnum `json:"role,omitempty"`
	// ID of the User.
	UserID *string `json:"userId,omitempty"`
}
