"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudvideointelligencev1_videocontext as shared_googlecloudvideointelligencev1_videocontext
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudVideointelligenceV1AnnotateVideoRequestFeaturesEnum(str, Enum):
    FEATURE_UNSPECIFIED = 'FEATURE_UNSPECIFIED'
    LABEL_DETECTION = 'LABEL_DETECTION'
    SHOT_CHANGE_DETECTION = 'SHOT_CHANGE_DETECTION'
    EXPLICIT_CONTENT_DETECTION = 'EXPLICIT_CONTENT_DETECTION'
    FACE_DETECTION = 'FACE_DETECTION'
    SPEECH_TRANSCRIPTION = 'SPEECH_TRANSCRIPTION'
    TEXT_DETECTION = 'TEXT_DETECTION'
    OBJECT_TRACKING = 'OBJECT_TRACKING'
    LOGO_RECOGNITION = 'LOGO_RECOGNITION'
    PERSON_DETECTION = 'PERSON_DETECTION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudVideointelligenceV1AnnotateVideoRequest:
    r"""Video annotation request."""
    
    features: Optional[list[GoogleCloudVideointelligenceV1AnnotateVideoRequestFeaturesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('features'), 'exclude': lambda f: f is None }})
    r"""Required. Requested video annotation features."""  
    input_content: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputContent'), 'exclude': lambda f: f is None }})
    r"""The video data bytes. If unset, the input video(s) should be specified via the `input_uri`. If set, `input_uri` must be unset."""  
    input_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputUri'), 'exclude': lambda f: f is None }})
    r"""Input video location. Currently, only [Cloud Storage](https://cloud.google.com/storage/) URIs are supported. URIs must be specified in the following format: `gs://bucket-id/object-id` (other URI formats return google.rpc.Code.INVALID_ARGUMENT). For more information, see [Request URIs](https://cloud.google.com/storage/docs/request-endpoints). To identify multiple videos, a video URI may include wildcards in the `object-id`. Supported wildcards: '*' to match 0 or more characters; '?' to match 1 character. If unset, the input video should be embedded in the request as `input_content`. If set, `input_content` must be unset."""  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locationId'), 'exclude': lambda f: f is None }})
    r"""Optional. Cloud region where annotation should take place. Supported cloud regions are: `us-east1`, `us-west1`, `europe-west1`, `asia-east1`. If no region is specified, the region will be determined based on video file location."""  
    output_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputUri'), 'exclude': lambda f: f is None }})
    r"""Optional. Location where the output (in JSON format) should be stored. Currently, only [Cloud Storage](https://cloud.google.com/storage/) URIs are supported. These must be specified in the following format: `gs://bucket-id/object-id` (other URI formats return google.rpc.Code.INVALID_ARGUMENT). For more information, see [Request URIs](https://cloud.google.com/storage/docs/request-endpoints)."""  
    video_context: Optional[shared_googlecloudvideointelligencev1_videocontext.GoogleCloudVideointelligenceV1VideoContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoContext'), 'exclude': lambda f: f is None }})
    r"""Video context and/or feature-specific parameters."""  
    