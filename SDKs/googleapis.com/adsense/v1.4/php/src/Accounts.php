<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Accounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get Auto ad code for a given ad client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsGetAdCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsGetAdCodeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsGetAdCodeResponse
     */
	public function adsenseAccountsAdclientsGetAdCode(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsGetAdCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsGetAdCodeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsGetAdCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}/adcode', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsGetAdCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsGetAdCodeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsGetAdCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adCode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdCode', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all ad clients in the specified account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListResponse
     */
	public function adsenseAccountsAdclientsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdclientsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adClients = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdClients', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all custom channels which the specified ad unit belongs to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsCustomchannelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsCustomchannelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsCustomchannelsListResponse
     */
	public function adsenseAccountsAdunitsCustomchannelsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsCustomchannelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsCustomchannelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsCustomchannelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/customchannels', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsCustomchannelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsCustomchannelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsCustomchannelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customChannels = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomChannels', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified ad unit in the specified ad client for the specified account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetResponse
     */
	public function adsenseAccountsAdunitsGet(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adUnit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdUnit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get ad code for the specified ad unit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetAdCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetAdCodeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetAdCodeResponse
     */
	public function adsenseAccountsAdunitsGetAdCode(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetAdCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetAdCodeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetAdCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetAdCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetAdCodeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsGetAdCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adCode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdCode', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all ad units in the specified ad client for the specified account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsListResponse
     */
	public function adsenseAccountsAdunitsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}/adunits', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAdunitsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adUnits = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdUnits', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Dismiss (delete) the specified alert from the specified publisher AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsDeleteResponse
     */
	public function adsenseAccountsAlertsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/alerts/{alertId}', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List the alerts for the specified AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListResponse
     */
	public function adsenseAccountsAlertsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/alerts', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsAlertsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->alerts = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Alerts', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all ad units in the specified custom channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsAdunitsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsAdunitsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsAdunitsListResponse
     */
	public function adsenseAccountsCustomchannelsAdunitsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsAdunitsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsAdunitsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsAdunitsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}/adunits', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsAdunitsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsAdunitsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsAdunitsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adUnits = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdUnits', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the specified custom channel from the specified ad client for the specified account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsGetResponse
     */
	public function adsenseAccountsCustomchannelsGet(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all custom channels in the specified ad client for the specified account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsListResponse
     */
	public function adsenseAccountsCustomchannelsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}/customchannels', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsCustomchannelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customChannels = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomChannels', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get information about the selected AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetResponse
     */
	public function adsenseAccountsGet(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all accounts available to this AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListResponse
     */
	public function adsenseAccountsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accounts = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Accounts', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the payments for the specified AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListResponse
     */
	public function adsenseAccountsPaymentsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/payments', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsPaymentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payments = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Payments', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateResponse
     */
	public function adsenseAccountsReportsGenerate(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/reports', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsGenerateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adsenseReportsGenerateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdsenseReportsGenerateResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate an AdSense report based on the saved report ID sent in the query parameters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateResponse
     */
	public function adsenseAccountsReportsSavedGenerate(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/reports/{savedReportId}', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedGenerateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adsenseReportsGenerateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdsenseReportsGenerateResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all saved reports in the specified AdSense account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListResponse
     */
	public function adsenseAccountsReportsSavedList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/reports/saved', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsReportsSavedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->savedReports = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SavedReports', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List a specific saved ad style for the specified account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesGetResponse
     */
	public function adsenseAccountsSavedadstylesGet(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/savedadstyles/{savedAdStyleId}', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->savedAdStyle = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SavedAdStyle', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all saved ad styles in the specified account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesListResponse
     */
	public function adsenseAccountsSavedadstylesList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/savedadstyles', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsSavedadstylesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->savedAdStyles = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SavedAdStyles', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all URL channels in the specified ad client for the specified account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsUrlchannelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsUrlchannelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsUrlchannelsListResponse
     */
	public function adsenseAccountsUrlchannelsList(
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsUrlchannelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsUrlchannelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsUrlchannelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/adclients/{adClientId}/urlchannels', \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsUrlchannelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsUrlchannelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdsenseAccountsUrlchannelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->urlChannels = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UrlChannels', 'json');
            }
        }

        return $response;
    }
}