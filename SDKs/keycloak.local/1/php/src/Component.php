<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Component 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * deleteRealmComponentsId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmComponentsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmComponentsIdResponse
     */
	public function deleteRealmComponentsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmComponentsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmComponentsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/components/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmComponentsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmComponentsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * getRealmComponents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsResponse
     */
	public function getRealmComponents(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/components', \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->componentRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ComponentRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getRealmComponentsId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsIdResponse
     */
	public function getRealmComponentsId(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/components/{id}', \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->componentRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ComponentRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List of subcomponent types that are available to configure for a particular parent component.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsIdSubComponentTypesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsIdSubComponentTypesResponse
     */
	public function getRealmComponentsIdSubComponentTypes(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsIdSubComponentTypesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsIdSubComponentTypesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/components/{id}/sub-component-types', \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsIdSubComponentTypesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsIdSubComponentTypesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmComponentsIdSubComponentTypesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->componentTypeRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ComponentTypeRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * postRealmComponents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmComponentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmComponentsResponse
     */
	public function postRealmComponents(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmComponentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmComponentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/components', \OpenAPI\OpenAPI\Models\Operations\PostRealmComponentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "componentRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmComponentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * putRealmComponentsId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmComponentsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmComponentsIdResponse
     */
	public function putRealmComponentsId(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmComponentsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmComponentsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/components/{id}', \OpenAPI\OpenAPI\Models\Operations\PutRealmComponentsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "componentRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmComponentsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
}