"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import compressionenum_enum as shared_compressionenum_enum
from ..shared import encryptionalg_enum as shared_encryptionalg_enum
from ..shared import mdnresponse_enum as shared_mdnresponse_enum
from ..shared import mdnsigningalg_enum as shared_mdnsigningalg_enum
from ..shared import signingalg_enum as shared_signingalg_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class As2ConnectorConfig:
    r"""Contains the details for a connector object. The connector object is used for AS2 outbound processes, to connect the Transfer Family customer with the trading partner."""
    
    compression: Optional[shared_compressionenum_enum.CompressionEnumEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Compression'), 'exclude': lambda f: f is None }})  
    encryption_algorithm: Optional[shared_encryptionalg_enum.EncryptionAlgEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionAlgorithm'), 'exclude': lambda f: f is None }})  
    local_profile_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LocalProfileId'), 'exclude': lambda f: f is None }})  
    mdn_response: Optional[shared_mdnresponse_enum.MdnResponseEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MdnResponse'), 'exclude': lambda f: f is None }})  
    mdn_signing_algorithm: Optional[shared_mdnsigningalg_enum.MdnSigningAlgEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MdnSigningAlgorithm'), 'exclude': lambda f: f is None }})  
    message_subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MessageSubject'), 'exclude': lambda f: f is None }})  
    partner_profile_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PartnerProfileId'), 'exclude': lambda f: f is None }})  
    signing_algorithm: Optional[shared_signingalg_enum.SigningAlgEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SigningAlgorithm'), 'exclude': lambda f: f is None }})  
    