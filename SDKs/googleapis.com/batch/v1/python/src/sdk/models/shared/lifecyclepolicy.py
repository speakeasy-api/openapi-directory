"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import actioncondition as shared_actioncondition
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LifecyclePolicyActionEnum(str, Enum):
    r"""Action to execute when ActionCondition is true. When RETRY_TASK is specified, we will retry failed tasks if we notice any exit code match and fail tasks if no match is found. Likewise, when FAIL_TASK is specified, we will fail tasks if we notice any exit code match and retry tasks if no match is found."""
    ACTION_UNSPECIFIED = 'ACTION_UNSPECIFIED'
    RETRY_TASK = 'RETRY_TASK'
    FAIL_TASK = 'FAIL_TASK'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LifecyclePolicy:
    r"""LifecyclePolicy describes how to deal with task failures based on different conditions."""
    
    action: Optional[LifecyclePolicyActionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""Action to execute when ActionCondition is true. When RETRY_TASK is specified, we will retry failed tasks if we notice any exit code match and fail tasks if no match is found. Likewise, when FAIL_TASK is specified, we will fail tasks if we notice any exit code match and retry tasks if no match is found."""  
    action_condition: Optional[shared_actioncondition.ActionCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actionCondition'), 'exclude': lambda f: f is None }})
    r"""Conditions for actions to deal with task failures."""  
    