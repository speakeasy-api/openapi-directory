/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * HttpRouteRouteMatch - RouteMatch defines specifications used to match requests. If multiple match types are set, this RouteMatch will match if ALL type of matches are matched.
 */
public class HttpRouteRouteMatch {
    /**
     * The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fullPathMatch")
    public String fullPathMatch;
    public HttpRouteRouteMatch withFullPathMatch(String fullPathMatch) {
        this.fullPathMatch = fullPathMatch;
        return this;
    }
    
    /**
     * Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headers")
    public HttpRouteHeaderMatch[] headers;
    public HttpRouteRouteMatch withHeaders(HttpRouteHeaderMatch[] headers) {
        this.headers = headers;
        return this;
    }
    
    /**
     * Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignoreCase")
    public Boolean ignoreCase;
    public HttpRouteRouteMatch withIgnoreCase(Boolean ignoreCase) {
        this.ignoreCase = ignoreCase;
        return this;
    }
    
    /**
     * The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefixMatch")
    public String prefixMatch;
    public HttpRouteRouteMatch withPrefixMatch(String prefixMatch) {
        this.prefixMatch = prefixMatch;
        return this;
    }
    
    /**
     * Specifies a list of query parameters to match against. ALL of the query parameters must be matched.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queryParameters")
    public HttpRouteQueryParameterMatch[] queryParameters;
    public HttpRouteRouteMatch withQueryParameters(HttpRouteQueryParameterMatch[] queryParameters) {
        this.queryParameters = queryParameters;
        return this;
    }
    
    /**
     * The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regexMatch")
    public String regexMatch;
    public HttpRouteRouteMatch withRegexMatch(String regexMatch) {
        this.regexMatch = regexMatch;
        return this;
    }
    
}
