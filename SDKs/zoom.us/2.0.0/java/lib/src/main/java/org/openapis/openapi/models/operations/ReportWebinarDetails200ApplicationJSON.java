/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ReportWebinarDetails200ApplicationJSON - **HTTP Status Code:** `200`&lt;br&gt;
 * Webinar details returned.&lt;br&gt;
 * This is only available for paid account:{accountId}.
 */
public class ReportWebinarDetails200ApplicationJSON {
    /**
     * Custom keys and values assigned to the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_keys")
    public ReportWebinarDetails200ApplicationJSONCustomKeys[] customKeys;
    public ReportWebinarDetails200ApplicationJSON withCustomKeys(ReportWebinarDetails200ApplicationJSONCustomKeys[] customKeys) {
        this.customKeys = customKeys;
        return this;
    }
    
    /**
     * Department of the host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dept")
    public String dept;
    public ReportWebinarDetails200ApplicationJSON withDept(String dept) {
        this.dept = dept;
        return this;
    }
    
    /**
     * Meeting duration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Long duration;
    public ReportWebinarDetails200ApplicationJSON withDuration(Long duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * Meeting end time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("end_time")
    public OffsetDateTime endTime;
    public ReportWebinarDetails200ApplicationJSON withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public ReportWebinarDetails200ApplicationJSON withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Number of meeting participants.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("participants_count")
    public Long participantsCount;
    public ReportWebinarDetails200ApplicationJSON withParticipantsCount(Long participantsCount) {
        this.participantsCount = participantsCount;
        return this;
    }
    
    /**
     * Meeting start time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start_time")
    public OffsetDateTime startTime;
    public ReportWebinarDetails200ApplicationJSON withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Meeting topic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topic")
    public String topic;
    public ReportWebinarDetails200ApplicationJSON withTopic(String topic) {
        this.topic = topic;
        return this;
    }
    
    /**
     * Number of Webinar minutes. This represents the total amount of Webinar minutes attended by each participant including the host, for a Webinar hosted by the user. For instance if there were one host(named A) and one participant(named B) in a Webinar, the value of total_minutes would be calculated as below:
     * 
     * **total_minutes** = Total Webinar Attendance Minutes of A + Total Webinar Attendance Minutes of B
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_minutes")
    public Long totalMinutes;
    public ReportWebinarDetails200ApplicationJSON withTotalMinutes(Long totalMinutes) {
        this.totalMinutes = totalMinutes;
        return this;
    }
    
    /**
     * Tracking fields.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_fields")
    public ReportWebinarDetails200ApplicationJSONTrackingFields[] trackingFields;
    public ReportWebinarDetails200ApplicationJSON withTrackingFields(ReportWebinarDetails200ApplicationJSONTrackingFields[] trackingFields) {
        this.trackingFields = trackingFields;
        return this;
    }
    
    /**
     * Meeting type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public Long type;
    public ReportWebinarDetails200ApplicationJSON withType(Long type) {
        this.type = type;
        return this;
    }
    
    /**
     * User email.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_email")
    public String userEmail;
    public ReportWebinarDetails200ApplicationJSON withUserEmail(String userEmail) {
        this.userEmail = userEmail;
        return this;
    }
    
    /**
     * User display name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_name")
    public String userName;
    public ReportWebinarDetails200ApplicationJSON withUserName(String userName) {
        this.userName = userName;
        return this;
    }
    
    /**
     * Webinar UUID. Each webinar instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated when the next instance of the webinar starts). Double encode the UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    public String uuid;
    public ReportWebinarDetails200ApplicationJSON withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }
    
}
