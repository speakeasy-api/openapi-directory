"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import anywhereconfiguration as shared_anywhereconfiguration
from ..shared import certificateconfiguration as shared_certificateconfiguration
from ..shared import computetype_enum as shared_computetype_enum
from ..shared import ec2instancetype_enum as shared_ec2instancetype_enum
from ..shared import fleetaction_enum as shared_fleetaction_enum
from ..shared import fleetstatus_enum as shared_fleetstatus_enum
from ..shared import fleettype_enum as shared_fleettype_enum
from ..shared import operatingsystem_enum as shared_operatingsystem_enum
from ..shared import protectionpolicy_enum as shared_protectionpolicy_enum
from ..shared import resourcecreationlimitpolicy as shared_resourcecreationlimitpolicy
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FleetAttributes:
    r"""<p>Describes a GameLift fleet of game hosting resources.</p> <p> <b>Related actions</b> </p>"""
    
    anywhere_configuration: Optional[shared_anywhereconfiguration.AnywhereConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnywhereConfiguration'), 'exclude': lambda f: f is None }})
    r"""GameLift Anywhere configuration options for your Anywhere fleets."""  
    build_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BuildArn'), 'exclude': lambda f: f is None }})  
    build_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BuildId'), 'exclude': lambda f: f is None }})  
    certificate_configuration: Optional[shared_certificateconfiguration.CertificateConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CertificateConfiguration'), 'exclude': lambda f: f is None }})
    r"""Determines whether a TLS/SSL certificate is generated for a fleet. This feature must be enabled when creating the fleet. All instances in a fleet share the same certificate. The certificate can be retrieved by calling the <a href=\\"https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk.html\\">GameLift Server SDK</a> operation <code>GetInstanceCertificate</code>."""  
    compute_type: Optional[shared_computetype_enum.ComputeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ComputeType'), 'exclude': lambda f: f is None }})  
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    fleet_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FleetArn'), 'exclude': lambda f: f is None }})  
    fleet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FleetId'), 'exclude': lambda f: f is None }})  
    fleet_type: Optional[shared_fleettype_enum.FleetTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FleetType'), 'exclude': lambda f: f is None }})  
    instance_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceRoleArn'), 'exclude': lambda f: f is None }})  
    instance_type: Optional[shared_ec2instancetype_enum.Ec2InstanceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceType'), 'exclude': lambda f: f is None }})  
    log_paths: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LogPaths'), 'exclude': lambda f: f is None }})  
    metric_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetricGroups'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    new_game_session_protection_policy: Optional[shared_protectionpolicy_enum.ProtectionPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NewGameSessionProtectionPolicy'), 'exclude': lambda f: f is None }})  
    operating_system: Optional[shared_operatingsystem_enum.OperatingSystemEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OperatingSystem'), 'exclude': lambda f: f is None }})  
    resource_creation_limit_policy: Optional[shared_resourcecreationlimitpolicy.ResourceCreationLimitPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceCreationLimitPolicy'), 'exclude': lambda f: f is None }})
    r"""<p>A policy that puts limits on the number of game sessions that a player can create within a specified span of time. With this policy, you can control players' ability to consume available resources.</p> <p>The policy is evaluated when a player tries to create a new game session. On receiving a <code>CreateGameSession</code> request, GameLift checks that the player (identified by <code>CreatorId</code>) has created fewer than game session limit in the specified time period.</p>"""  
    script_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScriptArn'), 'exclude': lambda f: f is None }})  
    script_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScriptId'), 'exclude': lambda f: f is None }})  
    server_launch_parameters: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServerLaunchParameters'), 'exclude': lambda f: f is None }})  
    server_launch_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServerLaunchPath'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_fleetstatus_enum.FleetStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    stopped_actions: Optional[list[shared_fleetaction_enum.FleetActionEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StoppedActions'), 'exclude': lambda f: f is None }})  
    termination_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TerminationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    