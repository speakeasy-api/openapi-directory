"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SensitiveDataDisabilityDisabilityClassifications:
    r"""The disabilty classifications model"""
    
    classification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification'), 'exclude': lambda f: f is None }})
    r"""Indicates the type of disability. This field is only allowed if hasDisability is set to 1=Yes. Values include:<br  /><br  />Auditory<br  />Cognitive, learning, and neurological<br  />Physical<br  />Speech<br  />Vision<br  />Prefer not to say<br  /><br  />Valid values can be obtained from Company Codes endpoint, codeResource = disabilityClassification"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SensitiveDataDisability:
    r"""Add or update disability data."""
    
    disability: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disability'), 'exclude': lambda f: f is None }})
    r"""Description of employee's disability or accommodation.<br  />Max length: 50"""  
    disability_classifications: Optional[list[SensitiveDataDisabilityDisabilityClassifications]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabilityClassifications'), 'exclude': lambda f: f is None }})
    r"""Add or update employee's disability classifications"""  
    has_disability: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasDisability'), 'exclude': lambda f: f is None }})
    r"""Indicates if the employee has a disability. Values include:<br  /><br  />0 = No<br  />1 = Yes<br  />2 = Prefer not to say"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SensitiveDataEthnicityEthnicRacialIdentities:
    r"""The ethnic racial identity model"""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Employee's preferred or chosen ethnicity or race.<br  />Max length: 40."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SensitiveDataEthnicity:
    r"""Add or update ethnicity data."""
    
    ethnicity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ethnicity'), 'exclude': lambda f: f is None }})
    r"""Employee's legal ethnicity or race.<br  />A = Asian<br  />B = Black<br  />H = Hispanic<br  />I = American Indian<br  />N = Native Hawaiian or Pacific Islander<br  />T = Two or More Races<br  />W = White<br  /><br  />Valid values can be obtained from Company Codes endpoint, codeResource = ethnicity"""  
    ethnic_racial_identities: Optional[list[SensitiveDataEthnicityEthnicRacialIdentities]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ethnicRacialIdentities'), 'exclude': lambda f: f is None }})
    r"""Add or update Ethnic Racial Identity"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SensitiveDataGender:
    r"""Add or update gender data."""
    
    display_pronouns: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayPronouns'), 'exclude': lambda f: f is None }})
    r"""Specifies whether employee's preferred pronouns will be displayed to co-workers in Community, Directory, etc. Values include:<br  /><br  />0 = No<br  />1 = Yes"""  
    gender_identity_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('genderIdentityDescription'), 'exclude': lambda f: f is None }})
    r"""Employee's preferred or chosen gender identification.<br  />Max length: 40"""  
    identify_as_legal_gender: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifyAsLegalGender'), 'exclude': lambda f: f is None }})
    r"""Employee's self-identification of legal gender. Numerical values include:<br  /><br  />0 = No<br  />1 = Yes<br  />2 = Prefer not to say"""  
    legal_gender: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legalGender'), 'exclude': lambda f: f is None }})
    r"""Employee's legal gender. Values include:<br  /><br  />M = Male<br  />F = Female<br  /><br  />Valid values can be obtained from Company Codes endpoint, codeResource = legalGender"""  
    pronouns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pronouns'), 'exclude': lambda f: f is None }})
    r"""Employee's preferred or chosen pronouns. Values include:<br  /><br  />He / Him / His<br  />She / Her / Hers<br  />They / Them / Theirs<br  />Prefer not to say<br  /><br  />Valid values can be obtained from Company Codes endpoint, codeResource = preferredPronouns"""  
    sexual_orientation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sexualOrientation'), 'exclude': lambda f: f is None }})
    r"""Employee's self-identification of sexual orientation. Values may include values below. Additionally, any custom value may be provided.<br  /><br  />Asexual<br  />Gay / Lesbian<br  />Heterosexual / Straight<br  />Pansexual<br  />Queer<br  />Bisexual<br  />Prefer not to say"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SensitiveDataVeteran:
    r"""Add or update veteran data."""
    
    is_veteran: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isVeteran'), 'exclude': lambda f: f is None }})
    r"""Indicates if the employee is a veteran.  Values include:<br  /><br  />0 = No<br  />1 = Yes<br  />2 = Prefer not to say"""  
    veteran: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('veteran'), 'exclude': lambda f: f is None }})
    r"""Employee's Veteran Notes<br  />Max length: 50"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SensitiveData:
    r"""The sensitive data model"""
    
    disability: Optional[SensitiveDataDisability] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disability'), 'exclude': lambda f: f is None }})
    r"""Add or update disability data."""  
    ethnicity: Optional[SensitiveDataEthnicity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ethnicity'), 'exclude': lambda f: f is None }})
    r"""Add or update ethnicity data."""  
    gender: Optional[SensitiveDataGender] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gender'), 'exclude': lambda f: f is None }})
    r"""Add or update gender data."""  
    veteran: Optional[SensitiveDataVeteran] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('veteran'), 'exclude': lambda f: f is None }})
    r"""Add or update veteran data."""  
    