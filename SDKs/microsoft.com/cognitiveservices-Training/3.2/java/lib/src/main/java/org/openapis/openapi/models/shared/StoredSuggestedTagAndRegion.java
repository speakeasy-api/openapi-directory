/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * StoredSuggestedTagAndRegion - Result of a suggested tags and regions request of the untagged image.
 */
public class StoredSuggestedTagAndRegion {
    /**
     * Date this prediction was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created")
    public OffsetDateTime created;

    public StoredSuggestedTagAndRegion withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }
    
    /**
     * Domain used for the prediction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    public String domain;

    public StoredSuggestedTagAndRegion withDomain(String domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * Height of the resized image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    public Integer height;

    public StoredSuggestedTagAndRegion withHeight(Integer height) {
        this.height = height;
        return this;
    }
    
    /**
     * Prediction Id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public StoredSuggestedTagAndRegion withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Iteration Id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iteration")
    public String iteration;

    public StoredSuggestedTagAndRegion withIteration(String iteration) {
        this.iteration = iteration;
        return this;
    }
    
    /**
     * The URI to the original prediction image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalImageUri")
    public String originalImageUri;

    public StoredSuggestedTagAndRegion withOriginalImageUri(String originalImageUri) {
        this.originalImageUri = originalImageUri;
        return this;
    }
    
    /**
     * Uncertainty (entropy) of suggested tags or regions per image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("predictionUncertainty")
    public Double predictionUncertainty;

    public StoredSuggestedTagAndRegion withPredictionUncertainty(Double predictionUncertainty) {
        this.predictionUncertainty = predictionUncertainty;
        return this;
    }
    
    /**
     * List of predictions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("predictions")
    public Prediction[] predictions;

    public StoredSuggestedTagAndRegion withPredictions(Prediction[] predictions) {
        this.predictions = predictions;
        return this;
    }
    
    /**
     * Project Id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project")
    public String project;

    public StoredSuggestedTagAndRegion withProject(String project) {
        this.project = project;
        return this;
    }
    
    /**
     * The URI to the (resized) prediction image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resizedImageUri")
    public String resizedImageUri;

    public StoredSuggestedTagAndRegion withResizedImageUri(String resizedImageUri) {
        this.resizedImageUri = resizedImageUri;
        return this;
    }
    
    /**
     * The URI to the thumbnail of the original prediction image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailUri")
    public String thumbnailUri;

    public StoredSuggestedTagAndRegion withThumbnailUri(String thumbnailUri) {
        this.thumbnailUri = thumbnailUri;
        return this;
    }
    
    /**
     * Width of the resized image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    public Integer width;

    public StoredSuggestedTagAndRegion withWidth(Integer width) {
        this.width = width;
        return this;
    }
    
    public StoredSuggestedTagAndRegion(){}
}
