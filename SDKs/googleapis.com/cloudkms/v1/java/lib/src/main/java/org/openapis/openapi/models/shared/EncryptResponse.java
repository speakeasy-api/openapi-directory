/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * EncryptResponse - Response message for KeyManagementService.Encrypt.
 */
public class EncryptResponse {
    /**
     * The encrypted data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ciphertext")
    public String ciphertext;
    public EncryptResponse withCiphertext(String ciphertext) {
        this.ciphertext = ciphertext;
        return this;
    }
    
    /**
     * Integrity verification field. A CRC32C checksum of the returned EncryptResponse.ciphertext. An integrity check of EncryptResponse.ciphertext can be performed by computing the CRC32C checksum of EncryptResponse.ciphertext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ciphertextCrc32c")
    public String ciphertextCrc32c;
    public EncryptResponse withCiphertextCrc32c(String ciphertextCrc32c) {
        this.ciphertextCrc32c = ciphertextCrc32c;
        return this;
    }
    
    /**
     * The resource name of the CryptoKeyVersion used in encryption. Check this field to verify that the intended resource was used for encryption.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public EncryptResponse withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The ProtectionLevel of the CryptoKeyVersion used in encryption.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protectionLevel")
    public EncryptResponseProtectionLevelEnum protectionLevel;
    public EncryptResponse withProtectionLevel(EncryptResponseProtectionLevelEnum protectionLevel) {
        this.protectionLevel = protectionLevel;
        return this;
    }
    
    /**
     * Integrity verification field. A flag indicating whether EncryptRequest.additional_authenticated_data_crc32c was received by KeyManagementService and used for the integrity verification of the AAD. A false value of this field indicates either that EncryptRequest.additional_authenticated_data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set EncryptRequest.additional_authenticated_data_crc32c but this field is still false, discard the response and perform a limited number of retries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verifiedAdditionalAuthenticatedDataCrc32c")
    public Boolean verifiedAdditionalAuthenticatedDataCrc32c;
    public EncryptResponse withVerifiedAdditionalAuthenticatedDataCrc32c(Boolean verifiedAdditionalAuthenticatedDataCrc32c) {
        this.verifiedAdditionalAuthenticatedDataCrc32c = verifiedAdditionalAuthenticatedDataCrc32c;
        return this;
    }
    
    /**
     * Integrity verification field. A flag indicating whether EncryptRequest.plaintext_crc32c was received by KeyManagementService and used for the integrity verification of the plaintext. A false value of this field indicates either that EncryptRequest.plaintext_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set EncryptRequest.plaintext_crc32c but this field is still false, discard the response and perform a limited number of retries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verifiedPlaintextCrc32c")
    public Boolean verifiedPlaintextCrc32c;
    public EncryptResponse withVerifiedPlaintextCrc32c(Boolean verifiedPlaintextCrc32c) {
        this.verifiedPlaintextCrc32c = verifiedPlaintextCrc32c;
        return this;
    }
    
}
