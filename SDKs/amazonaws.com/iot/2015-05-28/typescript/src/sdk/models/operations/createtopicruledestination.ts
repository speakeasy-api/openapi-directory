/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Configuration of the topic rule destination.
 */
export class CreateTopicRuleDestinationRequestBodyDestinationConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "httpUrlConfiguration" })
  @Type(() => shared.HttpUrlDestinationConfiguration)
  httpUrlConfiguration?: shared.HttpUrlDestinationConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "vpcConfiguration" })
  @Type(() => shared.VpcDestinationConfiguration)
  vpcConfiguration?: shared.VpcDestinationConfiguration;
}

export class CreateTopicRuleDestinationRequestBody extends SpeakeasyBase {
  /**
   * Configuration of the topic rule destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationConfiguration" })
  @Type(() => CreateTopicRuleDestinationRequestBodyDestinationConfiguration)
  destinationConfiguration: CreateTopicRuleDestinationRequestBodyDestinationConfiguration;
}

export class CreateTopicRuleDestinationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateTopicRuleDestinationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateTopicRuleDestinationResponse extends SpeakeasyBase {
  /**
   * ConflictingResourceUpdateException
   */
  @SpeakeasyMetadata()
  conflictingResourceUpdateException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createTopicRuleDestinationResponse?: shared.CreateTopicRuleDestinationResponse;

  /**
   * InternalException
   */
  @SpeakeasyMetadata()
  internalException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceAlreadyExistsException
   */
  @SpeakeasyMetadata()
  resourceAlreadyExistsException?: any;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;
}
