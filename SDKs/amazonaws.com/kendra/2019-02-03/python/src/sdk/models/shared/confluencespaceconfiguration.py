"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import confluencespacetoindexfieldmapping as shared_confluencespacetoindexfieldmapping
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConfluenceSpaceConfiguration:
    r"""Configuration information for indexing Confluence spaces."""
    
    crawl_archived_spaces: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CrawlArchivedSpaces'), 'exclude': lambda f: f is None }})  
    crawl_personal_spaces: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CrawlPersonalSpaces'), 'exclude': lambda f: f is None }})  
    exclude_spaces: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExcludeSpaces'), 'exclude': lambda f: f is None }})  
    include_spaces: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncludeSpaces'), 'exclude': lambda f: f is None }})  
    space_field_mappings: Optional[list[shared_confluencespacetoindexfieldmapping.ConfluenceSpaceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpaceFieldMappings'), 'exclude': lambda f: f is None }})  
    