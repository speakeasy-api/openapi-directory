// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateLaunchPathParams struct {
	// The name of the launch that is to be updated.
	Launch string `pathParam:"style=simple,explode=false,name=launch"`
	// The name or ARN of the project that contains the launch that you want to update.
	Project string `pathParam:"style=simple,explode=false,name=project"`
}

type UpdateLaunchHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// UpdateLaunchRequestBodyScheduledSplitsConfig - An array of structures that define the traffic allocation percentages among the feature variations during each step of a launch. This also defines the start time of each step.
type UpdateLaunchRequestBodyScheduledSplitsConfig struct {
	Steps []shared.ScheduledSplitConfig `json:"steps,omitempty"`
}

type UpdateLaunchRequestBody struct {
	// An optional description for the launch.
	Description *string `json:"description,omitempty"`
	// An array of structures that contains the feature and variations that are to be used for the launch.
	Groups []shared.LaunchGroupConfig `json:"groups,omitempty"`
	// An array of structures that define the metrics that will be used to monitor the launch performance.
	MetricMonitors []shared.MetricMonitorConfig `json:"metricMonitors,omitempty"`
	// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the launch name as the <code>randomizationSalt</code>.
	RandomizationSalt *string `json:"randomizationSalt,omitempty"`
	// An array of structures that define the traffic allocation percentages among the feature variations during each step of a launch. This also defines the start time of each step.
	ScheduledSplitsConfig *UpdateLaunchRequestBodyScheduledSplitsConfig `json:"scheduledSplitsConfig,omitempty"`
}

type UpdateLaunchRequest struct {
	PathParams UpdateLaunchPathParams
	Headers    UpdateLaunchHeaders
	Request    UpdateLaunchRequestBody `request:"mediaType=application/json"`
}

type UpdateLaunchResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	StatusCode        int
	RawResponse       *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	UpdateLaunchResponse *shared.UpdateLaunchResponse
	// ValidationException
	ValidationException interface{}
}
