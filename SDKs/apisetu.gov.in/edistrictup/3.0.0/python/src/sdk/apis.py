"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class APIs:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def btcer(self, request: operations.BtcerRequestBody, security: operations.BtcerSecurity) -> operations.BtcerResponse:
        r"""Birth Certificate
        API to verify Birth Certificate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/btcer/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BtcerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Btcer400ApplicationJSON])
                res.btcer_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Btcer401ApplicationJSON])
                res.btcer_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Btcer404ApplicationJSON])
                res.btcer_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Btcer500ApplicationJSON])
                res.btcer_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Btcer502ApplicationJSON])
                res.btcer_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Btcer503ApplicationJSON])
                res.btcer_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Btcer504ApplicationJSON])
                res.btcer_504_application_json_object = out

        return res

    def ctcer(self, request: operations.CtcerRequestBody, security: operations.CtcerSecurity) -> operations.CtcerResponse:
        r"""Caste Certificate
        API to verify Caste Certificate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ctcer/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CtcerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Ctcer400ApplicationJSON])
                res.ctcer_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Ctcer401ApplicationJSON])
                res.ctcer_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Ctcer404ApplicationJSON])
                res.ctcer_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Ctcer500ApplicationJSON])
                res.ctcer_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Ctcer502ApplicationJSON])
                res.ctcer_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Ctcer503ApplicationJSON])
                res.ctcer_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Ctcer504ApplicationJSON])
                res.ctcer_504_application_json_object = out

        return res

    def dmcer(self, request: operations.DmcerRequestBody, security: operations.DmcerSecurity) -> operations.DmcerResponse:
        r"""Domicile Certificate
        API to verify Domicile Certificate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dmcer/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DmcerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dmcer400ApplicationJSON])
                res.dmcer_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dmcer401ApplicationJSON])
                res.dmcer_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dmcer404ApplicationJSON])
                res.dmcer_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dmcer500ApplicationJSON])
                res.dmcer_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dmcer502ApplicationJSON])
                res.dmcer_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dmcer503ApplicationJSON])
                res.dmcer_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dmcer504ApplicationJSON])
                res.dmcer_504_application_json_object = out

        return res

    def dpicr(self, request: operations.DpicrRequestBody, security: operations.DpicrSecurity) -> operations.DpicrResponse:
        r"""Disabled Person Identity Card/ Certificate
        API to verify Disabled Person Identity Card/ Certificate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dpicr/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DpicrResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dpicr400ApplicationJSON])
                res.dpicr_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dpicr401ApplicationJSON])
                res.dpicr_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dpicr404ApplicationJSON])
                res.dpicr_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dpicr500ApplicationJSON])
                res.dpicr_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dpicr502ApplicationJSON])
                res.dpicr_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dpicr503ApplicationJSON])
                res.dpicr_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dpicr504ApplicationJSON])
                res.dpicr_504_application_json_object = out

        return res

    def dtcer(self, request: operations.DtcerRequestBody, security: operations.DtcerSecurity) -> operations.DtcerResponse:
        r"""Death Certificate
        API to verify Death Certificate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dtcer/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DtcerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dtcer400ApplicationJSON])
                res.dtcer_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dtcer401ApplicationJSON])
                res.dtcer_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dtcer404ApplicationJSON])
                res.dtcer_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dtcer500ApplicationJSON])
                res.dtcer_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dtcer502ApplicationJSON])
                res.dtcer_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dtcer503ApplicationJSON])
                res.dtcer_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Dtcer504ApplicationJSON])
                res.dtcer_504_application_json_object = out

        return res

    def incer(self, request: operations.IncerRequestBody, security: operations.IncerSecurity) -> operations.IncerResponse:
        r"""Income Certificate
        API to verify Income Certificate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/incer/certificate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IncerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Incer400ApplicationJSON])
                res.incer_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Incer401ApplicationJSON])
                res.incer_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Incer404ApplicationJSON])
                res.incer_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Incer500ApplicationJSON])
                res.incer_500_application_json_object = out
        elif http_res.status_code == 502:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Incer502ApplicationJSON])
                res.incer_502_application_json_object = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Incer503ApplicationJSON])
                res.incer_503_application_json_object = out
        elif http_res.status_code == 504:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Incer504ApplicationJSON])
                res.incer_504_application_json_object = out

        return res

    