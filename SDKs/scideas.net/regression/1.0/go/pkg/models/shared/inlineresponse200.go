// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type InlineResponse200Type string

const (
	InlineResponse200TypeResult InlineResponse200Type = "result"
	InlineResponse200TypeError  InlineResponse200Type = "error"
)

type InlineResponse200 struct {
	Result *Result
	Error  *Error

	Type InlineResponse200Type
}

func CreateInlineResponse200Result(result Result) InlineResponse200 {
	typ := InlineResponse200TypeResult

	return InlineResponse200{
		Result: &result,
		Type:   typ,
	}
}

func CreateInlineResponse200Error(error Error) InlineResponse200 {
	typ := InlineResponse200TypeError

	return InlineResponse200{
		Error: &error,
		Type:  typ,
	}
}

func (u *InlineResponse200) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	result := new(Result)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&result); err == nil {
		u.Result = result
		u.Type = InlineResponse200TypeResult
		return nil
	}

	error := new(Error)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&error); err == nil {
		u.Error = error
		u.Type = InlineResponse200TypeError
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u InlineResponse200) MarshalJSON() ([]byte, error) {
	if u.Result != nil {
		return json.Marshal(u.Result)
	}

	if u.Error != nil {
		return json.Marshal(u.Error)
	}

	return nil, nil
}
