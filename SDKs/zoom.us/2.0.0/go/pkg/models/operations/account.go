// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type AccountPathParams struct {
	// The account ID.
	AccountID string `pathParam:"style=simple,explode=false,name=accountId"`
}

type AccountRequest struct {
	PathParams AccountPathParams
}

// Account200ApplicationXMLOptionsPayModeEnum - Payee:<br>`master` - master account holder pays.<br>`sub` - Sub account holder pays.
type Account200ApplicationXMLOptionsPayModeEnum string

const (
	Account200ApplicationXMLOptionsPayModeEnumMaster Account200ApplicationXMLOptionsPayModeEnum = "master"
	Account200ApplicationXMLOptionsPayModeEnumSub    Account200ApplicationXMLOptionsPayModeEnum = "sub"
)

func (e *Account200ApplicationXMLOptionsPayModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "master":
		fallthrough
	case "sub":
		*e = Account200ApplicationXMLOptionsPayModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Account200ApplicationXMLOptionsPayModeEnum: %s", s)
	}
}

// Account200ApplicationXMLOptions - Account options object.
type Account200ApplicationXMLOptions struct {
	// Toggle whether automatic billing renewal is on or off.
	BillingAutoRenew *bool
	// Specify the IP addresses of the Meeting Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Meeting Connectors of a master account will be shared with the sub account.
	//
	//
	// **Note:** This option can only be used if the value of `share_mc` is set to `true`.
	MeetingConnectorList []string
	// Payee:<br>`master` - master account holder pays.<br>`sub` - Sub account holder pays.
	PayMode *Account200ApplicationXMLOptionsPayModeEnum
	// Specify the IP addresses of the Room Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Room Connectors of a master account will be shared with the sub account.
	//
	//
	// **Note:** This option can only be used if the value of `share_rc` is set to `true`.
	RoomConnectorList []string
	// Enable/disable the option for a sub account to use shared [Meeting Connector(s)](https://support.zoom.us/hc/en-us/articles/201363093-Getting-Started-with-the-Meeting-Connector) that are set up by the master account. Meeting Connectors can only be used by On-prem users.
	ShareMc *bool
	// Enable/disable the option for a sub account to use shared [Virtual Room Connector(s)](https://support.zoom.us/hc/en-us/articles/202134758-Getting-Started-With-Virtual-Room-Connector) that are set up by the master account. Virtual Room Connectors can only be used by On-prem users.
	ShareRc *bool
}

// Account200ApplicationXML - **HTTP Status Code**: `200`<br>
// Account object returned.
type Account200ApplicationXML struct {
	// Account creation date and time.
	CreatedAt *time.Time
	// Account ID.
	ID *string
	// Account options object.
	Options *Account200ApplicationXMLOptions
	// Account owner email.
	OwnerEmail *string
	// Account owner ID.
	OwnerID *string
	// Account Vanity URL
	VanityURL *string
}

// Account200ApplicationJSONOptionsPayModeEnum - Payee:<br>`master` - master account holder pays.<br>`sub` - Sub account holder pays.
type Account200ApplicationJSONOptionsPayModeEnum string

const (
	Account200ApplicationJSONOptionsPayModeEnumMaster Account200ApplicationJSONOptionsPayModeEnum = "master"
	Account200ApplicationJSONOptionsPayModeEnumSub    Account200ApplicationJSONOptionsPayModeEnum = "sub"
)

func (e *Account200ApplicationJSONOptionsPayModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "master":
		fallthrough
	case "sub":
		*e = Account200ApplicationJSONOptionsPayModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Account200ApplicationJSONOptionsPayModeEnum: %s", s)
	}
}

// Account200ApplicationJSONOptions - Account options object.
type Account200ApplicationJSONOptions struct {
	// Toggle whether automatic billing renewal is on or off.
	BillingAutoRenew *bool `json:"billing_auto_renew,omitempty"`
	// Specify the IP addresses of the Meeting Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Meeting Connectors of a master account will be shared with the sub account.
	//
	//
	// **Note:** This option can only be used if the value of `share_mc` is set to `true`.
	MeetingConnectorList []string `json:"meeting_connector_list,omitempty"`
	// Payee:<br>`master` - master account holder pays.<br>`sub` - Sub account holder pays.
	PayMode *Account200ApplicationJSONOptionsPayModeEnum `json:"pay_mode,omitempty"`
	// Specify the IP addresses of the Room Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Room Connectors of a master account will be shared with the sub account.
	//
	//
	// **Note:** This option can only be used if the value of `share_rc` is set to `true`.
	RoomConnectorList []string `json:"room_connector_list,omitempty"`
	// Enable/disable the option for a sub account to use shared [Meeting Connector(s)](https://support.zoom.us/hc/en-us/articles/201363093-Getting-Started-with-the-Meeting-Connector) that are set up by the master account. Meeting Connectors can only be used by On-prem users.
	ShareMc *bool `json:"share_mc,omitempty"`
	// Enable/disable the option for a sub account to use shared [Virtual Room Connector(s)](https://support.zoom.us/hc/en-us/articles/202134758-Getting-Started-With-Virtual-Room-Connector) that are set up by the master account. Virtual Room Connectors can only be used by On-prem users.
	ShareRc *bool `json:"share_rc,omitempty"`
}

// Account200ApplicationJSON - **HTTP Status Code**: `200`<br>
// Account object returned.
type Account200ApplicationJSON struct {
	// Account creation date and time.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Account ID.
	ID *string `json:"id,omitempty"`
	// Account options object.
	Options *Account200ApplicationJSONOptions `json:"options,omitempty"`
	// Account owner email.
	OwnerEmail *string `json:"owner_email,omitempty"`
	// Account owner ID.
	OwnerID *string `json:"owner_id,omitempty"`
	// Account Vanity URL
	VanityURL *string `json:"vanity_url,omitempty"`
}

type AccountResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code**: `200`<br>
	// Account object returned.
	Account200ApplicationJSONObject *Account200ApplicationJSON
}
