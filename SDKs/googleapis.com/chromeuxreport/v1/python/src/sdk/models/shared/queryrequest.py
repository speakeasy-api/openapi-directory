"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class QueryRequestFormFactorEnum(str, Enum):
    r"""The form factor is a query dimension that specifies the device class that the record's data should belong to. Note: If no form factor is specified, then a special record with aggregated data over all form factors will be returned."""
    ALL_FORM_FACTORS = 'ALL_FORM_FACTORS'
    PHONE = 'PHONE'
    DESKTOP = 'DESKTOP'
    TABLET = 'TABLET'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueryRequest:
    r"""Request payload sent by a physical web client. This request includes all necessary context to load a particular user experience record."""
    
    effective_connection_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effectiveConnectionType'), 'exclude': lambda f: f is None }})
    r"""The effective connection type is a query dimension that specifies the effective network class that the record's data should belong to. This field uses the values [\\"offline\\", \\"slow-2G\\", \\"2G\\", \\"3G\\", \\"4G\\"] as specified in: https://wicg.github.io/netinfo/#effective-connection-types Note: If no effective connection type is specified, then a special record with aggregated data over all effective connection types will be returned."""  
    form_factor: Optional[QueryRequestFormFactorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formFactor'), 'exclude': lambda f: f is None }})
    r"""The form factor is a query dimension that specifies the device class that the record's data should belong to. Note: If no form factor is specified, then a special record with aggregated data over all form factors will be returned."""  
    metrics: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metrics'), 'exclude': lambda f: f is None }})
    r"""The metrics that should be included in the response. If none are specified then any metrics found will be returned. Allowed values: [\\"first_contentful_paint\\", \\"first_input_delay\\", \\"largest_contentful_paint\\", \\"cumulative_layout_shift\\", \\"experimental_time_to_first_byte\\", \\"experimental_interaction_to_next_paint\\"]"""  
    origin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin'), 'exclude': lambda f: f is None }})
    r"""The url pattern \\"origin\\" refers to a url pattern that is the origin of a website. Examples: \\"https://example.com\\", \\"https://cloud.google.com\\" """  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The url pattern \\"url\\" refers to a url pattern that is any arbitrary url. Examples: \\"https://example.com/\\", \\"https://cloud.google.com/why-google-cloud/\\" """  
    