/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Comments {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Marks a comment as not spam by blog id, post id and comment id.
   */
  bloggerCommentsApprove(
    req: operations.BloggerCommentsApproveRequest,
    security: operations.BloggerCommentsApproveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerCommentsApproveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerCommentsApproveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/approve",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerCommentsApproveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerCommentsApproveResponse =
        new operations.BloggerCommentsApproveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.comment = utils.objectToClass(httpRes?.data, shared.Comment);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a comment by blog id, post id and comment id.
   */
  bloggerCommentsDelete(
    req: operations.BloggerCommentsDeleteRequest,
    security: operations.BloggerCommentsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerCommentsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerCommentsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerCommentsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerCommentsDeleteResponse =
        new operations.BloggerCommentsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets a comment by id.
   */
  bloggerCommentsGet(
    req: operations.BloggerCommentsGetRequest,
    security: operations.BloggerCommentsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerCommentsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerCommentsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerCommentsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerCommentsGetResponse =
        new operations.BloggerCommentsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.comment = utils.objectToClass(httpRes?.data, shared.Comment);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists comments.
   */
  bloggerCommentsList(
    req: operations.BloggerCommentsListRequest,
    security: operations.BloggerCommentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerCommentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerCommentsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/posts/{postId}/comments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerCommentsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerCommentsListResponse =
        new operations.BloggerCommentsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.commentList = utils.objectToClass(
              httpRes?.data,
              shared.CommentList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists comments by blog.
   */
  bloggerCommentsListByBlog(
    req: operations.BloggerCommentsListByBlogRequest,
    security: operations.BloggerCommentsListByBlogSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerCommentsListByBlogResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerCommentsListByBlogRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/comments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerCommentsListByBlogSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerCommentsListByBlogResponse =
        new operations.BloggerCommentsListByBlogResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.commentList = utils.objectToClass(
              httpRes?.data,
              shared.CommentList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Marks a comment as spam by blog id, post id and comment id.
   */
  bloggerCommentsMarkAsSpam(
    req: operations.BloggerCommentsMarkAsSpamRequest,
    security: operations.BloggerCommentsMarkAsSpamSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerCommentsMarkAsSpamResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerCommentsMarkAsSpamRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/spam",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerCommentsMarkAsSpamSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerCommentsMarkAsSpamResponse =
        new operations.BloggerCommentsMarkAsSpamResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.comment = utils.objectToClass(httpRes?.data, shared.Comment);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Removes the content of a comment by blog id, post id and comment id.
   */
  bloggerCommentsRemoveContent(
    req: operations.BloggerCommentsRemoveContentRequest,
    security: operations.BloggerCommentsRemoveContentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerCommentsRemoveContentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerCommentsRemoveContentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerCommentsRemoveContentSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerCommentsRemoveContentResponse =
        new operations.BloggerCommentsRemoveContentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.comment = utils.objectToClass(httpRes?.data, shared.Comment);
          }
          break;
      }

      return res;
    });
  }
}
