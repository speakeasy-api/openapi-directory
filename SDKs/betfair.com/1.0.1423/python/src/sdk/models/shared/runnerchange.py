"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RunnerChange:
    
    atb: Optional[list[list[float]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('atb'), 'exclude': lambda f: f is None }})
    r"""Available To Back - PriceVol tuple delta of price changes (0 vol is remove)"""  
    atl: Optional[list[list[float]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('atl'), 'exclude': lambda f: f is None }})
    r"""Available To Lay - PriceVol tuple delta of price changes (0 vol is remove)"""  
    batb: Optional[list[list[float]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batb'), 'exclude': lambda f: f is None }})
    r"""Best Available To Back - LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)"""  
    batl: Optional[list[list[float]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batl'), 'exclude': lambda f: f is None }})
    r"""Best Available To Lay - LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)"""  
    bdatb: Optional[list[list[float]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bdatb'), 'exclude': lambda f: f is None }})
    r"""Best Display Available To Back (includes virtual prices)- LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)"""  
    bdatl: Optional[list[list[float]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bdatl'), 'exclude': lambda f: f is None }})
    r"""Best Display Available To Lay (includes virtual prices)- LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)"""  
    hc: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hc'), 'exclude': lambda f: f is None }})
    r"""Handicap - the handicap of the runner (selection) (null if not applicable)"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Selection Id - the id of the runner (selection)"""  
    ltp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ltp'), 'exclude': lambda f: f is None }})
    r"""Last Traded Price - The last traded price (or null if un-changed)"""  
    spb: Optional[list[list[float]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spb'), 'exclude': lambda f: f is None }})
    r"""Starting Price Back - PriceVol tuple delta of price changes (0 vol is remove)"""  
    spf: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spf'), 'exclude': lambda f: f is None }})
    r"""Starting Price Far - The far starting price (or null if un-changed)"""  
    spl: Optional[list[list[float]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spl'), 'exclude': lambda f: f is None }})
    r"""Starting Price Lay - PriceVol tuple delta of price changes (0 vol is remove)"""  
    spn: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spn'), 'exclude': lambda f: f is None }})
    r"""Starting Price Near - The far starting price (or null if un-changed)"""  
    trd: Optional[list[list[float]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trd'), 'exclude': lambda f: f is None }})
    r"""Traded - PriceVol tuple delta of price changes (0 vol is remove)"""  
    tv: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tv'), 'exclude': lambda f: f is None }})
    r"""The total amount matched. This value is truncated at 2dp."""  
    