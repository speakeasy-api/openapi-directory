"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Clients:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_2(self, request: shared.CustomerPersonDTO) -> operations.Create2Response:
        r"""Creates a new person.
        Creates a new person. Required fields are presented in the example. Other fields (from PUT) may also be specified here.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/customers/persons'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Create2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerPersonDTO])
                res.customer_person_dto = out

        return res

    def create_3(self, request: shared.CustomerDTO) -> operations.Create3Response:
        r"""Creates a new client.
        Creates a new client. All available fields are presented in PUT request.<p>
          Required fields:
          <ul>
            <li>name</li>
            <li>fullName</li>
            <li>contact -> emails -> primary</li>
          </ul>
        </p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/customers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Create3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerDTO])
                res.customer_dto = out

        return res

    def delete_3(self, request: operations.Delete3Request) -> operations.Delete3Response:
        r"""Removes a person.
        Removes a person.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Delete3Request, base_url, '/customers/persons/{personId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Delete3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_4(self, request: operations.Delete4Request) -> operations.Delete4Response:
        r"""Removes a customer price list.
        Removes a customer price list.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Delete4Request, base_url, '/customers/priceLists/{priceListId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Delete4Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_5(self, request: operations.Delete5Request) -> operations.Delete5Response:
        r"""Removes a client.
        Removes a client.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Delete5Request, base_url, '/customers/{customerId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Delete5Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def generate_single_use_sign_in_token(self, request: shared.AccessTokenRequestDTO) -> operations.GenerateSingleUseSignInTokenResponse:
        r"""Generates a single use sign-in token.
        Generates a single use sign-in token for the customer person found for given login or e-mail. Returns 'url' and 'token' which allows to sign-in to customer portal as this person. Token is valid for two minutes and can be used only once. To sign-in to customer portal you should post 'token' provided as the 'accessToken' form param to the 'url' using POST method.Detailed description is available in the Customer API <a href=\"/api-doc/customer-api/authentication\">authentication</a>.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/customers/persons/accessToken'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GenerateSingleUseSignInTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccessTokenDTO])
                res.access_token_dto = out

        return res

    def get_address(self, request: operations.GetAddressRequest) -> operations.GetAddressResponse:
        r"""Returns address of a given client.
        Returns address of a given client.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAddressRequest, base_url, '/customers/{customerId}/address', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AddressDTO])
                res.address_dto = out

        return res

    def get_all_ids_1(self, request: operations.GetAllIds1Request) -> operations.GetAllIds1Response:
        r"""Returns persons' internal identifiers.
        Returns persons' internal identifiers.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/customers/persons/ids'
        
        query_params = utils.get_query_params(operations.GetAllIds1Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllIds1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[int]])
                res.get_all_ids_1_default_application_vnd_xtrf_v1_plus_json_int32_integers = out

        return res

    def get_all_ids_2(self, request: operations.GetAllIds2Request) -> operations.GetAllIds2Response:
        r"""Returns clients' internal identifiers.
        Returns clients' internal identifiers.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/customers/ids'
        
        query_params = utils.get_query_params(operations.GetAllIds2Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllIds2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[int]])
                res.get_all_ids_2_default_application_json_int32_integers = out

        return res

    def get_all_names_with_ids(self, request: operations.GetAllNamesWithIdsRequest) -> operations.GetAllNamesWithIdsResponse:
        r"""Returns list of simple clients representations
        Returns list of simple clients representations
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/customers'
        
        query_params = utils.get_query_params(operations.GetAllNamesWithIdsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllNamesWithIdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.EntityWithNameDTO]])
                res.entity_with_name_dtos = out

        return res

    def get_by_id_1(self, request: operations.GetByID1Request) -> operations.GetByID1Response:
        r"""Returns person details.
        Returns person details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetByID1Request, base_url, '/customers/persons/{personId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetByID1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerPersonDTO])
                res.customer_person_dto = out

        return res

    def get_by_id_2(self, request: operations.GetByID2Request) -> operations.GetByID2Response:
        r"""Returns client details.
        Returns client details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetByID2Request, base_url, '/customers/{customerId}', request)
        
        query_params = utils.get_query_params(operations.GetByID2Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetByID2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerDTO])
                res.customer_dto = out

        return res

    def get_categories(self, request: operations.GetCategoriesRequest) -> operations.GetCategoriesResponse:
        r"""Returns categories of a given client.
        Returns categories of a given client.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCategoriesRequest, base_url, '/customers/{customerId}/categories', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCategoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[int]])
                res.categories_dto = out

        return res

    def get_contact(self, request: operations.GetContactRequest) -> operations.GetContactResponse:
        r"""Returns contact of a given person.
        Returns contact of a given person.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContactRequest, base_url, '/customers/persons/{personId}/contact', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PersonContactDTO])
                res.person_contact_dto = out

        return res

    def get_contact_1(self, request: operations.GetContact1Request) -> operations.GetContact1Response:
        r"""Returns contact of a given client.
        Returns contact of a given client.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContact1Request, base_url, '/customers/{customerId}/contact', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContact1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContactDTO])
                res.contact_dto = out

        return res

    def get_correspondence_address(self, request: operations.GetCorrespondenceAddressRequest) -> operations.GetCorrespondenceAddressResponse:
        r"""Returns correspondence address of a given client.
        Returns correspondence address of a given client.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCorrespondenceAddressRequest, base_url, '/customers/{customerId}/correspondenceAddress', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCorrespondenceAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AddressDTO])
                res.address_dto = out

        return res

    def get_custom_field(self, request: operations.GetCustomFieldRequest) -> operations.GetCustomFieldResponse:
        r"""Returns custom field of a given client.
        Returns custom field of a given client.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomFieldRequest, base_url, '/customers/{customerId}/customFields/{customFieldKey}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomFieldResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomFieldDTO])
                res.custom_field_dto = out

        return res

    def get_custom_fields(self, request: operations.GetCustomFieldsRequest) -> operations.GetCustomFieldsResponse:
        r"""Returns custom fields of a given person.
        Returns custom fields of a given person.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomFieldsRequest, base_url, '/customers/persons/{personId}/customFields', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomFieldsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldDTO]])
                res.custom_fields_dto = out

        return res

    def get_custom_fields_1(self, request: operations.GetCustomFields1Request) -> operations.GetCustomFields1Response:
        r"""Returns custom fields of a given client.
        Returns custom fields of a given client.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomFields1Request, base_url, '/customers/{customerId}/customFields', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomFields1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldDTO]])
                res.custom_fields_dto = out

        return res

    def get_industries(self, request: operations.GetIndustriesRequest) -> operations.GetIndustriesResponse:
        r"""Returns industries of a given client.
        Returns industries of a given client.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIndustriesRequest, base_url, '/customers/{customerId}/industries', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIndustriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[int]])
                res.industries_dto = out

        return res

    def update_address(self, request: operations.UpdateAddressRequest) -> operations.UpdateAddressResponse:
        r"""Updates address of a given client.
        Updates address of a given client.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateAddressRequest, base_url, '/customers/{customerId}/address', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "address_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AddressDTO])
                res.address_dto = out

        return res

    def update_categories(self, request: operations.UpdateCategoriesRequest) -> operations.UpdateCategoriesResponse:
        r"""Updates categories of a given client.
        Updates categories of a given client.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCategoriesRequest, base_url, '/customers/{customerId}/categories', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCategoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[int]])
                res.categories_dto = out

        return res

    def update_contact(self, request: operations.UpdateContactRequest) -> operations.UpdateContactResponse:
        r"""Updates contact of a given person.
        Updates contact of a given person. Sets that this person uses specific address and contact (not the one from customer).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateContactRequest, base_url, '/customers/persons/{personId}/contact', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "person_contact_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateContactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PersonContactDTO])
                res.person_contact_dto = out

        return res

    def update_contact_1(self, request: operations.UpdateContact1Request) -> operations.UpdateContact1Response:
        r"""Updates contact of a given client.
        Updates contact of a given client.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateContact1Request, base_url, '/customers/{customerId}/contact', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "contact_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateContact1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContactDTO])
                res.contact_dto = out

        return res

    def update_correspondence_address(self, request: operations.UpdateCorrespondenceAddressRequest) -> operations.UpdateCorrespondenceAddressResponse:
        r"""Updates correspondence address of a given client.
        Updates correspondence address of a given client.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCorrespondenceAddressRequest, base_url, '/customers/{customerId}/correspondenceAddress', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "address_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCorrespondenceAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AddressDTO])
                res.address_dto = out

        return res

    def update_custom_field(self, request: operations.UpdateCustomFieldRequest) -> operations.UpdateCustomFieldResponse:
        r"""Updates given custom field of a given client.
        Updates given custom field of a given client.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCustomFieldRequest, base_url, '/customers/{customerId}/customFields/{customFieldKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_field_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCustomFieldResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomFieldDTO])
                res.custom_field_dto = out

        return res

    def update_custom_fields(self, request: operations.UpdateCustomFieldsRequest) -> operations.UpdateCustomFieldsResponse:
        r"""Updates custom fields of a given person.
        Updates custom fields of a given person.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCustomFieldsRequest, base_url, '/customers/persons/{personId}/customFields', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCustomFieldsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldDTO]])
                res.custom_fields_dto = out

        return res

    def update_custom_fields_1(self, request: operations.UpdateCustomFields1Request) -> operations.UpdateCustomFields1Response:
        r"""Updates custom fields of a given client.
        Updates custom fields of a given client.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCustomFields1Request, base_url, '/customers/{customerId}/customFields', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCustomFields1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldDTO]])
                res.custom_fields_dto = out

        return res

    def update_industries(self, request: operations.UpdateIndustriesRequest) -> operations.UpdateIndustriesResponse:
        r"""Updates industries of a given client.
        Updates industries of a given client.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateIndustriesRequest, base_url, '/customers/{customerId}/industries', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateIndustriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[int]])
                res.industries_dto = out

        return res

    def update_1(self, request: operations.Update1Request) -> operations.Update1Response:
        r"""Updates an existing person.
        Only specified fields will be changed. One may not specify embeddable fields here - use separate API calls for updating them.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Update1Request, base_url, '/customers/persons/{personId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "customer_person_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Update1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerPersonDTO])
                res.customer_person_dto = out

        return res

    def update_2(self, request: operations.Update2Request) -> operations.Update2Response:
        r"""Updates an existing client.
        Only specified fields will be changed (id is required). One may not specify embeddable fields here - use separate API calls for updating them.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Update2Request, base_url, '/customers/{customerId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "customer_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Update2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerDTO])
                res.customer_dto = out

        return res

    