"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import changedby as shared_changedby
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ActivityChangeEnum(str, Enum):
    r"""Type of change:
      * created - First time the issue is found
      * comment - User left a comment in the timeline
      * found - Found again in a later scan
      * changed - One of the parameters of the finding was changed
       (e.g. severity)
    """
    CREATED = 'created'
    COMMENT = 'comment'
    FOUND = 'found'
    CHANGED = 'changed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Activity:
    
    change: Optional[ActivityChangeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('change'), 'exclude': lambda f: f is None }})
    r"""Type of change:
      * created - First time the issue is found
      * comment - User left a comment in the timeline
      * found - Found again in a later scan
      * changed - One of the parameters of the finding was changed
       (e.g. severity)
    """  
    changed: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changed'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date time of the last change"""  
    changed_by: Optional[shared_changedby.ChangedBy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changed_by'), 'exclude': lambda f: f is None }})
    r"""User that last modified the object"""  
    field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})
    r"""Field that was changed"""  
    old_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('old_value'), 'exclude': lambda f: f is None }})
    r"""Previous value"""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""New value"""  
    