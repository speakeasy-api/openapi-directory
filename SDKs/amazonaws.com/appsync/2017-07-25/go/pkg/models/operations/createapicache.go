// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateAPICachePathParams struct {
	// The GraphQL API ID.
	APIID string `pathParam:"style=simple,explode=false,name=apiId"`
}

type CreateAPICacheHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateAPICacheRequestBodyAPICachingBehaviorEnum - <p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li> </ul>
type CreateAPICacheRequestBodyAPICachingBehaviorEnum string

const (
	CreateAPICacheRequestBodyAPICachingBehaviorEnumFullRequestCaching CreateAPICacheRequestBodyAPICachingBehaviorEnum = "FULL_REQUEST_CACHING"
	CreateAPICacheRequestBodyAPICachingBehaviorEnumPerResolverCaching CreateAPICacheRequestBodyAPICachingBehaviorEnum = "PER_RESOLVER_CACHING"
)

func (e *CreateAPICacheRequestBodyAPICachingBehaviorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FULL_REQUEST_CACHING":
		fallthrough
	case "PER_RESOLVER_CACHING":
		*e = CreateAPICacheRequestBodyAPICachingBehaviorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAPICacheRequestBodyAPICachingBehaviorEnum: %s", s)
	}
}

// CreateAPICacheRequestBodyTypeEnum - <p>The cache instance type. Valid values are </p> <ul> <li> <p> <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code> </p> </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p> <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code> </p> </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li> <li> <p> <code>LARGE_12X</code> </p> </li> </ul> <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p> <p>The following legacy instance types are available, but their use is discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>
type CreateAPICacheRequestBodyTypeEnum string

const (
	CreateAPICacheRequestBodyTypeEnumT2Small   CreateAPICacheRequestBodyTypeEnum = "T2_SMALL"
	CreateAPICacheRequestBodyTypeEnumT2Medium  CreateAPICacheRequestBodyTypeEnum = "T2_MEDIUM"
	CreateAPICacheRequestBodyTypeEnumR4Large   CreateAPICacheRequestBodyTypeEnum = "R4_LARGE"
	CreateAPICacheRequestBodyTypeEnumR4Xlarge  CreateAPICacheRequestBodyTypeEnum = "R4_XLARGE"
	CreateAPICacheRequestBodyTypeEnumR42Xlarge CreateAPICacheRequestBodyTypeEnum = "R4_2XLARGE"
	CreateAPICacheRequestBodyTypeEnumR44Xlarge CreateAPICacheRequestBodyTypeEnum = "R4_4XLARGE"
	CreateAPICacheRequestBodyTypeEnumR48Xlarge CreateAPICacheRequestBodyTypeEnum = "R4_8XLARGE"
	CreateAPICacheRequestBodyTypeEnumSmall     CreateAPICacheRequestBodyTypeEnum = "SMALL"
	CreateAPICacheRequestBodyTypeEnumMedium    CreateAPICacheRequestBodyTypeEnum = "MEDIUM"
	CreateAPICacheRequestBodyTypeEnumLarge     CreateAPICacheRequestBodyTypeEnum = "LARGE"
	CreateAPICacheRequestBodyTypeEnumXlarge    CreateAPICacheRequestBodyTypeEnum = "XLARGE"
	CreateAPICacheRequestBodyTypeEnumLarge2X   CreateAPICacheRequestBodyTypeEnum = "LARGE_2X"
	CreateAPICacheRequestBodyTypeEnumLarge4X   CreateAPICacheRequestBodyTypeEnum = "LARGE_4X"
	CreateAPICacheRequestBodyTypeEnumLarge8X   CreateAPICacheRequestBodyTypeEnum = "LARGE_8X"
	CreateAPICacheRequestBodyTypeEnumLarge12X  CreateAPICacheRequestBodyTypeEnum = "LARGE_12X"
)

func (e *CreateAPICacheRequestBodyTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "T2_SMALL":
		fallthrough
	case "T2_MEDIUM":
		fallthrough
	case "R4_LARGE":
		fallthrough
	case "R4_XLARGE":
		fallthrough
	case "R4_2XLARGE":
		fallthrough
	case "R4_4XLARGE":
		fallthrough
	case "R4_8XLARGE":
		fallthrough
	case "SMALL":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LARGE":
		fallthrough
	case "XLARGE":
		fallthrough
	case "LARGE_2X":
		fallthrough
	case "LARGE_4X":
		fallthrough
	case "LARGE_8X":
		fallthrough
	case "LARGE_12X":
		*e = CreateAPICacheRequestBodyTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAPICacheRequestBodyTypeEnum: %s", s)
	}
}

type CreateAPICacheRequestBody struct {
	// <p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li> </ul>
	APICachingBehavior CreateAPICacheRequestBodyAPICachingBehaviorEnum `json:"apiCachingBehavior"`
	// At-rest encryption flag for cache. You cannot update this setting after creation.
	AtRestEncryptionEnabled *bool `json:"atRestEncryptionEnabled,omitempty"`
	// Transit encryption flag when connecting to cache. You cannot update this setting after creation.
	TransitEncryptionEnabled *bool `json:"transitEncryptionEnabled,omitempty"`
	// <p>TTL in seconds for cache entries.</p> <p>Valid values are 1â€“3,600 seconds.</p>
	TTL int64 `json:"ttl"`
	// <p>The cache instance type. Valid values are </p> <ul> <li> <p> <code>SMALL</code> </p> </li> <li> <p> <code>MEDIUM</code> </p> </li> <li> <p> <code>LARGE</code> </p> </li> <li> <p> <code>XLARGE</code> </p> </li> <li> <p> <code>LARGE_2X</code> </p> </li> <li> <p> <code>LARGE_4X</code> </p> </li> <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li> <li> <p> <code>LARGE_12X</code> </p> </li> </ul> <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p> <p>The following legacy instance types are available, but their use is discouraged:</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>
	Type CreateAPICacheRequestBodyTypeEnum `json:"type"`
}

type CreateAPICacheRequest struct {
	PathParams CreateAPICachePathParams
	Headers    CreateAPICacheHeaders
	Request    CreateAPICacheRequestBody `request:"mediaType=application/json"`
}

type CreateAPICacheResponse struct {
	// BadRequestException
	BadRequestException interface{}
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// Success
	CreateAPICacheResponse *shared.CreateAPICacheResponse
	// InternalFailureException
	InternalFailureException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
	// UnauthorizedException
	UnauthorizedException interface{}
}
