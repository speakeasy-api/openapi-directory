// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum - 'tcp' or 'udp'
type UpdateNetworkOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum string

const (
	UpdateNetworkOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnumTCP UpdateNetworkOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum = "tcp"
	UpdateNetworkOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnumUDP UpdateNetworkOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum = "udp"
)

func (e *UpdateNetworkOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tcp":
		fallthrough
	case "udp":
		*e = UpdateNetworkOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum: %s", s)
	}
}

type UpdateNetworkOneToManyNatRulesRequestBodyRulesPortRules struct {
	// Remote IP addresses or ranges that are permitted to access the internal resource via this port forwarding rule, or 'any'
	AllowedIps []string `json:"allowedIps,omitempty"`
	// Local IP address to which traffic will be forwarded
	LocalIP *string `json:"localIp,omitempty"`
	// Destination port of the forwarded traffic that will be sent from the MX to the specified host on the LAN. If you simply wish to forward the traffic without translating the port, this should be the same as the Public port
	LocalPort *string `json:"localPort,omitempty"`
	// A description of the rule
	Name *string `json:"name,omitempty"`
	// 'tcp' or 'udp'
	Protocol *UpdateNetworkOneToManyNatRulesRequestBodyRulesPortRulesProtocolEnum `json:"protocol,omitempty"`
	// Destination port of the traffic that is arriving on the WAN
	PublicPort *string `json:"publicPort,omitempty"`
}

// UpdateNetworkOneToManyNatRulesRequestBodyRulesUplinkEnum - The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2')
type UpdateNetworkOneToManyNatRulesRequestBodyRulesUplinkEnum string

const (
	UpdateNetworkOneToManyNatRulesRequestBodyRulesUplinkEnumInternet1 UpdateNetworkOneToManyNatRulesRequestBodyRulesUplinkEnum = "internet1"
	UpdateNetworkOneToManyNatRulesRequestBodyRulesUplinkEnumInternet2 UpdateNetworkOneToManyNatRulesRequestBodyRulesUplinkEnum = "internet2"
)

func (e *UpdateNetworkOneToManyNatRulesRequestBodyRulesUplinkEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internet1":
		fallthrough
	case "internet2":
		*e = UpdateNetworkOneToManyNatRulesRequestBodyRulesUplinkEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkOneToManyNatRulesRequestBodyRulesUplinkEnum: %s", s)
	}
}

type UpdateNetworkOneToManyNatRulesRequestBodyRules struct {
	// An array of associated forwarding rules
	PortRules []UpdateNetworkOneToManyNatRulesRequestBodyRulesPortRules `json:"portRules"`
	// The IP address that will be used to access the internal resource from the WAN
	PublicIP string `json:"publicIp"`
	// The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2')
	Uplink UpdateNetworkOneToManyNatRulesRequestBodyRulesUplinkEnum `json:"uplink"`
}

type UpdateNetworkOneToManyNatRulesRequestBody struct {
	// An array of 1:Many nat rules
	Rules []UpdateNetworkOneToManyNatRulesRequestBodyRules `json:"rules"`
}

type UpdateNetworkOneToManyNatRulesRequest struct {
	RequestBody UpdateNetworkOneToManyNatRulesRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                    `pathParam:"style=simple,explode=false,name=networkId"`
}

type UpdateNetworkOneToManyNatRulesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkOneToManyNatRules200ApplicationJSONObject map[string]interface{}
}
