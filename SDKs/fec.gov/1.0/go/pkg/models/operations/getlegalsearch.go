// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/types"
)

type GetLegalSearchAoCategoryEnum string

const (
	GetLegalSearchAoCategoryEnumF GetLegalSearchAoCategoryEnum = "F"
	GetLegalSearchAoCategoryEnumV GetLegalSearchAoCategoryEnum = "V"
	GetLegalSearchAoCategoryEnumD GetLegalSearchAoCategoryEnum = "D"
	GetLegalSearchAoCategoryEnumR GetLegalSearchAoCategoryEnum = "R"
	GetLegalSearchAoCategoryEnumW GetLegalSearchAoCategoryEnum = "W"
	GetLegalSearchAoCategoryEnumC GetLegalSearchAoCategoryEnum = "C"
	GetLegalSearchAoCategoryEnumS GetLegalSearchAoCategoryEnum = "S"
)

func (e *GetLegalSearchAoCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "F":
		fallthrough
	case "V":
		fallthrough
	case "D":
		fallthrough
	case "R":
		fallthrough
	case "W":
		fallthrough
	case "C":
		fallthrough
	case "S":
		*e = GetLegalSearchAoCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLegalSearchAoCategoryEnum: %s", s)
	}
}

type GetLegalSearchAoRequestorTypeEnum string

const (
	GetLegalSearchAoRequestorTypeEnumOne      GetLegalSearchAoRequestorTypeEnum = "1"
	GetLegalSearchAoRequestorTypeEnumTwo      GetLegalSearchAoRequestorTypeEnum = "2"
	GetLegalSearchAoRequestorTypeEnumThree    GetLegalSearchAoRequestorTypeEnum = "3"
	GetLegalSearchAoRequestorTypeEnumFour     GetLegalSearchAoRequestorTypeEnum = "4"
	GetLegalSearchAoRequestorTypeEnumFive     GetLegalSearchAoRequestorTypeEnum = "5"
	GetLegalSearchAoRequestorTypeEnumSix      GetLegalSearchAoRequestorTypeEnum = "6"
	GetLegalSearchAoRequestorTypeEnumSeven    GetLegalSearchAoRequestorTypeEnum = "7"
	GetLegalSearchAoRequestorTypeEnumEight    GetLegalSearchAoRequestorTypeEnum = "8"
	GetLegalSearchAoRequestorTypeEnumNine     GetLegalSearchAoRequestorTypeEnum = "9"
	GetLegalSearchAoRequestorTypeEnumTen      GetLegalSearchAoRequestorTypeEnum = "10"
	GetLegalSearchAoRequestorTypeEnumEleven   GetLegalSearchAoRequestorTypeEnum = "11"
	GetLegalSearchAoRequestorTypeEnumTwelve   GetLegalSearchAoRequestorTypeEnum = "12"
	GetLegalSearchAoRequestorTypeEnumThirteen GetLegalSearchAoRequestorTypeEnum = "13"
	GetLegalSearchAoRequestorTypeEnumFourteen GetLegalSearchAoRequestorTypeEnum = "14"
	GetLegalSearchAoRequestorTypeEnumFifteen  GetLegalSearchAoRequestorTypeEnum = "15"
	GetLegalSearchAoRequestorTypeEnumSixteen  GetLegalSearchAoRequestorTypeEnum = "16"
)

func (e *GetLegalSearchAoRequestorTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		fallthrough
	case "8":
		fallthrough
	case "9":
		fallthrough
	case "10":
		fallthrough
	case "11":
		fallthrough
	case "12":
		fallthrough
	case "13":
		fallthrough
	case "14":
		fallthrough
	case "15":
		fallthrough
	case "16":
		*e = GetLegalSearchAoRequestorTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLegalSearchAoRequestorTypeEnum: %s", s)
	}
}

type GetLegalSearchCaseDocCategoryIDEnum string

const (
	GetLegalSearchCaseDocCategoryIDEnumOne   GetLegalSearchCaseDocCategoryIDEnum = "1"
	GetLegalSearchCaseDocCategoryIDEnumTwo   GetLegalSearchCaseDocCategoryIDEnum = "2"
	GetLegalSearchCaseDocCategoryIDEnumThree GetLegalSearchCaseDocCategoryIDEnum = "3"
	GetLegalSearchCaseDocCategoryIDEnumFour  GetLegalSearchCaseDocCategoryIDEnum = "4"
	GetLegalSearchCaseDocCategoryIDEnumFive  GetLegalSearchCaseDocCategoryIDEnum = "5"
	GetLegalSearchCaseDocCategoryIDEnumSix   GetLegalSearchCaseDocCategoryIDEnum = "6"
)

func (e *GetLegalSearchCaseDocCategoryIDEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		*e = GetLegalSearchCaseDocCategoryIDEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLegalSearchCaseDocCategoryIDEnum: %s", s)
	}
}

type GetLegalSearchQueryParams struct {
	// Admin fine committee ID
	//
	AfCommitteeID *string `queryParam:"style=form,explode=true,name=af_committee_id"`
	// Final Determination fine amount
	//
	AfFdFineAmount *int `queryParam:"style=form,explode=true,name=af_fd_fine_amount"`
	// The latest Final Determination date
	//
	AfMaxFdDate *types.Date `queryParam:"style=form,explode=true,name=af_max_fd_date"`
	// The latest Reason to Believe date
	//
	AfMaxRtbDate *types.Date `queryParam:"style=form,explode=true,name=af_max_rtb_date"`
	// The earliest Final Determination date
	//
	AfMinFdDate *types.Date `queryParam:"style=form,explode=true,name=af_min_fd_date"`
	// The earliest Reason to Believe date
	//
	AfMinRtbDate *types.Date `queryParam:"style=form,explode=true,name=af_min_rtb_date"`
	// Admin fine committee name
	//
	AfName []string `queryParam:"style=form,explode=true,name=af_name"`
	// Admin fine report year
	//
	AfReportYear *string `queryParam:"style=form,explode=true,name=af_report_year"`
	// Reason to Believe fine amount
	//
	AfRtbFineAmount *int `queryParam:"style=form,explode=true,name=af_rtb_fine_amount"`
	// Category of the document
	//
	AoCategory []GetLegalSearchAoCategoryEnum `queryParam:"style=form,explode=true,name=ao_category"`
	// Require all citations to be in document (default behavior is any)
	//
	AoCitationRequireAll *bool `queryParam:"style=form,explode=true,name=ao_citation_require_all"`
	// Name of commenter or representative
	//
	AoEntityName []string `queryParam:"style=form,explode=true,name=ao_entity_name"`
	// AO is pending
	//
	AoIsPending *bool `queryParam:"style=form,explode=true,name=ao_is_pending"`
	// Latest issue date of advisory opinion
	//
	AoMaxIssueDate *types.Date `queryParam:"style=form,explode=true,name=ao_max_issue_date"`
	// Latest request date of advisory opinion
	//
	AoMaxRequestDate *types.Date `queryParam:"style=form,explode=true,name=ao_max_request_date"`
	// Earliest issue date of advisory opinion
	//
	AoMinIssueDate *types.Date `queryParam:"style=form,explode=true,name=ao_min_issue_date"`
	// Earliest request date of advisory opinion
	//
	AoMinRequestDate *types.Date `queryParam:"style=form,explode=true,name=ao_min_request_date"`
	// Force advisory opinion name
	//
	AoName []string `queryParam:"style=form,explode=true,name=ao_name"`
	// Force advisory opinion number
	//
	AoNo []string `queryParam:"style=form,explode=true,name=ao_no"`
	// Regulatory citations
	//
	AoRegulatoryCitation []string `queryParam:"style=form,explode=true,name=ao_regulatory_citation"`
	// The requestor of the advisory opinion
	//
	AoRequestor *string `queryParam:"style=form,explode=true,name=ao_requestor"`
	// Code of the advisory opinion requestor type.
	//
	AoRequestorType []GetLegalSearchAoRequestorTypeEnum `queryParam:"style=form,explode=true,name=ao_requestor_type"`
	// Status of AO (pending, withdrawn, or final)
	//
	AoStatus *string `queryParam:"style=form,explode=true,name=ao_status"`
	// Statutory citations
	//
	AoStatutoryCitation []string `queryParam:"style=form,explode=true,name=ao_statutory_citation"`
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// Require all citations to be in document (default behavior is any)
	//
	CaseCitationRequireAll *bool `queryParam:"style=form,explode=true,name=case_citation_require_all"`
	// Cases dispositions
	//
	CaseDispositions []string `queryParam:"style=form,explode=true,name=case_dispositions"`
	// Select one or more case_doc_category_id to filter by corresponding CASE_DOCUMENT_CATEGORY:
	//         - 1 - Conciliation Agreements
	//         - 2 - Complaint, Responses, Designation of Counsel and Extensions of Timee
	//         - 3 - General Counsel Reports, Briefs, Notifications and Responses
	//         - 4 - Certifications
	//         - 5 - Civil Penalties, Disgorgements and Other Payments
	//         - 6 - Statements of Reasons
	//
	CaseDocCategoryID []GetLegalSearchCaseDocCategoryIDEnum `queryParam:"style=form,explode=true,name=case_doc_category_id"`
	// Cases election cycles
	//
	CaseElectionCycles *int `queryParam:"style=form,explode=true,name=case_election_cycles"`
	// The latest date closed of case
	//
	CaseMaxCloseDate *types.Date `queryParam:"style=form,explode=true,name=case_max_close_date"`
	// The latest date opened of case
	//
	CaseMaxOpenDate *types.Date `queryParam:"style=form,explode=true,name=case_max_open_date"`
	// The earliest date closed of case
	//
	CaseMinCloseDate *types.Date `queryParam:"style=form,explode=true,name=case_min_close_date"`
	// The earliest date opened of case
	//
	CaseMinOpenDate *types.Date `queryParam:"style=form,explode=true,name=case_min_open_date"`
	// Enforcement matter case number
	//
	CaseNo []string `queryParam:"style=form,explode=true,name=case_no"`
	// Regulatory citations
	//
	CaseRegulatoryCitation []string `queryParam:"style=form,explode=true,name=case_regulatory_citation"`
	// Cases respondents
	//
	CaseRespondents *string `queryParam:"style=form,explode=true,name=case_respondents"`
	// Statutory citations
	//
	CaseStatutoryCitation []string `queryParam:"style=form,explode=true,name=case_statutory_citation"`
	// Get results starting from this index
	//
	FromHit *int `queryParam:"style=form,explode=true,name=from_hit"`
	// Number of results to return (max 10)
	//
	HitsReturned *int `queryParam:"style=form,explode=true,name=hits_returned"`
	// Type of MUR : current or archived
	//
	MurType *string `queryParam:"style=form,explode=true,name=mur_type"`
	// Text to search legal documents for
	//
	Q *string `queryParam:"style=form,explode=true,name=q"`
	// Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Legal Document type to refine search by
	//     - statutes
	//     - regulations
	//     - advisory_opinions
	//     - murs
	//     - admin_fines
	//
	Type *string `queryParam:"style=form,explode=true,name=type"`
}

type GetLegalSearchRequest struct {
	QueryParams GetLegalSearchQueryParams
}

type GetLegalSearchDefaultApplicationJSONAdminFinesCommissionVotes struct {
	Action   *string     `json:"action,omitempty"`
	VoteDate *types.Date `json:"vote_date,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONAdminFinesDocuments struct {
	Category     *string     `json:"category,omitempty"`
	Description  *string     `json:"description,omitempty"`
	DocumentDate *types.Date `json:"document_date,omitempty"`
	DocumentID   *int64      `json:"document_id,omitempty"`
	Length       *int64      `json:"length,omitempty"`
	URL          *string     `json:"url,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONAdminFines struct {
	ChallengeOutcome          *string                                                         `json:"challenge_outcome,omitempty"`
	ChallengeReceiptDate      *types.Date                                                     `json:"challenge_receipt_date,omitempty"`
	CheckAmount               *float64                                                        `json:"check_amount,omitempty"`
	CommissionVotes           []GetLegalSearchDefaultApplicationJSONAdminFinesCommissionVotes `json:"commission_votes,omitempty"`
	CommitteeID               *string                                                         `json:"committee_id,omitempty"`
	DocID                     *string                                                         `json:"doc_id,omitempty"`
	DocumentHighlights        map[string]interface{}                                          `json:"document_highlights,omitempty"`
	Documents                 []GetLegalSearchDefaultApplicationJSONAdminFinesDocuments       `json:"documents,omitempty"`
	FinalDeterminationAmount  *float64                                                        `json:"final_determination_amount,omitempty"`
	FinalDeterminationDate    *types.Date                                                     `json:"final_determination_date,omitempty"`
	Highlights                []string                                                        `json:"highlights,omitempty"`
	Name                      *string                                                         `json:"name,omitempty"`
	No                        *string                                                         `json:"no,omitempty"`
	PetitionCourtDecisionDate *types.Date                                                     `json:"petition_court_decision_date,omitempty"`
	PetitionCourtFilingDate   *types.Date                                                     `json:"petition_court_filing_date,omitempty"`
	ReasonToBelieveActionDate *types.Date                                                     `json:"reason_to_believe_action_date,omitempty"`
	ReasonToBelieveFineAmount *float64                                                        `json:"reason_to_believe_fine_amount,omitempty"`
	ReportType                *string                                                         `json:"report_type,omitempty"`
	ReportYear                *string                                                         `json:"report_year,omitempty"`
	TreasuryReferralAmount    *float64                                                        `json:"treasury_referral_amount,omitempty"`
	TreasuryReferralDate      *types.Date                                                     `json:"treasury_referral_date,omitempty"`
	URL                       *string                                                         `json:"url,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONAdrsCommissionVotes struct {
	Action   *string     `json:"action,omitempty"`
	VoteDate *types.Date `json:"vote_date,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONAdrsDispositionsCitations struct {
	Text  *string `json:"text,omitempty"`
	Title *string `json:"title,omitempty"`
	Type  *string `json:"type,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONAdrsDispositions struct {
	Citations   []GetLegalSearchDefaultApplicationJSONAdrsDispositionsCitations `json:"citations,omitempty"`
	Disposition *string                                                         `json:"disposition,omitempty"`
	Penalty     *float64                                                        `json:"penalty,omitempty"`
	Respondent  *string                                                         `json:"respondent,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONAdrsDocuments struct {
	Category     *string     `json:"category,omitempty"`
	Description  *string     `json:"description,omitempty"`
	DocumentDate *types.Date `json:"document_date,omitempty"`
	DocumentID   *int64      `json:"document_id,omitempty"`
	Length       *int64      `json:"length,omitempty"`
	URL          *string     `json:"url,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONAdrsParticipants struct {
	Citations map[string]interface{} `json:"citations,omitempty"`
	Name      *string                `json:"name,omitempty"`
	Role      *string                `json:"role,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONAdrs struct {
	CloseDate          *types.Date                                               `json:"close_date,omitempty"`
	CommissionVotes    []GetLegalSearchDefaultApplicationJSONAdrsCommissionVotes `json:"commission_votes,omitempty"`
	Dispositions       []GetLegalSearchDefaultApplicationJSONAdrsDispositions    `json:"dispositions,omitempty"`
	DocID              *string                                                   `json:"doc_id,omitempty"`
	DocumentHighlights map[string]interface{}                                    `json:"document_highlights,omitempty"`
	Documents          []GetLegalSearchDefaultApplicationJSONAdrsDocuments       `json:"documents,omitempty"`
	ElectionCycles     *int64                                                    `json:"election_cycles,omitempty"`
	Highlights         []string                                                  `json:"highlights,omitempty"`
	Name               *string                                                   `json:"name,omitempty"`
	No                 *string                                                   `json:"no,omitempty"`
	OpenDate           *types.Date                                               `json:"open_date,omitempty"`
	Participants       []GetLegalSearchDefaultApplicationJSONAdrsParticipants    `json:"participants,omitempty"`
	Respondents        []string                                                  `json:"respondents,omitempty"`
	Subjects           []string                                                  `json:"subjects,omitempty"`
	URL                *string                                                   `json:"url,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsAoCitations struct {
	Name *string `json:"name,omitempty"`
	No   *string `json:"no,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsAosCitedBy struct {
	Name *string `json:"name,omitempty"`
	No   *string `json:"no,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsDocuments struct {
	Category    *string     `json:"category,omitempty"`
	Date        *types.Date `json:"date,omitempty"`
	Description *string     `json:"description,omitempty"`
	DocumentID  *int64      `json:"document_id,omitempty"`
	URL         *string     `json:"url,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsEntities struct {
	Name *string `json:"name,omitempty"`
	Role *string `json:"role,omitempty"`
	Type *string `json:"type,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsRegulatoryCitations struct {
	Part    *int64 `json:"part,omitempty"`
	Section *int64 `json:"section,omitempty"`
	Title   *int64 `json:"title,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsStatutoryCitations struct {
	Section *string `json:"section,omitempty"`
	Title   *int64  `json:"title,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONAdvisoryOpinions struct {
	AoCitations         []GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsAoCitations         `json:"ao_citations,omitempty"`
	AosCitedBy          []GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsAosCitedBy          `json:"aos_cited_by,omitempty"`
	CommenterNames      []string                                                                  `json:"commenter_names,omitempty"`
	DocumentHighlights  map[string]interface{}                                                    `json:"document_highlights,omitempty"`
	Documents           []GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsDocuments           `json:"documents,omitempty"`
	Entities            []GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsEntities            `json:"entities,omitempty"`
	Highlights          []string                                                                  `json:"highlights,omitempty"`
	IsPending           *bool                                                                     `json:"is_pending,omitempty"`
	IssueDate           *types.Date                                                               `json:"issue_date,omitempty"`
	Name                *string                                                                   `json:"name,omitempty"`
	No                  *string                                                                   `json:"no,omitempty"`
	RegulatoryCitations []GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsRegulatoryCitations `json:"regulatory_citations,omitempty"`
	RepresentativeNames []string                                                                  `json:"representative_names,omitempty"`
	RequestDate         *types.Date                                                               `json:"request_date,omitempty"`
	RequestorNames      []string                                                                  `json:"requestor_names,omitempty"`
	RequestorTypes      []string                                                                  `json:"requestor_types,omitempty"`
	Status              *string                                                                   `json:"status,omitempty"`
	StatutoryCitations  []GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsStatutoryCitations  `json:"statutory_citations,omitempty"`
	Summary             *string                                                                   `json:"summary,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONMursCommissionVotes struct {
	Action   *string     `json:"action,omitempty"`
	VoteDate *types.Date `json:"vote_date,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONMursDispositionsCitations struct {
	Text  *string `json:"text,omitempty"`
	Title *string `json:"title,omitempty"`
	Type  *string `json:"type,omitempty"`
	URL   *string `json:"url,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONMursDispositions struct {
	Citations   []GetLegalSearchDefaultApplicationJSONMursDispositionsCitations `json:"citations,omitempty"`
	Disposition *string                                                         `json:"disposition,omitempty"`
	Penalty     *float64                                                        `json:"penalty,omitempty"`
	Respondent  *string                                                         `json:"respondent,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONMursDocuments struct {
	Category     *string     `json:"category,omitempty"`
	Description  *string     `json:"description,omitempty"`
	DocumentDate *types.Date `json:"document_date,omitempty"`
	DocumentID   *int64      `json:"document_id,omitempty"`
	Length       *int64      `json:"length,omitempty"`
	URL          *string     `json:"url,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONMursMurTypeEnum string

const (
	GetLegalSearchDefaultApplicationJSONMursMurTypeEnumCurrent  GetLegalSearchDefaultApplicationJSONMursMurTypeEnum = "current"
	GetLegalSearchDefaultApplicationJSONMursMurTypeEnumArchived GetLegalSearchDefaultApplicationJSONMursMurTypeEnum = "archived"
)

func (e *GetLegalSearchDefaultApplicationJSONMursMurTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "current":
		fallthrough
	case "archived":
		*e = GetLegalSearchDefaultApplicationJSONMursMurTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLegalSearchDefaultApplicationJSONMursMurTypeEnum: %s", s)
	}
}

type GetLegalSearchDefaultApplicationJSONMursParticipants struct {
	Citations map[string]interface{} `json:"citations,omitempty"`
	Name      *string                `json:"name,omitempty"`
	Role      *string                `json:"role,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONMurs struct {
	CloseDate          *types.Date                                               `json:"close_date,omitempty"`
	CommissionVotes    []GetLegalSearchDefaultApplicationJSONMursCommissionVotes `json:"commission_votes,omitempty"`
	Dispositions       []GetLegalSearchDefaultApplicationJSONMursDispositions    `json:"dispositions,omitempty"`
	DocID              *string                                                   `json:"doc_id,omitempty"`
	DocumentHighlights map[string]interface{}                                    `json:"document_highlights,omitempty"`
	Documents          []GetLegalSearchDefaultApplicationJSONMursDocuments       `json:"documents,omitempty"`
	ElectionCycles     *int64                                                    `json:"election_cycles,omitempty"`
	Highlights         []string                                                  `json:"highlights,omitempty"`
	MurType            *GetLegalSearchDefaultApplicationJSONMursMurTypeEnum      `json:"mur_type,omitempty"`
	Name               *string                                                   `json:"name,omitempty"`
	No                 *string                                                   `json:"no,omitempty"`
	OpenDate           *types.Date                                               `json:"open_date,omitempty"`
	Participants       []GetLegalSearchDefaultApplicationJSONMursParticipants    `json:"participants,omitempty"`
	Respondents        []string                                                  `json:"respondents,omitempty"`
	Subjects           []string                                                  `json:"subjects,omitempty"`
	URL                *string                                                   `json:"url,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONRegulations struct {
	DocID              *string                `json:"doc_id,omitempty"`
	DocumentHighlights map[string]interface{} `json:"document_highlights,omitempty"`
	Highlights         []string               `json:"highlights,omitempty"`
	Name               *string                `json:"name,omitempty"`
	No                 *string                `json:"no,omitempty"`
	URL                *string                `json:"url,omitempty"`
}

type GetLegalSearchDefaultApplicationJSONStatutes struct {
	Chapter            *string                `json:"chapter,omitempty"`
	DocID              *string                `json:"doc_id,omitempty"`
	DocumentHighlights map[string]interface{} `json:"document_highlights,omitempty"`
	Highlights         []string               `json:"highlights,omitempty"`
	Name               *string                `json:"name,omitempty"`
	No                 *string                `json:"no,omitempty"`
	Title              *string                `json:"title,omitempty"`
	URL                *string                `json:"url,omitempty"`
}

// GetLegalSearchDefaultApplicationJSON - Legal search results
type GetLegalSearchDefaultApplicationJSON struct {
	AdminFines       []GetLegalSearchDefaultApplicationJSONAdminFines       `json:"admin_fines,omitempty"`
	Adrs             []GetLegalSearchDefaultApplicationJSONAdrs             `json:"adrs,omitempty"`
	AdvisoryOpinions []GetLegalSearchDefaultApplicationJSONAdvisoryOpinions `json:"advisory_opinions,omitempty"`
	Murs             []GetLegalSearchDefaultApplicationJSONMurs             `json:"murs,omitempty"`
	Regulations      []GetLegalSearchDefaultApplicationJSONRegulations      `json:"regulations,omitempty"`
	Statutes         []GetLegalSearchDefaultApplicationJSONStatutes         `json:"statutes,omitempty"`
	// Total number of Admin Fines matching the search criteria
	TotalAdminFines *int64 `json:"total_admin_fines,omitempty"`
	// Total number of ADRs matching the search criteria
	TotalAdrs *int64 `json:"total_adrs,omitempty"`
	// Total number of Advisory Opinions matching the search criteria
	TotalAdvisoryOpinions *int64 `json:"total_advisory_opinions,omitempty"`
	// Total number of legal documents matching the search criteria
	TotalAll *int64 `json:"total_all,omitempty"`
	// Total number of MURs matching the search criteria
	TotalMurs *int64 `json:"total_murs,omitempty"`
	// Total number of Regulations matching the search criteria
	TotalRegulations *int64 `json:"total_regulations,omitempty"`
	// Total number of Statutes matching the search criteria
	TotalStatutes *int64 `json:"total_statutes,omitempty"`
}

type GetLegalSearchResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Legal search results
	GetLegalSearchDefaultApplicationJSONObject *GetLegalSearchDefaultApplicationJSON
}
