// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CompleteASandboxAccountTransferRequest struct {
	AccountTransferID string `pathParam:"style=simple,explode=false,name=account_transfer_id"`
}

type CompleteASandboxAccountTransferDefaultApplicationJSON13StatusEnum int64

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON13StatusEnumFourHundredAndTwentyNine CompleteASandboxAccountTransferDefaultApplicationJSON13StatusEnum = 429
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON13StatusEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON13StatusEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON13StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 429:
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON13StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON13StatusEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON13TypeEnum string

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON13TypeEnumRateLimitedError CompleteASandboxAccountTransferDefaultApplicationJSON13TypeEnum = "rate_limited_error"
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON13TypeEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON13TypeEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON13TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rate_limited_error":
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON13TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON13TypeEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON13 struct {
	Detail     string                                                            `json:"detail"`
	RetryAfter *int64                                                            `json:"retry_after,omitempty"`
	Status     CompleteASandboxAccountTransferDefaultApplicationJSON13StatusEnum `json:"status"`
	Title      string                                                            `json:"title"`
	Type       CompleteASandboxAccountTransferDefaultApplicationJSON13TypeEnum   `json:"type"`
}

type CompleteASandboxAccountTransferDefaultApplicationJSON12StatusEnum int64

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON12StatusEnumFourHundredAndThree CompleteASandboxAccountTransferDefaultApplicationJSON12StatusEnum = 403
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON12StatusEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON12StatusEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON12StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON12StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON12StatusEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON12TypeEnum string

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON12TypeEnumPrivateFeatureError CompleteASandboxAccountTransferDefaultApplicationJSON12TypeEnum = "private_feature_error"
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON12TypeEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON12TypeEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON12TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private_feature_error":
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON12TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON12TypeEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON12 struct {
	Detail string                                                            `json:"detail"`
	Status CompleteASandboxAccountTransferDefaultApplicationJSON12StatusEnum `json:"status"`
	Title  string                                                            `json:"title"`
	Type   CompleteASandboxAccountTransferDefaultApplicationJSON12TypeEnum   `json:"type"`
}

type CompleteASandboxAccountTransferDefaultApplicationJSON11StatusEnum int64

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON11StatusEnumFourHundredAndFour CompleteASandboxAccountTransferDefaultApplicationJSON11StatusEnum = 404
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON11StatusEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON11StatusEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON11StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 404:
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON11StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON11StatusEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON11TypeEnum string

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON11TypeEnumObjectNotFoundError CompleteASandboxAccountTransferDefaultApplicationJSON11TypeEnum = "object_not_found_error"
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON11TypeEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON11TypeEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON11TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "object_not_found_error":
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON11TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON11TypeEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON11 struct {
	Detail string                                                            `json:"detail"`
	Status CompleteASandboxAccountTransferDefaultApplicationJSON11StatusEnum `json:"status"`
	Title  string                                                            `json:"title"`
	Type   CompleteASandboxAccountTransferDefaultApplicationJSON11TypeEnum   `json:"type"`
}

type CompleteASandboxAccountTransferDefaultApplicationJSON10StatusEnum int64

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON10StatusEnumFourHundred CompleteASandboxAccountTransferDefaultApplicationJSON10StatusEnum = 400
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON10StatusEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON10StatusEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON10StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON10StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON10StatusEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON10TypeEnum string

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON10TypeEnumMalformedRequestError CompleteASandboxAccountTransferDefaultApplicationJSON10TypeEnum = "malformed_request_error"
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON10TypeEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON10TypeEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON10TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "malformed_request_error":
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON10TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON10TypeEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON10 struct {
	Detail string                                                            `json:"detail"`
	Status CompleteASandboxAccountTransferDefaultApplicationJSON10StatusEnum `json:"status"`
	Title  string                                                            `json:"title"`
	Type   CompleteASandboxAccountTransferDefaultApplicationJSON10TypeEnum   `json:"type"`
}

type CompleteASandboxAccountTransferDefaultApplicationJSON9StatusEnum int64

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON9StatusEnumFourHundred CompleteASandboxAccountTransferDefaultApplicationJSON9StatusEnum = 400
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON9StatusEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON9StatusEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON9StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON9StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON9StatusEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON9TypeEnum string

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON9TypeEnumInvalidParametersError CompleteASandboxAccountTransferDefaultApplicationJSON9TypeEnum = "invalid_parameters_error"
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON9TypeEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON9TypeEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON9TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_parameters_error":
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON9TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON9TypeEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON9 struct {
	Detail string `json:"detail"`
	// All errors related to parsing the request parameters.
	Errors []map[string]interface{}                                         `json:"errors"`
	Status CompleteASandboxAccountTransferDefaultApplicationJSON9StatusEnum `json:"status"`
	Title  string                                                           `json:"title"`
	Type   CompleteASandboxAccountTransferDefaultApplicationJSON9TypeEnum   `json:"type"`
}

type CompleteASandboxAccountTransferDefaultApplicationJSON8StatusEnum int64

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON8StatusEnumFourHundredAndNine CompleteASandboxAccountTransferDefaultApplicationJSON8StatusEnum = 409
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON8StatusEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON8StatusEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON8StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 409:
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON8StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON8StatusEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON8TypeEnum string

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON8TypeEnumInvalidOperationError CompleteASandboxAccountTransferDefaultApplicationJSON8TypeEnum = "invalid_operation_error"
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON8TypeEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON8TypeEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON8TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_operation_error":
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON8TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON8TypeEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON8 struct {
	Detail string                                                           `json:"detail"`
	Status CompleteASandboxAccountTransferDefaultApplicationJSON8StatusEnum `json:"status"`
	Title  string                                                           `json:"title"`
	Type   CompleteASandboxAccountTransferDefaultApplicationJSON8TypeEnum   `json:"type"`
}

type CompleteASandboxAccountTransferDefaultApplicationJSON7StatusEnum int64

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON7StatusEnumFourHundredAndOne CompleteASandboxAccountTransferDefaultApplicationJSON7StatusEnum = 401
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON7StatusEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON7StatusEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON7StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 401:
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON7StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON7StatusEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON7TypeEnum string

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON7TypeEnumInvalidAPIKeyError CompleteASandboxAccountTransferDefaultApplicationJSON7TypeEnum = "invalid_api_key_error"
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON7TypeEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON7TypeEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON7TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_api_key_error":
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON7TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON7TypeEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON7 struct {
	Detail string                                                           `json:"detail"`
	Status CompleteASandboxAccountTransferDefaultApplicationJSON7StatusEnum `json:"status"`
	Title  string                                                           `json:"title"`
	Type   CompleteASandboxAccountTransferDefaultApplicationJSON7TypeEnum   `json:"type"`
}

type CompleteASandboxAccountTransferDefaultApplicationJSON6StatusEnum int64

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON6StatusEnumFiveHundred CompleteASandboxAccountTransferDefaultApplicationJSON6StatusEnum = 500
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON6StatusEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON6StatusEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON6StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 500:
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON6StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON6StatusEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON6TypeEnum string

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON6TypeEnumInternalServerError CompleteASandboxAccountTransferDefaultApplicationJSON6TypeEnum = "internal_server_error"
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON6TypeEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON6TypeEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON6TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON6TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON6TypeEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON6 struct {
	Detail string                                                           `json:"detail"`
	Status CompleteASandboxAccountTransferDefaultApplicationJSON6StatusEnum `json:"status"`
	Title  string                                                           `json:"title"`
	Type   CompleteASandboxAccountTransferDefaultApplicationJSON6TypeEnum   `json:"type"`
}

type CompleteASandboxAccountTransferDefaultApplicationJSON5StatusEnum int64

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON5StatusEnumFourHundredAndThree CompleteASandboxAccountTransferDefaultApplicationJSON5StatusEnum = 403
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON5StatusEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON5StatusEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON5StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON5StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON5StatusEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON5TypeEnum string

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON5TypeEnumInsufficientPermissionsError CompleteASandboxAccountTransferDefaultApplicationJSON5TypeEnum = "insufficient_permissions_error"
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON5TypeEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON5TypeEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON5TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "insufficient_permissions_error":
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON5TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON5TypeEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON5 struct {
	Detail string                                                           `json:"detail"`
	Status CompleteASandboxAccountTransferDefaultApplicationJSON5StatusEnum `json:"status"`
	Title  string                                                           `json:"title"`
	Type   CompleteASandboxAccountTransferDefaultApplicationJSON5TypeEnum   `json:"type"`
}

type CompleteASandboxAccountTransferDefaultApplicationJSON4StatusEnum int64

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON4StatusEnumFourHundredAndTwentyTwo CompleteASandboxAccountTransferDefaultApplicationJSON4StatusEnum = 422
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON4StatusEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON4StatusEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON4StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 422:
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON4StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON4StatusEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON4TypeEnum string

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON4TypeEnumIdempotencyUnprocessableError CompleteASandboxAccountTransferDefaultApplicationJSON4TypeEnum = "idempotency_unprocessable_error"
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON4TypeEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON4TypeEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON4TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "idempotency_unprocessable_error":
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON4TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON4TypeEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON4 struct {
	Detail string                                                           `json:"detail"`
	Status CompleteASandboxAccountTransferDefaultApplicationJSON4StatusEnum `json:"status"`
	Title  string                                                           `json:"title"`
	Type   CompleteASandboxAccountTransferDefaultApplicationJSON4TypeEnum   `json:"type"`
}

type CompleteASandboxAccountTransferDefaultApplicationJSON3StatusEnum int64

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON3StatusEnumFourHundredAndNine CompleteASandboxAccountTransferDefaultApplicationJSON3StatusEnum = 409
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON3StatusEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON3StatusEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON3StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 409:
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON3StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON3StatusEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON3TypeEnum string

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON3TypeEnumIdempotencyConflictError CompleteASandboxAccountTransferDefaultApplicationJSON3TypeEnum = "idempotency_conflict_error"
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON3TypeEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON3TypeEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON3TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "idempotency_conflict_error":
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON3TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON3TypeEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON3 struct {
	Detail string                                                           `json:"detail"`
	Status CompleteASandboxAccountTransferDefaultApplicationJSON3StatusEnum `json:"status"`
	Title  string                                                           `json:"title"`
	Type   CompleteASandboxAccountTransferDefaultApplicationJSON3TypeEnum   `json:"type"`
}

type CompleteASandboxAccountTransferDefaultApplicationJSON2StatusEnum int64

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON2StatusEnumFourHundredAndThree CompleteASandboxAccountTransferDefaultApplicationJSON2StatusEnum = 403
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON2StatusEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON2StatusEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON2StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON2StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON2StatusEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON2TypeEnum string

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON2TypeEnumEnvironmentMismatchError CompleteASandboxAccountTransferDefaultApplicationJSON2TypeEnum = "environment_mismatch_error"
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON2TypeEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON2TypeEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON2TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "environment_mismatch_error":
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON2TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON2TypeEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON2 struct {
	Detail string                                                           `json:"detail"`
	Status CompleteASandboxAccountTransferDefaultApplicationJSON2StatusEnum `json:"status"`
	Title  string                                                           `json:"title"`
	Type   CompleteASandboxAccountTransferDefaultApplicationJSON2TypeEnum   `json:"type"`
}

type CompleteASandboxAccountTransferDefaultApplicationJSON1StatusEnum int64

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON1StatusEnumFourHundredAndFour CompleteASandboxAccountTransferDefaultApplicationJSON1StatusEnum = 404
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON1StatusEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON1StatusEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON1StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 404:
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON1StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON1StatusEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON1TypeEnum string

const (
	CompleteASandboxAccountTransferDefaultApplicationJSON1TypeEnumAPIMethodNotFoundError CompleteASandboxAccountTransferDefaultApplicationJSON1TypeEnum = "api_method_not_found_error"
)

func (e CompleteASandboxAccountTransferDefaultApplicationJSON1TypeEnum) ToPointer() *CompleteASandboxAccountTransferDefaultApplicationJSON1TypeEnum {
	return &e
}

func (e *CompleteASandboxAccountTransferDefaultApplicationJSON1TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_method_not_found_error":
		*e = CompleteASandboxAccountTransferDefaultApplicationJSON1TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteASandboxAccountTransferDefaultApplicationJSON1TypeEnum: %v", v)
	}
}

type CompleteASandboxAccountTransferDefaultApplicationJSON1 struct {
	Detail string                                                           `json:"detail"`
	Status CompleteASandboxAccountTransferDefaultApplicationJSON1StatusEnum `json:"status"`
	Title  string                                                           `json:"title"`
	Type   CompleteASandboxAccountTransferDefaultApplicationJSON1TypeEnum   `json:"type"`
}

type CompleteASandboxAccountTransferResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Account Transfer
	AccountTransfer *shared.AccountTransfer
	// Error
	Error interface{}
}
