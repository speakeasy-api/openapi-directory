<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ContinuousProject 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a new document to your continuous project
     * 
     * Add a new document to your continuous project. If the name already exists, it will update the existing document. In most scenarios, this operation will also trigger auto-translation of your document, via MT and/or TM.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddDocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddDocumentResponse
     */
	public function addDocument(
        \OpenAPI\OpenAPI\Models\Operations\AddDocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/documents', \OpenAPI\OpenAPI\Models\Operations\AddDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addOrUpdateDocumentRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->continuousProjectDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContinuousProjectDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Save/collect analytics data from Active widget
     * 
     * Save/collect analytics data from Active widget
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectAnalyticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectAnalyticsResponse
     */
	public function collectAnalytics(
        \OpenAPI\OpenAPI\Models\Operations\CollectAnalyticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectAnalyticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}/collect-analytics', \OpenAPI\OpenAPI\Models\Operations\CollectAnalyticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "analyticsCollection", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectAnalyticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Complete continuous project
     * 
     * Complete continuous project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CompleteResponse
     */
	public function complete(
        \OpenAPI\OpenAPI\Models\Operations\CompleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CompleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}/complete', \OpenAPI\OpenAPI\Models\Operations\CompleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Complete a continuous project document
     * 
     * Complete a continuous project document. Per your project settings, a continuous project document can be target language-specific or project-wide for all target languages of the project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompleteContinuousDocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CompleteContinuousDocumentResponse
     */
	public function completeContinuousDocument(
        \OpenAPI\OpenAPI\Models\Operations\CompleteContinuousDocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CompleteContinuousDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}/documents/{documentId}/complete', \OpenAPI\OpenAPI\Models\Operations\CompleteContinuousDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompleteContinuousDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Complete continuous project language
     * 
     * Complete continuous project language
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompleteLanguageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CompleteLanguageResponse
     */
	public function completeLanguage(
        \OpenAPI\OpenAPI\Models\Operations\CompleteLanguageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CompleteLanguageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}/languages/{targetLanguage}/complete', \OpenAPI\OpenAPI\Models\Operations\CompleteLanguageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompleteLanguageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Active widget
     * 
     * Create a new widget for your Active project to be used in your website. Most website-specific configuration is provided via widgets. This does not create a new Active project, just a separate widget.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateActiveWidgetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateActiveWidgetResponse
     */
	public function createActiveWidget(
        \OpenAPI\OpenAPI\Models\Operations\CreateActiveWidgetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateActiveWidgetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/widgets', \OpenAPI\OpenAPI\Models\Operations\CreateActiveWidgetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "activeWidget", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateActiveWidgetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->activeWidget = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ActiveWidget', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a continuous project
     * 
     * Create a new continuous project for your software, website, CI/CD translation needs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ContinuousProject $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateContinuousProjectResponse
     */
	public function createContinuousProject(
        \OpenAPI\OpenAPI\Models\Shared\ContinuousProject $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateContinuousProjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateContinuousProjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->continuousProject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContinuousProject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create subscription for continuous project
     * 
     * Create subscription for continuous project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionResponse
     */
	public function createSubscription(
        \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}/subscription', \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subscription", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Subscription', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a single widget for this Active project
     * 
     * Delete a single widget for this Active project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteActiveWidgetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteActiveWidgetResponse
     */
	public function deleteActiveWidget(
        \OpenAPI\OpenAPI\Models\Operations\DeleteActiveWidgetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteActiveWidgetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/widgets/{widgetId}', \OpenAPI\OpenAPI\Models\Operations\DeleteActiveWidgetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteActiveWidgetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a continuous project
     * 
     * Delete an existing continuous project. Your project will be cancelled, and you will still be charged for the amount of translations we have done for you so far.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteContinuousProjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteContinuousProjectResponse
     */
	public function deleteContinuousProject(
        \OpenAPI\OpenAPI\Models\Operations\DeleteContinuousProjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteContinuousProjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteContinuousProjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteContinuousProjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete subscription for continuous project
     * 
     * Delete subscription for continuous project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSubscriptionResponse
     */
	public function deleteSubscription(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}/subscription', \OpenAPI\OpenAPI\Models\Operations\DeleteSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Subscription', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View an Active widget
     * 
     * View the details of an Active widget to be used in your website. Most website-specific configuration is provided via widgets.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActiveWidgetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActiveWidgetResponse
     */
	public function getActiveWidget(
        \OpenAPI\OpenAPI\Models\Operations\GetActiveWidgetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActiveWidgetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/widgets/{widgetId}', \OpenAPI\OpenAPI\Models\Operations\GetActiveWidgetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActiveWidgetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->activeWidget = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ActiveWidget', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View Active widgets
     * 
     * View a list of widgets in your Active project to be used in your website. Most website-specific configuration is provided via widgets.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActiveWidgetsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActiveWidgetsResponse
     */
	public function getActiveWidgets(
        \OpenAPI\OpenAPI\Models\Operations\GetActiveWidgetsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActiveWidgetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/widgets', \OpenAPI\OpenAPI\Models\Operations\GetActiveWidgetsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActiveWidgetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->activeWidgetList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ActiveWidgetList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get JWT token to be used in analytics dashboards
     * 
     * Get JWT token to be used in analytics dashboards
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAnalyticsTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAnalyticsTokenResponse
     */
	public function getAnalyticsToken(
        \OpenAPI\OpenAPI\Models\Operations\GetAnalyticsTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAnalyticsTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}/analytics-token', \OpenAPI\OpenAPI\Models\Operations\GetAnalyticsTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAnalyticsTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AnalyticsToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View a continuous project
     * 
     * View the details of a continuous project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectResponse
     */
	public function getContinuousProject(
        \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}', \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->continuousProject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContinuousProject', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View a continuous document
     * 
     * View the details of a source document in continuous translation project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentResponse
     */
	public function getContinuousProjectDocument(
        \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/documents/{documentId}', \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->continuousProjectDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContinuousProjectDocument', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Monitor progress of a continuous document
     * 
     * Monitor the translation progress of a document in a continuous project in real-time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentProgressResponse
     */
	public function getContinuousProjectDocumentProgress(
        \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/documents/{documentId}/progress', \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentProgressRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->progress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Progress', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View continuous documents
     * 
     * View the documents under this continuous project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentsResponse
     */
	public function getContinuousProjectDocuments(
        \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/documents', \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectDocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->continuousProjectDocumentList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContinuousProjectDocumentList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Invoices of a continuous project
     * 
     * Get real-time access to a continuous project's invoices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectInvoicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectInvoicesResponse
     */
	public function getContinuousProjectInvoices(
        \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectInvoicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectInvoicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/invoices', \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectInvoicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectInvoicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->continuousProjectInvoices = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContinuousProjectInvoices', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Monitor progress and status of a continous project
     * 
     * Monitor the translation progress of an ongoing continuous project in real-time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectProgressResponse
     */
	public function getContinuousProjectProgress(
        \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/progress', \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectProgressRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->continuousProjectProgress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContinuousProjectProgress', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View continuous projects
     * 
     * View a list of continuous projects under your account. Continuous projects are those that are constantly updated, such as a CI/CD project, software project, website translation and such.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectsResponse
     */
	public function getContinuousProjects(
        \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->continuousProjectsList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContinuousProjectsList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a quote for a continuous project document
     * 
     * Get a new quote for provided document in continuous project. Per your project settings, a continuous project document can be target language-specific or project-wide for all target languages of the project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteForDocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQuoteForDocumentResponse
     */
	public function getQuoteForDocument(
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteForDocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQuoteForDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}/documents/{documentId}/quote', \OpenAPI\OpenAPI\Models\Operations\GetQuoteForDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQuoteForDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get quote for documents
     * 
     * Get a new quote for provided documents in continuous project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteForDocumentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQuoteForDocumentsResponse
     */
	public function getQuoteForDocuments(
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteForDocumentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQuoteForDocumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}/documents/quote', \OpenAPI\OpenAPI\Models\Operations\GetQuoteForDocumentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getQuotesForDocumentsBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQuoteForDocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get quote for language
     * 
     * Get a new quote for provided target language in continuous project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteForLanguageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQuoteForLanguageResponse
     */
	public function getQuoteForLanguage(
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteForLanguageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQuoteForLanguageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}/languages/{targetLanguage}/quote', \OpenAPI\OpenAPI\Models\Operations\GetQuoteForLanguageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQuoteForLanguageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get quote for languages
     * 
     * Get a new quote for provided target languages in continuous project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteForLanguagesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQuoteForLanguagesResponse
     */
	public function getQuoteForLanguages(
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteForLanguagesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQuoteForLanguagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}/languages/quote', \OpenAPI\OpenAPI\Models\Operations\GetQuoteForLanguagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getQuotesForLanguagesBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQuoteForLanguagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get subscription for continuous project
     * 
     * Get subscription for continuous project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionResponse
     */
	public function getSubscription(
        \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}/subscription', \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Subscription', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get continuous project document progress for multiple IDs
     * 
     * Get continuous project document progress for multiple IDs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostContinuousProjectDocumentProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostContinuousProjectDocumentProgressResponse
     */
	public function postContinuousProjectDocumentProgress(
        \OpenAPI\OpenAPI\Models\Operations\PostContinuousProjectDocumentProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostContinuousProjectDocumentProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/documents/progress', \OpenAPI\OpenAPI\Models\Operations\PostContinuousProjectDocumentProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "continuousProjectDocumentProgressBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostContinuousProjectDocumentProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->progress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Progress', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reset Active widget token
     * 
     * Reset the public token used with your Active widget. This token is used when communicating from your environment to MotaWord systems for translation, analytics and meta.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResetActiveWidgetTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetActiveWidgetTokenResponse
     */
	public function resetActiveWidgetToken(
        \OpenAPI\OpenAPI\Models\Operations\ResetActiveWidgetTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResetActiveWidgetTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/widgets/{widgetId}/reset-token', \OpenAPI\OpenAPI\Models\Operations\ResetActiveWidgetTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetActiveWidgetTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->activeWidget = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ActiveWidget', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Instantly translate your content
     * 
     * Instantly translate your content with your existing TM and MT resources. This is the primary endpoint to translate your files and content on the fly, especially in CI/CD environments. This is a complex endpoint that is configured in your Active or Continuous Project dashboards. For instance, you can configure whether to use your TM, or translate missing strings via MT and then post-edit those new translations. There are various scenarios you can establish via a set of configurations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TranslateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TranslateResponse
     */
	public function translate(
        \OpenAPI\OpenAPI\Models\Operations\TranslateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TranslateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}/translate/{targetLanguage}', \OpenAPI\OpenAPI\Models\Operations\TranslateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instantTranslationRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TranslateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instantTranslationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Active widget settings.
     * 
     * Update Active widget settings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateActiveWidgetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateActiveWidgetResponse
     */
	public function updateActiveWidget(
        \OpenAPI\OpenAPI\Models\Operations\UpdateActiveWidgetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateActiveWidgetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/widgets/{widgetId}', \OpenAPI\OpenAPI\Models\Operations\UpdateActiveWidgetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "activeWidget", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateActiveWidgetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->activeWidget = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ActiveWidget', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a continuous project
     * 
     * Update the details and settings of continuous project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateContinuousProjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateContinuousProjectResponse
     */
	public function updateContinuousProject(
        \OpenAPI\OpenAPI\Models\Operations\UpdateContinuousProjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateContinuousProjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateContinuousProjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "continuousProjectUpdateContent", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateContinuousProjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->continuousProject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContinuousProject', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the document
     * 
     * Update source document in your continuous project. In most scenarios, this operation will also trigger auto-translation of your document, via MT and/or TM.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentResponse
     */
	public function updateDocument(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/documents/{documentId}', \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addOrUpdateDocumentRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->continuousProjectDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContinuousProjectDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update subscription for continuous project
     * 
     * Update subscription for continuous project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionResponse
     */
	public function updateSubscription(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}/subscription', \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subscription", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Subscription', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update subscription payment method for continuous project
     * 
     * Update subscription payment method for continuous project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionPaymentMethodRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionPaymentMethodResponse
     */
	public function updateSubscriptionPaymentMethod(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionPaymentMethodRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionPaymentMethodResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{id}/subscription/payment', \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionPaymentMethodRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subscription", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionPaymentMethodResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Subscription', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}