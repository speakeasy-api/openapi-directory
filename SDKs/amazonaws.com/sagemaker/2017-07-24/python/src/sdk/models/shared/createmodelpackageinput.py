"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import additionalinferencespecificationdefinition as shared_additionalinferencespecificationdefinition
from ..shared import driftcheckbaselines as shared_driftcheckbaselines
from ..shared import inferencespecification as shared_inferencespecification
from ..shared import metadataproperties as shared_metadataproperties
from ..shared import modelapprovalstatus_enum as shared_modelapprovalstatus_enum
from ..shared import modelmetrics as shared_modelmetrics
from ..shared import modelpackagevalidationspecification as shared_modelpackagevalidationspecification
from ..shared import sourcealgorithmspecification as shared_sourcealgorithmspecification
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateModelPackageInput:
    
    additional_inference_specifications: Optional[list[shared_additionalinferencespecificationdefinition.AdditionalInferenceSpecificationDefinition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalInferenceSpecifications'), 'exclude': lambda f: f is None }})  
    certify_for_marketplace: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CertifyForMarketplace'), 'exclude': lambda f: f is None }})  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientToken'), 'exclude': lambda f: f is None }})  
    customer_metadata_properties: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerMetadataProperties'), 'exclude': lambda f: f is None }})  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Domain'), 'exclude': lambda f: f is None }})  
    drift_check_baselines: Optional[shared_driftcheckbaselines.DriftCheckBaselines] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DriftCheckBaselines'), 'exclude': lambda f: f is None }})  
    inference_specification: Optional[shared_inferencespecification.InferenceSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InferenceSpecification'), 'exclude': lambda f: f is None }})  
    metadata_properties: Optional[shared_metadataproperties.MetadataProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetadataProperties'), 'exclude': lambda f: f is None }})
    r"""Metadata properties of the tracking entity, trial, or trial component."""  
    model_approval_status: Optional[shared_modelapprovalstatus_enum.ModelApprovalStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelApprovalStatus'), 'exclude': lambda f: f is None }})  
    model_metrics: Optional[shared_modelmetrics.ModelMetrics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelMetrics'), 'exclude': lambda f: f is None }})  
    model_package_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageDescription'), 'exclude': lambda f: f is None }})  
    model_package_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageGroupName'), 'exclude': lambda f: f is None }})  
    model_package_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageName'), 'exclude': lambda f: f is None }})  
    sample_payload_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SamplePayloadUrl'), 'exclude': lambda f: f is None }})  
    source_algorithm_specification: Optional[shared_sourcealgorithmspecification.SourceAlgorithmSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceAlgorithmSpecification'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    task: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Task'), 'exclude': lambda f: f is None }})  
    validation_specification: Optional[shared_modelpackagevalidationspecification.ModelPackageValidationSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ValidationSpecification'), 'exclude': lambda f: f is None }})  
    