"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import indexedition_enum as shared_indexedition_enum
from ..shared import serversideencryptionconfiguration as shared_serversideencryptionconfiguration
from ..shared import tag as shared_tag
from ..shared import usercontextpolicy_enum as shared_usercontextpolicy_enum
from ..shared import usergroupresolutionconfiguration as shared_usergroupresolutionconfiguration
from ..shared import usertokenconfiguration as shared_usertokenconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateIndexRequest:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn') }})  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientToken'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    edition: Optional[shared_indexedition_enum.IndexEditionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Edition'), 'exclude': lambda f: f is None }})  
    server_side_encryption_configuration: Optional[shared_serversideencryptionconfiguration.ServerSideEncryptionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServerSideEncryptionConfiguration'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    user_context_policy: Optional[shared_usercontextpolicy_enum.UserContextPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserContextPolicy'), 'exclude': lambda f: f is None }})  
    user_group_resolution_configuration: Optional[shared_usergroupresolutionconfiguration.UserGroupResolutionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserGroupResolutionConfiguration'), 'exclude': lambda f: f is None }})  
    user_token_configurations: Optional[list[shared_usertokenconfiguration.UserTokenConfiguration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserTokenConfigurations'), 'exclude': lambda f: f is None }})  
    