/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PodcastSearchResult - When **type** is *podcast*.
 */
public class PodcastSearchResult {
    /**
     * Average audio length of all episodes of this podcast. In seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio_length_sec")
    public Long audioLengthSec;

    public PodcastSearchResult withAudioLengthSec(Long audioLengthSec) {
        this.audioLengthSec = audioLengthSec;
        return this;
    }
    
    /**
     * Highlighted segment of podcast description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description_highlighted")
    public String descriptionHighlighted;

    public PodcastSearchResult withDescriptionHighlighted(String descriptionHighlighted) {
        this.descriptionHighlighted = descriptionHighlighted;
        return this;
    }
    
    /**
     * Plain text of podcast description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description_original")
    public String descriptionOriginal;

    public PodcastSearchResult withDescriptionOriginal(String descriptionOriginal) {
        this.descriptionOriginal = descriptionOriginal;
        return this;
    }
    
    /**
     * The published date of the oldest episode of this podcast. In milliseconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("earliest_pub_date_ms")
    public Long earliestPubDateMs;

    public PodcastSearchResult withEarliestPubDateMs(Long earliestPubDateMs) {
        this.earliestPubDateMs = earliestPubDateMs;
        return this;
    }
    
    /**
     * The email of this podcast's producer. This field is available only in the PRO/ENTERPRISE plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;

    public PodcastSearchResult withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Whether this podcast contains explicit language.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("explicit_content")
    public Boolean explicitContent;

    public PodcastSearchResult withExplicitContent(Boolean explicitContent) {
        this.explicitContent = explicitContent;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("genre_ids")
    public Long[] genreIds;

    public PodcastSearchResult withGenreIds(Long[] genreIds) {
        this.genreIds = genreIds;
        return this;
    }
    
    /**
     * Podcast id, which can be used to further fetch detailed podcast metadata via `GET /podcasts/{id}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public PodcastSearchResult withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Image url for this podcast's artwork. If you are using PRO/ENTERPRISE plan, then it's
     * a high resolution image (1400x1400). If you are using FREE plan, then it's the same as **thumbnail**,
     * low resolution image (300x300).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public String image;

    public PodcastSearchResult withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * iTunes id for this podcast.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itunes_id")
    public Long itunesId;

    public PodcastSearchResult withItunesId(Long itunesId) {
        this.itunesId = itunesId;
        return this;
    }
    
    /**
     * The id of the most recently published episode of this podcast, which can be used to further fetch detailed episode metadata via `GET /episodes/{id}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latest_episode_id")
    public String latestEpisodeId;

    public PodcastSearchResult withLatestEpisodeId(String latestEpisodeId) {
        this.latestEpisodeId = latestEpisodeId;
        return this;
    }
    
    /**
     * The published date of the latest episode of this podcast. In milliseconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latest_pub_date_ms")
    public Long latestPubDateMs;

    public PodcastSearchResult withLatestPubDateMs(Long latestPubDateMs) {
        this.latestPubDateMs = latestPubDateMs;
        return this;
    }
    
    /**
     * The estimated popularity score of a podcast compared to all other rss-based public podcasts in the world on a scale from 0 to 100.
     * If the score is not available, it'll be null. Learn more at listennotes.com/listen-score
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listen_score")
    public Long listenScore;

    public PodcastSearchResult withListenScore(Long listenScore) {
        this.listenScore = listenScore;
        return this;
    }
    
    /**
     * The estimated popularity ranking of a podcast compared to all other rss-based public podcasts in the world.
     * For example, if the value is 0.5%, then this podcast is one of the top 0.5% most popular shows out of all podcasts globally, ranked by Listen Score.
     * If the ranking is not available, it'll be null. Learn more at listennotes.com/listen-score
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listen_score_global_rank")
    public String listenScoreGlobalRank;

    public PodcastSearchResult withListenScoreGlobalRank(String listenScoreGlobalRank) {
        this.listenScoreGlobalRank = listenScoreGlobalRank;
        return this;
    }
    
    /**
     * The url of this podcast on [ListenNotes.com](https://www.ListenNotes.com).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listennotes_url")
    public String listennotesUrl;

    public PodcastSearchResult withListennotesUrl(String listennotesUrl) {
        this.listennotesUrl = listennotesUrl;
        return this;
    }
    
    /**
     * Highlighted segment of this podcast's publisher name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publisher_highlighted")
    public String publisherHighlighted;

    public PodcastSearchResult withPublisherHighlighted(String publisherHighlighted) {
        this.publisherHighlighted = publisherHighlighted;
        return this;
    }
    
    /**
     * Plain text of this podcast's publisher name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publisher_original")
    public String publisherOriginal;

    public PodcastSearchResult withPublisherOriginal(String publisherOriginal) {
        this.publisherOriginal = publisherOriginal;
        return this;
    }
    
    /**
     * RSS url of this podcast. This field is available only in the PRO/ENTERPRISE plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rss")
    public String rss;

    public PodcastSearchResult withRss(String rss) {
        this.rss = rss;
        return this;
    }
    
    /**
     * Thumbnail image url for this podcast's artwork (300x300).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnail")
    public String thumbnail;

    public PodcastSearchResult withThumbnail(String thumbnail) {
        this.thumbnail = thumbnail;
        return this;
    }
    
    /**
     * Highlighted segment of podcast name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title_highlighted")
    public String titleHighlighted;

    public PodcastSearchResult withTitleHighlighted(String titleHighlighted) {
        this.titleHighlighted = titleHighlighted;
        return this;
    }
    
    /**
     * Plain text of podcast name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title_original")
    public String titleOriginal;

    public PodcastSearchResult withTitleOriginal(String titleOriginal) {
        this.titleOriginal = titleOriginal;
        return this;
    }
    
    /**
     * Total number of episodes in this podcast.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_episodes")
    public Long totalEpisodes;

    public PodcastSearchResult withTotalEpisodes(Long totalEpisodes) {
        this.totalEpisodes = totalEpisodes;
        return this;
    }
    
    /**
     * How frequently does this podcast release a new episode? In hours. For example, if the value is 166, then it's every 166 hours (or weekly).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("update_frequency_hours")
    public Long updateFrequencyHours;

    public PodcastSearchResult withUpdateFrequencyHours(Long updateFrequencyHours) {
        this.updateFrequencyHours = updateFrequencyHours;
        return this;
    }
    
    /**
     * Website url of this podcast.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website")
    public String website;

    public PodcastSearchResult withWebsite(String website) {
        this.website = website;
        return this;
    }
    
    public PodcastSearchResult(){}
}
