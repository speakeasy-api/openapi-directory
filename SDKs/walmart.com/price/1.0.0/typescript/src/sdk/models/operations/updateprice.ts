/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export enum UpdatePriceRequestBodyPricingComparisonPriceCurrencyEnum {
  Usd = "USD",
  Cad = "CAD",
}

/**
 * This is applicable only for promotions
 */
export class UpdatePriceRequestBodyPricingComparisonPrice extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: UpdatePriceRequestBodyPricingComparisonPriceCurrencyEnum;
}

/**
 * This is applicable only for promotions
 */
export enum UpdatePriceRequestBodyPricingComparisonPriceTypeEnum {
  Base = "BASE",
}

export enum UpdatePriceRequestBodyPricingCurrentPriceCurrencyEnum {
  Usd = "USD",
  Cad = "CAD",
}

export class UpdatePriceRequestBodyPricingCurrentPrice extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: UpdatePriceRequestBodyPricingCurrentPriceCurrencyEnum;
}

/**
 * This is applicable only for both promotions and price
 */
export enum UpdatePriceRequestBodyPricingCurrentPriceTypeEnum {
  Base = "BASE",
  Reduced = "REDUCED",
  Clearance = "CLEARANCE",
}

/**
 * Represent promo placement. This is applicable only for promotions
 */
export enum UpdatePriceRequestBodyPricingPriceDisplayCodesEnum {
  Cart = "CART",
  Checkout = "CHECKOUT",
}

/**
 * This is applicable only for promotions
 */
export enum UpdatePriceRequestBodyPricingProcessModeEnum {
  Upsert = "UPSERT",
  Delete = "DELETE",
}

export class UpdatePriceRequestBodyPricing extends SpeakeasyBase {
  /**
   * This is applicable only for promotions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comparisonPrice" })
  @Type(() => UpdatePriceRequestBodyPricingComparisonPrice)
  comparisonPrice?: UpdatePriceRequestBodyPricingComparisonPrice;

  /**
   * This is applicable only for promotions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comparisonPriceType" })
  comparisonPriceType?: UpdatePriceRequestBodyPricingComparisonPriceTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "currentPrice" })
  @Type(() => UpdatePriceRequestBodyPricingCurrentPrice)
  currentPrice: UpdatePriceRequestBodyPricingCurrentPrice;

  /**
   * This is applicable only for both promotions and price
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentPriceType" })
  currentPriceType: UpdatePriceRequestBodyPricingCurrentPriceTypeEnum;

  /**
   * This is applicable only for promotions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "effectiveDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  effectiveDate?: Date;

  /**
   * This is applicable only for promotions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expirationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate?: Date;

  /**
   * Represent promo placement. This is applicable only for promotions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priceDisplayCodes" })
  priceDisplayCodes?: UpdatePriceRequestBodyPricingPriceDisplayCodesEnum;

  /**
   * This is applicable only for promotions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "processMode" })
  processMode?: UpdatePriceRequestBodyPricingProcessModeEnum;

  /**
   * This is applicable only for promotions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "promoId" })
  promoId?: string;
}

/**
 * This is applicable only for promotions
 */
export enum UpdatePriceRequestBodyReplaceAllEnum {
  True = "true",
  False = "false",
}

/**
 * The request body consists of a Feed file attached to the request.
 */
export class UpdatePriceRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "definitions" })
  definitions?: Record<string, any>;

  /**
   * This is applicable only for promotions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "offerId" })
  offerId?: string;

  @SpeakeasyMetadata({ elemType: UpdatePriceRequestBodyPricing })
  @Expose({ name: "pricing" })
  @Type(() => UpdatePriceRequestBodyPricing)
  pricing: UpdatePriceRequestBodyPricing[];

  /**
   * This is applicable only for promotions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replaceAll" })
  replaceAll?: UpdatePriceRequestBodyReplaceAllEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "sku" })
  sku: string;
}

export class UpdatePriceRequest extends SpeakeasyBase {
  /**
   * The request body consists of a Feed file attached to the request.
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdatePriceRequestBody;

  /**
   * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=WM_CONSUMER.CHANNEL.TYPE",
  })
  wmConsumerChannelType?: string;

  /**
   * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=WM_QOS.CORRELATION_ID",
  })
  wmQosCorrelationId: string;

  /**
   * The access token retrieved in the Token API call
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=WM_SEC.ACCESS_TOKEN",
  })
  wmSecAccessToken: string;

  /**
   * Walmart Service Name
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=WM_SVC.NAME",
  })
  wmSvcName: string;
}

export enum UpdatePrice200ApplicationXMLErrorsCategoryEnum {
  Application = "APPLICATION",
  System = "SYSTEM",
  Request = "REQUEST",
  Data = "DATA",
}

export class UpdatePrice200ApplicationXMLErrorsCauses extends SpeakeasyBase {
  @SpeakeasyMetadata()
  code?: string;

  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  field?: string;

  @SpeakeasyMetadata()
  type?: string;
}

export enum UpdatePrice200ApplicationXMLErrorsGatewayErrorCategoryEnum {
  InternalDataError = "INTERNAL_DATA_ERROR",
  ExternalDataError = "EXTERNAL_DATA_ERROR",
  SystemError = "SYSTEM_ERROR",
}

export enum UpdatePrice200ApplicationXMLErrorsSeverityEnum {
  Info = "INFO",
  Warn = "WARN",
  Error = "ERROR",
}

export class UpdatePrice200ApplicationXMLErrors extends SpeakeasyBase {
  @SpeakeasyMetadata()
  category?: UpdatePrice200ApplicationXMLErrorsCategoryEnum;

  @SpeakeasyMetadata({ elemType: UpdatePrice200ApplicationXMLErrorsCauses })
  causes?: UpdatePrice200ApplicationXMLErrorsCauses[];

  @SpeakeasyMetadata()
  code: string;

  @SpeakeasyMetadata()
  component?: string;

  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  errorIdentifiers?: Record<string, Record<string, any>>;

  @SpeakeasyMetadata()
  field?: string;

  @SpeakeasyMetadata()
  gatewayErrorCategory?: UpdatePrice200ApplicationXMLErrorsGatewayErrorCategoryEnum;

  @SpeakeasyMetadata()
  info?: string;

  @SpeakeasyMetadata()
  serviceName?: string;

  @SpeakeasyMetadata()
  severity?: UpdatePrice200ApplicationXMLErrorsSeverityEnum;

  @SpeakeasyMetadata()
  type?: string;
}

/**
 * Successful Operation
 */
export class UpdatePrice200ApplicationXML extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: UpdatePrice200ApplicationXMLErrors })
  errors?: UpdatePrice200ApplicationXMLErrors[];

  /**
   * Marketplace name. Example: Walmart-US
   */
  @SpeakeasyMetadata()
  mart?: string;

  /**
   * A message of acknowledgement for a price update
   */
  @SpeakeasyMetadata()
  message?: string;

  /**
   * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
   */
  @SpeakeasyMetadata()
  sku?: string;

  @SpeakeasyMetadata()
  statusCode?: number;
}

export enum UpdatePrice200ApplicationJSONErrorsCategoryEnum {
  Application = "APPLICATION",
  System = "SYSTEM",
  Request = "REQUEST",
  Data = "DATA",
}

export class UpdatePrice200ApplicationJSONErrorsCauses extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "field" })
  field?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export enum UpdatePrice200ApplicationJSONErrorsGatewayErrorCategoryEnum {
  InternalDataError = "INTERNAL_DATA_ERROR",
  ExternalDataError = "EXTERNAL_DATA_ERROR",
  SystemError = "SYSTEM_ERROR",
}

export enum UpdatePrice200ApplicationJSONErrorsSeverityEnum {
  Info = "INFO",
  Warn = "WARN",
  Error = "ERROR",
}

export class UpdatePrice200ApplicationJSONErrors extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: UpdatePrice200ApplicationJSONErrorsCategoryEnum;

  @SpeakeasyMetadata({ elemType: UpdatePrice200ApplicationJSONErrorsCauses })
  @Expose({ name: "causes" })
  @Type(() => UpdatePrice200ApplicationJSONErrorsCauses)
  causes?: UpdatePrice200ApplicationJSONErrorsCauses[];

  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: string;

  @SpeakeasyMetadata()
  @Expose({ name: "component" })
  component?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "errorIdentifiers" })
  errorIdentifiers?: Record<string, Record<string, any>>;

  @SpeakeasyMetadata()
  @Expose({ name: "field" })
  field?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "gatewayErrorCategory" })
  gatewayErrorCategory?: UpdatePrice200ApplicationJSONErrorsGatewayErrorCategoryEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "info" })
  info?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "serviceName" })
  serviceName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "severity" })
  severity?: UpdatePrice200ApplicationJSONErrorsSeverityEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

/**
 * Successful Operation
 */
export class UpdatePrice200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: UpdatePrice200ApplicationJSONErrors })
  @Expose({ name: "errors" })
  @Type(() => UpdatePrice200ApplicationJSONErrors)
  errors?: UpdatePrice200ApplicationJSONErrors[];

  /**
   * Marketplace name. Example: Walmart-US
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mart" })
  mart?: string;

  /**
   * A message of acknowledgement for a price update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  /**
   * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sku" })
  sku?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "statusCode" })
  statusCode?: number;
}

export class UpdatePriceResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful Operation
   */
  @SpeakeasyMetadata()
  updatePrice200ApplicationJSONObject?: UpdatePrice200ApplicationJSON;
}
