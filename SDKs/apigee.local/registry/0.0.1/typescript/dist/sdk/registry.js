"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Registry = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
var Registry = /** @class */ (function () {
    function Registry(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * CreateApi creates a specified API.
     */
    Registry.prototype.registryCreateApi = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryCreateApiRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "apiInput", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryCreateApiResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.api = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Api);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * CreateApiDeployment creates a specified deployment.
     */
    Registry.prototype.registryCreateApiDeployment = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryCreateApiDeploymentRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/deployments", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "apiDeploymentInput", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryCreateApiDeploymentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.apiDeployment = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ApiDeployment);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * CreateApiSpec creates a specified spec.
     */
    Registry.prototype.registryCreateApiSpec = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryCreateApiSpecRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "apiSpecInput", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryCreateApiSpecResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.apiSpec = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ApiSpecOutput);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * CreateApiVersion creates a specified version.
     */
    Registry.prototype.registryCreateApiVersion = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryCreateApiVersionRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/versions", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "apiVersionInput", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryCreateApiVersionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.apiVersion = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ApiVersion);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * CreateArtifact creates a specified artifact.
     */
    Registry.prototype.registryCreateArtifact = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryCreateArtifactRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/artifacts", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "artifactInput", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryCreateArtifactResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.artifact = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ArtifactOutput);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * DeleteApi removes a specified API and all of the resources that it
     *  owns.
     */
    Registry.prototype.registryDeleteApi = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryDeleteApiRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryDeleteApiResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * DeleteApiDeployment removes a specified deployment, all revisions, and all
     *  child resources (e.g. artifacts).
     */
    Registry.prototype.registryDeleteApiDeployment = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryDeleteApiDeploymentRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryDeleteApiDeploymentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * DeleteApiDeploymentRevision deletes a revision of a deployment.
     */
    Registry.prototype.registryDeleteApiDeploymentRevision = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryDeleteApiDeploymentRevisionRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:deleteRevision", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryDeleteApiDeploymentRevisionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.apiDeployment = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ApiDeployment);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * DeleteApiSpec removes a specified spec, all revisions, and all child
     *  resources (e.g. artifacts).
     */
    Registry.prototype.registryDeleteApiSpec = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryDeleteApiSpecRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryDeleteApiSpecResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * DeleteApiSpecRevision deletes a revision of a spec.
     */
    Registry.prototype.registryDeleteApiSpecRevision = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryDeleteApiSpecRevisionRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:deleteRevision", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryDeleteApiSpecRevisionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.apiSpec = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ApiSpecOutput);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * DeleteApiVersion removes a specified version and all of the resources that
     *  it owns.
     */
    Registry.prototype.registryDeleteApiVersion = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryDeleteApiVersionRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryDeleteApiVersionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * DeleteArtifact removes a specified artifact.
     */
    Registry.prototype.registryDeleteArtifact = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryDeleteArtifactRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/artifacts/{artifact}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryDeleteArtifactResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * GetApi returns a specified API.
     */
    Registry.prototype.registryGetApi = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryGetApiRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryGetApiResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.api = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Api);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * GetApiDeployment returns a specified deployment.
     */
    Registry.prototype.registryGetApiDeployment = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryGetApiDeploymentRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryGetApiDeploymentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.apiDeployment = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ApiDeployment);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * GetApiSpec returns a specified spec.
     */
    Registry.prototype.registryGetApiSpec = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryGetApiSpecRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryGetApiSpecResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.apiSpec = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ApiSpecOutput);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * GetApiSpecContents returns the contents of a specified spec.
     *  If specs are stored with GZip compression, the default behavior
     *  is to return the spec uncompressed (the mime_type response field
     *  indicates the exact format returned).
     */
    Registry.prototype.registryGetApiSpecContents = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryGetApiSpecContentsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:getContents", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryGetApiSpecContentsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * GetApiVersion returns a specified version.
     */
    Registry.prototype.registryGetApiVersion = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryGetApiVersionRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryGetApiVersionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.apiVersion = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ApiVersion);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * GetArtifact returns a specified artifact.
     */
    Registry.prototype.registryGetArtifact = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryGetArtifactRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/artifacts/{artifact}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryGetArtifactResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.artifact = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ArtifactOutput);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * GetArtifactContents returns the contents of a specified artifact.
     *  If artifacts are stored with GZip compression, the default behavior
     *  is to return the artifact uncompressed (the mime_type response field
     *  indicates the exact format returned).
     */
    Registry.prototype.registryGetArtifactContents = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryGetArtifactContentsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/artifacts/{artifact}:getContents", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryGetArtifactContentsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * ListApiDeploymentRevisions lists all revisions of a deployment.
     *  Revisions are returned in descending order of revision creation time.
     */
    Registry.prototype.registryListApiDeploymentRevisions = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryListApiDeploymentRevisionsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:listRevisions", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryListApiDeploymentRevisionsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listApiDeploymentRevisionsResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListApiDeploymentRevisionsResponse);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * ListApiDeployments returns matching deployments.
     */
    Registry.prototype.registryListApiDeployments = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryListApiDeploymentsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/deployments", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryListApiDeploymentsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listApiDeploymentsResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListApiDeploymentsResponse);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * ListApiSpecRevisions lists all revisions of a spec.
     *  Revisions are returned in descending order of revision creation time.
     */
    Registry.prototype.registryListApiSpecRevisions = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryListApiSpecRevisionsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:listRevisions", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryListApiSpecRevisionsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listApiSpecRevisionsResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListApiSpecRevisionsResponse);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * ListApiSpecs returns matching specs.
     */
    Registry.prototype.registryListApiSpecs = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryListApiSpecsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryListApiSpecsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listApiSpecsResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListApiSpecsResponse);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * ListApiVersions returns matching versions.
     */
    Registry.prototype.registryListApiVersions = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryListApiVersionsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/versions", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryListApiVersionsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listApiVersionsResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListApiVersionsResponse);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * ListApis returns matching APIs.
     */
    Registry.prototype.registryListApis = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryListApisRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryListApisResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listApisResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListApisResponse);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * ListArtifacts returns matching artifacts.
     */
    Registry.prototype.registryListArtifacts = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryListArtifactsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/artifacts", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryListArtifactsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listArtifactsResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListArtifactsResponse);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * ReplaceArtifact can be used to replace a specified artifact.
     */
    Registry.prototype.registryReplaceArtifact = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryReplaceArtifactRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/artifacts/{artifact}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "artifactInput", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryReplaceArtifactResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.artifact = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ArtifactOutput);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * RollbackApiDeployment sets the current revision to a specified prior
     *  revision. Note that this creates a new revision with a new revision ID.
     */
    Registry.prototype.registryRollbackApiDeployment = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryRollbackApiDeploymentRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:rollback", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "rollbackApiDeploymentRequest", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryRollbackApiDeploymentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.apiDeployment = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ApiDeployment);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * RollbackApiSpec sets the current revision to a specified prior revision.
     *  Note that this creates a new revision with a new revision ID.
     */
    Registry.prototype.registryRollbackApiSpec = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryRollbackApiSpecRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:rollback", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "rollbackApiSpecRequest", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryRollbackApiSpecResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.apiSpec = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ApiSpecOutput);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * TagApiDeploymentRevision adds a tag to a specified revision of a
     *  deployment.
     */
    Registry.prototype.registryTagApiDeploymentRevision = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryTagApiDeploymentRevisionRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:tagRevision", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "tagApiDeploymentRevisionRequest", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryTagApiDeploymentRevisionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.apiDeployment = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ApiDeployment);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * TagApiSpecRevision adds a tag to a specified revision of a spec.
     */
    Registry.prototype.registryTagApiSpecRevision = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryTagApiSpecRevisionRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:tagRevision", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "tagApiSpecRevisionRequest", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryTagApiSpecRevisionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.apiSpec = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ApiSpecOutput);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * UpdateApi can be used to modify a specified API.
     */
    Registry.prototype.registryUpdateApi = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryUpdateApiRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "apiInput", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "patch", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryUpdateApiResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.api = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Api);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * UpdateApiDeployment can be used to modify a specified deployment.
     */
    Registry.prototype.registryUpdateApiDeployment = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryUpdateApiDeploymentRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "apiDeploymentInput", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "patch", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryUpdateApiDeploymentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.apiDeployment = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ApiDeployment);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * UpdateApiSpec can be used to modify a specified spec.
     */
    Registry.prototype.registryUpdateApiSpec = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryUpdateApiSpecRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "apiSpecInput", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "patch", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryUpdateApiSpecResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.apiSpec = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ApiSpecOutput);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * UpdateApiVersion can be used to modify a specified version.
     */
    Registry.prototype.registryUpdateApiVersion = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RegistryUpdateApiVersionRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "apiVersionInput", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "patch", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RegistryUpdateApiVersionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.apiVersion = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ApiVersion);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.status = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Status);
                    }
                    break;
            }
            return res;
        });
    };
    return Registry;
}());
exports.Registry = Registry;
