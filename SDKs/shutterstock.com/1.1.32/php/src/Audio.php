<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Audio 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add audio tracks to collections
     * 
     * This endpoint adds one or more tracks to a collection by track IDs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddTrackCollectionItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddTrackCollectionItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddTrackCollectionItemsResponse
     */
	public function addTrackCollectionItems(
        \OpenAPI\OpenAPI\Models\Operations\AddTrackCollectionItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddTrackCollectionItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddTrackCollectionItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio/collections/{id}/items', \OpenAPI\OpenAPI\Models\Operations\AddTrackCollectionItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "collectionItemRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddTrackCollectionItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create audio collections
     * 
     * This endpoint creates one or more collections (soundboxes). To add tracks, use `POST /v2/audio/collections/{id}/items`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CollectionCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTrackCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTrackCollectionResponse
     */
	public function createTrackCollection(
        \OpenAPI\OpenAPI\Models\Shared\CollectionCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTrackCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTrackCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio/collections');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTrackCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionCreateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CollectionCreateResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Delete audio collections
     * 
     * This endpoint deletes a collection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionResponse
     */
	public function deleteTrackCollection(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio/collections/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Remove audio tracks from collections
     * 
     * This endpoint removes one or more tracks from a collection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionItemsResponse
     */
	public function deleteTrackCollectionItems(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio/collections/{id}/items', \OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionItemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTrackCollectionItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Download audio tracks
     * 
     * This endpoint redownloads tracks that you have already received a license for. The download links in the response are valid for 8 hours.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DownloadTracksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DownloadTracksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DownloadTracksResponse
     */
	public function downloadTracks(
        \OpenAPI\OpenAPI\Models\Operations\DownloadTracksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DownloadTracksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DownloadTracksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio/licenses/{id}/downloads', \OpenAPI\OpenAPI\Models\Operations\DownloadTracksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DownloadTracksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->audioUrl = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AudioUrl', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Get details about audio tracks
     * 
     * This endpoint shows information about a track, including its genres, instruments, and other attributes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTrackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTrackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTrackResponse
     */
	public function getTrack(
        \OpenAPI\OpenAPI\Models\Operations\GetTrackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTrackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTrackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio/{id}', \OpenAPI\OpenAPI\Models\Operations\GetTrackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTrackRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTrackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->audio = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Audio', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Get the details of audio collections
     * 
     * This endpoint gets more detailed information about a collection, including the number of items in it and when it was last updated. To get the tracks in collections, use `GET /v2/audio/collections/{id}/items`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionResponse
     */
	public function getTrackCollection(
        \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio/collections/{id}', \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Collection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get the contents of audio collections
     * 
     * This endpoint lists the IDs of tracks in a collection and the date that each was added.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionItemsResponse
     */
	public function getTrackCollectionItems(
        \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio/collections/{id}/items', \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionItemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionItemDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CollectionItemDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List audio collections
     * 
     * This endpoint lists your collections of audio tracks and their basic attributes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionListResponse
     */
	public function getTrackCollectionList(
        \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio/collections');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTrackCollectionListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collectionDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CollectionDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * List audio licenses
     * 
     * This endpoint lists existing licenses. You can filter the results according to the track ID to see if you have an existing license for a specific track.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTrackLicenseListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTrackLicenseListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTrackLicenseListResponse
     */
	public function getTrackLicenseList(
        \OpenAPI\OpenAPI\Models\Operations\GetTrackLicenseListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTrackLicenseListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTrackLicenseListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio/licenses');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTrackLicenseListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTrackLicenseListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->downloadHistoryDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DownloadHistoryDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * List audio tracks
     * 
     * This endpoint lists information about one or more audio tracks, including the description and publication date.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTrackListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTrackListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTrackListResponse
     */
	public function getTrackList(
        \OpenAPI\OpenAPI\Models\Operations\GetTrackListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTrackListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTrackListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTrackListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTrackListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->audioDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AudioDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * License audio tracks
     * 
     * This endpoint gets licenses for one or more tracks. The download links in the response are valid for 8 hours.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LicenseTrackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LicenseTrackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LicenseTrackResponse
     */
	public function licenseTrack(
        \OpenAPI\OpenAPI\Models\Operations\LicenseTrackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LicenseTrackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LicenseTrackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio/licenses');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "licenseAudioRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LicenseTrackRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LicenseTrackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->licenseAudioResultDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LicenseAudioResultDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * List audio genres
     * 
     * This endpoint returns a list of all audio genres.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListGenresRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListGenresSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListGenresResponse
     */
	public function listGenres(
        \OpenAPI\OpenAPI\Models\Operations\ListGenresRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListGenresSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListGenresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio/genres');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListGenresRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListGenresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->genreList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GenreList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List audio instruments
     * 
     * This endpoint returns a list of all audio instruments.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInstrumentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInstrumentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInstrumentsResponse
     */
	public function listInstruments(
        \OpenAPI\OpenAPI\Models\Operations\ListInstrumentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListInstrumentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInstrumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio/instruments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInstrumentsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInstrumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instrumentList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstrumentList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List audio moods
     * 
     * This endpoint returns a list of all audio moods.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMoodsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMoodsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMoodsResponse
     */
	public function listMoods(
        \OpenAPI\OpenAPI\Models\Operations\ListMoodsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListMoodsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMoodsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio/moods');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMoodsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMoodsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->moodList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MoodList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rename audio collections
     * 
     * This endpoint sets a new name for a collection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RenameTrackCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RenameTrackCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RenameTrackCollectionResponse
     */
	public function renameTrackCollection(
        \OpenAPI\OpenAPI\Models\Operations\RenameTrackCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RenameTrackCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RenameTrackCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio/collections/{id}', \OpenAPI\OpenAPI\Models\Operations\RenameTrackCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "collectionUpdateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RenameTrackCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Search for tracks
     * 
     * This endpoint searches for tracks. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchTracksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchTracksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchTracksResponse
     */
	public function searchTracks(
        \OpenAPI\OpenAPI\Models\Operations\SearchTracksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchTracksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchTracksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/audio/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchTracksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchTracksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->audioSearchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AudioSearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
}