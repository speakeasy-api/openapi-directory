"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class BulkJobs:
    r"""Bulk Jobs"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_v2_bulk_jobs(self, request: operations.GetV2BulkJobsRequest) -> operations.GetV2BulkJobsResponse:
        r"""List bulk jobs
        Fetches multiple bulk job records. The records can be filtered, paged, and sorted according to the respective parameters.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/bulk_jobs'
        
        query_params = utils.get_query_params(operations.GetV2BulkJobsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2BulkJobsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_v2_bulk_jobs_id_(self, request: operations.GetV2BulkJobsIDRequest) -> operations.GetV2BulkJobsIDResponse:
        r"""Fetch a bulk job
        Fetches a bulk job, by ID only.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2BulkJobsIDRequest, base_url, '/v2/bulk_jobs/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2BulkJobsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_v2_bulk_jobs(self, request: operations.PostV2BulkJobsRequestBody) -> operations.PostV2BulkJobsResponse:
        r"""Create a bulk job
        Creates a bulk job. The type of the bulk job must be included when created.
        
        For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the <a href=\"/bulk.html\" target=\"_blank\" rel=\"noopener noreferrer\">bulk job details page</a>.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/bulk_jobs'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV2BulkJobsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def put_v2_bulk_jobs_id_(self, request: operations.PutV2BulkJobsIDRequest) -> operations.PutV2BulkJobsIDResponse:
        r"""Update a bulk job
        Updates a bulk job's name and / or marks a bulk job as 'ready_to_execute'.  May only be updated if the bulk job is still in an \"open\" state.
        
        For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the <a href=\"/bulk.html\" target=\"_blank\" rel=\"noopener noreferrer\">bulk job details page</a>.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutV2BulkJobsIDRequest, base_url, '/v2/bulk_jobs/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutV2BulkJobsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    