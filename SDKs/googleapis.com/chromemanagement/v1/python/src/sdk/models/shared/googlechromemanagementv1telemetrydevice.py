"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlechromemanagementv1audiostatusreport as shared_googlechromemanagementv1audiostatusreport
from ..shared import googlechromemanagementv1batteryinfo as shared_googlechromemanagementv1batteryinfo
from ..shared import googlechromemanagementv1batterystatusreport as shared_googlechromemanagementv1batterystatusreport
from ..shared import googlechromemanagementv1bootperformancereport as shared_googlechromemanagementv1bootperformancereport
from ..shared import googlechromemanagementv1cpuinfo as shared_googlechromemanagementv1cpuinfo
from ..shared import googlechromemanagementv1cpustatusreport as shared_googlechromemanagementv1cpustatusreport
from ..shared import googlechromemanagementv1graphicsinfo as shared_googlechromemanagementv1graphicsinfo
from ..shared import googlechromemanagementv1graphicsstatusreport as shared_googlechromemanagementv1graphicsstatusreport
from ..shared import googlechromemanagementv1memoryinfo as shared_googlechromemanagementv1memoryinfo
from ..shared import googlechromemanagementv1memorystatusreport as shared_googlechromemanagementv1memorystatusreport
from ..shared import googlechromemanagementv1networkdiagnosticsreport as shared_googlechromemanagementv1networkdiagnosticsreport
from ..shared import googlechromemanagementv1networkinfo as shared_googlechromemanagementv1networkinfo
from ..shared import googlechromemanagementv1networkstatusreport as shared_googlechromemanagementv1networkstatusreport
from ..shared import googlechromemanagementv1osupdatestatus as shared_googlechromemanagementv1osupdatestatus
from ..shared import googlechromemanagementv1peripheralsreport as shared_googlechromemanagementv1peripheralsreport
from ..shared import googlechromemanagementv1storageinfo as shared_googlechromemanagementv1storageinfo
from ..shared import googlechromemanagementv1storagestatusreport as shared_googlechromemanagementv1storagestatusreport
from ..shared import googlechromemanagementv1thunderboltinfo as shared_googlechromemanagementv1thunderboltinfo
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleChromeManagementV1TelemetryDevice:
    r"""Telemetry data collected from a managed device."""
    
    audio_status_report: Optional[list[shared_googlechromemanagementv1audiostatusreport.GoogleChromeManagementV1AudioStatusReport]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audioStatusReport'), 'exclude': lambda f: f is None }})
    r"""Output only. Audio reports collected periodically sorted in a decreasing order of report_time."""  
    battery_info: Optional[list[shared_googlechromemanagementv1batteryinfo.GoogleChromeManagementV1BatteryInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batteryInfo'), 'exclude': lambda f: f is None }})
    r"""Output only. Information on battery specs for the device."""  
    battery_status_report: Optional[list[shared_googlechromemanagementv1batterystatusreport.GoogleChromeManagementV1BatteryStatusReport]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batteryStatusReport'), 'exclude': lambda f: f is None }})
    r"""Output only. Battery reports collected periodically."""  
    boot_performance_report: Optional[list[shared_googlechromemanagementv1bootperformancereport.GoogleChromeManagementV1BootPerformanceReport]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bootPerformanceReport'), 'exclude': lambda f: f is None }})
    r"""Output only. Boot performance reports of the device."""  
    cpu_info: Optional[list[shared_googlechromemanagementv1cpuinfo.GoogleChromeManagementV1CPUInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuInfo'), 'exclude': lambda f: f is None }})
    r"""Output only. Information regarding CPU specs for the device."""  
    cpu_status_report: Optional[list[shared_googlechromemanagementv1cpustatusreport.GoogleChromeManagementV1CPUStatusReport]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuStatusReport'), 'exclude': lambda f: f is None }})
    r"""Output only. CPU status reports collected periodically sorted in a decreasing order of report_time."""  
    customer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer'), 'exclude': lambda f: f is None }})
    r"""Output only. Google Workspace Customer whose enterprise enrolled the device."""  
    device_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceId'), 'exclude': lambda f: f is None }})
    r"""Output only. The unique Directory API ID of the device. This value is the same as the Admin Console's Directory API ID in the ChromeOS Devices tab"""  
    graphics_info: Optional[shared_googlechromemanagementv1graphicsinfo.GoogleChromeManagementV1GraphicsInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('graphicsInfo'), 'exclude': lambda f: f is None }})
    r"""Information of the graphics subsystem. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceGraphicsStatus](https://chromeenterprise.google/policies/#ReportDeviceGraphicsStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A"""  
    graphics_status_report: Optional[list[shared_googlechromemanagementv1graphicsstatusreport.GoogleChromeManagementV1GraphicsStatusReport]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('graphicsStatusReport'), 'exclude': lambda f: f is None }})
    r"""Output only. Graphics reports collected periodically."""  
    memory_info: Optional[shared_googlechromemanagementv1memoryinfo.GoogleChromeManagementV1MemoryInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memoryInfo'), 'exclude': lambda f: f is None }})
    r"""Memory information of a device. * This field has both telemetry and device information: - `totalRamBytes` - Device information - `availableRamBytes` - Telemetry information - `totalMemoryEncryption` - Device information * Data for this field is controlled via policy: [ReportDeviceMemoryInfo](https://chromeenterprise.google/policies/#ReportDeviceMemoryInfo) * Data Collection Frequency: - `totalRamBytes` - Only at upload - `availableRamBytes` - Every 10 minutes - `totalMemoryEncryption` - at device startup * Default Data Reporting Frequency: - `totalRamBytes` - 3 hours - `availableRamBytes` - 3 hours - `totalMemoryEncryption` - at device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: only for `totalMemoryEncryption` * Reported for affiliated users only: N/A"""  
    memory_status_report: Optional[list[shared_googlechromemanagementv1memorystatusreport.GoogleChromeManagementV1MemoryStatusReport]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memoryStatusReport'), 'exclude': lambda f: f is None }})
    r"""Output only. Memory status reports collected periodically sorted decreasing by report_time."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Resource name of the device."""  
    network_diagnostics_report: Optional[list[shared_googlechromemanagementv1networkdiagnosticsreport.GoogleChromeManagementV1NetworkDiagnosticsReport]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkDiagnosticsReport'), 'exclude': lambda f: f is None }})
    r"""Output only. Network diagnostics collected periodically."""  
    network_info: Optional[shared_googlechromemanagementv1networkinfo.GoogleChromeManagementV1NetworkInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkInfo'), 'exclude': lambda f: f is None }})
    r"""Network device information. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportNetworkDeviceConfiguration](https://chromeenterprise.google/policies/#ReportNetworkDeviceConfiguration) * Data Collection Frequency: At device startup * Default Data Reporting Frequency: At device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: N/A"""  
    network_status_report: Optional[list[shared_googlechromemanagementv1networkstatusreport.GoogleChromeManagementV1NetworkStatusReport]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkStatusReport'), 'exclude': lambda f: f is None }})
    r"""Output only. Network specs collected periodically."""  
    org_unit_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orgUnitId'), 'exclude': lambda f: f is None }})
    r"""Output only. Organization unit ID of the device."""  
    os_update_status: Optional[list[shared_googlechromemanagementv1osupdatestatus.GoogleChromeManagementV1OsUpdateStatus]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osUpdateStatus'), 'exclude': lambda f: f is None }})
    r"""Output only. Contains relevant information regarding ChromeOS update status."""  
    peripherals_report: Optional[list[shared_googlechromemanagementv1peripheralsreport.GoogleChromeManagementV1PeripheralsReport]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('peripheralsReport'), 'exclude': lambda f: f is None }})
    r"""Output only. Peripherals reports collected periodically sorted in a decreasing order of report_time."""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serialNumber'), 'exclude': lambda f: f is None }})
    r"""Output only. Device serial number. This value is the same as the Admin Console's Serial Number in the ChromeOS Devices tab."""  
    storage_info: Optional[shared_googlechromemanagementv1storageinfo.GoogleChromeManagementV1StorageInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storageInfo'), 'exclude': lambda f: f is None }})
    r"""Status data for storage. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceStorageStatus](https://chromeenterprise.google/policies/#ReportDeviceStorageStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A"""  
    storage_status_report: Optional[list[shared_googlechromemanagementv1storagestatusreport.GoogleChromeManagementV1StorageStatusReport]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storageStatusReport'), 'exclude': lambda f: f is None }})
    r"""Output only. Storage reports collected periodically."""  
    thunderbolt_info: Optional[list[shared_googlechromemanagementv1thunderboltinfo.GoogleChromeManagementV1ThunderboltInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thunderboltInfo'), 'exclude': lambda f: f is None }})
    r"""Output only. Information on Thunderbolt bus."""  
    