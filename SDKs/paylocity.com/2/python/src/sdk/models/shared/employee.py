"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeAdditionalDirectDeposit:
    r"""The additional direct deposit model"""
    
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountNumber'), 'exclude': lambda f: f is None }})
    r"""Account number, entered without special characters and spaces. <br  />Max length: 17<br />"""  
    account_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountType'), 'exclude': lambda f: f is None }})
    r"""Account type. Valid values are *C* (Checking), *S* (Saving), *P* (Pay Card). <br   />Max length: 1<br />"""  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Amount value to be deposited to the account.<br  />Decimal (12,2)<br />"""  
    amount_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amountType'), 'exclude': lambda f: f is None }})
    r"""Amount type to indicate the context of the amount. Common values are *F* (FLAT), *F-* (Net Minus), *P* (Percent). <br  /> Max length: 5<br />"""  
    block_special: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockSpecial'), 'exclude': lambda f: f is None }})
    r"""Indicates if direct deposit should be blocked when special check types such as Bonus are processed.<br />"""  
    is_skip_pre_note: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSkipPreNote'), 'exclude': lambda f: f is None }})
    r"""Indicates if account will not pre-note.<br />"""  
    name_on_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameOnAccount'), 'exclude': lambda f: f is None }})
    r"""Name on the bank account. Defaults to employee's name. <br  />Max length: 30<br />"""  
    pre_note_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preNoteDate'), 'exclude': lambda f: f is None }})
    r"""Date to end the pre-note of the account. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />"""  
    routing_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routingNumber'), 'exclude': lambda f: f is None }})
    r"""ABA Transit Routing Number, entered without dashes or spaces. <br  />Max length: 9<br />"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeAdditionalRate:
    r"""The additional pay rate model"""
    
    change_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changeReason'), 'exclude': lambda f: f is None }})
    r"""Not required. If populated, must match one of the system coded values available in the Additional Rates Change Reason drop down.<br />"""  
    cost_center1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costCenter1'), 'exclude': lambda f: f is None }})
    r"""Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 1 drop down. This cell must be in a text format.<br />"""  
    cost_center2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costCenter2'), 'exclude': lambda f: f is None }})
    r"""Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 2 drop down. This cell must be in a text format.<br />"""  
    cost_center3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costCenter3'), 'exclude': lambda f: f is None }})
    r"""Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 3 drop down. This cell must be in a text format.<br />"""  
    effective_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effectiveDate'), 'exclude': lambda f: f is None }})
    r"""Required. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />"""  
    end_check_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endCheckDate'), 'exclude': lambda f: f is None }})
    r"""Not required. Must match one of the system coded check dates available in the Additional Rates End Check Date drop down. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />"""  
    job: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('job'), 'exclude': lambda f: f is None }})
    r"""Not required. If populated, must match one of the system coded values available in the Additional Rates Job drop down.<br />"""  
    rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rate'), 'exclude': lambda f: f is None }})
    r"""Required. Enter dollar amount that corresponds to the Per selection.<br />"""  
    rate_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rateCode'), 'exclude': lambda f: f is None }})
    r"""Required. If populated, must match one of the system coded values available in the Additional Rates Rate Code drop down.<br />"""  
    rate_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rateNotes'), 'exclude': lambda f: f is None }})
    r"""Not required.<br  />Max length: 4000<br />"""  
    rate_per: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ratePer'), 'exclude': lambda f: f is None }})
    r"""Required. Valid values are HOUR or WEEK.<br />"""  
    shift: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shift'), 'exclude': lambda f: f is None }})
    r"""Not required. If populated, must match one of the system coded values available in the Additional Rates Shift drop down.<br />"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeBenefitSetup:
    r"""Add or update setup values used for employee benefits integration, insurance plan settings, and ACA reporting."""
    
    benefit_class: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('benefitClass'), 'exclude': lambda f: f is None }})
    r"""Benefit Class code. Values are configured in Web Pay Company > Setup > Benefits > Classes.<br  />Max length: 30"""  
    benefit_class_effective_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('benefitClassEffectiveDate'), 'exclude': lambda f: f is None }})
    r"""Date when Benefit Class takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*."""  
    benefit_salary: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('benefitSalary'), 'exclude': lambda f: f is None }})
    r"""Salary used to configure benefits.<br  />Decimal(12,2)"""  
    benefit_salary_effective_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('benefitSalaryEffectiveDate'), 'exclude': lambda f: f is None }})
    r"""Date when Benefit Salary takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*."""  
    do_not_apply_administrative_period: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doNotApplyAdministrativePeriod'), 'exclude': lambda f: f is None }})
    r"""Applicable only for HR Enhanced clients and Benefit Classes with ACA Employment Type of Full Time."""  
    is_measure_aca_eligibility: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isMeasureAcaEligibility'), 'exclude': lambda f: f is None }})
    r"""Only valid for HR Enhanced clients and Benefit Classes that are ACA Employment Type of Full Time."""  
    
class EmployeeCustomBooleanFieldsCategoryEnum(str, Enum):
    r"""The custom field category.  Acceptable value is 'PayrollAndHR'."""
    PAYROLL_AND_HR = 'PayrollAndHR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeCustomBooleanFields:
    
    category: EmployeeCustomBooleanFieldsCategoryEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})
    r"""The custom field category.  Acceptable value is 'PayrollAndHR'."""  
    label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})
    r"""The custom field label whose value is to be added/updated. Must match to the label defined in Web Pay Custom Fields setup.  Max length: 255."""  
    value: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The custom boolean field value."""  
    
class EmployeeCustomDateFieldsCategoryEnum(str, Enum):
    r"""The custom field category.  Acceptable value is 'PayrollAndHR'."""
    PAYROLL_AND_HR = 'PayrollAndHR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeCustomDateFields:
    
    category: EmployeeCustomDateFieldsCategoryEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})
    r"""The custom field category.  Acceptable value is 'PayrollAndHR'."""  
    label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})
    r"""The custom field label whose value is to be added/updated.  Must match to the label defined in Web Pay Custom Fields setup.  Max length: 255."""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The custom date field value.  Common formats include MM-DD-CCYY, CCYY-MM-DD."""  
    
class EmployeeCustomDropDownFieldsCategoryEnum(str, Enum):
    r"""The custom field category.  Acceptable value is 'PayrollAndHR'."""
    PAYROLL_AND_HR = 'PayrollAndHR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeCustomDropDownFields:
    
    category: EmployeeCustomDropDownFieldsCategoryEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})
    r"""The custom field category.  Acceptable value is 'PayrollAndHR'."""  
    label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})
    r"""The custom field label whose value is to be added/updated.  Must match to the label defined in Web Pay Custom Fields setup.  Max length: 255."""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The custom dropdown field value.  Values are configured in Web Pay Company > Setup > List Values > Lookup Values > Custom Fields: PayrollAndHR.  Max length: 10."""  
    
class EmployeeCustomNumberFieldsCategoryEnum(str, Enum):
    r"""The custom field category.  Acceptable value is 'PayrollAndHR'."""
    PAYROLL_AND_HR = 'PayrollAndHR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeCustomNumberFields:
    
    category: EmployeeCustomNumberFieldsCategoryEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})
    r"""The custom field category.  Acceptable value is 'PayrollAndHR'."""  
    label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})
    r"""The custom field label whose value is to be added/updated.  Must match to the label defined in Web Pay Custom Fields setup.  Max length: 255."""  
    value: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The custom number field value.  Decimal (18,6)."""  
    
class EmployeeCustomTextFieldsCategoryEnum(str, Enum):
    r"""The custom field category.  Acceptable value is 'PayrollAndHR'."""
    PAYROLL_AND_HR = 'PayrollAndHR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeCustomTextFields:
    
    category: EmployeeCustomTextFieldsCategoryEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})
    r"""The custom field category.  Acceptable value is 'PayrollAndHR'."""  
    label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})
    r"""The custom field label whose value is to be added/updated.  Must match to the label defined in Web Pay Custom Fields setup.  Max length: 255."""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The custom text field value.  Max length: 255."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeDepartmentPosition:
    r"""Add or update home department cost center, position, supervisor, reviewer, employment type, EEO class, pay settings, and union information."""
    
    change_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changeReason'), 'exclude': lambda f: f is None }})
    r"""Employee department/position change reason. Must match Company setup. <br  />Max length: 15"""  
    clock_badge_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clockBadgeNumber'), 'exclude': lambda f: f is None }})
    r"""Employee clock badge number. Defaults to employeeId. <br  />Max length: 10"""  
    cost_center1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costCenter1'), 'exclude': lambda f: f is None }})
    r"""Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10"""  
    cost_center2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costCenter2'), 'exclude': lambda f: f is None }})
    r"""Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10"""  
    cost_center3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costCenter3'), 'exclude': lambda f: f is None }})
    r"""Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10"""  
    effective_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effectiveDate'), 'exclude': lambda f: f is None }})
    r"""The date the position takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*."""  
    employee_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employeeType'), 'exclude': lambda f: f is None }})
    r"""Employee current employment type. Common values *RFT (Regular Full Time), RPT (Regular Part Time), SNL (Seasonal), TFT (Temporary Full Time), TPT (Temporary Part Time)*. <br  />Max length: 10"""  
    equal_employment_opportunity_class: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('equalEmploymentOpportunityClass'), 'exclude': lambda f: f is None }})
    r"""Values are configured in Company > Setup > HR > EEO Classes.<br  /> Max length: 10"""  
    is_minimum_wage_exempt: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isMinimumWageExempt'), 'exclude': lambda f: f is None }})
    r"""Indicates if employee is exempt from minimum wage."""  
    is_overtime_exempt: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isOvertimeExempt'), 'exclude': lambda f: f is None }})
    r"""Indicates if employee is exempt from overtime."""  
    is_supervisor_reviewer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSupervisorReviewer'), 'exclude': lambda f: f is None }})
    r"""Indicates if employee is a supervisor or reviewer."""  
    is_union_dues_collected: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isUnionDuesCollected'), 'exclude': lambda f: f is None }})
    r"""Indicates if union dues are collected."""  
    is_union_initiation_collected: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isUnionInitiationCollected'), 'exclude': lambda f: f is None }})
    r"""Indicates if initiations fees are collected."""  
    job_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobTitle'), 'exclude': lambda f: f is None }})
    r"""Employee current job title. <br  />Max length: 50"""  
    pay_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payGroup'), 'exclude': lambda f: f is None }})
    r"""Employee pay group. Must match Company setup. <br  /> Max length: 20"""  
    position_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('positionCode'), 'exclude': lambda f: f is None }})
    r"""Employee position code. Must match Company setup.<br  />Max length: 20"""  
    reviewer_company_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reviewerCompanyNumber'), 'exclude': lambda f: f is None }})
    r"""Company number of reviewer.<br />Max length: 9"""  
    reviewer_employee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reviewerEmployeeId'), 'exclude': lambda f: f is None }})
    r"""Employee id of the reviewer.<br />Max length: 10"""  
    shift: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shift'), 'exclude': lambda f: f is None }})
    r"""Employee work shift.<br  />Max length: 255"""  
    supervisor_company_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supervisorCompanyNumber'), 'exclude': lambda f: f is None }})
    r"""Supervisor's company number. Defaults to employee company number.<br  />Max length: 9"""  
    supervisor_employee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supervisorEmployeeId'), 'exclude': lambda f: f is None }})
    r"""EmployeeId of the supervisor. <br  />Max length: 10"""  
    tipped: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tipped'), 'exclude': lambda f: f is None }})
    r"""Indicates if employee receives tips."""  
    union_affiliation_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unionAffiliationDate'), 'exclude': lambda f: f is None }})
    r"""Employee union affiliation effective date. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*."""  
    union_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unionCode'), 'exclude': lambda f: f is None }})
    r"""Employee union code. Must match Company setup. <br  />Max length: 10"""  
    union_position: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unionPosition'), 'exclude': lambda f: f is None }})
    r"""Employee union position. Must match Company setup. <br  />Max length: 30"""  
    workers_compensation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workersCompensation'), 'exclude': lambda f: f is None }})
    r"""Employee worker compensation code. Must match Company setup.<br  /> Max length: 10"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeEmergencyContacts:
    r"""The emergency contact model"""
    
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName') }})
    r"""Required. Contact first name. <br  />Max length: 40"""  
    last_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName') }})
    r"""Required. Contact last name. <br  />Max length: 40"""  
    address1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address1'), 'exclude': lambda f: f is None }})
    r"""1st address line."""  
    address2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address2'), 'exclude': lambda f: f is None }})
    r"""2nd address line."""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""County."""  
    county: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('county'), 'exclude': lambda f: f is None }})
    r"""Country.  Must be a valid 3 character country code.  Common values are *USA* (United States), *CAN* (Canada)."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Contact email.  Must be valid email address format."""  
    home_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homePhone'), 'exclude': lambda f: f is None }})
    r"""Contact Home Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed."""  
    mobile_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobilePhone'), 'exclude': lambda f: f is None }})
    r"""Contact Mobile Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed."""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Notes. <br  />Max length: 1000"""  
    pager: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pager'), 'exclude': lambda f: f is None }})
    r"""Contact Pager.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed."""  
    primary_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryPhone'), 'exclude': lambda f: f is None }})
    r"""Required. Contact primary phone type.  Must match Company setup.  Valid  values are H (Home), M (Mobile), P (Pager), W (Work)"""  
    priority: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priority'), 'exclude': lambda f: f is None }})
    r"""Required. Contact priority. Valid values are *P* (Primary) or *S* (Secondary)."""  
    relationship: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationship'), 'exclude': lambda f: f is None }})
    r"""Required. Contact relationship.  Must match Company setup.  Common values are Spouse, Mother, Father."""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State or Province.  If U.S. address, must be valid 2 character state code.  Common values are *IL* (Illinois), *CA* (California)."""  
    sync_employee_info: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syncEmployeeInfo'), 'exclude': lambda f: f is None }})
    r"""Valid values are *true* or *false*."""  
    work_extension: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workExtension'), 'exclude': lambda f: f is None }})
    r"""Work Extension."""  
    work_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workPhone'), 'exclude': lambda f: f is None }})
    r"""Contact Work Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed."""  
    zip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip'), 'exclude': lambda f: f is None }})
    r"""Postal code.  If U.S. address, must be a valid zip code."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeFederalTax:
    r"""Add or update federal tax amount type (taxCalculationCode), amount or percentage, filing status, and exemptions."""
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Tax amount. <br  />Decimal (12,2)"""  
    deductions_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deductionsAmount'), 'exclude': lambda f: f is None }})
    r"""Box 4(b) on form W4 (year 2020 or later): Deductions amount. <br  />Decimal (12,2)"""  
    dependents_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependentsAmount'), 'exclude': lambda f: f is None }})
    r"""Box 3 on form W4 (year 2020 or later): Total dependents amount. <br  />Decimal (12,2)"""  
    exemptions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exemptions'), 'exclude': lambda f: f is None }})
    r"""Federal tax exemptions value. <br  />Decimal (12,2)"""  
    filing_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filingStatus'), 'exclude': lambda f: f is None }})
    r"""Employee federal filing status. Common values are *S* (Single), *M* (Married).<br  />Max length: 50"""  
    higher_rate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('higherRate'), 'exclude': lambda f: f is None }})
    r"""Box 2(c) on form W4 (year 2020 or later): Multiple Jobs or Spouse Works. <br  />Boolean"""  
    other_income_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otherIncomeAmount'), 'exclude': lambda f: f is None }})
    r"""Box 4(a) on form W4 (year 2020 or later): Other income amount. <br  />Decimal (12,2)"""  
    percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentage'), 'exclude': lambda f: f is None }})
    r"""Tax percentage. <br  />Decimal (12,2)"""  
    tax_calculation_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCalculationCode'), 'exclude': lambda f: f is None }})
    r"""Tax calculation code. Common values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed Percentage). <br  />Max length: 10"""  
    w4_form_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('w4FormYear'), 'exclude': lambda f: f is None }})
    r"""The federal W4 form year <br  />Integer"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeHomeAddress:
    r"""Add or update employee's home address, personal phone numbers, and personal email."""
    
    address1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address1'), 'exclude': lambda f: f is None }})
    r"""1st address line.<br  /> Max length: 40"""  
    address2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address2'), 'exclude': lambda f: f is None }})
    r"""2nd address line. <br  /> Max length: 40"""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City.<br  /> Max length: 40"""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Country.<br  /> Max length: 30"""  
    county: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('county'), 'exclude': lambda f: f is None }})
    r"""County.<br  /> Max length: 30"""  
    email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailAddress'), 'exclude': lambda f: f is None }})
    r"""Email. <br  />Max length: 50"""  
    mobile_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobilePhone'), 'exclude': lambda f: f is None }})
    r"""Mobile phone number.<br  /> Max length: 20"""  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone'), 'exclude': lambda f: f is None }})
    r"""Phone number.<br  /> Max length: 20"""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode'), 'exclude': lambda f: f is None }})
    r"""Postal code.<br  /> Max length: 10"""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State or province.<br  /> Max length: 2"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeLocalTax:
    r"""The Local Tax model"""
    
    exemptions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exemptions'), 'exclude': lambda f: f is None }})
    r"""Local tax exemptions value.<br  />Decimal (12,2)"""  
    exemptions2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exemptions2'), 'exclude': lambda f: f is None }})
    r"""Local tax exemptions 2 value.<br  />Decimal (12,2)"""  
    filing_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filingStatus'), 'exclude': lambda f: f is None }})
    r"""Employee local tax filing status. Must match specific local tax setup. <br  /> Max length: 50"""  
    resident_psd: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('residentPSD'), 'exclude': lambda f: f is None }})
    r"""Resident PSD (political subdivision code) applicable in PA. Must match Company setup.<br  /> Max length: 9"""  
    tax_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCode'), 'exclude': lambda f: f is None }})
    r"""Local tax code.<br  />Max length: 50"""  
    work_psd: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workPSD'), 'exclude': lambda f: f is None }})
    r"""Work location PSD. Must match Company setup. <br  /> Max length: 9"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeMainDirectDeposit:
    r"""Add the main direct deposit account. After deposits are made to any additional direct deposit accounts, the remaining net check is deposited in the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with what is provided on the request. GET API will not return direct deposit data."""
    
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountNumber'), 'exclude': lambda f: f is None }})
    r"""Account number, entered without special characters and spaces. <br  />Max length: 17"""  
    account_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountType'), 'exclude': lambda f: f is None }})
    r"""Account type. Valid values are *C* (Checking), *S* (Saving), *P* (Pay Card). <br   />Max length: 1"""  
    block_special: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockSpecial'), 'exclude': lambda f: f is None }})
    r"""Indicates if direct deposit should be blocked when special check types such as Bonus are processed.<br />"""  
    is_skip_pre_note: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSkipPreNote'), 'exclude': lambda f: f is None }})
    r"""Indicates if account will not pre-note."""  
    name_on_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameOnAccount'), 'exclude': lambda f: f is None }})
    r"""Name on the bank account. Defaults to employee's name. <br  />Max length: 30<br />"""  
    pre_note_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preNoteDate'), 'exclude': lambda f: f is None }})
    r"""Date to end the pre-note of the account. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*."""  
    routing_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routingNumber'), 'exclude': lambda f: f is None }})
    r"""ABA Transit Routing Number, entered without dashes or spaces. <br  />Max length: 9"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeNonPrimaryStateTax:
    r"""Add or update non-primary state tax code, amount type (taxCalculationCode), amount or percentage, filing status, exemptions, supplemental check (specialCheckCalc), and reciprocity code information."""
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""State tax code.<br  /> Max length: 50"""  
    deductions_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deductionsAmount'), 'exclude': lambda f: f is None }})
    r"""Box 4(b) on form W4 (year 2020 or later): Deductions amount. <br  />Decimal (12,2)"""  
    dependents_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependentsAmount'), 'exclude': lambda f: f is None }})
    r"""Box 3 on form W4 (year 2020 or later): Total dependents amount. <br  />Decimal (12,2)"""  
    exemptions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exemptions'), 'exclude': lambda f: f is None }})
    r"""State tax exemptions value.<br  />Decimal (12,2)"""  
    exemptions2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exemptions2'), 'exclude': lambda f: f is None }})
    r"""State tax exemptions 2 value.<br  />Decimal (12,2)"""  
    filing_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filingStatus'), 'exclude': lambda f: f is None }})
    r"""Employee state tax filing status. Common values are *S* (Single), *M* (Married).<br  />Max length: 50"""  
    higher_rate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('higherRate'), 'exclude': lambda f: f is None }})
    r"""Box 2(c) on form W4 (year 2020 or later): Multiple Jobs or Spouse Works. <br  />Boolean"""  
    other_income_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otherIncomeAmount'), 'exclude': lambda f: f is None }})
    r"""Box 4(a) on form W4 (year 2020 or later): Other income amount. <br  />Decimal (12,2)"""  
    percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentage'), 'exclude': lambda f: f is None }})
    r"""State Tax percentage. <br  />Decimal (12,2)"""  
    reciprocity_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reciprocityCode'), 'exclude': lambda f: f is None }})
    r"""Non-primary state tax reciprocity code.<br  /> Max length: 50"""  
    special_check_calc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('specialCheckCalc'), 'exclude': lambda f: f is None }})
    r"""Supplemental check calculation code. Common values are *Blocked* (Taxes blocked on Supplemental checks), *Supp* (Use supplemental Tax Rate-Code). <br  />Max length: 10"""  
    tax_calculation_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCalculationCode'), 'exclude': lambda f: f is None }})
    r"""Tax calculation code. Common values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed Percentage). <br  />Max length: 10"""  
    tax_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCode'), 'exclude': lambda f: f is None }})
    r"""State tax code.<br  /> Max length: 50"""  
    w4_form_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('w4FormYear'), 'exclude': lambda f: f is None }})
    r"""The state W4 form year <br  />Integer"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeePrimaryPayRate:
    r"""Add or update hourly or salary pay rate, effective date, and pay frequency."""
    
    annual_salary: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annualSalary'), 'exclude': lambda f: f is None }})
    r"""Employee annual salary.<br />Decimal (12,6)"""  
    base_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('baseRate'), 'exclude': lambda f: f is None }})
    r"""Employee base rate, used for Hourly employees. <br  />Decimal (12,6)"""  
    begin_check_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beginCheckDate'), 'exclude': lambda f: f is None }})
    r"""The date of the first check on which the new pay rate will appear. This value is only applicable when updating an existing employee. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*."""  
    change_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changeReason'), 'exclude': lambda f: f is None }})
    r"""Pay rate change reason.<br  /> Max length: 30"""  
    default_hours: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultHours'), 'exclude': lambda f: f is None }})
    r"""Employee default hours consistently worked. If autoPayType is set to D, employee will be paid hourly base rate for the defaultHours. <br  />Decimal (12,2)"""  
    effective_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effectiveDate'), 'exclude': lambda f: f is None }})
    r"""The date the employee's pay rate takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*."""  
    is_auto_pay: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isAutoPay'), 'exclude': lambda f: f is None }})
    r"""If set to *True*, employee will be paid automatically using deafultHours."""  
    pay_frequency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payFrequency'), 'exclude': lambda f: f is None }})
    r"""Employee current pay frequency. Common values are *A (Annual), B (Bi-Weekly), D (Daily), M (Monthly), S (Semi-Monthly), Q (Quarterly), W (Weekly)*. <br  />Max length: 5"""  
    pay_grade: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payGrade'), 'exclude': lambda f: f is None }})
    r"""Employee pay grade. Must match Company setup. <br  /> Max length: 10"""  
    pay_rate_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payRateNote'), 'exclude': lambda f: f is None }})
    r"""Pay rate notes regarding employee.<br  /> Max length: 250"""  
    pay_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payType'), 'exclude': lambda f: f is None }})
    r"""Employee pay type (rate code). Valid values are *Hourly* or *Salary*. <br  />Max length: 10"""  
    rate_per: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ratePer'), 'exclude': lambda f: f is None }})
    r"""Employee base rate frequency used with payType Hourly. Common values are *Hour, Week*. Default is Hour. <br  />Max length: 10"""  
    salary: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salary'), 'exclude': lambda f: f is None }})
    r"""Employee gross salary per pay period used with payType Salary.<br  />Decimal (12,6)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeePrimaryStateTax:
    r"""Add or update primary state tax code, amount type (taxCalculationCode), amount or percentage, filing status, exemptions, and supplemental check (specialCheckCalc) information. Only one primary state is allowed. Sending an updated primary state will replace the current primary state."""
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""State tax code.<br  /> Max length: 50"""  
    deductions_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deductionsAmount'), 'exclude': lambda f: f is None }})
    r"""Box 4(b) on form W4 (year 2020 or later): Deductions amount. <br  />Decimal (12,2)"""  
    dependents_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependentsAmount'), 'exclude': lambda f: f is None }})
    r"""Box 3 on form W4 (year 2020 or later): Total dependents amount. <br  />Decimal (12,2)"""  
    exemptions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exemptions'), 'exclude': lambda f: f is None }})
    r"""State tax exemptions value.<br  />Decimal (12,2)"""  
    exemptions2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exemptions2'), 'exclude': lambda f: f is None }})
    r"""State tax exemptions 2 value.<br  />Decimal (12,2)"""  
    filing_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filingStatus'), 'exclude': lambda f: f is None }})
    r"""Employee state tax filing status. Common values are *S* (Single), *M* (Married).<br  />Max length: 50"""  
    higher_rate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('higherRate'), 'exclude': lambda f: f is None }})
    r"""Box 2(c) on form W4 (year 2020 or later): Multiple Jobs or Spouse Works. <br  />Boolean"""  
    other_income_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otherIncomeAmount'), 'exclude': lambda f: f is None }})
    r"""Box 4(a) on form W4 (year 2020 or later): Other income amount. <br  />Decimal (12,2)"""  
    percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentage'), 'exclude': lambda f: f is None }})
    r"""State Tax percentage. <br  />Decimal (12,2)"""  
    special_check_calc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('specialCheckCalc'), 'exclude': lambda f: f is None }})
    r"""Supplemental check calculation code. Common values are *Blocked* (Taxes blocked on Supplemental checks), *Supp* (Use supplemental Tax Rate-Code). <br  />Max length: 10"""  
    tax_calculation_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCalculationCode'), 'exclude': lambda f: f is None }})
    r"""Tax calculation code. Common values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed Percentage). <br  />Max length: 10"""  
    tax_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCode'), 'exclude': lambda f: f is None }})
    r"""State tax code.<br  /> Max length: 50"""  
    w4_form_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('w4FormYear'), 'exclude': lambda f: f is None }})
    r"""The state W4 form year <br  />Integer"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeStatus:
    r"""Add or update employee status, change reason, effective date, and adjusted seniority date. Note that companies that are still in Implementation cannot hire future employees."""
    
    adjusted_seniority_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adjustedSeniorityDate'), 'exclude': lambda f: f is None }})
    r"""Adjusted seniority date. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*."""  
    change_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changeReason'), 'exclude': lambda f: f is None }})
    r"""Employee status change reason. Must match Company setup.<br  /> Max length: 15"""  
    effective_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effectiveDate'), 'exclude': lambda f: f is None }})
    r"""Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*."""  
    employee_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employeeStatus'), 'exclude': lambda f: f is None }})
    r"""Employee current work status. Common values are *A* (Active), *L* (Leave of Absence), *T* (Terminated). <br  />Max length: 20"""  
    hire_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hireDate'), 'exclude': lambda f: f is None }})
    r"""Employee hired date. Updates to hire date are not allowed and will be ignored. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*."""  
    is_eligible_for_rehire: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isEligibleForRehire'), 'exclude': lambda f: f is None }})
    r"""Indicates if employee eligible for rehire."""  
    re_hire_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reHireDate'), 'exclude': lambda f: f is None }})
    r"""Rehire date if employee is rehired.  Updates to re-hire date are not allowed and will be ignored. Common formats are *MM-DD-CCYY, CCYY-MM-DD*."""  
    status_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusType'), 'exclude': lambda f: f is None }})
    r"""The Status Type associated with the Employee Status code. Each Employee Status  code for a company is assigned to one of the Status Type values of  A (Active), L (Leave of Absence), T (Terminated)."""  
    termination_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('terminationDate'), 'exclude': lambda f: f is None }})
    r"""Employee termination date. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeTaxSetup:
    r"""Add tax form, 1099 exempt reasons and notes, and 943 agricultural employee information. Once the employee receives wages, this information cannot be updated. Add or update SUI tax state, retirement plan, and statutory information."""
    
    fitw_exempt_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fitwExemptNotes'), 'exclude': lambda f: f is None }})
    r"""Notes for FITW exemption.<br  /> Max length: 250"""  
    fitw_exempt_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fitwExemptReason'), 'exclude': lambda f: f is None }})
    r"""Reason code for FITW exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30"""  
    futa_exempt_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('futaExemptNotes'), 'exclude': lambda f: f is None }})
    r"""Notes for FUTA exemption.<br  /> Max length: 250"""  
    futa_exempt_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('futaExemptReason'), 'exclude': lambda f: f is None }})
    r"""Reason code for FUTA exemption. Common values are *501* (5019c)(3) Organization), *IC* (Independent Contractor).<br  /> Max length: 30"""  
    is_employee943: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isEmployee943'), 'exclude': lambda f: f is None }})
    r"""Indicates if employee in agriculture or farming."""  
    is_pension: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPension'), 'exclude': lambda f: f is None }})
    r"""Indicates if employee is eligible for pension."""  
    is_statutory: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isStatutory'), 'exclude': lambda f: f is None }})
    r"""Indicates if employee is statutory."""  
    med_exempt_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('medExemptNotes'), 'exclude': lambda f: f is None }})
    r"""Notes for Medicare exemption.<br  /> Max length: 250"""  
    med_exempt_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('medExemptReason'), 'exclude': lambda f: f is None }})
    r"""Reason code for Medicare exemption. Common values are *501* (5019c)(3) Organization), *IC* (Independent Contractor).<br  /> Max length: 30"""  
    sitw_exempt_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sitwExemptNotes'), 'exclude': lambda f: f is None }})
    r"""Notes for SITW exemption.<br  /> Max length: 250"""  
    sitw_exempt_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sitwExemptReason'), 'exclude': lambda f: f is None }})
    r"""Reason code for SITW exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30"""  
    ss_exempt_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssExemptNotes'), 'exclude': lambda f: f is None }})
    r"""Notes for Social Security exemption.<br  /> Max length: 250"""  
    ss_exempt_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssExemptReason'), 'exclude': lambda f: f is None }})
    r"""Reason code for Social Security exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30"""  
    sui_exempt_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suiExemptNotes'), 'exclude': lambda f: f is None }})
    r"""Notes for SUI exemption.<br  /> Max length: 250"""  
    sui_exempt_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suiExemptReason'), 'exclude': lambda f: f is None }})
    r"""Reason code for SUI exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30"""  
    sui_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suiState'), 'exclude': lambda f: f is None }})
    r"""Employee SUI (State Unemployment Insurance) state. <br  />Max length: 2"""  
    tax_distribution_code1099_r: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxDistributionCode1099R'), 'exclude': lambda f: f is None }})
    r"""Employee 1099R distribution code. Common values are *7* (Normal Distribution), *F* (Charitable Gift Annuity). <br  />Max length: 1"""  
    tax_form: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxForm'), 'exclude': lambda f: f is None }})
    r"""Employee tax form for reporting income. Valid values are *W2, 1099M, 1099R*. Default is W2. <br  />Max length: 15"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeWebTime:
    r"""Add or update Web Time badge number and charge rate and synchronize Web Pay and Web Time employee data."""
    
    badge_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badgeNumber'), 'exclude': lambda f: f is None }})
    r"""Badge number usually issued for time and attendance system use. <br  />Max length: 50"""  
    charge_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeRate'), 'exclude': lambda f: f is None }})
    r"""Rate to be charged to third party for time worked by the employee. It is most commonly referenced in the Cost Center Charge, Cost Center Charge vs. Cost Reports, and the Customer Invoice time and attendance reports. <br  />Decimal (12,2)"""  
    is_time_labor_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isTimeLaborEnabled'), 'exclude': lambda f: f is None }})
    r"""If set to true, changes to employee data will be reflected in Web Time."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeWorkAddress:
    r"""Add or update employee's work address, phone numbers, and email. Work Location drop down field is not included."""
    
    address1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address1'), 'exclude': lambda f: f is None }})
    r"""1st address line.<br  /> Max length: 40"""  
    address2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address2'), 'exclude': lambda f: f is None }})
    r"""2nd address line. <br  /> Max length: 40"""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City.<br  /> Max length: 40"""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Country.<br  /> Max length: 30"""  
    county: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('county'), 'exclude': lambda f: f is None }})
    r"""County.<br  /> Max length: 30"""  
    email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailAddress'), 'exclude': lambda f: f is None }})
    r"""Email. <br  />Max length: 50"""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Work Location name. <br />Max length: 50"""  
    mail_stop: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mailStop'), 'exclude': lambda f: f is None }})
    r"""Employee mail stop.<br  /> Max length: 10"""  
    mobile_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobilePhone'), 'exclude': lambda f: f is None }})
    r"""Mobile phone number.<br  /> Max length: 20"""  
    pager: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pager'), 'exclude': lambda f: f is None }})
    r"""Employee pager number.<br  /> Max length: 20"""  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone'), 'exclude': lambda f: f is None }})
    r"""Phone number.<br  /> Max length: 20"""  
    phone_extension: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneExtension'), 'exclude': lambda f: f is None }})
    r"""Phone number extension.<br  /> Max length: 10"""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode'), 'exclude': lambda f: f is None }})
    r"""Postal code.<br  /> Max length: 10"""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State or province.<br  /> Max length: 2"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeWorkEligibility:
    r"""Add or update I-9 work authorization information."""
    
    alien_or_admission_document_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alienOrAdmissionDocumentNumber'), 'exclude': lambda f: f is None }})
    r"""Employee USCIS or Admission Number. <br  /> Must be 7-10 characters and may begin with an 'A'"""  
    attested_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attestedDate'), 'exclude': lambda f: f is None }})
    r"""The date the I-9 Verification form was attested by Employer or Authorized representative. Common formats are *MM-DD-CCYY, CCYY-MM-DD*."""  
    country_of_issuance: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countryOfIssuance'), 'exclude': lambda f: f is None }})
    r"""If Foreign Passport number is provided, provide its country of issuance. Must match Paylocity setup.<br  /> Max length: 30"""  
    foreign_passport_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('foreignPassportNumber'), 'exclude': lambda f: f is None }})
    r"""Foreign Passport Number.<br  /> Max length: 50"""  
    i94_admission_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('i94AdmissionNumber'), 'exclude': lambda f: f is None }})
    r"""Form I-94 admission number.<br  /> Must be 11 numeric characters"""  
    i9_date_verified: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('i9DateVerified'), 'exclude': lambda f: f is None }})
    r"""Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*."""  
    i9_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('i9Notes'), 'exclude': lambda f: f is None }})
    r"""Notes regarding employee's i9.<br  /> Max length: 4000"""  
    is_i9_verified: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isI9Verified'), 'exclude': lambda f: f is None }})
    r"""Indicates if employee I9 is verified."""  
    is_ssn_verified: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSsnVerified'), 'exclude': lambda f: f is None }})
    r"""Indicates if employee SSN is verified."""  
    ssn_date_verified: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssnDateVerified'), 'exclude': lambda f: f is None }})
    r"""The date of employer verification of employee SSN. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*."""  
    ssn_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssnNotes'), 'exclude': lambda f: f is None }})
    r"""Notes regarding employee's SSN.<br  /> Max length: 4000"""  
    visa_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visaType'), 'exclude': lambda f: f is None }})
    r"""Employee Visa type. Must match one of the system coded values.<br  /> Max length: 100"""  
    work_authorization: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workAuthorization'), 'exclude': lambda f: f is None }})
    r"""Employee work authorization. Must match one of the system coded values.<br  /> Max length: 100"""  
    work_until: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workUntil'), 'exclude': lambda f: f is None }})
    r"""End date of employee work eligibility.  Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Employee:
    r"""The employee model"""
    
    additional_direct_deposit: Optional[list[EmployeeAdditionalDirectDeposit]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalDirectDeposit'), 'exclude': lambda f: f is None }})
    r"""Add up to 19 direct deposit accounts in addition to the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with information provided on the request. GET API will not return direct deposit data."""  
    additional_rate: Optional[list[EmployeeAdditionalRate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalRate'), 'exclude': lambda f: f is None }})
    r"""Add Additional Rates."""  
    benefit_setup: Optional[EmployeeBenefitSetup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('benefitSetup'), 'exclude': lambda f: f is None }})
    r"""Add or update setup values used for employee benefits integration, insurance plan settings, and ACA reporting."""  
    birth_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('birthDate'), 'exclude': lambda f: f is None }})
    r"""Employee birthdate. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*."""  
    co_emp_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coEmpCode'), 'exclude': lambda f: f is None }})
    r"""Unique idenifier for SSO.<br  />Max length: 20"""  
    company_fein: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companyFEIN'), 'exclude': lambda f: f is None }})
    r"""Company FEIN as defined in Web Pay, applicable with GET requests only.<br  /> Max length: 20"""  
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companyName'), 'exclude': lambda f: f is None }})
    r"""Company name as defined in Web Pay, applicable with GET requests only.<br  /> Max length: 50"""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""Employee is paid in this currency. <br  />Max length: 30"""  
    custom_boolean_fields: Optional[list[EmployeeCustomBooleanFields]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customBooleanFields'), 'exclude': lambda f: f is None }})
    r"""Up to 8 custom fields of boolean (checkbox) type value."""  
    custom_date_fields: Optional[list[EmployeeCustomDateFields]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customDateFields'), 'exclude': lambda f: f is None }})
    r"""Up to 8 custom fields of the date type value."""  
    custom_drop_down_fields: Optional[list[EmployeeCustomDropDownFields]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customDropDownFields'), 'exclude': lambda f: f is None }})
    r"""Up to 8 custom fields of the dropdown type value."""  
    custom_number_fields: Optional[list[EmployeeCustomNumberFields]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customNumberFields'), 'exclude': lambda f: f is None }})
    r"""Up to 8 custom fields of numeric type value."""  
    custom_text_fields: Optional[list[EmployeeCustomTextFields]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customTextFields'), 'exclude': lambda f: f is None }})
    r"""Up to 8 custom fields of text type value."""  
    department_position: Optional[EmployeeDepartmentPosition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('departmentPosition'), 'exclude': lambda f: f is None }})
    r"""Add or update home department cost center, position, supervisor, reviewer, employment type, EEO class, pay settings, and union information."""  
    disability_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabilityDescription'), 'exclude': lambda f: f is None }})
    r"""Indicates if employee has disability status."""  
    emergency_contacts: Optional[list[EmployeeEmergencyContacts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emergencyContacts'), 'exclude': lambda f: f is None }})
    r"""Add or update Emergency Contacts."""  
    employee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employeeId'), 'exclude': lambda f: f is None }})
    r"""Leave blank to have Web Pay automatically assign the next available employee ID.<br  />Max length: 9"""  
    ethnicity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ethnicity'), 'exclude': lambda f: f is None }})
    r"""Employee ethnicity.<br  /> Max length: 10"""  
    federal_tax: Optional[EmployeeFederalTax] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('federalTax'), 'exclude': lambda f: f is None }})
    r"""Add or update federal tax amount type (taxCalculationCode), amount or percentage, filing status, and exemptions."""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName'), 'exclude': lambda f: f is None }})
    r"""Employee first name. <br  />Max length: 40"""  
    gender: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gender'), 'exclude': lambda f: f is None }})
    r"""Employee gender. Common values *M* (Male), *F* (Female). <br  />Max length: 1"""  
    home_address: Optional[EmployeeHomeAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homeAddress'), 'exclude': lambda f: f is None }})
    r"""Add or update employee's home address, personal phone numbers, and personal email."""  
    is_highly_compensated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isHighlyCompensated'), 'exclude': lambda f: f is None }})
    r"""Indicates if employee meets the highly compensated employee criteria."""  
    is_smoker: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSmoker'), 'exclude': lambda f: f is None }})
    r"""Indicates if employee is a smoker."""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName'), 'exclude': lambda f: f is None }})
    r"""Employee last name. <br  />Max length: 40"""  
    local_tax: Optional[list[EmployeeLocalTax]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localTax'), 'exclude': lambda f: f is None }})
    r"""Add, update, or delete local tax code, filing status, and exemptions including  PA-PSD taxes."""  
    main_direct_deposit: Optional[EmployeeMainDirectDeposit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mainDirectDeposit'), 'exclude': lambda f: f is None }})
    r"""Add the main direct deposit account. After deposits are made to any additional direct deposit accounts, the remaining net check is deposited in the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with what is provided on the request. GET API will not return direct deposit data."""  
    marital_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maritalStatus'), 'exclude': lambda f: f is None }})
    r"""Employee marital status. Common values *D (Divorced), M (Married), S (Single), W (Widowed)*. <br  />Max length: 10"""  
    middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('middleName'), 'exclude': lambda f: f is None }})
    r"""Employee middle name.<br  /> Max length: 20"""  
    non_primary_state_tax: Optional[EmployeeNonPrimaryStateTax] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonPrimaryStateTax'), 'exclude': lambda f: f is None }})
    r"""Add or update non-primary state tax code, amount type (taxCalculationCode), amount or percentage, filing status, exemptions, supplemental check (specialCheckCalc), and reciprocity code information."""  
    owner_percent: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownerPercent'), 'exclude': lambda f: f is None }})
    r"""Percentage of employee's ownership in the company, entered as a whole number. <br  /> Decimal (12,2)"""  
    preferred_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferredName'), 'exclude': lambda f: f is None }})
    r"""Employee preferred display name.<br  /> Max length: 20"""  
    primary_pay_rate: Optional[EmployeePrimaryPayRate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryPayRate'), 'exclude': lambda f: f is None }})
    r"""Add or update hourly or salary pay rate, effective date, and pay frequency."""  
    primary_state_tax: Optional[EmployeePrimaryStateTax] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryStateTax'), 'exclude': lambda f: f is None }})
    r"""Add or update primary state tax code, amount type (taxCalculationCode), amount or percentage, filing status, exemptions, and supplemental check (specialCheckCalc) information. Only one primary state is allowed. Sending an updated primary state will replace the current primary state."""  
    prior_last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priorLastName'), 'exclude': lambda f: f is None }})
    r"""Prior last name if applicable.<br  />Max length: 40"""  
    salutation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salutation'), 'exclude': lambda f: f is None }})
    r"""Employee preferred salutation. <br  />Max length: 10"""  
    ssn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssn'), 'exclude': lambda f: f is None }})
    r"""Employee social security number. Leave it blank if valid social security number not available. <br  />Max length: 11"""  
    status: Optional[EmployeeStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Add or update employee status, change reason, effective date, and adjusted seniority date. Note that companies that are still in Implementation cannot hire future employees."""  
    suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suffix'), 'exclude': lambda f: f is None }})
    r"""Employee name suffix. Common values are *Jr, Sr, II*.<br  />Max length: 30"""  
    tax_setup: Optional[EmployeeTaxSetup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxSetup'), 'exclude': lambda f: f is None }})
    r"""Add tax form, 1099 exempt reasons and notes, and 943 agricultural employee information. Once the employee receives wages, this information cannot be updated. Add or update SUI tax state, retirement plan, and statutory information."""  
    veteran_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('veteranDescription'), 'exclude': lambda f: f is None }})
    r"""Indicates if employee is a veteran."""  
    web_time: Optional[EmployeeWebTime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webTime'), 'exclude': lambda f: f is None }})
    r"""Add or update Web Time badge number and charge rate and synchronize Web Pay and Web Time employee data."""  
    work_address: Optional[EmployeeWorkAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workAddress'), 'exclude': lambda f: f is None }})
    r"""Add or update employee's work address, phone numbers, and email. Work Location drop down field is not included."""  
    work_eligibility: Optional[EmployeeWorkEligibility] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workEligibility'), 'exclude': lambda f: f is None }})
    r"""Add or update I-9 work authorization information."""  
    