<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class LegalEntityAssociation
{
    /**
     * The unique identifier of another legal entity with which the `legalEntityId` is associated. When the `legalEntityId` is associated to legal entities other than the current one, the response returns all the associations.
     * 
     * @var ?string $associatorId
     */
	#[\JMS\Serializer\Annotation\SerializedName('associatorId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $associatorId = null;
    
    /**
     * The legal entity type of associated legal entity. 
     * 
     * 
     * For example, **organization**, **soleProprietorship** or **individual**. 
     * 
     * @var ?string $entityType
     */
	#[\JMS\Serializer\Annotation\SerializedName('entityType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $entityType = null;
    
    /**
     * The individual's job title if the `type` is **uboThroughControl** or **signatory**.
     * 
     * @var ?string $jobTitle
     */
	#[\JMS\Serializer\Annotation\SerializedName('jobTitle')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $jobTitle = null;
    
    /**
     * The unique identifier of the associated [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id).
     * 
     * @var string $legalEntityId
     */
	#[\JMS\Serializer\Annotation\SerializedName('legalEntityId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $legalEntityId;
    
    /**
     * The name of the associated [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id).
     * 
     * 
     * - For **individual**, `name.firstName` and `name.lastName`.
     * - For **organization**, `legalName`.
     * - For **soleProprietorship**, `name`.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Defines the relationship of the legal entity to the current legal entity. 
     * 
     * 
     * For example, **uboThroughOwnership**, **uboThroughControl**, **signatory**, or **soleProprietorship**. 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\LegalEntityAssociationTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\LegalEntityAssociationTypeEnum>')]
    public LegalEntityAssociationTypeEnum $type;
    
	public function __construct()
	{
		$this->associatorId = null;
		$this->entityType = null;
		$this->jobTitle = null;
		$this->legalEntityId = "";
		$this->name = null;
		$this->type = \OpenAPI\OpenAPI\Models\Shared\LegalEntityAssociationTypeEnum::SIGNATORY;
	}
}
