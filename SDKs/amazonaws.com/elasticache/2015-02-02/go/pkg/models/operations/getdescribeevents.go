// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// GETDescribeEventsActionEnum
type GETDescribeEventsActionEnum string

const (
	GETDescribeEventsActionEnumDescribeEvents GETDescribeEventsActionEnum = "DescribeEvents"
)

func (e GETDescribeEventsActionEnum) ToPointer() *GETDescribeEventsActionEnum {
	return &e
}

func (e *GETDescribeEventsActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DescribeEvents":
		*e = GETDescribeEventsActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeEventsActionEnum: %v", v)
	}
}

// GETDescribeEventsSourceTypeEnum - The event source to retrieve events for. If no value is specified, all events are returned.
type GETDescribeEventsSourceTypeEnum string

const (
	GETDescribeEventsSourceTypeEnumCacheCluster        GETDescribeEventsSourceTypeEnum = "cache-cluster"
	GETDescribeEventsSourceTypeEnumCacheParameterGroup GETDescribeEventsSourceTypeEnum = "cache-parameter-group"
	GETDescribeEventsSourceTypeEnumCacheSecurityGroup  GETDescribeEventsSourceTypeEnum = "cache-security-group"
	GETDescribeEventsSourceTypeEnumCacheSubnetGroup    GETDescribeEventsSourceTypeEnum = "cache-subnet-group"
	GETDescribeEventsSourceTypeEnumReplicationGroup    GETDescribeEventsSourceTypeEnum = "replication-group"
	GETDescribeEventsSourceTypeEnumUser                GETDescribeEventsSourceTypeEnum = "user"
	GETDescribeEventsSourceTypeEnumUserGroup           GETDescribeEventsSourceTypeEnum = "user-group"
)

func (e GETDescribeEventsSourceTypeEnum) ToPointer() *GETDescribeEventsSourceTypeEnum {
	return &e
}

func (e *GETDescribeEventsSourceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cache-cluster":
		fallthrough
	case "cache-parameter-group":
		fallthrough
	case "cache-security-group":
		fallthrough
	case "cache-subnet-group":
		fallthrough
	case "replication-group":
		fallthrough
	case "user":
		fallthrough
	case "user-group":
		*e = GETDescribeEventsSourceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeEventsSourceTypeEnum: %v", v)
	}
}

// GETDescribeEventsVersionEnum
type GETDescribeEventsVersionEnum string

const (
	GETDescribeEventsVersionEnumTwoThousandAndFifteen0202 GETDescribeEventsVersionEnum = "2015-02-02"
)

func (e GETDescribeEventsVersionEnum) ToPointer() *GETDescribeEventsVersionEnum {
	return &e
}

func (e *GETDescribeEventsVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2015-02-02":
		*e = GETDescribeEventsVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeEventsVersionEnum: %v", v)
	}
}

type GETDescribeEventsRequest struct {
	Action GETDescribeEventsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The number of minutes worth of events to retrieve.
	Duration *int64 `queryParam:"style=form,explode=true,name=Duration"`
	// <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
	EndTime *time.Time `queryParam:"style=form,explode=true,name=EndTime"`
	// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
	MaxRecords *int64 `queryParam:"style=form,explode=true,name=MaxRecords"`
	// The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
	SourceIdentifier *string `queryParam:"style=form,explode=true,name=SourceIdentifier"`
	// The event source to retrieve events for. If no value is specified, all events are returned.
	SourceType *GETDescribeEventsSourceTypeEnum `queryParam:"style=form,explode=true,name=SourceType"`
	// <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
	StartTime         *time.Time                   `queryParam:"style=form,explode=true,name=StartTime"`
	Version           GETDescribeEventsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeEventsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
