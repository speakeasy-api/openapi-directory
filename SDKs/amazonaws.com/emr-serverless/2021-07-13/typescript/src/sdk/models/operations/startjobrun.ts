/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A configuration specification to be used to override existing configurations.
 */
export class StartJobRunRequestBodyConfigurationOverrides extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.Configuration })
  @Expose({ name: "applicationConfiguration" })
  @Type(() => shared.Configuration)
  applicationConfiguration?: shared.Configuration[];

  @SpeakeasyMetadata()
  @Expose({ name: "monitoringConfiguration" })
  @Type(() => shared.MonitoringConfiguration)
  monitoringConfiguration?: shared.MonitoringConfiguration;
}

/**
 * The driver that the job runs on.
 */
export class StartJobRunRequestBodyJobDriver extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "hive" })
  @Type(() => shared.Hive)
  hive?: shared.Hive;

  @SpeakeasyMetadata()
  @Expose({ name: "sparkSubmit" })
  @Type(() => shared.SparkSubmit)
  sparkSubmit?: shared.SparkSubmit;
}

export class StartJobRunRequestBody extends SpeakeasyBase {
  /**
   * The client idempotency token of the job run to start. Its value must be unique for each request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken: string;

  /**
   * A configuration specification to be used to override existing configurations.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "configurationOverrides" })
  @Type(() => StartJobRunRequestBodyConfigurationOverrides)
  configurationOverrides?: StartJobRunRequestBodyConfigurationOverrides;

  /**
   * The execution role ARN for the job run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "executionRoleArn" })
  executionRoleArn: string;

  /**
   * The maximum duration for the job run to run. If the job run runs beyond this duration, it will be automatically cancelled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "executionTimeoutMinutes" })
  executionTimeoutMinutes?: number;

  /**
   * The driver that the job runs on.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jobDriver" })
  @Type(() => StartJobRunRequestBodyJobDriver)
  jobDriver?: StartJobRunRequestBodyJobDriver;

  /**
   * The optional job run name. This doesn't have to be unique.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The tags assigned to the job run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class StartJobRunRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: StartJobRunRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The ID of the application on which to run the job.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=applicationId",
  })
  applicationId: string;
}

export class StartJobRunResponse extends SpeakeasyBase {
  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  startJobRunResponse?: shared.StartJobRunResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
