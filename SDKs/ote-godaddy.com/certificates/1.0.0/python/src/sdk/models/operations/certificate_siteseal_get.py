"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import certificatesiteseal as shared_certificatesiteseal
from ..shared import error as shared_error
from enum import Enum
from typing import Optional

class CertificateSitesealGetThemeEnum(str, Enum):
    r"""This value represents the visual theme of the seal. If seal doesn't exist, default values are used if params not present. If seal does exist, default values will not be used to update unless params present."""
    DARK = 'DARK'
    LIGHT = 'LIGHT'


@dataclasses.dataclass
class CertificateSitesealGetRequest:
    
    certificate_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'certificateId', 'style': 'simple', 'explode': False }})
    r"""Certificate id"""  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'locale', 'style': 'form', 'explode': True }})
    r"""Determine locale for text displayed in seal image and verification page. If seal doesn't exist, default values are used if params not present. If seal does exist, default values will not be used to update unless params present."""  
    theme: Optional[CertificateSitesealGetThemeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'theme', 'style': 'form', 'explode': True }})
    r"""This value represents the visual theme of the seal. If seal doesn't exist, default values are used if params not present. If seal does exist, default values will not be used to update unless params present."""  
    

@dataclasses.dataclass
class CertificateSitesealGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    certificate_site_seal: Optional[shared_certificatesiteseal.CertificateSiteSeal] = dataclasses.field(default=None)
    r"""Site seal retrieved"""  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Request was malformed"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    