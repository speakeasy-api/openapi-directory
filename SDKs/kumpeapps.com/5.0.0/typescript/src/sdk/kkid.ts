/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * KKid API Functions
 *
 * @see {@link https://github.com/kumpeapps/kkid}
 */
export class KKid {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * returns allowance balance and allowance transactions
   *
   * @remarks
   * By passing in the appropriate options, you can view allowance balance and allowance transactions for a given user provided that they are within the masterID account of the authenticated user.
   *
   */
  kkidAllowanceGet(
    req: operations.KkidAllowanceGetRequest,
    security: operations.KkidAllowanceGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidAllowanceGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidAllowanceGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/allowance";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.KkidAllowanceGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidAllowanceGetResponse =
        new operations.KkidAllowanceGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.allowance = utils.objectToClass(
              httpRes?.data,
              shared.Allowance
            );
          }
          break;
        case [202, 400, 401, 403].includes(httpRes?.status):
          break;
        case httpRes?.status == 206:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nodata = utils.objectToClass(httpRes?.data, shared.Nodata);
          }
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFive = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFive
            );
          }
          break;
        case httpRes?.status == 412:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndTwelve = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndTwelve
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * adds new allowance transaction to kidUserID
   *
   * @remarks
   * By passing in the appropriate options, you can add an allowance transaction to a given user.
   *
   */
  kkidAllowancePost(
    req: operations.KkidAllowancePostRequest,
    security: operations.KkidAllowancePostSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidAllowancePostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidAllowancePostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/allowance";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.KkidAllowancePostSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidAllowancePostResponse =
        new operations.KkidAllowancePostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.success = utils.objectToClass(httpRes?.data, shared.Success);
          }
          break;
        case [202, 400, 401, 403].includes(httpRes?.status):
          break;
        case httpRes?.status == 206:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nodata = utils.objectToClass(httpRes?.data, shared.Nodata);
          }
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFive = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFive
            );
          }
          break;
        case httpRes?.status == 412:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndTwelve = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndTwelve
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * subscribes/unsubscribes/registers for apns push notifications
   */
  kkidApnsPost(
    req: operations.KkidApnsPostRequest,
    security: operations.KkidApnsPostSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidApnsPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidApnsPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/apns";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.KkidApnsPostSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidApnsPostResponse =
        new operations.KkidApnsPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.success = utils.objectToClass(httpRes?.data, shared.Success);
          }
          break;
        case [202, 400, 401, 403].includes(httpRes?.status):
          break;
        case httpRes?.status == 206:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nodata = utils.objectToClass(httpRes?.data, shared.Nodata);
          }
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFive = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFive
            );
          }
          break;
        case httpRes?.status == 412:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndTwelve = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndTwelve
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * deletes chore for given chore id
   *
   * @remarks
   * By passing in the appropriate options, you can delete a chore for the given chore id under authenticated user's master account
   *
   */
  kkidChorelistDelete(
    req: operations.KkidChorelistDeleteRequest,
    security: operations.KkidChorelistDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidChorelistDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidChorelistDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/chorelist";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.KkidChorelistDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidChorelistDeleteResponse =
        new operations.KkidChorelistDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.success = utils.objectToClass(httpRes?.data, shared.Success);
          }
          break;
        case [202, 400, 401, 403, 409].includes(httpRes?.status):
          break;
        case httpRes?.status == 206:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nodata = utils.objectToClass(httpRes?.data, shared.Nodata);
          }
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFive = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFive
            );
          }
          break;
        case httpRes?.status == 412:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndTwelve = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndTwelve
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns list of chores for given user
   *
   * @remarks
   * By passing in the appropriate options, you can search for
   * chores assigned to a given user within the authenticated user's master account
   *
   */
  kkidChorelistGet(
    req: operations.KkidChorelistGetRequest,
    security: operations.KkidChorelistGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidChorelistGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidChorelistGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/chorelist";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.KkidChorelistGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidChorelistGetResponse =
        new operations.KkidChorelistGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chorelist = utils.objectToClass(
              httpRes?.data,
              shared.Chorelist
            );
          }
          break;
        case [202, 400, 401, 403].includes(httpRes?.status):
          break;
        case httpRes?.status == 206:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nodata = utils.objectToClass(httpRes?.data, shared.Nodata);
          }
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFive = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFive
            );
          }
          break;
        case httpRes?.status == 412:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndTwelve = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndTwelve
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * adds chore for given user
   *
   * @remarks
   * By passing in the appropriate options, you can add a chore to given kid username under authenticated user's master account
   *
   */
  kkidChorelistPost(
    req: operations.KkidChorelistPostRequest,
    security: operations.KkidChorelistPostSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidChorelistPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidChorelistPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/chorelist";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.KkidChorelistPostSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidChorelistPostResponse =
        new operations.KkidChorelistPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.success = utils.objectToClass(httpRes?.data, shared.Success);
          }
          break;
        case [202, 400, 401, 403, 409].includes(httpRes?.status):
          break;
        case httpRes?.status == 206:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nodata = utils.objectToClass(httpRes?.data, shared.Nodata);
          }
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFive = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFive
            );
          }
          break;
        case httpRes?.status == 412:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndTwelve = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndTwelve
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * updates chore for given chore id
   *
   * @remarks
   * By passing in the appropriate options, you can update the fields of a specific core within the authenticated user's master account
   *
   */
  kkidChorelistPut(
    req: operations.KkidChorelistPutRequest,
    security: operations.KkidChorelistPutSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidChorelistPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidChorelistPutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/chorelist";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.KkidChorelistPutSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidChorelistPutResponse =
        new operations.KkidChorelistPutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.success = utils.objectToClass(httpRes?.data, shared.Success);
          }
          break;
        case [202, 400, 401, 403].includes(httpRes?.status):
          break;
        case httpRes?.status == 206:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nodata = utils.objectToClass(httpRes?.data, shared.Nodata);
          }
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFive = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFive
            );
          }
          break;
        case httpRes?.status == 412:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndTwelve = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndTwelve
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * adds new master user account
   *
   * @remarks
   * By passing in the appropriate variables this method creates a new user with master account access. (The use of this method is restricted to Superusers ONLY)
   *
   */
  kkidMasteruserPost(
    req: operations.KkidMasteruserPostRequest,
    security: operations.KkidMasteruserPostSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidMasteruserPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidMasteruserPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/masteruser";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.KkidMasteruserPostSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidMasteruserPostResponse =
        new operations.KkidMasteruserPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.addUserResponse = utils.objectToClass(
              httpRes?.data,
              shared.AddUserResponse
            );
          }
          break;
        case [202, 409].includes(httpRes?.status):
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFive = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFive
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create Share Link
   *
   * @remarks
   * Create share link
   */
  kkidShareGet(
    req: operations.KkidShareGetRequest,
    security: operations.KkidShareGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidShareGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidShareGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/share";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.KkidShareGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidShareGetResponse =
        new operations.KkidShareGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.twoHundredAndOneShare = utils.objectToClass(
              httpRes?.data,
              shared.TwoHundredAndOneShare
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets user info
   *
   * @remarks
   * Gets user info for authenticated user
   */
  kkidUserGet(
    req: operations.KkidUserGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidUserGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidUserGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/user";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidUserGetResponse =
        new operations.KkidUserGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userlist = utils.objectToClass(httpRes?.data, shared.Userlist);
          }
          break;
      }

      return res;
    });
  }

  /**
   * deletes user
   *
   * @remarks
   * By passing in the appropriate variables this method deletes the specified user. (This function is restricted to Superusers ONLY)
   *
   */
  kkidUserlistDelete(
    req: operations.KkidUserlistDeleteRequest,
    security: operations.KkidUserlistDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidUserlistDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidUserlistDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/userlist";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.KkidUserlistDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidUserlistDeleteResponse =
        new operations.KkidUserlistDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 202, 409].includes(httpRes?.status):
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFive = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFive
            );
          }
          break;
        case httpRes?.status == 412:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndTwelve = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndTwelve
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns list of users
   *
   * @remarks
   * By passing in the appropriate options, you can search for
   * users within the authenticated user's master account
   *
   */
  kkidUserlistGet(
    req: operations.KkidUserlistGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidUserlistGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidUserlistGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/userlist";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidUserlistGetResponse =
        new operations.KkidUserlistGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userlist = utils.objectToClass(httpRes?.data, shared.Userlist);
          }
          break;
        case [202, 400, 401, 403].includes(httpRes?.status):
          break;
        case httpRes?.status == 204:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nodata = utils.objectToClass(httpRes?.data, shared.Nodata);
          }
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFive = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFive
            );
          }
          break;
        case httpRes?.status == 412:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndTwelve = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndTwelve
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * adds new child user
   *
   * @remarks
   * By passing in the appropriate variables this method creates a new user and assigns it to the master account of the authenticated user. By default this user will have chores and allowance access.
   *
   */
  kkidUserlistPost(
    req: operations.KkidUserlistPostRequest,
    security: operations.KkidUserlistPostSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidUserlistPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidUserlistPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/userlist";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.KkidUserlistPostSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidUserlistPostResponse =
        new operations.KkidUserlistPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.addUserResponse = utils.objectToClass(
              httpRes?.data,
              shared.AddUserResponse
            );
          }
          break;
        case [202, 409].includes(httpRes?.status):
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFive = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFive
            );
          }
          break;
        case httpRes?.status == 412:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndTwelve = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndTwelve
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * updates user
   *
   * @remarks
   * By passing in the appropriate variables this method updates the user's profile
   *
   */
  kkidUserlistPut(
    req: operations.KkidUserlistPutRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidUserlistPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidUserlistPutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/userlist";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidUserlistPutResponse =
        new operations.KkidUserlistPutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.addUserResponse = utils.objectToClass(
              httpRes?.data,
              shared.AddUserResponse
            );
          }
          break;
        case [202, 409].includes(httpRes?.status):
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFive = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFive
            );
          }
          break;
        case httpRes?.status == 412:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndTwelve = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndTwelve
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete item from wishlist
   */
  kkidWishlistDelete(
    req: operations.KkidWishlistDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidWishlistDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidWishlistDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/wishlist";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidWishlistDeleteResponse =
        new operations.KkidWishlistDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.success = utils.objectToClass(httpRes?.data, shared.Success);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get list of wishlist items
   */
  kkidWishlistGet(
    req: operations.KkidWishlistGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidWishlistGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidWishlistGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/wishlist";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidWishlistGetResponse =
        new operations.KkidWishlistGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.wishlist = utils.objectToClass(httpRes?.data, shared.Wishlist);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add item to kid's wishlist
   */
  kkidWishlistPost(
    req: operations.KkidWishlistPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidWishlistPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidWishlistPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/wishlist";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidWishlistPostResponse =
        new operations.KkidWishlistPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.success = utils.objectToClass(httpRes?.data, shared.Success);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update item on kid's wishlist
   */
  kkidWishlistPut(
    req: operations.KkidWishlistPutRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.KkidWishlistPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KkidWishlistPutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/kkid/wishlist";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KkidWishlistPutResponse =
        new operations.KkidWishlistPutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.success = utils.objectToClass(httpRes?.data, shared.Success);
          }
          break;
      }

      return res;
    });
  }
}
