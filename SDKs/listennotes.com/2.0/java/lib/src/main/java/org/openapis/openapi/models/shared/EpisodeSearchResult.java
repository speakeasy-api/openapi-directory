/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * EpisodeSearchResult - When **type** is *episode*.
 */
public class EpisodeSearchResult {
    /**
     * Audio url of this episode, which can be played directly.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio")
    public String audio;

    public EpisodeSearchResult withAudio(String audio) {
        this.audio = audio;
        return this;
    }
    
    /**
     * Audio length of this episode. In seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio_length_sec")
    public Long audioLengthSec;

    public EpisodeSearchResult withAudioLengthSec(Long audioLengthSec) {
        this.audioLengthSec = audioLengthSec;
        return this;
    }
    
    /**
     * Highlighted segment of this episode's description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description_highlighted")
    public String descriptionHighlighted;

    public EpisodeSearchResult withDescriptionHighlighted(String descriptionHighlighted) {
        this.descriptionHighlighted = descriptionHighlighted;
        return this;
    }
    
    /**
     * Plain text of this episode's description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description_original")
    public String descriptionOriginal;

    public EpisodeSearchResult withDescriptionOriginal(String descriptionOriginal) {
        this.descriptionOriginal = descriptionOriginal;
        return this;
    }
    
    /**
     * Whether this podcast contains explicit language.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("explicit_content")
    public Boolean explicitContent;

    public EpisodeSearchResult withExplicitContent(Boolean explicitContent) {
        this.explicitContent = explicitContent;
        return this;
    }
    
    /**
     * Episode id, which can be used to further fetch detailed episode metadata via `GET /episodes/{id}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public EpisodeSearchResult withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Image url for this episode.
     * If an episode doesn't have its own image, then this field would be the url of the podcast artwork image.
     * If you are using PRO/ENTERPRISE plan, then it's
     * a high resolution image (1400x1400). If you are using FREE plan, then it's the same as **thumbnail**,
     * low resolution image (300x300).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public String image;

    public EpisodeSearchResult withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * iTunes id for this podcast.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itunes_id")
    public Long itunesId;

    public EpisodeSearchResult withItunesId(Long itunesId) {
        this.itunesId = itunesId;
        return this;
    }
    
    /**
     * Web link of this episode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("link")
    public String link;

    public EpisodeSearchResult withLink(String link) {
        this.link = link;
        return this;
    }
    
    /**
     * The url of this episode on [ListenNotes.com](https://www.ListenNotes.com).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listennotes_url")
    public String listennotesUrl;

    public EpisodeSearchResult withListennotesUrl(String listennotesUrl) {
        this.listennotesUrl = listennotesUrl;
        return this;
    }
    
    /**
     * The podcast that this episode belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("podcast")
    public EpisodeSearchResultPodcast podcast;

    public EpisodeSearchResult withPodcast(EpisodeSearchResultPodcast podcast) {
        this.podcast = podcast;
        return this;
    }
    
    /**
     * Published date for this episode. In millisecond.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pub_date_ms")
    public Long pubDateMs;

    public EpisodeSearchResult withPubDateMs(Long pubDateMs) {
        this.pubDateMs = pubDateMs;
        return this;
    }
    
    /**
     * RSS url of this podcast. This field is available only in the PRO/ENTERPRISE plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rss")
    public String rss;

    public EpisodeSearchResult withRss(String rss) {
        this.rss = rss;
        return this;
    }
    
    /**
     * Thumbnail image (300x300) url for this episode.
     * If an episode doesn't have its own image, then this field would be the url of the podcast artwork thumbnail image.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnail")
    public String thumbnail;

    public EpisodeSearchResult withThumbnail(String thumbnail) {
        this.thumbnail = thumbnail;
        return this;
    }
    
    /**
     * Highlighted segment of this episode's title
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title_highlighted")
    public String titleHighlighted;

    public EpisodeSearchResult withTitleHighlighted(String titleHighlighted) {
        this.titleHighlighted = titleHighlighted;
        return this;
    }
    
    /**
     * Plain text of this episode' title
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title_original")
    public String titleOriginal;

    public EpisodeSearchResult withTitleOriginal(String titleOriginal) {
        this.titleOriginal = titleOriginal;
        return this;
    }
    
    /**
     * Up to 2 highlighted segments of the audio transcript of this episode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcripts_highlighted")
    public String[] transcriptsHighlighted;

    public EpisodeSearchResult withTranscriptsHighlighted(String[] transcriptsHighlighted) {
        this.transcriptsHighlighted = transcriptsHighlighted;
        return this;
    }
    
    public EpisodeSearchResult(){}
}
