"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import nestedrackgroup as shared_nestedrackgroup
from ..shared import nestedrackrole as shared_nestedrackrole
from ..shared import nestedsite as shared_nestedsite
from ..shared import nestedtenant as shared_nestedtenant
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class RackOuterUnitLabelEnum(str, Enum):
    MILLIMETERS = 'Millimeters'
    INCHES = 'Inches'

class RackOuterUnitValueEnum(str, Enum):
    MM = 'mm'
    IN = 'in'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RackOuterUnit:
    
    label: RackOuterUnitLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: RackOuterUnitValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    
class RackStatusLabelEnum(str, Enum):
    RESERVED = 'Reserved'
    AVAILABLE = 'Available'
    PLANNED = 'Planned'
    ACTIVE = 'Active'
    DEPRECATED = 'Deprecated'

class RackStatusValueEnum(str, Enum):
    RESERVED = 'reserved'
    AVAILABLE = 'available'
    PLANNED = 'planned'
    ACTIVE = 'active'
    DEPRECATED = 'deprecated'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RackStatus:
    
    label: RackStatusLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: RackStatusValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    
class RackTypeLabelEnum(str, Enum):
    TWO_POST_FRAME = '2-post frame'
    FOUR_POST_FRAME = '4-post frame'
    FOUR_POST_CABINET = '4-post cabinet'
    WALL_MOUNTED_FRAME = 'Wall-mounted frame'
    WALL_MOUNTED_CABINET = 'Wall-mounted cabinet'

class RackTypeValueEnum(str, Enum):
    TWO_POST_FRAME = '2-post-frame'
    FOUR_POST_FRAME = '4-post-frame'
    FOUR_POST_CABINET = '4-post-cabinet'
    WALL_FRAME = 'wall-frame'
    WALL_CABINET = 'wall-cabinet'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RackType:
    
    label: RackTypeLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: RackTypeValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    
class RackWidthLabelEnum(str, Enum):
    TEN_INCHES = '10 inches'
    NINETEEN_INCHES = '19 inches'
    TWENTY_ONE_INCHES = '21 inches'
    TWENTY_THREE_INCHES = '23 inches'

class RackWidthValueEnum(str, Enum):
    TEN = '10'
    NINETEEN = '19'
    TWENTY_ONE = '21'
    TWENTY_THREE = '23'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RackWidth:
    
    label: RackWidthLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: RackWidthValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Rack:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    site: shared_nestedsite.NestedSite = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site') }})  
    asset_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asset_tag'), 'exclude': lambda f: f is None }})
    r"""A unique tag used to identify this rack"""  
    comments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})  
    created: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields'), 'exclude': lambda f: f is None }})  
    desc_units: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desc_units'), 'exclude': lambda f: f is None }})
    r"""Units are numbered top-to-bottom"""  
    device_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_count'), 'exclude': lambda f: f is None }})  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name'), 'exclude': lambda f: f is None }})  
    facility_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('facility_id'), 'exclude': lambda f: f is None }})
    r"""Locally-assigned identifier"""  
    group: Optional[shared_nestedrackgroup.NestedRackGroup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    last_updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_updated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    outer_depth: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outer_depth'), 'exclude': lambda f: f is None }})
    r"""Outer dimension of rack (depth)"""  
    outer_unit: Optional[RackOuterUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outer_unit'), 'exclude': lambda f: f is None }})  
    outer_width: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outer_width'), 'exclude': lambda f: f is None }})
    r"""Outer dimension of rack (width)"""  
    powerfeed_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('powerfeed_count'), 'exclude': lambda f: f is None }})  
    role: Optional[shared_nestedrackrole.NestedRackRole] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})  
    status: Optional[RackStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    tenant: Optional[shared_nestedtenant.NestedTenant] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenant'), 'exclude': lambda f: f is None }})  
    type: Optional[RackType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    u_height: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('u_height'), 'exclude': lambda f: f is None }})
    r"""Height in rack units"""  
    width: Optional[RackWidth] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})  
    