// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DetectFacesXAmzTargetEnum
type DetectFacesXAmzTargetEnum string

const (
	DetectFacesXAmzTargetEnumRekognitionServiceDetectFaces DetectFacesXAmzTargetEnum = "RekognitionService.DetectFaces"
)

func (e DetectFacesXAmzTargetEnum) ToPointer() *DetectFacesXAmzTargetEnum {
	return &e
}

func (e *DetectFacesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RekognitionService.DetectFaces":
		*e = DetectFacesXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DetectFacesXAmzTargetEnum: %v", v)
	}
}

type DetectFacesRequest struct {
	DetectFacesRequest shared.DetectFacesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm      *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget         DetectFacesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DetectFacesResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// Success
	DetectFacesResponse *shared.DetectFacesResponse
	// ImageTooLargeException
	ImageTooLargeException interface{}
	// InternalServerError
	InternalServerError interface{}
	// InvalidImageFormatException
	InvalidImageFormatException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidS3ObjectException
	InvalidS3ObjectException interface{}
	// ProvisionedThroughputExceededException
	ProvisionedThroughputExceededException interface{}
	StatusCode                             int
	RawResponse                            *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
