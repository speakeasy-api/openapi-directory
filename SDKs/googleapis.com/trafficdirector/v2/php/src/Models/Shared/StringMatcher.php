<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * StringMatcher - Specifies the way to match a string. [#next-free-field: 7]
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class StringMatcher
{
    /**
     * The input string must match exactly the string specified here. Examples: * *abc* only matches the value *abc*.
     * 
     * @var ?string $exact
     */
	#[\JMS\Serializer\Annotation\SerializedName('exact')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $exact = null;
    
    /**
     * If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no effect for the safe_regex match. For example, the matcher *data* will match both input string *Data* and *data* if set to true.
     * 
     * @var ?bool $ignoreCase
     */
	#[\JMS\Serializer\Annotation\SerializedName('ignoreCase')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $ignoreCase = null;
    
    /**
     * The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * *abc* matches the value *abc.xyz*
     * 
     * @var ?string $prefix
     */
	#[\JMS\Serializer\Annotation\SerializedName('prefix')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $prefix = null;
    
    /**
     * The input string must match the regular expression specified here. The regex grammar is defined `here `_. Examples: * The regex ``\d{3}`` matches the value *123* * The regex ``\d{3}`` does not match the value *1234* * The regex ``\d{3}`` does not match the value *123.456* .. attention:: This field has been deprecated in favor of `safe_regex` as it is not safe for use with untrusted input in all cases.
     * 
     * @var ?string $regex
     */
	#[\JMS\Serializer\Annotation\SerializedName('regex')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $regex = null;
    
    /**
     * A regex matcher designed for safety when used with untrusted input.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RegexMatcher $safeRegex
     */
	#[\JMS\Serializer\Annotation\SerializedName('safeRegex')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\RegexMatcher')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RegexMatcher $safeRegex = null;
    
    /**
     * The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * *abc* matches the value *xyz.abc*
     * 
     * @var ?string $suffix
     */
	#[\JMS\Serializer\Annotation\SerializedName('suffix')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $suffix = null;
    
	public function __construct()
	{
		$this->exact = null;
		$this->ignoreCase = null;
		$this->prefix = null;
		$this->regex = null;
		$this->safeRegex = null;
		$this->suffix = null;
	}
}
