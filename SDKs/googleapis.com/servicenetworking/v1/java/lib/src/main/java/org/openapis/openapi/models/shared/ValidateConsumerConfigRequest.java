/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ValidateConsumerConfigRequest {
    /**
     * Optional. The IAM permission check determines whether the consumer project has 'servicenetworking.services.use' permission or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkServiceNetworkingUsePermission")
    public Boolean checkServiceNetworkingUsePermission;

    public ValidateConsumerConfigRequest withCheckServiceNetworkingUsePermission(Boolean checkServiceNetworkingUsePermission) {
        this.checkServiceNetworkingUsePermission = checkServiceNetworkingUsePermission;
        return this;
    }
    
    /**
     * Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is a project number, as in '12345' {network} is network name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumerNetwork")
    public String consumerNetwork;

    public ValidateConsumerConfigRequest withConsumerNetwork(String consumerNetwork) {
        this.consumerNetwork = consumerNetwork;
        return this;
    }
    
    /**
     * Represents a consumer project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumerProject")
    public ConsumerProject consumerProject;

    public ValidateConsumerConfigRequest withConsumerProject(ConsumerProject consumerProject) {
        this.consumerProject = consumerProject;
        return this;
    }
    
    /**
     * Represents a range reservation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rangeReservation")
    public RangeReservation rangeReservation;

    public ValidateConsumerConfigRequest withRangeReservation(RangeReservation rangeReservation) {
        this.rangeReservation = rangeReservation;
        return this;
    }
    
    /**
     * The validations will be performed in the order listed in the ValidationError enum. The first failure will return. If a validation is not requested, then the next one will be performed. SERVICE_NETWORKING_NOT_ENABLED and NETWORK_NOT_PEERED checks are performed for all requests where validation is requested. NETWORK_NOT_FOUND and NETWORK_DISCONNECTED checks are done for requests that have validate_network set to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validateNetwork")
    public Boolean validateNetwork;

    public ValidateConsumerConfigRequest withValidateNetwork(Boolean validateNetwork) {
        this.validateNetwork = validateNetwork;
        return this;
    }
    
    public ValidateConsumerConfigRequest(){}
}
