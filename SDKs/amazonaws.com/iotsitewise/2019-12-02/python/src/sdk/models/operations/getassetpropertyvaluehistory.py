"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getassetpropertyvaluehistoryresponse as shared_getassetpropertyvaluehistoryresponse
from ..shared import quality_enum as shared_quality_enum
from datetime import datetime
from enum import Enum
from typing import Any, Optional

class GetAssetPropertyValueHistoryTimeOrderingEnum(str, Enum):
    r"""<p>The chronological sorting order of the requested information.</p> <p>Default: <code>ASCENDING</code> </p>"""
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


@dataclasses.dataclass
class GetAssetPropertyValueHistoryRequest:
    
    asset_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'assetId', 'style': 'form', 'explode': True }})
    r"""The ID of the asset."""  
    end_date: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endDate', 'style': 'form', 'explode': True }})
    r"""The inclusive end of the range from which to query historical data, expressed in seconds in Unix epoch time."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""<p>The maximum number of results to return for each paginated request.</p> <p>Default: 100</p>"""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""The token to be used for the next set of paginated results."""  
    property_alias: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'propertyAlias', 'style': 'form', 'explode': True }})
    r"""The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href=\\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html\\">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>."""  
    property_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'propertyId', 'style': 'form', 'explode': True }})
    r"""The ID of the asset property."""  
    qualities: Optional[list[shared_quality_enum.QualityEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'qualities', 'style': 'form', 'explode': True }})
    r"""The quality by which to filter asset data."""  
    start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startDate', 'style': 'form', 'explode': True }})
    r"""The exclusive start of the range from which to query historical data, expressed in seconds in Unix epoch time."""  
    time_ordering: Optional[GetAssetPropertyValueHistoryTimeOrderingEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timeOrdering', 'style': 'form', 'explode': True }})
    r"""<p>The chronological sorting order of the requested information.</p> <p>Default: <code>ASCENDING</code> </p>"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetAssetPropertyValueHistoryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_asset_property_value_history_response: Optional[shared_getassetpropertyvaluehistoryresponse.GetAssetPropertyValueHistoryResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    