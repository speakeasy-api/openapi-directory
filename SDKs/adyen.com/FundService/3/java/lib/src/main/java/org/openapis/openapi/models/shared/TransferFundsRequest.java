/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class TransferFundsRequest {
    @JsonProperty("amount")
    public Amount amount;

    public TransferFundsRequest withAmount(Amount amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * The code of the account to which the funds are to be credited.
     * &gt;The state of the Account Holder of this account must be Active.
     */
    @JsonProperty("destinationAccountCode")
    public String destinationAccountCode;

    public TransferFundsRequest withDestinationAccountCode(String destinationAccountCode) {
        this.destinationAccountCode = destinationAccountCode;
        return this;
    }
    
    /**
     * A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantReference")
    public String merchantReference;

    public TransferFundsRequest withMerchantReference(String merchantReference) {
        this.merchantReference = merchantReference;
        return this;
    }
    
    /**
     * The code of the account from which the funds are to be debited.
     * &gt;The state of the Account Holder of this account must be Active and allow payouts.
     */
    @JsonProperty("sourceAccountCode")
    public String sourceAccountCode;

    public TransferFundsRequest withSourceAccountCode(String sourceAccountCode) {
        this.sourceAccountCode = sourceAccountCode;
        return this;
    }
    
    /**
     * The code related to the type of transfer being performed.
     * &gt;The permitted codes differ for each platform account and are defined in their service level agreement.
     */
    @JsonProperty("transferCode")
    public String transferCode;

    public TransferFundsRequest withTransferCode(String transferCode) {
        this.transferCode = transferCode;
        return this;
    }
    
    public TransferFundsRequest(@JsonProperty("amount") Amount amount, @JsonProperty("destinationAccountCode") String destinationAccountCode, @JsonProperty("sourceAccountCode") String sourceAccountCode, @JsonProperty("transferCode") String transferCode) {
        this.amount = amount;
        this.destinationAccountCode = destinationAccountCode;
        this.sourceAccountCode = sourceAccountCode;
        this.transferCode = transferCode;
  }
}
