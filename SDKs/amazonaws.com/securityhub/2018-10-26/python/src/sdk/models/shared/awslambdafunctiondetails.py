"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awslambdafunctioncode as shared_awslambdafunctioncode
from ..shared import awslambdafunctiondeadletterconfig as shared_awslambdafunctiondeadletterconfig
from ..shared import awslambdafunctionenvironment as shared_awslambdafunctionenvironment
from ..shared import awslambdafunctionlayer as shared_awslambdafunctionlayer
from ..shared import awslambdafunctiontracingconfig as shared_awslambdafunctiontracingconfig
from ..shared import awslambdafunctionvpcconfig as shared_awslambdafunctionvpcconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsLambdaFunctionDetails:
    r"""Details about an Lambda function's configuration."""
    
    architectures: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Architectures'), 'exclude': lambda f: f is None }})  
    code: Optional[shared_awslambdafunctioncode.AwsLambdaFunctionCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Code'), 'exclude': lambda f: f is None }})  
    code_sha256: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CodeSha256'), 'exclude': lambda f: f is None }})  
    dead_letter_config: Optional[shared_awslambdafunctiondeadletterconfig.AwsLambdaFunctionDeadLetterConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeadLetterConfig'), 'exclude': lambda f: f is None }})  
    environment: Optional[shared_awslambdafunctionenvironment.AwsLambdaFunctionEnvironment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Environment'), 'exclude': lambda f: f is None }})  
    function_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FunctionName'), 'exclude': lambda f: f is None }})  
    handler: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Handler'), 'exclude': lambda f: f is None }})  
    kms_key_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyArn'), 'exclude': lambda f: f is None }})  
    last_modified: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModified'), 'exclude': lambda f: f is None }})  
    layers: Optional[list[shared_awslambdafunctionlayer.AwsLambdaFunctionLayer]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Layers'), 'exclude': lambda f: f is None }})  
    master_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MasterArn'), 'exclude': lambda f: f is None }})  
    memory_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MemorySize'), 'exclude': lambda f: f is None }})  
    package_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PackageType'), 'exclude': lambda f: f is None }})  
    revision_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RevisionId'), 'exclude': lambda f: f is None }})  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Role'), 'exclude': lambda f: f is None }})  
    runtime: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Runtime'), 'exclude': lambda f: f is None }})  
    timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Timeout'), 'exclude': lambda f: f is None }})  
    tracing_config: Optional[shared_awslambdafunctiontracingconfig.AwsLambdaFunctionTracingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TracingConfig'), 'exclude': lambda f: f is None }})  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Version'), 'exclude': lambda f: f is None }})  
    vpc_config: Optional[shared_awslambdafunctionvpcconfig.AwsLambdaFunctionVpcConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcConfig'), 'exclude': lambda f: f is None }})  
    