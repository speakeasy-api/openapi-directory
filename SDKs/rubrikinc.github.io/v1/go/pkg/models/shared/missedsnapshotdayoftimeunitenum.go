// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MissedSnapshotDayOfTimeUnitEnum - Units for missed snapshot dayOfTime.
type MissedSnapshotDayOfTimeUnitEnum string

const (
	MissedSnapshotDayOfTimeUnitEnumMonday    MissedSnapshotDayOfTimeUnitEnum = "Monday"
	MissedSnapshotDayOfTimeUnitEnumTuesday   MissedSnapshotDayOfTimeUnitEnum = "Tuesday"
	MissedSnapshotDayOfTimeUnitEnumWednesday MissedSnapshotDayOfTimeUnitEnum = "Wednesday"
	MissedSnapshotDayOfTimeUnitEnumThursday  MissedSnapshotDayOfTimeUnitEnum = "Thursday"
	MissedSnapshotDayOfTimeUnitEnumFriday    MissedSnapshotDayOfTimeUnitEnum = "Friday"
	MissedSnapshotDayOfTimeUnitEnumSaturday  MissedSnapshotDayOfTimeUnitEnum = "Saturday"
	MissedSnapshotDayOfTimeUnitEnumSunday    MissedSnapshotDayOfTimeUnitEnum = "Sunday"
	MissedSnapshotDayOfTimeUnitEnumFirstDay  MissedSnapshotDayOfTimeUnitEnum = "FirstDay"
	MissedSnapshotDayOfTimeUnitEnumFifteenth MissedSnapshotDayOfTimeUnitEnum = "Fifteenth"
	MissedSnapshotDayOfTimeUnitEnumLastDay   MissedSnapshotDayOfTimeUnitEnum = "LastDay"
)

func (e MissedSnapshotDayOfTimeUnitEnum) ToPointer() *MissedSnapshotDayOfTimeUnitEnum {
	return &e
}

func (e *MissedSnapshotDayOfTimeUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Monday":
		fallthrough
	case "Tuesday":
		fallthrough
	case "Wednesday":
		fallthrough
	case "Thursday":
		fallthrough
	case "Friday":
		fallthrough
	case "Saturday":
		fallthrough
	case "Sunday":
		fallthrough
	case "FirstDay":
		fallthrough
	case "Fifteenth":
		fallthrough
	case "LastDay":
		*e = MissedSnapshotDayOfTimeUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MissedSnapshotDayOfTimeUnitEnum: %v", v)
	}
}
