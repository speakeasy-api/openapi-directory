"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import bullet as shared_bullet
from ..shared import objectreferences as shared_objectreferences
from ..shared import paragraphelement as shared_paragraphelement
from ..shared import paragraphstyle as shared_paragraphstyle
from ..shared import suggestedbullet as shared_suggestedbullet
from ..shared import suggestedparagraphstyle as shared_suggestedparagraphstyle
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Paragraph:
    r"""A StructuralElement representing a paragraph. A paragraph is a range of content that's terminated with a newline character."""
    
    bullet: Optional[shared_bullet.Bullet] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bullet'), 'exclude': lambda f: f is None }})
    r"""Describes the bullet of a paragraph."""  
    elements: Optional[list[shared_paragraphelement.ParagraphElement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elements'), 'exclude': lambda f: f is None }})
    r"""The content of the paragraph, broken down into its component parts."""  
    paragraph_style: Optional[shared_paragraphstyle.ParagraphStyle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paragraphStyle'), 'exclude': lambda f: f is None }})
    r"""Styles that apply to a whole paragraph. Inherited paragraph styles are represented as unset fields in this message. A paragraph style's parent depends on where the paragraph style is defined: * The ParagraphStyle on a Paragraph inherits from the paragraph's corresponding named style type. * The ParagraphStyle on a named style inherits from the normal text named style. * The ParagraphStyle of the normal text named style inherits from the default paragraph style in the Docs editor. * The ParagraphStyle on a Paragraph element that's contained in a table may inherit its paragraph style from the table style. If the paragraph style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor."""  
    positioned_object_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('positionedObjectIds'), 'exclude': lambda f: f is None }})
    r"""The IDs of the positioned objects tethered to this paragraph."""  
    suggested_bullet_changes: Optional[dict[str, shared_suggestedbullet.SuggestedBullet]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedBulletChanges'), 'exclude': lambda f: f is None }})
    r"""The suggested changes to this paragraph's bullet."""  
    suggested_paragraph_style_changes: Optional[dict[str, shared_suggestedparagraphstyle.SuggestedParagraphStyle]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedParagraphStyleChanges'), 'exclude': lambda f: f is None }})
    r"""The suggested paragraph style changes to this paragraph, keyed by suggestion ID."""  
    suggested_positioned_object_ids: Optional[dict[str, shared_objectreferences.ObjectReferences]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedPositionedObjectIds'), 'exclude': lambda f: f is None }})
    r"""The IDs of the positioned objects suggested to be attached to this paragraph, keyed by suggestion ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ParagraphInput:
    r"""A StructuralElement representing a paragraph. A paragraph is a range of content that's terminated with a newline character."""
    
    bullet: Optional[shared_bullet.Bullet] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bullet'), 'exclude': lambda f: f is None }})
    r"""Describes the bullet of a paragraph."""  
    elements: Optional[list[shared_paragraphelement.ParagraphElementInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elements'), 'exclude': lambda f: f is None }})
    r"""The content of the paragraph, broken down into its component parts."""  
    paragraph_style: Optional[shared_paragraphstyle.ParagraphStyle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paragraphStyle'), 'exclude': lambda f: f is None }})
    r"""Styles that apply to a whole paragraph. Inherited paragraph styles are represented as unset fields in this message. A paragraph style's parent depends on where the paragraph style is defined: * The ParagraphStyle on a Paragraph inherits from the paragraph's corresponding named style type. * The ParagraphStyle on a named style inherits from the normal text named style. * The ParagraphStyle of the normal text named style inherits from the default paragraph style in the Docs editor. * The ParagraphStyle on a Paragraph element that's contained in a table may inherit its paragraph style from the table style. If the paragraph style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor."""  
    positioned_object_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('positionedObjectIds'), 'exclude': lambda f: f is None }})
    r"""The IDs of the positioned objects tethered to this paragraph."""  
    suggested_bullet_changes: Optional[dict[str, shared_suggestedbullet.SuggestedBullet]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedBulletChanges'), 'exclude': lambda f: f is None }})
    r"""The suggested changes to this paragraph's bullet."""  
    suggested_paragraph_style_changes: Optional[dict[str, shared_suggestedparagraphstyle.SuggestedParagraphStyle]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedParagraphStyleChanges'), 'exclude': lambda f: f is None }})
    r"""The suggested paragraph style changes to this paragraph, keyed by suggestion ID."""  
    suggested_positioned_object_ids: Optional[dict[str, shared_objectreferences.ObjectReferences]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedPositionedObjectIds'), 'exclude': lambda f: f is None }})
    r"""The IDs of the positioned objects suggested to be attached to this paragraph, keyed by suggestion ID."""  
    