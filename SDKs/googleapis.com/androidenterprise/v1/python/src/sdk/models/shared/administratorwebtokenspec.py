"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import administratorwebtokenspecmanagedconfigurations as shared_administratorwebtokenspecmanagedconfigurations
from ..shared import administratorwebtokenspecplaysearch as shared_administratorwebtokenspecplaysearch
from ..shared import administratorwebtokenspecprivateapps as shared_administratorwebtokenspecprivateapps
from ..shared import administratorwebtokenspecstorebuilder as shared_administratorwebtokenspecstorebuilder
from ..shared import administratorwebtokenspecwebapps as shared_administratorwebtokenspecwebapps
from ..shared import administratorwebtokenspeczerotouch as shared_administratorwebtokenspeczerotouch
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AdministratorWebTokenSpecPermissionEnum(str, Enum):
    UNKNOWN = 'unknown'
    APPROVE_APPS = 'approveApps'
    MANAGE_MCM = 'manageMcm'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdministratorWebTokenSpec:
    r"""Specification for a token used to generate iframes. The token specifies what data the admin is allowed to modify and the URI the iframe is allowed to communiate with."""
    
    managed_configurations: Optional[shared_administratorwebtokenspecmanagedconfigurations.AdministratorWebTokenSpecManagedConfigurations] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managedConfigurations'), 'exclude': lambda f: f is None }})  
    parent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent'), 'exclude': lambda f: f is None }})
    r"""The URI of the parent frame hosting the iframe. To prevent XSS, the iframe may not be hosted at other URIs. This URI must be https. Use whitespaces to separate multiple parent URIs."""  
    permission: Optional[list[AdministratorWebTokenSpecPermissionEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission'), 'exclude': lambda f: f is None }})
    r"""Deprecated. Use PlaySearch.approveApps."""  
    play_search: Optional[shared_administratorwebtokenspecplaysearch.AdministratorWebTokenSpecPlaySearch] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('playSearch'), 'exclude': lambda f: f is None }})  
    private_apps: Optional[shared_administratorwebtokenspecprivateapps.AdministratorWebTokenSpecPrivateApps] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateApps'), 'exclude': lambda f: f is None }})  
    store_builder: Optional[shared_administratorwebtokenspecstorebuilder.AdministratorWebTokenSpecStoreBuilder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storeBuilder'), 'exclude': lambda f: f is None }})  
    web_apps: Optional[shared_administratorwebtokenspecwebapps.AdministratorWebTokenSpecWebApps] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webApps'), 'exclude': lambda f: f is None }})  
    zero_touch: Optional[shared_administratorwebtokenspeczerotouch.AdministratorWebTokenSpecZeroTouch] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zeroTouch'), 'exclude': lambda f: f is None }})  
    