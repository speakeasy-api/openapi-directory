"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class UsersCompanyLevel:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_companies_company_id_users(self, request: operations.GetCompaniesCompanyIDUsersRequest, security: operations.GetCompaniesCompanyIDUsersSecurity) -> operations.GetCompaniesCompanyIDUsersResponse:
        r"""Get a list of users
        Returns the list of users for the `companyId` identified in the path.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Users read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompaniesCompanyIDUsersRequest, base_url, '/companies/{companyId}/users', request)
        
        query_params = utils.get_query_params(operations.GetCompaniesCompanyIDUsersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompaniesCompanyIDUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCompanyUsersResponse])
                res.list_company_users_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_companies_company_id_users_user_id(self, request: operations.GetCompaniesCompanyIDUsersUserIDRequest, security: operations.GetCompaniesCompanyIDUsersUserIDSecurity) -> operations.GetCompaniesCompanyIDUsersUserIDResponse:
        r"""Get user details
        Returns user details for the `userId` and the `companyId` identified in the path.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Users read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompaniesCompanyIDUsersUserIDRequest, base_url, '/companies/{companyId}/users/{userId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompaniesCompanyIDUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompanyUser])
                res.company_user = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def patch_companies_company_id_users_user_id(self, request: operations.PatchCompaniesCompanyIDUsersUserIDRequest, security: operations.PatchCompaniesCompanyIDUsersUserIDSecurity) -> operations.PatchCompaniesCompanyIDUsersUserIDResponse:
        r"""Update user details
        Updates user details for the `userId` and the `companyId` identified in the path.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Users read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchCompaniesCompanyIDUsersUserIDRequest, base_url, '/companies/{companyId}/users/{userId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_company_user_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchCompaniesCompanyIDUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompanyUser])
                res.company_user = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_companies_company_id_users(self, request: operations.PostCompaniesCompanyIDUsersRequest, security: operations.PostCompaniesCompanyIDUsersSecurity) -> operations.PostCompaniesCompanyIDUsersResponse:
        r"""Create a new user
        Creates the user for the `companyId` identified in the path.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Users read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostCompaniesCompanyIDUsersRequest, base_url, '/companies/{companyId}/users', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_company_user_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCompaniesCompanyIDUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateCompanyUserResponse])
                res.create_company_user_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    