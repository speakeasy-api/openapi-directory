/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The consistency level to execute the request at.
 */
export enum ListOutgoingTypedLinksRequestBodyConsistencyLevelEnum {
  Serializable = "SERIALIZABLE",
  Eventual = "EVENTUAL",
}

/**
 * Identifies the schema Amazon Resource Name (ARN) and facet name for the typed link.
 */
export class ListOutgoingTypedLinksRequestBodyFilterTypedLink extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "SchemaArn" })
  schemaArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TypedLinkName" })
  typedLinkName?: string;
}

/**
 * The reference that identifies an object.
 */
export class ListOutgoingTypedLinksRequestBodyObjectReference extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Selector" })
  selector?: string;
}

export class ListOutgoingTypedLinksRequestBody extends SpeakeasyBase {
  /**
   * The consistency level to execute the request at.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ConsistencyLevel" })
  consistencyLevel?: ListOutgoingTypedLinksRequestBodyConsistencyLevelEnum;

  /**
   * Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
   */
  @SpeakeasyMetadata({ elemType: shared.TypedLinkAttributeRange })
  @Expose({ name: "FilterAttributeRanges" })
  @Type(() => shared.TypedLinkAttributeRange)
  filterAttributeRanges?: shared.TypedLinkAttributeRange[];

  /**
   * Identifies the schema Amazon Resource Name (ARN) and facet name for the typed link.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FilterTypedLink" })
  @Type(() => ListOutgoingTypedLinksRequestBodyFilterTypedLink)
  filterTypedLink?: ListOutgoingTypedLinksRequestBodyFilterTypedLink;

  /**
   * The maximum number of results to retrieve.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaxResults" })
  maxResults?: number;

  /**
   * The pagination token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NextToken" })
  nextToken?: string;

  /**
   * The reference that identifies an object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ObjectReference" })
  @Type(() => ListOutgoingTypedLinksRequestBodyObjectReference)
  objectReference: ListOutgoingTypedLinksRequestBodyObjectReference;
}

export class ListOutgoingTypedLinksRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ListOutgoingTypedLinksRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The Amazon Resource Name (ARN) of the directory where you want to list the typed links.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-amz-data-partition",
  })
  xAmzDataPartition: string;
}

export class ListOutgoingTypedLinksResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * DirectoryNotEnabledException
   */
  @SpeakeasyMetadata()
  directoryNotEnabledException?: any;

  /**
   * FacetValidationException
   */
  @SpeakeasyMetadata()
  facetValidationException?: any;

  /**
   * InternalServiceException
   */
  @SpeakeasyMetadata()
  internalServiceException?: any;

  /**
   * InvalidArnException
   */
  @SpeakeasyMetadata()
  invalidArnException?: any;

  /**
   * InvalidNextTokenException
   */
  @SpeakeasyMetadata()
  invalidNextTokenException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  listOutgoingTypedLinksResponse?: shared.ListOutgoingTypedLinksResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * RetryableConflictException
   */
  @SpeakeasyMetadata()
  retryableConflictException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
