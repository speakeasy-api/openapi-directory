// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConferenceRecordingEnumStatusEnum string

const (
	ConferenceRecordingEnumStatusEnumInProgress ConferenceRecordingEnumStatusEnum = "in-progress"
	ConferenceRecordingEnumStatusEnumPaused     ConferenceRecordingEnumStatusEnum = "paused"
	ConferenceRecordingEnumStatusEnumStopped    ConferenceRecordingEnumStatusEnum = "stopped"
	ConferenceRecordingEnumStatusEnumProcessing ConferenceRecordingEnumStatusEnum = "processing"
	ConferenceRecordingEnumStatusEnumCompleted  ConferenceRecordingEnumStatusEnum = "completed"
	ConferenceRecordingEnumStatusEnumAbsent     ConferenceRecordingEnumStatusEnum = "absent"
)

func (e ConferenceRecordingEnumStatusEnum) ToPointer() *ConferenceRecordingEnumStatusEnum {
	return &e
}

func (e *ConferenceRecordingEnumStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in-progress":
		fallthrough
	case "paused":
		fallthrough
	case "stopped":
		fallthrough
	case "processing":
		fallthrough
	case "completed":
		fallthrough
	case "absent":
		*e = ConferenceRecordingEnumStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConferenceRecordingEnumStatusEnum: %v", v)
	}
}
