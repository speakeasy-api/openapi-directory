"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import mounttargetdescription as shared_mounttargetdescription
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateMountTargetRequestBody:
    
    file_system_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileSystemId') }})
    r"""The ID of the file system for which to create the mount target."""  
    subnet_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubnetId') }})
    r"""The ID of the subnet to add the mount target in. For file systems that use One Zone storage classes, use the subnet that is associated with the file system's Availability Zone."""  
    ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IpAddress'), 'exclude': lambda f: f is None }})
    r"""Valid IPv4 address within the address range of the specified subnet."""  
    security_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityGroups'), 'exclude': lambda f: f is None }})
    r"""Up to five VPC security group IDs, of the form <code>sg-xxxxxxxx</code>. These must be for the same VPC as subnet specified."""  
    

@dataclasses.dataclass
class CreateMountTargetRequest:
    
    request_body: CreateMountTargetRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateMountTargetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    availability_zones_mismatch: Optional[Any] = dataclasses.field(default=None)
    r"""AvailabilityZonesMismatch"""  
    bad_request: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequest"""  
    file_system_not_found: Optional[Any] = dataclasses.field(default=None)
    r"""FileSystemNotFound"""  
    incorrect_file_system_life_cycle_state: Optional[Any] = dataclasses.field(default=None)
    r"""IncorrectFileSystemLifeCycleState"""  
    internal_server_error: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerError"""  
    ip_address_in_use: Optional[Any] = dataclasses.field(default=None)
    r"""IpAddressInUse"""  
    mount_target_conflict: Optional[Any] = dataclasses.field(default=None)
    r"""MountTargetConflict"""  
    mount_target_description: Optional[shared_mounttargetdescription.MountTargetDescription] = dataclasses.field(default=None)
    r"""Success"""  
    network_interface_limit_exceeded: Optional[Any] = dataclasses.field(default=None)
    r"""NetworkInterfaceLimitExceeded"""  
    no_free_addresses_in_subnet: Optional[Any] = dataclasses.field(default=None)
    r"""NoFreeAddressesInSubnet"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    security_group_limit_exceeded: Optional[Any] = dataclasses.field(default=None)
    r"""SecurityGroupLimitExceeded"""  
    security_group_not_found: Optional[Any] = dataclasses.field(default=None)
    r"""SecurityGroupNotFound"""  
    subnet_not_found: Optional[Any] = dataclasses.field(default=None)
    r"""SubnetNotFound"""  
    unsupported_availability_zone: Optional[Any] = dataclasses.field(default=None)
    r"""UnsupportedAvailabilityZone"""  
    