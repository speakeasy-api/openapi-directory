<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ContainerInfo - OK. A list with detailed information about the container is returned. 
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ContainerInfo
{
    /**
     * The name of the Cloud Foundry app that was bound to the container during creation.
     * 
     * @var ?string $bluemixApp
     */
	#[\JMS\Serializer\Annotation\SerializedName('BluemixApp')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $bluemixApp = null;
    
    /**
     * The name of the Bluemix service instance that was bound to the container during creation.
     * 
     * @var ?string $bluemixServices
     */
	#[\JMS\Serializer\Annotation\SerializedName('BluemixServices')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $bluemixServices = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('Config')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ContainerConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ContainerConfig $config = null;
    
    /**
     * The current status of the container. This state can either be transient, such as BUILDING or NETWORKING, or non-transient, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.
     * 
     * @var ?string $containerState
     */
	#[\JMS\Serializer\Annotation\SerializedName('ContainerState')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $containerState = null;
    
    /**
     * The date and time the container was created.
     * 
     * @var ?\DateTime $created
     */
	#[\JMS\Serializer\Annotation\SerializedName('Created')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $created = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('Group')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Group')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Group $group = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('HostConfig')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\HostConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?HostConfig $hostConfig = null;
    
    /**
     * The ID representing the physical compute host.
     * 
     * @var ?string $hostId
     */
	#[\JMS\Serializer\Annotation\SerializedName('HostId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $hostId = null;
    
    /**
     * The name of the container. 
     * 
     * @var ?string $humanId
     */
	#[\JMS\Serializer\Annotation\SerializedName('Human_Id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $humanId = null;
    
    /**
     * Unique identifier representing a container.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('Id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * Unique identifier representing a container image.
     * 
     * @var ?string $image
     */
	#[\JMS\Serializer\Annotation\SerializedName('Image')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $image = null;
    
    /**
     * A list of volumes that are mounted to the container.
     * 
     * @var ?array<string> $mounts
     */
	#[\JMS\Serializer\Annotation\SerializedName('Mounts')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $mounts = null;
    
    /**
     * The name of the container.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('Name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('NetworkSettings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NetworkSetting')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NetworkSetting $networkSettings = null;
    
    /**
     * The environment variable indicating the binary location.
     * 
     * @var ?string $path
     */
	#[\JMS\Serializer\Annotation\SerializedName('Path')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $path = null;
    
    /**
     * Path to the resolve.conf file inside the container. The resolve.conf file is used to resolve the DNS servers.
     * 
     * @var ?string $resolveConfPath
     */
	#[\JMS\Serializer\Annotation\SerializedName('ResolveConfPath')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $resolveConfPath = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('State')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ContainerState')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ContainerState $state = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('Volumes')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Volume')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Volume $volumes = null;
    
    /**
     * LIst of volumes that is mounted to the container.
     * 
     * @var ?array<string> $volumesRW
     */
	#[\JMS\Serializer\Annotation\SerializedName('VolumesRW')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $volumesRW = null;
    
	public function __construct()
	{
		$this->bluemixApp = null;
		$this->bluemixServices = null;
		$this->config = null;
		$this->containerState = null;
		$this->created = null;
		$this->group = null;
		$this->hostConfig = null;
		$this->hostId = null;
		$this->humanId = null;
		$this->id = null;
		$this->image = null;
		$this->mounts = null;
		$this->name = null;
		$this->networkSettings = null;
		$this->path = null;
		$this->resolveConfPath = null;
		$this->state = null;
		$this->volumes = null;
		$this->volumesRW = null;
	}
}
