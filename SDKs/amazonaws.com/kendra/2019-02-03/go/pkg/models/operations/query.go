// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// QueryXAmzTargetEnum
type QueryXAmzTargetEnum string

const (
	QueryXAmzTargetEnumAwsKendraFrontendServiceQuery QueryXAmzTargetEnum = "AWSKendraFrontendService.Query"
)

func (e QueryXAmzTargetEnum) ToPointer() *QueryXAmzTargetEnum {
	return &e
}

func (e *QueryXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSKendraFrontendService.Query":
		*e = QueryXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryXAmzTargetEnum: %v", v)
	}
}

type QueryRequest struct {
	QueryRequest      shared.QueryRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        QueryXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type QueryResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	// Success
	QueryResult *shared.QueryResult
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
