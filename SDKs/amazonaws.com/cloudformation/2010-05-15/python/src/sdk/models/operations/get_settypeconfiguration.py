"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETSetTypeConfigurationActionEnum(str, Enum):
    SET_TYPE_CONFIGURATION = 'SetTypeConfiguration'

class GETSetTypeConfigurationTypeEnum(str, Enum):
    r"""<p>The type of extension.</p> <p>Conditional: You must specify <code>ConfigurationArn</code>, or <code>Type</code> and <code>TypeName</code>.</p>"""
    RESOURCE = 'RESOURCE'
    MODULE = 'MODULE'
    HOOK = 'HOOK'

class GETSetTypeConfigurationVersionEnum(str, Enum):
    TWO_THOUSAND_AND_TEN_05_15 = '2010-05-15'


@dataclasses.dataclass
class GETSetTypeConfigurationRequest:
    
    action: GETSetTypeConfigurationActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    configuration: str = dataclasses.field(metadata={'query_param': { 'field_name': 'Configuration', 'style': 'form', 'explode': True }})
    r"""<p>The configuration data for the extension, in this account and region.</p> <p>The configuration data must be formatted as JSON, and validate against the schema returned in the <code>ConfigurationSchema</code> response element of <a href=\\"AWSCloudFormation/latest/APIReference/API_DescribeType.html\\">API_DescribeType</a>. For more information, see <a href=\\"https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-model.html#resource-type-howto-configuration\\">Defining account-level configuration data for an extension</a> in the <i>CloudFormation CLI User Guide</i>.</p>"""  
    version: GETSetTypeConfigurationVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    configuration_alias: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ConfigurationAlias', 'style': 'form', 'explode': True }})
    r"""<p>An alias by which to refer to this extension configuration data.</p> <p>Conditional: Specifying a configuration alias is required when setting a configuration for a resource type extension.</p>"""  
    type: Optional[GETSetTypeConfigurationTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Type', 'style': 'form', 'explode': True }})
    r"""<p>The type of extension.</p> <p>Conditional: You must specify <code>ConfigurationArn</code>, or <code>Type</code> and <code>TypeName</code>.</p>"""  
    type_arn: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'TypeArn', 'style': 'form', 'explode': True }})
    r"""<p>The Amazon Resource Name (ARN) for the extension, in this account and region.</p> <p>For public extensions, this will be the ARN assigned when you <a href=\\"https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html\\">activate the type</a> in this account and region. For private extensions, this will be the ARN assigned when you <a href=\\"https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html\\">register the type</a> in this account and region.</p> <p>Do not include the extension versions suffix at the end of the ARN. You can set the configuration for an extension, but not for a specific extension version.</p>"""  
    type_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'TypeName', 'style': 'form', 'explode': True }})
    r"""<p>The name of the extension.</p> <p>Conditional: You must specify <code>ConfigurationArn</code>, or <code>Type</code> and <code>TypeName</code>.</p>"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETSetTypeConfigurationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    