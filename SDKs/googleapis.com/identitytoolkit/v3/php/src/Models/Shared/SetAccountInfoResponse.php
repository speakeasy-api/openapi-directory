<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * SetAccountInfoResponse - Respone of setting the account information.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class SetAccountInfoResponse
{
    /**
     * The name of the user.
     * 
     * @var ?string $displayName
     */
	#[\JMS\Serializer\Annotation\SerializedName('displayName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $displayName = null;
    
    /**
     * The email of the user.
     * 
     * @var ?string $email
     */
	#[\JMS\Serializer\Annotation\SerializedName('email')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $email = null;
    
    /**
     * If email has been verified.
     * 
     * @var ?bool $emailVerified
     */
	#[\JMS\Serializer\Annotation\SerializedName('emailVerified')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $emailVerified = null;
    
    /**
     * If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
     * 
     * @var ?string $expiresIn
     */
	#[\JMS\Serializer\Annotation\SerializedName('expiresIn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $expiresIn = null;
    
    /**
     * The Gitkit id token to login the newly sign up user.
     * 
     * @var ?string $idToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('idToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $idToken = null;
    
    /**
     * The fixed string "identitytoolkit#SetAccountInfoResponse".
     * 
     * @var ?string $kind
     */
	#[\JMS\Serializer\Annotation\SerializedName('kind')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $kind = null;
    
    /**
     * The local ID of the user.
     * 
     * @var ?string $localId
     */
	#[\JMS\Serializer\Annotation\SerializedName('localId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $localId = null;
    
    /**
     * The new email the user attempts to change to.
     * 
     * @var ?string $newEmail
     */
	#[\JMS\Serializer\Annotation\SerializedName('newEmail')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $newEmail = null;
    
    /**
     * The user's hashed password.
     * 
     * @var ?string $passwordHash
     */
	#[\JMS\Serializer\Annotation\SerializedName('passwordHash')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $passwordHash = null;
    
    /**
     * The photo url of the user.
     * 
     * @var ?string $photoUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('photoUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $photoUrl = null;
    
    /**
     * The user's profiles at the associated IdPs.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\SetAccountInfoResponseProviderUserInfo> $providerUserInfo
     */
	#[\JMS\Serializer\Annotation\SerializedName('providerUserInfo')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\SetAccountInfoResponseProviderUserInfo>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $providerUserInfo = null;
    
    /**
     * If idToken is STS id token, then this field will be refresh token.
     * 
     * @var ?string $refreshToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('refreshToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $refreshToken = null;
    
	public function __construct()
	{
		$this->displayName = null;
		$this->email = null;
		$this->emailVerified = null;
		$this->expiresIn = null;
		$this->idToken = null;
		$this->kind = null;
		$this->localId = null;
		$this->newEmail = null;
		$this->passwordHash = null;
		$this->photoUrl = null;
		$this->providerUserInfo = null;
		$this->refreshToken = null;
	}
}
