// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SearchFreetextRequestBodySearchTypesEnum string

const (
	SearchFreetextRequestBodySearchTypesEnumProduct        SearchFreetextRequestBodySearchTypesEnum = "PRODUCT"
	SearchFreetextRequestBodySearchTypesEnumDestination    SearchFreetextRequestBodySearchTypesEnum = "DESTINATION"
	SearchFreetextRequestBodySearchTypesEnumAttraction     SearchFreetextRequestBodySearchTypesEnum = "ATTRACTION"
	SearchFreetextRequestBodySearchTypesEnumRecommendation SearchFreetextRequestBodySearchTypesEnum = "RECOMMENDATION"
)

func (e *SearchFreetextRequestBodySearchTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PRODUCT":
		fallthrough
	case "DESTINATION":
		fallthrough
	case "ATTRACTION":
		fallthrough
	case "RECOMMENDATION":
		*e = SearchFreetextRequestBodySearchTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchFreetextRequestBodySearchTypesEnum: %s", s)
	}
}

type SearchFreetextRequestBody struct {
	// **currency code** for the currency in which to display product pricing information
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// **unique numeric identifier** of the destination to search within
	// - `destinationId` can be retrieved from the [/taxonomy/destinations](#operation/taxonomyDestinations) service
	//
	DestID *int64 `json:"destId,omitempty"`
	// **array** of search domain specifiers where each item is *one of*:
	//   - `"PRODUCT"`: a tour / activity
	//   - `"DESTINATION"`: continent, country, city, region
	//   - `"ATTRACTION"`: an attraction within a destination (only available to partners with SEO access)
	//   - `"RECOMMENDATION"`: an attraction within a destination (only available to partners with SEO access)
	//
	SearchTypes []SearchFreetextRequestBodySearchTypesEnum `json:"searchTypes,omitempty"`
	// **sort order** in which to return the results that is *one of*:
	//
	//   - `'TOP_SELLERS'`: the top sellers
	//   - `'REVIEW_AVG_RATING_A'`: ascending by average traveler rating (low -&gt; high)
	//   - `'REVIEW_AVG_RATING_D'`: descending by average traveler rating (high -&gt; low)
	//   - `'PRICE_FROM_A'`: ascending by price (low -&gt; high)
	//   - `'PRICE_FROM_D'`: descending by price (high -&gt; low)
	//
	SortOrder *shared.SortOrderEnum `json:"sortOrder,omitempty"`
	// **text** to search for
	Text *string `json:"text,omitempty"`
	// **start and end rows** to return in the format {start}-{end}
	// - e.g. `'1-10'`, `'11-20'`
	//
	// **Note**:
	// - the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'`
	// - if `topX` is not specified, the default is `'1-100'`
	//
	TopX *string `json:"topX,omitempty"`
}

type SearchFreetextRequest struct {
	// Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
	//
	AcceptLanguage string                     `header:"style=simple,explode=false,name=Accept-Language"`
	RequestBody    *SearchFreetextRequestBody `request:"mediaType=application/json"`
}

// SearchFreetext200ApplicationJSON - Success
type SearchFreetext200ApplicationJSON struct {
	// **array** of search results
	Data []shared.SearchFreetextResponse `json:"data,omitempty"`
	// **timestamp** of *this* response
	DateStamp *string `json:"dateStamp,omitempty"`
	// **array** of error codes pertaining to *this* error
	// - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
	//
	ErrorCodes []string `json:"errorCodes,omitempty"`
	// **array** of error message strings
	ErrorMessage []interface{} `json:"errorMessage,omitempty"`
	// **array** of error message strings in plain text
	ErrorMessageText *string `json:"errorMessageText,omitempty"`
	// **name** of *this* type of error
	ErrorName *string `json:"errorName,omitempty"`
	// **reference number** of *this* error
	ErrorReference *string `json:"errorReference,omitempty"`
	// **code** specifying the type of error
	ErrorType *string `json:"errorType,omitempty"`
	// ignore (Viator only)
	ExtraInfo map[string]interface{} `json:"extraInfo,omitempty"`
	// ignore (Viator only)
	ExtraObject map[string]interface{} `json:"extraObject,omitempty"`
	// **boolean indicator** of *this* request's outcome
	// - `true`: the request was successful with no errors
	// - `false`: an error was encountered
	//
	Success *bool `json:"success,omitempty"`
	// **number** of results available for *this* service
	//
	TotalCount *int64 `json:"totalCount,omitempty"`
	// **unique numeric id** of the server that processed *this* request
	Vmid *string `json:"vmid,omitempty"`
}

type SearchFreetextResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	SearchFreetext200ApplicationJSONObject *SearchFreetext200ApplicationJSON
}
