"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class SearchTmdbmoviesRequest:
    
    changedate_from: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'changedate.from', 'style': 'form', 'explode': True }})
    r"""Archive change date from"""  
    changedate_to: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'changedate.to', 'style': 'form', 'explode': True }})
    r"""Archive change date to"""  
    createdate_from: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdate.from', 'style': 'form', 'explode': True }})
    r"""Archive create date from"""  
    createdate_to: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdate.to', 'style': 'form', 'explode': True }})
    r"""Archive create date to"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'description', 'style': 'form', 'explode': True }})
    r"""Search description"""  
    filesuffix: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filesuffix', 'style': 'form', 'explode': True }})
    r"""File suffix"""  
    fromdate: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fromdate', 'style': 'form', 'explode': True }})
    r"""From date"""  
    group: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'group', 'style': 'form', 'explode': True }})
    r"""Parent entry"""  
    max: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max', 'style': 'form', 'explode': True }})
    r"""Max number of results"""  
    maxlatitude: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxlatitude', 'style': 'form', 'explode': True }})
    r"""Northern bounds of search"""  
    maxlongitude: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxlongitude', 'style': 'form', 'explode': True }})
    r"""Eastern bounds of search"""  
    minlatitude: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'minlatitude', 'style': 'form', 'explode': True }})
    r"""Southern bounds of search"""  
    minlongitude: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'minlongitude', 'style': 'form', 'explode': True }})
    r"""Western bounds of search"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Search name"""  
    search_db_tmdbmovies_budget: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.budget', 'style': 'form', 'explode': True }})
    r"""Budget"""  
    search_db_tmdbmovies_genres: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.genres', 'style': 'form', 'explode': True }})
    r"""Genres"""  
    search_db_tmdbmovies_homepage: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.homepage', 'style': 'form', 'explode': True }})
    r"""Homepage"""  
    search_db_tmdbmovies_keywords: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.keywords', 'style': 'form', 'explode': True }})
    r"""Keywords"""  
    search_db_tmdbmovies_movie_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.movie_id', 'style': 'form', 'explode': True }})
    r"""Id"""  
    search_db_tmdbmovies_original_language: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.original_language', 'style': 'form', 'explode': True }})
    r"""Original Language"""  
    search_db_tmdbmovies_original_title: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.original_title', 'style': 'form', 'explode': True }})
    r"""Original Title"""  
    search_db_tmdbmovies_overview: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.overview', 'style': 'form', 'explode': True }})
    r"""Overview"""  
    search_db_tmdbmovies_popularity: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.popularity', 'style': 'form', 'explode': True }})
    r"""Popularity"""  
    search_db_tmdbmovies_production_companies: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.production_companies', 'style': 'form', 'explode': True }})
    r"""Production Companies"""  
    search_db_tmdbmovies_production_countries: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.production_countries', 'style': 'form', 'explode': True }})
    r"""Production Countries"""  
    search_db_tmdbmovies_release_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.release_date', 'style': 'form', 'explode': True }})
    r"""Release Date"""  
    search_db_tmdbmovies_revenue: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.revenue', 'style': 'form', 'explode': True }})
    r"""Revenue"""  
    search_db_tmdbmovies_runtime: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.runtime', 'style': 'form', 'explode': True }})
    r"""Runtime"""  
    search_db_tmdbmovies_spoken_languages: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.spoken_languages', 'style': 'form', 'explode': True }})
    r"""Spoken Languages"""  
    search_db_tmdbmovies_status: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.status', 'style': 'form', 'explode': True }})
    r"""Status"""  
    search_db_tmdbmovies_tagline: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.tagline', 'style': 'form', 'explode': True }})
    r"""Tagline"""  
    search_db_tmdbmovies_title: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.title', 'style': 'form', 'explode': True }})
    r"""Title"""  
    search_db_tmdbmovies_vote_average: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.vote_average', 'style': 'form', 'explode': True }})
    r"""Vote Average"""  
    search_db_tmdbmovies_vote_count: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search.db_tmdbmovies.vote_count', 'style': 'form', 'explode': True }})
    r"""Vote Count"""  
    skip: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'skip', 'style': 'form', 'explode': True }})
    r"""Number to skip"""  
    text: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'text', 'style': 'form', 'explode': True }})
    r"""Search text"""  
    todate: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'todate', 'style': 'form', 'explode': True }})
    r"""To date"""  
    

@dataclasses.dataclass
class SearchTmdbmoviesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    