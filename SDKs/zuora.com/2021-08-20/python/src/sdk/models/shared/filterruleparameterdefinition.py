"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FilterRuleParameterDefinitionValueTypeEnum(str, Enum):
    r"""The type of the value."""
    STRING = 'STRING'
    BYTE = 'BYTE'
    SHORT = 'SHORT'
    CHARACTER = 'CHARACTER'
    INTEGER = 'INTEGER'
    LONG = 'LONG'
    FLOAT = 'FLOAT'
    DOUBLE = 'DOUBLE'
    BOOLEAN = 'BOOLEAN'
    BIG_INTEGER = 'BIG_INTEGER'
    BIG_DECIMAL = 'BIG_DECIMAL'
    LOCAL_DATE = 'LOCAL_DATE'
    LOCAL_DATE_TIME = 'LOCAL_DATE_TIME'
    TIMESTAMP = 'TIMESTAMP'
    BYTE_ARRAY = 'BYTE_ARRAY'
    SHORT_ARRAY = 'SHORT_ARRAY'
    CHARACTER_ARRAY = 'CHARACTER_ARRAY'
    INTEGER_ARRAY = 'INTEGER_ARRAY'
    FLOAT_ARRAY = 'FLOAT_ARRAY'
    DOUBLE_ARRAY = 'DOUBLE_ARRAY'
    BOOLEAN_ARRAY = 'BOOLEAN_ARRAY'
    STRING_ARRAY = 'STRING_ARRAY'
    BIG_INTEGER_ARRAY = 'BIG_INTEGER_ARRAY'
    BIG_DECIMAL_ARRAY = 'BIG_DECIMAL_ARRAY'
    LOCAL_DATE_ARRAY = 'LOCAL_DATE_ARRAY'
    LOCAL_DATE_TIME_ARRAY = 'LOCAL_DATE_TIME_ARRAY'
    TIMESTAMP_ARRAY = 'TIMESTAMP_ARRAY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FilterRuleParameterDefinition:
    r"""Definition of a filter rule parameter."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The display name of the parameter."""  
    options: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""The option values of the parameter."""  
    value_type: Optional[FilterRuleParameterDefinitionValueTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueType'), 'exclude': lambda f: f is None }})
    r"""The type of the value."""  
    