/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum RegisterUsageXAmzTargetEnum {
  AWSMPMeteringServiceRegisterUsage = "AWSMPMeteringService.RegisterUsage",
}

export class RegisterUsageRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  registerUsageRequest: shared.RegisterUsageRequest;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: RegisterUsageXAmzTargetEnum;
}

export class RegisterUsageResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * CustomerNotEntitledException
   */
  @SpeakeasyMetadata()
  customerNotEntitledException?: any;

  /**
   * DisabledApiException
   */
  @SpeakeasyMetadata()
  disabledApiException?: any;

  /**
   * InternalServiceErrorException
   */
  @SpeakeasyMetadata()
  internalServiceErrorException?: any;

  /**
   * InvalidProductCodeException
   */
  @SpeakeasyMetadata()
  invalidProductCodeException?: any;

  /**
   * InvalidPublicKeyVersionException
   */
  @SpeakeasyMetadata()
  invalidPublicKeyVersionException?: any;

  /**
   * InvalidRegionException
   */
  @SpeakeasyMetadata()
  invalidRegionException?: any;

  /**
   * PlatformNotSupportedException
   */
  @SpeakeasyMetadata()
  platformNotSupportedException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  registerUsageResult?: shared.RegisterUsageResult;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
