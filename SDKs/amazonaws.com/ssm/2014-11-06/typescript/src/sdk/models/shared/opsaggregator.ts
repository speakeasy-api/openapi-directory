/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { OpsFilter } from "./opsfilter";
import { Expose, Type } from "class-transformer";

/**
 * One or more aggregators for viewing counts of OpsData using different dimensions such as <code>Source</code>, <code>CreatedTime</code>, or <code>Source and CreatedTime</code>, to name a few.
 */
export class OpsAggregator extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AggregatorType" })
  aggregatorType?: string;

  @SpeakeasyMetadata({ elemType: OpsAggregator })
  @Expose({ name: "Aggregators" })
  @Type(() => OpsAggregator)
  aggregators?: OpsAggregator[];

  @SpeakeasyMetadata()
  @Expose({ name: "AttributeName" })
  attributeName?: string;

  @SpeakeasyMetadata({ elemType: OpsFilter })
  @Expose({ name: "Filters" })
  @Type(() => OpsFilter)
  filters?: OpsFilter[];

  @SpeakeasyMetadata()
  @Expose({ name: "TypeName" })
  typeName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Values" })
  values?: Record<string, string>;
}
