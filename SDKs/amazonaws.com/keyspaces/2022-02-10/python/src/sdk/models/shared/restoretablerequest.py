"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import capacityspecification as shared_capacityspecification
from ..shared import encryptionspecification as shared_encryptionspecification
from ..shared import pointintimerecovery as shared_pointintimerecovery
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RestoreTableRequest:
    
    source_keyspace_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceKeyspaceName') }})  
    source_table_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceTableName') }})  
    target_keyspace_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetKeyspaceName') }})  
    target_table_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetTableName') }})  
    capacity_specification_override: Optional[shared_capacityspecification.CapacitySpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capacitySpecificationOverride'), 'exclude': lambda f: f is None }})  
    encryption_specification_override: Optional[shared_encryptionspecification.EncryptionSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionSpecificationOverride'), 'exclude': lambda f: f is None }})  
    point_in_time_recovery_override: Optional[shared_pointintimerecovery.PointInTimeRecovery] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pointInTimeRecoveryOverride'), 'exclude': lambda f: f is None }})  
    restore_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restoreTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    tags_override: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagsOverride'), 'exclude': lambda f: f is None }})  
    