// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CfmstSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type CfmstRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Aadhaar number
	UID string `json:"UID"`
	// Roll No
	Rollno string `json:"rollno"`
	// Year
	Year string `json:"year"`
}

// CfmstRequestBodyFormatEnum - The format of the certificate in response.
type CfmstRequestBodyFormatEnum string

const (
	CfmstRequestBodyFormatEnumPdf CfmstRequestBodyFormatEnum = "pdf"
)

func (e *CfmstRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = CfmstRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CfmstRequestBodyFormatEnum: %s", s)
	}
}

// CfmstRequestBody - Request format
type CfmstRequestBody struct {
	CertificateParameters *CfmstRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format CfmstRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type CfmstRequest struct {
	// Request format
	Request  *CfmstRequestBody `request:"mediaType=application/json"`
	Security CfmstSecurity
}

type Cfmst504ApplicationJSONErrorEnum string

const (
	Cfmst504ApplicationJSONErrorEnumGatewayTimeout Cfmst504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Cfmst504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Cfmst504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfmst504ApplicationJSONErrorEnum: %s", s)
	}
}

type Cfmst504ApplicationJSONErrorDescriptionEnum string

const (
	Cfmst504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Cfmst504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Cfmst504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Cfmst504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfmst504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cfmst504ApplicationJSON - Gateway timeout
type Cfmst504ApplicationJSON struct {
	Error            *Cfmst504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cfmst504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cfmst503ApplicationJSONErrorEnum string

const (
	Cfmst503ApplicationJSONErrorEnumServiceUnavailable Cfmst503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Cfmst503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Cfmst503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfmst503ApplicationJSONErrorEnum: %s", s)
	}
}

type Cfmst503ApplicationJSONErrorDescriptionEnum string

const (
	Cfmst503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Cfmst503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Cfmst503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Cfmst503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfmst503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cfmst503ApplicationJSON - Service unavailable
type Cfmst503ApplicationJSON struct {
	Error            *Cfmst503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cfmst503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cfmst502ApplicationJSONErrorEnum string

const (
	Cfmst502ApplicationJSONErrorEnumBadGatewy Cfmst502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Cfmst502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Cfmst502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfmst502ApplicationJSONErrorEnum: %s", s)
	}
}

type Cfmst502ApplicationJSONErrorDescriptionEnum string

const (
	Cfmst502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Cfmst502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Cfmst502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Cfmst502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfmst502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cfmst502ApplicationJSON - Bad gateway
type Cfmst502ApplicationJSON struct {
	Error            *Cfmst502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cfmst502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cfmst500ApplicationJSONErrorEnum string

const (
	Cfmst500ApplicationJSONErrorEnumInternalServerError Cfmst500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Cfmst500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Cfmst500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfmst500ApplicationJSONErrorEnum: %s", s)
	}
}

type Cfmst500ApplicationJSONErrorDescriptionEnum string

const (
	Cfmst500ApplicationJSONErrorDescriptionEnumInternalServerError Cfmst500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Cfmst500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Cfmst500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfmst500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cfmst500ApplicationJSON - Internal server error
type Cfmst500ApplicationJSON struct {
	Error            *Cfmst500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cfmst500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cfmst404ApplicationJSONErrorEnum string

const (
	Cfmst404ApplicationJSONErrorEnumRecordNotFound Cfmst404ApplicationJSONErrorEnum = "record_not_found"
	Cfmst404ApplicationJSONErrorEnumURLNotFound    Cfmst404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Cfmst404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Cfmst404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfmst404ApplicationJSONErrorEnum: %s", s)
	}
}

type Cfmst404ApplicationJSONErrorDescriptionEnum string

const (
	Cfmst404ApplicationJSONErrorDescriptionEnumNoRecordFound               Cfmst404ApplicationJSONErrorDescriptionEnum = "No record found"
	Cfmst404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Cfmst404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Cfmst404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Cfmst404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfmst404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cfmst404ApplicationJSON - No record found
type Cfmst404ApplicationJSON struct {
	Error            *Cfmst404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cfmst404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cfmst401ApplicationJSONErrorEnum string

const (
	Cfmst401ApplicationJSONErrorEnumInvalidAuthentication Cfmst401ApplicationJSONErrorEnum = "invalid_authentication"
	Cfmst401ApplicationJSONErrorEnumInvalidAuthorization  Cfmst401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Cfmst401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Cfmst401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfmst401ApplicationJSONErrorEnum: %s", s)
	}
}

type Cfmst401ApplicationJSONErrorDescriptionEnum string

const (
	Cfmst401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Cfmst401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Cfmst401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Cfmst401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Cfmst401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Cfmst401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfmst401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cfmst401ApplicationJSON - Unauthorized access
type Cfmst401ApplicationJSON struct {
	Error            *Cfmst401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cfmst401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cfmst400ApplicationJSONErrorEnum string

const (
	Cfmst400ApplicationJSONErrorEnumMissingParameter Cfmst400ApplicationJSONErrorEnum = "missing_parameter"
	Cfmst400ApplicationJSONErrorEnumInvalidParameter Cfmst400ApplicationJSONErrorEnum = "invalid_parameter"
	Cfmst400ApplicationJSONErrorEnumInvalidFormat    Cfmst400ApplicationJSONErrorEnum = "invalid_format"
	Cfmst400ApplicationJSONErrorEnumInvalidTxnid     Cfmst400ApplicationJSONErrorEnum = "invalid_txnid"
	Cfmst400ApplicationJSONErrorEnumInvalidConsentid Cfmst400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Cfmst400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Cfmst400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfmst400ApplicationJSONErrorEnum: %s", s)
	}
}

type Cfmst400ApplicationJSONErrorDescriptionEnum string

const (
	Cfmst400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Cfmst400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Cfmst400ApplicationJSONErrorDescriptionEnumBadRequest                              Cfmst400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Cfmst400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Cfmst400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Cfmst400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Cfmst400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Cfmst400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Cfmst400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Cfmst400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Cfmst400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfmst400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cfmst400ApplicationJSON - Bad request
type Cfmst400ApplicationJSON struct {
	Error            *Cfmst400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cfmst400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type CfmstResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Cfmst400ApplicationJSONObject *Cfmst400ApplicationJSON
	// Unauthorized access
	Cfmst401ApplicationJSONObject *Cfmst401ApplicationJSON
	// No record found
	Cfmst404ApplicationJSONObject *Cfmst404ApplicationJSON
	// Internal server error
	Cfmst500ApplicationJSONObject *Cfmst500ApplicationJSON
	// Bad gateway
	Cfmst502ApplicationJSONObject *Cfmst502ApplicationJSON
	// Service unavailable
	Cfmst503ApplicationJSONObject *Cfmst503ApplicationJSON
	// Gateway timeout
	Cfmst504ApplicationJSONObject *Cfmst504ApplicationJSON
}
