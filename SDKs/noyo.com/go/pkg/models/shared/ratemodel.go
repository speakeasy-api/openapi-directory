// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RateModelCoverageLevelEnum - Coverage level of the rate
type RateModelCoverageLevelEnum string

const (
	RateModelCoverageLevelEnumChild          RateModelCoverageLevelEnum = "Child"
	RateModelCoverageLevelEnumEe             RateModelCoverageLevelEnum = "EE"
	RateModelCoverageLevelEnumEePlus1        RateModelCoverageLevelEnum = "EE+1"
	RateModelCoverageLevelEnumEePlusChild    RateModelCoverageLevelEnum = "EE+Child"
	RateModelCoverageLevelEnumEePlusChildren RateModelCoverageLevelEnum = "EE+Children"
	RateModelCoverageLevelEnumEePlusSpouse   RateModelCoverageLevelEnum = "EE+Spouse"
	RateModelCoverageLevelEnumFamily         RateModelCoverageLevelEnum = "Family"
	RateModelCoverageLevelEnumPmpm           RateModelCoverageLevelEnum = "PMPM"
	RateModelCoverageLevelEnumSpouse         RateModelCoverageLevelEnum = "Spouse"
)

func (e *RateModelCoverageLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Child":
		fallthrough
	case "EE":
		fallthrough
	case "EE+1":
		fallthrough
	case "EE+Child":
		fallthrough
	case "EE+Children":
		fallthrough
	case "EE+Spouse":
		fallthrough
	case "Family":
		fallthrough
	case "PMPM":
		fallthrough
	case "Spouse":
		*e = RateModelCoverageLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RateModelCoverageLevelEnum: %s", s)
	}
}

type RateModel struct {
	// Amount of the member premium
	Amount float64 `json:"amount"`
	// Coverage level of the rate
	CoverageLevel RateModelCoverageLevelEnum `json:"coverage_level"`
	Period        TimePeriod                 `json:"period"`
}
