<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Profiles 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a sensor alert profile for a network.
     * 
     * Creates a sensor alert profile for a network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSensorAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSensorAlertsProfileResponse
     */
	public function createNetworkSensorAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSensorAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSensorAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sensor/alerts/profiles', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSensorAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSensorAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSensorAlertsProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkSensorAlertsProfile200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an organization-wide alert configuration
     * 
     * Create an organization-wide alert configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileResponse
     */
	public function createOrganizationAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/alerts/profiles', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationAlertsProfile201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a sensor alert profile from a network.
     * 
     * Deletes a sensor alert profile from a network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSensorAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSensorAlertsProfileResponse
     */
	public function deleteNetworkSensorAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSensorAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSensorAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sensor/alerts/profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSensorAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSensorAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Removes an organization-wide alert config
     * 
     * Removes an organization-wide alert config
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileResponse
     */
	public function deleteOrganizationAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/alerts/profiles/{alertConfigId}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrganizationAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Show details of a sensor alert profile for a network.
     * 
     * Show details of a sensor alert profile for a network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfileResponse
     */
	public function getNetworkSensorAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sensor/alerts/profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSensorAlertsProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfile200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all sensor alert profiles for a network.
     * 
     * Lists all sensor alert profiles for a network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfilesResponse
     */
	public function getNetworkSensorAlertsProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sensor/alerts/profiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSensorAlertsProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSensorAlertsProfiles200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all profiles in a network
     * 
     * List all profiles in a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesResponse
     */
	public function getNetworkSmProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/profiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfiles200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all organization-wide alert configurations
     * 
     * List all organization-wide alert configurations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesResponse
     */
	public function getOrganizationAlertsProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/alerts/profiles', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationAlertsProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationAlertsProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a switch profile port
     * 
     * Return a switch profile port
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortResponse
     */
	public function getOrganizationConfigTemplateSwitchProfilePort(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePort200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return all the ports of a switch profile
     * 
     * Return all the ports of a switch profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsResponse
     */
	public function getOrganizationConfigTemplateSwitchProfilePorts(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the switch profiles for your switch template configuration
     * 
     * List the switch profiles for your switch template configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesResponse
     */
	public function getOrganizationConfigTemplateSwitchProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationConfigTemplateSwitchProfiles200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfiles200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a sensor alert profile for a network.
     * 
     * Updates a sensor alert profile for a network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSensorAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSensorAlertsProfileResponse
     */
	public function updateNetworkSensorAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSensorAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSensorAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sensor/alerts/profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSensorAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSensorAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSensorAlertsProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSensorAlertsProfile200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an organization-wide alert config
     * 
     * Update an organization-wide alert config
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileResponse
     */
	public function updateOrganizationAlertsProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/alerts/profiles/{alertConfigId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationAlertsProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a switch profile port
     * 
     * Update a switch profile port
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortResponse
     */
	public function updateOrganizationConfigTemplateSwitchProfilePort(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}