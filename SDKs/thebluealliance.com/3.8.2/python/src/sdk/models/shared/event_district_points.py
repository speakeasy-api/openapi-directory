"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventDistrictPointsPoints:
    
    alliance_points: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alliance_points') }})
    r"""Points awarded for alliance selection"""  
    award_points: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('award_points') }})
    r"""Points awarded for event awards."""  
    elim_points: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elim_points') }})
    r"""Points awarded for elimination match performance."""  
    qual_points: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('qual_points') }})
    r"""Points awarded for qualification match performance."""  
    total: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""Total points awarded at this event."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventDistrictPointsTiebreakers:
    
    highest_qual_scores: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highest_qual_scores'), 'exclude': lambda f: f is None }})  
    qual_wins: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('qual_wins'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventDistrictPoints:
    r"""Successful response"""
    
    points: dict[str, EventDistrictPointsPoints] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('points') }})
    r"""Points gained for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the points as its value."""  
    tiebreakers: Optional[dict[str, EventDistrictPointsTiebreakers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tiebreakers'), 'exclude': lambda f: f is None }})
    r"""Tiebreaker values for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the tiebreaker elements as its value."""  
    