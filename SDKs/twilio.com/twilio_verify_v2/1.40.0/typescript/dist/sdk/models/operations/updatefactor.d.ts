import { SpeakeasyBase } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export declare const UpdateFactorServerList: readonly ["https://verify.twilio.com"];
export declare class UpdateFactorSecurity extends SpeakeasyBase {
    password: string;
    username: string;
}
export declare class UpdateFactorUpdateFactorRequest extends SpeakeasyBase {
    /**
     * The optional payload needed to verify the Factor for the first time. E.g. for a TOTP, the numeric code.
     */
    authPayload?: string;
    configAlg?: shared.FactorEnumTotpAlgorithmsEnum;
    /**
     * Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive
     */
    configCodeLength?: number;
    /**
     * The transport technology used to generate the Notification Token. Can be `apn`, `fcm` or `none`.
     *
     * @remarks
     *
     * Required when `factor_type` is `push`.
     */
    configNotificationPlatform?: string;
    /**
     * For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Required when `factor_type` is `push`. If specified, this value must be between 32 and 255 characters long.
     */
    configNotificationToken?: string;
    /**
     * The Verify Push SDK version used to configure the factor
     */
    configSDKVersion?: string;
    /**
     * The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive
     */
    configSkew?: number;
    /**
     * Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive
     */
    configTimeStep?: number;
    /**
     * The new friendly name of this Factor. It can be up to 64 characters.
     */
    friendlyName?: string;
}
export declare class UpdateFactorRequest extends SpeakeasyBase {
    /**
     * Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     */
    identity: string;
    requestBody?: UpdateFactorUpdateFactorRequest;
    /**
     * The unique SID identifier of the Service.
     */
    serviceSid: string;
    /**
     * A 34 character string that uniquely identifies this Factor.
     */
    sid: string;
}
export declare class UpdateFactorResponse extends SpeakeasyBase {
    contentType: string;
    statusCode: number;
    rawResponse?: AxiosResponse;
    /**
     * OK
     */
    verifyV2ServiceEntityFactor?: shared.VerifyV2ServiceEntityFactor;
}
