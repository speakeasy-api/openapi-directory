"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .campaigns import Campaigns
from .languages import Languages
from .media import Media
from .mediatypes import MediaTypes
from .resources import Resources
from .sources import Sources
from .tags import Tags
from .usermedialists import UserMediaLists

SERVERS = [
    "/api/v2",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""<div class=\\"swagger-ui-wrap extraFooter\\"><h3>Common Features / Behaviors</h3> <div class=\\"features\\"> <ul> <li><strong>* \\"sort\\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\\"example\\">name</span><span class=\\"description\\">sort results by name ascending</span></li> <li><span class=\\"example\\">-name</span><span class=\\"description\\">sort results by name descending</span></li> <li><span class=\\"example\\">-name,id</span><span class=\\"description\\">sort results by name descending and then by id ascending</span></li> <li><span class=\\"example\\">id,-dateContentAuthored</span><span class=\\"description\\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\\"http://www.ietf.org/rfc/rfc3339.txt\\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>"""
    campaigns: Campaigns
    r"""Information about campaigns"""
    languages: Languages
    r"""Information about languages"""
    media: Media
    r"""Information about media"""
    media_types: MediaTypes
    r"""Information about media types"""
    resources: Resources
    r"""Global Search"""
    sources: Sources
    r"""Information about tags"""
    tags: Tags
    r"""Information about tags"""
    user_media_lists: UserMediaLists
    r"""Get media from user generated lists."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.campaigns = Campaigns(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.languages = Languages(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.media = Media(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.media_types = MediaTypes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.resources = Resources(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.sources = Sources(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.tags = Tags(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.user_media_lists = UserMediaLists(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    