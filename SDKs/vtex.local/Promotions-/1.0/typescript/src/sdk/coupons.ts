/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Coupons {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Archive coupon by coupon code
   *
   * @remarks
   * Archives a specifc coupon by its coupon code.
   */
  archivebycouponcode(
    req: operations.ArchivebycouponcodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ArchivebycouponcodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ArchivebycouponcodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/rnb/pvt/archive/coupon/{couponCode}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ArchivebycouponcodeResponse =
        new operations.ArchivebycouponcodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.couponCode = JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all coupons
   *
   * @remarks
   *
   * > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.
   *
   *  Retrieves all coupons from an account.
   */
  getall(
    req: operations.GetallRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetallResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetallRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/rnb/pvt/coupon";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetallResponse = new operations.GetallResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getall200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getall200ApplicationJSONObjects = utils.objectToClass(
              httpRes?.data,
              operations.Getall200ApplicationJSON,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get archived coupon by coupon code
   *
   * @remarks
   * Retrieves a specific archived coupon by its coupon code.
   */
  getarchivedbycouponcode(
    req: operations.GetarchivedbycouponcodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetarchivedbycouponcodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetarchivedbycouponcodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/rnb/pvt/archive/coupon/{couponCode}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetarchivedbycouponcodeResponse =
        new operations.GetarchivedbycouponcodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getarchivedbycouponcode200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.Getarchivedbycouponcode200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get coupon by coupon code
   *
   * @remarks
   * Retrieves a specific coupon by its coupon code.
   */
  getbycouponcode(
    req: operations.GetbycouponcodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetbycouponcodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetbycouponcodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/rnb/pvt/coupon/{couponCode}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetbycouponcodeResponse =
        new operations.GetbycouponcodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getbycouponcode200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Getbycouponcode200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get coupon usage
   *
   * @remarks
   * Retrieves information about the coupon usage.
   */
  getusage(
    req: operations.GetusageRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetusageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetusageRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/rnb/pvt/coupon/usage/{couponCode}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetusageResponse = new operations.GetusageResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getusage200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Getusage200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Coupon Massive Generation
   *
   * @remarks
   * Generates a massive amount of coupons
   */
  massiveGeneration(
    req: operations.MassiveGenerationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MassiveGenerationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MassiveGenerationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/rnb/pvt/coupons";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MassiveGenerationResponse =
        new operations.MassiveGenerationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.couponCodes = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unarchive coupon by coupon code
   *
   * @remarks
   * Unarchives a specifc coupon by its coupon code.
   */
  unarchivebycouponcode(
    req: operations.UnarchivebycouponcodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UnarchivebycouponcodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UnarchivebycouponcodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/rnb/pvt/unarchive/coupon/{couponCode}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UnarchivebycouponcodeResponse =
        new operations.UnarchivebycouponcodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.couponCode = JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update coupon
   *
   * @remarks
   * Updates information of a specific coupon.
   */
  update(
    req: operations.UpdateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/rnb/pvt/coupon";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateResponse = new operations.UpdateResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.update200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Update200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create coupon
   *
   * @remarks
   * Creates a single new coupon.
   */
  postApiRnbPvtCoupon(
    req: operations.PostApiRnbPvtCouponRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostApiRnbPvtCouponResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostApiRnbPvtCouponRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/rnb/pvt/coupon/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostApiRnbPvtCouponResponse =
        new operations.PostApiRnbPvtCouponResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postApiRnbPvtCoupon201ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostApiRnbPvtCoupon201ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create multiple coupons
   *
   * @remarks
   * Creates multiple coupons with different coupon codes. This endpoint has a throttling of 60 requests per minute.
   */
  postApiRnbPvtMultipleCoupons(
    req: operations.PostApiRnbPvtMultipleCouponsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostApiRnbPvtMultipleCouponsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostApiRnbPvtMultipleCouponsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/rnb/pvt/multiple-coupons";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostApiRnbPvtMultipleCouponsResponse =
        new operations.PostApiRnbPvtMultipleCouponsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.items = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }
}
