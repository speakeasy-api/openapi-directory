"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import updatedomainconfigurationresponse as shared_updatedomainconfigurationresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDomainConfigurationRequestBodyAuthorizerConfig:
    r"""An object that specifies the authorization service for a domain."""
    
    allow_authorizer_override: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowAuthorizerOverride'), 'exclude': lambda f: f is None }})  
    default_authorizer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultAuthorizerName'), 'exclude': lambda f: f is None }})  
    
class UpdateDomainConfigurationRequestBodyDomainConfigurationStatusEnum(str, Enum):
    r"""The status to which the domain configuration should be updated."""
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDomainConfigurationRequestBody:
    
    authorizer_config: Optional[UpdateDomainConfigurationRequestBodyAuthorizerConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizerConfig'), 'exclude': lambda f: f is None }})
    r"""An object that specifies the authorization service for a domain."""  
    domain_configuration_status: Optional[UpdateDomainConfigurationRequestBodyDomainConfigurationStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainConfigurationStatus'), 'exclude': lambda f: f is None }})
    r"""The status to which the domain configuration should be updated."""  
    remove_authorizer_config: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('removeAuthorizerConfig'), 'exclude': lambda f: f is None }})
    r"""Removes the authorization configuration from a domain."""  
    

@dataclasses.dataclass
class UpdateDomainConfigurationRequest:
    
    domain_configuration_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'domainConfigurationName', 'style': 'simple', 'explode': False }})
    r"""The name of the domain configuration to be updated."""  
    request_body: UpdateDomainConfigurationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateDomainConfigurationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    certificate_validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CertificateValidationException"""  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    unauthorized_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnauthorizedException"""  
    update_domain_configuration_response: Optional[shared_updatedomainconfigurationresponse.UpdateDomainConfigurationResponse] = dataclasses.field(default=None)
    r"""Success"""  
    