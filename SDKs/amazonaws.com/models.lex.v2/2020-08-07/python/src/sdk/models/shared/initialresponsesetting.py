"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import conditionalspecification as shared_conditionalspecification
from ..shared import dialogcodehookinvocationsetting as shared_dialogcodehookinvocationsetting
from ..shared import dialogstate as shared_dialogstate
from ..shared import responsespecification as shared_responsespecification
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InitialResponseSetting:
    r"""Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots."""
    
    code_hook: Optional[shared_dialogcodehookinvocationsetting.DialogCodeHookInvocationSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('codeHook'), 'exclude': lambda f: f is None }})
    r"""Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation."""  
    conditional: Optional[shared_conditionalspecification.ConditionalSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conditional'), 'exclude': lambda f: f is None }})
    r"""Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition."""  
    initial_response: Optional[shared_responsespecification.ResponseSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initialResponse'), 'exclude': lambda f: f is None }})
    r"""Specifies a list of message groups that Amazon Lex uses to respond the user input."""  
    next_step: Optional[shared_dialogstate.DialogState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextStep'), 'exclude': lambda f: f is None }})  
    