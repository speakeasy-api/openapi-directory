"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dnskeyspec as shared_dnskeyspec
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ManagedZoneDNSSecConfigNonExistenceEnum(str, Enum):
    r"""Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF."""
    NSEC = 'NSEC'
    NSEC3 = 'NSEC3'

class ManagedZoneDNSSecConfigStateEnum(str, Enum):
    r"""Specifies whether DNSSEC is enabled, and what mode it is in."""
    OFF = 'OFF'
    ON = 'ON'
    TRANSFER = 'TRANSFER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ManagedZoneDNSSecConfig:
    
    default_key_specs: Optional[list[shared_dnskeyspec.DNSKeySpec]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultKeySpecs'), 'exclude': lambda f: f is None }})
    r"""Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})  
    non_existence: Optional[ManagedZoneDNSSecConfigNonExistenceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonExistence'), 'exclude': lambda f: f is None }})
    r"""Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF."""  
    state: Optional[ManagedZoneDNSSecConfigStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Specifies whether DNSSEC is enabled, and what mode it is in."""  
    