/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { AttendeesSignins } from "./attendeessignins";
import { Authentication } from "./authentication";
import * as shared from "./models/shared";
import { Passwords } from "./passwords";
import { TeamMembers } from "./teammembers";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "http://c19qrserver.local",
  /**
   * SwaggerHub API Auto Mocking
   */
  "https://virtserver.swaggerhub.com/aijaz/QRCodeSigninServer/1.1",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * This is the API for the COVID-19 Contact Tracing QRCode Signin Server
 */
export class SDK {
  /**
   * Endpoints related to attendees signing in on the premises
   */
  public attendeesSignins: AttendeesSignins;
  /**
   * Authentication-related endpoints
   */
  public authentication: Authentication;
  /**
   * Endpoints related to changing and resetting passwords
   */
  public passwords: Passwords;
  /**
   * Endpoints related to team member user accounts
   */
  public teamMembers: TeamMembers;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }

    this.attendeesSignins = new AttendeesSignins(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.authentication = new Authentication(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.passwords = new Passwords(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.teamMembers = new TeamMembers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
