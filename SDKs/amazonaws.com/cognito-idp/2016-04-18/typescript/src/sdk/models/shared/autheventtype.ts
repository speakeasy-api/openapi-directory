/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ChallengeResponseType } from "./challengeresponsetype";
import { EventContextDataType } from "./eventcontextdatatype";
import { EventFeedbackType } from "./eventfeedbacktype";
import { EventResponseTypeEnum } from "./eventresponsetypeenum";
import { EventRiskType } from "./eventrisktype";
import { EventTypeEnum } from "./eventtypeenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The authentication event type.
 */
export class AuthEventType extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ChallengeResponseType })
  @Expose({ name: "ChallengeResponses" })
  @Type(() => ChallengeResponseType)
  challengeResponses?: ChallengeResponseType[];

  @SpeakeasyMetadata()
  @Expose({ name: "CreationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "EventContextData" })
  @Type(() => EventContextDataType)
  eventContextData?: EventContextDataType;

  @SpeakeasyMetadata()
  @Expose({ name: "EventFeedback" })
  @Type(() => EventFeedbackType)
  eventFeedback?: EventFeedbackType;

  @SpeakeasyMetadata()
  @Expose({ name: "EventId" })
  eventId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "EventResponse" })
  eventResponse?: EventResponseTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "EventRisk" })
  @Type(() => EventRiskType)
  eventRisk?: EventRiskType;

  @SpeakeasyMetadata()
  @Expose({ name: "EventType" })
  eventType?: EventTypeEnum;
}
