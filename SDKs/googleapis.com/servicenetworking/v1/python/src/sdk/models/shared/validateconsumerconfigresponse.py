"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import subnetwork as shared_subnetwork
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ValidateConsumerConfigResponseValidationErrorEnum(str, Enum):
    r"""The first validation which failed."""
    VALIDATION_ERROR_UNSPECIFIED = 'VALIDATION_ERROR_UNSPECIFIED'
    VALIDATION_NOT_REQUESTED = 'VALIDATION_NOT_REQUESTED'
    SERVICE_NETWORKING_NOT_ENABLED = 'SERVICE_NETWORKING_NOT_ENABLED'
    NETWORK_NOT_FOUND = 'NETWORK_NOT_FOUND'
    NETWORK_NOT_PEERED = 'NETWORK_NOT_PEERED'
    NETWORK_PEERING_DELETED = 'NETWORK_PEERING_DELETED'
    NETWORK_NOT_IN_CONSUMERS_PROJECT = 'NETWORK_NOT_IN_CONSUMERS_PROJECT'
    NETWORK_NOT_IN_CONSUMERS_HOST_PROJECT = 'NETWORK_NOT_IN_CONSUMERS_HOST_PROJECT'
    HOST_PROJECT_NOT_FOUND = 'HOST_PROJECT_NOT_FOUND'
    CONSUMER_PROJECT_NOT_SERVICE_PROJECT = 'CONSUMER_PROJECT_NOT_SERVICE_PROJECT'
    RANGES_EXHAUSTED = 'RANGES_EXHAUSTED'
    RANGES_NOT_RESERVED = 'RANGES_NOT_RESERVED'
    RANGES_DELETED_LATER = 'RANGES_DELETED_LATER'
    COMPUTE_API_NOT_ENABLED = 'COMPUTE_API_NOT_ENABLED'
    USE_PERMISSION_NOT_FOUND = 'USE_PERMISSION_NOT_FOUND'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ValidateConsumerConfigResponse:
    r"""Successful response"""
    
    existing_subnetwork_candidates: Optional[list[shared_subnetwork.Subnetwork]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('existingSubnetworkCandidates'), 'exclude': lambda f: f is None }})
    r"""List of subnetwork candidates from the request which exist with the `ip_cidr_range`, `secondary_ip_cider_ranges`, and `outside_allocation` fields set."""  
    is_valid: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isValid'), 'exclude': lambda f: f is None }})
    r"""Indicates whether all the requested validations passed."""  
    validation_error: Optional[ValidateConsumerConfigResponseValidationErrorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validationError'), 'exclude': lambda f: f is None }})
    r"""The first validation which failed."""  
    