// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnum string

const (
	GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnumUnknown GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnum = ""
	GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnumA       GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnum = "A"
	GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnumJ       GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnum = "J"
	GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnumP       GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnum = "P"
	GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnumU       GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnum = "U"
	GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnumB       GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnum = "B"
	GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnumD       GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnum = "D"
)

func (e *GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "A":
		fallthrough
	case "J":
		fallthrough
	case "P":
		fallthrough
	case "U":
		fallthrough
	case "B":
		fallthrough
	case "D":
		*e = GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnum: %s", s)
	}
}

type GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnum string

const (
	GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnumUnknown GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnum = ""
	GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnumC       GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnum = "C"
	GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnumL       GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnum = "L"
	GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnumM       GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnum = "M"
	GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnumT       GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnum = "T"
	GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnumV       GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnum = "V"
	GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnumW       GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnum = "W"
)

func (e *GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "C":
		fallthrough
	case "L":
		fallthrough
	case "M":
		fallthrough
	case "T":
		fallthrough
	case "V":
		fallthrough
	case "W":
		*e = GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnum: %s", s)
	}
}

type GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum string

const (
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumUnknown GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = ""
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumC       GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = "C"
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumD       GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = "D"
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumE       GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = "E"
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumH       GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = "H"
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumI       GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = "I"
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumN       GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = "N"
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumO       GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = "O"
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumP       GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = "P"
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumQ       GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = "Q"
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumS       GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = "S"
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumU       GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = "U"
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumV       GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = "V"
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumW       GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = "W"
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumX       GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = "X"
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumY       GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = "Y"
	GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnumZ       GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum = "Z"
)

func (e *GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "C":
		fallthrough
	case "D":
		fallthrough
	case "E":
		fallthrough
	case "H":
		fallthrough
	case "I":
		fallthrough
	case "N":
		fallthrough
	case "O":
		fallthrough
	case "P":
		fallthrough
	case "Q":
		fallthrough
	case "S":
		fallthrough
	case "U":
		fallthrough
	case "V":
		fallthrough
	case "W":
		fallthrough
	case "X":
		fallthrough
	case "Y":
		fallthrough
	case "Z":
		*e = GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum: %s", s)
	}
}

type GetSchedulesScheduleBSubIDRequest struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID []string `queryParam:"style=form,explode=true,name=committee_id"`
	// Description of disbursement
	DisbursementDescription []string `queryParam:"style=form,explode=true,name=disbursement_description"`
	// Disbursement purpose category
	DisbursementPurposeCategory []string `queryParam:"style=form,explode=true,name=disbursement_purpose_category"`
	// An unique identifier for each page where the electronic or paper filing is reported.
	//
	ImageNumber []string `queryParam:"style=form,explode=true,name=image_number"`
	// When sorting by `disbursement_amount`, this is populated with the `disbursement_amount` of the last result.  However, you will need to pass the index of that last result to `last_index` to get the next page.
	LastDisbursementAmount *float32 `queryParam:"style=form,explode=true,name=last_disbursement_amount"`
	// When sorting by `disbursement_date`, this is populated with the `disbursement_date` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page.
	LastDisbursementDate *types.Date `queryParam:"style=form,explode=true,name=last_disbursement_date"`
	// Index of last result from previous page
	LastIndex *int `queryParam:"style=form,explode=true,name=last_index"`
	// Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
	LineNumber *string `queryParam:"style=form,explode=true,name=line_number"`
	// Filter for all amounts less than a value.
	MaxAmount *string `queryParam:"style=form,explode=true,name=max_amount"`
	// Maximum date
	MaxDate *types.Date `queryParam:"style=form,explode=true,name=max_date"`
	// Maxium image number of the page where the schedule item is reported
	MaxImageNumber *string `queryParam:"style=form,explode=true,name=max_image_number"`
	// Filter for all amounts greater than a value.
	MinAmount *string `queryParam:"style=form,explode=true,name=min_amount"`
	// Minimum date
	MinDate *types.Date `queryParam:"style=form,explode=true,name=min_date"`
	// Minium image number of the page where the schedule item is reported
	MinImageNumber *string `queryParam:"style=form,explode=true,name=min_image_number"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// City of recipient
	RecipientCity []string `queryParam:"style=form,explode=true,name=recipient_city"`
	// The FEC identifier should be represented here if the contributor is registered with the FEC.
	RecipientCommitteeID []string `queryParam:"style=form,explode=true,name=recipient_committee_id"`
	// Name of the entity receiving the disbursement
	RecipientName []string `queryParam:"style=form,explode=true,name=recipient_name"`
	// State of recipient
	RecipientState []string `queryParam:"style=form,explode=true,name=recipient_state"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// The one-letter designation code of the organization:
	//          - A authorized by a candidate
	//          - J joint fundraising committee
	//          - P principal campaign committee of a candidate
	//          - U unauthorized
	//          - B lobbyist/registrant PAC
	//          - D leadership PAC
	//
	SpenderCommitteeDesignation []GetSchedulesScheduleBSubIDSpenderCommitteeDesignationEnum `queryParam:"style=form,explode=true,name=spender_committee_designation"`
	// The one-letter code for the kind for organization:
	//         - C corporation
	//         - L labor organization
	//         - M membership organization
	//         - T trade association
	//         - V cooperative
	//         - W corporation without capital stock
	//
	SpenderCommitteeOrgType []GetSchedulesScheduleBSubIDSpenderCommitteeOrgTypeEnum `queryParam:"style=form,explode=true,name=spender_committee_org_type"`
	// The one-letter type code of the organization:
	//         - C communication cost
	//         - D delegate
	//         - E electioneering communication
	//         - H House
	//         - I independent expenditure filer (not a committee)
	//         - N PAC - nonqualified
	//         - O independent expenditure-only (super PACs)
	//         - P presidential
	//         - Q PAC - qualified
	//         - S Senate
	//         - U single candidate independent expenditure
	//         - V PAC with non-contribution account, nonqualified
	//         - W PAC with non-contribution account, qualified
	//         - X party, nonqualified
	//         - Y party, qualified
	//         - Z national party non-federal account
	//
	SpenderCommitteeType []GetSchedulesScheduleBSubIDSpenderCommitteeTypeEnum `queryParam:"style=form,explode=true,name=spender_committee_type"`
	SubID                string                                               `pathParam:"style=simple,explode=false,name=sub_id"`
	// This is a two-year period that is derived from the year a transaction took place in the
	// Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
	// (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
	// the two_year_transaction_period is named after the ending, even-numbered year. If we do not
	// have the date  of the transaction, we fall back to using the report year (report_year in both
	// tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
	// specified, the results default to the most current cycle.
	//
	TwoYearTransactionPeriod []int `queryParam:"style=form,explode=true,name=two_year_transaction_period"`
}

type GetSchedulesScheduleBSubIDResponse struct {
	ContentType   string
	ScheduleBPage *shared.ScheduleBPage
	StatusCode    int
	RawResponse   *http.Response
}
