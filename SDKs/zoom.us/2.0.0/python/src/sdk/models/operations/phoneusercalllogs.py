"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class PhoneUserCallLogsSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class PhoneUserCallLogsTimeTypeEnum(str, Enum):
    r"""Enables you to sort call logs by start or end time. Choose the sort time value. Values include `startTime` or `endTime`."""
    START_TIME = 'startTime'
    END_TIME = 'endTime'

class PhoneUserCallLogsTypeEnum(str, Enum):
    ALL = 'all'
    MISSED = 'missed'


@dataclasses.dataclass
class PhoneUserCallLogsRequest:
    
    from_: date = dataclasses.field(metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Start date in 'yyyy-mm-dd' format. The date range defined by the \\"from\\" and \\"to\\" parameters should only be one month as the report includes only one month worth of data at once."""  
    to: date = dataclasses.field(metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""End date."""  
    user_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'userId', 'style': 'simple', 'explode': False }})
    r"""The user ID or email address of the user. For user-level apps, pass `me` as the value for userId."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'phone_number', 'style': 'form', 'explode': True }})
    r"""Filter API responses to include call logs of only the phone number defined in this field."""  
    time_type: Optional[PhoneUserCallLogsTimeTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'time_type', 'style': 'form', 'explode': True }})
    r"""Enables you to sort call logs by start or end time. Choose the sort time value. Values include `startTime` or `endTime`."""  
    type: Optional[PhoneUserCallLogsTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})  
    

@dataclasses.dataclass
class PhoneUserCallLogs200ApplicationXMLCallLogsAcceptedBy:
    r"""Indicates who accepted the call."""
    
    extension_number: Optional[str] = dataclasses.field(default=None)  
    location: Optional[str] = dataclasses.field(default=None)  
    name: Optional[str] = dataclasses.field(default=None)  
    number_type: Optional[str] = dataclasses.field(default=None)  
    phone_number: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class PhoneUserCallLogs200ApplicationXMLCallLogsForwardedBy:
    r"""Indicates where the call was forwarded from."""
    
    extension_number: Optional[str] = dataclasses.field(default=None)  
    location: Optional[str] = dataclasses.field(default=None)  
    name: Optional[str] = dataclasses.field(default=None)  
    number_type: Optional[str] = dataclasses.field(default=None)  
    phone_number: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class PhoneUserCallLogs200ApplicationXMLCallLogsForwardedTo:
    r"""Indicates who the call was forwarded to."""
    
    extension_number: Optional[str] = dataclasses.field(default=None)  
    location: Optional[str] = dataclasses.field(default=None)  
    name: Optional[str] = dataclasses.field(default=None)  
    number_type: Optional[str] = dataclasses.field(default=None)  
    phone_number: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class PhoneUserCallLogs200ApplicationXMLCallLogsOutgoingBy:
    
    extension_number: Optional[str] = dataclasses.field(default=None)  
    location: Optional[str] = dataclasses.field(default=None)  
    name: Optional[str] = dataclasses.field(default=None)  
    number_type: Optional[str] = dataclasses.field(default=None)  
    phone_number: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class PhoneUserCallLogs200ApplicationXMLCallLogsSite:
    
    id: Optional[str] = dataclasses.field(default=None)
    r"""Target [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) in which the phone number was assigned. Sites allow you to organize the phone users in your organization. For example, you sites could be created based on different office locations."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the site where the phone number is assigned."""  
    

@dataclasses.dataclass
class PhoneUserCallLogs200ApplicationXMLCallLogs:
    
    accepted_by: Optional[PhoneUserCallLogs200ApplicationXMLCallLogsAcceptedBy] = dataclasses.field(default=None)
    r"""Indicates who accepted the call."""  
    call_id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the phone call."""  
    callee_name: Optional[str] = dataclasses.field(default=None)
    r"""Contact name of callee"""  
    callee_number: Optional[str] = dataclasses.field(default=None)
    r"""Number of callee"""  
    callee_number_type: Optional[str] = dataclasses.field(default=None)
    r"""Type of callee's number. 1 - internal | 2 - external"""  
    caller_name: Optional[str] = dataclasses.field(default=None)
    r"""Contact name of caller"""  
    caller_number: Optional[str] = dataclasses.field(default=None)
    r"""Number of caller"""  
    caller_number_type: Optional[str] = dataclasses.field(default=None)
    r"""Type of caller's number. 1 - internal | 2 - external"""  
    charge: Optional[str] = dataclasses.field(default=None)
    r"""Billing charge for the call."""  
    client_code: Optional[str] = dataclasses.field(default=None)
    r"""Client code."""  
    date_time: Optional[str] = dataclasses.field(default=None)
    r"""Start time of the call"""  
    direction: Optional[str] = dataclasses.field(default=None)
    r"""Direction of the call. \\"inbound\\" | \\"outbound\\" """  
    duration: Optional[int] = dataclasses.field(default=None)
    r"""Duration of the call in seconds."""  
    forwarded_by: Optional[PhoneUserCallLogs200ApplicationXMLCallLogsForwardedBy] = dataclasses.field(default=None)
    r"""Indicates where the call was forwarded from."""  
    forwarded_to: Optional[PhoneUserCallLogs200ApplicationXMLCallLogsForwardedTo] = dataclasses.field(default=None)
    r"""Indicates who the call was forwarded to."""  
    has_recording: Optional[bool] = dataclasses.field(default=None)
    r"""Whether the call has a recording or not."""  
    has_voicemail: Optional[bool] = dataclasses.field(default=None)
    r"""Whether the call has voicemail or not."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Call Log ID"""  
    outgoing_by: Optional[PhoneUserCallLogs200ApplicationXMLCallLogsOutgoingBy] = dataclasses.field(default=None)  
    path: Optional[str] = dataclasses.field(default=None)
    r"""Path of the call log."""  
    rate: Optional[str] = dataclasses.field(default=None)
    r"""Billing rate for the call."""  
    recording_type: Optional[str] = dataclasses.field(default=None)
    r"""Recording type. <br>
    * `1` - On-demand recording.<br>
    * `2` - Automatic recording.
    """  
    result: Optional[str] = dataclasses.field(default=None)
    r"""Result of the call. \\"call_connected\\" | \\"recorded\\" | \\"no_answer\\" """  
    site: Optional[PhoneUserCallLogs200ApplicationXMLCallLogsSite] = dataclasses.field(default=None)  
    user_id: Optional[str] = dataclasses.field(default=None)
    r"""User ID or user email."""  
    waiting_time: Optional[int] = dataclasses.field(default=None)
    r"""Waiting time for the call, in seconds."""  
    

@dataclasses.dataclass
class PhoneUserCallLogs200ApplicationXML:
    r"""Phone User Call Logs"""
    
    call_logs: Optional[list[PhoneUserCallLogs200ApplicationXMLCallLogs]] = dataclasses.field(default=None)
    r"""Call Log"""  
    from_: Optional[str] = dataclasses.field(default=None)
    r"""Date from which you would like to view the logs."""  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None)
    r"""Total number of pages"""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned within a single API call for each page."""  
    to: Optional[str] = dataclasses.field(default=None)
    r"""Date up to which you would like to view the phone log."""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The total number of records returned."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PhoneUserCallLogs200ApplicationJSONCallLogsAcceptedBy:
    r"""Indicates who accepted the call."""
    
    extension_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension_number'), 'exclude': lambda f: f is None }})  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    number_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number_type'), 'exclude': lambda f: f is None }})  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_number'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PhoneUserCallLogs200ApplicationJSONCallLogsForwardedBy:
    r"""Indicates where the call was forwarded from."""
    
    extension_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension_number'), 'exclude': lambda f: f is None }})  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    number_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number_type'), 'exclude': lambda f: f is None }})  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_number'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PhoneUserCallLogs200ApplicationJSONCallLogsForwardedTo:
    r"""Indicates who the call was forwarded to."""
    
    extension_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension_number'), 'exclude': lambda f: f is None }})  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    number_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number_type'), 'exclude': lambda f: f is None }})  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_number'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PhoneUserCallLogs200ApplicationJSONCallLogsOutgoingBy:
    
    extension_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension_number'), 'exclude': lambda f: f is None }})  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    number_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number_type'), 'exclude': lambda f: f is None }})  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_number'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PhoneUserCallLogs200ApplicationJSONCallLogsSite:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Target [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) in which the phone number was assigned. Sites allow you to organize the phone users in your organization. For example, you sites could be created based on different office locations."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the site where the phone number is assigned."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PhoneUserCallLogs200ApplicationJSONCallLogs:
    
    accepted_by: Optional[PhoneUserCallLogs200ApplicationJSONCallLogsAcceptedBy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accepted_by'), 'exclude': lambda f: f is None }})
    r"""Indicates who accepted the call."""  
    call_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the phone call."""  
    callee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callee_name'), 'exclude': lambda f: f is None }})
    r"""Contact name of callee"""  
    callee_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callee_number'), 'exclude': lambda f: f is None }})
    r"""Number of callee"""  
    callee_number_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callee_number_type'), 'exclude': lambda f: f is None }})
    r"""Type of callee's number. 1 - internal | 2 - external"""  
    caller_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caller_name'), 'exclude': lambda f: f is None }})
    r"""Contact name of caller"""  
    caller_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caller_number'), 'exclude': lambda f: f is None }})
    r"""Number of caller"""  
    caller_number_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caller_number_type'), 'exclude': lambda f: f is None }})
    r"""Type of caller's number. 1 - internal | 2 - external"""  
    charge: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('charge'), 'exclude': lambda f: f is None }})
    r"""Billing charge for the call."""  
    client_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_code'), 'exclude': lambda f: f is None }})
    r"""Client code."""  
    date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_time'), 'exclude': lambda f: f is None }})
    r"""Start time of the call"""  
    direction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})
    r"""Direction of the call. \\"inbound\\" | \\"outbound\\" """  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Duration of the call in seconds."""  
    forwarded_by: Optional[PhoneUserCallLogs200ApplicationJSONCallLogsForwardedBy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forwarded_by'), 'exclude': lambda f: f is None }})
    r"""Indicates where the call was forwarded from."""  
    forwarded_to: Optional[PhoneUserCallLogs200ApplicationJSONCallLogsForwardedTo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forwarded_to'), 'exclude': lambda f: f is None }})
    r"""Indicates who the call was forwarded to."""  
    has_recording: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_recording'), 'exclude': lambda f: f is None }})
    r"""Whether the call has a recording or not."""  
    has_voicemail: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_voicemail'), 'exclude': lambda f: f is None }})
    r"""Whether the call has voicemail or not."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Call Log ID"""  
    outgoing_by: Optional[PhoneUserCallLogs200ApplicationJSONCallLogsOutgoingBy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outgoing_by'), 'exclude': lambda f: f is None }})  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    r"""Path of the call log."""  
    rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rate'), 'exclude': lambda f: f is None }})
    r"""Billing rate for the call."""  
    recording_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recording_type'), 'exclude': lambda f: f is None }})
    r"""Recording type. <br>
    * `1` - On-demand recording.<br>
    * `2` - Automatic recording.
    """  
    result: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result'), 'exclude': lambda f: f is None }})
    r"""Result of the call. \\"call_connected\\" | \\"recorded\\" | \\"no_answer\\" """  
    site: Optional[PhoneUserCallLogs200ApplicationJSONCallLogsSite] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site'), 'exclude': lambda f: f is None }})  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }})
    r"""User ID or user email."""  
    waiting_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waiting_time'), 'exclude': lambda f: f is None }})
    r"""Waiting time for the call, in seconds."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PhoneUserCallLogs200ApplicationJSON:
    r"""Phone User Call Logs"""
    
    call_logs: Optional[list[PhoneUserCallLogs200ApplicationJSONCallLogs]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_logs'), 'exclude': lambda f: f is None }})
    r"""Call Log"""  
    from_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'exclude': lambda f: f is None }})
    r"""Date from which you would like to view the logs."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_count'), 'exclude': lambda f: f is None }})
    r"""Total number of pages"""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single API call for each page."""  
    to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'exclude': lambda f: f is None }})
    r"""Date up to which you would like to view the phone log."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The total number of records returned."""  
    

@dataclasses.dataclass
class PhoneUserCallLogsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    phone_user_call_logs_200_application_json_object: Optional[PhoneUserCallLogs200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status code:** `200`
    User's call logs returned.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    