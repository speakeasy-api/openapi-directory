/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NullableSimpleUser } from "./nullablesimpleuser";
import { OrganizationSimple } from "./organizationsimple";
import { Expose, Type } from "class-transformer";

export class OrgMembershipPermissions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "can_create_repository" })
  canCreateRepository: boolean;
}

/**
 * The user's membership type in the organization.
 */
export enum OrgMembershipRoleEnum {
  Admin = "admin",
  Member = "member",
  BillingManager = "billing_manager",
}

/**
 * The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
 */
export enum OrgMembershipStateEnum {
  Active = "active",
  Pending = "pending",
}

/**
 * Org Membership
 */
export class OrgMembership extends SpeakeasyBase {
  /**
   * A GitHub organization.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organization" })
  @Type(() => OrganizationSimple)
  organization: OrganizationSimple;

  @SpeakeasyMetadata()
  @Expose({ name: "organization_url" })
  organizationUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "permissions" })
  @Type(() => OrgMembershipPermissions)
  permissions?: OrgMembershipPermissions;

  /**
   * The user's membership type in the organization.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "role" })
  role: OrgMembershipRoleEnum;

  /**
   * The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: OrgMembershipStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  /**
   * A GitHub user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => NullableSimpleUser)
  user: NullableSimpleUser;
}
