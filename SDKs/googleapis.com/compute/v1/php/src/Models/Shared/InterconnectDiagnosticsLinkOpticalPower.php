<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class InterconnectDiagnosticsLinkOpticalPower
{
    /**
     * The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include: - OK: The value has not crossed a warning threshold. - LOW_WARNING: The value has crossed below the low warning threshold. - HIGH_WARNING: The value has crossed above the high warning threshold. - LOW_ALARM: The value has crossed below the low alarm threshold. - HIGH_ALARM: The value has crossed above the high alarm threshold. 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\InterconnectDiagnosticsLinkOpticalPowerStateEnum $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\InterconnectDiagnosticsLinkOpticalPowerStateEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?InterconnectDiagnosticsLinkOpticalPowerStateEnum $state = null;
    
    /**
     * Value of the current receiving or transmitting optical power, read in dBm. Take a known good optical value, give it a 10% margin and trigger warnings relative to that value. In general, a -7dBm warning and a -11dBm alarm are good optical value estimates for most links.
     * 
     * @var ?float $value
     */
	#[\JMS\Serializer\Annotation\SerializedName('value')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $value = null;
    
	public function __construct()
	{
		$this->state = null;
		$this->value = null;
	}
}
