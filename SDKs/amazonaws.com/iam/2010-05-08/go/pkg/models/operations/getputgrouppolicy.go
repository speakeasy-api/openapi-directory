// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETPutGroupPolicyActionEnum
type GETPutGroupPolicyActionEnum string

const (
	GETPutGroupPolicyActionEnumPutGroupPolicy GETPutGroupPolicyActionEnum = "PutGroupPolicy"
)

func (e GETPutGroupPolicyActionEnum) ToPointer() *GETPutGroupPolicyActionEnum {
	return &e
}

func (e *GETPutGroupPolicyActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PutGroupPolicy":
		*e = GETPutGroupPolicyActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPutGroupPolicyActionEnum: %v", v)
	}
}

// GETPutGroupPolicyVersionEnum
type GETPutGroupPolicyVersionEnum string

const (
	GETPutGroupPolicyVersionEnumTwoThousandAndTen0508 GETPutGroupPolicyVersionEnum = "2010-05-08"
)

func (e GETPutGroupPolicyVersionEnum) ToPointer() *GETPutGroupPolicyVersionEnum {
	return &e
}

func (e *GETPutGroupPolicyVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-08":
		*e = GETPutGroupPolicyVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPutGroupPolicyVersionEnum: %v", v)
	}
}

type GETPutGroupPolicyRequest struct {
	Action GETPutGroupPolicyActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
	GroupName string `queryParam:"style=form,explode=true,name=GroupName"`
	// <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to = IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
	PolicyDocument string `queryParam:"style=form,explode=true,name=PolicyDocument"`
	// <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
	PolicyName        string                       `queryParam:"style=form,explode=true,name=PolicyName"`
	Version           GETPutGroupPolicyVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETPutGroupPolicyResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
