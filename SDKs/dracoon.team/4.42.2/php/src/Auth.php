<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Auth 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Complete OpenID Connect authentication
     * 
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.14.0</h3>
     * 
     * ### Description:  
     * This is the second step of the OpenID Connect authentication.  
     * The user hands over the authorization code and is logged in.
     * 
     * ### Precondition:
     * Existing user with activated OpenID Connect authentication that is **NOT** locked.
     * 
     * ### Postcondition:
     * User is logged in.
     * 
     * ### Further Information:
     * None.
     * http://openid.net/developers/specs - OpenID Specifications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompleteOpenIdLoginRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CompleteOpenIdLoginResponse
     * @see http://openid.net/developers/specs
     */
	public function completeOpenIdLogin(
        \OpenAPI\OpenAPI\Models\Operations\CompleteOpenIdLoginRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CompleteOpenIdLoginResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/auth/openid/login');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CompleteOpenIdLoginRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompleteOpenIdLoginResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->loginResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LoginResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 502) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiate OpenID Connect authentication
     * 
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.14.0</h3>
     * 
     * ### Description:
     * This is the first step of the OpenID Connect authentication.  
     * The user is send to the OpenID Connect identity provider to authenticate himself and retrieve an authorization code.
     * 
     * ### Precondition:
     * None.
     * 
     * ### Postcondition:
     * User is redirected to OpenID Connect identity provider to authenticate himself.
     * 
     * ### Further Information:
     * None.
     * http://openid.net/developers/specs - OpenID Specifications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InitiateOpenIdLoginRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InitiateOpenIdLoginResponse
     * @see http://openid.net/developers/specs
     */
	public function initiateOpenIdLogin(
        \OpenAPI\OpenAPI\Models\Operations\InitiateOpenIdLoginRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InitiateOpenIdLoginResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/auth/openid/login');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\InitiateOpenIdLoginRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InitiateOpenIdLoginResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 302) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 502) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Authenticate user (Login)
     * 
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.13.0</h3>
     * 
     * ### Description:
     * Authenticates user and provides an authentication token (`X-Sds-Auth-Token`) that is required for the most operations.
     * 
     * ### Precondition:
     * Existing user that is **NOT** locked.
     * 
     * ### Postcondition:
     * User is logged in.
     * 
     * ### Further Information:
     * The provided token is valid for **two hours**, every usage resets this period to two full hours again.  
     * Logging off invalidates the token.  
     * 
     * ### Available authentication methods:
     * <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
     * <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
     * 
     * | Authentication Method (`authType`) | Description |
     * | :--- | :--- |
     * | `basic` | Log in with credentials stored in the database <br>Formerly known as `sql`.|
     * | `active_directory` | Log in with Active Directory credentials |
     * | `radius` | Log in with RADIUS username, PIN and token password.<br>Token (request parameter) may be set, otherwise this parameter is ignored. If token is set, password is optional. |
     * | `openid` | Please use `POST /auth/openid/login` API to login with OpenID Connect identity |
     * 
     * </details>
     * https://tools.ietf.org/html/rfc2865 - Remote Authentication Dial In User Service (RADIUS)
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\LoginRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LoginResponse
     * @see https://tools.ietf.org/html/rfc2865
     */
	public function login(
        \OpenAPI\OpenAPI\Models\Shared\LoginRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LoginResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/auth/login');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LoginResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->loginResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LoginResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 502) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 412) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->radiusChallengeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RadiusChallengeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Ping
     * 
     * ### Description:
     * Test connection to DRACOON Core Service.
     * 
     * ### Precondition:
     * None.
     * 
     * ### Postcondition:
     * `200 OK` with current date string is returned if successful.
     * 
     * ### Further Information:
     * None.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PingResponse
     */
	public function ping(
    ): \OpenAPI\OpenAPI\Models\Operations\PingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/auth/ping');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->ping200TextPlainString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 406) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->errorResponse = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Recover username
     * 
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.13.0</h3>
     * 
     * ### Description:  
     * Request an email with the user names of all accounts connected to the email.
     * 
     * ### Precondition:
     * Valid email address.
     * 
     * ### Postcondition:
     * An email is sent to the provided address, with a list of account user names connected to it.
     * 
     * ### Further Information:
     * None.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RecoverUserNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RecoverUserNameResponse
     */
	public function recoverUserName(
        \OpenAPI\OpenAPI\Models\Shared\RecoverUserNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RecoverUserNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/auth/recover_username');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecoverUserNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request password reset
     * 
     * ### Description:  
     * Request an email with a password reset token for a certain user to reset password.
     * 
     * ### Precondition:
     * Registered user account.
     * 
     * ### Postcondition:
     * Provided user receives email with password reset token.
     * 
     * ### Further Information:
     * None.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ResetPasswordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestPasswordResetResponse
     */
	public function requestPasswordReset(
        \OpenAPI\OpenAPI\Models\Shared\ResetPasswordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestPasswordResetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/auth/reset_password');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestPasswordResetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 406) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reset password
     * 
     * ### Description:  
     * Resets user's password.
     * 
     * ### Precondition:
     * User received a password reset token.
     * 
     * ### Postcondition:
     * User's password is reset to the provided password.
     * 
     * ### Further Information:
     * Forbidden characters in passwords: [`&`, `'`, `<`, `>`]
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResetPasswordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetPasswordResponse
     */
	public function resetPassword(
        \OpenAPI\OpenAPI\Models\Operations\ResetPasswordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResetPasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/auth/reset_password/{token}', \OpenAPI\OpenAPI\Models\Operations\ResetPasswordRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resetPasswordWithTokenRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetPasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resetPassword400ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validate information for password reset
     * 
     * ### Description:  
     * Request all information for a password change dialogue e.g. real name of user.
     * 
     * ### Precondition:
     * User received a password reset token.
     * 
     * ### Postcondition:
     * Context information is returned.
     * 
     * ### Further Information:
     * None.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ValidateResetPasswordTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ValidateResetPasswordTokenResponse
     */
	public function validateResetPasswordToken(
        \OpenAPI\OpenAPI\Models\Operations\ValidateResetPasswordTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ValidateResetPasswordTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/auth/reset_password/{token}', \OpenAPI\OpenAPI\Models\Operations\ValidateResetPasswordTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ValidateResetPasswordTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resetPasswordTokenValidateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResetPasswordTokenValidateResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
}