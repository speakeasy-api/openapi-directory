// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetIceServerConfigHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// GetIceServerConfigRequestBodyServiceEnum - Specifies the desired service. Currently, <code>TURN</code> is the only valid value.
type GetIceServerConfigRequestBodyServiceEnum string

const (
	GetIceServerConfigRequestBodyServiceEnumTurn GetIceServerConfigRequestBodyServiceEnum = "TURN"
)

func (e *GetIceServerConfigRequestBodyServiceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TURN":
		*e = GetIceServerConfigRequestBodyServiceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIceServerConfigRequestBodyServiceEnum: %s", s)
	}
}

type GetIceServerConfigRequestBody struct {
	// The ARN of the signaling channel to be used for the peer-to-peer connection between configured peers.
	ChannelARN string `json:"ChannelARN"`
	// Unique identifier for the viewer. Must be unique within the signaling channel.
	ClientID *string `json:"ClientId,omitempty"`
	// Specifies the desired service. Currently, <code>TURN</code> is the only valid value.
	Service *GetIceServerConfigRequestBodyServiceEnum `json:"Service,omitempty"`
	// An optional user ID to be associated with the credentials.
	Username *string `json:"Username,omitempty"`
}

type GetIceServerConfigRequest struct {
	Headers GetIceServerConfigHeaders
	Request GetIceServerConfigRequestBody `request:"mediaType=application/json"`
}

type GetIceServerConfigResponse struct {
	// ClientLimitExceededException
	ClientLimitExceededException interface{}
	ContentType                  string
	// Success
	GetIceServerConfigResponse *shared.GetIceServerConfigResponse
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// InvalidClientException
	InvalidClientException interface{}
	// NotAuthorizedException
	NotAuthorizedException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// SessionExpiredException
	SessionExpiredException interface{}
}
