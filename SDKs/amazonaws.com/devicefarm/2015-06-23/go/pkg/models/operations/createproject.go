// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateProjectXAmzTargetEnum
type CreateProjectXAmzTargetEnum string

const (
	CreateProjectXAmzTargetEnumDeviceFarm20150623CreateProject CreateProjectXAmzTargetEnum = "DeviceFarm_20150623.CreateProject"
)

func (e CreateProjectXAmzTargetEnum) ToPointer() *CreateProjectXAmzTargetEnum {
	return &e
}

func (e *CreateProjectXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DeviceFarm_20150623.CreateProject":
		*e = CreateProjectXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectXAmzTargetEnum: %v", v)
	}
}

type CreateProjectRequest struct {
	CreateProjectRequest shared.CreateProjectRequest `request:"mediaType=application/json"`
	XAmzAlgorithm        *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget           CreateProjectXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateProjectResponse struct {
	// ArgumentException
	ArgumentException interface{}
	ContentType       string
	// Success
	CreateProjectResult *shared.CreateProjectResult
	// LimitExceededException
	LimitExceededException interface{}
	// NotFoundException
	NotFoundException interface{}
	// ServiceAccountException
	ServiceAccountException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// TagOperationException
	TagOperationException interface{}
}
