"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProxyCreateInvoiceAdjustment:
    r"""Container for custom fields of an Invoice Adjustment object."""
    
    amount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount') }})
    r"""The amount of the invoice adjustment.
    **Character limit**: 16 **Values**: a valid currency amount
    """  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})
    r"""Indicates whether the adjustment credits or debits the invoice amount.
    **Character limit**: 6 **Values**: `Credit`, `Charge`
    """  
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountId'), 'exclude': lambda f: f is None }})
    r"""The ID of the account that owns the invoice.
    **Character limit**: 32 **Values**: inherited from Account.ID for the invoice owner
    """  
    accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for the invoice adjustment."""  
    adjustment_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdjustmentDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the invoice adjustment is applied. This date must be the same as the invoice's date or later.
    **Character limit**: 29 **Values**: Leave null to automatically generate the current date
    """  
    adjustment_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdjustmentNumber'), 'exclude': lambda f: f is None }})
    r"""A unique string to identify an individual invoice adjustment.
    **Character limit**: 255 **Values**: automatically generated
    """  
    comments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comments'), 'exclude': lambda f: f is None }})
    r"""Use this field to record comments about the invoice adjustment.
    **Character limit**: 255 **Values**: a string of 255 characters or fewer
    """  
    customer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerName'), 'exclude': lambda f: f is None }})
    r"""The name of the account that owns the associated invoice.
    **Character limit**: 50 **Values**: inherited from Account.Name
    """  
    customer_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerNumber'), 'exclude': lambda f: f is None }})
    r"""The unique account number of the customer's account.
    **Character limit**: 70 **Values**: inherited from Account.AccountNumber
    """  
    impact_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImpactAmount'), 'exclude': lambda f: f is None }})
    r"""The amount that changes the balance of the associated invoice.
    **Character limit**: 16 **Values**: automatically calculated
    """  
    invoice_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceId'), 'exclude': lambda f: f is None }})
    r"""The ID of the invoice associated with the adjustment. This field is only required if you don't specify a value for the `InvoiceNumber` field.
    **Character limit**: 32 **Values**: a valid invoice ID
    """  
    invoice_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceNumber'), 'exclude': lambda f: f is None }})
    r"""The unique identification number for the associated invoice. This field is only required if you don't specify a value for the `InvoiceId` field.
    **Character limit**: 32 **Values**: a valid invoice number
    """  
    reason_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReasonCode'), 'exclude': lambda f: f is None }})
    r"""A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
    **Character limit**: 32 **V****alues**: a valid reason code
    """  
    reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReferenceId'), 'exclude': lambda f: f is None }})
    r"""A code to reference an object external to Zuora. For example, you can use this field to reference a case number in an external system.
    **Character limit**: 100 **Values**: a string of 100 characters or fewer
    """  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})
    r"""The status of the invoice adjustment. This field is only required in the Query call, but is automatically generated in other calls.
    **Character limit**: 9 **Values**: `Canceled`, `Processed`
    """  
    