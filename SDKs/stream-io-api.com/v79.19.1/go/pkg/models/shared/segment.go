// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type SegmentTypeEnum string

const (
	SegmentTypeEnumUser    SegmentTypeEnum = "user"
	SegmentTypeEnumChannel SegmentTypeEnum = "channel"
)

func (e *SegmentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "user":
		fallthrough
	case "channel":
		*e = SegmentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SegmentTypeEnum: %s", s)
	}
}

type Segment struct {
	CreatedAt   time.Time              `json:"created_at"`
	Description string                 `json:"description"`
	Filter      map[string]interface{} `json:"filter"`
	ID          string                 `json:"id"`
	InUse       bool                   `json:"in_use"`
	Name        string                 `json:"name"`
	Size        float64                `json:"size"`
	Status      string                 `json:"status"`
	Type        SegmentTypeEnum        `json:"type"`
	UpdatedAt   time.Time              `json:"updated_at"`
}
