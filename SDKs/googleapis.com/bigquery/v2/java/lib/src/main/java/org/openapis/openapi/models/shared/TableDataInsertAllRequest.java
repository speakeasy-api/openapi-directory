/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class TableDataInsertAllRequest {
    /**
     * [Optional] Accept rows that contain values that do not match the schema. The unknown values are ignored. Default is false, which treats unknown values as errors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignoreUnknownValues")
    public Boolean ignoreUnknownValues;

    public TableDataInsertAllRequest withIgnoreUnknownValues(Boolean ignoreUnknownValues) {
        this.ignoreUnknownValues = ignoreUnknownValues;
        return this;
    }
    
    /**
     * The resource type of the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public TableDataInsertAllRequest withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The rows to insert.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rows")
    public TableDataInsertAllRequestRows[] rows;

    public TableDataInsertAllRequest withRows(TableDataInsertAllRequestRows[] rows) {
        this.rows = rows;
        return this;
    }
    
    /**
     * [Optional] Insert all valid rows of a request, even if invalid rows exist. The default value is false, which causes the entire request to fail if any invalid rows exist.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skipInvalidRows")
    public Boolean skipInvalidRows;

    public TableDataInsertAllRequest withSkipInvalidRows(Boolean skipInvalidRows) {
        this.skipInvalidRows = skipInvalidRows;
        return this;
    }
    
    /**
     * If specified, treats the destination table as a base template, and inserts the rows into an instance table named "{destination}{templateSuffix}". BigQuery will manage creation of the instance table, using the schema of the base template table. See https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables for considerations when working with templates tables.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("templateSuffix")
    public String templateSuffix;

    public TableDataInsertAllRequest withTemplateSuffix(String templateSuffix) {
        this.templateSuffix = templateSuffix;
        return this;
    }
    
    public TableDataInsertAllRequest(){}
}
