/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Inventory {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List supply lots
   *
   * @remarks
   * Returns a list of the supply lots of an SKU in a specific warehouse.
   */
  getSupplyLots(
    req: operations.GetSupplyLotsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSupplyLotsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSupplyLotsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/logistics/pvt/inventory/items/{skuId}/warehouses/{warehouseId}/supplyLots",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSupplyLotsResponse =
        new operations.GetSupplyLotsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * List inventory with dispatched reservations
   *
   * @remarks
   * Lists inventory with dispatched reservations. When the number of active reservations is more than 2000 the return is an error with status code 400 (BadRequest) and the message: Too many active reservations.
   */
  getinventorywithdispatchedreservations(
    req: operations.GetinventorywithdispatchedreservationsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetinventorywithdispatchedreservationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetinventorywithdispatchedreservationsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/logistics/pvt/inventory/items/{itemId}/warehouses/{warehouseId}/dispatched",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetinventorywithdispatchedreservationsResponse =
        new operations.GetinventorywithdispatchedreservationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getinventorywithdispatchedreservations200ApplicationJSONObjects =
              [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getinventorywithdispatchedreservations200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.Getinventorywithdispatchedreservations200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List inventory by SKU
   *
   * @remarks
   * Lists your store's inventory by SKU ID
   */
  inventoryBySku(
    req: operations.InventoryBySkuRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.InventoryBySkuResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.InventoryBySkuRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/logistics/pvt/inventory/skus/{skuId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.InventoryBySkuResponse =
        new operations.InventoryBySkuResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.inventoryBySku200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.InventoryBySku200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List inventory per dock
   *
   * @remarks
   * Lists inventory information per dock set up in your store.
   */
  inventoryperdock(
    req: operations.InventoryperdockRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.InventoryperdockResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.InventoryperdockRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/logistics/pvt/inventory/items/{skuId}/docks/{dockId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.InventoryperdockResponse =
        new operations.InventoryperdockResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inventoryperdock200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.inventoryperdock200ApplicationJSONObjects = utils.objectToClass(
              httpRes?.data,
              operations.Inventoryperdock200ApplicationJSON,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List inventory per dock and warehouse
   *
   * @remarks
   * Lists information of inventory per dock and warehouse.
   */
  inventoryperdockandwarehouse(
    req: operations.InventoryperdockandwarehouseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.InventoryperdockandwarehouseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.InventoryperdockandwarehouseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/logistics/pvt/inventory/items/{skuId}/docks/{dockId}/warehouses/{warehouseId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.InventoryperdockandwarehouseResponse =
        new operations.InventoryperdockandwarehouseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inventoryperdockandwarehouse200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.inventoryperdockandwarehouse200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.Inventoryperdockandwarehouse200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List inventory per warehouse
   *
   * @remarks
   * Lists inventory information per warehouse on your store.
   */
  inventoryperwarehouse(
    req: operations.InventoryperwarehouseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.InventoryperwarehouseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.InventoryperwarehouseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/logistics/pvt/inventory/items/{skuId}/warehouses/{warehouseId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.InventoryperwarehouseResponse =
        new operations.InventoryperwarehouseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inventoryperwarehouse200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.inventoryperwarehouse200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.Inventoryperwarehouse200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Save supply lot
   *
   * @remarks
   * Creates a new Supply Lot. A Supply Lot lets the store sell products that are not currently available in stock but whose arrival is already scheduled.
   *
   * Check out our [documentation](https://help.vtex.com/en/tutorial/setting-up-future-inventory--UMSGjooqRfkRbeoh94kS4) about this feature.
   */
  saveSupplyLot(
    req: operations.SaveSupplyLotRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SaveSupplyLotResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SaveSupplyLotRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/logistics/pvt/inventory/items/{skuId}/warehouses/{warehouseId}/supplyLots/{supplyLotId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SaveSupplyLotResponse =
        new operations.SaveSupplyLotResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Transfer supply lot
   *
   * @remarks
   * Transfers an SKU from a Supply Lot to the currently available inventory.
   *
   * Check out how this transfer works in further detail by reading our [documentation](https://help.vtex.com/pt/tutorial/configurar-estoque-futuro--UMSGjooqRfkRbeoh94kS4) about this feature.
   */
  transferSupplyLot(
    req: operations.TransferSupplyLotRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TransferSupplyLotResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TransferSupplyLotRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/logistics/pvt/inventory/items/{skuId}/warehouses/{warehouseId}/supplyLots/{supplyLotId}/transfer",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TransferSupplyLotResponse =
        new operations.TransferSupplyLotResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Update inventory by SKU and warehouse
   *
   * @remarks
   * Updates inventory for a given SKU and warehouse.
   */
  updateInventoryBySkuandWarehouse(
    req: operations.UpdateInventoryBySkuandWarehouseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateInventoryBySkuandWarehouseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateInventoryBySkuandWarehouseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/logistics/pvt/inventory/skus/{skuId}/warehouses/{warehouseId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateInventoryBySkuandWarehouseResponse =
        new operations.UpdateInventoryBySkuandWarehouseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }
}
