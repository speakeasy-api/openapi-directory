/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://ip-messaging.twilio.com",
	};
    /**
	 * CREATE_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CHANNEL_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * CREATE_CHANNEL_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CHANNEL_WEBHOOK_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * CREATE_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CREDENTIAL_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * CREATE_INVITE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_INVITE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * CREATE_MEMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_MEMBER_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * CREATE_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_MESSAGE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * CREATE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ROLE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * CREATE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_USER_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * DELETE_BINDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_BINDING_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * DELETE_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CHANNEL_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * DELETE_CHANNEL_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CHANNEL_WEBHOOK_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * DELETE_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CREDENTIAL_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * DELETE_INVITE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_INVITE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * DELETE_MEMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_MEMBER_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * DELETE_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_MESSAGE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * DELETE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ROLE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * DELETE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_USER_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * DELETE_USER_BINDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_USER_BINDING_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * DELETE_USER_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_USER_CHANNEL_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * FETCH_BINDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_BINDING_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * FETCH_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CHANNEL_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * FETCH_CHANNEL_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CHANNEL_WEBHOOK_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * FETCH_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CREDENTIAL_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * FETCH_INVITE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_INVITE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * FETCH_MEMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_MEMBER_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * FETCH_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_MESSAGE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * FETCH_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ROLE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * FETCH_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_USER_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * FETCH_USER_BINDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_USER_BINDING_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * FETCH_USER_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_USER_CHANNEL_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * LIST_BINDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_BINDING_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * LIST_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CHANNEL_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * LIST_CHANNEL_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CHANNEL_WEBHOOK_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * LIST_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CREDENTIAL_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * LIST_INVITE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INVITE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * LIST_MEMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_MEMBER_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * LIST_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_MESSAGE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * LIST_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ROLE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * LIST_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USER_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * LIST_USER_BINDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USER_BINDING_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * LIST_USER_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USER_CHANNEL_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * UPDATE_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CHANNEL_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * UPDATE_CHANNEL_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CHANNEL_WEBHOOK_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * UPDATE_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CREDENTIAL_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * UPDATE_MEMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_MEMBER_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * UPDATE_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_MESSAGE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * UPDATE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ROLE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * UPDATE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_USER_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
    /**
	 * UPDATE_USER_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_USER_CHANNEL_SERVERS = {
        "https://ip-messaging.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    public org.openapis.openapi.models.operations.CreateChannelResponse createChannel(org.openapis.openapi.models.operations.CreateChannelRequest request, org.openapis.openapi.models.operations.CreateChannelSecurity security) throws Exception {
        return this.createChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateChannelResponse createChannel(org.openapis.openapi.models.operations.CreateChannelRequest request, org.openapis.openapi.models.operations.CreateChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateChannelRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateChannelResponse res = new org.openapis.openapi.models.operations.CreateChannelResponse() {{
            ipMessagingV2ServiceChannel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceChannel.class);
                res.ipMessagingV2ServiceChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateChannelWebhookResponse createChannelWebhook(org.openapis.openapi.models.operations.CreateChannelWebhookRequest request, org.openapis.openapi.models.operations.CreateChannelWebhookSecurity security) throws Exception {
        return this.createChannelWebhook(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateChannelWebhookResponse createChannelWebhook(org.openapis.openapi.models.operations.CreateChannelWebhookRequest request, org.openapis.openapi.models.operations.CreateChannelWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_CHANNEL_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateChannelWebhookRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateChannelWebhookResponse res = new org.openapis.openapi.models.operations.CreateChannelWebhookResponse() {{
            ipMessagingV2ServiceChannelChannelWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelChannelWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelChannelWebhook.class);
                res.ipMessagingV2ServiceChannelChannelWebhook = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateCredentialResponse createCredential(org.openapis.openapi.models.operations.CreateCredentialCreateCredentialRequest request, org.openapis.openapi.models.operations.CreateCredentialSecurity security) throws Exception {
        return this.createCredential(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateCredentialResponse createCredential(org.openapis.openapi.models.operations.CreateCredentialCreateCredentialRequest request, org.openapis.openapi.models.operations.CreateCredentialSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_CREDENTIAL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/Credentials");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateCredentialResponse res = new org.openapis.openapi.models.operations.CreateCredentialResponse() {{
            ipMessagingV2Credential = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2Credential out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2Credential.class);
                res.ipMessagingV2Credential = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateInviteResponse createInvite(org.openapis.openapi.models.operations.CreateInviteRequest request, org.openapis.openapi.models.operations.CreateInviteSecurity security) throws Exception {
        return this.createInvite(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateInviteResponse createInvite(org.openapis.openapi.models.operations.CreateInviteRequest request, org.openapis.openapi.models.operations.CreateInviteSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_INVITE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateInviteRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Invites", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateInviteResponse res = new org.openapis.openapi.models.operations.CreateInviteResponse() {{
            ipMessagingV2ServiceChannelInvite = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelInvite out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelInvite.class);
                res.ipMessagingV2ServiceChannelInvite = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateMemberResponse createMember(org.openapis.openapi.models.operations.CreateMemberRequest request, org.openapis.openapi.models.operations.CreateMemberSecurity security) throws Exception {
        return this.createMember(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateMemberResponse createMember(org.openapis.openapi.models.operations.CreateMemberRequest request, org.openapis.openapi.models.operations.CreateMemberSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_MEMBER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateMemberRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateMemberResponse res = new org.openapis.openapi.models.operations.CreateMemberResponse() {{
            ipMessagingV2ServiceChannelMember = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelMember out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelMember.class);
                res.ipMessagingV2ServiceChannelMember = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateMessageResponse createMessage(org.openapis.openapi.models.operations.CreateMessageRequest request, org.openapis.openapi.models.operations.CreateMessageSecurity security) throws Exception {
        return this.createMessage(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateMessageResponse createMessage(org.openapis.openapi.models.operations.CreateMessageRequest request, org.openapis.openapi.models.operations.CreateMessageSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_MESSAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateMessageRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateMessageResponse res = new org.openapis.openapi.models.operations.CreateMessageResponse() {{
            ipMessagingV2ServiceChannelMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelMessage.class);
                res.ipMessagingV2ServiceChannelMessage = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateRoleResponse createRole(org.openapis.openapi.models.operations.CreateRoleRequest request, org.openapis.openapi.models.operations.CreateRoleSecurity security) throws Exception {
        return this.createRole(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateRoleResponse createRole(org.openapis.openapi.models.operations.CreateRoleRequest request, org.openapis.openapi.models.operations.CreateRoleSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_ROLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateRoleRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Roles", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateRoleResponse res = new org.openapis.openapi.models.operations.CreateRoleResponse() {{
            ipMessagingV2ServiceRole = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceRole out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceRole.class);
                res.ipMessagingV2ServiceRole = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateServiceResponse createService(org.openapis.openapi.models.operations.CreateServiceCreateServiceRequest request, org.openapis.openapi.models.operations.CreateServiceSecurity security) throws Exception {
        return this.createService(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateServiceResponse createService(org.openapis.openapi.models.operations.CreateServiceCreateServiceRequest request, org.openapis.openapi.models.operations.CreateServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceResponse res = new org.openapis.openapi.models.operations.CreateServiceResponse() {{
            ipMessagingV2Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2Service.class);
                res.ipMessagingV2Service = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateUserResponse createUser(org.openapis.openapi.models.operations.CreateUserRequest request, org.openapis.openapi.models.operations.CreateUserSecurity security) throws Exception {
        return this.createUser(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateUserResponse createUser(org.openapis.openapi.models.operations.CreateUserRequest request, org.openapis.openapi.models.operations.CreateUserSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateUserRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Users", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateUserResponse res = new org.openapis.openapi.models.operations.CreateUserResponse() {{
            ipMessagingV2ServiceUser = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceUser.class);
                res.ipMessagingV2ServiceUser = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteBindingResponse deleteBinding(org.openapis.openapi.models.operations.DeleteBindingRequest request, org.openapis.openapi.models.operations.DeleteBindingSecurity security) throws Exception {
        return this.deleteBinding(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteBindingResponse deleteBinding(org.openapis.openapi.models.operations.DeleteBindingRequest request, org.openapis.openapi.models.operations.DeleteBindingSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_BINDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteBindingRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Bindings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteBindingResponse res = new org.openapis.openapi.models.operations.DeleteBindingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteChannelResponse deleteChannel(org.openapis.openapi.models.operations.DeleteChannelRequest request, org.openapis.openapi.models.operations.DeleteChannelSecurity security) throws Exception {
        return this.deleteChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteChannelResponse deleteChannel(org.openapis.openapi.models.operations.DeleteChannelRequest request, org.openapis.openapi.models.operations.DeleteChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteChannelRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteChannelResponse res = new org.openapis.openapi.models.operations.DeleteChannelResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteChannelWebhookResponse deleteChannelWebhook(org.openapis.openapi.models.operations.DeleteChannelWebhookRequest request, org.openapis.openapi.models.operations.DeleteChannelWebhookSecurity security) throws Exception {
        return this.deleteChannelWebhook(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteChannelWebhookResponse deleteChannelWebhook(org.openapis.openapi.models.operations.DeleteChannelWebhookRequest request, org.openapis.openapi.models.operations.DeleteChannelWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_CHANNEL_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteChannelWebhookRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteChannelWebhookResponse res = new org.openapis.openapi.models.operations.DeleteChannelWebhookResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteCredentialResponse deleteCredential(org.openapis.openapi.models.operations.DeleteCredentialRequest request, org.openapis.openapi.models.operations.DeleteCredentialSecurity security) throws Exception {
        return this.deleteCredential(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteCredentialResponse deleteCredential(org.openapis.openapi.models.operations.DeleteCredentialRequest request, org.openapis.openapi.models.operations.DeleteCredentialSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_CREDENTIAL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteCredentialRequest.class, baseUrl, "/v2/Credentials/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteCredentialResponse res = new org.openapis.openapi.models.operations.DeleteCredentialResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteInviteResponse deleteInvite(org.openapis.openapi.models.operations.DeleteInviteRequest request, org.openapis.openapi.models.operations.DeleteInviteSecurity security) throws Exception {
        return this.deleteInvite(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteInviteResponse deleteInvite(org.openapis.openapi.models.operations.DeleteInviteRequest request, org.openapis.openapi.models.operations.DeleteInviteSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_INVITE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteInviteRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteInviteResponse res = new org.openapis.openapi.models.operations.DeleteInviteResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteMemberResponse deleteMember(org.openapis.openapi.models.operations.DeleteMemberRequest request, org.openapis.openapi.models.operations.DeleteMemberSecurity security) throws Exception {
        return this.deleteMember(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteMemberResponse deleteMember(org.openapis.openapi.models.operations.DeleteMemberRequest request, org.openapis.openapi.models.operations.DeleteMemberSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_MEMBER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteMemberRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteMemberResponse res = new org.openapis.openapi.models.operations.DeleteMemberResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteMessageResponse deleteMessage(org.openapis.openapi.models.operations.DeleteMessageRequest request, org.openapis.openapi.models.operations.DeleteMessageSecurity security) throws Exception {
        return this.deleteMessage(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteMessageResponse deleteMessage(org.openapis.openapi.models.operations.DeleteMessageRequest request, org.openapis.openapi.models.operations.DeleteMessageSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_MESSAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteMessageRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteMessageResponse res = new org.openapis.openapi.models.operations.DeleteMessageResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteRoleResponse deleteRole(org.openapis.openapi.models.operations.DeleteRoleRequest request, org.openapis.openapi.models.operations.DeleteRoleSecurity security) throws Exception {
        return this.deleteRole(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteRoleResponse deleteRole(org.openapis.openapi.models.operations.DeleteRoleRequest request, org.openapis.openapi.models.operations.DeleteRoleSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_ROLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRoleRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Roles/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRoleResponse res = new org.openapis.openapi.models.operations.DeleteRoleResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteServiceResponse deleteService(org.openapis.openapi.models.operations.DeleteServiceRequest request, org.openapis.openapi.models.operations.DeleteServiceSecurity security) throws Exception {
        return this.deleteService(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteServiceResponse deleteService(org.openapis.openapi.models.operations.DeleteServiceRequest request, org.openapis.openapi.models.operations.DeleteServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceRequest.class, baseUrl, "/v2/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceResponse res = new org.openapis.openapi.models.operations.DeleteServiceResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteUserResponse deleteUser(org.openapis.openapi.models.operations.DeleteUserRequest request, org.openapis.openapi.models.operations.DeleteUserSecurity security) throws Exception {
        return this.deleteUser(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteUserResponse deleteUser(org.openapis.openapi.models.operations.DeleteUserRequest request, org.openapis.openapi.models.operations.DeleteUserSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUserRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Users/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUserResponse res = new org.openapis.openapi.models.operations.DeleteUserResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteUserBindingResponse deleteUserBinding(org.openapis.openapi.models.operations.DeleteUserBindingRequest request, org.openapis.openapi.models.operations.DeleteUserBindingSecurity security) throws Exception {
        return this.deleteUserBinding(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteUserBindingResponse deleteUserBinding(org.openapis.openapi.models.operations.DeleteUserBindingRequest request, org.openapis.openapi.models.operations.DeleteUserBindingSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_USER_BINDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUserBindingRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Users/{UserSid}/Bindings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUserBindingResponse res = new org.openapis.openapi.models.operations.DeleteUserBindingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteUserChannelResponse deleteUserChannel(org.openapis.openapi.models.operations.DeleteUserChannelRequest request, org.openapis.openapi.models.operations.DeleteUserChannelSecurity security) throws Exception {
        return this.deleteUserChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteUserChannelResponse deleteUserChannel(org.openapis.openapi.models.operations.DeleteUserChannelRequest request, org.openapis.openapi.models.operations.DeleteUserChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_USER_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUserChannelRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUserChannelResponse res = new org.openapis.openapi.models.operations.DeleteUserChannelResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchBindingResponse fetchBinding(org.openapis.openapi.models.operations.FetchBindingRequest request, org.openapis.openapi.models.operations.FetchBindingSecurity security) throws Exception {
        return this.fetchBinding(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchBindingResponse fetchBinding(org.openapis.openapi.models.operations.FetchBindingRequest request, org.openapis.openapi.models.operations.FetchBindingSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_BINDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchBindingRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Bindings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchBindingResponse res = new org.openapis.openapi.models.operations.FetchBindingResponse() {{
            ipMessagingV2ServiceBinding = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceBinding out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceBinding.class);
                res.ipMessagingV2ServiceBinding = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchChannelResponse fetchChannel(org.openapis.openapi.models.operations.FetchChannelRequest request, org.openapis.openapi.models.operations.FetchChannelSecurity security) throws Exception {
        return this.fetchChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchChannelResponse fetchChannel(org.openapis.openapi.models.operations.FetchChannelRequest request, org.openapis.openapi.models.operations.FetchChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchChannelRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchChannelResponse res = new org.openapis.openapi.models.operations.FetchChannelResponse() {{
            ipMessagingV2ServiceChannel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceChannel.class);
                res.ipMessagingV2ServiceChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchChannelWebhookResponse fetchChannelWebhook(org.openapis.openapi.models.operations.FetchChannelWebhookRequest request, org.openapis.openapi.models.operations.FetchChannelWebhookSecurity security) throws Exception {
        return this.fetchChannelWebhook(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchChannelWebhookResponse fetchChannelWebhook(org.openapis.openapi.models.operations.FetchChannelWebhookRequest request, org.openapis.openapi.models.operations.FetchChannelWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CHANNEL_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchChannelWebhookRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchChannelWebhookResponse res = new org.openapis.openapi.models.operations.FetchChannelWebhookResponse() {{
            ipMessagingV2ServiceChannelChannelWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelChannelWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelChannelWebhook.class);
                res.ipMessagingV2ServiceChannelChannelWebhook = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchCredentialResponse fetchCredential(org.openapis.openapi.models.operations.FetchCredentialRequest request, org.openapis.openapi.models.operations.FetchCredentialSecurity security) throws Exception {
        return this.fetchCredential(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchCredentialResponse fetchCredential(org.openapis.openapi.models.operations.FetchCredentialRequest request, org.openapis.openapi.models.operations.FetchCredentialSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CREDENTIAL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchCredentialRequest.class, baseUrl, "/v2/Credentials/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCredentialResponse res = new org.openapis.openapi.models.operations.FetchCredentialResponse() {{
            ipMessagingV2Credential = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2Credential out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2Credential.class);
                res.ipMessagingV2Credential = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchInviteResponse fetchInvite(org.openapis.openapi.models.operations.FetchInviteRequest request, org.openapis.openapi.models.operations.FetchInviteSecurity security) throws Exception {
        return this.fetchInvite(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchInviteResponse fetchInvite(org.openapis.openapi.models.operations.FetchInviteRequest request, org.openapis.openapi.models.operations.FetchInviteSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_INVITE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchInviteRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchInviteResponse res = new org.openapis.openapi.models.operations.FetchInviteResponse() {{
            ipMessagingV2ServiceChannelInvite = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelInvite out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelInvite.class);
                res.ipMessagingV2ServiceChannelInvite = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchMemberResponse fetchMember(org.openapis.openapi.models.operations.FetchMemberRequest request, org.openapis.openapi.models.operations.FetchMemberSecurity security) throws Exception {
        return this.fetchMember(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchMemberResponse fetchMember(org.openapis.openapi.models.operations.FetchMemberRequest request, org.openapis.openapi.models.operations.FetchMemberSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_MEMBER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchMemberRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchMemberResponse res = new org.openapis.openapi.models.operations.FetchMemberResponse() {{
            ipMessagingV2ServiceChannelMember = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelMember out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelMember.class);
                res.ipMessagingV2ServiceChannelMember = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchMessageResponse fetchMessage(org.openapis.openapi.models.operations.FetchMessageRequest request, org.openapis.openapi.models.operations.FetchMessageSecurity security) throws Exception {
        return this.fetchMessage(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchMessageResponse fetchMessage(org.openapis.openapi.models.operations.FetchMessageRequest request, org.openapis.openapi.models.operations.FetchMessageSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_MESSAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchMessageRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchMessageResponse res = new org.openapis.openapi.models.operations.FetchMessageResponse() {{
            ipMessagingV2ServiceChannelMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelMessage.class);
                res.ipMessagingV2ServiceChannelMessage = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchRoleResponse fetchRole(org.openapis.openapi.models.operations.FetchRoleRequest request, org.openapis.openapi.models.operations.FetchRoleSecurity security) throws Exception {
        return this.fetchRole(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchRoleResponse fetchRole(org.openapis.openapi.models.operations.FetchRoleRequest request, org.openapis.openapi.models.operations.FetchRoleSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ROLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRoleRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Roles/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRoleResponse res = new org.openapis.openapi.models.operations.FetchRoleResponse() {{
            ipMessagingV2ServiceRole = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceRole out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceRole.class);
                res.ipMessagingV2ServiceRole = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchServiceResponse fetchService(org.openapis.openapi.models.operations.FetchServiceRequest request, org.openapis.openapi.models.operations.FetchServiceSecurity security) throws Exception {
        return this.fetchService(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchServiceResponse fetchService(org.openapis.openapi.models.operations.FetchServiceRequest request, org.openapis.openapi.models.operations.FetchServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceRequest.class, baseUrl, "/v2/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceResponse res = new org.openapis.openapi.models.operations.FetchServiceResponse() {{
            ipMessagingV2Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2Service.class);
                res.ipMessagingV2Service = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUserResponse fetchUser(org.openapis.openapi.models.operations.FetchUserRequest request, org.openapis.openapi.models.operations.FetchUserSecurity security) throws Exception {
        return this.fetchUser(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchUserResponse fetchUser(org.openapis.openapi.models.operations.FetchUserRequest request, org.openapis.openapi.models.operations.FetchUserSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUserRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Users/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUserResponse res = new org.openapis.openapi.models.operations.FetchUserResponse() {{
            ipMessagingV2ServiceUser = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceUser.class);
                res.ipMessagingV2ServiceUser = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUserBindingResponse fetchUserBinding(org.openapis.openapi.models.operations.FetchUserBindingRequest request, org.openapis.openapi.models.operations.FetchUserBindingSecurity security) throws Exception {
        return this.fetchUserBinding(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchUserBindingResponse fetchUserBinding(org.openapis.openapi.models.operations.FetchUserBindingRequest request, org.openapis.openapi.models.operations.FetchUserBindingSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_USER_BINDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUserBindingRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Users/{UserSid}/Bindings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUserBindingResponse res = new org.openapis.openapi.models.operations.FetchUserBindingResponse() {{
            ipMessagingV2ServiceUserUserBinding = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceUserUserBinding out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceUserUserBinding.class);
                res.ipMessagingV2ServiceUserUserBinding = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUserChannelResponse fetchUserChannel(org.openapis.openapi.models.operations.FetchUserChannelRequest request, org.openapis.openapi.models.operations.FetchUserChannelSecurity security) throws Exception {
        return this.fetchUserChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchUserChannelResponse fetchUserChannel(org.openapis.openapi.models.operations.FetchUserChannelRequest request, org.openapis.openapi.models.operations.FetchUserChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_USER_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUserChannelRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUserChannelResponse res = new org.openapis.openapi.models.operations.FetchUserChannelResponse() {{
            ipMessagingV2ServiceUserUserChannel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceUserUserChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceUserUserChannel.class);
                res.ipMessagingV2ServiceUserUserChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListBindingResponse listBinding(org.openapis.openapi.models.operations.ListBindingRequest request, org.openapis.openapi.models.operations.ListBindingSecurity security) throws Exception {
        return this.listBinding(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListBindingResponse listBinding(org.openapis.openapi.models.operations.ListBindingRequest request, org.openapis.openapi.models.operations.ListBindingSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_BINDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListBindingRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Bindings", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListBindingRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListBindingResponse res = new org.openapis.openapi.models.operations.ListBindingResponse() {{
            listBindingResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListBindingListBindingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListBindingListBindingResponse.class);
                res.listBindingResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListChannelResponse listChannel(org.openapis.openapi.models.operations.ListChannelRequest request, org.openapis.openapi.models.operations.ListChannelSecurity security) throws Exception {
        return this.listChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListChannelResponse listChannel(org.openapis.openapi.models.operations.ListChannelRequest request, org.openapis.openapi.models.operations.ListChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListChannelRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListChannelRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListChannelResponse res = new org.openapis.openapi.models.operations.ListChannelResponse() {{
            listChannelResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListChannelListChannelResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListChannelListChannelResponse.class);
                res.listChannelResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListChannelWebhookResponse listChannelWebhook(org.openapis.openapi.models.operations.ListChannelWebhookRequest request, org.openapis.openapi.models.operations.ListChannelWebhookSecurity security) throws Exception {
        return this.listChannelWebhook(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListChannelWebhookResponse listChannelWebhook(org.openapis.openapi.models.operations.ListChannelWebhookRequest request, org.openapis.openapi.models.operations.ListChannelWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CHANNEL_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListChannelWebhookRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListChannelWebhookRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListChannelWebhookResponse res = new org.openapis.openapi.models.operations.ListChannelWebhookResponse() {{
            listChannelWebhookResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListChannelWebhookListChannelWebhookResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListChannelWebhookListChannelWebhookResponse.class);
                res.listChannelWebhookResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListCredentialResponse listCredential(org.openapis.openapi.models.operations.ListCredentialRequest request, org.openapis.openapi.models.operations.ListCredentialSecurity security) throws Exception {
        return this.listCredential(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListCredentialResponse listCredential(org.openapis.openapi.models.operations.ListCredentialRequest request, org.openapis.openapi.models.operations.ListCredentialSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CREDENTIAL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/Credentials");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListCredentialRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListCredentialResponse res = new org.openapis.openapi.models.operations.ListCredentialResponse() {{
            listCredentialResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListCredentialListCredentialResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListCredentialListCredentialResponse.class);
                res.listCredentialResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListInviteResponse listInvite(org.openapis.openapi.models.operations.ListInviteRequest request, org.openapis.openapi.models.operations.ListInviteSecurity security) throws Exception {
        return this.listInvite(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListInviteResponse listInvite(org.openapis.openapi.models.operations.ListInviteRequest request, org.openapis.openapi.models.operations.ListInviteSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_INVITE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListInviteRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Invites", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListInviteRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListInviteResponse res = new org.openapis.openapi.models.operations.ListInviteResponse() {{
            listInviteResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListInviteListInviteResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListInviteListInviteResponse.class);
                res.listInviteResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListMemberResponse listMember(org.openapis.openapi.models.operations.ListMemberRequest request, org.openapis.openapi.models.operations.ListMemberSecurity security) throws Exception {
        return this.listMember(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListMemberResponse listMember(org.openapis.openapi.models.operations.ListMemberRequest request, org.openapis.openapi.models.operations.ListMemberSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_MEMBER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListMemberRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListMemberRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListMemberResponse res = new org.openapis.openapi.models.operations.ListMemberResponse() {{
            listMemberResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListMemberListMemberResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListMemberListMemberResponse.class);
                res.listMemberResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListMessageResponse listMessage(org.openapis.openapi.models.operations.ListMessageRequest request, org.openapis.openapi.models.operations.ListMessageSecurity security) throws Exception {
        return this.listMessage(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListMessageResponse listMessage(org.openapis.openapi.models.operations.ListMessageRequest request, org.openapis.openapi.models.operations.ListMessageSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_MESSAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListMessageRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListMessageRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListMessageResponse res = new org.openapis.openapi.models.operations.ListMessageResponse() {{
            listMessageResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListMessageListMessageResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListMessageListMessageResponse.class);
                res.listMessageResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListRoleResponse listRole(org.openapis.openapi.models.operations.ListRoleRequest request, org.openapis.openapi.models.operations.ListRoleSecurity security) throws Exception {
        return this.listRole(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListRoleResponse listRole(org.openapis.openapi.models.operations.ListRoleRequest request, org.openapis.openapi.models.operations.ListRoleSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_ROLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListRoleRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Roles", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListRoleRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListRoleResponse res = new org.openapis.openapi.models.operations.ListRoleResponse() {{
            listRoleResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListRoleListRoleResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListRoleListRoleResponse.class);
                res.listRoleResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListServiceResponse listService(org.openapis.openapi.models.operations.ListServiceRequest request, org.openapis.openapi.models.operations.ListServiceSecurity security) throws Exception {
        return this.listService(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListServiceResponse listService(org.openapis.openapi.models.operations.ListServiceRequest request, org.openapis.openapi.models.operations.ListServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceResponse res = new org.openapis.openapi.models.operations.ListServiceResponse() {{
            listServiceResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceListServiceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceListServiceResponse.class);
                res.listServiceResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUserResponse listUser(org.openapis.openapi.models.operations.ListUserRequest request, org.openapis.openapi.models.operations.ListUserSecurity security) throws Exception {
        return this.listUser(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListUserResponse listUser(org.openapis.openapi.models.operations.ListUserRequest request, org.openapis.openapi.models.operations.ListUserSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUserRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Users", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUserRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUserResponse res = new org.openapis.openapi.models.operations.ListUserResponse() {{
            listUserResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUserListUserResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUserListUserResponse.class);
                res.listUserResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUserBindingResponse listUserBinding(org.openapis.openapi.models.operations.ListUserBindingRequest request, org.openapis.openapi.models.operations.ListUserBindingSecurity security) throws Exception {
        return this.listUserBinding(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListUserBindingResponse listUserBinding(org.openapis.openapi.models.operations.ListUserBindingRequest request, org.openapis.openapi.models.operations.ListUserBindingSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_USER_BINDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUserBindingRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Users/{UserSid}/Bindings", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUserBindingRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUserBindingResponse res = new org.openapis.openapi.models.operations.ListUserBindingResponse() {{
            listUserBindingResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUserBindingListUserBindingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUserBindingListUserBindingResponse.class);
                res.listUserBindingResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUserChannelResponse listUserChannel(org.openapis.openapi.models.operations.ListUserChannelRequest request, org.openapis.openapi.models.operations.ListUserChannelSecurity security) throws Exception {
        return this.listUserChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListUserChannelResponse listUserChannel(org.openapis.openapi.models.operations.ListUserChannelRequest request, org.openapis.openapi.models.operations.ListUserChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_USER_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUserChannelRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Users/{UserSid}/Channels", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUserChannelRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUserChannelResponse res = new org.openapis.openapi.models.operations.ListUserChannelResponse() {{
            listUserChannelResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUserChannelListUserChannelResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUserChannelListUserChannelResponse.class);
                res.listUserChannelResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateChannelResponse updateChannel(org.openapis.openapi.models.operations.UpdateChannelRequest request, org.openapis.openapi.models.operations.UpdateChannelSecurity security) throws Exception {
        return this.updateChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateChannelResponse updateChannel(org.openapis.openapi.models.operations.UpdateChannelRequest request, org.openapis.openapi.models.operations.UpdateChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateChannelRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateChannelResponse res = new org.openapis.openapi.models.operations.UpdateChannelResponse() {{
            ipMessagingV2ServiceChannel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceChannel.class);
                res.ipMessagingV2ServiceChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateChannelWebhookResponse updateChannelWebhook(org.openapis.openapi.models.operations.UpdateChannelWebhookRequest request, org.openapis.openapi.models.operations.UpdateChannelWebhookSecurity security) throws Exception {
        return this.updateChannelWebhook(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateChannelWebhookResponse updateChannelWebhook(org.openapis.openapi.models.operations.UpdateChannelWebhookRequest request, org.openapis.openapi.models.operations.UpdateChannelWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_CHANNEL_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateChannelWebhookRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateChannelWebhookResponse res = new org.openapis.openapi.models.operations.UpdateChannelWebhookResponse() {{
            ipMessagingV2ServiceChannelChannelWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelChannelWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelChannelWebhook.class);
                res.ipMessagingV2ServiceChannelChannelWebhook = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateCredentialResponse updateCredential(org.openapis.openapi.models.operations.UpdateCredentialRequest request, org.openapis.openapi.models.operations.UpdateCredentialSecurity security) throws Exception {
        return this.updateCredential(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateCredentialResponse updateCredential(org.openapis.openapi.models.operations.UpdateCredentialRequest request, org.openapis.openapi.models.operations.UpdateCredentialSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_CREDENTIAL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateCredentialRequest.class, baseUrl, "/v2/Credentials/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateCredentialResponse res = new org.openapis.openapi.models.operations.UpdateCredentialResponse() {{
            ipMessagingV2Credential = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2Credential out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2Credential.class);
                res.ipMessagingV2Credential = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateMemberResponse updateMember(org.openapis.openapi.models.operations.UpdateMemberRequest request, org.openapis.openapi.models.operations.UpdateMemberSecurity security) throws Exception {
        return this.updateMember(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateMemberResponse updateMember(org.openapis.openapi.models.operations.UpdateMemberRequest request, org.openapis.openapi.models.operations.UpdateMemberSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_MEMBER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateMemberRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateMemberResponse res = new org.openapis.openapi.models.operations.UpdateMemberResponse() {{
            ipMessagingV2ServiceChannelMember = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelMember out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelMember.class);
                res.ipMessagingV2ServiceChannelMember = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateMessageResponse updateMessage(org.openapis.openapi.models.operations.UpdateMessageRequest request, org.openapis.openapi.models.operations.UpdateMessageSecurity security) throws Exception {
        return this.updateMessage(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateMessageResponse updateMessage(org.openapis.openapi.models.operations.UpdateMessageRequest request, org.openapis.openapi.models.operations.UpdateMessageSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_MESSAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateMessageRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateMessageResponse res = new org.openapis.openapi.models.operations.UpdateMessageResponse() {{
            ipMessagingV2ServiceChannelMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceChannelMessage.class);
                res.ipMessagingV2ServiceChannelMessage = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateRoleResponse updateRole(org.openapis.openapi.models.operations.UpdateRoleRequest request, org.openapis.openapi.models.operations.UpdateRoleSecurity security) throws Exception {
        return this.updateRole(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateRoleResponse updateRole(org.openapis.openapi.models.operations.UpdateRoleRequest request, org.openapis.openapi.models.operations.UpdateRoleSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_ROLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateRoleRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Roles/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateRoleResponse res = new org.openapis.openapi.models.operations.UpdateRoleResponse() {{
            ipMessagingV2ServiceRole = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceRole out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceRole.class);
                res.ipMessagingV2ServiceRole = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateServiceResponse updateService(org.openapis.openapi.models.operations.UpdateServiceRequest request, org.openapis.openapi.models.operations.UpdateServiceSecurity security) throws Exception {
        return this.updateService(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateServiceResponse updateService(org.openapis.openapi.models.operations.UpdateServiceRequest request, org.openapis.openapi.models.operations.UpdateServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceRequest.class, baseUrl, "/v2/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceResponse res = new org.openapis.openapi.models.operations.UpdateServiceResponse() {{
            ipMessagingV2Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2Service.class);
                res.ipMessagingV2Service = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateUserResponse updateUser(org.openapis.openapi.models.operations.UpdateUserRequest request, org.openapis.openapi.models.operations.UpdateUserSecurity security) throws Exception {
        return this.updateUser(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateUserResponse updateUser(org.openapis.openapi.models.operations.UpdateUserRequest request, org.openapis.openapi.models.operations.UpdateUserSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_USER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUserRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Users/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUserResponse res = new org.openapis.openapi.models.operations.UpdateUserResponse() {{
            ipMessagingV2ServiceUser = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceUser.class);
                res.ipMessagingV2ServiceUser = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateUserChannelResponse updateUserChannel(org.openapis.openapi.models.operations.UpdateUserChannelRequest request, org.openapis.openapi.models.operations.UpdateUserChannelSecurity security) throws Exception {
        return this.updateUserChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateUserChannelResponse updateUserChannel(org.openapis.openapi.models.operations.UpdateUserChannelRequest request, org.openapis.openapi.models.operations.UpdateUserChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_USER_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUserChannelRequest.class, baseUrl, "/v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUserChannelResponse res = new org.openapis.openapi.models.operations.UpdateUserChannelResponse() {{
            ipMessagingV2ServiceUserUserChannel = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IpMessagingV2ServiceUserUserChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IpMessagingV2ServiceUserUserChannel.class);
                res.ipMessagingV2ServiceUserUserChannel = out;
            }
        }

        return res;
    }
}