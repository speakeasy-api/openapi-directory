// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TaxSubtotalTaxCategoryEnum - The tax category. For a description see <<_openapi_tax>>
type TaxSubtotalTaxCategoryEnum string

const (
	TaxSubtotalTaxCategoryEnumStandard              TaxSubtotalTaxCategoryEnum = "standard"
	TaxSubtotalTaxCategoryEnumZeroRated             TaxSubtotalTaxCategoryEnum = "zero_rated"
	TaxSubtotalTaxCategoryEnumReverseCharge         TaxSubtotalTaxCategoryEnum = "reverse_charge"
	TaxSubtotalTaxCategoryEnumIntraCommunity        TaxSubtotalTaxCategoryEnum = "intra_community"
	TaxSubtotalTaxCategoryEnumExempt                TaxSubtotalTaxCategoryEnum = "exempt"
	TaxSubtotalTaxCategoryEnumExport                TaxSubtotalTaxCategoryEnum = "export"
	TaxSubtotalTaxCategoryEnumOutsideScope          TaxSubtotalTaxCategoryEnum = "outside_scope"
	TaxSubtotalTaxCategoryEnumRegulation33Exempt    TaxSubtotalTaxCategoryEnum = "regulation33_exempt"
	TaxSubtotalTaxCategoryEnumNonregulation33Exempt TaxSubtotalTaxCategoryEnum = "nonregulation33_exempt"
	TaxSubtotalTaxCategoryEnumDeemedSupply          TaxSubtotalTaxCategoryEnum = "deemed_supply"
	TaxSubtotalTaxCategoryEnumSrcaS                 TaxSubtotalTaxCategoryEnum = "srca_s"
	TaxSubtotalTaxCategoryEnumSrcaC                 TaxSubtotalTaxCategoryEnum = "srca_c"
	TaxSubtotalTaxCategoryEnumNotRegistered         TaxSubtotalTaxCategoryEnum = "not_registered"
	TaxSubtotalTaxCategoryEnumIgst                  TaxSubtotalTaxCategoryEnum = "igst"
	TaxSubtotalTaxCategoryEnumCgst                  TaxSubtotalTaxCategoryEnum = "cgst"
	TaxSubtotalTaxCategoryEnumSgst                  TaxSubtotalTaxCategoryEnum = "sgst"
	TaxSubtotalTaxCategoryEnumCess                  TaxSubtotalTaxCategoryEnum = "cess"
	TaxSubtotalTaxCategoryEnumStateCess             TaxSubtotalTaxCategoryEnum = "state_cess"
	TaxSubtotalTaxCategoryEnumSrovr                 TaxSubtotalTaxCategoryEnum = "srovr"
	TaxSubtotalTaxCategoryEnumSrovrRs               TaxSubtotalTaxCategoryEnum = "srovr_rs"
	TaxSubtotalTaxCategoryEnumSrovrLvg              TaxSubtotalTaxCategoryEnum = "srovr_lvg"
	TaxSubtotalTaxCategoryEnumSrlvg                 TaxSubtotalTaxCategoryEnum = "srlvg"
)

func (e *TaxSubtotalTaxCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "standard":
		fallthrough
	case "zero_rated":
		fallthrough
	case "reverse_charge":
		fallthrough
	case "intra_community":
		fallthrough
	case "exempt":
		fallthrough
	case "export":
		fallthrough
	case "outside_scope":
		fallthrough
	case "regulation33_exempt":
		fallthrough
	case "nonregulation33_exempt":
		fallthrough
	case "deemed_supply":
		fallthrough
	case "srca_s":
		fallthrough
	case "srca_c":
		fallthrough
	case "not_registered":
		fallthrough
	case "igst":
		fallthrough
	case "cgst":
		fallthrough
	case "sgst":
		fallthrough
	case "cess":
		fallthrough
	case "state_cess":
		fallthrough
	case "srovr":
		fallthrough
	case "srovr_rs":
		fallthrough
	case "srovr_lvg":
		fallthrough
	case "srlvg":
		*e = TaxSubtotalTaxCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxSubtotalTaxCategoryEnum: %s", s)
	}
}

// TaxSubtotal - The total amount of tax of this type in the invoice.
type TaxSubtotal struct {
	// The tax category. For a description see <<_openapi_tax>>
	Category *TaxSubtotalTaxCategoryEnum `json:"category,omitempty"`
	// An ISO 3166-1 alpha-2 country code.
	Country CountryEnum `json:"country"`
	// The tax percentage. This should be a valid tax percentage in the country at the time of the taxpointDate of this invoice.
	Percentage float64 `json:"percentage"`
	// The amount of tax.
	TaxAmount float64 `json:"taxAmount"`
	// The amount on which the tax is levied.
	TaxableAmount float64 `json:"taxableAmount"`
}
