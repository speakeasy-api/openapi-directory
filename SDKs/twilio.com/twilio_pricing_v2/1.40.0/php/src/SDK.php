<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://pricing.twilio.com',
	];
	
	public const FETCH_TRUNKING_COUNTRY_SERVERS = [
		'https://pricing.twilio.com',
	];
	
	public const FETCH_TRUNKING_NUMBER_SERVERS = [
		'https://pricing.twilio.com',
	];
	
	public const FETCH_VOICE_COUNTRY_SERVERS = [
		'https://pricing.twilio.com',
	];
	
	public const FETCH_VOICE_NUMBER_SERVERS = [
		'https://pricing.twilio.com',
	];
	
	public const LIST_TRUNKING_COUNTRY_SERVERS = [
		'https://pricing.twilio.com',
	];
	
	public const LIST_VOICE_COUNTRY_SERVERS = [
		'https://pricing.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Fetch a specific Country.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTrunkingCountryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTrunkingCountrySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTrunkingCountryResponse
     */
	public function fetchTrunkingCountry(
        \OpenAPI\OpenAPI\Models\Operations\FetchTrunkingCountryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTrunkingCountrySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTrunkingCountryResponse
    {
        $baseUrl = SDK::FETCH_TRUNKING_COUNTRY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Trunking/Countries/{IsoCountry}', \OpenAPI\OpenAPI\Models\Operations\FetchTrunkingCountryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTrunkingCountryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pricingV2TrunkingCountryInstance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PricingV2TrunkingCountryInstance', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch pricing information for a specific destination and, optionally, origination phone number.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTrunkingNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTrunkingNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTrunkingNumberResponse
     */
	public function fetchTrunkingNumber(
        \OpenAPI\OpenAPI\Models\Operations\FetchTrunkingNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTrunkingNumberSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTrunkingNumberResponse
    {
        $baseUrl = SDK::FETCH_TRUNKING_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Trunking/Numbers/{DestinationNumber}', \OpenAPI\OpenAPI\Models\Operations\FetchTrunkingNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchTrunkingNumberRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTrunkingNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pricingV2TrunkingNumber = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PricingV2TrunkingNumber', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Country.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchVoiceCountryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchVoiceCountrySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchVoiceCountryResponse
     */
	public function fetchVoiceCountry(
        \OpenAPI\OpenAPI\Models\Operations\FetchVoiceCountryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchVoiceCountrySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchVoiceCountryResponse
    {
        $baseUrl = SDK::FETCH_VOICE_COUNTRY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Voice/Countries/{IsoCountry}', \OpenAPI\OpenAPI\Models\Operations\FetchVoiceCountryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchVoiceCountryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pricingV2VoiceVoiceCountryInstance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PricingV2VoiceVoiceCountryInstance', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch pricing information for a specific destination and, optionally, origination phone number.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchVoiceNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchVoiceNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchVoiceNumberResponse
     */
	public function fetchVoiceNumber(
        \OpenAPI\OpenAPI\Models\Operations\FetchVoiceNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchVoiceNumberSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchVoiceNumberResponse
    {
        $baseUrl = SDK::FETCH_VOICE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Voice/Numbers/{DestinationNumber}', \OpenAPI\OpenAPI\Models\Operations\FetchVoiceNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchVoiceNumberRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchVoiceNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pricingV2VoiceVoiceNumber = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PricingV2VoiceVoiceNumber', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listTrunkingCountry
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTrunkingCountryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTrunkingCountrySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTrunkingCountryResponse
     */
	public function listTrunkingCountry(
        \OpenAPI\OpenAPI\Models\Operations\ListTrunkingCountryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListTrunkingCountrySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTrunkingCountryResponse
    {
        $baseUrl = SDK::LIST_TRUNKING_COUNTRY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Trunking/Countries');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTrunkingCountryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTrunkingCountryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTrunkingCountryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListTrunkingCountryListTrunkingCountryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listVoiceCountry
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVoiceCountryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVoiceCountrySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListVoiceCountryResponse
     */
	public function listVoiceCountry(
        \OpenAPI\OpenAPI\Models\Operations\ListVoiceCountryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListVoiceCountrySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListVoiceCountryResponse
    {
        $baseUrl = SDK::LIST_VOICE_COUNTRY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Voice/Countries');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListVoiceCountryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListVoiceCountryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVoiceCountryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListVoiceCountryListVoiceCountryResponse', 'json');
            }
        }

        return $response;
    }
}