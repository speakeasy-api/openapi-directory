<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RegionInstanceGroupManagers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Flags the specified instances to be immediately removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersAbandonInstancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersAbandonInstancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersAbandonInstancesResponse
     */
	public function computeRegionInstanceGroupManagersAbandonInstances(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersAbandonInstancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersAbandonInstancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersAbandonInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersAbandonInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupManagersAbandonInstancesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersAbandonInstancesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersAbandonInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Apply updates to selected instances the managed instance group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersApplyUpdatesToInstancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersApplyUpdatesToInstancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersApplyUpdatesToInstancesResponse
     */
	public function computeRegionInstanceGroupManagersApplyUpdatesToInstances(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersApplyUpdatesToInstancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersApplyUpdatesToInstancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersApplyUpdatesToInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersApplyUpdatesToInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupManagersApplyUpdatesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersApplyUpdatesToInstancesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersApplyUpdatesToInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates instances with per-instance configurations in this regional managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersCreateInstancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersCreateInstancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersCreateInstancesResponse
     */
	public function computeRegionInstanceGroupManagersCreateInstances(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersCreateInstancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersCreateInstancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersCreateInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersCreateInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupManagersCreateInstancesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersCreateInstancesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersCreateInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified managed instance group and all of the instances in that group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteResponse
     */
	public function computeRegionInstanceGroupManagersDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Flags the specified instances in the managed instance group to be immediately deleted. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. The deleteInstances operation is marked DONE if the deleteInstances request is successful. The underlying actions take additional time. You must separately verify the status of the deleting action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteInstancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteInstancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteInstancesResponse
     */
	public function computeRegionInstanceGroupManagersDeleteInstances(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteInstancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteInstancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupManagersDeleteInstancesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteInstancesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeleteInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes selected per-instance configurations for the managed instance group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeletePerInstanceConfigsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeletePerInstanceConfigsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeletePerInstanceConfigsResponse
     */
	public function computeRegionInstanceGroupManagersDeletePerInstanceConfigs(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeletePerInstanceConfigsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeletePerInstanceConfigsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeletePerInstanceConfigsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeletePerInstanceConfigsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupManagerDeleteInstanceConfigReq", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeletePerInstanceConfigsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersDeletePerInstanceConfigsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all of the details about the specified managed instance group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersGetResponse
     */
	public function computeRegionInstanceGroupManagersGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instanceGroupManager = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstanceGroupManager', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method. A regional managed instance group can contain up to 2000 instances.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersInsertResponse
     */
	public function computeRegionInstanceGroupManagersInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceGroupManager", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of managed instance groups that are contained within the specified region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListResponse
     */
	public function computeRegionInstanceGroupManagersList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->regionInstanceGroupManagerList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RegionInstanceGroupManagerList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all errors thrown by actions on instances for a given regional managed instance group. The filter and orderBy query parameters are not supported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListErrorsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListErrorsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListErrorsResponse
     */
	public function computeRegionInstanceGroupManagersListErrors(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListErrorsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListErrorsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListErrorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listErrors', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListErrorsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListErrorsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListErrorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->regionInstanceGroupManagersListErrorsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RegionInstanceGroupManagersListErrorsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the instances in the managed instance group and instances that are scheduled to be created. The list includes any current actions that the group has scheduled for its instances. The orderBy query parameter is not supported. The `pageToken` query parameter is supported only in the alpha and beta API and only if the group's `listManagedInstancesResults` field is set to `PAGINATED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListManagedInstancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListManagedInstancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListManagedInstancesResponse
     */
	public function computeRegionInstanceGroupManagersListManagedInstances(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListManagedInstancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListManagedInstancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListManagedInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListManagedInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListManagedInstancesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListManagedInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->regionInstanceGroupManagersListInstancesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RegionInstanceGroupManagersListInstancesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all of the per-instance configurations defined for the managed instance group. The orderBy query parameter is not supported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListPerInstanceConfigsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListPerInstanceConfigsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListPerInstanceConfigsResponse
     */
	public function computeRegionInstanceGroupManagersListPerInstanceConfigs(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListPerInstanceConfigsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListPerInstanceConfigsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListPerInstanceConfigsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListPerInstanceConfigsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListPerInstanceConfigsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersListPerInstanceConfigsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->regionInstanceGroupManagersListInstanceConfigsResp = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RegionInstanceGroupManagersListInstanceConfigsResp', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listmanagedinstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. If you update your group to specify a new template or instance configuration, it's possible that your intended specification for each VM in the group is different from the current state of that VM. To learn how to apply an updated configuration to the VMs in a MIG, see Updating instances in a MIG.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchResponse
     */
	public function computeRegionInstanceGroupManagersPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceGroupManager1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts or patches per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchPerInstanceConfigsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchPerInstanceConfigsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchPerInstanceConfigsResponse
     */
	public function computeRegionInstanceGroupManagersPatchPerInstanceConfigs(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchPerInstanceConfigsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchPerInstanceConfigsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchPerInstanceConfigsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchPerInstanceConfigsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupManagerPatchInstanceConfigReq", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchPerInstanceConfigsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersPatchPerInstanceConfigsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Flags the specified VM instances in the managed instance group to be immediately recreated. Each instance is recreated using the group's current configuration. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of each instance by checking its currentAction field; for more information, see Checking the status of managed instances. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersRecreateInstancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersRecreateInstancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersRecreateInstancesResponse
     */
	public function computeRegionInstanceGroupManagersRecreateInstances(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersRecreateInstancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersRecreateInstancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersRecreateInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersRecreateInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupManagersRecreateRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersRecreateInstancesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersRecreateInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the intended size of the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes one or more instances. The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeResponse
     */
	public function computeRegionInstanceGroupManagersResize(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resizes the regional managed instance group with advanced configuration options like disabling creation retries. This is an extended version of the resize method. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes one or more instances. The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify the status of the creating or deleting actions with the get or listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeAdvancedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeAdvancedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeAdvancedResponse
     */
	public function computeRegionInstanceGroupManagersResizeAdvanced(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeAdvancedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeAdvancedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeAdvancedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeAdvancedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupManagersResizeAdvancedRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeAdvancedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResizeAdvancedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Flags the specified instances in the managed instance group to be resumed. This method increases the targetSize and decreases the targetSuspendedSize of the managed instance group by the number of instances that you resume. The resumeInstances operation is marked DONE if the resumeInstances request is successful. The underlying actions take additional time. You must separately verify the status of the RESUMING action with the listmanagedinstances method. In this request, you can only specify instances that are suspended. For example, if an instance was previously suspended using the suspendInstances method, it can be resumed using the resumeInstances method. If a health check is attached to the managed instance group, the specified instances will be verified as healthy after they are resumed. You can specify a maximum of 1000 instances with this method per request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResumeInstancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResumeInstancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResumeInstancesResponse
     */
	public function computeRegionInstanceGroupManagersResumeInstances(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResumeInstancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResumeInstancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResumeInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resumeInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResumeInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupManagersResumeInstancesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResumeInstancesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersResumeInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modifies the autohealing policy for the instances in this managed instance group. [Deprecated] This method is deprecated. Use regionInstanceGroupManagers.patch instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetAutoHealingPoliciesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetAutoHealingPoliciesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetAutoHealingPoliciesResponse
     */
	public function computeRegionInstanceGroupManagersSetAutoHealingPolicies(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetAutoHealingPoliciesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetAutoHealingPoliciesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetAutoHealingPoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetAutoHealingPoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupManagersSetAutoHealingRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetAutoHealingPoliciesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetAutoHealingPoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the instance template to use when creating new instances or recreating instances in this group. Existing instances are not affected.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetInstanceTemplateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetInstanceTemplateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetInstanceTemplateResponse
     */
	public function computeRegionInstanceGroupManagersSetInstanceTemplate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetInstanceTemplateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetInstanceTemplateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetInstanceTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetInstanceTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupManagersSetTemplateRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetInstanceTemplateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetInstanceTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modifies the target pools to which all new instances in this group are assigned. Existing instances in the group are not affected.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetTargetPoolsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetTargetPoolsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetTargetPoolsResponse
     */
	public function computeRegionInstanceGroupManagersSetTargetPools(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetTargetPoolsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetTargetPoolsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetTargetPoolsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetTargetPoolsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupManagersSetTargetPoolsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetTargetPoolsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSetTargetPoolsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Flags the specified instances in the managed instance group to be started. This method increases the targetSize and decreases the targetStoppedSize of the managed instance group by the number of instances that you start. The startInstances operation is marked DONE if the startInstances request is successful. The underlying actions take additional time. You must separately verify the status of the STARTING action with the listmanagedinstances method. In this request, you can only specify instances that are stopped. For example, if an instance was previously stopped using the stopInstances method, it can be started using the startInstances method. If a health check is attached to the managed instance group, the specified instances will be verified as healthy after they are started. You can specify a maximum of 1000 instances with this method per request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStartInstancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStartInstancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStartInstancesResponse
     */
	public function computeRegionInstanceGroupManagersStartInstances(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStartInstancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStartInstancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStartInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/startInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStartInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupManagersStartInstancesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStartInstancesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStartInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Flags the specified instances in the managed instance group to be immediately stopped. You can only specify instances that are running in this request. This method reduces the targetSize and increases the targetStoppedSize of the managed instance group by the number of instances that you stop. The stopInstances operation is marked DONE if the stopInstances request is successful. The underlying actions take additional time. You must separately verify the status of the STOPPING action with the listmanagedinstances method. If the standbyPolicy.initialDelaySec field is set, the group delays stopping the instances until initialDelaySec have passed from instance.creationTimestamp (that is, when the instance was created). This delay gives your application time to set itself up and initialize on the instance. If more than initialDelaySec seconds have passed since instance.creationTimestamp when this method is called, there will be zero delay. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is stopped. Stopped instances can be started using the startInstances method. You can specify a maximum of 1000 instances with this method per request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStopInstancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStopInstancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStopInstancesResponse
     */
	public function computeRegionInstanceGroupManagersStopInstances(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStopInstancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStopInstancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStopInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/stopInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStopInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupManagersStopInstancesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStopInstancesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersStopInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Flags the specified instances in the managed instance group to be immediately suspended. You can only specify instances that are running in this request. This method reduces the targetSize and increases the targetSuspendedSize of the managed instance group by the number of instances that you suspend. The suspendInstances operation is marked DONE if the suspendInstances request is successful. The underlying actions take additional time. You must separately verify the status of the SUSPENDING action with the listmanagedinstances method. If the standbyPolicy.initialDelaySec field is set, the group delays suspension of the instances until initialDelaySec have passed from instance.creationTimestamp (that is, when the instance was created). This delay gives your application time to set itself up and initialize on the instance. If more than initialDelaySec seconds have passed since instance.creationTimestamp when this method is called, there will be zero delay. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is suspended. Suspended instances can be resumed using the resumeInstances method. You can specify a maximum of 1000 instances with this method per request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSuspendInstancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSuspendInstancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSuspendInstancesResponse
     */
	public function computeRegionInstanceGroupManagersSuspendInstances(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSuspendInstancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSuspendInstancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSuspendInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/suspendInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSuspendInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupManagersSuspendInstancesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSuspendInstancesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersSuspendInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersTestIamPermissionsResponse
     */
	public function computeRegionInstanceGroupManagersTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is updated even if the instances in the group have not yet been updated. You must separately verify the status of the individual instances with the listmanagedinstances method. If you update your group to specify a new template or instance configuration, it's possible that your intended specification for each VM in the group is different from the current state of that VM. To learn how to apply an updated configuration to the VMs in a MIG, see Updating instances in a MIG.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdateResponse
     */
	public function computeRegionInstanceGroupManagersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceGroupManager1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts or updates per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdatePerInstanceConfigsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdatePerInstanceConfigsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdatePerInstanceConfigsResponse
     */
	public function computeRegionInstanceGroupManagersUpdatePerInstanceConfigs(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdatePerInstanceConfigsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdatePerInstanceConfigsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdatePerInstanceConfigsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdatePerInstanceConfigsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupManagerUpdateInstanceConfigReq", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdatePerInstanceConfigsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupManagersUpdatePerInstanceConfigsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}