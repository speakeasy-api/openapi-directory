"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import doublehparamsearchspace as shared_doublehparamsearchspace
from ..shared import intarrayhparamsearchspace as shared_intarrayhparamsearchspace
from ..shared import inthparamsearchspace as shared_inthparamsearchspace
from ..shared import stringhparamsearchspace as shared_stringhparamsearchspace
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HparamSearchSpaces:
    r"""Hyperparameter search spaces. These should be a subset of training_options."""
    
    activation_fn: Optional[shared_stringhparamsearchspace.StringHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activationFn'), 'exclude': lambda f: f is None }})
    r"""Search space for string and enum."""  
    batch_size: Optional[shared_inthparamsearchspace.IntHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batchSize'), 'exclude': lambda f: f is None }})
    r"""Search space for an int hyperparameter."""  
    booster_type: Optional[shared_stringhparamsearchspace.StringHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('boosterType'), 'exclude': lambda f: f is None }})
    r"""Search space for string and enum."""  
    colsample_bylevel: Optional[shared_doublehparamsearchspace.DoubleHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('colsampleBylevel'), 'exclude': lambda f: f is None }})
    r"""Search space for a double hyperparameter."""  
    colsample_bynode: Optional[shared_doublehparamsearchspace.DoubleHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('colsampleBynode'), 'exclude': lambda f: f is None }})
    r"""Search space for a double hyperparameter."""  
    colsample_bytree: Optional[shared_doublehparamsearchspace.DoubleHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('colsampleBytree'), 'exclude': lambda f: f is None }})
    r"""Search space for a double hyperparameter."""  
    dart_normalize_type: Optional[shared_stringhparamsearchspace.StringHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dartNormalizeType'), 'exclude': lambda f: f is None }})
    r"""Search space for string and enum."""  
    dropout: Optional[shared_doublehparamsearchspace.DoubleHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dropout'), 'exclude': lambda f: f is None }})
    r"""Search space for a double hyperparameter."""  
    hidden_units: Optional[shared_intarrayhparamsearchspace.IntArrayHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hiddenUnits'), 'exclude': lambda f: f is None }})
    r"""Search space for int array."""  
    l1_reg: Optional[shared_doublehparamsearchspace.DoubleHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('l1Reg'), 'exclude': lambda f: f is None }})
    r"""Search space for a double hyperparameter."""  
    l2_reg: Optional[shared_doublehparamsearchspace.DoubleHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('l2Reg'), 'exclude': lambda f: f is None }})
    r"""Search space for a double hyperparameter."""  
    learn_rate: Optional[shared_doublehparamsearchspace.DoubleHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('learnRate'), 'exclude': lambda f: f is None }})
    r"""Search space for a double hyperparameter."""  
    max_tree_depth: Optional[shared_inthparamsearchspace.IntHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxTreeDepth'), 'exclude': lambda f: f is None }})
    r"""Search space for an int hyperparameter."""  
    min_split_loss: Optional[shared_doublehparamsearchspace.DoubleHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minSplitLoss'), 'exclude': lambda f: f is None }})
    r"""Search space for a double hyperparameter."""  
    min_tree_child_weight: Optional[shared_inthparamsearchspace.IntHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minTreeChildWeight'), 'exclude': lambda f: f is None }})
    r"""Search space for an int hyperparameter."""  
    num_clusters: Optional[shared_inthparamsearchspace.IntHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numClusters'), 'exclude': lambda f: f is None }})
    r"""Search space for an int hyperparameter."""  
    num_factors: Optional[shared_inthparamsearchspace.IntHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numFactors'), 'exclude': lambda f: f is None }})
    r"""Search space for an int hyperparameter."""  
    num_parallel_tree: Optional[shared_inthparamsearchspace.IntHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numParallelTree'), 'exclude': lambda f: f is None }})
    r"""Search space for an int hyperparameter."""  
    optimizer: Optional[shared_stringhparamsearchspace.StringHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('optimizer'), 'exclude': lambda f: f is None }})
    r"""Search space for string and enum."""  
    subsample: Optional[shared_doublehparamsearchspace.DoubleHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subsample'), 'exclude': lambda f: f is None }})
    r"""Search space for a double hyperparameter."""  
    tree_method: Optional[shared_stringhparamsearchspace.StringHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treeMethod'), 'exclude': lambda f: f is None }})
    r"""Search space for string and enum."""  
    wals_alpha: Optional[shared_doublehparamsearchspace.DoubleHparamSearchSpace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('walsAlpha'), 'exclude': lambda f: f is None }})
    r"""Search space for a double hyperparameter."""  
    