/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The Locale service allows you to customize your app based on your users' location.
 */
export class Locale {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get User Locale
   *
   * @remarks
   * Get the current user location based on IP. Returns an object with user country code, country name, continent name, continent code, ip address and suggested currency. You can use the locale header to get the data in a supported language.
   *
   * ([IP Geolocation by DB-IP](https://db-ip.com))
   */
  localeGet(
    config?: AxiosRequestConfig
  ): Promise<operations.LocaleGetResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/locale";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LocaleGetResponse =
        new operations.LocaleGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.locale = utils.objectToClass(httpRes?.data, shared.Locale);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Continents
   *
   * @remarks
   * List of all continents. You can use the locale header to get the data in a supported language.
   */
  localeGetContinents(
    config?: AxiosRequestConfig
  ): Promise<operations.LocaleGetContinentsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/locale/continents";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LocaleGetContinentsResponse =
        new operations.LocaleGetContinentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.continentList = utils.objectToClass(
              httpRes?.data,
              shared.ContinentList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Countries
   *
   * @remarks
   * List of all countries. You can use the locale header to get the data in a supported language.
   */
  localeGetCountries(
    config?: AxiosRequestConfig
  ): Promise<operations.LocaleGetCountriesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/locale/countries";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LocaleGetCountriesResponse =
        new operations.LocaleGetCountriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.countryList = utils.objectToClass(
              httpRes?.data,
              shared.CountryList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List EU Countries
   *
   * @remarks
   * List of all countries that are currently members of the EU. You can use the locale header to get the data in a supported language.
   */
  localeGetCountriesEU(
    config?: AxiosRequestConfig
  ): Promise<operations.LocaleGetCountriesEUResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/locale/countries/eu";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LocaleGetCountriesEUResponse =
        new operations.LocaleGetCountriesEUResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.countryList = utils.objectToClass(
              httpRes?.data,
              shared.CountryList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Countries Phone Codes
   *
   * @remarks
   * List of all countries phone codes. You can use the locale header to get the data in a supported language.
   */
  localeGetCountriesPhones(
    config?: AxiosRequestConfig
  ): Promise<operations.LocaleGetCountriesPhonesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/locale/countries/phones";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LocaleGetCountriesPhonesResponse =
        new operations.LocaleGetCountriesPhonesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.phoneList = utils.objectToClass(
              httpRes?.data,
              shared.PhoneList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Currencies
   *
   * @remarks
   * List of all currencies, including currency symbol, name, plural, and decimal digits for all major and minor currencies. You can use the locale header to get the data in a supported language.
   */
  localeGetCurrencies(
    config?: AxiosRequestConfig
  ): Promise<operations.LocaleGetCurrenciesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/locale/currencies";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LocaleGetCurrenciesResponse =
        new operations.LocaleGetCurrenciesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.currencyList = utils.objectToClass(
              httpRes?.data,
              shared.CurrencyList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Languages
   *
   * @remarks
   * List of all languages classified by ISO 639-1 including 2-letter code, name in English, and name in the respective language.
   */
  localeGetLanguages(
    config?: AxiosRequestConfig
  ): Promise<operations.LocaleGetLanguagesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/locale/languages";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LocaleGetLanguagesResponse =
        new operations.LocaleGetLanguagesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.languageList = utils.objectToClass(
              httpRes?.data,
              shared.LanguageList
            );
          }
          break;
      }

      return res;
    });
  }
}
