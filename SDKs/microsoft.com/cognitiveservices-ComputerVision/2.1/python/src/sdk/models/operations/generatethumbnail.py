"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import imageurl as shared_imageurl
from typing import Optional


@dataclasses.dataclass
class GenerateThumbnailRequest:
    
    height: int = dataclasses.field(metadata={'query_param': { 'field_name': 'height', 'style': 'form', 'explode': True }})
    r"""Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."""  
    image_url: shared_imageurl.ImageURL = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""A JSON document with a URL pointing to the image that is to be analyzed."""  
    width: int = dataclasses.field(metadata={'query_param': { 'field_name': 'width', 'style': 'form', 'explode': True }})
    r"""Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."""  
    smart_cropping: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'smartCropping', 'style': 'form', 'explode': True }})
    r"""Boolean flag for enabling smart cropping."""  
    

@dataclasses.dataclass
class GenerateThumbnailResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    generate_thumbnail_200_application_octet_stream_binary_string: Optional[bytes] = dataclasses.field(default=None)
    r"""The generated thumbnail in binary format."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    