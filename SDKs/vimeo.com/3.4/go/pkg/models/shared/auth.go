// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AuthTokenTypeEnum - The token type:
//
// Option descriptions:
//   - `bearer` - The token is of the `bearer` type.
type AuthTokenTypeEnum string

const (
	AuthTokenTypeEnumBearer AuthTokenTypeEnum = "bearer"
)

func (e *AuthTokenTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bearer":
		*e = AuthTokenTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthTokenTypeEnum: %s", s)
	}
}

// Auth - The authorization code was exchanged.
type Auth struct {
	// The access token string.
	AccessToken string `json:"access_token"`
	// The API application associated with the token.
	App APIApp `json:"app"`
	// The date and time that the token expires.
	ExpiresOn *string `json:"expires_on,omitempty"`
	// The refresh token string.
	RefreshToken *string `json:"refresh_token,omitempty"`
	// The scope or scopes that the token supports.
	Scope string `json:"scope"`
	// The token type:
	//
	// Option descriptions:
	//  * `bearer` - The token is of the `bearer` type.
	//
	TokenType AuthTokenTypeEnum `json:"token_type"`
	// The user associated with the token.
	User *User `json:"user,omitempty"`
}
