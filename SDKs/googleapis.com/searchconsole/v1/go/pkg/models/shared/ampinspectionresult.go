// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AmpInspectionResultAmpIndexStatusVerdictEnum - Index status of the AMP URL.
type AmpInspectionResultAmpIndexStatusVerdictEnum string

const (
	AmpInspectionResultAmpIndexStatusVerdictEnumVerdictUnspecified AmpInspectionResultAmpIndexStatusVerdictEnum = "VERDICT_UNSPECIFIED"
	AmpInspectionResultAmpIndexStatusVerdictEnumPass               AmpInspectionResultAmpIndexStatusVerdictEnum = "PASS"
	AmpInspectionResultAmpIndexStatusVerdictEnumPartial            AmpInspectionResultAmpIndexStatusVerdictEnum = "PARTIAL"
	AmpInspectionResultAmpIndexStatusVerdictEnumFail               AmpInspectionResultAmpIndexStatusVerdictEnum = "FAIL"
	AmpInspectionResultAmpIndexStatusVerdictEnumNeutral            AmpInspectionResultAmpIndexStatusVerdictEnum = "NEUTRAL"
)

func (e AmpInspectionResultAmpIndexStatusVerdictEnum) ToPointer() *AmpInspectionResultAmpIndexStatusVerdictEnum {
	return &e
}

func (e *AmpInspectionResultAmpIndexStatusVerdictEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VERDICT_UNSPECIFIED":
		fallthrough
	case "PASS":
		fallthrough
	case "PARTIAL":
		fallthrough
	case "FAIL":
		fallthrough
	case "NEUTRAL":
		*e = AmpInspectionResultAmpIndexStatusVerdictEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AmpInspectionResultAmpIndexStatusVerdictEnum: %v", v)
	}
}

// AmpInspectionResultIndexingStateEnum - Whether or not the page blocks indexing through a noindex rule.
type AmpInspectionResultIndexingStateEnum string

const (
	AmpInspectionResultIndexingStateEnumAmpIndexingStateUnspecified         AmpInspectionResultIndexingStateEnum = "AMP_INDEXING_STATE_UNSPECIFIED"
	AmpInspectionResultIndexingStateEnumAmpIndexingAllowed                  AmpInspectionResultIndexingStateEnum = "AMP_INDEXING_ALLOWED"
	AmpInspectionResultIndexingStateEnumBlockedDueToNoindex                 AmpInspectionResultIndexingStateEnum = "BLOCKED_DUE_TO_NOINDEX"
	AmpInspectionResultIndexingStateEnumBlockedDueToExpiredUnavailableAfter AmpInspectionResultIndexingStateEnum = "BLOCKED_DUE_TO_EXPIRED_UNAVAILABLE_AFTER"
)

func (e AmpInspectionResultIndexingStateEnum) ToPointer() *AmpInspectionResultIndexingStateEnum {
	return &e
}

func (e *AmpInspectionResultIndexingStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AMP_INDEXING_STATE_UNSPECIFIED":
		fallthrough
	case "AMP_INDEXING_ALLOWED":
		fallthrough
	case "BLOCKED_DUE_TO_NOINDEX":
		fallthrough
	case "BLOCKED_DUE_TO_EXPIRED_UNAVAILABLE_AFTER":
		*e = AmpInspectionResultIndexingStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AmpInspectionResultIndexingStateEnum: %v", v)
	}
}

// AmpInspectionResultPageFetchStateEnum - Whether or not Google could fetch the AMP.
type AmpInspectionResultPageFetchStateEnum string

const (
	AmpInspectionResultPageFetchStateEnumPageFetchStateUnspecified AmpInspectionResultPageFetchStateEnum = "PAGE_FETCH_STATE_UNSPECIFIED"
	AmpInspectionResultPageFetchStateEnumSuccessful                AmpInspectionResultPageFetchStateEnum = "SUCCESSFUL"
	AmpInspectionResultPageFetchStateEnumSoft404                   AmpInspectionResultPageFetchStateEnum = "SOFT_404"
	AmpInspectionResultPageFetchStateEnumBlockedRobotsTxt          AmpInspectionResultPageFetchStateEnum = "BLOCKED_ROBOTS_TXT"
	AmpInspectionResultPageFetchStateEnumNotFound                  AmpInspectionResultPageFetchStateEnum = "NOT_FOUND"
	AmpInspectionResultPageFetchStateEnumAccessDenied              AmpInspectionResultPageFetchStateEnum = "ACCESS_DENIED"
	AmpInspectionResultPageFetchStateEnumServerError               AmpInspectionResultPageFetchStateEnum = "SERVER_ERROR"
	AmpInspectionResultPageFetchStateEnumRedirectError             AmpInspectionResultPageFetchStateEnum = "REDIRECT_ERROR"
	AmpInspectionResultPageFetchStateEnumAccessForbidden           AmpInspectionResultPageFetchStateEnum = "ACCESS_FORBIDDEN"
	AmpInspectionResultPageFetchStateEnumBlocked4Xx                AmpInspectionResultPageFetchStateEnum = "BLOCKED_4XX"
	AmpInspectionResultPageFetchStateEnumInternalCrawlError        AmpInspectionResultPageFetchStateEnum = "INTERNAL_CRAWL_ERROR"
	AmpInspectionResultPageFetchStateEnumInvalidURL                AmpInspectionResultPageFetchStateEnum = "INVALID_URL"
)

func (e AmpInspectionResultPageFetchStateEnum) ToPointer() *AmpInspectionResultPageFetchStateEnum {
	return &e
}

func (e *AmpInspectionResultPageFetchStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PAGE_FETCH_STATE_UNSPECIFIED":
		fallthrough
	case "SUCCESSFUL":
		fallthrough
	case "SOFT_404":
		fallthrough
	case "BLOCKED_ROBOTS_TXT":
		fallthrough
	case "NOT_FOUND":
		fallthrough
	case "ACCESS_DENIED":
		fallthrough
	case "SERVER_ERROR":
		fallthrough
	case "REDIRECT_ERROR":
		fallthrough
	case "ACCESS_FORBIDDEN":
		fallthrough
	case "BLOCKED_4XX":
		fallthrough
	case "INTERNAL_CRAWL_ERROR":
		fallthrough
	case "INVALID_URL":
		*e = AmpInspectionResultPageFetchStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AmpInspectionResultPageFetchStateEnum: %v", v)
	}
}

// AmpInspectionResultRobotsTxtStateEnum - Whether or not the page is blocked to Google by a robots.txt rule.
type AmpInspectionResultRobotsTxtStateEnum string

const (
	AmpInspectionResultRobotsTxtStateEnumRobotsTxtStateUnspecified AmpInspectionResultRobotsTxtStateEnum = "ROBOTS_TXT_STATE_UNSPECIFIED"
	AmpInspectionResultRobotsTxtStateEnumAllowed                   AmpInspectionResultRobotsTxtStateEnum = "ALLOWED"
	AmpInspectionResultRobotsTxtStateEnumDisallowed                AmpInspectionResultRobotsTxtStateEnum = "DISALLOWED"
)

func (e AmpInspectionResultRobotsTxtStateEnum) ToPointer() *AmpInspectionResultRobotsTxtStateEnum {
	return &e
}

func (e *AmpInspectionResultRobotsTxtStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ROBOTS_TXT_STATE_UNSPECIFIED":
		fallthrough
	case "ALLOWED":
		fallthrough
	case "DISALLOWED":
		*e = AmpInspectionResultRobotsTxtStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AmpInspectionResultRobotsTxtStateEnum: %v", v)
	}
}

// AmpInspectionResultVerdictEnum - The status of the most severe error on the page. If a page has both warnings and errors, the page status is error. Error status means the page cannot be shown in Search results.
type AmpInspectionResultVerdictEnum string

const (
	AmpInspectionResultVerdictEnumVerdictUnspecified AmpInspectionResultVerdictEnum = "VERDICT_UNSPECIFIED"
	AmpInspectionResultVerdictEnumPass               AmpInspectionResultVerdictEnum = "PASS"
	AmpInspectionResultVerdictEnumPartial            AmpInspectionResultVerdictEnum = "PARTIAL"
	AmpInspectionResultVerdictEnumFail               AmpInspectionResultVerdictEnum = "FAIL"
	AmpInspectionResultVerdictEnumNeutral            AmpInspectionResultVerdictEnum = "NEUTRAL"
)

func (e AmpInspectionResultVerdictEnum) ToPointer() *AmpInspectionResultVerdictEnum {
	return &e
}

func (e *AmpInspectionResultVerdictEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VERDICT_UNSPECIFIED":
		fallthrough
	case "PASS":
		fallthrough
	case "PARTIAL":
		fallthrough
	case "FAIL":
		fallthrough
	case "NEUTRAL":
		*e = AmpInspectionResultVerdictEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AmpInspectionResultVerdictEnum: %v", v)
	}
}

// AmpInspectionResult - AMP inspection result of the live page or the current information from Google's index, depending on whether you requested a live inspection or not.
type AmpInspectionResult struct {
	// Index status of the AMP URL.
	AmpIndexStatusVerdict *AmpInspectionResultAmpIndexStatusVerdictEnum `json:"ampIndexStatusVerdict,omitempty"`
	// URL of the AMP that was inspected. If the submitted URL is a desktop page that refers to an AMP version, the AMP version will be inspected.
	AmpURL *string `json:"ampUrl,omitempty"`
	// Whether or not the page blocks indexing through a noindex rule.
	IndexingState *AmpInspectionResultIndexingStateEnum `json:"indexingState,omitempty"`
	// A list of zero or more AMP issues found for the inspected URL.
	Issues []AmpIssue `json:"issues,omitempty"`
	// Last time this AMP version was crawled by Google. Absent if the URL was never crawled successfully.
	LastCrawlTime *string `json:"lastCrawlTime,omitempty"`
	// Whether or not Google could fetch the AMP.
	PageFetchState *AmpInspectionResultPageFetchStateEnum `json:"pageFetchState,omitempty"`
	// Whether or not the page is blocked to Google by a robots.txt rule.
	RobotsTxtState *AmpInspectionResultRobotsTxtStateEnum `json:"robotsTxtState,omitempty"`
	// The status of the most severe error on the page. If a page has both warnings and errors, the page status is error. Error status means the page cannot be shown in Search results.
	Verdict *AmpInspectionResultVerdictEnum `json:"verdict,omitempty"`
}
