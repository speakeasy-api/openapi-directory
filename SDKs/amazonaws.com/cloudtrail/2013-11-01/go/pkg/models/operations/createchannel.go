// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateChannelXAmzTargetEnum
type CreateChannelXAmzTargetEnum string

const (
	CreateChannelXAmzTargetEnumComAmazonawsCloudtrailV20131101CloudTrail20131101CreateChannel CreateChannelXAmzTargetEnum = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.CreateChannel"
)

func (e CreateChannelXAmzTargetEnum) ToPointer() *CreateChannelXAmzTargetEnum {
	return &e
}

func (e *CreateChannelXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.CreateChannel":
		*e = CreateChannelXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateChannelXAmzTargetEnum: %v", v)
	}
}

type CreateChannelRequest struct {
	CreateChannelRequest shared.CreateChannelRequest `request:"mediaType=application/json"`
	XAmzAlgorithm        *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget           CreateChannelXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateChannelResponse struct {
	// ChannelAlreadyExistsException
	ChannelAlreadyExistsException interface{}
	// ChannelMaxLimitExceededException
	ChannelMaxLimitExceededException interface{}
	ContentType                      string
	// Success
	CreateChannelResponse *shared.CreateChannelResponse
	// EventDataStoreARNInvalidException
	EventDataStoreARNInvalidException interface{}
	// EventDataStoreNotFoundException
	EventDataStoreNotFoundException interface{}
	// InactiveEventDataStoreException
	InactiveEventDataStoreException interface{}
	// InvalidEventDataStoreCategoryException
	InvalidEventDataStoreCategoryException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidSourceException
	InvalidSourceException interface{}
	// InvalidTagParameterException
	InvalidTagParameterException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// TagsLimitExceededException
	TagsLimitExceededException interface{}
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
