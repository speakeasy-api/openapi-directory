<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Files 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new file association
     * 
     * By passing in the appropriate options, you can create a new folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFileAssociationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFileAssociationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFileAssociationResponse
     */
	public function createFileAssociation(
        \OpenAPI\OpenAPI\Models\Operations\CreateFileAssociationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateFileAssociationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFileAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Files/{FileId}/Associations', \OpenAPI\OpenAPI\Models\Operations\CreateFileAssociationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "association", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFileAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->association = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Association', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Creates a new folder
     * 
     * By passing in the appropriate properties, you can create a new folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFolderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFolderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFolderResponse
     */
	public function createFolder(
        \OpenAPI\OpenAPI\Models\Operations\CreateFolderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateFolderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFolderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Folders');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "folder", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFolderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->folder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Folder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Deletes a specific file
     * 
     * Delete a specific file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFileResponse
     */
	public function deleteFile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteFileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Files/{FileId}', \OpenAPI\OpenAPI\Models\Operations\DeleteFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes an existing file association
     * 
     * By passing in the appropriate options, you can create a new folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFileAssociationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFileAssociationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFileAssociationResponse
     */
	public function deleteFileAssociation(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFileAssociationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteFileAssociationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFileAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Files/{FileId}/Associations/{ObjectId}', \OpenAPI\OpenAPI\Models\Operations\DeleteFileAssociationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFileAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes a folder
     * 
     * By passing in the appropriate ID, you can delete a folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFolderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFolderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFolderResponse
     */
	public function deleteFolder(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFolderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteFolderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFolderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Folders/{FolderId}', \OpenAPI\OpenAPI\Models\Operations\DeleteFolderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFolderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Retrieves an association object using a unique object ID
     * 
     * By passing in the appropriate options,
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssociationsByObjectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssociationsByObjectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAssociationsByObjectResponse
     */
	public function getAssociationsByObject(
        \OpenAPI\OpenAPI\Models\Operations\GetAssociationsByObjectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAssociationsByObjectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAssociationsByObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Associations/{ObjectId}', \OpenAPI\OpenAPI\Models\Operations\GetAssociationsByObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAssociationsByObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Association>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a file by a unique file ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFileResponse
     */
	public function getFile(
        \OpenAPI\OpenAPI\Models\Operations\GetFileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Files/{FileId}', \OpenAPI\OpenAPI\Models\Operations\GetFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fileObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FileObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a specific file associations
     * 
     * By passing in the appropriate options, 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFileAssociationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFileAssociationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFileAssociationsResponse
     */
	public function getFileAssociations(
        \OpenAPI\OpenAPI\Models\Operations\GetFileAssociationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFileAssociationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFileAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Files/{FileId}/Associations', \OpenAPI\OpenAPI\Models\Operations\GetFileAssociationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFileAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Association>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the content of a specific file
     * 
     * By passing in the appropriate options, retrieve data for specific file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFileContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFileContentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFileContentResponse
     */
	public function getFileContent(
        \OpenAPI\OpenAPI\Models\Operations\GetFileContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFileContentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFileContentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Files/{FileId}/Content', \OpenAPI\OpenAPI\Models\Operations\GetFileContentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFileContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->getFileContent200ApplicationOctetStreamBinaryString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Retrieves files
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFilesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFilesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFilesResponse
     */
	public function getFiles(
        \OpenAPI\OpenAPI\Models\Operations\GetFilesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFilesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Files');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFilesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->files = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Files', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves specific folder by using a unique folder ID
     * 
     * By passing in the appropriate ID, you can search for specific folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFolderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFolderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFolderResponse
     */
	public function getFolder(
        \OpenAPI\OpenAPI\Models\Operations\GetFolderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFolderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFolderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Folders/{FolderId}', \OpenAPI\OpenAPI\Models\Operations\GetFolderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFolderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->folder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Folder', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves folders
     * 
     * By passing in the appropriate options, you can search for available folders
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFoldersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFoldersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFoldersResponse
     */
	public function getFolders(
        \OpenAPI\OpenAPI\Models\Operations\GetFoldersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFoldersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFoldersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Folders');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFoldersRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFoldersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->folders = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Folder>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves inbox folder
     * 
     * Search for the user inbox
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetInboxRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetInboxSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetInboxResponse
     */
	public function getInbox(
        \OpenAPI\OpenAPI\Models\Operations\GetInboxRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetInboxSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetInboxResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Inbox');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetInboxResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->folder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Folder', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a file
     * 
     * Updates file properties of a single file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFileResponse
     */
	public function updateFile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateFileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateFileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Files/{FileId}', \OpenAPI\OpenAPI\Models\Operations\UpdateFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "fileObject", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fileObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FileObject', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Updates an existing folder
     * 
     * By passing in the appropriate ID and properties, you can update a folder
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFolderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFolderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFolderResponse
     */
	public function updateFolder(
        \OpenAPI\OpenAPI\Models\Operations\UpdateFolderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateFolderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFolderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Folders/{FolderId}', \OpenAPI\OpenAPI\Models\Operations\UpdateFolderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "folder", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFolderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->folder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Folder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Uploads a File
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadFileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadFileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UploadFileResponse
     */
	public function uploadFile(
        \OpenAPI\OpenAPI\Models\Operations\UploadFileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UploadFileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UploadFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Files');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UploadFileRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UploadFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fileObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FileObject', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}