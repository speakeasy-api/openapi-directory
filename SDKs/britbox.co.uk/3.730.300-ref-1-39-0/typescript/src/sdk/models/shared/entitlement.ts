/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ClassificationSummary } from "./classificationsummary";
import { ExclusionRule } from "./exclusionrule";
import { Expose, Transform, Type } from "class-transformer";

export enum EntitlementDeliveryTypeEnum {
  Stream = "Stream",
  Download = "Download",
  StreamOrDownload = "StreamOrDownload",
  ProgressiveDownload = "ProgressiveDownload",
  None = "None",
}

/**
 * The type of item this entitlement is for.
 */
export enum EntitlementItemTypeEnum {
  Movie = "movie",
  Show = "show",
  Season = "season",
  Episode = "episode",
  Program = "program",
  Link = "link",
  Trailer = "trailer",
  Channel = "channel",
  CustomAsset = "customAsset",
}

export enum EntitlementOwnershipEnum {
  Subscription = "Subscription",
  Free = "Free",
  Rent = "Rent",
  Own = "Own",
  None = "None",
}

export enum EntitlementResolutionEnum {
  Sd = "SD",
  Hd720 = "HD-720",
  Hd1080 = "HD-1080",
  Hd4K = "HD-4K",
  External = "External",
  Unknown = "Unknown",
}

/**
 * The base type for both Offer and Entitlement.
 */
export class Entitlement extends SpeakeasyBase {
  /**
   * The date of activation. If no date is defined the entitlement has not be activated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  activationDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "classification" })
  @Type(() => ClassificationSummary)
  classification?: ClassificationSummary;

  /**
   * The date the entitlement was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "deliveryType" })
  deliveryType: EntitlementDeliveryTypeEnum;

  /**
   * Any specific playback exclusion rules.
   */
  @SpeakeasyMetadata({ elemType: ExclusionRule })
  @Expose({ name: "exclusionRules" })
  @Type(() => ExclusionRule)
  exclusionRules?: ExclusionRule[];

  /**
   * The date the entitlement expires.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expirationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationDate?: Date;

  /**
   * The id of the item this entitlement is for.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itemId" })
  itemId?: string;

  /**
   * The type of item this entitlement is for.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itemType" })
  itemType?: EntitlementItemTypeEnum;

  /**
   * The maximum number of allowed downloads.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxDownloads" })
  maxDownloads?: number;

  /**
   * The maximum number of allowed plays.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxPlays" })
  maxPlays?: number;

  /**
   * The duration of the entitled media.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mediaDuration" })
  mediaDuration?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ownership" })
  ownership: EntitlementOwnershipEnum;

  /**
   * The id of the plan this entitlement is for.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "planId" })
  planId?: string;

  /**
   * How many times the media has been played.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "playCount" })
  playCount?: number;

  /**
   * The length of time in minutes which the rental will last once played for the first time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "playPeriod" })
  playPeriod?: number;

  /**
   * How many more downloads of this media are available.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remainingDownloads" })
  remainingDownloads?: number;

  /**
   * The length of time in minutes which the rental will last once purchased.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rentalPeriod" })
  rentalPeriod?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "resolution" })
  resolution: EntitlementResolutionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "scopes" })
  scopes: string[];
}
