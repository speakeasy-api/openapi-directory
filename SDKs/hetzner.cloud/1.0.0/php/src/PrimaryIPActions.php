<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PrimaryIPActions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Assign a Primary IP to a resource
     * 
     * Assigns a Primary IP to a Server.
     * 
     * A Server can only have one Primary IP of type `ipv4` and one of type `ipv6` assigned. If you need more IPs use Floating IPs.
     * 
     * The Server must be powered off (status `off`) in order for this operation to succeed.
     * 
     * #### Call specific error codes
     * 
     * | Code                          | Description                                                   |
     * |------------------------------ |-------------------------------------------------------------- |
     * | `server_not_stopped`          | The server is running, but needs to be powered off            |
     * | `primary_ip_already_assigned` | Primary ip is already assigned to a different server          |
     * | `server_has_ipv4`             | The server already has an ipv4 address                        |
     * | `server_has_ipv6`             | The server already has an ipv6 address                        |
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsAssignRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsAssignResponse
     */
	public function postPrimaryIpsIdActionsAssign(
        \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsAssignRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsAssignResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/primary_ips/{id}/actions/assign', \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsAssignRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsAssignResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsAssignActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change reverse DNS entry for a Primary IP
     * 
     * Changes the hostname that will appear when getting the hostname belonging to this Primary IP.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsChangeDnsPtrRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsChangeDnsPtrResponse
     */
	public function postPrimaryIpsIdActionsChangeDnsPtr(
        \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsChangeDnsPtrRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsChangeDnsPtrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/primary_ips/{id}/actions/change_dns_ptr', \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsChangeDnsPtrRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsChangeDnsPtrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsChangeDnsPtrActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change Primary IP Protection
     * 
     * Changes the protection configuration of a Primary IP.
     * 
     * A Primary IP can only be delete protected if its `auto_delete` property is set to `false`.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsChangeProtectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsChangeProtectionResponse
     */
	public function postPrimaryIpsIdActionsChangeProtection(
        \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsChangeProtectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsChangeProtectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/primary_ips/{id}/actions/change_protection', \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsChangeProtectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsChangeProtectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsChangeProtectionActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unassign a Primary IP from a resource
     * 
     * Unassigns a Primary IP from a Server.
     * 
     * The Server must be powered off (status `off`) in order for this operation to succeed.
     * 
     * Note that only Servers that have at least one network interface (public or private) attached can be powered on.
     * 
     * #### Call specific error codes
     * 
     * | Code                              | Description                                                   |
     * |---------------------------------- |-------------------------------------------------------------- |
     * | `server_not_stopped`              | The server is running, but needs to be powered off            |
     * | `server_is_load_balancer_target`  | The server ipv4 address is a loadbalancer target              |
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsUnassignRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsUnassignResponse
     */
	public function postPrimaryIpsIdActionsUnassign(
        \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsUnassignRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsUnassignResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/primary_ips/{id}/actions/unassign', \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsUnassignRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsUnassignResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPrimaryIpsIdActionsUnassignActionResponse', 'json');
            }
        }

        return $response;
    }
}