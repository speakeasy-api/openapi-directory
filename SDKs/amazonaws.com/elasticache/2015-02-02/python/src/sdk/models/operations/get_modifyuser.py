"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import inputauthenticationtype_enum as shared_inputauthenticationtype_enum
from enum import Enum
from typing import Optional

class GETModifyUserActionEnum(str, Enum):
    MODIFY_USER = 'ModifyUser'


@dataclasses.dataclass
class GETModifyUserAuthenticationMode:
    r"""Specifies the authentication mode to use."""
    
    passwords: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Passwords' }})  
    type: Optional[shared_inputauthenticationtype_enum.InputAuthenticationTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Type' }})  
    
class GETModifyUserVersionEnum(str, Enum):
    TWO_THOUSAND_AND_FIFTEEN_02_02 = '2015-02-02'


@dataclasses.dataclass
class GETModifyUserRequest:
    
    action: GETModifyUserActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    user_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'UserId', 'style': 'form', 'explode': True }})
    r"""The ID of the user."""  
    version: GETModifyUserVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    access_string: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AccessString', 'style': 'form', 'explode': True }})
    r"""Access permissions string used for this user."""  
    append_access_string: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AppendAccessString', 'style': 'form', 'explode': True }})
    r"""Adds additional user permissions to the access string."""  
    authentication_mode: Optional[GETModifyUserAuthenticationMode] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AuthenticationMode', 'style': 'form', 'explode': True }})
    r"""Specifies how to authenticate the user."""  
    no_password_required: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NoPasswordRequired', 'style': 'form', 'explode': True }})
    r"""Indicates no password is required for the user."""  
    passwords: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Passwords', 'style': 'form', 'explode': True }})
    r"""The passwords belonging to the user. You are allowed up to two."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifyUserResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    