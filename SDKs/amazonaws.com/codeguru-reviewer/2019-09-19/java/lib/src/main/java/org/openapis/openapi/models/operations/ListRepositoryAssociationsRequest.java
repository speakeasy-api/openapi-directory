/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class ListRepositoryAssociationsRequest {
    /**
     * The maximum number of repository association results returned by &lt;code&gt;ListRepositoryAssociations&lt;/code&gt; in paginated output. When this parameter is used, &lt;code&gt;ListRepositoryAssociations&lt;/code&gt; only returns &lt;code&gt;maxResults&lt;/code&gt; results in a single page with a &lt;code&gt;nextToken&lt;/code&gt; response element. The remaining results of the initial request can be seen by sending another &lt;code&gt;ListRepositoryAssociations&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If this parameter is not used, &lt;code&gt;ListRepositoryAssociations&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=MaxResults")
    public Long maxResults;

    public ListRepositoryAssociationsRequest withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * List of repository names to use as a filter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=Name")
    public String[] name;

    public ListRepositoryAssociationsRequest withName(String[] name) {
        this.name = name;
        return this;
    }
    
    /**
     * &lt;p&gt;The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListRepositoryAssociations&lt;/code&gt; request where &lt;code&gt;maxResults&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Treat this token as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.&lt;/p&gt; &lt;/note&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=NextToken")
    public String nextToken;

    public ListRepositoryAssociationsRequest withNextToken(String nextToken) {
        this.nextToken = nextToken;
        return this;
    }
    
    /**
     * List of owners to use as a filter. For Amazon Web Services CodeCommit, it is the name of the CodeCommit account that was used to associate the repository. For other repository source providers, such as Bitbucket and GitHub Enterprise Server, this is name of the account that was used to associate the repository. 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=Owner")
    public String[] owner;

    public ListRepositoryAssociationsRequest withOwner(String[] owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * List of provider types to use as a filter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ProviderType")
    public org.openapis.openapi.models.shared.ProviderTypeEnum[] providerType;

    public ListRepositoryAssociationsRequest withProviderType(org.openapis.openapi.models.shared.ProviderTypeEnum[] providerType) {
        this.providerType = providerType;
        return this;
    }
    
    /**
     * &lt;p&gt;List of repository association states to use as a filter.&lt;/p&gt; &lt;p&gt;The valid repository association states are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Associated&lt;/b&gt;: The repository association is complete.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Associating&lt;/b&gt;: CodeGuru Reviewer is:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Setting up pull request notifications. This is required for pull requests to trigger a CodeGuru Reviewer review.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If your repository &lt;code&gt;ProviderType&lt;/code&gt; is &lt;code&gt;GitHub&lt;/code&gt;, &lt;code&gt;GitHub Enterprise Server&lt;/code&gt;, or &lt;code&gt;Bitbucket&lt;/code&gt;, CodeGuru Reviewer creates webhooks in your repository to trigger CodeGuru Reviewer reviews. If you delete these webhooks, reviews of code in your repository cannot be triggered.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Setting up source code access. This is required for CodeGuru Reviewer to securely clone code in your repository.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Failed&lt;/b&gt;: The repository failed to associate or disassociate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Disassociating&lt;/b&gt;: CodeGuru Reviewer is removing the repository's pull request notifications and source code access.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Disassociated&lt;/b&gt;: CodeGuru Reviewer successfully disassociated the repository. You can create a new association with this repository if you want to review source code in it later. You can control access to code reviews created in anassociated repository with tags after it has been disassociated. For more information, see &lt;a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/auth-and-access-control-using-tags.html"&gt;Using tags to control access to associated repositories&lt;/a&gt; in the &lt;i&gt;Amazon CodeGuru Reviewer User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=State")
    public org.openapis.openapi.models.shared.RepositoryAssociationStateEnum[] state;

    public ListRepositoryAssociationsRequest withState(org.openapis.openapi.models.shared.RepositoryAssociationStateEnum[] state) {
        this.state = state;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Algorithm")
    public String xAmzAlgorithm;

    public ListRepositoryAssociationsRequest withXAmzAlgorithm(String xAmzAlgorithm) {
        this.xAmzAlgorithm = xAmzAlgorithm;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Content-Sha256")
    public String xAmzContentSha256;

    public ListRepositoryAssociationsRequest withXAmzContentSha256(String xAmzContentSha256) {
        this.xAmzContentSha256 = xAmzContentSha256;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Credential")
    public String xAmzCredential;

    public ListRepositoryAssociationsRequest withXAmzCredential(String xAmzCredential) {
        this.xAmzCredential = xAmzCredential;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Date")
    public String xAmzDate;

    public ListRepositoryAssociationsRequest withXAmzDate(String xAmzDate) {
        this.xAmzDate = xAmzDate;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Security-Token")
    public String xAmzSecurityToken;

    public ListRepositoryAssociationsRequest withXAmzSecurityToken(String xAmzSecurityToken) {
        this.xAmzSecurityToken = xAmzSecurityToken;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Signature")
    public String xAmzSignature;

    public ListRepositoryAssociationsRequest withXAmzSignature(String xAmzSignature) {
        this.xAmzSignature = xAmzSignature;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-SignedHeaders")
    public String xAmzSignedHeaders;

    public ListRepositoryAssociationsRequest withXAmzSignedHeaders(String xAmzSignedHeaders) {
        this.xAmzSignedHeaders = xAmzSignedHeaders;
        return this;
    }
    
    public ListRepositoryAssociationsRequest(){}
}
