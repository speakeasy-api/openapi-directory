"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class EmployeeEmployeeAEAssessmentOverrideEnum(str, Enum):
    r"""The employees' a e assessment override"""
    NONE = 'None'
    OPT_OUT = 'OptOut'
    OPT_IN = 'OptIn'
    VOLUNTARY_JOINER = 'VoluntaryJoiner'
    CONTRACTUAL_PENSION = 'ContractualPension'
    CEASED_MEMBERSHIP = 'CeasedMembership'
    LEAVER = 'Leaver'
    EXCLUDED = 'Excluded'

class EmployeeEmployeeAEExclusionReasonCodeEnum(str, Enum):
    r"""The employees' a e exclusion reason code"""
    OTHER_NOT_KNOWN = 'OtherNotKnown'
    NOT_A_WORKER = 'NotAWorker'
    NOT_UK_WORKER = 'NotUKWorker'
    TEMPORARY_UK_WORKER = 'TemporaryUKWorker'
    OUTSIDE_AGE_RANGE = 'OutsideAgeRange'
    SINGLE_EMPLOYEE_DIRECTOR = 'SingleEmployeeDirector'
    CEASED_MEMBERSHIP_WITHIN12_MONTHS = 'CeasedMembershipWithin12Months'
    CEASED_MEMBERSHIP_BEYOND12_MONTHS = 'CeasedMembershipBeyond12Months'
    WORKER_WULS_WITHIN12_MONTH = 'WorkerWULSWithin12Month'
    WORKER_WULS_BEYOND12_MONTH = 'WorkerWULSBeyond12Month'
    WORKER_IN_NOTICE_PERIOD = 'WorkerInNoticePeriod'
    WORKER_TAX_PROTECTION = 'WorkerTaxProtection'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeEmployeeAddress:
    r"""The employees' address"""
    
    address1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address1'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 1"""  
    address2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address2'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 2"""  
    address3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address3'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 3"""  
    address4: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address4'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 4"""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Country'), 'exclude': lambda f: f is None }})
    r"""The addresss' country"""  
    postcode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Postcode'), 'exclude': lambda f: f is None }})
    r"""The addresss' postcode"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeEmployeeBankAccount:
    r"""The employees' bank account"""
    
    account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountName'), 'exclude': lambda f: f is None }})
    r"""The bank accounts' account name"""  
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountNumber'), 'exclude': lambda f: f is None }})
    r"""The bank accounts' account number"""  
    branch_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BranchName'), 'exclude': lambda f: f is None }})
    r"""The bank accounts' branch name"""  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reference'), 'exclude': lambda f: f is None }})
    r"""The bank accounts' reference"""  
    sort_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SortCode'), 'exclude': lambda f: f is None }})
    r"""The bank accounts' sort code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeEmployeeEmployeePartner:
    r"""The employees' employee partner"""
    
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstName'), 'exclude': lambda f: f is None }})
    r"""The employee partners' first name"""  
    initials: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Initials'), 'exclude': lambda f: f is None }})
    r"""The employee partners' initials"""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastName'), 'exclude': lambda f: f is None }})
    r"""The employee partners' last name"""  
    middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MiddleName'), 'exclude': lambda f: f is None }})
    r"""The employee partners' middle name"""  
    ni_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NiNumber'), 'exclude': lambda f: f is None }})
    r"""The employee partners' ni number"""  
    
class EmployeeEmployeeGenderEnum(str, Enum):
    r"""The employees' gender"""
    UNKNOWN = 'Unknown'
    MALE = 'Male'
    FEMALE = 'Female'

class EmployeeEmployeeLeaverReasonEnum(str, Enum):
    r"""The employees' leaver reason"""
    RESIGNED = 'Resigned'
    DISMISSED = 'Dismissed'
    REDUNDANT = 'Redundant'
    RETIRED = 'Retired'
    DECEASED = 'Deceased'
    LEGAL_CUSTODY = 'LegalCustody'
    OTHER = 'Other'

class EmployeeEmployeeMaritalStatusEnum(str, Enum):
    r"""The employees' marital status"""
    NOT_SET = 'NotSet'
    SINGLE = 'Single'
    MARRIED = 'Married'
    DIVORCED = 'Divorced'
    WIDOWED = 'Widowed'

class EmployeeEmployeeNicLiabilityEnum(str, Enum):
    r"""The employees' nic liability"""
    HAS_OTHER_JOB = 'HasOtherJob'
    IS_FEMALE_ENTITLED_TO_REDUCED_RATE = 'IsFemaleEntitledToReducedRate'
    IS_NOT_LIABLE = 'IsNotLiable'
    IS_CONTRACTED_OUT = 'IsContractedOut'
    IS_FULLY_LIABLE = 'IsFullyLiable'
    IS_APPRENTICE = 'IsApprentice'
    LEAVER_BEYOND6_WEEKS = 'LeaverBeyond6Weeks'
    PAYMENT_AFTER_LEAVING_IRREGULAR = 'PaymentAfterLeavingIrregular'
    IS_FREE_PORT_WORKER = 'IsFreePortWorker'
    IS_NOT_LIABLE_FOR_EMPLOYER_NI = 'IsNotLiableForEmployerNi'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeEmployeePaySchedule:
    r"""The employees' pay schedule"""
    
    at_href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@href'), 'exclude': lambda f: f is None }})
    r"""The links' href"""  
    at_rel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@rel'), 'exclude': lambda f: f is None }})
    r"""The links' target type"""  
    at_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@title'), 'exclude': lambda f: f is None }})
    r"""The links' title"""  
    
class EmployeeEmployeePaymentMethodEnum(str, Enum):
    r"""The employees' payment method"""
    NOT_SET = 'NotSet'
    CASH = 'Cash'
    CHEQUE = 'Cheque'
    BACS = 'BACS'
    FASTER_PAYMENTS = 'FasterPayments'
    OTHER = 'Other'

class EmployeeEmployeeRegionEnum(str, Enum):
    r"""The employees' region"""
    NOT_SET = 'NotSet'
    ENGLAND = 'England'
    SCOTLAND = 'Scotland'
    WALES = 'Wales'

class EmployeeEmployeeRuleExclusionsEnum(str, Enum):
    r"""The employees' rule exclusions"""
    NONE = 'None'
    NI_MISSING_PAY_INSTRUCTION_RULE = 'NiMissingPayInstructionRule'
    TAX_MISSING_PAY_INSTRUCTION_RULE = 'TaxMissingPayInstructionRule'
    TAX_CODE_UPLIFT_RULE = 'TaxCodeUpliftRule'
    NI_SET_EXPECTED_LETTER_RULE = 'NiSetExpectedLetterRule'
    NI_DATE_OF_BIRTH_CHANGE_RETROSPECTIVE_C_RULE = 'NiDateOfBirthChangeRetrospectiveCRule'
    NI_DEFERMENT_STATUS_CHANGE_RULE = 'NiDefermentStatusChangeRule'
    NI_END_CONTRACTED_OUT_TRANSFER_RULE = 'NiEndContractedOutTransferRule'
    PAYMENT_AFTER_LEAVING_TAX_CODE_RULE = 'PaymentAfterLeavingTaxCodeRule'
    LEAVER_END_INSTRUCTIONS_RULE = 'LeaverEndInstructionsRule'
    P45_STUDENT_LOAN_INSTRUCTION_RULE = 'P45StudentLoanInstructionRule'
    P45_TAX_INSTRUCTION_RULE = 'P45TaxInstructionRule'
    P45_YTD_TAX_RULE = 'P45YtdTaxRule'
    YTD_INSTRUCTION_RULE = 'YtdInstructionRule'
    TAX_CODE_REGION_CHANGE_RULE = 'TaxCodeRegionChangeRule'
    AUTO_ENROLMENT_STATUS_CHANGE_RULE = 'AutoEnrolmentStatusChangeRule'
    EMPLOYEE_DECEASED_RULE = 'EmployeeDeceasedRule'
    BENEFIT_INSTRUCTION_AUTO_END_RULE = 'BenefitInstructionAutoEndRule'

class EmployeeEmployeeSecondedEnum(str, Enum):
    r"""The employees' seconded"""
    NOT_SET = 'NotSet'
    STAY183_DAYS_OR_MORE = 'Stay183DaysOrMore'
    STAY_LESS_THAN183_DAYS = 'StayLessThan183Days'
    IN_OUT_UK = 'InOutUk'

class EmployeeEmployeeStarterDeclarationEnum(str, Enum):
    r"""The employees' starter declaration"""
    PREVIOUSLY_REPORTED = 'PreviouslyReported'
    A = 'A'
    B = 'B'
    C = 'C'

class EmployeeEmployeeTerritoryEnum(str, Enum):
    r"""The employees' territory"""
    UNITED_KINGDOM = 'UnitedKingdom'

class EmployeeEmployeeWorkingWeekEnum(str, Enum):
    r"""The employees' working week"""
    NONE = 'None'
    MONDAY = 'Monday'
    TUESDAY = 'Tuesday'
    WEDNESDAY = 'Wednesday'
    THURSDAY = 'Thursday'
    FRIDAY = 'Friday'
    ALL_WEEK_DAYS = 'AllWeekDays'
    SATURDAY = 'Saturday'
    SUNDAY = 'Sunday'
    ALL_DAYS = 'AllDays'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeEmployee:
    
    address: Optional[EmployeeEmployeeAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address'), 'exclude': lambda f: f is None }})
    r"""The employees' address"""  
    ae_assessment_override: Optional[EmployeeEmployeeAEAssessmentOverrideEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AEAssessmentOverride'), 'exclude': lambda f: f is None }})
    r"""The employees' a e assessment override"""  
    ae_assessment_override_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AEAssessmentOverrideDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The employees' a e assessment override date"""  
    ae_exclusion_reason_code: Optional[EmployeeEmployeeAEExclusionReasonCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AEExclusionReasonCode'), 'exclude': lambda f: f is None }})
    r"""The employees' a e exclusion reason code"""  
    ae_postponement_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AEPostponementDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The employees' a e postponement date"""  
    bank_account: Optional[EmployeeEmployeeBankAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankAccount'), 'exclude': lambda f: f is None }})
    r"""The employees' bank account"""  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Code'), 'exclude': lambda f: f is None }})
    r"""The employees' code"""  
    date_of_birth: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DateOfBirth'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The employees' date of birth"""  
    deactivated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Deactivated'), 'exclude': lambda f: f is None }})
    r"""The employees' deactivated"""  
    directorship_appointment_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DirectorshipAppointmentDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The employees' directorship appointment date"""  
    eea_citizen: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EEACitizen'), 'exclude': lambda f: f is None }})
    r"""The employees' e e a citizen"""  
    effective_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EffectiveDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The employees' effective date"""  
    employee_partner: Optional[EmployeeEmployeeEmployeePartner] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployeePartner'), 'exclude': lambda f: f is None }})
    r"""The employees' employee partner"""  
    epm6: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EPM6'), 'exclude': lambda f: f is None }})
    r"""The employees' e p m6"""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstName'), 'exclude': lambda f: f is None }})
    r"""The employees' the first name"""  
    gender: Optional[EmployeeEmployeeGenderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Gender'), 'exclude': lambda f: f is None }})
    r"""The employees' gender"""  
    hours_per_week: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HoursPerWeek'), 'exclude': lambda f: f is None }})
    r"""The employees' hours per week"""  
    initials: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Initials'), 'exclude': lambda f: f is None }})
    r"""The employees' initials"""  
    irregular_employment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IrregularEmployment'), 'exclude': lambda f: f is None }})
    r"""The employees' irregular employment"""  
    is_agency_worker: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsAgencyWorker'), 'exclude': lambda f: f is None }})
    r"""The employees' is agency worker"""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastName'), 'exclude': lambda f: f is None }})
    r"""The employees' last name"""  
    leaver_reason: Optional[EmployeeEmployeeLeaverReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LeaverReason'), 'exclude': lambda f: f is None }})
    r"""The employees' leaver reason"""  
    leaving_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LeavingDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The employees' leaving date"""  
    marital_status: Optional[EmployeeEmployeeMaritalStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaritalStatus'), 'exclude': lambda f: f is None }})
    r"""The employees' marital status"""  
    meta_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetaData'), 'exclude': lambda f: f is None }})
    r"""The employees' meta data"""  
    middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MiddleName'), 'exclude': lambda f: f is None }})
    r"""The employees' middle name"""  
    next_revision_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextRevisionDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The employees' next revision date"""  
    nic_liability: Optional[EmployeeEmployeeNicLiabilityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NicLiability'), 'exclude': lambda f: f is None }})
    r"""The employees' nic liability"""  
    ni_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NiNumber'), 'exclude': lambda f: f is None }})
    r"""The employees' ni number"""  
    off_payroll_worker: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OffPayrollWorker'), 'exclude': lambda f: f is None }})
    r"""The employees' off payroll worker"""  
    on_strike: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OnStrike'), 'exclude': lambda f: f is None }})
    r"""The employees' on strike"""  
    p45_issued_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('P45IssuedDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The employees' p45 issued date"""  
    passport_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassportNumber'), 'exclude': lambda f: f is None }})
    r"""The employees' passport number"""  
    payment_method: Optional[EmployeeEmployeePaymentMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentMethod'), 'exclude': lambda f: f is None }})
    r"""The employees' payment method"""  
    payment_to_a_non_individual: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentToANonIndividual'), 'exclude': lambda f: f is None }})
    r"""The employees' payment to a non individual"""  
    pay_schedule: Optional[EmployeeEmployeePaySchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaySchedule'), 'exclude': lambda f: f is None }})
    r"""The employees' pay schedule"""  
    region: Optional[EmployeeEmployeeRegionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Region'), 'exclude': lambda f: f is None }})
    r"""The employees' region"""  
    revision: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Revision'), 'exclude': lambda f: f is None }})
    r"""The employees' revision"""  
    rule_exclusions: Optional[EmployeeEmployeeRuleExclusionsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleExclusions'), 'exclude': lambda f: f is None }})
    r"""The employees' rule exclusions"""  
    seconded: Optional[EmployeeEmployeeSecondedEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Seconded'), 'exclude': lambda f: f is None }})
    r"""The employees' seconded"""  
    start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The employees' start date"""  
    starter_declaration: Optional[EmployeeEmployeeStarterDeclarationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StarterDeclaration'), 'exclude': lambda f: f is None }})
    r"""The employees' starter declaration"""  
    territory: Optional[EmployeeEmployeeTerritoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Territory'), 'exclude': lambda f: f is None }})
    r"""The employees' territory"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Title'), 'exclude': lambda f: f is None }})
    r"""The employees' title"""  
    veteran_period_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VeteranPeriodStartDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The employees' veteran period start date"""  
    working_week: Optional[EmployeeEmployeeWorkingWeekEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkingWeek'), 'exclude': lambda f: f is None }})
    r"""The employees' working week"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Employee:
    r"""The employee object."""
    
    employee: Optional[EmployeeEmployee] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Employee'), 'exclude': lambda f: f is None }})  
    