// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MessageStatusMMSChannelEnum - The channel sending to.
type MessageStatusMMSChannelEnum string

const (
	MessageStatusMMSChannelEnumMms MessageStatusMMSChannelEnum = "mms"
)

func (e MessageStatusMMSChannelEnum) ToPointer() *MessageStatusMMSChannelEnum {
	return &e
}

func (e *MessageStatusMMSChannelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "mms":
		*e = MessageStatusMMSChannelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageStatusMMSChannelEnum: %v", v)
	}
}

// MessageStatusMMSError - If the message encountered a problem a descriptive error will be supplied in this object.
type MessageStatusMMSError struct {
	// Text describing the error. See [our errors list](https://developer.nexmo.com/api-errors/messages-olympus) for a list of possible errors
	Detail *string `json:"detail,omitempty"`
	// The record id of this error's occurrence.
	Instance *string `json:"instance,omitempty"`
	// The error code encountered when sending the message. See [our errors list](https://developer.nexmo.com/api-errors/messages-olympus) for a list of possible errors
	Title *string `json:"title,omitempty"`
	// The type of error encountered, follow URL for more details
	Type *string `json:"type,omitempty"`
}

// MessageStatusMMSStatusEnum - The status of the message.
type MessageStatusMMSStatusEnum string

const (
	MessageStatusMMSStatusEnumSubmitted     MessageStatusMMSStatusEnum = "submitted"
	MessageStatusMMSStatusEnumDelivered     MessageStatusMMSStatusEnum = "delivered"
	MessageStatusMMSStatusEnumRejected      MessageStatusMMSStatusEnum = "rejected"
	MessageStatusMMSStatusEnumUndeliverable MessageStatusMMSStatusEnum = "undeliverable"
)

func (e MessageStatusMMSStatusEnum) ToPointer() *MessageStatusMMSStatusEnum {
	return &e
}

func (e *MessageStatusMMSStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "submitted":
		fallthrough
	case "delivered":
		fallthrough
	case "rejected":
		fallthrough
	case "undeliverable":
		*e = MessageStatusMMSStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageStatusMMSStatusEnum: %v", v)
	}
}

// MessageStatusMMSUsageCurrencyEnum - The charge currency in ISO 4217 format.
type MessageStatusMMSUsageCurrencyEnum string

const (
	MessageStatusMMSUsageCurrencyEnumEur MessageStatusMMSUsageCurrencyEnum = "EUR"
)

func (e MessageStatusMMSUsageCurrencyEnum) ToPointer() *MessageStatusMMSUsageCurrencyEnum {
	return &e
}

func (e *MessageStatusMMSUsageCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = MessageStatusMMSUsageCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageStatusMMSUsageCurrencyEnum: %v", v)
	}
}

type MessageStatusMMSUsage struct {
	// The charge currency in ISO 4217 format.
	Currency *MessageStatusMMSUsageCurrencyEnum `json:"currency,omitempty"`
	// The charge amount as a stringified number.
	Price *string `json:"price,omitempty"`
}

// MessageStatusMMS - MMS
type MessageStatusMMS struct {
	// The channel sending to.
	Channel MessageStatusMMSChannelEnum `json:"channel"`
	// Client reference of up to 100 characters. The reference will be present in every message status.
	ClientRef *string `json:"client_ref,omitempty"`
	// If the message encountered a problem a descriptive error will be supplied in this object.
	Error *MessageStatusMMSError `json:"error,omitempty"`
	// The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
	//
	From string `json:"from"`
	// The UUID of the message
	MessageUUID string `json:"message_uuid"`
	// The status of the message.
	Status MessageStatusMMSStatusEnum `json:"status"`
	// The datetime of when the event occurred, in `ISO 8601` format.
	Timestamp string `json:"timestamp"`
	// The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
	//
	To    string                 `json:"to"`
	Usage *MessageStatusMMSUsage `json:"usage,omitempty"`
}
