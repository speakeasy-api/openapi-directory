/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete project article
   *
   * @remarks
   * Delete project article
   */
  privateProjectArticleDelete(
    req: operations.PrivateProjectArticleDeleteRequest,
    security: operations.PrivateProjectArticleDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectArticleDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectArticleDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}/articles/{article_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectArticleDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectArticleDeleteResponse =
        new operations.PrivateProjectArticleDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Project article details
   *
   * @remarks
   * Project article details
   */
  privateProjectArticleDetails(
    req: operations.PrivateProjectArticleDetailsRequest,
    security: operations.PrivateProjectArticleDetailsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectArticleDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectArticleDetailsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}/articles/{article_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectArticleDetailsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectArticleDetailsResponse =
        new operations.PrivateProjectArticleDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectArticle = utils.objectToClass(
              httpRes?.data,
              shared.ProjectArticle
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Project article file details
   *
   * @remarks
   * Project article file details
   */
  privateProjectArticleFile(
    req: operations.PrivateProjectArticleFileRequest,
    security: operations.PrivateProjectArticleFileSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectArticleFileResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectArticleFileRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}/articles/{article_id}/files/{file_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectArticleFileSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectArticleFileResponse =
        new operations.PrivateProjectArticleFileResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.privateFile = utils.objectToClass(
              httpRes?.data,
              shared.PrivateFile
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Project article list files
   *
   * @remarks
   * List article files
   */
  privateProjectArticleFiles(
    req: operations.PrivateProjectArticleFilesRequest,
    security: operations.PrivateProjectArticleFilesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectArticleFilesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectArticleFilesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}/articles/{article_id}/files",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectArticleFilesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectArticleFilesResponse =
        new operations.PrivateProjectArticleFilesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.privateFiles = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.privateFiles = utils.objectToClass(
              httpRes?.data,
              shared.PrivateFile,
              resFieldDepth
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create project article
   *
   * @remarks
   * Create a new Article and associate it with this project
   */
  privateProjectArticlesCreate(
    req: operations.PrivateProjectArticlesCreateRequest,
    security: operations.PrivateProjectArticlesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectArticlesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectArticlesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}/articles",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "articleProjectCreate",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectArticlesCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectArticlesCreateResponse =
        new operations.PrivateProjectArticlesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.locationWarnings = utils.objectToClass(
              httpRes?.data,
              shared.LocationWarnings
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List project articles
   *
   * @remarks
   * List project articles
   */
  privateProjectArticlesList(
    req: operations.PrivateProjectArticlesListRequest,
    security: operations.PrivateProjectArticlesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectArticlesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectArticlesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}/articles",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectArticlesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectArticlesListResponse =
        new operations.PrivateProjectArticlesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.articles = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.articles = utils.objectToClass(
              httpRes?.data,
              shared.Article,
              resFieldDepth
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove project collaborator
   *
   * @remarks
   * Remove project collaborator
   */
  privateProjectCollaboratorDelete(
    req: operations.PrivateProjectCollaboratorDeleteRequest,
    security: operations.PrivateProjectCollaboratorDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectCollaboratorDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectCollaboratorDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}/collaborators/{user_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectCollaboratorDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectCollaboratorDeleteResponse =
        new operations.PrivateProjectCollaboratorDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Invite project collaborators
   *
   * @remarks
   * Invite users to collaborate on project or view the project
   */
  privateProjectCollaboratorsInvite(
    req: operations.PrivateProjectCollaboratorsInviteRequest,
    security: operations.PrivateProjectCollaboratorsInviteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectCollaboratorsInviteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectCollaboratorsInviteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}/collaborators",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "projectCollaboratorInvite",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectCollaboratorsInviteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectCollaboratorsInviteResponse =
        new operations.PrivateProjectCollaboratorsInviteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseMessage = utils.objectToClass(
              httpRes?.data,
              shared.ResponseMessage
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List project collaborators
   *
   * @remarks
   * List Project collaborators and invited users
   */
  privateProjectCollaboratorsList(
    req: operations.PrivateProjectCollaboratorsListRequest,
    security: operations.PrivateProjectCollaboratorsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectCollaboratorsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectCollaboratorsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}/collaborators",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectCollaboratorsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectCollaboratorsListResponse =
        new operations.PrivateProjectCollaboratorsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectCollaborators = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.projectCollaborators = utils.objectToClass(
              httpRes?.data,
              shared.ProjectCollaborator,
              resFieldDepth
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create project
   *
   * @remarks
   * Create a new project
   */
  privateProjectCreate(
    req: shared.ProjectCreate,
    security: operations.PrivateProjectCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ProjectCreate(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/projects";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectCreateResponse =
        new operations.PrivateProjectCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createProjectResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateProjectResponse
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete project
   *
   * @remarks
   * A project can be deleted only if: - it is not public - it does not have public articles.
   *
   * When an individual project is deleted, all the articles are moved to my data of each owner.
   *
   * When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project.
   *
   */
  privateProjectDelete(
    req: operations.PrivateProjectDeleteRequest,
    security: operations.PrivateProjectDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectDeleteResponse =
        new operations.PrivateProjectDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * View project details
   *
   * @remarks
   * View a private project
   */
  privateProjectDetails(
    req: operations.PrivateProjectDetailsRequest,
    security: operations.PrivateProjectDetailsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectDetailsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectDetailsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectDetailsResponse =
        new operations.PrivateProjectDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectCompletePrivate = utils.objectToClass(
              httpRes?.data,
              shared.ProjectCompletePrivate
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Private Project Leave
   *
   * @remarks
   * Please note: project's owner cannot leave the project.
   */
  privateProjectLeave(
    req: operations.PrivateProjectLeaveRequest,
    security: operations.PrivateProjectLeaveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectLeaveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectLeaveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}/leave",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectLeaveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectLeaveResponse =
        new operations.PrivateProjectLeaveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Project note details
   */
  privateProjectNote(
    req: operations.PrivateProjectNoteRequest,
    security: operations.PrivateProjectNoteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectNoteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectNoteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}/notes/{note_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectNoteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectNoteResponse =
        new operations.PrivateProjectNoteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectNotePrivate = utils.objectToClass(
              httpRes?.data,
              shared.ProjectNotePrivate
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete project note
   */
  privateProjectNoteDelete(
    req: operations.PrivateProjectNoteDeleteRequest,
    security: operations.PrivateProjectNoteDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectNoteDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectNoteDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}/notes/{note_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectNoteDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectNoteDeleteResponse =
        new operations.PrivateProjectNoteDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update project note
   */
  privateProjectNoteUpdate(
    req: operations.PrivateProjectNoteUpdateRequest,
    security: operations.PrivateProjectNoteUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectNoteUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectNoteUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}/notes/{note_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "projectNoteCreate",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectNoteUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectNoteUpdateResponse =
        new operations.PrivateProjectNoteUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 205:
          break;
        case [400, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create project note
   *
   * @remarks
   * Create a new project note
   */
  privateProjectNotesCreate(
    req: operations.PrivateProjectNotesCreateRequest,
    security: operations.PrivateProjectNotesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectNotesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectNotesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}/notes",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "projectNoteCreate",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectNotesCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectNotesCreateResponse =
        new operations.PrivateProjectNotesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.location = utils.objectToClass(httpRes?.data, shared.Location);
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List project notes
   *
   * @remarks
   * List project notes
   */
  privateProjectNotesList(
    req: operations.PrivateProjectNotesListRequest,
    security: operations.PrivateProjectNotesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectNotesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectNotesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}/notes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectNotesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectNotesListResponse =
        new operations.PrivateProjectNotesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectNotes = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.projectNotes = utils.objectToClass(
              httpRes?.data,
              shared.ProjectNote,
              resFieldDepth
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Private Project Publish
   *
   * @remarks
   * Publish a project. Possible after all items inside it are public
   */
  privateProjectPublish(
    req: operations.PrivateProjectPublishRequest,
    security: operations.PrivateProjectPublishSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectPublishResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectPublishRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}/publish",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectPublishSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectPublishResponse =
        new operations.PrivateProjectPublishResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseMessage = utils.objectToClass(
              httpRes?.data,
              shared.ResponseMessage
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update project
   *
   * @remarks
   * Updating an project by passing body parameters; request can also be made with the PATCH method.
   */
  privateProjectUpdate(
    req: operations.PrivateProjectUpdateRequest,
    security: operations.PrivateProjectUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/account/projects/{project_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "projectUpdate",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectUpdateResponse =
        new operations.PrivateProjectUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 205:
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
        case [404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Private Projects
   *
   * @remarks
   * List private projects
   */
  privateProjectsList(
    req: operations.PrivateProjectsListRequest,
    security: operations.PrivateProjectsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PrivateProjectsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/projects";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PrivateProjectsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectsListResponse =
        new operations.PrivateProjectsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectPrivates = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.projectPrivates = utils.objectToClass(
              httpRes?.data,
              shared.ProjectPrivate,
              resFieldDepth
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Private Projects search
   *
   * @remarks
   * Search inside the private projects
   */
  privateProjectsSearch(
    req: shared.ProjectsSearch,
    config?: AxiosRequestConfig
  ): Promise<operations.PrivateProjectsSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ProjectsSearch(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/account/projects/search";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PrivateProjectsSearchResponse =
        new operations.PrivateProjectsSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectPrivates = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.projectPrivates = utils.objectToClass(
              httpRes?.data,
              shared.ProjectPrivate,
              resFieldDepth
            );
          }
          break;
        case [400, 422, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Public Project Articles
   *
   * @remarks
   * List articles in project
   */
  projectArticles(
    req: operations.ProjectArticlesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectArticlesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectArticlesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project_id}/articles",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectArticlesResponse =
        new operations.ProjectArticlesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.articles = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.articles = utils.objectToClass(
              httpRes?.data,
              shared.Article,
              resFieldDepth
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Public Project
   *
   * @remarks
   * View a project
   */
  projectDetails(
    req: operations.ProjectDetailsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectDetailsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectDetailsResponse =
        new operations.ProjectDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectComplete = utils.objectToClass(
              httpRes?.data,
              shared.ProjectComplete
            );
          }
          break;
        case [400, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Public Projects
   *
   * @remarks
   * Returns a list of public projects
   */
  projectsList(
    req: operations.ProjectsListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/projects";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsListResponse =
        new operations.ProjectsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.projects = utils.objectToClass(
              httpRes?.data,
              shared.Project,
              resFieldDepth
            );
          }
          break;
        case [400, 422, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Public Projects Search
   *
   * @remarks
   * Returns a list of public articles
   */
  projectsSearch(
    req: operations.ProjectsSearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/projects/search";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "projectsSearch",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsSearchResponse =
        new operations.ProjectsSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.projects = utils.objectToClass(
              httpRes?.data,
              shared.Project,
              resFieldDepth
            );
          }
          break;
        case [400, 422, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
