/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CustomMetric - Allows autoscaling based on Stackdriver metrics.
 */
public class CustomMetric {
    /**
     * Allows filtering on the metric's fields.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filter")
    public String filter;
    public CustomMetric withFilter(String filter) {
        this.filter = filter;
        return this;
    }
    
    /**
     * The name of the metric.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metricName")
    public String metricName;
    public CustomMetric withMetricName(String metricName) {
        this.metricName = metricName;
        return this;
    }
    
    /**
     * May be used instead of target_utilization when an instance can handle a specific amount of work/resources and the metric value is equal to the current amount of work remaining. The autoscaler will try to keep the number of instances equal to the metric value divided by single_instance_assignment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("singleInstanceAssignment")
    public Double singleInstanceAssignment;
    public CustomMetric withSingleInstanceAssignment(Double singleInstanceAssignment) {
        this.singleInstanceAssignment = singleInstanceAssignment;
        return this;
    }
    
    /**
     * The type of the metric. Must be a string representing a Stackdriver metric type e.g. GAGUE, DELTA_PER_SECOND, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetType")
    public String targetType;
    public CustomMetric withTargetType(String targetType) {
        this.targetType = targetType;
        return this;
    }
    
    /**
     * The target value for the metric.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetUtilization")
    public Double targetUtilization;
    public CustomMetric withTargetUtilization(Double targetUtilization) {
        this.targetUtilization = targetUtilization;
        return this;
    }
    
}
