"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import authenticationtype_enum as shared_authenticationtype_enum
from ..shared import networkaccessconfiguration as shared_networkaccessconfiguration
from ..shared import sessionconnectionstate_enum as shared_sessionconnectionstate_enum
from ..shared import sessionstate_enum as shared_sessionstate_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Session:
    r"""Describes a streaming session."""
    
    fleet_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FleetName') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id') }})  
    stack_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StackName') }})  
    state: shared_sessionstate_enum.SessionStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State') }})  
    user_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserId') }})  
    authentication_type: Optional[shared_authenticationtype_enum.AuthenticationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthenticationType'), 'exclude': lambda f: f is None }})  
    connection_state: Optional[shared_sessionconnectionstate_enum.SessionConnectionStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConnectionState'), 'exclude': lambda f: f is None }})  
    max_expiration_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxExpirationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    network_access_configuration: Optional[shared_networkaccessconfiguration.NetworkAccessConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkAccessConfiguration'), 'exclude': lambda f: f is None }})  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    