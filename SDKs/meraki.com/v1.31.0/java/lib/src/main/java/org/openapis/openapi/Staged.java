/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Staged {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Staged(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Create a Staged Upgrade Event for a network
     * Create a Staged Upgrade Event for a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateNetworkFirmwareUpgradesStagedEventResponse createNetworkFirmwareUpgradesStagedEvent(org.openapis.openapi.models.operations.CreateNetworkFirmwareUpgradesStagedEventRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateNetworkFirmwareUpgradesStagedEventPathParams.class, baseUrl, "/networks/{networkId}/firmwareUpgrades/staged/events", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateNetworkFirmwareUpgradesStagedEventResponse res = new org.openapis.openapi.models.operations.CreateNetworkFirmwareUpgradesStagedEventResponse() {{
            createNetworkFirmwareUpgradesStagedEvent200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CreateNetworkFirmwareUpgradesStagedEvent200ApplicationJSON.class);
                res.createNetworkFirmwareUpgradesStagedEvent200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Create a Staged Upgrade Group for a network
     * Create a Staged Upgrade Group for a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateNetworkFirmwareUpgradesStagedGroupResponse createNetworkFirmwareUpgradesStagedGroup(org.openapis.openapi.models.operations.CreateNetworkFirmwareUpgradesStagedGroupRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateNetworkFirmwareUpgradesStagedGroupPathParams.class, baseUrl, "/networks/{networkId}/firmwareUpgrades/staged/groups", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateNetworkFirmwareUpgradesStagedGroupResponse res = new org.openapis.openapi.models.operations.CreateNetworkFirmwareUpgradesStagedGroupResponse() {{
            createNetworkFirmwareUpgradesStagedGroup200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.createNetworkFirmwareUpgradesStagedGroup200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Postpone by 1 week all pending staged upgrade stages for a network
     * Postpone by 1 week all pending staged upgrade stages for a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeferNetworkFirmwareUpgradesStagedEventsResponse deferNetworkFirmwareUpgradesStagedEvents(org.openapis.openapi.models.operations.DeferNetworkFirmwareUpgradesStagedEventsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeferNetworkFirmwareUpgradesStagedEventsPathParams.class, baseUrl, "/networks/{networkId}/firmwareUpgrades/staged/events/defer", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeferNetworkFirmwareUpgradesStagedEventsResponse res = new org.openapis.openapi.models.operations.DeferNetworkFirmwareUpgradesStagedEventsResponse() {{
            deferNetworkFirmwareUpgradesStagedEvents200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DeferNetworkFirmwareUpgradesStagedEvents200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DeferNetworkFirmwareUpgradesStagedEvents200ApplicationJSON.class);
                res.deferNetworkFirmwareUpgradesStagedEvents200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Delete a Staged Upgrade Group
     * Delete a Staged Upgrade Group
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteNetworkFirmwareUpgradesStagedGroupResponse deleteNetworkFirmwareUpgradesStagedGroup(org.openapis.openapi.models.operations.DeleteNetworkFirmwareUpgradesStagedGroupRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteNetworkFirmwareUpgradesStagedGroupPathParams.class, baseUrl, "/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteNetworkFirmwareUpgradesStagedGroupResponse res = new org.openapis.openapi.models.operations.DeleteNetworkFirmwareUpgradesStagedGroupResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Get the Staged Upgrade Event from a network
     * Get the Staged Upgrade Event from a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedEventsResponse getNetworkFirmwareUpgradesStagedEvents(org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedEventsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedEventsPathParams.class, baseUrl, "/networks/{networkId}/firmwareUpgrades/staged/events", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedEventsResponse res = new org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedEventsResponse() {{
            getNetworkFirmwareUpgradesStagedEvents200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedEvents200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedEvents200ApplicationJSON.class);
                res.getNetworkFirmwareUpgradesStagedEvents200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get a Staged Upgrade Group from a network
     * Get a Staged Upgrade Group from a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedGroupResponse getNetworkFirmwareUpgradesStagedGroup(org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedGroupRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedGroupPathParams.class, baseUrl, "/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedGroupResponse res = new org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedGroupResponse() {{
            getNetworkFirmwareUpgradesStagedGroup200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedGroup200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedGroup200ApplicationJSON.class);
                res.getNetworkFirmwareUpgradesStagedGroup200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List of Staged Upgrade Groups in a network
     * List of Staged Upgrade Groups in a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedGroupsResponse getNetworkFirmwareUpgradesStagedGroups(org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedGroupsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedGroupsPathParams.class, baseUrl, "/networks/{networkId}/firmwareUpgrades/staged/groups", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedGroupsResponse res = new org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedGroupsResponse() {{
            getNetworkFirmwareUpgradesStagedGroups200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedGroups200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedGroups200ApplicationJSON[].class);
                res.getNetworkFirmwareUpgradesStagedGroups200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Order of Staged Upgrade Groups in a network
     * Order of Staged Upgrade Groups in a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedStagesResponse getNetworkFirmwareUpgradesStagedStages(org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedStagesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedStagesPathParams.class, baseUrl, "/networks/{networkId}/firmwareUpgrades/staged/stages", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedStagesResponse res = new org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedStagesResponse() {{
            getNetworkFirmwareUpgradesStagedStages200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedStages200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkFirmwareUpgradesStagedStages200ApplicationJSON[].class);
                res.getNetworkFirmwareUpgradesStagedStages200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Rollback a Staged Upgrade Event for a network
     * Rollback a Staged Upgrade Event for a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RollbacksNetworkFirmwareUpgradesStagedEventsResponse rollbacksNetworkFirmwareUpgradesStagedEvents(org.openapis.openapi.models.operations.RollbacksNetworkFirmwareUpgradesStagedEventsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RollbacksNetworkFirmwareUpgradesStagedEventsPathParams.class, baseUrl, "/networks/{networkId}/firmwareUpgrades/staged/events/rollbacks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RollbacksNetworkFirmwareUpgradesStagedEventsResponse res = new org.openapis.openapi.models.operations.RollbacksNetworkFirmwareUpgradesStagedEventsResponse() {{
            rollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSON.class);
                res.rollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the Staged Upgrade Event for a network
     * Update the Staged Upgrade Event for a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedEventsResponse updateNetworkFirmwareUpgradesStagedEvents(org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedEventsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedEventsPathParams.class, baseUrl, "/networks/{networkId}/firmwareUpgrades/staged/events", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedEventsResponse res = new org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedEventsResponse() {{
            updateNetworkFirmwareUpgradesStagedEvents200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedEvents200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedEvents200ApplicationJSON.class);
                res.updateNetworkFirmwareUpgradesStagedEvents200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update a Staged Upgrade Group for a network
     * Update a Staged Upgrade Group for a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedGroupResponse updateNetworkFirmwareUpgradesStagedGroup(org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedGroupRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedGroupPathParams.class, baseUrl, "/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedGroupResponse res = new org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedGroupResponse() {{
            updateNetworkFirmwareUpgradesStagedGroup200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkFirmwareUpgradesStagedGroup200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Assign Staged Upgrade Group order in the sequence.
     * Assign Staged Upgrade Group order in the sequence.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedStagesResponse updateNetworkFirmwareUpgradesStagedStages(org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedStagesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedStagesPathParams.class, baseUrl, "/networks/{networkId}/firmwareUpgrades/staged/stages", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedStagesResponse res = new org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedStagesResponse() {{
            updateNetworkFirmwareUpgradesStagedStages200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedStages200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateNetworkFirmwareUpgradesStagedStages200ApplicationJSON[].class);
                res.updateNetworkFirmwareUpgradesStagedStages200ApplicationJSONObjects = out;
            }
        }

        return res;
    }
}