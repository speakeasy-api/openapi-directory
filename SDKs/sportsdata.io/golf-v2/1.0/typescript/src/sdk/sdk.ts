/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "http://azure-api.sportsdata.io/golf/v2",
  "https://azure-api.sportsdata.io/golf/v2",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }
  }

  /**
   * Current Season
   */
  currentSeason(
    req: operations.CurrentSeasonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CurrentSeasonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CurrentSeasonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/CurrentSeason",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CurrentSeasonResponse =
        new operations.CurrentSeasonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.season = utils.objectToClass(httpRes?.data, shared.Season);
          }
          break;
      }

      return res;
    });
  }

  /**
   * DFS Slates
   */
  dfsSlates(
    req: operations.DfsSlatesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DfsSlatesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DfsSlatesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/DfsSlatesByTournament/{tournamentid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DfsSlatesResponse =
        new operations.DfsSlatesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dfsSlates = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.dfsSlates = utils.objectToClass(
              httpRes?.data,
              shared.DfsSlate,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Injuries
   */
  injuries(
    req: operations.InjuriesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.InjuriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.InjuriesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{format}/Injuries", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.InjuriesResponse = new operations.InjuriesResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.injuries = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.injuries = utils.objectToClass(
              httpRes?.data,
              shared.Injury,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Injuries (Historical)
   */
  injuriesHistorical(
    req: operations.InjuriesHistoricalRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.InjuriesHistoricalResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.InjuriesHistoricalRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/InjuriesByHistorical",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.InjuriesHistoricalResponse =
        new operations.InjuriesHistoricalResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.injuries = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.injuries = utils.objectToClass(
              httpRes?.data,
              shared.Injury,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Leaderboard
   */
  leaderboard(
    req: operations.LeaderboardRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LeaderboardResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LeaderboardRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/Leaderboard/{tournamentid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LeaderboardResponse =
        new operations.LeaderboardResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.leaderboard = utils.objectToClass(
              httpRes?.data,
              shared.Leaderboard
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * News
   */
  news(
    req: operations.NewsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.NewsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NewsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{format}/News", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NewsResponse = new operations.NewsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.news = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.news = utils.objectToClass(
              httpRes?.data,
              shared.News,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * News by Date
   */
  newsByDate(
    req: operations.NewsByDateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.NewsByDateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NewsByDateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/NewsByDate/{date}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NewsByDateResponse =
        new operations.NewsByDateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.news = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.news = utils.objectToClass(
              httpRes?.data,
              shared.News,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * News by Player
   */
  newsByPlayer(
    req: operations.NewsByPlayerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.NewsByPlayerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NewsByPlayerRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/NewsByPlayerID/{playerid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NewsByPlayerResponse =
        new operations.NewsByPlayerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.news = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.news = utils.objectToClass(
              httpRes?.data,
              shared.News,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Player
   */
  player(
    req: operations.PlayerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlayerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlayerRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/Player/{playerid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlayerResponse = new operations.PlayerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.player = utils.objectToClass(httpRes?.data, shared.Player);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Player Season Stats (w/ World Golf Rankings)
   */
  playerSeasonStatsWWorldGolfRankings(
    req: operations.PlayerSeasonStatsWWorldGolfRankingsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlayerSeasonStatsWWorldGolfRankingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlayerSeasonStatsWWorldGolfRankingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/PlayerSeasonStats/{season}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlayerSeasonStatsWWorldGolfRankingsResponse =
        new operations.PlayerSeasonStatsWWorldGolfRankingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerSeasons = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playerSeasons = utils.objectToClass(
              httpRes?.data,
              shared.PlayerSeason,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Player Tournament Projected Stats (w/ DraftKings Salaries)
   */
  playerTournamentProjectedStatsWDraftkingsSalaries(
    req: operations.PlayerTournamentProjectedStatsWDraftkingsSalariesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlayerTournamentProjectedStatsWDraftkingsSalariesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PlayerTournamentProjectedStatsWDraftkingsSalariesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/PlayerTournamentProjectionStats/{tournamentid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlayerTournamentProjectedStatsWDraftkingsSalariesResponse =
        new operations.PlayerTournamentProjectedStatsWDraftkingsSalariesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerTournamentProjections = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playerTournamentProjections = utils.objectToClass(
              httpRes?.data,
              shared.PlayerTournamentProjection,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Player Tournament Stats By Player
   */
  playerTournamentStatsByPlayer(
    req: operations.PlayerTournamentStatsByPlayerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlayerTournamentStatsByPlayerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlayerTournamentStatsByPlayerRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/PlayerTournamentStatsByPlayer/{tournamentid}/{playerid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlayerTournamentStatsByPlayerResponse =
        new operations.PlayerTournamentStatsByPlayerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerTournament = utils.objectToClass(
              httpRes?.data,
              shared.PlayerTournament
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Players
   */
  players(
    req: operations.PlayersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlayersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlayersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{format}/Players", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlayersResponse = new operations.PlayersResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.players = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.players = utils.objectToClass(
              httpRes?.data,
              shared.Player,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Schedule
   */
  schedule(
    req: operations.ScheduleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ScheduleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScheduleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/Tournaments",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScheduleResponse = new operations.ScheduleResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tournaments = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tournaments = utils.objectToClass(
              httpRes?.data,
              shared.Tournament,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Schedule by Season
   */
  scheduleBySeason(
    req: operations.ScheduleBySeasonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ScheduleBySeasonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScheduleBySeasonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/Tournaments/{season}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScheduleBySeasonResponse =
        new operations.ScheduleBySeasonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tournaments = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tournaments = utils.objectToClass(
              httpRes?.data,
              shared.Tournament,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
