// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type SongContractPvServicesEnum string

const (
	SongContractPvServicesEnumNothing       SongContractPvServicesEnum = "Nothing"
	SongContractPvServicesEnumNicoNicoDouga SongContractPvServicesEnum = "NicoNicoDouga"
	SongContractPvServicesEnumYoutube       SongContractPvServicesEnum = "Youtube"
	SongContractPvServicesEnumSoundCloud    SongContractPvServicesEnum = "SoundCloud"
	SongContractPvServicesEnumVimeo         SongContractPvServicesEnum = "Vimeo"
	SongContractPvServicesEnumPiapro        SongContractPvServicesEnum = "Piapro"
	SongContractPvServicesEnumBilibili      SongContractPvServicesEnum = "Bilibili"
	SongContractPvServicesEnumFile          SongContractPvServicesEnum = "File"
	SongContractPvServicesEnumLocalFile     SongContractPvServicesEnum = "LocalFile"
	SongContractPvServicesEnumCreofuga      SongContractPvServicesEnum = "Creofuga"
	SongContractPvServicesEnumBandcamp      SongContractPvServicesEnum = "Bandcamp"
)

func (e *SongContractPvServicesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "NicoNicoDouga":
		fallthrough
	case "Youtube":
		fallthrough
	case "SoundCloud":
		fallthrough
	case "Vimeo":
		fallthrough
	case "Piapro":
		fallthrough
	case "Bilibili":
		fallthrough
	case "File":
		fallthrough
	case "LocalFile":
		fallthrough
	case "Creofuga":
		fallthrough
	case "Bandcamp":
		*e = SongContractPvServicesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongContractPvServicesEnum: %s", s)
	}
}

type SongContractSongTypeEnum string

const (
	SongContractSongTypeEnumUnspecified  SongContractSongTypeEnum = "Unspecified"
	SongContractSongTypeEnumOriginal     SongContractSongTypeEnum = "Original"
	SongContractSongTypeEnumRemaster     SongContractSongTypeEnum = "Remaster"
	SongContractSongTypeEnumRemix        SongContractSongTypeEnum = "Remix"
	SongContractSongTypeEnumCover        SongContractSongTypeEnum = "Cover"
	SongContractSongTypeEnumArrangement  SongContractSongTypeEnum = "Arrangement"
	SongContractSongTypeEnumInstrumental SongContractSongTypeEnum = "Instrumental"
	SongContractSongTypeEnumMashup       SongContractSongTypeEnum = "Mashup"
	SongContractSongTypeEnumMusicPv      SongContractSongTypeEnum = "MusicPV"
	SongContractSongTypeEnumDramaPv      SongContractSongTypeEnum = "DramaPV"
	SongContractSongTypeEnumLive         SongContractSongTypeEnum = "Live"
	SongContractSongTypeEnumIllustration SongContractSongTypeEnum = "Illustration"
	SongContractSongTypeEnumOther        SongContractSongTypeEnum = "Other"
)

func (e *SongContractSongTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unspecified":
		fallthrough
	case "Original":
		fallthrough
	case "Remaster":
		fallthrough
	case "Remix":
		fallthrough
	case "Cover":
		fallthrough
	case "Arrangement":
		fallthrough
	case "Instrumental":
		fallthrough
	case "Mashup":
		fallthrough
	case "MusicPV":
		fallthrough
	case "DramaPV":
		fallthrough
	case "Live":
		fallthrough
	case "Illustration":
		fallthrough
	case "Other":
		*e = SongContractSongTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongContractSongTypeEnum: %s", s)
	}
}

type SongContractStatusEnum string

const (
	SongContractStatusEnumDraft    SongContractStatusEnum = "Draft"
	SongContractStatusEnumFinished SongContractStatusEnum = "Finished"
	SongContractStatusEnumApproved SongContractStatusEnum = "Approved"
	SongContractStatusEnumLocked   SongContractStatusEnum = "Locked"
)

func (e *SongContractStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Draft":
		fallthrough
	case "Finished":
		fallthrough
	case "Approved":
		fallthrough
	case "Locked":
		*e = SongContractStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongContractStatusEnum: %s", s)
	}
}

type SongContract struct {
	AdditionalNames *string                     `json:"additionalNames,omitempty"`
	ArtistString    *string                     `json:"artistString,omitempty"`
	CreateDate      *time.Time                  `json:"createDate,omitempty"`
	Deleted         *bool                       `json:"deleted,omitempty"`
	FavoritedTimes  *int                        `json:"favoritedTimes,omitempty"`
	ID              *int                        `json:"id,omitempty"`
	LengthSeconds   *int                        `json:"lengthSeconds,omitempty"`
	Name            *string                     `json:"name,omitempty"`
	NicoID          *string                     `json:"nicoId,omitempty"`
	PublishDate     *time.Time                  `json:"publishDate,omitempty"`
	PvServices      *SongContractPvServicesEnum `json:"pvServices,omitempty"`
	RatingScore     *int                        `json:"ratingScore,omitempty"`
	SongType        *SongContractSongTypeEnum   `json:"songType,omitempty"`
	Status          *SongContractStatusEnum     `json:"status,omitempty"`
	ThumbURL        *string                     `json:"thumbUrl,omitempty"`
	Version         *int                        `json:"version,omitempty"`
}
