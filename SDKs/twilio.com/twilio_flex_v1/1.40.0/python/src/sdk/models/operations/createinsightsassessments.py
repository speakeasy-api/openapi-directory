"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import flex_v1_insights_assessments as shared_flex_v1_insights_assessments
from typing import Optional

CREATE_INSIGHTS_ASSESSMENTS_SERVERS = [
	"https://flex-api.twilio.com",
]


@dataclasses.dataclass
class CreateInsightsAssessmentsSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class CreateInsightsAssessmentsCreateInsightsAssessmentsRequest:
    
    agent_id: str = dataclasses.field(metadata={'form': { 'field_name': 'AgentId' }})
    r"""The id of the Agent"""  
    answer_id: str = dataclasses.field(metadata={'form': { 'field_name': 'AnswerId' }})
    r"""The id of the answer selected by user"""  
    answer_text: str = dataclasses.field(metadata={'form': { 'field_name': 'AnswerText' }})
    r"""The answer text selected by user"""  
    category_id: str = dataclasses.field(metadata={'form': { 'field_name': 'CategoryId' }})
    r"""The id of the category"""  
    category_name: str = dataclasses.field(metadata={'form': { 'field_name': 'CategoryName' }})
    r"""The name of the category"""  
    metric_id: str = dataclasses.field(metadata={'form': { 'field_name': 'MetricId' }})
    r"""The question Id selected for assessment"""  
    metric_name: str = dataclasses.field(metadata={'form': { 'field_name': 'MetricName' }})
    r"""The question name of the assessment"""  
    offset: float = dataclasses.field(metadata={'form': { 'field_name': 'Offset' }})
    r"""The offset of the conversation."""  
    questionnaire_id: str = dataclasses.field(metadata={'form': { 'field_name': 'QuestionnaireId' }})
    r"""Questionnaire Id of the associated question"""  
    segment_id: str = dataclasses.field(metadata={'form': { 'field_name': 'SegmentId' }})
    r"""Segment Id of the conversation"""  
    user_email: str = dataclasses.field(metadata={'form': { 'field_name': 'UserEmail' }})
    r"""Email of the user assessing conversation"""  
    user_name: str = dataclasses.field(metadata={'form': { 'field_name': 'UserName' }})
    r"""Name of the user assessing conversation"""  
    

@dataclasses.dataclass
class CreateInsightsAssessmentsRequest:
    
    request_body: Optional[CreateInsightsAssessmentsCreateInsightsAssessmentsRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Token', 'style': 'simple', 'explode': False }})
    r"""The Token HTTP request header"""  
    

@dataclasses.dataclass
class CreateInsightsAssessmentsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    flex_v1_insights_assessments: Optional[shared_flex_v1_insights_assessments.FlexV1InsightsAssessments] = dataclasses.field(default=None)
    r"""Created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    