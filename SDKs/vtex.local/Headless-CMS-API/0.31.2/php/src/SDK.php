<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - 
 * 
 * The VTEX Headless CMS is a no-code management system for storefront content. 
 * That means you can store your content as structured data in a layer decoupled from the frontend and 
 * use the VTEX Headless CMS to access and deliver your content to your storefront project.
 * 
 * Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API
 * to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).
 * 
 * **Servers**
 * - `https://{account}.myvtex.com/`
 * - `https://{workspace}--{account}.myvtex.com/`
 * 
 * **Server variables**
 * - `accountName`: Name of your VTEX account.
 * - `workspace`: Name of your VTEX workspace.
 * 
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://vtex.local',
		'https://{account}.myvtex.com',
		'https://{workspace}--{account}.myvtex.com',
	];
  	
	public Pages $pages;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->pages = new Pages(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}