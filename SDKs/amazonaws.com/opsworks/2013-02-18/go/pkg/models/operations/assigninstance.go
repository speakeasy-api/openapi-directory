// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AssignInstanceXAmzTargetEnum
type AssignInstanceXAmzTargetEnum string

const (
	AssignInstanceXAmzTargetEnumOpsWorks20130218AssignInstance AssignInstanceXAmzTargetEnum = "OpsWorks_20130218.AssignInstance"
)

func (e AssignInstanceXAmzTargetEnum) ToPointer() *AssignInstanceXAmzTargetEnum {
	return &e
}

func (e *AssignInstanceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OpsWorks_20130218.AssignInstance":
		*e = AssignInstanceXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssignInstanceXAmzTargetEnum: %v", v)
	}
}

type AssignInstanceRequest struct {
	AssignInstanceRequest shared.AssignInstanceRequest `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            AssignInstanceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AssignInstanceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ValidationException
	ValidationException interface{}
}
