/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PolicyControllerHubConfig - Configuration for Policy Controller
 */
public class PolicyControllerHubConfig {
    /**
     * Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auditIntervalSeconds")
    public String auditIntervalSeconds;
    public PolicyControllerHubConfig withAuditIntervalSeconds(String auditIntervalSeconds) {
        this.auditIntervalSeconds = auditIntervalSeconds;
        return this;
    }
    
    /**
     * The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("constraintViolationLimit")
    public String constraintViolationLimit;
    public PolicyControllerHubConfig withConstraintViolationLimit(String constraintViolationLimit) {
        this.constraintViolationLimit = constraintViolationLimit;
        return this;
    }
    
    /**
     * Map of deployment configs to deployments (\u201cadmission\u201d, \u201caudit\u201d, \u201cmutation\u201d).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deploymentConfigs")
    public java.util.Map<String, PolicyControllerPolicyControllerDeploymentConfig> deploymentConfigs;
    public PolicyControllerHubConfig withDeploymentConfigs(java.util.Map<String, PolicyControllerPolicyControllerDeploymentConfig> deploymentConfigs) {
        this.deploymentConfigs = deploymentConfigs;
        return this;
    }
    
    /**
     * The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exemptableNamespaces")
    public String[] exemptableNamespaces;
    public PolicyControllerHubConfig withExemptableNamespaces(String[] exemptableNamespaces) {
        this.exemptableNamespaces = exemptableNamespaces;
        return this;
    }
    
    /**
     * The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("installSpec")
    public PolicyControllerHubConfigInstallSpecEnum installSpec;
    public PolicyControllerHubConfig withInstallSpec(PolicyControllerHubConfigInstallSpecEnum installSpec) {
        this.installSpec = installSpec;
        return this;
    }
    
    /**
     * Logs all denies and dry run failures.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logDeniesEnabled")
    public Boolean logDeniesEnabled;
    public PolicyControllerHubConfig withLogDeniesEnabled(Boolean logDeniesEnabled) {
        this.logDeniesEnabled = logDeniesEnabled;
        return this;
    }
    
    /**
     * MonitoringConfig specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("monitoring")
    public PolicyControllerMonitoringConfig monitoring;
    public PolicyControllerHubConfig withMonitoring(PolicyControllerMonitoringConfig monitoring) {
        this.monitoring = monitoring;
        return this;
    }
    
    /**
     * Enables the ability to mutate resources using Policy Controller.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mutationEnabled")
    public Boolean mutationEnabled;
    public PolicyControllerHubConfig withMutationEnabled(Boolean mutationEnabled) {
        this.mutationEnabled = mutationEnabled;
        return this;
    }
    
    /**
     * PolicyContentSpec defines the user's desired content configuration on the cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("policyContent")
    public PolicyControllerPolicyContentSpec policyContent;
    public PolicyControllerHubConfig withPolicyContent(PolicyControllerPolicyContentSpec policyContent) {
        this.policyContent = policyContent;
        return this;
    }
    
    /**
     * Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referentialRulesEnabled")
    public Boolean referentialRulesEnabled;
    public PolicyControllerHubConfig withReferentialRulesEnabled(Boolean referentialRulesEnabled) {
        this.referentialRulesEnabled = referentialRulesEnabled;
        return this;
    }
    
    /**
     * The config specifying which default library templates to install.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("templateLibraryConfig")
    public PolicyControllerTemplateLibraryConfig templateLibraryConfig;
    public PolicyControllerHubConfig withTemplateLibraryConfig(PolicyControllerTemplateLibraryConfig templateLibraryConfig) {
        this.templateLibraryConfig = templateLibraryConfig;
        return this;
    }
    
}
