// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type GetRecordsRecordIDMoreLikeThisFormatPathParams struct {
	// Note - There is a small difference with some field names in the response between JSON and XML.
	// When a field name has more than one word, JSON format will separate the words with an underscore, eg. "content_partner", whereas XML uses a hyphenated naming convention, eg. "content-partner".
	//
	Format shared.FormatEnum `pathParam:"style=simple,explode=false,name=format"`
	// Every record has a unique, persistent *record_id*.
	RecordID int64 `pathParam:"style=simple,explode=false,name=record_id"`
}

type GetRecordsRecordIDMoreLikeThisFormatQueryParams struct {
	// Comma-separated whitelist of fields to be returned. The syntax *"&fields=verbose"* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *"&fields=id,title,subject,collection,landing_url,locations"*.
	//
	Fields *string `queryParam:"style=form,explode=false,name=fields"`
	// More Like This (MLT) queries can be filtered in the same ways as regular searches, using the same syntax outined in the GET /records call above. This enables things like scoping the related records to only return Images eg *&and[category]=Images*, or to only show related records from a specific content partner eg *&and[content_partner]=Puke+Ariki*.
	//
	Filtering *string `queryParam:"style=form,explode=false,name=filtering"`
	// Comma-separated list of fields used to evaluate relatedness. Available fields to compare are *title* and *subject*, eg *&mlt_fields=title,subject* or *&mlt_fields=title*.
	//
	MltFields *string `queryParam:"style=form,explode=false,name=mlt_fields"`
}

type GetRecordsRecordIDMoreLikeThisFormatHeaders struct {
	// The DigitalNZ API no longer requires a key to access public content. However, if you plan on using the API regularly, expect to be a high volume consumer or are planning on creating an application, we encourage you to use an API key so that we can:
	// - provide targeted help and support
	// - increase your query throughput (by negotiation)
	// - notify you directly of changes to the API
	// - gather usage metrics to help improve the service
	//
	// API requests that do not pass a valid API key/token are treated as unauthenticated. A maximum rate limit applies across all unauthenticated requests. This rate limit is in place to protect the service from overuse, resulting in unsustainable costs, or potential attack.
	//
	// **Getting an API key**
	// [Create a DigitalNZ account](https://digitalnz.org/sign_up), log in and select "[my API key](https://digitalnz.org/api_keys/edit)" from your username drop-down menu (on the right hand side)'. The key is a long string of jumbled letters and numbers (hash) that is unique to you. You are required to keep the key secret. (Refer to the [Developer API Terms of Use](https://digitalnz.org/about/terms-of-use/developer-api-terms-of-use) for more information).
	//
	// **Using an API key**
	// When you make a call to the API you'll need to pass the key in a custom HTTP header: ‘Authentication-Token’.
	// For example, a query using the ‘curl’ command might look like the following (where ‘{YOUR_API_KEY}’ is replaced with a valid API key):
	//
	// `curl -H "Authentication-Token:{YOUR_API_KEY}" http://api.digitalnz.org/v3/records.json?text=kiwi`
	//
	AuthenticationToken *string `header:"style=simple,explode=false,name=Authentication-Token"`
}

type GetRecordsRecordIDMoreLikeThisFormatRequest struct {
	PathParams  GetRecordsRecordIDMoreLikeThisFormatPathParams
	QueryParams GetRecordsRecordIDMoreLikeThisFormatQueryParams
	Headers     GetRecordsRecordIDMoreLikeThisFormatHeaders
}

// GetRecordsRecordIDMoreLikeThisFormat200ApplicationJSON - ok
type GetRecordsRecordIDMoreLikeThisFormat200ApplicationJSON struct {
	// Current page.
	Page *int64 `json:"page,omitempty"`
	// Requested amount of records shown per page of results.
	PerPage *int64          `json:"per_page,omitempty"`
	Records []shared.Record `json:"records,omitempty"`
	// The URL of current page of results.
	RequestURL *string `json:"request_url,omitempty"`
	// Total number of matching search results.
	ResultCount *int64 `json:"result_count,omitempty"`
}

type GetRecordsRecordIDMoreLikeThisFormatResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// ok
	GetRecordsRecordIDMoreLikeThisFormat200ApplicationJSONObject *GetRecordsRecordIDMoreLikeThisFormat200ApplicationJSON
	// API Key (Authentication-Token) is invalid.
	GetRecordsRecordIDMoreLikeThisFormat403ApplicationJSONObject map[string]interface{}
	// Resource not found
	GetRecordsRecordIDMoreLikeThisFormat404ApplicationJSONObject map[string]interface{}
}
