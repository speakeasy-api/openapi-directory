<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PromotionsAndTaxes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Archive Promotion or Tax
     * 
     * Archives a Promotion or Tax by its ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArchivePromotionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ArchivePromotionResponse
     */
	public function archivePromotion(
        \OpenAPI\OpenAPI\Models\Operations\ArchivePromotionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ArchivePromotionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/archive/calculatorConfiguration/{idCalculatorConfiguration}', \OpenAPI\OpenAPI\Models\Operations\ArchivePromotionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArchivePromotionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Create or Update Promotion or Tax
     * 
     * Creates or updates a specific Promotion by its Promotion ID or a specific Tax by its Tax ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrUpdateCalculatorConfigurationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrUpdateCalculatorConfigurationResponse
     */
	public function createOrUpdateCalculatorConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrUpdateCalculatorConfigurationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrUpdateCalculatorConfigurationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/calculatorconfiguration');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrUpdateCalculatorConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrUpdateCalculatorConfiguration200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateOrUpdateCalculatorConfiguration200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get All Promotions
     * 
     * Retrieves all promotions from an account. 
     * 
     * > 📘 Onboarding guide 
     * >
     * > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about the Promotions and is organized by focusing on the developer's journey.
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllBenefitsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllBenefitsResponse
     */
	public function getAllBenefits(
        \OpenAPI\OpenAPI\Models\Operations\GetAllBenefitsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllBenefitsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/benefits/calculatorconfiguration');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllBenefitsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAllBenefits200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetAllBenefits200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get All Taxes
     * 
     * Retrieves all taxes from an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllTaxesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllTaxesResponse
     */
	public function getAllTaxes(
        \OpenAPI\OpenAPI\Models\Operations\GetAllTaxesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllTaxesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/taxes/calculatorconfiguration');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllTaxesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAllTaxes200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetAllTaxes200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Archived Promotions
     * 
     * Lists all archived promotions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetArchivedPromotionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetArchivedPromotionsResponse
     */
	public function getArchivedPromotions(
        \OpenAPI\OpenAPI\Models\Operations\GetArchivedPromotionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetArchivedPromotionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/archive/benefits/calculatorConfiguration');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetArchivedPromotionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getArchivedPromotions200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetArchivedPromotions200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Archived Taxes
     * 
     * Lists all archived taxes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetArchivedTaxesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetArchivedTaxesResponse
     */
	public function getArchivedTaxes(
        \OpenAPI\OpenAPI\Models\Operations\GetArchivedTaxesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetArchivedTaxesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/archive/taxes/calculatorConfiguration');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetArchivedTaxesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getArchivedTaxes200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetArchivedTaxes200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Promotion or Tax by ID
     * 
     * Retrieves a specific promotion by its Promotion ID or a specific tax by its Tax ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCalculatorConfigurationByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCalculatorConfigurationByIdResponse
     */
	public function getCalculatorConfigurationById(
        \OpenAPI\OpenAPI\Models\Operations\GetCalculatorConfigurationByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCalculatorConfigurationByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/calculatorconfiguration/{idCalculatorConfiguration}', \OpenAPI\OpenAPI\Models\Operations\GetCalculatorConfigurationByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCalculatorConfigurationByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'Promotion')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'Tax')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Unarchive Promotion or Tax
     * 
     * Unarchives a Promotion or Tax by its ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnarchivePromotionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnarchivePromotionResponse
     */
	public function unarchivePromotion(
        \OpenAPI\OpenAPI\Models\Operations\UnarchivePromotionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnarchivePromotionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/unarchive/calculatorConfiguration/{idCalculatorConfiguration}', \OpenAPI\OpenAPI\Models\Operations\UnarchivePromotionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnarchivePromotionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Create Multiple SKU Promotion
     * 
     * Creates a Multiple SKU Promotion. This scenario allows to create a single promotion for multiples SKUs with the Percentage Effect. 
     * > ⚠️ 
     * >
     * > The limit of SKUs on a Multiple Effects promotion is 400.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiRnbPvtImportCalculatorConfigurationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiRnbPvtImportCalculatorConfigurationResponse
     */
	public function postApiRnbPvtImportCalculatorConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\PostApiRnbPvtImportCalculatorConfigurationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiRnbPvtImportCalculatorConfigurationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/import/calculatorConfiguration');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiRnbPvtImportCalculatorConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update Multiple SKU Promotion
     * 
     * Updates information from a Multiple SKU Promotion. This scenario allows to create a single promotion for multiples SKUs with the Percentage Effect.  
     * > ⚠️ 
     * >
     * > The limit of SKUs on a Multiple Effects promotion is 400.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiRnbPvtImportCalculatorConfigurationPromotionIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutApiRnbPvtImportCalculatorConfigurationPromotionIdResponse
     */
	public function putApiRnbPvtImportCalculatorConfigurationPromotionId(
        \OpenAPI\OpenAPI\Models\Operations\PutApiRnbPvtImportCalculatorConfigurationPromotionIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutApiRnbPvtImportCalculatorConfigurationPromotionIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/import/calculatorConfiguration/{promotionId}', \OpenAPI\OpenAPI\Models\Operations\PutApiRnbPvtImportCalculatorConfigurationPromotionIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutApiRnbPvtImportCalculatorConfigurationPromotionIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }

        return $response;
    }
}