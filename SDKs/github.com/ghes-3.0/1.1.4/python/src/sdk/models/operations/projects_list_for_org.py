"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import project as shared_project
from ..shared import validation_error_simple as shared_validation_error_simple
from enum import Enum
from typing import Optional

class ProjectsListForOrgStateEnum(str, Enum):
    r"""Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`."""
    OPEN = 'open'
    CLOSED = 'closed'
    ALL = 'all'


@dataclasses.dataclass
class ProjectsListForOrgRequest:
    
    org: str = dataclasses.field(metadata={'path_param': { 'field_name': 'org', 'style': 'simple', 'explode': False }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Results per page (max 100)"""  
    state: Optional[ProjectsListForOrgStateEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`."""  
    

@dataclasses.dataclass
class ProjectsListForOrgResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    projects: Optional[list[shared_project.Project]] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error_simple: Optional[shared_validation_error_simple.ValidationErrorSimple] = dataclasses.field(default=None)
    r"""Validation failed"""  
    