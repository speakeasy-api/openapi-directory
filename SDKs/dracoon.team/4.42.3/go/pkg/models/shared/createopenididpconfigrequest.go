// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateOpenIDIdpConfigRequestFlowEnum - &#128640; Since v4.11.0
//
// Flow, which is used at authentication
type CreateOpenIDIdpConfigRequestFlowEnum string

const (
	CreateOpenIDIdpConfigRequestFlowEnumAuthorizationCode CreateOpenIDIdpConfigRequestFlowEnum = "authorization_code"
	CreateOpenIDIdpConfigRequestFlowEnumHybrid            CreateOpenIDIdpConfigRequestFlowEnum = "hybrid"
)

func (e CreateOpenIDIdpConfigRequestFlowEnum) ToPointer() *CreateOpenIDIdpConfigRequestFlowEnum {
	return &e
}

func (e *CreateOpenIDIdpConfigRequestFlowEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authorization_code":
		fallthrough
	case "hybrid":
		*e = CreateOpenIDIdpConfigRequestFlowEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOpenIDIdpConfigRequestFlowEnum: %v", v)
	}
}

// CreateOpenIDIdpConfigRequestUserInfoSourceEnum - &#128640; Since v4.23.0
//
// Source, which is used to get user information at the import or update of a user.
type CreateOpenIDIdpConfigRequestUserInfoSourceEnum string

const (
	CreateOpenIDIdpConfigRequestUserInfoSourceEnumUserInfoEndpoint CreateOpenIDIdpConfigRequestUserInfoSourceEnum = "user_info_endpoint"
	CreateOpenIDIdpConfigRequestUserInfoSourceEnumIDToken          CreateOpenIDIdpConfigRequestUserInfoSourceEnum = "id_token"
)

func (e CreateOpenIDIdpConfigRequestUserInfoSourceEnum) ToPointer() *CreateOpenIDIdpConfigRequestUserInfoSourceEnum {
	return &e
}

func (e *CreateOpenIDIdpConfigRequestUserInfoSourceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user_info_endpoint":
		fallthrough
	case "id_token":
		*e = CreateOpenIDIdpConfigRequestUserInfoSourceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOpenIDIdpConfigRequestUserInfoSourceEnum: %v", v)
	}
}

// CreateOpenIDIdpConfigRequest - Request model for creating an OpenID Connect IDP configuration
type CreateOpenIDIdpConfigRequest struct {
	// URL of the authorization endpoint
	AuthorizationEndPointURL string `json:"authorizationEndPointUrl"`
	// ID of the OpenID client
	ClientID string `json:"clientId"`
	// Secret, which client uses at authentication.
	ClientSecret string `json:"clientSecret"`
	// Name of the claim which is used for the user mapping fallback.
	FallbackMappingClaim *string `json:"fallbackMappingClaim,omitempty"`
	// &#128640; Since v4.11.0
	//
	// Flow, which is used at authentication
	Flow *CreateOpenIDIdpConfigRequestFlowEnum `json:"flow,omitempty"`
	// Issuer identifier of the IDP
	//
	// The value is a case sensitive URL.
	Issuer string `json:"issuer"`
	// URL of the JWKS endpoint
	JwksEndPointURL string `json:"jwksEndPointUrl"`
	// Name of the claim which is used for the user mapping.
	MappingClaim string `json:"mappingClaim"`
	// Name of the IDP
	Name string `json:"name"`
	// PKCE code challenge method.
	//
	// cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
	PkceChallengeMethod *string `json:"pkceChallengeMethod,omitempty"`
	// Determines whether PKCE is enabled.
	//
	// cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
	PkceEnabled *bool `json:"pkceEnabled,omitempty"`
	// URIs, to which a user is redirected after authorization.
	RedirectUris []string `json:"redirectUris"`
	// List of requested scopes
	Scopes []string `json:"scopes"`
	// URL of the token endpoint
	TokenEndPointURL string `json:"tokenEndPointUrl"`
	// Determines if a DRACOON account is automatically created for a new user
	//
	// who successfully logs on with his / her AD / IDP account.
	UserImportEnabled *bool `json:"userImportEnabled,omitempty"`
	// User group that is assigned to users who are created by automatic import.
	//
	// Reset with `0`
	UserImportGroup *int64 `json:"userImportGroup,omitempty"`
	// URL of the user info endpoint
	UserInfoEndPointURL string `json:"userInfoEndPointUrl"`
	// &#128640; Since v4.23.0
	//
	// Source, which is used to get user information at the import or update of a user.
	UserInfoSource *CreateOpenIDIdpConfigRequestUserInfoSourceEnum `json:"userInfoSource,omitempty"`
	// URL of the user management UI.
	//
	// Use empty string to remove.
	UserManagementURL *string `json:"userManagementUrl,omitempty"`
	// Determines if the DRACOON account is updated with data from AD / IDP.
	//
	// For OpenID Connect, the scopes `email` and `profile` are needed.
	UserUpdateEnabled *bool `json:"userUpdateEnabled,omitempty"`
}
