/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { MinimalRepository } from "./minimalrepository";
import { NullableCodespaceMachine } from "./nullablecodespacemachine";
import { SimpleUser } from "./simpleuser";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Details about the codespace's git repository.
 */
export class CodespaceGitStatus extends SpeakeasyBase {
  /**
   * The number of commits the local repository is ahead of the remote.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ahead" })
  ahead?: number;

  /**
   * The number of commits the local repository is behind the remote.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "behind" })
  behind?: number;

  /**
   * Whether the local repository has uncommitted changes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_uncommitted_changes" })
  hasUncommittedChanges?: boolean;

  /**
   * Whether the local repository has unpushed changes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_unpushed_changes" })
  hasUnpushedChanges?: boolean;

  /**
   * The current branch (or SHA if in detached HEAD state) of the local repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ref" })
  ref?: string;
}

/**
 * The Azure region where this codespace is located.
 */
export enum CodespaceLocationEnum {
  EastUs = "EastUs",
  SouthEastAsia = "SouthEastAsia",
  WestEurope = "WestEurope",
  WestUs2 = "WestUs2",
}

export class CodespaceRuntimeConstraints extends SpeakeasyBase {
  /**
   * The privacy settings a user can select from when forwarding a port.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowed_port_privacy_settings" })
  allowedPortPrivacySettings?: string[];
}

/**
 * State of this codespace.
 */
export enum CodespaceStateEnum {
  Unknown = "Unknown",
  Created = "Created",
  Queued = "Queued",
  Provisioning = "Provisioning",
  Available = "Available",
  Awaiting = "Awaiting",
  Unavailable = "Unavailable",
  Deleted = "Deleted",
  Moved = "Moved",
  Shutdown = "Shutdown",
  Archived = "Archived",
  Starting = "Starting",
  ShuttingDown = "ShuttingDown",
  Failed = "Failed",
  Exporting = "Exporting",
  Updating = "Updating",
  Rebuilding = "Rebuilding",
}

/**
 * A codespace.
 */
export class Codespace extends SpeakeasyBase {
  /**
   * A GitHub user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "billable_owner" })
  @Type(() => SimpleUser)
  billableOwner: SimpleUser;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * Path to devcontainer.json from repo root used to create Codespace.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "devcontainer_path" })
  devcontainerPath?: string;

  /**
   * Display name for this codespace.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_name" })
  displayName?: string;

  /**
   * UUID identifying this codespace's environment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "environment_id" })
  environmentId: string;

  /**
   * Details about the codespace's git repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "git_status" })
  @Type(() => CodespaceGitStatus)
  gitStatus: CodespaceGitStatus;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * The number of minutes of inactivity after which this codespace will be automatically stopped.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idle_timeout_minutes" })
  idleTimeoutMinutes: number;

  /**
   * Text to show user when codespace idle timeout minutes has been overriden by an organization policy
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idle_timeout_notice" })
  idleTimeoutNotice?: string;

  /**
   * The text to display to a user when a codespace has been stopped for a potentially actionable reason.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_known_stop_notice" })
  lastKnownStopNotice?: string;

  /**
   * Last known time this codespace was started.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_used_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUsedAt: Date;

  /**
   * The Azure region where this codespace is located.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location: CodespaceLocationEnum;

  /**
   * A description of the machine powering a codespace.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "machine" })
  @Type(() => NullableCodespaceMachine)
  machine: NullableCodespaceMachine;

  /**
   * API URL to access available alternate machine types for this codespace.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "machines_url" })
  machinesUrl: string;

  /**
   * Automatically generated name of this codespace.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * A GitHub user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "owner" })
  @Type(() => SimpleUser)
  owner: SimpleUser;

  /**
   * Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pending_operation" })
  pendingOperation?: boolean;

  /**
   * Text to show user when codespace is disabled by a pending operation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pending_operation_disabled_reason" })
  pendingOperationDisabledReason?: string;

  /**
   * Whether the codespace was created from a prebuild.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "prebuild" })
  prebuild: boolean;

  /**
   * API URL to publish this codespace to a new repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publish_url" })
  publishUrl?: string;

  /**
   * API URL for the Pull Request associated with this codespace, if any.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pulls_url" })
  pullsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "recent_folders" })
  recentFolders: string[];

  /**
   * Minimal Repository
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repository" })
  @Type(() => MinimalRepository)
  repository: MinimalRepository;

  /**
   * When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retention_expires_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  retentionExpiresAt?: Date;

  /**
   * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retention_period_minutes" })
  retentionPeriodMinutes?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "runtime_constraints" })
  @Type(() => CodespaceRuntimeConstraints)
  runtimeConstraints?: CodespaceRuntimeConstraints;

  /**
   * API URL to start this codespace.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_url" })
  startUrl: string;

  /**
   * State of this codespace.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: CodespaceStateEnum;

  /**
   * API URL to stop this codespace.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stop_url" })
  stopUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  /**
   * API URL for this codespace.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  /**
   * URL to access this codespace on the web.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "web_url" })
  webUrl: string;
}
