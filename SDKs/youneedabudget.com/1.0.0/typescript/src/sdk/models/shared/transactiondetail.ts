/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SubTransaction } from "./subtransaction";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The cleared status of the transaction
 */
export enum TransactionDetailClearedEnum {
  Cleared = "cleared",
  Uncleared = "uncleared",
  Reconciled = "reconciled",
}

/**
 * If the transaction is a debt/loan account transaction, the type of transaction
 */
export enum TransactionDetailDebtTransactionTypeEnum {
  Payment = "payment",
  Refund = "refund",
  Fee = "fee",
  Interest = "interest",
  Escrow = "escrow",
  BalancedAdjustment = "balancedAdjustment",
  Credit = "credit",
  Charge = "charge",
  Null = "null",
}

/**
 * The transaction flag
 */
export enum TransactionDetailFlagColorEnum {
  Red = "red",
  Orange = "orange",
  Yellow = "yellow",
  Green = "green",
  Blue = "blue",
  Purple = "purple",
  Null = "null",
}

export class TransactionDetail extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "account_id" })
  accountId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "account_name" })
  accountName: string;

  /**
   * The transaction amount in milliunits format
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * Whether or not the transaction is approved
   */
  @SpeakeasyMetadata()
  @Expose({ name: "approved" })
  approved: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "category_id" })
  categoryId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "category_name" })
  categoryName?: string;

  /**
   * The cleared status of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cleared" })
  cleared: TransactionDetailClearedEnum;

  /**
   * The transaction date in ISO format (e.g. 2016-12-01)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  date: Date;

  /**
   * If the transaction is a debt/loan account transaction, the type of transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "debt_transaction_type" })
  debtTransactionType?: TransactionDetailDebtTransactionTypeEnum;

  /**
   * Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleted" })
  deleted: boolean;

  /**
   * The transaction flag
   */
  @SpeakeasyMetadata()
  @Expose({ name: "flag_color" })
  flagColor?: TransactionDetailFlagColorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "import_id" })
  importId?: string;

  /**
   * If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
   */
  @SpeakeasyMetadata()
  @Expose({ name: "import_payee_name" })
  importPayeeName?: string;

  /**
   * If the transaction was imported, the original payee name as it appeared on the statement
   */
  @SpeakeasyMetadata()
  @Expose({ name: "import_payee_name_original" })
  importPayeeNameOriginal?: string;

  /**
   * If transaction is matched, the id of the matched transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "matched_transaction_id" })
  matchedTransactionId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "memo" })
  memo?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "payee_id" })
  payeeId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "payee_name" })
  payeeName?: string;

  /**
   * If a split transaction, the subtransactions.
   */
  @SpeakeasyMetadata({ elemType: SubTransaction })
  @Expose({ name: "subtransactions" })
  @Type(() => SubTransaction)
  subtransactions: SubTransaction[];

  /**
   * If a transfer transaction, the account to which it transfers
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transfer_account_id" })
  transferAccountId?: string;

  /**
   * If a transfer transaction, the id of transaction on the other side of the transfer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transfer_transaction_id" })
  transferTransactionId?: string;
}
