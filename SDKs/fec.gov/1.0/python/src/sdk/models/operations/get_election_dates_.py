"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import electiondate as shared_electiondate
from ..shared import offsetinfo as shared_offsetinfo
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from sdk import utils
from typing import Optional

class GetElectionDatesOfficeSoughtEnum(str, Enum):
    H = 'H'
    S = 'S'
    P = 'P'


@dataclasses.dataclass
class GetElectionDatesRequest:
    
    api_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""API key for https://api.data.gov. Get one at https://api.data.gov/signup."""  
    election_district: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'election_district', 'style': 'form', 'explode': True }})
    r"""House district of the office sought, if applicable."""  
    election_party: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'election_party', 'style': 'form', 'explode': True }})
    r"""Party, if applicable."""  
    election_state: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'election_state', 'style': 'form', 'explode': True }})
    r"""State or territory of the office sought."""  
    election_type_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'election_type_id', 'style': 'form', 'explode': True }})
    r"""Election type id"""  
    election_year: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'election_year', 'style': 'form', 'explode': True }})
    r"""Year of election"""  
    max_create_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_create_date', 'style': 'form', 'explode': True }})
    r"""The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)"""  
    max_election_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_election_date', 'style': 'form', 'explode': True }})
    r"""The maximum date of election."""  
    max_primary_general_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_primary_general_date', 'style': 'form', 'explode': True }})
    r"""The maximum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)"""  
    max_update_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_update_date', 'style': 'form', 'explode': True }})
    r"""The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)"""  
    min_create_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_create_date', 'style': 'form', 'explode': True }})
    r"""The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)"""  
    min_election_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_election_date', 'style': 'form', 'explode': True }})
    r"""The minimum date of election."""  
    min_primary_general_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_primary_general_date', 'style': 'form', 'explode': True }})
    r"""The minimum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)"""  
    min_update_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_update_date', 'style': 'form', 'explode': True }})
    r"""The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)"""  
    office_sought: Optional[list[GetElectionDatesOfficeSoughtEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'office_sought', 'style': 'form', 'explode': True }})
    r"""House, Senate or presidential office."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""For paginating through results, starting at page 1"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results returned per page. Defaults to 20."""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Provide a field to sort by. Use `-` for descending order."""  
    sort_hide_null: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_hide_null', 'style': 'form', 'explode': True }})
    r"""Hide null values on sorted column(s)."""  
    sort_null_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_null_only', 'style': 'form', 'explode': True }})
    r"""Toggle that filters out all rows having sort column that is non-null"""  
    sort_nulls_last: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_nulls_last', 'style': 'form', 'explode': True }})
    r"""Toggle that sorts null values last"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetElectionDatesDefaultApplicationJSON:
    
    pagination: Optional[shared_offsetinfo.OffsetInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pagination'), 'exclude': lambda f: f is None }})  
    results: Optional[list[shared_electiondate.ElectionDate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetElectionDatesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_election_dates_default_application_json_object: Optional[GetElectionDatesDefaultApplicationJSON] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    