// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LoadBalancerTLSCertificateFailureReasonEnum string

const (
	LoadBalancerTLSCertificateFailureReasonEnumNoAvailableContacts            LoadBalancerTLSCertificateFailureReasonEnum = "NO_AVAILABLE_CONTACTS"
	LoadBalancerTLSCertificateFailureReasonEnumAdditionalVerificationRequired LoadBalancerTLSCertificateFailureReasonEnum = "ADDITIONAL_VERIFICATION_REQUIRED"
	LoadBalancerTLSCertificateFailureReasonEnumDomainNotAllowed               LoadBalancerTLSCertificateFailureReasonEnum = "DOMAIN_NOT_ALLOWED"
	LoadBalancerTLSCertificateFailureReasonEnumInvalidPublicDomain            LoadBalancerTLSCertificateFailureReasonEnum = "INVALID_PUBLIC_DOMAIN"
	LoadBalancerTLSCertificateFailureReasonEnumOther                          LoadBalancerTLSCertificateFailureReasonEnum = "OTHER"
)

func (e *LoadBalancerTLSCertificateFailureReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NO_AVAILABLE_CONTACTS":
		fallthrough
	case "ADDITIONAL_VERIFICATION_REQUIRED":
		fallthrough
	case "DOMAIN_NOT_ALLOWED":
		fallthrough
	case "INVALID_PUBLIC_DOMAIN":
		fallthrough
	case "OTHER":
		*e = LoadBalancerTLSCertificateFailureReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LoadBalancerTLSCertificateFailureReasonEnum: %s", s)
	}
}
