/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class StoreDetailRequest {
    /**
     * This field contains additional data, which may be required for a particular request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalData")
    public java.util.Map<String, String> additionalData;
    public StoreDetailRequest withAdditionalData(java.util.Map<String, String> additionalData) {
        this.additionalData = additionalData;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank")
    public BankAccount bank;
    public StoreDetailRequest withBank(BankAccount bank) {
        this.bank = bank;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingAddress")
    public Address billingAddress;
    public StoreDetailRequest withBillingAddress(Address billingAddress) {
        this.billingAddress = billingAddress;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card")
    public Card card;
    public StoreDetailRequest withCard(Card card) {
        this.card = card;
        return this;
    }
    
    /**
     * The date of birth.
     * Format: [ISO-8601](https://www.w3.org/TR/NOTE-datetime); example: YYYY-MM-DD
     * For Paysafecard it must be the same as used when registering the Paysafecard account.
     * &gt; This field is mandatory for natural persons.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("dateOfBirth")
    public OffsetDateTime dateOfBirth;
    public StoreDetailRequest withDateOfBirth(OffsetDateTime dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
        return this;
    }
    
    /**
     * The type of the entity the payout is processed for.
     */
    @JsonProperty("entityType")
    public StoreDetailRequestEntityTypeEnum entityType;
    public StoreDetailRequest withEntityType(StoreDetailRequestEntityTypeEnum entityType) {
        this.entityType = entityType;
        return this;
    }
    
    /**
     * An integer value that is added to the normal fraud score. The value can be either positive or negative.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fraudOffset")
    public Integer fraudOffset;
    public StoreDetailRequest withFraudOffset(Integer fraudOffset) {
        this.fraudOffset = fraudOffset;
        return this;
    }
    
    /**
     * The merchant account identifier, with which you want to process the transaction.
     */
    @JsonProperty("merchantAccount")
    public String merchantAccount;
    public StoreDetailRequest withMerchantAccount(String merchantAccount) {
        this.merchantAccount = merchantAccount;
        return this;
    }
    
    /**
     * The shopper's nationality.
     * 
     * A valid value is an ISO 2-character country code (e.g. 'NL').
     */
    @JsonProperty("nationality")
    public String nationality;
    public StoreDetailRequest withNationality(String nationality) {
        this.nationality = nationality;
        return this;
    }
    
    @JsonProperty("recurring")
    public Recurring recurring;
    public StoreDetailRequest withRecurring(Recurring recurring) {
        this.recurring = recurring;
        return this;
    }
    
    /**
     * The name of the brand to make a payout to.
     * 
     * For Paysafecard it must be set to `paysafecard`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectedBrand")
    public String selectedBrand;
    public StoreDetailRequest withSelectedBrand(String selectedBrand) {
        this.selectedBrand = selectedBrand;
        return this;
    }
    
    /**
     * The shopper's email address.
     */
    @JsonProperty("shopperEmail")
    public String shopperEmail;
    public StoreDetailRequest withShopperEmail(String shopperEmail) {
        this.shopperEmail = shopperEmail;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shopperName")
    public Name shopperName;
    public StoreDetailRequest withShopperName(Name shopperName) {
        this.shopperName = shopperName;
        return this;
    }
    
    /**
     * The shopper's reference for the payment transaction.
     */
    @JsonProperty("shopperReference")
    public String shopperReference;
    public StoreDetailRequest withShopperReference(String shopperReference) {
        this.shopperReference = shopperReference;
        return this;
    }
    
    /**
     * The shopper's social security number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("socialSecurityNumber")
    public String socialSecurityNumber;
    public StoreDetailRequest withSocialSecurityNumber(String socialSecurityNumber) {
        this.socialSecurityNumber = socialSecurityNumber;
        return this;
    }
    
    /**
     * The shopper's phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("telephoneNumber")
    public String telephoneNumber;
    public StoreDetailRequest withTelephoneNumber(String telephoneNumber) {
        this.telephoneNumber = telephoneNumber;
        return this;
    }
    
}
