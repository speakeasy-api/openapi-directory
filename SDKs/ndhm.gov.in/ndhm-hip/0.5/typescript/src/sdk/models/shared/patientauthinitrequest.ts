/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AuthenticationModeEnum } from "./authenticationmodeenum";
import { PatientAuthPurposeEnum } from "./patientauthpurposeenum";
import { Expose, Transform, Type } from "class-transformer";

export enum PatientAuthInitRequestQueryRequesterTypeEnum {
  Hip = "HIP",
  Hiu = "HIU",
}

/**
 * identification of requester
 */
export class PatientAuthInitRequestQueryRequester extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PatientAuthInitRequestQueryRequesterTypeEnum;
}

export class PatientAuthInitRequestQuery extends SpeakeasyBase {
  /**
   * Subjected to CM specific capability
   *
   * @remarks
   *  1. MOBILE_OTP - for SMS OTP
   *  2. DIRECT - for authentication directly with the patient. e.g. Mobile App, SMS
   *  3. AADHAAR_OTP - for auth using OTP sent to Aadhaar number
   *  4. DEMOGRAPHICS - for auth using demographic verification.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authMode" })
  authMode?: AuthenticationModeEnum;

  /**
   * id  of the patient understood by the CM
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * what is the purpose of user auth
   */
  @SpeakeasyMetadata()
  @Expose({ name: "purpose" })
  purpose: PatientAuthPurposeEnum;

  /**
   * identification of requester
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requester" })
  @Type(() => PatientAuthInitRequestQueryRequester)
  requester: PatientAuthInitRequestQueryRequester;
}

export class PatientAuthInitRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "query" })
  @Type(() => PatientAuthInitRequestQuery)
  query: PatientAuthInitRequestQuery;

  /**
   * a nonce, unique for each HTTP request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId: string;

  /**
   * Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestamp: Date;
}
