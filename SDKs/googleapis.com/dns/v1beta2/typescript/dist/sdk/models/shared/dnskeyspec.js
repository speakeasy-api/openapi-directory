"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnsKeySpec = exports.DnsKeySpecKeyTypeEnum = exports.DnsKeySpecAlgorithmEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * String mnemonic specifying the DNSSEC algorithm of this key.
 */
var DnsKeySpecAlgorithmEnum;
(function (DnsKeySpecAlgorithmEnum) {
    DnsKeySpecAlgorithmEnum["Rsasha1"] = "rsasha1";
    DnsKeySpecAlgorithmEnum["Rsasha256"] = "rsasha256";
    DnsKeySpecAlgorithmEnum["Rsasha512"] = "rsasha512";
    DnsKeySpecAlgorithmEnum["Ecdsap256sha256"] = "ecdsap256sha256";
    DnsKeySpecAlgorithmEnum["Ecdsap384sha384"] = "ecdsap384sha384";
})(DnsKeySpecAlgorithmEnum = exports.DnsKeySpecAlgorithmEnum || (exports.DnsKeySpecAlgorithmEnum = {}));
/**
 * Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
 */
var DnsKeySpecKeyTypeEnum;
(function (DnsKeySpecKeyTypeEnum) {
    DnsKeySpecKeyTypeEnum["KeySigning"] = "keySigning";
    DnsKeySpecKeyTypeEnum["ZoneSigning"] = "zoneSigning";
})(DnsKeySpecKeyTypeEnum = exports.DnsKeySpecKeyTypeEnum || (exports.DnsKeySpecKeyTypeEnum = {}));
/**
 * Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
 */
var DnsKeySpec = /** @class */ (function (_super) {
    __extends(DnsKeySpec, _super);
    function DnsKeySpec() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "algorithm" }),
        __metadata("design:type", String)
    ], DnsKeySpec.prototype, "algorithm", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "keyLength" }),
        __metadata("design:type", Number)
    ], DnsKeySpec.prototype, "keyLength", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "keyType" }),
        __metadata("design:type", String)
    ], DnsKeySpec.prototype, "keyType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], DnsKeySpec.prototype, "kind", void 0);
    return DnsKeySpec;
}(utils_1.SpeakeasyBase));
exports.DnsKeySpec = DnsKeySpec;
