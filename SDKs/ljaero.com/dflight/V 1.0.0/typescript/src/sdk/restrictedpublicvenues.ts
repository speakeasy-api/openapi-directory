/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * #### Areas where drone operations may be restricted or prohibited:
 *
 * @remarks
 * * Lands administered by the National Park Service (prohibited at all times)
 * * Major League Baseball Stadiums (prohibited within a 3 NM radius 1 hr before - 1 hr after game)
 * * National Football League Stadiums (prohibited within a 3 NM radius 1 hr before - 1 hr after game)
 * * NCAA Division One Football Stadiums (prohibited within a 3 NM radius 1 hr before - 1 hr after game)
 * * NASCAR Sprint Cup, Indy Car, and Champ Series races (prohibited within a 3 NM radius 1 hr before - 1 hr after race)
 */
export class RestrictedPublicVenues {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve all restricted public venues located within given distance of location.
   *
   * @remarks
   * Retrieve venues existing within given distance from a point. Request body parameters are:
   * * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
   * * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
   * * distance:  distance in meters (max allowed value is 25000)
   */
  venByDistanceUsV1VenuesDistanceQueryPost(
    req: operations.VenByDistanceUsV1VenuesDistanceQueryPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.VenByDistanceUsV1VenuesDistanceQueryPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VenByDistanceUsV1VenuesDistanceQueryPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/us/v1/venues/distance-query";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "venuesByDistance",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VenByDistanceUsV1VenuesDistanceQueryPostResponse =
        new operations.VenByDistanceUsV1VenuesDistanceQueryPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.venueDistanceResponse = utils.objectToClass(
              httpRes?.data,
              shared.VenueDistanceResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve all restricted public venues located within given GeoJSON Polygon.
   *
   * @remarks
   * Retrieve all restricted public venues located within given area. Request body parameters are:
   * * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
   */
  venByPolyUsV1VenuesPolygonQueryPost(
    req: operations.VenByPolyUsV1VenuesPolygonQueryPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.VenByPolyUsV1VenuesPolygonQueryPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VenByPolyUsV1VenuesPolygonQueryPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/us/v1/venues/polygon-query";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "venuesByPolygon",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VenByPolyUsV1VenuesPolygonQueryPostResponse =
        new operations.VenByPolyUsV1VenuesPolygonQueryPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.venuePolyResponse = utils.objectToClass(
              httpRes?.data,
              shared.VenuePolyResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve all restricted public venues traversed by route.
   *
   * @remarks
   * Retrieve all restricted public venues intersected by route. Request body parameters are:
   * * route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
   */
  venByRouteUsV1VenuesRouteQueryPost(
    req: operations.VenByRouteUsV1VenuesRouteQueryPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.VenByRouteUsV1VenuesRouteQueryPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VenByRouteUsV1VenuesRouteQueryPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/us/v1/venues/route-query";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "venuesByRoute",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VenByRouteUsV1VenuesRouteQueryPostResponse =
        new operations.VenByRouteUsV1VenuesRouteQueryPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.venueRouteResponse = utils.objectToClass(
              httpRes?.data,
              shared.VenueRouteResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }
}
