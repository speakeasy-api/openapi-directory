"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppointmentTemplateOpenSlot:
    
    end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'exclude': lambda f: f is None }})  
    start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppointmentTemplate:
    r"""Appointment templates are blocks of time during which a doctor usually sees appointments with the same profile. These may have a longer duration then the corresponding profile, in which case they may allow multiple appointments to be booked during that period."""
    
    exam_room: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exam_room') }})
    r"""**1-based** index for the exam room"""  
    office: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('office') }})  
    profile: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profile') }})
    r"""ID of the appointment profile to default to"""  
    scheduled_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduled_time') }})  
    week_days: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('week_days') }})
    r"""Array of integers that indicate week days (`0` = Monday, ..., `6` = Sunday)"""  
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived'), 'exclude': lambda f: f is None }})
    r"""Indicats that the object has been soft-deleted and should not be used"""  
    date_end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_end'), 'exclude': lambda f: f is None }})  
    date_start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_start'), 'exclude': lambda f: f is None }})  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Length of an appointment in minutes"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    open_slots: Optional[list[AppointmentTemplateOpenSlot]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('open_slots'), 'exclude': lambda f: f is None }})
    r"""Array of time intervals during which the template is available. Only computed if the available and verbose query parameters are passed. Note that only slots long enough to fit an appointment with the corresponding profile are included."""  
    