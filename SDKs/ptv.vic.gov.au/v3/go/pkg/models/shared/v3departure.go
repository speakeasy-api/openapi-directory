// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

type V3Departure struct {
	// Indicates if the metropolitan train service is at the platform at the time of query; returns false for other modes
	AtPlatform *bool `json:"at_platform,omitempty"`
	// Chronological sequence for the departures in a run. Order ascendingly by this field to get chronological order (earliest first) of departures with the same run_ref. NOTE, this field is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4
	DepartureSequence *int `json:"departure_sequence,omitempty"`
	// Direction of travel identifier
	DirectionID *int `json:"direction_id,omitempty"`
	// Disruption information identifier(s)
	DisruptionIds []int64 `json:"disruption_ids,omitempty"`
	// Real-time estimate of departure time and date in ISO 8601 UTC format
	EstimatedDepartureUtc *time.Time `json:"estimated_departure_utc,omitempty"`
	// Flag indicating special condition for run (e.g. RR Reservations Required, GC Guaranteed Connection, DOO Drop Off Only, PUO Pick Up Only, MO Mondays only, TU Tuesdays only, WE Wednesdays only, TH Thursdays only, FR Fridays only, SS School days only; ignore E flag)
	Flags *string `json:"flags,omitempty"`
	// Platform number at stop (metropolitan train only; returns null for other modes)
	PlatformNumber *string `json:"platform_number,omitempty"`
	// Route identifier
	RouteID *int `json:"route_id,omitempty"`
	// Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric
	RunID *int `json:"run_id,omitempty"`
	// Alphanumeric trip/service run identifier
	RunRef *string `json:"run_ref,omitempty"`
	// Scheduled (i.e. timetabled) departure time and date in ISO 8601 UTC format
	ScheduledDepartureUtc *time.Time `json:"scheduled_departure_utc,omitempty"`
	// Stop identifier
	StopID *int `json:"stop_id,omitempty"`
}
