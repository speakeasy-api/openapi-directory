<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Poll - Represents a poll attached to a status.
 * 
 * https://docs.joinmastodon.org/entities/poll/
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 * @see https://docs.joinmastodon.org/entities/poll/
 */
class Poll
{
    /**
     * Custom emoji to be used for rendering poll options.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Emoji> $emojis
     */
	#[\JMS\Serializer\Annotation\SerializedName('emojis')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Emoji>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $emojis = null;
    
    /**
     * Is the poll currently expired?
     * 
     * @var ?bool $expired
     */
	#[\JMS\Serializer\Annotation\SerializedName('expired')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $expired = null;
    
    /**
     * When the poll ends. ISO 8601 Datetime, or null if the poll does not end.
     * 
     * @var ?\DateTime $expiresAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('expires_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $expiresAt = null;
    
    /**
     * The ID of the poll in the database. Cast from an integer, but not guaranteed to be a number.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * Does the poll allow multiple-choice answers?
     * 
     * @var ?bool $multiple
     */
	#[\JMS\Serializer\Annotation\SerializedName('multiple')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $multiple = null;
    
    /**
     * Possible answers for the poll.
     * 
     * @var ?array<mixed> $options
     */
	#[\JMS\Serializer\Annotation\SerializedName('options')]
    #[\JMS\Serializer\Annotation\Type('array<mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $options = null;
    
    /**
     * When called with a user token, which options has the authorized user chosen? Contains an array of index values for `options`. Array of Number, or null if no current user
     * 
     * @var ?array<int> $ownVotes
     */
	#[\JMS\Serializer\Annotation\SerializedName('own_votes')]
    #[\JMS\Serializer\Annotation\Type('array<int>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $ownVotes = null;
    
    /**
     * When called with a user token, has the authorized user voted? Boolean, or null if no current user
     * 
     * @var ?bool $voted
     */
	#[\JMS\Serializer\Annotation\SerializedName('voted')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $voted = null;
    
    /**
     * How many unique accounts have voted on a multiple-choice poll. Number, or null if `multiple` is false.
     * 
     * @var ?int $votersCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('voters_count')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $votersCount = null;
    
    /**
     * How many votes have been received.
     * 
     * @var ?int $votesCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('votes_count')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $votesCount = null;
    
	public function __construct()
	{
		$this->emojis = null;
		$this->expired = null;
		$this->expiresAt = null;
		$this->id = null;
		$this->multiple = null;
		$this->options = null;
		$this->ownVotes = null;
		$this->voted = null;
		$this->votersCount = null;
		$this->votesCount = null;
	}
}
