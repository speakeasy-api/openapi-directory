// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ComplianceRangeFilterEnum - Specifies a number of snapshots. Compliance for each object is calculated for the most recent snapshots, up to the specified number.
type ComplianceRangeFilterEnum string

const (
	ComplianceRangeFilterEnumLastSnapshot   ComplianceRangeFilterEnum = "LastSnapshot"
	ComplianceRangeFilterEnumLast2Snapshots ComplianceRangeFilterEnum = "Last2Snapshots"
	ComplianceRangeFilterEnumLast3Snapshots ComplianceRangeFilterEnum = "Last3Snapshots"
	ComplianceRangeFilterEnumAllSnapshots   ComplianceRangeFilterEnum = "AllSnapshots"
)

func (e ComplianceRangeFilterEnum) ToPointer() *ComplianceRangeFilterEnum {
	return &e
}

func (e *ComplianceRangeFilterEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LastSnapshot":
		fallthrough
	case "Last2Snapshots":
		fallthrough
	case "Last3Snapshots":
		fallthrough
	case "AllSnapshots":
		*e = ComplianceRangeFilterEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComplianceRangeFilterEnum: %v", v)
	}
}
