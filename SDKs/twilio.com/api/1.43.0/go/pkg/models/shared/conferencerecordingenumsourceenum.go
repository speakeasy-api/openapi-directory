// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConferenceRecordingEnumSourceEnum string

const (
	ConferenceRecordingEnumSourceEnumDialVerb                    ConferenceRecordingEnumSourceEnum = "DialVerb"
	ConferenceRecordingEnumSourceEnumConference                  ConferenceRecordingEnumSourceEnum = "Conference"
	ConferenceRecordingEnumSourceEnumOutboundAPI                 ConferenceRecordingEnumSourceEnum = "OutboundAPI"
	ConferenceRecordingEnumSourceEnumTrunking                    ConferenceRecordingEnumSourceEnum = "Trunking"
	ConferenceRecordingEnumSourceEnumRecordVerb                  ConferenceRecordingEnumSourceEnum = "RecordVerb"
	ConferenceRecordingEnumSourceEnumStartCallRecordingAPI       ConferenceRecordingEnumSourceEnum = "StartCallRecordingAPI"
	ConferenceRecordingEnumSourceEnumStartConferenceRecordingAPI ConferenceRecordingEnumSourceEnum = "StartConferenceRecordingAPI"
)

func (e ConferenceRecordingEnumSourceEnum) ToPointer() *ConferenceRecordingEnumSourceEnum {
	return &e
}

func (e *ConferenceRecordingEnumSourceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DialVerb":
		fallthrough
	case "Conference":
		fallthrough
	case "OutboundAPI":
		fallthrough
	case "Trunking":
		fallthrough
	case "RecordVerb":
		fallthrough
	case "StartCallRecordingAPI":
		fallthrough
	case "StartConferenceRecordingAPI":
		*e = ConferenceRecordingEnumSourceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConferenceRecordingEnumSourceEnum: %v", v)
	}
}
