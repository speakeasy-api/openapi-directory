<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class PostAdminRecordingsStartRequestBody
{
    /**
     * Headers from the request to include in the generated stub mappings, mapped to parameter objects. The only parameter available is "caseInsensitive", which defaults to false
     * 
     * @var ?array<string, \OpenAPI\OpenAPI\Models\Operations\PostAdminRecordingsStartRequestBodyCaptureHeaders> $captureHeaders
     */
	#[\JMS\Serializer\Annotation\SerializedName('captureHeaders')]
    #[\JMS\Serializer\Annotation\Type('array<string, OpenAPI\OpenAPI\Models\Operations\PostAdminRecordingsStartRequestBodyCaptureHeaders>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $captureHeaders = null;
    
    /**
     * Criteria for extracting response bodies to a separate file instead of including it in the stub mapping
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\PostAdminRecordingsStartRequestBodyExtractBodyCriteria $extractBodyCriteria
     */
	#[\JMS\Serializer\Annotation\SerializedName('extractBodyCriteria')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\PostAdminRecordingsStartRequestBodyExtractBodyCriteria')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PostAdminRecordingsStartRequestBodyExtractBodyCriteria $extractBodyCriteria = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('filters')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\PostAdminRecordingsStartRequestBodyFilters')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PostAdminRecordingsStartRequestBodyFilters $filters = null;
    
    /**
     * Whether to save stub mappings to the file system or just return them
     * 
     * @var ?bool $persist
     */
	#[\JMS\Serializer\Annotation\SerializedName('persist')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $persist = null;
    
    /**
     * When true, duplicate requests will be added to a Scenario. When false, duplicates are discarded
     * 
     * @var ?bool $repeatsAsScenarios
     */
	#[\JMS\Serializer\Annotation\SerializedName('repeatsAsScenarios')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $repeatsAsScenarios = null;
    
    /**
     * Control the request body matcher used in generated stub mappings
     * 
     * @var mixed $requestBodyPattern
     */
	#[\JMS\Serializer\Annotation\SerializedName('requestBodyPattern')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $requestBodyPattern = null;
    
    /**
     * Target URL when using the record and playback API
     * 
     * @var ?string $targetBaseUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('targetBaseUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $targetBaseUrl = null;
    
    /**
     * List of names of stub mappings transformers to apply to generated stubs
     * 
     * @var ?array<string, mixed> $transformerParameters
     */
	#[\JMS\Serializer\Annotation\SerializedName('transformerParameters')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $transformerParameters = null;
    
    /**
     * Parameters to pass to stub mapping transformers
     * 
     * @var ?array<string> $transformers
     */
	#[\JMS\Serializer\Annotation\SerializedName('transformers')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $transformers = null;
    
	public function __construct()
	{
		$this->captureHeaders = null;
		$this->extractBodyCriteria = null;
		$this->filters = null;
		$this->persist = null;
		$this->repeatsAsScenarios = null;
		$this->requestBodyPattern = null;
		$this->targetBaseUrl = null;
		$this->transformerParameters = null;
		$this->transformers = null;
	}
}
