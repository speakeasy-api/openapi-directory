// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PostAuthorImage - The creator's avatar.
type PostAuthorImage struct {
	// The creator's avatar URL.
	URL *string `json:"url,omitempty"`
}

// PostAuthor - The author of this Post.
type PostAuthor struct {
	// The display name.
	DisplayName *string `json:"displayName,omitempty"`
	// The identifier of the creator.
	ID *string `json:"id,omitempty"`
	// The creator's avatar.
	Image *PostAuthorImage `json:"image,omitempty"`
	// The URL of the creator's Profile page.
	URL *string `json:"url,omitempty"`
}

// PostBlog - Data about the blog containing this Post.
type PostBlog struct {
	// The identifier of the Blog that contains this Post.
	ID *string `json:"id,omitempty"`
}

type PostImages struct {
	URL *string `json:"url,omitempty"`
}

// PostLocation - The location for geotagged posts.
type PostLocation struct {
	// Location's latitude.
	Lat *float64 `json:"lat,omitempty"`
	// Location's longitude.
	Lng *float64 `json:"lng,omitempty"`
	// Location name.
	Name *string `json:"name,omitempty"`
	// Location's viewport span. Can be used when rendering a map preview.
	Span *string `json:"span,omitempty"`
}

// PostReaderCommentsEnum - Comment control and display setting for readers of this post.
type PostReaderCommentsEnum string

const (
	PostReaderCommentsEnumAllow                 PostReaderCommentsEnum = "ALLOW"
	PostReaderCommentsEnumDontAllowShowExisting PostReaderCommentsEnum = "DONT_ALLOW_SHOW_EXISTING"
	PostReaderCommentsEnumDontAllowHideExisting PostReaderCommentsEnum = "DONT_ALLOW_HIDE_EXISTING"
)

func (e PostReaderCommentsEnum) ToPointer() *PostReaderCommentsEnum {
	return &e
}

func (e *PostReaderCommentsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "DONT_ALLOW_SHOW_EXISTING":
		fallthrough
	case "DONT_ALLOW_HIDE_EXISTING":
		*e = PostReaderCommentsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostReaderCommentsEnum: %v", v)
	}
}

// PostReplies - The container of comments on this Post.
type PostReplies struct {
	// The List of Comments for this Post.
	Items []Comment `json:"items,omitempty"`
	// The URL of the comments on this post.
	SelfLink *string `json:"selfLink,omitempty"`
	// The count of comments on this post.
	TotalItems *string `json:"totalItems,omitempty"`
}

// PostStatusEnum - Status of the post. Only set for admin-level requests.
type PostStatusEnum string

const (
	PostStatusEnumLive        PostStatusEnum = "LIVE"
	PostStatusEnumDraft       PostStatusEnum = "DRAFT"
	PostStatusEnumScheduled   PostStatusEnum = "SCHEDULED"
	PostStatusEnumSoftTrashed PostStatusEnum = "SOFT_TRASHED"
)

func (e PostStatusEnum) ToPointer() *PostStatusEnum {
	return &e
}

func (e *PostStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LIVE":
		fallthrough
	case "DRAFT":
		fallthrough
	case "SCHEDULED":
		fallthrough
	case "SOFT_TRASHED":
		*e = PostStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostStatusEnum: %v", v)
	}
}

// Post - Successful response
type Post struct {
	// The author of this Post.
	Author *PostAuthor `json:"author,omitempty"`
	// Data about the blog containing this Post.
	Blog *PostBlog `json:"blog,omitempty"`
	// The content of the Post. May contain HTML markup.
	Content *string `json:"content,omitempty"`
	// The JSON meta-data for the Post.
	CustomMetaData *string `json:"customMetaData,omitempty"`
	// Etag of the resource.
	Etag *string `json:"etag,omitempty"`
	// The identifier of this Post.
	ID *string `json:"id,omitempty"`
	// Display image for the Post.
	Images []PostImages `json:"images,omitempty"`
	// The kind of this entity. Always blogger#post.
	Kind *string `json:"kind,omitempty"`
	// The list of labels this Post was tagged with.
	Labels []string `json:"labels,omitempty"`
	// The location for geotagged posts.
	Location *PostLocation `json:"location,omitempty"`
	// RFC 3339 date-time when this Post was published.
	Published *string `json:"published,omitempty"`
	// Comment control and display setting for readers of this post.
	ReaderComments *PostReaderCommentsEnum `json:"readerComments,omitempty"`
	// The container of comments on this Post.
	Replies *PostReplies `json:"replies,omitempty"`
	// The API REST URL to fetch this resource from.
	SelfLink *string `json:"selfLink,omitempty"`
	// Status of the post. Only set for admin-level requests.
	Status *PostStatusEnum `json:"status,omitempty"`
	// The title of the Post.
	Title *string `json:"title,omitempty"`
	// The title link URL, similar to atom's related link.
	TitleLink *string `json:"titleLink,omitempty"`
	// RFC 3339 date-time when this Post was last trashed.
	Trashed *string `json:"trashed,omitempty"`
	// RFC 3339 date-time when this Post was last updated.
	Updated *string `json:"updated,omitempty"`
	// The URL where this Post is displayed.
	URL *string `json:"url,omitempty"`
}
