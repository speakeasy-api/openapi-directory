"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import servicelevelindicator as shared_servicelevelindicator
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ServiceLevelObjectiveCalendarPeriodEnum(str, Enum):
    r"""A calendar period, semantically \\"since the start of the current \\". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported."""
    CALENDAR_PERIOD_UNSPECIFIED = 'CALENDAR_PERIOD_UNSPECIFIED'
    DAY = 'DAY'
    WEEK = 'WEEK'
    FORTNIGHT = 'FORTNIGHT'
    MONTH = 'MONTH'
    QUARTER = 'QUARTER'
    HALF = 'HALF'
    YEAR = 'YEAR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServiceLevelObjective:
    r"""A Service-Level Objective (SLO) describes a level of desired good service. It consists of a service-level indicator (SLI), a performance goal, and a period over which the objective is to be evaluated against that goal. The SLO can use SLIs defined in a number of different manners. Typical SLOs might include \\"99% of requests in each rolling week have latency below 200 milliseconds\\" or \\"99.5% of requests in each calendar month return successfully.\\" """
    
    calendar_period: Optional[ServiceLevelObjectiveCalendarPeriodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calendarPeriod'), 'exclude': lambda f: f is None }})
    r"""A calendar period, semantically \\"since the start of the current \\". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Name used for UI elements listing this SLO."""  
    goal: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('goal'), 'exclude': lambda f: f is None }})
    r"""The fraction of service that must be good in order for this objective to be met. 0 < goal <= 0.999."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Resource name for this ServiceLevelObjective. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]"""  
    rolling_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rollingPeriod'), 'exclude': lambda f: f is None }})
    r"""A rolling time period, semantically \\"in the past \\". Must be an integer multiple of 1 day no larger than 30 days."""  
    service_level_indicator: Optional[shared_servicelevelindicator.ServiceLevelIndicator] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceLevelIndicator'), 'exclude': lambda f: f is None }})
    r"""A Service-Level Indicator (SLI) describes the \\"performance\\" of a service. For some services, the SLI is well-defined. In such cases, the SLI can be described easily by referencing the well-known SLI and providing the needed parameters. Alternatively, a \\"custom\\" SLI can be defined with a query to the underlying metric store. An SLI is defined to be good_service / total_service over any queried time interval. The value of performance always falls into the range 0 <= performance <= 1. A custom SLI describes how to compute this ratio, whether this is by dividing values from a pair of time series, cutting a Distribution into good and bad counts, or counting time windows in which the service complies with a criterion. For separation of concerns, a single Service-Level Indicator measures performance for only one aspect of service quality, such as fraction of successful queries or fast-enough queries."""  
    user_labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userLabels'), 'exclude': lambda f: f is None }})
    r"""Labels which have been used to annotate the service-level objective. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value."""  
    