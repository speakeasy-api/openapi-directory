"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectivityTest = exports.ConnectivityTestInput = void 0;
var utils_1 = require("../../../internal/utils");
var endpoint_1 = require("./endpoint");
var probingdetails_1 = require("./probingdetails");
var reachabilitydetails_1 = require("./reachabilitydetails");
var class_transformer_1 = require("class-transformer");
/**
 * A Connectivity Test for a network reachability analysis.
 */
var ConnectivityTestInput = /** @class */ (function (_super) {
    __extends(ConnectivityTestInput, _super);
    function ConnectivityTestInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], ConnectivityTestInput.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "destination" }),
        (0, class_transformer_1.Type)(function () { return endpoint_1.EndpointInput; }),
        __metadata("design:type", endpoint_1.EndpointInput)
    ], ConnectivityTestInput.prototype, "destination", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Object)
    ], ConnectivityTestInput.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], ConnectivityTestInput.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "probingDetails" }),
        (0, class_transformer_1.Type)(function () { return probingdetails_1.ProbingDetails; }),
        __metadata("design:type", probingdetails_1.ProbingDetails)
    ], ConnectivityTestInput.prototype, "probingDetails", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "protocol" }),
        __metadata("design:type", String)
    ], ConnectivityTestInput.prototype, "protocol", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "reachabilityDetails" }),
        (0, class_transformer_1.Type)(function () { return reachabilitydetails_1.ReachabilityDetails; }),
        __metadata("design:type", reachabilitydetails_1.ReachabilityDetails)
    ], ConnectivityTestInput.prototype, "reachabilityDetails", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "relatedProjects" }),
        __metadata("design:type", Array)
    ], ConnectivityTestInput.prototype, "relatedProjects", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "source" }),
        (0, class_transformer_1.Type)(function () { return endpoint_1.EndpointInput; }),
        __metadata("design:type", endpoint_1.EndpointInput)
    ], ConnectivityTestInput.prototype, "source", void 0);
    return ConnectivityTestInput;
}(utils_1.SpeakeasyBase));
exports.ConnectivityTestInput = ConnectivityTestInput;
/**
 * A Connectivity Test for a network reachability analysis.
 */
var ConnectivityTest = /** @class */ (function (_super) {
    __extends(ConnectivityTest, _super);
    function ConnectivityTest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createTime" }),
        __metadata("design:type", String)
    ], ConnectivityTest.prototype, "createTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], ConnectivityTest.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "destination" }),
        (0, class_transformer_1.Type)(function () { return endpoint_1.Endpoint; }),
        __metadata("design:type", endpoint_1.Endpoint)
    ], ConnectivityTest.prototype, "destination", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "displayName" }),
        __metadata("design:type", String)
    ], ConnectivityTest.prototype, "displayName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Object)
    ], ConnectivityTest.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], ConnectivityTest.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "probingDetails" }),
        (0, class_transformer_1.Type)(function () { return probingdetails_1.ProbingDetails; }),
        __metadata("design:type", probingdetails_1.ProbingDetails)
    ], ConnectivityTest.prototype, "probingDetails", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "protocol" }),
        __metadata("design:type", String)
    ], ConnectivityTest.prototype, "protocol", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "reachabilityDetails" }),
        (0, class_transformer_1.Type)(function () { return reachabilitydetails_1.ReachabilityDetails; }),
        __metadata("design:type", reachabilitydetails_1.ReachabilityDetails)
    ], ConnectivityTest.prototype, "reachabilityDetails", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "relatedProjects" }),
        __metadata("design:type", Array)
    ], ConnectivityTest.prototype, "relatedProjects", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "source" }),
        (0, class_transformer_1.Type)(function () { return endpoint_1.Endpoint; }),
        __metadata("design:type", endpoint_1.Endpoint)
    ], ConnectivityTest.prototype, "source", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "updateTime" }),
        __metadata("design:type", String)
    ], ConnectivityTest.prototype, "updateTime", void 0);
    return ConnectivityTest;
}(utils_1.SpeakeasyBase));
exports.ConnectivityTest = ConnectivityTest;
