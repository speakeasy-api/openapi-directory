"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class V1System:
    r"""System overview"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def health_check(self) -> operations.HealthCheckResponse:
        r"""Returns the health information for the official business registers based on usage.
        Returns the health information for the official business registers based on usage.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/system/health'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HealthCheckResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.HealthCheck200ApplicationJSON]])
                res.health_check_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.HealthCheckDefaultApplicationJSON])
                res.health_check_default_application_json_object = out

        return res

    def system_countries(self) -> operations.SystemCountriesResponse:
        r"""Returns a list of countries
        Retrieve the list of all currently enabled countries
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/system/countries'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SystemCountriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.SystemCountries200ApplicationJSON]])
                res.system_countries_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SystemCountriesDefaultApplicationJSON])
                res.system_countries_default_application_json_object = out

        return res

    def system_pricelist(self) -> operations.SystemPricelistResponse:
        r"""Returns a list of products with prices
        Retrieve pricing rules for your subscription plan
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/system/pricelist'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SystemPricelistResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.SystemPricelist200ApplicationJSON]])
                res.system_pricelist_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SystemPricelistDefaultApplicationJSON])
                res.system_pricelist_default_application_json_object = out

        return res

    