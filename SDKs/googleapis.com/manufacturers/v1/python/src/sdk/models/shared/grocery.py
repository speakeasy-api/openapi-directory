"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Grocery:
    
    active_ingredients: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activeIngredients'), 'exclude': lambda f: f is None }})
    r"""Active ingredients."""  
    alcohol_by_volume: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alcoholByVolume'), 'exclude': lambda f: f is None }})
    r"""Alcohol by volume."""  
    allergens: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allergens'), 'exclude': lambda f: f is None }})
    r"""Allergens."""  
    derived_nutrition_claim: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('derivedNutritionClaim'), 'exclude': lambda f: f is None }})
    r"""Derived nutrition claim."""  
    directions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directions'), 'exclude': lambda f: f is None }})
    r"""Directions."""  
    indications: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indications'), 'exclude': lambda f: f is None }})
    r"""Indications."""  
    ingredients: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ingredients'), 'exclude': lambda f: f is None }})
    r"""Ingredients."""  
    nutrition_claim: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nutritionClaim'), 'exclude': lambda f: f is None }})
    r"""Nutrition claim."""  
    storage_instructions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storageInstructions'), 'exclude': lambda f: f is None }})
    r"""Storage instructions."""  
    