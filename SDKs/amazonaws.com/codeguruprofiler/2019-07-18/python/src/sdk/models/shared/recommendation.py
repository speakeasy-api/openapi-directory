"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import match as shared_match
from ..shared import pattern as shared_pattern
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Recommendation:
    r"""A potential improvement that was found from analyzing the profiling data."""
    
    all_matches_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allMatchesCount') }})  
    all_matches_sum: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allMatchesSum') }})  
    end_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    pattern: shared_pattern.Pattern = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pattern') }})  
    start_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    top_matches: list[shared_match.Match] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topMatches') }})  
    