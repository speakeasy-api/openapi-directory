// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CustomObjectDefinitionUpdateActionRequestRelationshipCardinalityEnum - The cardinality of the relationship from this object to another object.
//
// Only the `manyToOne` cardinality can be used when creating relationships.  A relationship with `oneToMany` cardinality is created implicitly when a `manyToOne` relationship is created.
//
// A custom object definition can have a maximum of 2 `manyToOne` relationships.
type CustomObjectDefinitionUpdateActionRequestRelationshipCardinalityEnum string

const (
	CustomObjectDefinitionUpdateActionRequestRelationshipCardinalityEnumManyToOne CustomObjectDefinitionUpdateActionRequestRelationshipCardinalityEnum = "manyToOne"
)

func (e *CustomObjectDefinitionUpdateActionRequestRelationshipCardinalityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manyToOne":
		*e = CustomObjectDefinitionUpdateActionRequestRelationshipCardinalityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomObjectDefinitionUpdateActionRequestRelationshipCardinalityEnum: %s", s)
	}
}

type CustomObjectDefinitionUpdateActionRequestRelationshipRecordConstraintsCreate struct {
	// Specifies whether Zuora validates the values of mapped fields
	// in custom object records.
	//
	// By default, Zuora validates the values of mapped fields
	// in custom object records. For example, if the
	// custom object definition has a field called `AccountId__c`
	// that is mapped to the `Id` field of the `account` object,
	// Zuora verifies that the value of `AccountId__c` is a valid
	// account ID when a custom object record is created.
	// If the value of `AccountId__c` is not a valid account ID,
	// the operation fails.
	//
	EnforceValidMapping *bool `json:"enforceValidMapping,omitempty"`
}

// CustomObjectDefinitionUpdateActionRequestRelationshipRecordConstraints - Specifies contraints to apply to custom object records.
type CustomObjectDefinitionUpdateActionRequestRelationshipRecordConstraints struct {
	Create *CustomObjectDefinitionUpdateActionRequestRelationshipRecordConstraintsCreate `json:"create,omitempty"`
}

type CustomObjectDefinitionUpdateActionRequestRelationship struct {
	// The cardinality of the relationship from this object to another object.
	//
	// Only the `manyToOne` cardinality can be used when creating relationships.  A relationship with `oneToMany` cardinality is created implicitly when a `manyToOne` relationship is created.
	//
	// A custom object definition can have a maximum of 2 `manyToOne` relationships.
	//
	Cardinality *CustomObjectDefinitionUpdateActionRequestRelationshipCardinalityEnum `json:"cardinality,omitempty"`
	// Field mappings in the form of `<this-object-field-name>`: `<other-object-field-name>`.
	//
	Fields map[string]string `json:"fields"`
	// The namespace where the related object is located
	Namespace string `json:"namespace"`
	// The API name of the related object
	Object string `json:"object"`
	// Specifies contraints to apply to custom object records.
	//
	RecordConstraints *CustomObjectDefinitionUpdateActionRequestRelationshipRecordConstraints `json:"recordConstraints,omitempty"`
}

// CustomObjectDefinitionUpdateActionRequestTypeEnum - The type of the updating action on a custom object definition
type CustomObjectDefinitionUpdateActionRequestTypeEnum string

const (
	CustomObjectDefinitionUpdateActionRequestTypeEnumAddField           CustomObjectDefinitionUpdateActionRequestTypeEnum = "addField"
	CustomObjectDefinitionUpdateActionRequestTypeEnumDeleteField        CustomObjectDefinitionUpdateActionRequestTypeEnum = "deleteField"
	CustomObjectDefinitionUpdateActionRequestTypeEnumUpdateField        CustomObjectDefinitionUpdateActionRequestTypeEnum = "updateField"
	CustomObjectDefinitionUpdateActionRequestTypeEnumUpdateObject       CustomObjectDefinitionUpdateActionRequestTypeEnum = "updateObject"
	CustomObjectDefinitionUpdateActionRequestTypeEnumRenameField        CustomObjectDefinitionUpdateActionRequestTypeEnum = "renameField"
	CustomObjectDefinitionUpdateActionRequestTypeEnumAddRelationship    CustomObjectDefinitionUpdateActionRequestTypeEnum = "addRelationship"
	CustomObjectDefinitionUpdateActionRequestTypeEnumDeleteRelationship CustomObjectDefinitionUpdateActionRequestTypeEnum = "deleteRelationship"
)

func (e *CustomObjectDefinitionUpdateActionRequestTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "addField":
		fallthrough
	case "deleteField":
		fallthrough
	case "updateField":
		fallthrough
	case "updateObject":
		fallthrough
	case "renameField":
		fallthrough
	case "addRelationship":
		fallthrough
	case "deleteRelationship":
		*e = CustomObjectDefinitionUpdateActionRequestTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomObjectDefinitionUpdateActionRequestTypeEnum: %s", s)
	}
}

type CustomObjectDefinitionUpdateActionRequest struct {
	// Optional property for `updateObject` action
	Description *string `json:"description,omitempty"`
	// A reference to a field.
	Field *UpdateCustomObjectCusotmField `json:"field,omitempty"`
	// Optional property for `updateObject` action
	Label *string `json:"label,omitempty"`
	// The namespace of the custom object definition to be updated
	Namespace string `json:"namespace"`
	// The API name of the custom object definition to be updated
	Object       string                                                 `json:"object"`
	Relationship *CustomObjectDefinitionUpdateActionRequestRelationship `json:"relationship,omitempty"`
	// The type of the updating action on a custom object definition
	Type CustomObjectDefinitionUpdateActionRequestTypeEnum `json:"type"`
}
