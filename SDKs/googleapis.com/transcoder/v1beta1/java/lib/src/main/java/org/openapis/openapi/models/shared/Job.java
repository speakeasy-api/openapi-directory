/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Job - Transcoding job resource.
 */
public class Job {
    /**
     * Job configuration
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("config")
    public JobConfig config;
    public Job withConfig(JobConfig config) {
        this.config = config;
        return this;
    }
    
    /**
     * Output only. The time the job was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Job withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. The time the transcoding finished.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTime")
    public String endTime;
    public Job withEndTime(String endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * Output only. List of failure details. This property may contain additional information about the failure when `failure_reason` is present. *Note*: This feature is not yet available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failureDetails")
    public FailureDetail[] failureDetails;
    public Job withFailureDetails(FailureDetail[] failureDetails) {
        this.failureDetails = failureDetails;
        return this;
    }
    
    /**
     * Output only. A description of the reason for the failure. This property is always present when `state` is `FAILED`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failureReason")
    public String failureReason;
    public Job withFailureReason(String failureReason) {
        this.failureReason = failureReason;
        return this;
    }
    
    /**
     * Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inputUri")
    public String inputUri;
    public Job withInputUri(String inputUri) {
        this.inputUri = inputUri;
        return this;
    }
    
    /**
     * The resource name of the job. Format: `projects/{project}/locations/{location}/jobs/{job}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Job withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The origin URI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originUri")
    public OriginUri originUri;
    public Job withOriginUri(OriginUri originUri) {
        this.originUri = originUri;
        return this;
    }
    
    /**
     * Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outputUri")
    public String outputUri;
    public Job withOutputUri(String outputUri) {
        this.outputUri = outputUri;
        return this;
    }
    
    /**
     * Specify the priority of the job. Enter a value between 0 and 100, where 0 is the lowest priority and 100 is the highest priority. The default is 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public Integer priority;
    public Job withPriority(Integer priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * Estimated fractional progress for each step, from `0` to `1`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("progress")
    public Progress progress;
    public Job withProgress(Progress progress) {
        this.progress = progress;
        return this;
    }
    
    /**
     * Output only. The time the transcoding started.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    public String startTime;
    public Job withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Output only. The current state of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public JobStateEnum state;
    public Job withState(JobStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`. Preset Transcoder templates: - `preset/{preset_id}` - User defined JobTemplate: `{job_template_id}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("templateId")
    public String templateId;
    public Job withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }
    
    /**
     * Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ttlAfterCompletionDays")
    public Integer ttlAfterCompletionDays;
    public Job withTtlAfterCompletionDays(Integer ttlAfterCompletionDays) {
        this.ttlAfterCompletionDays = ttlAfterCompletionDays;
        return this;
    }
    
}
