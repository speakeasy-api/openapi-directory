/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Jobs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete Job by Id
   *
   * @remarks
   * Deletes a transcription job. All data related to the job, such as input media and transcript, will be permanently deleted. A job can only be deleted once it's completed (either with success or failure).
   */
  deleteJobById(
    req: operations.DeleteJobByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteJobByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteJobByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/jobs/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteJobByIdResponse =
        new operations.DeleteJobByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.deleteJobById401ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteJobById401ApplicationProblemPlusJson
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.deleteJobById404ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteJobById404ApplicationProblemPlusJson
              );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.deleteJobById409ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteJobById409ApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Job By Id
   *
   * @remarks
   * Returns information about a transcription job
   */
  getJobById(
    req: operations.GetJobByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetJobByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetJobByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/jobs/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetJobByIdResponse =
        new operations.GetJobByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.job = utils.objectToClass(httpRes?.data, shared.Job);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.getJobById401ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetJobById401ApplicationProblemPlusJson
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.getJobById404ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetJobById404ApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get List of Jobs
   *
   * @remarks
   * Gets a list of transcription jobs submitted within the last 30 days in reverse chronological order up to the provided `limit` number of jobs per call. **Note:** Jobs older than 30 days will not be listed. Pagination is supported via passing the last job `id` from a previous call into `starting_after`.
   */
  getListOfJobs(
    req: operations.GetListOfJobsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListOfJobsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListOfJobsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/jobs";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListOfJobsResponse =
        new operations.GetListOfJobsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jobs = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.jobs = utils.objectToClass(
              httpRes?.data,
              shared.Job,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.getListOfJobs400ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetListOfJobs400ApplicationProblemPlusJson
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.getListOfJobs401ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetListOfJobs401ApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Submit Transcription Job
   *
   * @remarks
   * Starts an asynchronous job to transcribe speech-to-text for a media file. Media files can be specified in two ways, either by including a public url to the media in the transcription job `options` or by uploading a local file as part of a multipart/form request.
   */
  submitTranscriptionJobJson(
    req: shared.SubmitJobMediaUrlOptions,
    config?: AxiosRequestConfig
  ): Promise<operations.SubmitTranscriptionJobJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.SubmitJobMediaUrlOptions(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/jobs";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SubmitTranscriptionJobJsonResponse =
        new operations.SubmitTranscriptionJobJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.job = utils.objectToClass(httpRes?.data, shared.Job);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.submitTranscriptionJobJson400ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SubmitTranscriptionJobJson400ApplicationProblemPlusJson
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.submitTranscriptionJobJson401ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SubmitTranscriptionJobJson401ApplicationProblemPlusJson
              );
          }
          break;
        case httpRes?.status == 413:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.submitTranscriptionJobJson413ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SubmitTranscriptionJobJson413ApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Submit Transcription Job
   *
   * @remarks
   * Starts an asynchronous job to transcribe speech-to-text for a media file. Media files can be specified in two ways, either by including a public url to the media in the transcription job `options` or by uploading a local file as part of a multipart/form request.
   */
  submitTranscriptionJobMultipart(
    req: operations.SubmitTranscriptionJobMultipartFormData,
    config?: AxiosRequestConfig
  ): Promise<operations.SubmitTranscriptionJobMultipartResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SubmitTranscriptionJobMultipartFormData(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/jobs";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SubmitTranscriptionJobMultipartResponse =
        new operations.SubmitTranscriptionJobMultipartResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.job = utils.objectToClass(httpRes?.data, shared.Job);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.submitTranscriptionJobMultipart400ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SubmitTranscriptionJobMultipart400ApplicationProblemPlusJson
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.submitTranscriptionJobMultipart401ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SubmitTranscriptionJobMultipart401ApplicationProblemPlusJson
              );
          }
          break;
        case httpRes?.status == 413:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.submitTranscriptionJobMultipart413ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SubmitTranscriptionJobMultipart413ApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }
}
