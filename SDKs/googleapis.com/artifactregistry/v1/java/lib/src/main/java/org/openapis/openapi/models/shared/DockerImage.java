/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DockerImage - DockerImage represents a docker artifact. The following fields are returned as untyped metadata in the Version resource, using camelcase keys (i.e. metadata.imageSizeBytes): * imageSizeBytes * mediaType * buildTime
 */
public class DockerImage {
    /**
     * The time this image was built. This field is returned as the 'metadata.buildTime' field in the Version resource. The build time is returned to the client as an RFC 3339 string, which can be easily used with the JavaScript Date constructor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buildTime")
    public String buildTime;
    public DockerImage withBuildTime(String buildTime) {
        this.buildTime = buildTime;
        return this;
    }
    
    /**
     * Calculated size of the image. This field is returned as the 'metadata.imageSizeBytes' field in the Version resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageSizeBytes")
    public String imageSizeBytes;
    public DockerImage withImageSizeBytes(String imageSizeBytes) {
        this.imageSizeBytes = imageSizeBytes;
        return this;
    }
    
    /**
     * Media type of this image, e.g. "application/vnd.docker.distribution.manifest.v2+json". This field is returned as the 'metadata.mediaType' field in the Version resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mediaType")
    public String mediaType;
    public DockerImage withMediaType(String mediaType) {
        this.mediaType = mediaType;
        return this;
    }
    
    /**
     * Required. registry_location, project_id, repository_name and image id forms a unique image name:`projects//locations//repository//dockerImages/`. For example, "projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/ nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf", where "us-west4" is the registry_location, "test-project" is the project_id, "test-repo" is the repository_name and "nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf" is the image's digest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public DockerImage withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Tags attached to this image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public String[] tags;
    public DockerImage withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * Output only. The time when the docker image was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public DockerImage withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * Time the image was uploaded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploadTime")
    public String uploadTime;
    public DockerImage withUploadTime(String uploadTime) {
        this.uploadTime = uploadTime;
        return this;
    }
    
    /**
     * Required. URL to access the image. Example: us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri")
    public String uri;
    public DockerImage withUri(String uri) {
        this.uri = uri;
        return this;
    }
    
}
