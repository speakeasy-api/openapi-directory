/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class GetUnsecuredSmeLoansRequest extends SpeakeasyBase {
  /**
   * Used for conditional request, to retrieve data only if modified since a given date
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=If-Modified-Since",
  })
  ifModifiedSince?: string;

  /**
   * Used for conditional request, to retrieve data only if the given Etag value does not match
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=If-None-Match",
  })
  ifNoneMatch?: string;
}

/**
 * A standard error response.
 */
export class GetUnsecuredSmeLoansErrorObject extends SpeakeasyBase {
  /**
   * Further details describing the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * This corresponds to the HTTP status code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: string;

  /**
   * A short title of the type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: string;
}

export enum GetUnsecuredSmeLoans503ErrorObjectDescriptionEnum {
  TheServiceIsTemporarilyUnavailable = "The service is temporarily unavailable.",
}

export enum GetUnsecuredSmeLoans503ErrorObjectStatusEnum {
  FiveHundredAndThree = "503",
}

export enum GetUnsecuredSmeLoans503ErrorObjectTitleEnum {
  ServiceTemporarilyUnavailable = "Service temporarily unavailable",
}

/**
 * The service is temporarily unavailable.
 */
export class GetUnsecuredSmeLoans503ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetUnsecuredSmeLoans503ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetUnsecuredSmeLoans503ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetUnsecuredSmeLoans503ErrorObjectTitleEnum;
}

export enum GetUnsecuredSmeLoans500ErrorObjectDescriptionEnum {
  AnErrorOccurredOnTheServerNoFurtherInformationIsAvailable = "An error occurred on the server. No further information is available.",
}

export enum GetUnsecuredSmeLoans500ErrorObjectStatusEnum {
  FiveHundred = "500",
}

export enum GetUnsecuredSmeLoans500ErrorObjectTitleEnum {
  InternalServerError = "Internal server error",
}

/**
 * An error occurred on the server. No further information is available.
 */
export class GetUnsecuredSmeLoans500ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetUnsecuredSmeLoans500ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetUnsecuredSmeLoans500ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetUnsecuredSmeLoans500ErrorObjectTitleEnum;
}

export enum GetUnsecuredSmeLoans429ErrorObjectDescriptionEnum {
  YouHaveRequestedThisResourceTooOftenSlowDown = "You have requested this resource too often. Slow down.",
}

export enum GetUnsecuredSmeLoans429ErrorObjectStatusEnum {
  FourHundredAndTwentyNine = "429",
}

export enum GetUnsecuredSmeLoans429ErrorObjectTitleEnum {
  TooManyRequests = "Too many requests",
}

/**
 * You have requested this resource too often. Slow down.
 */
export class GetUnsecuredSmeLoans429ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetUnsecuredSmeLoans429ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetUnsecuredSmeLoans429ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetUnsecuredSmeLoans429ErrorObjectTitleEnum;
}

export enum GetUnsecuredSmeLoans408ErrorObjectDescriptionEnum {
  YourClientHasFailedToSubmitARequestAndATimeoutHasOccurred = "Your client has failed to submit a request, and a timeout has occurred.",
}

export enum GetUnsecuredSmeLoans408ErrorObjectStatusEnum {
  FourHundredAndEight = "408",
}

export enum GetUnsecuredSmeLoans408ErrorObjectTitleEnum {
  ClientTimeout = "Client timeout",
}

/**
 * Your client has failed to submit a request, and a timeout has occurred.
 */
export class GetUnsecuredSmeLoans408ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetUnsecuredSmeLoans408ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetUnsecuredSmeLoans408ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetUnsecuredSmeLoans408ErrorObjectTitleEnum;
}

export enum GetUnsecuredSmeLoans400ErrorObjectDescriptionEnum {
  YouHaveSentARequestWhichCouldNotBeUnderstood = "You have sent a request which could not be understood.",
}

export enum GetUnsecuredSmeLoans400ErrorObjectStatusEnum {
  FourHundred = "400",
}

export enum GetUnsecuredSmeLoans400ErrorObjectTitleEnum {
  BadRequest = "Bad request",
}

/**
 * You have sent a request which could not be understood.
 */
export class GetUnsecuredSmeLoans400ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetUnsecuredSmeLoans400ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetUnsecuredSmeLoans400ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetUnsecuredSmeLoans400ErrorObjectTitleEnum;
}

/**
 * Criteria that is required in order to be eligible for the Benefit
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum {
  CashDeposit = "CashDeposit",
  Deposit = "Deposit",
  DirectDebit = "DirectDebit",
  InitialDeposit = "InitialDeposit",
  InternetLogon = "InternetLogon",
  MobileLogon = "MobileLogon",
  RegularDeposit = "RegularDeposit",
}

/**
 * Benefit detail
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItemBenefitDetail extends SpeakeasyBase {
  /**
   * A textual explanation of what the benefit is
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BenefitDescription" })
  benefitDescription?: string;

  /**
   * Unique benefit identifier per organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BenefitID" })
  benefitID?: string;

  /**
   * The name of the benefit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BenefitName" })
  benefitName?: string;

  /**
   * Type that represents the nature of the benefit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BenefitType" })
  benefitType?: string;

  /**
   * The value or values permissible for a specific benefit for an individual product representing a product characteristic
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BenefitValue" })
  benefitValue?: string;

  /**
   * Counter for the criteria (e.g. number of DD)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Counter" })
  counter?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "CriteriaType" })
  criteriaType?: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum[];

  /**
   * Is the benefit part of the default account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DefaultToAccounts" })
  defaultToAccounts?: boolean;

  /**
   * Maximum amount for the criteria
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaximumCriteria" })
  maximumCriteria?: string;

  /**
   * Minimum amount for the criteria
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumCriteria" })
  minimumCriteria?: string;

  /**
   * If the benefit is temporal the end date is when the benefit is no longer applicable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PromotionEndDate" })
  promotionEndDate?: string;

  /**
   * If the benefit is temporal the start date is when the benefit comes into effect
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PromotionStartDate" })
  promotionStartDate?: string;
}

/**
 * Benefit Item
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItem extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItemBenefitDetail,
  })
  @Expose({ name: "BenefitDetail" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItemBenefitDetail
  )
  benefitDetail?: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItemBenefitDetail[];

  /**
   * Date of the change if it refers to future terms
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DateOfChange" })
  dateOfChange?: string;

  /**
   * Describes the length if only a duration is given instead of a date in days
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LengthPromotionalInDays" })
  lengthPromotionalInDays?: number;

  /**
   * Describes the start date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StartPromotionOrFutureTerms" })
  startPromotionOrFutureTerms?: string;

  /**
   * Describes the end date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StopPromotionOrFutureTerms" })
  stopPromotionOrFutureTerms?: string;
}

/**
 * Benefit Subtype Code
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitSubTypeEnum {
  FutureMultipleTerms = "FutureMultipleTerms",
  Promotional = "Promotional",
  Regular = "Regular",
}

/**
 * Benefit Interest Group
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroup extends SpeakeasyBase {
  /**
   * Benefit Item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BenefitItem" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItem
  )
  benefitItem: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitItem;

  /**
   * Benefit Subtype Code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BenefitSubType" })
  benefitSubType?: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroupBenefitSubTypeEnum;
}

/**
 * Benefit
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefits extends SpeakeasyBase {
  /**
   * Describe  one or more benefits if they exist
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Benefit" })
  benefit: boolean;

  @SpeakeasyMetadata({
    elemType:
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroup,
  })
  @Expose({ name: "BenefitGroup" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroup
  )
  benefitGroup?: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefitsBenefitGroup[];
}

export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataCustomerAccessChannelsEnum {
  Branch = "Branch",
  MobileBankingApp = "MobileBankingApp",
  Online = "Online",
  Phone = "Phone",
  Post = "Post",
  PostOffice = "PostOffice",
  Text = "Text",
}

/**
 * Eligibility type
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilityEligibilityTypeEnum {
  AnyBusinessCustomer = "AnyBusinessCustomer",
  BusinessOnly = "BusinessOnly",
  CreditCard = "CreditCard",
  CreditScoring = "CreditScoring",
  EmailAddress = "EmailAddress",
  ExistingCustomers = "ExistingCustomers",
  IdAndV = "IdAndV",
  Mortgage = "Mortgage",
  NoArrearsOnLoan = "NoArrearsOnLoan",
  NoCustomerInArrears = "NoCustomerInArrears",
  NoOverOverdraftThirtyDays = "NoOverOverdraftThirtyDays",
  NoSoleUkAccountOrBankrupt = "NoSoleUkAccountOrBankrupt",
  Ntb = "NTB",
  NTBBusiness = "NTBBusiness",
  SoleStudentAccount = "SoleStudentAccount",
  SoleUkAccount = "SoleUkAccount",
  StudentsOnly = "StudentsOnly",
  TwoMonthsOfCourseStart = "TwoMonthsOfCourseStart",
  UCASFulltimeTwoYears = "UCASFulltimeTwoYears",
}

/**
 * Specific eligibility for marketing
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilityMarketingEligibilityEnum {
  ExistingCustomers = "ExistingCustomers",
  NewCustomersOnly = "NewCustomersOnly",
  SwitchersOnly = "SwitchersOnly",
  StartUp = "StartUp",
}

/**
 * The frequency that the minimum mentioned before is deposited in the account. Yearly is very important for premium accounts
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilityMinimumIncomeFrequencyEnum {
  AcademicTerm = "AcademicTerm",
  HalfYearly = "HalfYearly",
  Monthly = "Monthly",
  Quarterly = "Quarterly",
  Weekly = "Weekly",
  Yearly = "Yearly",
}

/**
 * Indicates a customer must be current resident of a geographic area/country
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilityResidencyRestrictedRegionEnum {
  Uk = "UK",
  Eea = "EEA",
  Eu = "EU",
  Efta = "EFTA",
  GbEng = "GB - ENG",
  GbNir = "GB - NIR",
  GbSct = "GB - SCT",
  GbWls = "GB - WLS",
  Irl = "IRL",
}

/**
 * Minimum Income Source. For certain products a minimum income is required. This can be mandated as to the single income or to a joint income. This field describes this
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilitySingleJointIncomeEnum {
  Joint = "Joint",
  SoleIncome = "SoleIncome",
  SoleOrJoint = "SoleOrJoint",
  Turnover = "Turnover",
}

/**
 * Eligibility
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibility extends SpeakeasyBase {
  /**
   * Indicates a customer's age is part of eligibility criteria
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AgeRestricted" })
  ageRestricted: boolean;

  /**
   * Annual Business Turnover
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AnnualBusinessTurnover" })
  annualBusinessTurnover?: string;

  /**
   * Annual Business Turnover Currency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AnnualBusinessTurnoverCurrency" })
  annualBusinessTurnoverCurrency?: string;

  /**
   * One paragraph detailing the eligibility
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description: string;

  /**
   * Free text description, denotes non standard eligibilities not included in the code list
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EligibilityName" })
  eligibilityName?: string;

  /**
   * Optional additional notes to supplement the eligibility conditions. Only used for very specific conditions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EligibilityNotes" })
  eligibilityNotes?: string;

  /**
   * Eligibility type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EligibilityType" })
  eligibilityType?: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilityEligibilityTypeEnum;

  /**
   * Stipulates any particular definition of income that applies to the income eligibility and/or method by which income must paid into the account (eg Salary DD)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IncomeCondition" })
  incomeCondition?: string;

  /**
   * Indicates if eligibility linked to income
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IncomeTurnoverRelated" })
  incomeTurnoverRelated: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "MarketingEligibility" })
  marketingEligibility?: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilityMarketingEligibilityEnum[];

  /**
   * Maximum number of the same prodcut the customer may hold
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaxNumberOfAccounts" })
  maxNumberOfAccounts?: string;

  /**
   * Maximum age, in years, allowed to hold the account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaximumAge" })
  maximumAge?: number;

  /**
   * Maximum age, in years, to open an account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaximumAgeToOpen" })
  maximumAgeToOpen?: number;

  /**
   * A maximum amount to be deposited at opening
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaximumOpeningAmount" })
  maximumOpeningAmount?: boolean;

  /**
   * Minimum Income Amount required to paid into the account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinIncomeTurnoverPaidIntoAccount" })
  minIncomeTurnoverPaidIntoAccount?: number;

  /**
   * Minimum age, in years, required to hold an account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumAge" })
  minimumAge?: number;

  /**
   * A minimum deposit required to hold this account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumDeposit" })
  minimumDeposit?: boolean;

  /**
   * The frequency that the minimum mentioned before is deposited in the account. Yearly is very important for premium accounts
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumIncomeFrequency" })
  minimumIncomeFrequency?: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilityMinimumIncomeFrequencyEnum;

  /**
   * Minimum income / Turnover required to hold the product
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumIncomeTurnoverAmount" })
  minimumIncomeTurnoverAmount?: string;

  /**
   * Minimum income / Turnover Currency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumIncomeTurnoverCurrency" })
  minimumIncomeTurnoverCurrency?: string;

  /**
   * Minimum Operating Balance
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumOperatingBalance" })
  minimumOperatingBalance?: string;

  /**
   * Minimum Operating Balance currency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumOperatingBalanceCurrency" })
  minimumOperatingBalanceCurrency?: string;

  /**
   * Is there a Minimum Operating Balance?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumOperatingBalanceExists" })
  minimumOperatingBalanceExists?: boolean;

  /**
   * Maximum Amount to be depositing at opening
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OpeningDepositMaximumAmount" })
  openingDepositMaximumAmount?: string;

  /**
   * The currency of the Minimum Amount to be depositing at opening
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OpeningDepositMaximumCurrency" })
  openingDepositMaximumCurrency?: string;

  /**
   * Minimum Amount to be held on account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OpeningDepositMinimum" })
  openingDepositMinimum?: string;

  /**
   * The currency of the Minimum Amount to be depositing at opening
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OpeningDepositMinimumCurrency" })
  openingDepositMinimumCurrency?: string;

  /**
   * Indicates that it is necessary to hold another product with the bank in order to be eligible for this product or feature
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OtherFinancialHoldingRequired" })
  otherFinancialHoldingRequired: boolean;

  /**
   * Describes if a previous bankruptcy / insolvency disqualfies for this account Details in ELI-280
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PreviousBankruptcy" })
  previousBankruptcy: boolean;

  /**
   * Indicates a customer's residency forms part of the eligibility criteria
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ResidencyRestricted" })
  residencyRestricted: boolean;

  /**
   * Indicates a customer must be current resident of a geographic area/country
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ResidencyRestrictedRegion" })
  residencyRestrictedRegion?: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilityResidencyRestrictedRegionEnum;

  /**
   * Minimum Income Source. For certain products a minimum income is required. This can be mandated as to the single income or to a joint income. This field describes this
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SingleJointIncome" })
  singleJointIncome?: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibilitySingleJointIncomeEnum;

  /**
   * Is the product available to operate as a Clubs or Societies account?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ThirdSectorOrganisations" })
  thirdSectorOrganisations: boolean;
}

/**
 * Triggering frequency of the fee
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFeesFeeDetailsFeeDetailFeeSubDetailsFeeFrequencyEnum {
  AcademicTerm = "AcademicTerm",
  AccountClosing = "AccountClosing",
  AccountOpening = "AccountOpening",
  AtTimeOfLoanRepayment = "AtTimeOfLoanRepayment",
  ChargingPeriod = "ChargingPeriod",
  Daily = "Daily",
  EveryFiveBusinessDays = "EveryFiveBusinessDays",
  Item = "Item",
  Monthly = "Monthly",
  OnAccountAnniversary = "OnAccountAnniversary",
  PerHour = "PerHour",
  PerOccurrence = "PerOccurrence",
  PerSheet = "PerSheet",
  PerTransactionAmount = "PerTransactionAmount",
  PerTransactionPercentage = "PerTransactionPercentage",
  Quarterly = "Quarterly",
  SixMonthly = "SixMonthly",
  StartOfLoan = "StartOfLoan",
  StatementMonthly = "StatementMonthly",
  Weekly = "Weekly",
  Yearly = "Yearly",
}

/**
 * Fee Sub Details
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFeesFeeDetailsFeeDetailFeeSubDetails extends SpeakeasyBase {
  /**
   * Fee in GBP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeeAmount" })
  feeAmount?: string;

  /**
   * Triggering frequency of the fee
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeeFrequency" })
  feeFrequency: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFeesFeeDetailsFeeDetailFeeSubDetailsFeeFrequencyEnum;

  /**
   * Higher occurrence / range boundary e.g. For returned cheques this could be 10, which means the first 10 returned cheque fits into this range
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeeHigherTier" })
  feeHigherTier?: number;

  /**
   * Lower occurrence / range boundary e.g. For returned cheques this could be 0, which means the first returned cheque fits into this range
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeeLowerTier" })
  feeLowerTier?: number;

  /**
   * Fee in GBP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeeMax" })
  feeMax?: string;

  /**
   * Fee in GBP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeeMin" })
  feeMin?: string;

  /**
   * % Rate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeeRate" })
  feeRate?: string;

  /**
   * Supplementary information for fees and charges
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeesAndChargesNotes" })
  feesAndChargesNotes?: string;

  /**
   * Indicates that this Fee Rate or Fee Amount is negotiable based on risk or other factor
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Negotiable" })
  negotiable: boolean;

  /**
   * Representative Rate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RepresentativeRate" })
  representativeRate?: string;
}

/**
 * A description of the Fee type
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFeesFeeDetailsFeeDetailFeeTypeEnum {
  Other = "Other",
  ATMDonation = "ATMDonation",
  ATMDeposATMPaidIn = "ATMDeposATMPaidIn",
  ReportCertBalance = "ReportCertBalance",
  ATMAbroadConVisaCredit = "ATMAbroadConVisaCredit",
  ATMAbroadConVisaDebit = "ATMAbroadConVisaDebit",
  ATMCardnetEnvIn = "ATMCardnetEnvIn",
  ATMCashGroupATMCreditCard = "ATMCashGroupATMCreditCard",
  ATMCashNonGroupATMCredittcard = "ATMCashNonGroupATMCredittcard",
  ATMCashGroupATMDebitCard = "ATMCashGroupATMDebitCard",
  ATMCashNonGroupATMDebitcard = "ATMCashNonGroupATMDebitcard",
  ATMConGroupATM = "ATMConGroupATM",
  ATMAbroad = "ATMAbroad",
  ATMForeignCashDebCard = "ATMForeignCashDebCard",
  ATMAbroadGoldVisaDebit = "ATMAbroadGoldVisaDebit",
  ATMSpainCashCard = "ATMSpainCashCard",
  ATMSpainDebitCard = "ATMSpainDebitCard",
  ATMSpainConversionDebitCard = "ATMSpainConversionDebitCard",
  ATMSpainConversionCashCard = "ATMSpainConversionCashCard",
  ATMNonSterlingWithdrawal = "ATMNonSterlingWithdrawal",
  ATMAbroadVisaCredit = "ATMAbroadVisaCredit",
  ATMAbroadVisaDebit = "ATMAbroadVisaDebit",
  ATMAbroadConVisaGoldDebit = "ATMAbroadConVisaGoldDebit",
  ATMWidthdrawCash = "ATMWidthdrawCash",
  BACSOnLineAncilliary = "BACSOnLineAncilliary",
  BACSBatch = "BACSBatch",
  BACSOnLineFile = "BACSOnLineFile",
  BACSFileItem = "BACSFileItem",
  BACSOnLineSetup = "BACSOnLineSetup ",
  BACSItem = "BACSItem",
  BACSItemInterbranch = "BACSItemInterbranch",
  BACSBulkBatch = "BACSBulkBatch",
  BACSOnLineOverlimit = "BACSOnLineOverlimit",
  BACSOnLinePayment = "BACSOnLinePayment",
  BACSRecallItem = "BACSRecallItem",
  BACSOnLineService = "BACSOnLineService",
  BACSBulkInternet = "BACSBulkInternet",
  BACSTELDirDebSmartCard = "BACSTELDirDebSmartCard",
  BACSTELDirDebWebInit = "BACSTELDirDebWebInit",
  BACSTELirDebWebInit = "BACSTELirDebWebInit",
  BACSTELDirDebOverlimit = "BACSTELDirDebOverlimit",
  BACSTELDirDebPayment = "BACSTELDirDebPayment",
  BACSTELDirDebService = "BACSTELDirDebService",
  BACSTELDirDebAncilliary = "BACSTELDirDebAncilliary",
  BACSDirectItemProfile = "BACSDirectItemProfile",
  BACSTELAncilliary = "BACSTELAncilliary",
  BACSTELSmartCard = "BACSTELSmartCard",
  BACSTELFile = "BACSTELFile",
  BACSTELSetup = "BACSTELSetup ",
  BACSTELOverlimit = "BACSTELOverlimit",
  BACSTELPayment = "BACSTELPayment",
  BACSTELService = "BACSTELService",
  CHAPSOutBranch = "CHAPSOutBranch",
  CHAPSCancellation = "CHAPSCancellation",
  CHAPSOutOnlineDepositAcc = "CHAPSOutOnlineDepositAcc",
  CHAPSIn = "CHAPSIn",
  CHAPSOutInterBank = "CHAPSOutInterBank",
  CHAPSInterBank = "CHAPSInterBank",
  CHAPSOutPost = "CHAPSOutPost",
  CHAPSOutInterBranch = "CHAPSOutInterBranch",
  CHAPSOut = "CHAPSOut",
  CHAPSOutOnline = "CHAPSOutOnline",
  CHAPSandForeignPay = "CHAPSandForeignPay",
  CHAPSOutManual = "CHAPSOutManual",
  CardCardReplacement = "CardCardReplacement",
  DraftsCounter = "DraftsCounter",
  DraftsBankers = "DraftsBankers",
  DraftsIntlPayableAbroad = "DraftsIntlPayableAbroad",
  DraftsLostStolen = "DraftsLostStolen",
  CardPersonalisedCard = "CardPersonalisedCard",
  DraftsIntlStoppedCancelled = "DraftsIntlStoppedCancelled",
  EuroChqXLess = "EuroChqXLess",
  EuroChqXPlus = "EuroChqXPlus",
  FPSOutFutureDated = "FPSOutFutureDated",
  FPSOutImmediate = "FPSOutImmediate",
  FPSOut = "FPSOut",
  FPSOutOwn = "FPSOutOwn",
  FPSInBranch = "FPSInBranch",
  FPSUKPayUrgent = "FPSUKPayUrgent",
  LegalArticlesReport = "LegalArticlesReport",
  LegalSealing = "LegalSealing",
  LegalBondAndGuarantee = "LegalBondAndGuarantee",
  LegalCourtOrder = "LegalCourtOrder",
  LegalCoSearch = "LegalCoSearch",
  LegalDepositAssignment = "LegalDepositAssignment",
  LegalGuaranteePrep = "LegalGuaranteePrep",
  LegalLifePolicyPrepCo = "LegalLifePolicyPrepCo",
  LegalLifePolicyPrepPersonal = "LegalLifePolicyPrepPersonal",
  LegalPriorityPariPassu = "LegalPriorityPariPassu",
  LegalSubordinationAgreement = "LegalSubordinationAgreement",
  DirDebDirectDebitAdmin = "DirDebDirectDebitAdmin",
  DirDebDirectDebitCancel = "DirDebDirectDebitCancel",
  IntlPayBIBForeignLimit = "IntlPayBIBForeignLimit",
  IntlPayCreditTransCust = "IntlPayCreditTransCust",
  IntlPayCreditTransNonCust = "IntlPayCreditTransNonCust",
  IntlPayUrgentPaymentForeign = "IntlPayUrgentPaymentForeign",
  IntlPayExpressMoneyMover = "IntlPayExpressMoneyMover",
  IntlPayEEAPayUrgent = "IntlPayEEAPayUrgent",
  IntlPayIrishPayUrgent = "IntlPayIrishPayUrgent",
  IntlPayEEAPay = "IntlPayEEAPay",
  IntlPayForeignIn1CPlus = "IntlPayForeignIn1CPlus",
  IntlPayForeignPaymentInUKAcc = "IntlPayForeignPaymentInUKAcc",
  IntlPayForeignCharge = "IntlPayForeignCharge",
  IntlPayForeignCancellation = "IntlPayForeignCancellation",
  IntlPayForeignStandardEUEuroBIC = "IntlPayForeignStandardEUEuroBIC",
  IntlPayFXFeeRate = "IntlPayFXFeeRate",
  IntlPayForeignInternet = "IntlPayForeignInternet",
  IntlPayForeign = "IntlPayForeign",
  IntlPayForeignInbound = "IntlPayForeignInbound",
  IntlPayFXPaymentOut = "IntlPayFXPaymentOut",
  IntlPayForeignInSub1C = "IntlPayForeignInSub1C",
  IntlPayFXRate = "IntlPayFXRate",
  IntlPayForeignStandardEUEuroNoBIC = "IntlPayForeignStandardEUEuroNoBIC",
  IntlPayFXPaymentOutIR = "IntlPayFXPaymentOutIR",
  IntlPayFXFee = "IntlPayFXFee",
  IntlPayPurchaseNonSterling = "IntlPayPurchaseNonSterling",
  IntlPayPostPaymentForeign = "IntlPayPostPaymentForeign",
  IntlPayPurchaseRateNonSterling = "IntlPayPurchaseRateNonSterling",
  IntlPayPaymentTracing = "IntlPayPaymentTracing",
  IntlPayStandardMoneyMover = "IntlPayStandardMoneyMover",
  IntlPayMt101Transaction = "IntlPayMT101Transaction",
  IntlPayTransNonSterling = "IntlPayTransNonSterling",
  IntlPayTransRateNonSterling = "IntlPayTransRateNonSterling",
  IntlPayForeignUrgentEUEuroBIC = "IntlPayForeignUrgentEUEuroBIC",
  IntlPayForeignUrgentEUEuroNoBIC = "IntlPayForeignUrgentEUEuroNoBIC",
  IntlPayUrgentPaymentGroup = "IntlPayUrgentPaymentGroup",
  IntlPayUrgentPaymentUK = "IntlPayUrgentPaymentUK",
  IntlPayUSAPayUrgent = "IntlPayUSAPayUrgent",
  IntlPayCurrencyPurchase = "IntlPayCurrencyPurchase",
  IntlPayWorldpayPayment = "IntlPayWorldpayPayment",
  IntlPayCurrencyWithdraw = "IntlPayCurrencyWithdraw",
  InvPayBankDetailsWrong = "InvPayBankDetailsWrong",
  InvPayForeignBCNR = "InvPayForeignBCNR",
  InvPayForeignRecall = "InvPayForeignRecall",
  InvGeneralInq = "InvGeneralInq",
  InvOldInstruction = "InvOldInstruction",
  InvPayPaymentRecall = "InvPayPaymentRecall",
  InvPayReturnDebitXVLess = "InvPayReturnDebitXVLess",
  InvPayReturnDebitXVPlus = "InvPayReturnDebitXVPlus",
  InvPayStopPayment = "InvPayStopPayment",
  InvPayStandingOrdUnpaid = "InvPayStandingOrdUnpaid",
  SafeKeepAccess = "SafeKeepAccess",
  SafeKeepDeedMedium = "SafeKeepDeedMedium",
  SafeKeepingEnvelope = "SafeKeepingEnvelope",
  SafeKeepingInspection = "SafeKeepingInspection",
  SafeKeepingLargeItem = "SafeKeepingLargeItem",
  SafeKeepMultipleItems = "SafeKeepMultipleItems",
  SafeKeepingParcel = "SafeKeepingParcel",
  SafeKeepDeedSmall = "SafeKeepDeedSmall",
  SafeKeepOneItem = "SafeKeepOneItem",
  SafeKeepSafeCustody = "SafeKeepSafeCustody",
  LoanArrangementFeePC = "LoanArrangementFeePC",
  LoanArrangement = "LoanArrangement",
  LoanEarlyRepayment = "LoanEarlyRepayment",
  LoanLatePayment = "LoanLatePayment",
  LoanSMEUnsecuredLoan = "LoanSMEUnsecuredLoan",
  LoanTieredArrangement = "LoanTieredArrangement",
  NightSafeNightSafeBankOpen = "NightSafeNightSafeBankOpen",
  NightSafeCreditSub5K = "NightSafeCreditSub5K",
  NightSafeNightSafe = "NightSafeNightSafe",
  NightSafeNightSafePaidIn = "NightSafeNightSafePaidIn",
  OverdraftAnnualReview = "OverdraftAnnualReview",
  OverdraftTempOverdraft = "OverdraftTempOverdraft",
  OverdraftUnauthorisedBorrowing = "OverdraftUnauthorisedBorrowing",
  POPostOfficeCounterCredit = "POPostOfficeCounterCredit",
  POPostOfficeCashCredit = "POPostOfficeCashCredit",
  POPostOfficeCashOut = "POPostOfficeCashOut",
  POPostOfficeWithdrawal = "POPostOfficeWithdrawal",
  ChqBookTheftLossAllStopped = "ChqBookTheftLossAllStopped",
  ChqIssuedCurrencyAcc = "ChqIssuedCurrencyAcc",
  ChqCopy = "ChqCopy",
  ChqDraft = "ChqDraft",
  ChqIn = "ChqIn",
  ChqDraftSterling = "ChqDraftSterling",
  ChqOutIssued = "ChqOutIssued",
  ChqSpecialChqPresentation = "ChqSpecialChqPresentation",
  ChqCounterCheque = "ChqCounterCheque",
  ChqChequeswithStatement = "ChqChequeswithStatement",
  ChqStopped = "ChqStopped",
  ChqTrans = "ChqTrans",
  ChqDraftFX = "ChqDraftFX",
  ChqForeignCourier = "ChqForeignCourier",
  ChqForeignNegTenThou = "ChqForeignNegTenThou",
  ChqForeignNegHundred = "ChqForeignNegHundred",
  ChequeForeignBankDivi = "ChequeForeignBankDivi",
  ChqForeignNegFiftyThou = "ChqForeignNegFiftyThou",
  ChqPensionCheque = "ChqPensionCheque",
  ChequeForeignOtherDivi = "ChequeForeignOtherDivi",
  ChqForeignNegFiveThou = "ChqForeignNegFiveThou",
  ChqForeignNegMax = "ChqForeignNegMax",
  ChqForeignGBPMMDPlus = "ChqForeignGBPMMDPlus",
  ChqGiftCheque = "ChqGiftCheque",
  ChqCounterLodgement = "ChqCounterLodgement",
  ChqCashDropLodgement = "ChqCashDropLodgement",
  ChqChequePhotocopy = "ChqChequePhotocopy",
  ChqPostOfficeCredit = "ChqPostOfficeCredit",
  ChqPostOfficeChequeCollected = "ChqPostOfficeChequeCollected",
  ChqChequeRetrieval = "ChqChequeRetrieval",
  ChqReconcilliationPerTrans = "ChqReconcilliationPerTrans",
  ChqSpecialPresentationCount = "ChqSpecialPresentationCount",
  ChqSpecialPresentationPTT = "ChqSpecialPresentationPTT",
  ChqUnpaidCharge = "ChqUnpaidCharge",
  ChqUnpaidTransIn = "ChqUnpaidTransIn",
  ChqUnpaidTransOut = "ChqUnpaidTransOut",
  ChqUnpaidCheque = "ChqUnpaidCheque",
  ReportAuditLetter = "ReportAuditLetter",
  ReportFAXAdviceAdditional = "ReportFAXAdviceAdditional",
  ReportTelAdviceAdditional = "ReportTelAdviceAdditional",
  ReportCreditHistory = "ReportCreditHistory",
  ReportCertInterestDuplicate = "ReportCertInterestDuplicate",
  ReportCertInterest = "ReportCertInterest",
  ReportCreditHistoryAdditionalInYear = "ReportCreditHistoryAdditionalInYear",
  ReportForeignStatusEnqElec = "ReportForeignStatusEnqElec",
  ReportForeignStatusEnq = "ReportForeignStatusEnq",
  ReportCashBackorInterestAnal = "ReportCashBackorInterestAnal",
  ReportStatementChqDaily = "ReportStatementChqDaily",
  ReportStatementChqFortnightly = "ReportStatementChqFortnightly",
  ReportStatementChqMonthly = "ReportStatementChqMonthly",
  ReportStatementChqWeekly = "ReportStatementChqWeekly",
  ReportStatementAndDiviChq = "ReportStatementAndDiviChq",
  ReportReference = "ReportReference",
  ReportReferralItem = "ReportReferralItem",
  ReportStatementByATM = "ReportStatementByATM",
  ReportStatementByBranch = "ReportStatementByBranch",
  ReportStatementCopyRegular = "ReportStatementCopyRegular",
  ReportStatusEnquiry = "ReportStatusEnquiry",
  ReportStatementFrequent = "ReportStatementFrequent",
  ReportStatementMonthly = "ReportStatementMonthly",
  ReportStatementCopy1 = "ReportStatementCopy1",
  ReportStatementToBranch = "ReportStatementToBranch",
  ReportSMSTextMiniStatementorAlert = "ReportSMSTextMiniStatementorAlert",
  ReportStatementFortnightly = "ReportStatementFortnightly",
  ReportSMSTextMiniStatementWoM = "ReportSMSTextMiniStatementWoM",
  ReportSMSTextAlertBalance = "ReportSMSTextAlertBalance",
  ReportSMSTextAlert = "ReportSMSTextAlert",
  ReportTaxCert = "ReportTaxCert",
  ReportWeeklyStatement = "ReportWeeklyStatement",
  ReportTextMessageBanking = "ReportTextMessageBanking",
  SEPACancellation = "SEPACancellation",
  SEPABranch = "SEPABranch",
  SEPACredit = "SEPACredit",
  SEPADirectDebit = "SEPADirectDebit",
  SEPAIn = "SEPAIn",
  SEPAEuro = "SEPAEuro",
  SEPAOut = "SEPAOut",
  SEPAUnpaid = "SEPAUnpaid",
  SEPAWinbitsAnnualService = "SEPAWinbitsAnnual Service",
  SEPAWinbitsTransaction = "SEPAWinbitsTransaction",
  TransBillPaymentBranch = "TransBillPaymentBranch",
  TransBillCollect = "TransBillCollect",
  TransTelephoneBillPayment = "TransTelephoneBillPayment",
  TransBankPayment = "TransBankPayment",
  TransBillPaymentTelephone = "TransBillPaymentTelephone",
  TransCorrespondentBankFee = "TransCorrespondentBankFee",
  TransCreditTransferUKDifferent = "TransCreditTransferUKDifferent",
  TransCreditTransferUKSame = "TransCreditTransferUKSame",
  TransCredit = "TransCredit",
  TransCreditTransfer = "TransCreditTransfer",
  TransBranchCredit = "TransBranchCredit",
  TransDebit = "TransDebit",
  TransDebCardDeb = "TransDebCardDeb",
  TransUKDirDeb = "TransUKDirDeb",
  TransManualDeb = "TransManualDeb",
  TransBuyForeignWithGBP = "TransBuyForeignWithGBP",
  TransGoodValueReq = "TransGoodValueReq",
  TransSWIFTOutUKForeign = "TransSWIFTOutUKForeign",
  TransInconpleteInstruction = "TransInconpleteInstruction",
  TransManualEntries = "TransManualEntries",
  TransManualTrans = "TransManualTrans",
  TransNonSterling = "TransNonSterling",
  TransPOSSaleForeign = "TransPOSSaleForeign",
  TransPriPaymentPost = "TransPriPaymentPost",
  TransPOSSaleUK = "TransPOSSaleUK",
  TransReturnPayment = "TransReturnPayment",
  TransReconciliationPerTrans = "TransReconciliationPerTrans",
  TransStandingOrdAdmin = "TransStandingOrdAdmin",
  TransStandingOrd = "TransStandingOrd",
  TransStandingOrdManPay = "TransStandingOrdManPay",
  TransTravellersChqOtherBank = "TransTravellersChqOtherBank",
  TransTelBusiPriPaymentForeignToUKAcc = "TransTelBusiPriPaymentForeignToUKAcc",
  TransTeleItem = "TransTeleItem",
  TransTelBusiPriPaymentToGrpAcc = "TransTelBusiPriPaymentToGrpAcc",
  TransTravellersChqRate = "TransTravellersChqRate",
  TransTransferExGroup = "TransTransferExGroup",
  TransUnauthorisedPaidTrans = "TransUnauthorisedPaidTrans",
  TransUrgentPaymentPostal = "TransUrgentPaymentPostal",
  TransUnpaidTrans = "TransUnpaidTrans",
  TransTelBusiPriPaymentToNonGrpAcc = "TransTelBusiPriPaymentToNonGrpAcc",
  TransSWIFTOutNonEEASterling = "TransSWIFTOutNonEEASterling",
  AutoAutoCredit = "AutoAutoCredit",
  AutoAutomatedEntries = "AutoAutomatedEntries",
  AutoAutoCreditPhoneInet = "AutoAutoCreditPhoneInet",
  AutoAutomatedTrans = "AutoAutomatedTrans",
  AutoDebitCardCommercial = "AutoDebitCardCommercial",
  AutoFPSAutoCredit = "AutoFPSAutoCredit",
  VisaConvertAbroadForeign = "VisaConvertAbroadForeign",
  VisaBureauDeChange = "VisaBureauDeChange",
  VisaTravellersChqorCurrency = "VisaTravellersChqorCurrency",
  OnlineInternetBillPayment = "OnlineInternetBillPayment",
  OnlineBusinessOnlineEuroPayment = "OnlineBusinessOnlineEuroPayment",
  OnlineBusinessOnlineUrgentEuroPayment = "OnlineBusinessOnlineUrgentEuroPayment",
  OnlineBusinessOnlineForeignPayment = "OnlineBusinessOnlineForeignPayment",
  OnlineInterbankTransfer = "OnlineInterbankTransfer",
  OnlineInterbankPerTransfer = "OnlineInterbankPerTransfer",
  OnlineInterbranchTransfer = "OnlineInterbranchTransfer",
  OnlineInterbranchPerTransfer = "OnlineInterbranchPerTransfer",
  OnlineSubscriptionMonthly = "OnlineSubscriptionMonthly",
  OnlineBankingPayment = "OnlineBankingPayment",
  OnlineBankingSubscription = "OnlineBankingSubscription",
  OnlinePOSSale = "OnlinePOSSale",
  OnlinePersonalCustAncillarys = "OnlinePersonalCustAncillarys",
  OnlinePersonalCustService = "OnlinePersonalCustService",
  OnlinePersonalCustOverlimits = "OnlinePersonalCustOverlimits",
  OnlineReplacementCardReader = "OnlineReplacementCardReader",
  OnlinePersonalCustSetUp = "OnlinePersonalCustSetUp",
  OnlinePersonalCustTransaction = "OnlinePersonalCustTransaction",
  OnlinePaymentinGBPtoUK = "OnlinePaymentinGBPtoUK",
  OnlineUrgentPayment = "OnlineUrgentPayment",
  OnlinePaymentinUSDtoUS = "OnlinePaymentinUSDtoUS",
  OnlineBulkDirectDebSterling = "OnlineBulkDirectDebSterling",
  ForeignChqSent = "ForeignChqSent",
  ForeignChqSelf = "ForeignChqSelf",
  ForeignChqEncashment = "ForeignChqEncashment",
  ForeignFXInwardsCust = "ForeignFXInwardsCust",
  ForeignFXTransfersROI = "ForeignFXTransfersROI",
  ForeignFXForwardTrans = "ForeignFXForwardTrans",
  ForeignFXTransfersBOI = "ForeignFXTransfersBOI",
  ForeignExMaintenance = "ForeignExMaintenance",
  ForeignFXInwardsNonCust = "ForeignFXInwardsNonCust",
  ForeignFXOutwards = "ForeignFXOutwards",
  ForeignPurchase = "ForeignPurchase",
  ForeignStatusRep = "ForeignStatusRep",
  ForeignChqDraft = "ForeignChqDraft",
  ForeignChqCLess = "ForeignChqCLess",
  ForeignChqMLess = "ForeignChqMLess",
  ForeignChqOther = "ForeignChqOther",
  ForeignChqMPlus = "ForeignChqMPlus",
  ForeignChqCCC = "ForeignChqCCC",
  ServiceCAccountFee = "ServiceCAccountFee",
  ServiceCAccountFeeMonthly = "ServiceCAccountFeeMonthly",
  ServiceCAccountFeeQuarterly = "ServiceCAccountFeeQuarterly",
  ServiceCBalanceHandling = "ServiceCBalanceHandling",
  ServiceCFixedTariff = "ServiceCFixedTariff",
  ServiceCBusiDepAccBreakage = "ServiceCBusiDepAccBreakage",
  ServiceCMonitorDaily = "ServiceCMonitorDaily",
  ServiceCManagementFee = "ServiceCManagementFee",
  ServiceCMinimumMonthlyFee = "ServiceCMinimumMonthlyFee",
  ServiceCMonitorMonthly = "ServiceCMonitorMonthly",
  ServiceCMonitorWeekly = "ServiceCMonitorWeekly",
  ServiceCSecurityFee = "ServiceCSecurityFee",
  ServiceCmt940AccountFirst = "ServiceCMT940AccountFirst",
  ServiceCmt940AccountSubsequent = "ServiceCMT940AccountSubsequent",
  ServiceCOther = "ServiceCOther",
  CounterCoinHandling = "CounterCoinHandling",
  CounterCashIn = "CounterCashIn",
  CounterCashInNotUs = "CounterCashInNotUs",
  CounterCashOut = "CounterCashOut",
  CounterCashX = "CounterCashX",
  CounterForeignCashMax = "CounterForeignCashMax",
  CounterForeignNoteHandling = "CounterForeignNoteHandling",
  CounterForeignCashOut = "CounterForeignCashOut",
  CounterCashFeeRate = "CounterCashFeeRate",
  CounterForeignCashOutTx = "CounterForeignCashOutTx",
  CounterCounterLodgement = "CounterCounterLodgement",
  CounterCashDropLodgement = "CounterCashDropLodgement",
  CounterNotesLodged = "CounterNotesLodged",
  CounterNotesOut = "CounterNotesOut",
  CounterCashInOwn = "CounterCashInOwn",
  CounterPaidTrans = "CounterPaidTrans",
  CounterCashFeePercent = "CounterCashFeePercent",
}

/**
 * Fee Detail
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFeesFeeDetailsFeeDetail extends SpeakeasyBase {
  /**
   * Date of the change if it refers to future terms
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DateOfChange" })
  dateOfChange?: string;

  /**
   * Fee Sub Details
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeeSubDetails" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFeesFeeDetailsFeeDetailFeeSubDetails
  )
  feeSubDetails: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFeesFeeDetailsFeeDetailFeeSubDetails;

  /**
   * A description of the Fee type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeeType" })
  feeType: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFeesFeeDetailsFeeDetailFeeTypeEnum;

  /**
   * Describes the length if only a duration is given instead of a date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LengthPromotionalInDays" })
  lengthPromotionalInDays?: number;

  /**
   * Describe other fee type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Other" })
  other?: string;

  /**
   * Describes the start date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StartPromotionOrFutureTerms" })
  startPromotionOrFutureTerms?: string;

  /**
   * Describes the end date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StopPromotionOrFutureTerms" })
  stopPromotionOrFutureTerms?: string;
}

/**
 * Fee Sub Type code
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFeesFeeDetailsFeeSubTypeEnum {
  FutureMultipleTerms = "FutureMultipleTerms",
  Promotional = "Promotional",
  Regular = "Regular",
}

/**
 * Fee Details
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFeesFeeDetails extends SpeakeasyBase {
  /**
   * Fee Detail
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeeDetail" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFeesFeeDetailsFeeDetail
  )
  feeDetail: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFeesFeeDetailsFeeDetail;

  /**
   * Fee Sub Type code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeeSubType" })
  feeSubType: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFeesFeeDetailsFeeSubTypeEnum;
}

/**
 * Fees
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFees extends SpeakeasyBase {
  /**
   * Date of the change if it refers to future terms
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DateOfChange" })
  dateOfChange?: string;

  @SpeakeasyMetadata({
    elemType:
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFeesFeeDetails,
  })
  @Expose({ name: "FeeDetails" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFeesFeeDetails
  )
  feeDetails: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFeesFeeDetails[];

  /**
   * Higher occurrence / range boundary e.g. For returned cheques this could be 10, which means the first 10 returned cheque fits into this range
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeeHigherTier" })
  feeHigherTier?: number;

  /**
   * Lower occurrence / range boundary e.g.. For returned cheques this could be 0, which means the first returned cheque fits into this range
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeeLowerTier" })
  feeLowerTier?: number;

  /**
   * Describes the length if only a duration is given instead of a date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LengthPromotionalInDays" })
  lengthPromotionalInDays?: number;

  /**
   * Describes the start date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StartPromotionOrFutureTerms" })
  startPromotionOrFutureTerms?: string;

  /**
   * Describes the end date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StopPromotionOrFutureTerms" })
  stopPromotionOrFutureTerms?: string;
}

/**
 * Describes if the offering is promotional or a description of a future state.
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesProductStateEnum {
  FutureMultipleTerms = "FutureMultipleTerms",
  Promotional = "Promotional",
  Regular = "Regular",
}

/**
 * Fees And Charges
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndCharges extends SpeakeasyBase {
  /**
   * Fees
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Fees" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFees
  )
  fees: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesFees;

  /**
   * Describes if the offering is promotional or a description of a future state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProductState" })
  productState: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndChargesProductStateEnum;
}

/**
 * Loan Length Increments
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItemLoanPricingLoanLengthIncrementEnum {
  OneYear = "1 year",
  TwoYears = "2 years",
  ThreeYears = "3 years",
  FourYears = "4 years",
  FiveYears = "5 years",
}

/**
 * Rate Comparison Type
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItemLoanPricingRateComparisonTypeEnum {
  Apr = "APR",
  Aer = "AER",
  Gross = "Gross",
  Net = "Net",
  RepApr = "RepApr",
}

/**
 * Repayment Frequency Code
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItemLoanPricingRepaymentFrequencyEnum {
  Daily = "Daily",
  Flexible = "Flexible",
  Fortnightly = "Fortnightly",
  HalfYearly = "HalfYearly",
  Monthly = "Monthly",
  Quarterly = "Quarterly",
  Weekly = "Weekly",
  Yearly = "Yearly",
}

/**
 * Identifier for tier only where it has been supplied under Part 8 (article 32 or the CMA order), value reflects upper tier value
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItemLoanPricingSizeIncrementEnum {
  Pound5000 = "£5000",
  Pound10000 = "£10000",
  Pound15000 = "£15000",
  Pound20000 = "£20000",
  Pound25000 = "£25000",
  Other = "Other",
  TierMaximum = "TierMaximum",
  TierMinimum = "TierMinimum",
}

/**
 * Loan Pricing
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItemLoanPricing extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "IndicativeRate" })
  indicativeRate: string;

  /**
   * Loan Length Increments
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LoanLengthIncrement" })
  loanLengthIncrement: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItemLoanPricingLoanLengthIncrementEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "LoanLengthIncrementLower" })
  loanLengthIncrementLower: number;

  @SpeakeasyMetadata()
  @Expose({ name: "LoanLengthIncrementUpper" })
  loanLengthIncrementUpper: number;

  /**
   * Monetary amount without currency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LoanSizeBandLower" })
  loanSizeBandLower: string;

  /**
   * Monetary amount without currency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LoanSizeBandUpper" })
  loanSizeBandUpper: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Negotiable" })
  negotiable: boolean;

  /**
   * Rate Comparison Type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RateComparisonType" })
  rateComparisonType?: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItemLoanPricingRateComparisonTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "RepaymentFrequency" })
  repaymentFrequency: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItemLoanPricingRepaymentFrequencyEnum[];

  /**
   * Identifier for tier only where it has been supplied under Part 8 (article 32 or the CMA order), value reflects upper tier value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SizeIncrement" })
  sizeIncrement: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItemLoanPricingSizeIncrementEnum;
}

/**
 * Describes if the offering is promotional or a description of a future state.
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItemProductStateEnum {
  FutureMultipleTerms = "FutureMultipleTerms",
  Promotional = "Promotional",
  Regular = "Regular",
}

/**
 * Loan Item
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItem extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CCARegulatedEntity" })
  ccaRegulatedEntity: boolean;

  /**
   * Date of the change if it refers to future terms
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DateOfChange" })
  dateOfChange?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "IsALowInterestRepaymentStartPossible" })
  isALowInterestRepaymentStartPossible: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "IsThisAnInterestOnlyLoan" })
  isThisAnInterestOnlyLoan: boolean;

  /**
   * Describes the length if only a duration is given instead of a date in days
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LengthPromotionalInDays" })
  lengthPromotionalInDays?: number;

  @SpeakeasyMetadata({
    elemType:
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItemLoanPricing,
  })
  @Expose({ name: "LoanPricing" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItemLoanPricing
  )
  loanPricing?: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItemLoanPricing[];

  /**
   * Describes if the offering is promotional or a description of a future state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProductState" })
  productState: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItemProductStateEnum;

  /**
   * Describes the start date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StartPromotionOrFutureTerms" })
  startPromotionOrFutureTerms?: string;

  /**
   * Describes the end date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StopPromotionOrFutureTerms" })
  stopPromotionOrFutureTerms?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "WillTheLoanBePaidInTrancheDrawdowns" })
  willTheLoanBePaidInTrancheDrawdowns: boolean;
}

/**
 * The Intellectual Property Office (IPO) is the official body responsible for intellectual property (IP) rights including patents, designs, trademarks and copyright. (Code: UK or EU only)
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationBrandTrademarkIPOCodeEnum {
  Uk = "UK",
  Eu = "EU",
}

/**
 * Brand
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationBrand extends SpeakeasyBase {
  /**
   * The trademark number that has been registered with the Intellectual Property Office. Note: The 2 letter IPO prefix should be omitted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TrademarkID" })
  trademarkID: string;

  /**
   * The Intellectual Property Office (IPO) is the official body responsible for intellectual property (IP) rights including patents, designs, trademarks and copyright. (Code: UK or EU only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TrademarkIPOCode" })
  trademarkIPOCode: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationBrandTrademarkIPOCodeEnum;
}

/**
 * Organisation Name
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationParentOrganisationOrganisationName extends SpeakeasyBase {
  /**
   * Legal Name of the organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LegalName" })
  legalName: string;
}

/**
 * Parent organisation
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationParentOrganisation extends SpeakeasyBase {
  /**
   * The BIC from the organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BIC" })
  bic?: string;

  /**
   * The LEI ID of the organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LEI" })
  lei?: string;

  /**
   * Organisation Name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OrganisationName" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationParentOrganisationOrganisationName
  )
  organisationName: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationParentOrganisationOrganisationName;
}

/**
 * Organisation
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisation extends SpeakeasyBase {
  /**
   * Brand
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Brand" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationBrand
  )
  brand: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationBrand;

  /**
   * Parent organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ParentOrganisation" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationParentOrganisation
  )
  parentOrganisation: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisationParentOrganisation;
}

/**
 * Marketing or industry segment that the product is applicable for. Gives the sector or segment that the Loan is designed for
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataProductSegmentEnum {
  AgricultureSector = "AgricultureSector",
  AllSegmentsCorporate = "AllSegmentsCorporate",
  Corporate = "Corporate",
  FixedGroup = "FixedGroup",
  FlexibleBusinessLoan = "FlexibleBusinessLoan",
  GovernmentScheme = "GovernmentScheme",
  NewCustomersOnly = "NewCustomersOnly",
  SmallLoan = "SmallLoan",
  SpecialisedSector = "SpecialisedSector",
  SwitchersOnly = "SwitchersOnly",
}

/**
 * Descriptive code for the product category
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataProductTypeNameEnum {
  FlexibleBusinessLoan = "FlexibleBusinessLoan",
  SmallBusinessLoan = "SmallBusinessLoan",
  SmeUnsecuredLoan = "SmeUnsecuredLoan",
}

/**
 * SME Loan
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonData extends SpeakeasyBase {
  /**
   * Arrears treatment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ArrearsTreatment" })
  arrearsTreatment?: string;

  /**
   * Benefit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Benefits" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefits
  )
  benefits: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataBenefits;

  /**
   * Currency of the Account. Default to GBP at present
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Currency" })
  currency: string[];

  /**
   * Ways to interact with the bank
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CustomerAccessChannels" })
  customerAccessChannels: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataCustomerAccessChannelsEnum[];

  /**
   * Eligibility
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Eligibility" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibility
  )
  eligibility: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataEligibility;

  @SpeakeasyMetadata({
    elemType:
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndCharges,
  })
  @Expose({ name: "FeesAndCharges" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndCharges
  )
  feesAndCharges: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataFeesAndCharges[];

  @SpeakeasyMetadata({
    elemType:
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItem,
  })
  @Expose({ name: "LoanItem" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItem
  )
  loanItem: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataLoanItem[];

  /**
   * Maximum loan amount
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaximumLoanAmount" })
  maximumLoanAmount: string;

  /**
   * Maximum loan term (Days)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaximumLoanTerm" })
  maximumLoanTerm: number;

  /**
   * Minimum loan amount
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumLoanAmount" })
  minimumLoanAmount: string;

  /**
   * Minimum term (Days)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumLoanTerm" })
  minimumLoanTerm: number;

  /**
   * Organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Organisation" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisation
  )
  organisation: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataOrganisation;

  /**
   * Indicates whether a repayment holiday is allowed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaymentHoliday" })
  paymentHoliday: boolean;

  /**
   * Description of the product provided by the parent Organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProductDescription" })
  productDescription: string;

  /**
   * Identifier within the parent organisation for the product. Must be unique in the organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProductIdentifier" })
  productIdentifier: string;

  /**
   * The short product or marketing name assigned by the parent organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProductName" })
  productName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ProductSegment" })
  productSegment: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataProductSegmentEnum[];

  /**
   * Descriptive code for the product category
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ProductTypeName" })
  productTypeName: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonDataProductTypeNameEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "ProductURL" })
  productURL: string[];

  /**
   * URL provided by the parent organisation which redirects to the T&Cs
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TsandCs" })
  tsandCs: string[];
}

export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataAgreementEnum {
  UseOfTheAPIsAndAnyRelatedDataWillBeSubjectToTheTermsOfTheOpenLicenceAndSubjectToTermsAndConditions = "Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions",
}

/**
 * Open Banking License
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataLicenseEnum {
  HttpsWwwOpenbankingOrgUkOpenLicence = "https://www.openbanking.org.uk/open-licence",
}

/**
 * Open Banking Terms of Use
 */
export enum GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataTermsOfUseEnum {
  HttpsWwwOpenbankingOrgUkTerms = "https://www.openbanking.org.uk/terms",
}

export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Agreement" })
  agreement: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataAgreementEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "LastUpdated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdated: Date;

  /**
   * Open Banking License
   */
  @SpeakeasyMetadata()
  @Expose({ name: "License" })
  license: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataLicenseEnum;

  /**
   * Open Banking Terms of Use
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TermsOfUse" })
  termsOfUse: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataTermsOfUseEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "TotalResults" })
  totalResults: number;
}

/**
 * Successful response with a list of `Unsecured SME Lending` data
 */
export class GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJson extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonData,
  })
  @Expose({ name: "data" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonData
  )
  data: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonData[];

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(
    () =>
      GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaData
  )
  meta: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaData;
}

export class GetUnsecuredSmeLoansResponse extends SpeakeasyBase {
  /**
   * You have sent a request which could not be understood.
   */
  @SpeakeasyMetadata()
  fourHundredErrorObject?: GetUnsecuredSmeLoans400ErrorObject;

  /**
   * Your client has failed to submit a request, and a timeout has occurred.
   */
  @SpeakeasyMetadata()
  fourHundredAndEightErrorObject?: GetUnsecuredSmeLoans408ErrorObject;

  /**
   * You have requested this resource too often. Slow down.
   */
  @SpeakeasyMetadata()
  fourHundredAndTwentyNineErrorObject?: GetUnsecuredSmeLoans429ErrorObject;

  /**
   * An error occurred on the server. No further information is available.
   */
  @SpeakeasyMetadata()
  fiveHundredErrorObject?: GetUnsecuredSmeLoans500ErrorObject;

  /**
   * The service is temporarily unavailable.
   */
  @SpeakeasyMetadata()
  fiveHundredAndThreeErrorObject?: GetUnsecuredSmeLoans503ErrorObject;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * A standard error response.
   */
  @SpeakeasyMetadata()
  errorObject?: GetUnsecuredSmeLoansErrorObject;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful response with a list of `Unsecured SME Lending` data
   */
  @SpeakeasyMetadata()
  getUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJsonObject?: GetUnsecuredSmeLoans200ApplicationPrsOpenbankingOpendataV13PlusJson;
}
