// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritableFrontPortTypeEnum string

const (
	WritableFrontPortTypeEnumEightp8c              WritableFrontPortTypeEnum = "8p8c"
	WritableFrontPortTypeEnumOneHundredAndTenPunch WritableFrontPortTypeEnum = "110-punch"
	WritableFrontPortTypeEnumBnc                   WritableFrontPortTypeEnum = "bnc"
	WritableFrontPortTypeEnumMrj21                 WritableFrontPortTypeEnum = "mrj21"
	WritableFrontPortTypeEnumFc                    WritableFrontPortTypeEnum = "fc"
	WritableFrontPortTypeEnumLc                    WritableFrontPortTypeEnum = "lc"
	WritableFrontPortTypeEnumLcApc                 WritableFrontPortTypeEnum = "lc-apc"
	WritableFrontPortTypeEnumLsh                   WritableFrontPortTypeEnum = "lsh"
	WritableFrontPortTypeEnumLshApc                WritableFrontPortTypeEnum = "lsh-apc"
	WritableFrontPortTypeEnumMpo                   WritableFrontPortTypeEnum = "mpo"
	WritableFrontPortTypeEnumMtrj                  WritableFrontPortTypeEnum = "mtrj"
	WritableFrontPortTypeEnumSc                    WritableFrontPortTypeEnum = "sc"
	WritableFrontPortTypeEnumScApc                 WritableFrontPortTypeEnum = "sc-apc"
	WritableFrontPortTypeEnumSt                    WritableFrontPortTypeEnum = "st"
)

func (e *WritableFrontPortTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "8p8c":
		fallthrough
	case "110-punch":
		fallthrough
	case "bnc":
		fallthrough
	case "mrj21":
		fallthrough
	case "fc":
		fallthrough
	case "lc":
		fallthrough
	case "lc-apc":
		fallthrough
	case "lsh":
		fallthrough
	case "lsh-apc":
		fallthrough
	case "mpo":
		fallthrough
	case "mtrj":
		fallthrough
	case "sc":
		fallthrough
	case "sc-apc":
		fallthrough
	case "st":
		*e = WritableFrontPortTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableFrontPortTypeEnum: %s", s)
	}
}

type WritableFrontPortInput struct {
	Cable            *NestedCableInput         `json:"cable,omitempty"`
	Description      *string                   `json:"description,omitempty"`
	Device           int64                     `json:"device"`
	Name             string                    `json:"name"`
	RearPort         int64                     `json:"rear_port"`
	RearPortPosition *int64                    `json:"rear_port_position,omitempty"`
	Tags             []string                  `json:"tags,omitempty"`
	Type             WritableFrontPortTypeEnum `json:"type"`
}
