"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Files:
    r"""Operations available to regular developers"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_file_association(self, request: operations.CreateFileAssociationRequest, security: operations.CreateFileAssociationSecurity) -> operations.CreateFileAssociationResponse:
        r"""Creates a new file association
        By passing in the appropriate options, you can create a new folder
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateFileAssociationRequest, base_url, '/Files/{FileId}/Associations', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "association", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFileAssociationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Association])
                res.association = out
        elif http_res.status_code == 400:
            pass

        return res

    def create_folder(self, request: operations.CreateFolderRequest, security: operations.CreateFolderSecurity) -> operations.CreateFolderResponse:
        r"""Creates a new folder
        By passing in the appropriate properties, you can create a new folder
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Folders'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "folder", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFolderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Folder])
                res.folder = out
        elif http_res.status_code == 400:
            pass

        return res

    def delete_file(self, request: operations.DeleteFileRequest, security: operations.DeleteFileSecurity) -> operations.DeleteFileResponse:
        r"""Deletes a specific file
        Delete a specific file
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteFileRequest, base_url, '/Files/{FileId}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_file_association(self, request: operations.DeleteFileAssociationRequest, security: operations.DeleteFileAssociationSecurity) -> operations.DeleteFileAssociationResponse:
        r"""Deletes an existing file association
        By passing in the appropriate options, you can create a new folder
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteFileAssociationRequest, base_url, '/Files/{FileId}/Associations/{ObjectId}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFileAssociationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_folder(self, request: operations.DeleteFolderRequest, security: operations.DeleteFolderSecurity) -> operations.DeleteFolderResponse:
        r"""Deletes a folder
        By passing in the appropriate ID, you can delete a folder
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteFolderRequest, base_url, '/Folders/{FolderId}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFolderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_associations_by_object(self, request: operations.GetAssociationsByObjectRequest, security: operations.GetAssociationsByObjectSecurity) -> operations.GetAssociationsByObjectResponse:
        r"""Retrieves an association object using a unique object ID
        By passing in the appropriate options,
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAssociationsByObjectRequest, base_url, '/Associations/{ObjectId}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAssociationsByObjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Association]])
                res.associations = out

        return res

    def get_file(self, request: operations.GetFileRequest, security: operations.GetFileSecurity) -> operations.GetFileResponse:
        r"""Retrieves a file by a unique file ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFileRequest, base_url, '/Files/{FileId}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FileObject])
                res.file_object = out

        return res

    def get_file_associations(self, request: operations.GetFileAssociationsRequest, security: operations.GetFileAssociationsSecurity) -> operations.GetFileAssociationsResponse:
        r"""Retrieves a specific file associations
        By passing in the appropriate options,
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFileAssociationsRequest, base_url, '/Files/{FileId}/Associations', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFileAssociationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Association]])
                res.associations = out

        return res

    def get_file_content(self, request: operations.GetFileContentRequest, security: operations.GetFileContentSecurity) -> operations.GetFileContentResponse:
        r"""Retrieves the content of a specific file
        By passing in the appropriate options, retrieve data for specific file
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFileContentRequest, base_url, '/Files/{FileId}/Content', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFileContentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.get_file_content_200_application_octet_stream_binary_string = http_res.content

        return res

    def get_files(self, request: operations.GetFilesRequest, security: operations.GetFilesSecurity) -> operations.GetFilesResponse:
        r"""Retrieves files"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Files'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetFilesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Files])
                res.files = out

        return res

    def get_folder(self, request: operations.GetFolderRequest, security: operations.GetFolderSecurity) -> operations.GetFolderResponse:
        r"""Retrieves specific folder by using a unique folder ID
        By passing in the appropriate ID, you can search for specific folder
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFolderRequest, base_url, '/Folders/{FolderId}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFolderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Folder])
                res.folder = out

        return res

    def get_folders(self, request: operations.GetFoldersRequest, security: operations.GetFoldersSecurity) -> operations.GetFoldersResponse:
        r"""Retrieves folders
        By passing in the appropriate options, you can search for available folders
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Folders'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetFoldersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFoldersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Folder]])
                res.folders = out

        return res

    def get_inbox(self, request: operations.GetInboxRequest, security: operations.GetInboxSecurity) -> operations.GetInboxResponse:
        r"""Retrieves inbox folder
        Search for the user inbox
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Inbox'
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInboxResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Folder])
                res.folder = out

        return res

    def update_file(self, request: operations.UpdateFileRequest, security: operations.UpdateFileSecurity) -> operations.UpdateFileResponse:
        r"""Update a file
        Updates file properties of a single file
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateFileRequest, base_url, '/Files/{FileId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "file_object", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FileObject])
                res.file_object = out
        elif http_res.status_code == 400:
            pass

        return res

    def update_folder(self, request: operations.UpdateFolderRequest, security: operations.UpdateFolderSecurity) -> operations.UpdateFolderResponse:
        r"""Updates an existing folder
        By passing in the appropriate ID and properties, you can update a folder
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateFolderRequest, base_url, '/Folders/{FolderId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "folder", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateFolderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Folder])
                res.folder = out
        elif http_res.status_code == 400:
            pass

        return res

    def upload_file(self, request: operations.UploadFileRequest, security: operations.UploadFileSecurity) -> operations.UploadFileResponse:
        r"""Uploads a File"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Files'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.UploadFileRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FileObject])
                res.file_object = out
        elif http_res.status_code == 400:
            pass

        return res

    