// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TaxReportingClassificationBusinessTypeEnum - The organization's business type.
//
// Possible values: **other**, **listedPublicCompany**, **subsidiaryOfListedPublicCompany**, **governmentalOrganization**, **internationalOrganization**, **financialInstitution**.
type TaxReportingClassificationBusinessTypeEnum string

const (
	TaxReportingClassificationBusinessTypeEnumOther                           TaxReportingClassificationBusinessTypeEnum = "other"
	TaxReportingClassificationBusinessTypeEnumListedPublicCompany             TaxReportingClassificationBusinessTypeEnum = "listedPublicCompany"
	TaxReportingClassificationBusinessTypeEnumSubsidiaryOfListedPublicCompany TaxReportingClassificationBusinessTypeEnum = "subsidiaryOfListedPublicCompany"
	TaxReportingClassificationBusinessTypeEnumGovernmentalOrganization        TaxReportingClassificationBusinessTypeEnum = "governmentalOrganization"
	TaxReportingClassificationBusinessTypeEnumInternationalOrganization       TaxReportingClassificationBusinessTypeEnum = "internationalOrganization"
	TaxReportingClassificationBusinessTypeEnumFinancialInstitution            TaxReportingClassificationBusinessTypeEnum = "financialInstitution."
)

func (e *TaxReportingClassificationBusinessTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "other":
		fallthrough
	case "listedPublicCompany":
		fallthrough
	case "subsidiaryOfListedPublicCompany":
		fallthrough
	case "governmentalOrganization":
		fallthrough
	case "internationalOrganization":
		fallthrough
	case "financialInstitution.":
		*e = TaxReportingClassificationBusinessTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxReportingClassificationBusinessTypeEnum: %s", s)
	}
}

// TaxReportingClassificationMainSourceOfIncomeEnum - The organization's main source of income.
//
// Possible values: **businessOperation**, **realEstateSales**, **investmentInterestOrRoyalty**, **propertyRental**, **other**.
type TaxReportingClassificationMainSourceOfIncomeEnum string

const (
	TaxReportingClassificationMainSourceOfIncomeEnumBusinessOperation           TaxReportingClassificationMainSourceOfIncomeEnum = "businessOperation"
	TaxReportingClassificationMainSourceOfIncomeEnumRealEstateSales             TaxReportingClassificationMainSourceOfIncomeEnum = "realEstateSales"
	TaxReportingClassificationMainSourceOfIncomeEnumInvestmentInterestOrRoyalty TaxReportingClassificationMainSourceOfIncomeEnum = "investmentInterestOrRoyalty"
	TaxReportingClassificationMainSourceOfIncomeEnumPropertyRental              TaxReportingClassificationMainSourceOfIncomeEnum = "propertyRental"
	TaxReportingClassificationMainSourceOfIncomeEnumOther                       TaxReportingClassificationMainSourceOfIncomeEnum = "other"
)

func (e *TaxReportingClassificationMainSourceOfIncomeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "businessOperation":
		fallthrough
	case "realEstateSales":
		fallthrough
	case "investmentInterestOrRoyalty":
		fallthrough
	case "propertyRental":
		fallthrough
	case "other":
		*e = TaxReportingClassificationMainSourceOfIncomeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxReportingClassificationMainSourceOfIncomeEnum: %s", s)
	}
}

// TaxReportingClassificationTypeEnum - The tax reporting classification type.
//
// Possible values: **nonFinancialNonReportable**, **financialNonReportable**, **nonFinancialActive**, **nonFinancialPassive**.
type TaxReportingClassificationTypeEnum string

const (
	TaxReportingClassificationTypeEnumNonFinancialNonReportable TaxReportingClassificationTypeEnum = "nonFinancialNonReportable"
	TaxReportingClassificationTypeEnumFinancialNonReportable    TaxReportingClassificationTypeEnum = "financialNonReportable"
	TaxReportingClassificationTypeEnumNonFinancialActive        TaxReportingClassificationTypeEnum = "nonFinancialActive"
	TaxReportingClassificationTypeEnumNonFinancialPassive       TaxReportingClassificationTypeEnum = "nonFinancialPassive"
)

func (e *TaxReportingClassificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "nonFinancialNonReportable":
		fallthrough
	case "financialNonReportable":
		fallthrough
	case "nonFinancialActive":
		fallthrough
	case "nonFinancialPassive":
		*e = TaxReportingClassificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxReportingClassificationTypeEnum: %s", s)
	}
}

type TaxReportingClassification struct {
	// The organization's business type.
	//
	// Possible values: **other**, **listedPublicCompany**, **subsidiaryOfListedPublicCompany**, **governmentalOrganization**, **internationalOrganization**, **financialInstitution**.
	BusinessType *TaxReportingClassificationBusinessTypeEnum `json:"businessType,omitempty"`
	// The Global Intermediary Identification Number (GIIN) required for FATCA.
	FinancialInstitutionNumber *string `json:"financialInstitutionNumber,omitempty"`
	// The organization's main source of income.
	//
	// Possible values: **businessOperation**, **realEstateSales**, **investmentInterestOrRoyalty**, **propertyRental**, **other**.
	MainSourceOfIncome *TaxReportingClassificationMainSourceOfIncomeEnum `json:"mainSourceOfIncome,omitempty"`
	// The tax reporting classification type.
	//
	// Possible values: **nonFinancialNonReportable**, **financialNonReportable**, **nonFinancialActive**, **nonFinancialPassive**.
	Type *TaxReportingClassificationTypeEnum `json:"type,omitempty"`
}
