// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworkApplianceSingleLanPathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

type GetNetworkApplianceSingleLanRequest struct {
	PathParams GetNetworkApplianceSingleLanPathParams
}

// GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum - Type of the origin
type GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum string

const (
	GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnumIndependent GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum = "independent"
	GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnumInternet    GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum = "internet"
)

func (e *GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "independent":
		fallthrough
	case "internet":
		*e = GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum: %s", s)
	}
}

// GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOrigin - The origin of the prefix
type GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOrigin struct {
	// Interfaces associated with the prefix
	Interfaces []string `json:"interfaces,omitempty"`
	// Type of the origin
	Type *GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum `json:"type,omitempty"`
}

type GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignments struct {
	// Auto assign a /64 prefix from the origin to the single LAN
	Autonomous *bool `json:"autonomous,omitempty"`
	// The origin of the prefix
	Origin *GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignmentsOrigin `json:"origin,omitempty"`
	// Manual configuration of the IPv6 Appliance IP
	StaticApplianceIp6 *string `json:"staticApplianceIp6,omitempty"`
	// Manual configuration of a /64 prefix on the single LAN
	StaticPrefix *string `json:"staticPrefix,omitempty"`
}

// GetNetworkApplianceSingleLan200ApplicationJSONIpv6 - IPv6 configuration on the single LAN
type GetNetworkApplianceSingleLan200ApplicationJSONIpv6 struct {
	// Enable IPv6 on single LAN
	Enabled *bool `json:"enabled,omitempty"`
	// Prefix assignments on the single LAN
	PrefixAssignments []GetNetworkApplianceSingleLan200ApplicationJSONIpv6PrefixAssignments `json:"prefixAssignments,omitempty"`
}

// GetNetworkApplianceSingleLan200ApplicationJSONMandatoryDhcp - Mandatory DHCP will enforce that clients connecting to this single LAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
type GetNetworkApplianceSingleLan200ApplicationJSONMandatoryDhcp struct {
	// Enable Mandatory DHCP on single LAN.
	Enabled *bool `json:"enabled,omitempty"`
}

// GetNetworkApplianceSingleLan200ApplicationJSON - Successful operation
type GetNetworkApplianceSingleLan200ApplicationJSON struct {
	// The local IP of the appliance on the single LAN
	ApplianceIP *string `json:"applianceIp,omitempty"`
	// IPv6 configuration on the single LAN
	Ipv6 *GetNetworkApplianceSingleLan200ApplicationJSONIpv6 `json:"ipv6,omitempty"`
	// Mandatory DHCP will enforce that clients connecting to this single LAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
	MandatoryDhcp *GetNetworkApplianceSingleLan200ApplicationJSONMandatoryDhcp `json:"mandatoryDhcp,omitempty"`
	// The subnet of the single LAN
	Subnet *string `json:"subnet,omitempty"`
}

type GetNetworkApplianceSingleLanResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkApplianceSingleLan200ApplicationJSONObject *GetNetworkApplianceSingleLan200ApplicationJSON
}
