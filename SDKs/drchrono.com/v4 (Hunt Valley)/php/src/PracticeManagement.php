<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PracticeManagement 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve or search inventory categories
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesListResponse
     */
	public function inventoryCategoriesList(
        \OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/inventory_categories');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inventoryCategoriesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing inventory category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesReadResponse
     */
	public function inventoryCategoriesRead(
        \OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/inventory_categories/{id}', \OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InventoryCategoriesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inventoryCategory = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InventoryCategory', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create vaccine inventory
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesCreateResponse
     */
	public function inventoryVaccinesCreate(
        \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/inventory_vaccines');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inventoryVaccine = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InventoryVaccine', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search vaccine inventories
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesListResponse
     */
	public function inventoryVaccinesList(
        \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/inventory_vaccines');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inventoryVaccinesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing vaccine inventory
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesReadResponse
     */
	public function inventoryVaccinesRead(
        \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/inventory_vaccines/{id}', \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InventoryVaccinesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inventoryVaccine = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InventoryVaccine', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create messages in doctor's message center
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MessagesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MessagesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MessagesCreateResponse
     */
	public function messagesCreate(
        \OpenAPI\OpenAPI\Models\Operations\MessagesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MessagesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MessagesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/messages');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MessagesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MessagesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->doctorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DoctorMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete an existing message in doctor's message center
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MessagesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MessagesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MessagesDeleteResponse
     */
	public function messagesDelete(
        \OpenAPI\OpenAPI\Models\Operations\MessagesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MessagesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MessagesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/messages/{id}', \OpenAPI\OpenAPI\Models\Operations\MessagesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MessagesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MessagesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search messages in doctor's message center
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MessagesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MessagesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MessagesListResponse
     */
	public function messagesList(
        \OpenAPI\OpenAPI\Models\Operations\MessagesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MessagesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MessagesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/messages');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MessagesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MessagesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messagesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MessagesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing message in doctor's message center
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MessagesPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MessagesPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MessagesPartialUpdateResponse
     */
	public function messagesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\MessagesPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MessagesPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MessagesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/messages/{id}', \OpenAPI\OpenAPI\Models\Operations\MessagesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MessagesPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MessagesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing message in doctor's message center
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MessagesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MessagesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MessagesReadResponse
     */
	public function messagesRead(
        \OpenAPI\OpenAPI\Models\Operations\MessagesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MessagesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MessagesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/messages/{id}', \OpenAPI\OpenAPI\Models\Operations\MessagesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MessagesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MessagesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->doctorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DoctorMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing message in doctor's message center
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MessagesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MessagesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MessagesUpdateResponse
     */
	public function messagesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\MessagesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MessagesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MessagesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/messages/{id}', \OpenAPI\OpenAPI\Models\Operations\MessagesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MessagesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MessagesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Add an exam room to the office
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OfficesAddExamRoomRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OfficesAddExamRoomSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OfficesAddExamRoomResponse
     */
	public function officesAddExamRoom(
        \OpenAPI\OpenAPI\Models\Operations\OfficesAddExamRoomRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OfficesAddExamRoomSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OfficesAddExamRoomResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/offices/{id}/add_exam_room', \OpenAPI\OpenAPI\Models\Operations\OfficesAddExamRoomRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OfficesAddExamRoomRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OfficesAddExamRoomResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->office = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Office', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search offices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OfficesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OfficesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OfficesListResponse
     */
	public function officesList(
        \OpenAPI\OpenAPI\Models\Operations\OfficesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OfficesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OfficesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/offices');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OfficesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OfficesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->officesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\OfficesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing office
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OfficesPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OfficesPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OfficesPartialUpdateResponse
     */
	public function officesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\OfficesPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OfficesPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OfficesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/offices/{id}', \OpenAPI\OpenAPI\Models\Operations\OfficesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OfficesPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OfficesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing office
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OfficesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OfficesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OfficesReadResponse
     */
	public function officesRead(
        \OpenAPI\OpenAPI\Models\Operations\OfficesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OfficesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OfficesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/offices/{id}', \OpenAPI\OpenAPI\Models\Operations\OfficesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OfficesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OfficesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->office = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Office', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing office
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OfficesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OfficesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OfficesUpdateResponse
     */
	public function officesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\OfficesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OfficesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OfficesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/offices/{id}', \OpenAPI\OpenAPI\Models\Operations\OfficesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OfficesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OfficesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a task category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesCreateResponse
     */
	public function taskCategoriesCreate(
        \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_categories');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskCategoriesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskCategory = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskCategory', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search task categories
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesListResponse
     */
	public function taskCategoriesList(
        \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_categories');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskCategoriesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskCategoriesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TaskCategoriesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing task category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesPartialUpdateResponse
     */
	public function taskCategoriesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_categories/{id}', \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskCategoriesPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing task category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesReadResponse
     */
	public function taskCategoriesRead(
        \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_categories/{id}', \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskCategoriesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskCategory = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskCategory', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing task category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesUpdateResponse
     */
	public function taskCategoriesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_categories/{id}', \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskCategoriesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskCategoriesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a task note
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskNotesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskNotesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskNotesCreateResponse
     */
	public function taskNotesCreate(
        \OpenAPI\OpenAPI\Models\Operations\TaskNotesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskNotesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskNotesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_notes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskNotesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskNotesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskNote = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskNote', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search task notes
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskNotesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskNotesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskNotesListResponse
     */
	public function taskNotesList(
        \OpenAPI\OpenAPI\Models\Operations\TaskNotesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskNotesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskNotesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_notes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskNotesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskNotesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskNotesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TaskNotesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing task note
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskNotesPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskNotesPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskNotesPartialUpdateResponse
     */
	public function taskNotesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TaskNotesPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskNotesPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskNotesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_notes/{id}', \OpenAPI\OpenAPI\Models\Operations\TaskNotesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskNotesPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskNotesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing task note
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskNotesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskNotesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskNotesReadResponse
     */
	public function taskNotesRead(
        \OpenAPI\OpenAPI\Models\Operations\TaskNotesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskNotesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskNotesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_notes/{id}', \OpenAPI\OpenAPI\Models\Operations\TaskNotesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskNotesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskNotesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskNote = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskNote', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing task note
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskNotesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskNotesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskNotesUpdateResponse
     */
	public function taskNotesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TaskNotesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskNotesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskNotesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_notes/{id}', \OpenAPI\OpenAPI\Models\Operations\TaskNotesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskNotesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskNotesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a task status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskStatusesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskStatusesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskStatusesCreateResponse
     */
	public function taskStatusesCreate(
        \OpenAPI\OpenAPI\Models\Operations\TaskStatusesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskStatusesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskStatusesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_statuses');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskStatusesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskStatusesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search task statuses
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskStatusesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskStatusesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskStatusesListResponse
     */
	public function taskStatusesList(
        \OpenAPI\OpenAPI\Models\Operations\TaskStatusesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskStatusesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskStatusesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_statuses');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskStatusesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskStatusesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskStatusesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TaskStatusesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing task status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskStatusesPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskStatusesPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskStatusesPartialUpdateResponse
     */
	public function taskStatusesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TaskStatusesPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskStatusesPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskStatusesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_statuses/{id}', \OpenAPI\OpenAPI\Models\Operations\TaskStatusesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskStatusesPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskStatusesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing task status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskStatusesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskStatusesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskStatusesReadResponse
     */
	public function taskStatusesRead(
        \OpenAPI\OpenAPI\Models\Operations\TaskStatusesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskStatusesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskStatusesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_statuses/{id}', \OpenAPI\OpenAPI\Models\Operations\TaskStatusesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskStatusesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskStatusesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing task status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskStatusesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskStatusesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskStatusesUpdateResponse
     */
	public function taskStatusesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TaskStatusesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskStatusesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskStatusesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_statuses/{id}', \OpenAPI\OpenAPI\Models\Operations\TaskStatusesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskStatusesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskStatusesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a task template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesCreateResponse
     */
	public function taskTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_templates');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskTemplatesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskTemplate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search task templates
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesListResponse
     */
	public function taskTemplatesList(
        \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_templates');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskTemplatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskTemplatesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TaskTemplatesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing task template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesPartialUpdateResponse
     */
	public function taskTemplatesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_templates/{id}', \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskTemplatesPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing task template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesReadResponse
     */
	public function taskTemplatesRead(
        \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_templates/{id}', \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskTemplatesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskTemplate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing task template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesUpdateResponse
     */
	public function taskTemplatesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/task_templates/{id}', \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaskTemplatesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaskTemplatesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a task
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksCreateResponse
     */
	public function tasksCreate(
        \OpenAPI\OpenAPI\Models\Operations\TasksCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/tasks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->task = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Task', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search tasks
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksListResponse
     */
	public function tasksList(
        \OpenAPI\OpenAPI\Models\Operations\TasksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/tasks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tasksList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TasksList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing task
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksPartialUpdateResponse
     */
	public function tasksPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TasksPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/tasks/{id}', \OpenAPI\OpenAPI\Models\Operations\TasksPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing task
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksReadResponse
     */
	public function tasksRead(
        \OpenAPI\OpenAPI\Models\Operations\TasksReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/tasks/{id}', \OpenAPI\OpenAPI\Models\Operations\TasksReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->task = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Task', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing task
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksUpdateResponse
     */
	public function tasksUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TasksUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/tasks/{id}', \OpenAPI\OpenAPI\Models\Operations\TasksUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}