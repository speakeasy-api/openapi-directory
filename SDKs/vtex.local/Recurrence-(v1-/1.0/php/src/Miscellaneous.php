<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Miscellaneous 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add Subscription item
     * 
     * Adds an item to a Subscription (formerly Recurrence).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddrecurrenceitemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddrecurrenceitemResponse
     */
	public function addrecurrenceitem(
        \OpenAPI\OpenAPI\Models\Operations\AddrecurrenceitemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddrecurrenceitemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/{recurrenceId}/items', \OpenAPI\OpenAPI\Models\Operations\AddrecurrenceitemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddrecurrenceitemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Subscriptions
     * 
     * Retrieves a given Subscription (formerly recurrence). There are three options of filtering your Subscruptions v1. It's possible to get a list of all Subscriptions v1, by not adding any query params to your request, and simply executing a call to the url. It is also possible to list the Subscriptions by email, filtering by the email query param. And finnally, it is possible to list recurrences with failures on the last execution cycle, filtering by the cycleStatus query param.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRecurrencebyemailRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRecurrencebyemailResponse
     */
	public function getRecurrencebyemail(
        \OpenAPI\OpenAPI\Models\Operations\GetRecurrencebyemailRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRecurrencebyemailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRecurrencebyemailRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRecurrencebyemailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Subscription by recurrenceId
     * 
     * Retrieves a given Subscription (formerly recurrence) by recurrenceId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRecurrencebyrecurrenceIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRecurrencebyrecurrenceIdResponse
     */
	public function getRecurrencebyrecurrenceId(
        \OpenAPI\OpenAPI\Models\Operations\GetRecurrencebyrecurrenceIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRecurrencebyrecurrenceIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/{recurrenceId}', \OpenAPI\OpenAPI\Models\Operations\GetRecurrencebyrecurrenceIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRecurrencebyrecurrenceIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get payment accounts
     * 
     * Lists payment accounts of a given Subscription (formerly Recurrence) by recurrenceId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetpaymentaccountsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetpaymentaccountsResponse
     */
	public function getpaymentaccounts(
        \OpenAPI\OpenAPI\Models\Operations\GetpaymentaccountsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetpaymentaccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/{recurrenceid}/accounts', \OpenAPI\OpenAPI\Models\Operations\GetpaymentaccountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetpaymentaccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Subscription addresses
     * 
     * Retrieves the addresses attached to a given subscription (formerly recurrence) by recurrenceId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetrecurrenceaddressesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetrecurrenceaddressesResponse
     */
	public function getrecurrenceaddresses(
        \OpenAPI\OpenAPI\Models\Operations\GetrecurrenceaddressesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetrecurrenceaddressesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/{recurrenceId}/addresses', \OpenAPI\OpenAPI\Models\Operations\GetrecurrenceaddressesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetrecurrenceaddressesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Subscription settings
     * 
     * Retrieves your store's Subscriptions' (formerly recurrence) settings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetrecurrencesettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetrecurrencesettingsResponse
     */
	public function getrecurrencesettings(
        \OpenAPI\OpenAPI\Models\Operations\GetrecurrencesettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetrecurrencesettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/settings');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetrecurrencesettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get self Subscription
     * 
     * Lists details of your self Subscription (formerly Recurrence).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetselfrecurrenceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetselfrecurrenceResponse
     */
	public function getselfrecurrence(
        \OpenAPI\OpenAPI\Models\Operations\GetselfrecurrenceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetselfrecurrenceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/me');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetselfrecurrenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reindex Subscription
     * 
     * Alters the frequency of a given Subscription (formerly Recurrence) by changing period and interval.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReindexrecurrenceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReindexrecurrenceResponse
     */
	public function reindexrecurrence(
        \OpenAPI\OpenAPI\Models\Operations\ReindexrecurrenceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReindexrecurrenceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/{recurrenceId}/reindex', \OpenAPI\OpenAPI\Models\Operations\ReindexrecurrenceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReindexrecurrenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update partial Subscription
     * 
     * Updates partial information of a given subscription (formerly Recurrence).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatepartialrecurrenceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatepartialrecurrenceResponse
     */
	public function updatepartialrecurrence(
        \OpenAPI\OpenAPI\Models\Operations\UpdatepartialrecurrenceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatepartialrecurrenceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/{recurrenceId}', \OpenAPI\OpenAPI\Models\Operations\UpdatepartialrecurrenceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updatepartialrecurrenceRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatepartialrecurrenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update Subscription
     * 
     * Updates details of a given Subscription (formerly recurrence).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdaterecurrenceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdaterecurrenceResponse
     */
	public function updaterecurrence(
        \OpenAPI\OpenAPI\Models\Operations\UpdaterecurrenceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdaterecurrenceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updaterecurrenceRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdaterecurrenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update Subscription settings
     * 
     * Updates the Subscriptions' (formerly Recurrence) settings of your store by salesChannel and defaultSLA.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdaterecurrencesettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdaterecurrencesettingsResponse
     */
	public function updaterecurrencesettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdaterecurrencesettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdaterecurrencesettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/settings');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updaterecurrencesettingsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdaterecurrencesettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}