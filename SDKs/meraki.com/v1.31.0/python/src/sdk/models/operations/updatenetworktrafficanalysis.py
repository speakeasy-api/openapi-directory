"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItemsTypeEnum(str, Enum):
    r"""The signature type for the custom pie chart item. Can be one of 'host', 'port' or 'ipRange'."""
    HOST = 'host'
    IP_RANGE = 'ipRange'
    PORT = 'port'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItems:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the custom pie chart item."""  
    type: UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItemsTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The signature type for the custom pie chart item. Can be one of 'host', 'port' or 'ipRange'."""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The value of the custom pie chart item. Valid syntax depends on the signature type of the chart item
        (see sample request/response for more details).
    """  
    
class UpdateNetworkTrafficAnalysisRequestBodyModeEnum(str, Enum):
    r"""The traffic analysis mode for the network. Can be one of 'disabled' (do not collect traffic types),
        'basic' (collect generic traffic categories), or 'detailed' (collect destination hostnames).
    """
    BASIC = 'basic'
    DETAILED = 'detailed'
    DISABLED = 'disabled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkTrafficAnalysisRequestBody:
    
    custom_pie_chart_items: Optional[list[UpdateNetworkTrafficAnalysisRequestBodyCustomPieChartItems]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customPieChartItems'), 'exclude': lambda f: f is None }})
    r"""The list of items that make up the custom pie chart for traffic reporting."""  
    mode: Optional[UpdateNetworkTrafficAnalysisRequestBodyModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""The traffic analysis mode for the network. Can be one of 'disabled' (do not collect traffic types),
        'basic' (collect generic traffic categories), or 'detailed' (collect destination hostnames).
    """  
    

@dataclasses.dataclass
class UpdateNetworkTrafficAnalysisRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkTrafficAnalysisRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkTrafficAnalysisResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_traffic_analysis_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    