/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Product Search, Order and Retrieve methods
 */
export class V1Product {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieves a document availability result
   *
   * @remarks
   * Check availability and valid options for a particular product for a particular company identfied by its id
   */
  productAvailability(
    req: operations.ProductAvailabilityRequest,
    security: operations.ProductAvailabilitySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductAvailabilityResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductAvailabilityRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/product/availability/{sku}/{subjectId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProductAvailabilitySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductAvailabilityResponse =
        new operations.ProductAvailabilityResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productAvailability200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductAvailability200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productAvailabilityDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductAvailabilityDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a catalog of products
   *
   * @remarks
   * Returns a catalog of purchasable products available with some metadata for a particular country
   */
  productCatalog(
    req: operations.ProductCatalogRequest,
    security: operations.ProductCatalogSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductCatalogResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductCatalogRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/product/catalog/{country}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProductCatalogSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductCatalogResponse =
        new operations.ProductCatalogResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productCatalog200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ProductCatalog200ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productCatalogDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductCatalogDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns metadata for a notifier
   *
   * @remarks
   * Queries and returns all metadata associated with a notifier identified by its notifer id
   */
  productNotifier(
    req: operations.ProductNotifierRequest,
    security: operations.ProductNotifierSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductNotifierResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductNotifierRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/product/notifier/{notifierId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProductNotifierSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductNotifierResponse =
        new operations.ProductNotifierResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productNotifier200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ProductNotifier200ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productNotifierDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductNotifierDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a notifier for an order
   *
   * @remarks
   * Create a notifier for a particular order. Parameters can be supplied in the path
   */
  productNotifierCreate(
    req: operations.ProductNotifierCreateRequest,
    security: operations.ProductNotifierCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductNotifierCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductNotifierCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/product/notifier/{orderId}/{type}/{uri}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProductNotifierCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductNotifierCreateResponse =
        new operations.ProductNotifierCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productNotifierCreate200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductNotifierCreate200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productNotifierCreateDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductNotifierCreateDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Places a product order
   *
   * @remarks
   * Place an order for a particular product identified by its SKU for a particular company identified by its id
   */
  productOrder(
    req: operations.ProductOrderRequest,
    security: operations.ProductOrderSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductOrderResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductOrderRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/product/order/{sku}/{subjectId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProductOrderSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductOrderResponse =
        new operations.ProductOrderResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productOrder200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ProductOrder200ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productOrderDefaultApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ProductOrderDefaultApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Places a concierge order
   *
   * @remarks
   * Place an order for a concierge product
   */
  productOrderConcierge(
    req: operations.ProductOrderConciergeRequestBody,
    security: operations.ProductOrderConciergeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductOrderConciergeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductOrderConciergeRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/product/order/concierge";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProductOrderConciergeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductOrderConciergeResponse =
        new operations.ProductOrderConciergeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productOrderConcierge200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductOrderConcierge200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productOrderConciergeDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductOrderConciergeDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Places a UBO order
   *
   * @remarks
   * Place an order for a UBO (ultimate beneficial owner) discovery report
   */
  productOrderUbo(
    req: operations.ProductOrderUboRequestBody,
    security: operations.ProductOrderUboSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductOrderUboResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductOrderUboRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/product/order/ubo";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProductOrderUboSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductOrderUboResponse =
        new operations.ProductOrderUboResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productOrderUbo200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ProductOrderUbo200ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productOrderUboDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductOrderUboDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Places a product order
   *
   * @remarks
   * Place an order for a particular product identified by its SKU with a particular option for a particular company identified by its id
   */
  productOrderWithOption(
    req: operations.ProductOrderWithOptionRequest,
    security: operations.ProductOrderWithOptionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductOrderWithOptionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductOrderWithOptionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/product/order/{sku}/{option}/{subjectId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProductOrderWithOptionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductOrderWithOptionResponse =
        new operations.ProductOrderWithOptionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productOrderWithOption200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductOrderWithOption200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productOrderWithOptionDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductOrderWithOptionDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves the result of an order
   *
   * @remarks
   * Retrieves the document or structured data associated with a completed order identified with its order id
   */
  productRetrieve(
    req: operations.ProductRetrieveRequest,
    security: operations.ProductRetrieveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductRetrieveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductRetrieveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/product/{orderId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProductRetrieveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductRetrieveResponse =
        new operations.ProductRetrieveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productRetrieve200ApplicationJSONOneOf = httpRes?.data;
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productRetrieveDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductRetrieveDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of products
   *
   * @remarks
   * Search for possible products for a particular company identified by its id
   */
  productSearch(
    req: operations.ProductSearchRequest,
    security: operations.ProductSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/product/search/{subjectId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProductSearchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductSearchResponse =
        new operations.ProductSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productSearch200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.productSearch200ApplicationJSONObjects = utils.objectToClass(
              httpRes?.data,
              operations.ProductSearch200ApplicationJSON,
              resFieldDepth
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productSearchDefaultApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ProductSearchDefaultApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns metadata for a order
   *
   * @remarks
   * Retrieve the current status of an order identified by its order id
   */
  productStatus(
    req: operations.ProductStatusRequest,
    security: operations.ProductStatusSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/product/status/{orderId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProductStatusSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductStatusResponse =
        new operations.ProductStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productStatus200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ProductStatus200ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productStatusDefaultApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ProductStatusDefaultApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates metadata of an order
   *
   * @remarks
   * Update an existing order identified by its order id
   */
  productUpdateAction(
    req: operations.ProductUpdateActionRequest,
    security: operations.ProductUpdateActionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ProductUpdateActionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProductUpdateActionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/product/update/{action}/{orderId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ProductUpdateActionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProductUpdateActionResponse =
        new operations.ProductUpdateActionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productUpdateAction200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductUpdateAction200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productUpdateActionDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ProductUpdateActionDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
