// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateBotRequestBodyBotTypeEnum - The type of the bot to be updated.
type UpdateBotRequestBodyBotTypeEnum string

const (
	UpdateBotRequestBodyBotTypeEnumBot        UpdateBotRequestBodyBotTypeEnum = "Bot"
	UpdateBotRequestBodyBotTypeEnumBotNetwork UpdateBotRequestBodyBotTypeEnum = "BotNetwork"
)

func (e UpdateBotRequestBodyBotTypeEnum) ToPointer() *UpdateBotRequestBodyBotTypeEnum {
	return &e
}

func (e *UpdateBotRequestBodyBotTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Bot":
		fallthrough
	case "BotNetwork":
		*e = UpdateBotRequestBodyBotTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateBotRequestBodyBotTypeEnum: %v", v)
	}
}

// UpdateBotRequestBodyDataPrivacy - By default, data stored by Amazon Lex is encrypted. The <code>DataPrivacy</code> structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot.
type UpdateBotRequestBodyDataPrivacy struct {
	ChildDirected *bool `json:"childDirected,omitempty"`
}

type UpdateBotRequestBody struct {
	// The list of bot members in the network associated with the update action.
	BotMembers []shared.BotMember `json:"botMembers,omitempty"`
	// The new name of the bot. The name must be unique in the account that creates the bot.
	BotName string `json:"botName"`
	// The type of the bot to be updated.
	BotType *UpdateBotRequestBodyBotTypeEnum `json:"botType,omitempty"`
	// By default, data stored by Amazon Lex is encrypted. The <code>DataPrivacy</code> structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot.
	DataPrivacy UpdateBotRequestBodyDataPrivacy `json:"dataPrivacy"`
	// A description of the bot.
	Description *string `json:"description,omitempty"`
	// <p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.</p> <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>
	IdleSessionTTLInSeconds int64 `json:"idleSessionTTLInSeconds"`
	// The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.
	RoleArn string `json:"roleArn"`
}

type UpdateBotRequest struct {
	RequestBody       UpdateBotRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The unique identifier of the bot to update. This identifier is returned by the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html">CreateBot</a> operation.
	BotID string `pathParam:"style=simple,explode=false,name=botId"`
}

type UpdateBotResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	// PreconditionFailedException
	PreconditionFailedException interface{}
	StatusCode                  int
	RawResponse                 *http.Response
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// Success
	UpdateBotResponse *shared.UpdateBotResponse
	// ValidationException
	ValidationException interface{}
}
