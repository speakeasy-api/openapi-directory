/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PerInstanceConfig {
    /**
     * Fingerprint of this per-instance config. This field can be used in optimistic locking. It is ignored when inserting a per-instance config. An up-to-date fingerprint must be provided in order to update an existing per-instance configuration or the field needs to be unset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fingerprint")
    public String fingerprint;
    public PerInstanceConfig withFingerprint(String fingerprint) {
        this.fingerprint = fingerprint;
        return this;
    }
    
    /**
     * The name of a per-instance configuration and its corresponding instance. Serves as a merge key during UpdatePerInstanceConfigs operations, that is, if a per-instance configuration with the same name exists then it will be updated, otherwise a new one will be created for the VM instance with the same name. An attempt to create a per-instance configconfiguration for a VM instance that either doesn't exist or is not part of the group will result in an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public PerInstanceConfig withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Preserved state for a given instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preservedState")
    public PreservedState preservedState;
    public PerInstanceConfig withPreservedState(PreservedState preservedState) {
        this.preservedState = preservedState;
        return this;
    }
    
    /**
     * The status of applying this per-instance configuration on the corresponding managed instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public PerInstanceConfigStatusEnum status;
    public PerInstanceConfig withStatus(PerInstanceConfigStatusEnum status) {
        this.status = status;
        return this;
    }
    
}
