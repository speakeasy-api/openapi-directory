"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cloudwatchloggingoptions as shared_cloudwatchloggingoptions
from ..shared import httpendpointbufferinghints as shared_httpendpointbufferinghints
from ..shared import httpendpointdescription as shared_httpendpointdescription
from ..shared import httpendpointrequestconfiguration as shared_httpendpointrequestconfiguration
from ..shared import httpendpointretryoptions as shared_httpendpointretryoptions
from ..shared import httpendpoints3backupmode_enum as shared_httpendpoints3backupmode_enum
from ..shared import processingconfiguration as shared_processingconfiguration
from ..shared import s3destinationdescription as shared_s3destinationdescription
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HTTPEndpointDestinationDescription:
    r"""Describes the HTTP endpoint destination."""
    
    buffering_hints: Optional[shared_httpendpointbufferinghints.HTTPEndpointBufferingHints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BufferingHints'), 'exclude': lambda f: f is None }})  
    cloud_watch_logging_options: Optional[shared_cloudwatchloggingoptions.CloudWatchLoggingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudWatchLoggingOptions'), 'exclude': lambda f: f is None }})
    r"""Describes the Amazon CloudWatch logging options for your delivery stream."""  
    endpoint_configuration: Optional[shared_httpendpointdescription.HTTPEndpointDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointConfiguration'), 'exclude': lambda f: f is None }})  
    processing_configuration: Optional[shared_processingconfiguration.ProcessingConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProcessingConfiguration'), 'exclude': lambda f: f is None }})
    r"""Describes a data processing configuration."""  
    request_configuration: Optional[shared_httpendpointrequestconfiguration.HTTPEndpointRequestConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequestConfiguration'), 'exclude': lambda f: f is None }})  
    retry_options: Optional[shared_httpendpointretryoptions.HTTPEndpointRetryOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RetryOptions'), 'exclude': lambda f: f is None }})  
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleARN'), 'exclude': lambda f: f is None }})  
    s3_backup_mode: Optional[shared_httpendpoints3backupmode_enum.HTTPEndpointS3BackupModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3BackupMode'), 'exclude': lambda f: f is None }})  
    s3_destination_description: Optional[shared_s3destinationdescription.S3DestinationDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3DestinationDescription'), 'exclude': lambda f: f is None }})
    r"""Describes a destination in Amazon S3."""  
    