// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ResponseStatusEnum - Indicates the current status of the job
type ResponseStatusEnum string

const (
	ResponseStatusEnumWaitingInQueue ResponseStatusEnum = "waiting_in_queue"
	ResponseStatusEnumProcessing     ResponseStatusEnum = "processing"
	ResponseStatusEnumFinished       ResponseStatusEnum = "finished"
)

func (e *ResponseStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "waiting_in_queue":
		fallthrough
	case "processing":
		fallthrough
	case "finished":
		*e = ResponseStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseStatusEnum: %s", s)
	}
}

// Response - A response containing the solution
type Response struct {
	Copyrights []string `json:"copyrights,omitempty"`
	// Processing time in ms. If job is still waiting in queue, processing_time is 0
	ProcessingTime *int64 `json:"processing_time,omitempty"`
	// Only available if status field indicates `finished`.
	Solution *Solution `json:"solution,omitempty"`
	// Indicates the current status of the job
	Status *ResponseStatusEnum `json:"status,omitempty"`
	// Waiting time in ms
	WaitingTimeInQueue *int64 `json:"waiting_time_in_queue,omitempty"`
}
