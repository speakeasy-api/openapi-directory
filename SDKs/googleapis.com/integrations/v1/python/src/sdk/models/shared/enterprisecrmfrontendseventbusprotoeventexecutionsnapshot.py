"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import enterprisecrmeventbusprotoconditionresult as shared_enterprisecrmeventbusprotoconditionresult
from ..shared import enterprisecrmeventbusprotoeventexecutionsnapshoteventexecutionsnapshotmetadata as shared_enterprisecrmeventbusprotoeventexecutionsnapshoteventexecutionsnapshotmetadata
from ..shared import enterprisecrmeventbusprototaskexecutiondetails as shared_enterprisecrmeventbusprototaskexecutiondetails
from ..shared import enterprisecrmfrontendseventbusprotoeventparameters as shared_enterprisecrmfrontendseventbusprotoeventparameters
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot:
    
    checkpoint_task_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkpointTaskNumber'), 'exclude': lambda f: f is None }})
    r"""Indicates \\"right after which checkpoint task's execution\\" this snapshot is taken."""  
    condition_results: Optional[list[shared_enterprisecrmeventbusprotoconditionresult.EnterpriseCrmEventbusProtoConditionResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conditionResults'), 'exclude': lambda f: f is None }})
    r"""All of the computed conditions that been calculated."""  
    diff_params: Optional[shared_enterprisecrmfrontendseventbusprotoeventparameters.EnterpriseCrmFrontendsEventbusProtoEventParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diffParams'), 'exclude': lambda f: f is None }})
    r"""LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see"""  
    event_execution_info_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventExecutionInfoId'), 'exclude': lambda f: f is None }})
    r"""Points to the event execution info this snapshot belongs to."""  
    event_execution_snapshot_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventExecutionSnapshotId'), 'exclude': lambda f: f is None }})
    r"""Auto-generated. Used as primary key for EventExecutionSnapshots table."""  
    event_execution_snapshot_metadata: Optional[shared_enterprisecrmeventbusprotoeventexecutionsnapshoteventexecutionsnapshotmetadata.EnterpriseCrmEventbusProtoEventExecutionSnapshotEventExecutionSnapshotMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventExecutionSnapshotMetadata'), 'exclude': lambda f: f is None }})  
    event_params: Optional[shared_enterprisecrmfrontendseventbusprotoeventparameters.EnterpriseCrmFrontendsEventbusProtoEventParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventParams'), 'exclude': lambda f: f is None }})
    r"""LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see"""  
    snapshot_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snapshotTime'), 'exclude': lambda f: f is None }})
    r"""Indicates when this snapshot is taken."""  
    task_execution_details: Optional[list[shared_enterprisecrmeventbusprototaskexecutiondetails.EnterpriseCrmEventbusProtoTaskExecutionDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskExecutionDetails'), 'exclude': lambda f: f is None }})
    r"""All of the task execution details at the given point of time."""  
    task_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskName'), 'exclude': lambda f: f is None }})
    r"""The task name associated with this snapshot. Could be empty."""  
    