"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Cards:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def block_card(self, request: operations.BlockCardRequest) -> operations.BlockCardResponse:
        r"""Block a card
        Updates status of an existing card to block which prevents any transactions being carried out with that card.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.BlockCardRequest, base_url, '/v1/cards/{cardId}/block', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BlockCardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_new_card(self, request: operations.CreateNewCardNewCard) -> operations.CreateNewCardResponse:
        r"""Create a new debit card.
        You can create multiple debit cards which can be linked to your fire.com accounts.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/cards'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateNewCardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateNewCardNewCardResponse])
                res.new_card_response = out

        return res

    def get_listof_card_transactions(self, request: operations.GetListofCardTransactionsRequest) -> operations.GetListofCardTransactionsResponse:
        r"""List Card Transactions.
        Returns a list of cards transactions related to your fire.com card.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetListofCardTransactionsRequest, base_url, '/v1/cards/{cardId}/transactions', request)
        
        query_params = utils.get_query_params(operations.GetListofCardTransactionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetListofCardTransactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetListofCardTransactionsCardTransactionsv1]])
                res.card_transactionsv1s = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def get_listof_cards(self) -> operations.GetListofCardsResponse:
        r"""View List of Cards.
        Returns a list of cards related to your fire.com account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/cards'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetListofCardsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetListofCardsCards])
                res.cards = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def unblock_card(self, request: operations.UnblockCardRequest) -> operations.UnblockCardResponse:
        r"""Unblock a card
        Updates status of an existing card to unblock which means that transactions can be carried out with that card.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnblockCardRequest, base_url, '/v1/cards/{cardId}/unblock', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnblockCardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    