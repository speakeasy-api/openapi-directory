/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ExplainQueryStage {
    /**
     * Number of parallel input segments completed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completedParallelInputs")
    public String completedParallelInputs;
    public ExplainQueryStage withCompletedParallelInputs(String completedParallelInputs) {
        this.completedParallelInputs = completedParallelInputs;
        return this;
    }
    
    /**
     * Milliseconds the average shard spent on CPU-bound tasks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("computeMsAvg")
    public String computeMsAvg;
    public ExplainQueryStage withComputeMsAvg(String computeMsAvg) {
        this.computeMsAvg = computeMsAvg;
        return this;
    }
    
    /**
     * Milliseconds the slowest shard spent on CPU-bound tasks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("computeMsMax")
    public String computeMsMax;
    public ExplainQueryStage withComputeMsMax(String computeMsMax) {
        this.computeMsMax = computeMsMax;
        return this;
    }
    
    /**
     * Relative amount of time the average shard spent on CPU-bound tasks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("computeRatioAvg")
    public Double computeRatioAvg;
    public ExplainQueryStage withComputeRatioAvg(Double computeRatioAvg) {
        this.computeRatioAvg = computeRatioAvg;
        return this;
    }
    
    /**
     * Relative amount of time the slowest shard spent on CPU-bound tasks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("computeRatioMax")
    public Double computeRatioMax;
    public ExplainQueryStage withComputeRatioMax(Double computeRatioMax) {
        this.computeRatioMax = computeRatioMax;
        return this;
    }
    
    /**
     * Stage end time represented as milliseconds since epoch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endMs")
    public String endMs;
    public ExplainQueryStage withEndMs(String endMs) {
        this.endMs = endMs;
        return this;
    }
    
    /**
     * Unique ID for stage within plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public ExplainQueryStage withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * IDs for stages that are inputs to this stage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inputStages")
    public String[] inputStages;
    public ExplainQueryStage withInputStages(String[] inputStages) {
        this.inputStages = inputStages;
        return this;
    }
    
    /**
     * Human-readable name for stage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public ExplainQueryStage withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Number of parallel input segments to be processed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parallelInputs")
    public String parallelInputs;
    public ExplainQueryStage withParallelInputs(String parallelInputs) {
        this.parallelInputs = parallelInputs;
        return this;
    }
    
    /**
     * Milliseconds the average shard spent reading input.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readMsAvg")
    public String readMsAvg;
    public ExplainQueryStage withReadMsAvg(String readMsAvg) {
        this.readMsAvg = readMsAvg;
        return this;
    }
    
    /**
     * Milliseconds the slowest shard spent reading input.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readMsMax")
    public String readMsMax;
    public ExplainQueryStage withReadMsMax(String readMsMax) {
        this.readMsMax = readMsMax;
        return this;
    }
    
    /**
     * Relative amount of time the average shard spent reading input.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readRatioAvg")
    public Double readRatioAvg;
    public ExplainQueryStage withReadRatioAvg(Double readRatioAvg) {
        this.readRatioAvg = readRatioAvg;
        return this;
    }
    
    /**
     * Relative amount of time the slowest shard spent reading input.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readRatioMax")
    public Double readRatioMax;
    public ExplainQueryStage withReadRatioMax(Double readRatioMax) {
        this.readRatioMax = readRatioMax;
        return this;
    }
    
    /**
     * Number of records read into the stage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recordsRead")
    public String recordsRead;
    public ExplainQueryStage withRecordsRead(String recordsRead) {
        this.recordsRead = recordsRead;
        return this;
    }
    
    /**
     * Number of records written by the stage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recordsWritten")
    public String recordsWritten;
    public ExplainQueryStage withRecordsWritten(String recordsWritten) {
        this.recordsWritten = recordsWritten;
        return this;
    }
    
    /**
     * Total number of bytes written to shuffle.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shuffleOutputBytes")
    public String shuffleOutputBytes;
    public ExplainQueryStage withShuffleOutputBytes(String shuffleOutputBytes) {
        this.shuffleOutputBytes = shuffleOutputBytes;
        return this;
    }
    
    /**
     * Total number of bytes written to shuffle and spilled to disk.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shuffleOutputBytesSpilled")
    public String shuffleOutputBytesSpilled;
    public ExplainQueryStage withShuffleOutputBytesSpilled(String shuffleOutputBytesSpilled) {
        this.shuffleOutputBytesSpilled = shuffleOutputBytesSpilled;
        return this;
    }
    
    /**
     * Slot-milliseconds used by the stage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slotMs")
    public String slotMs;
    public ExplainQueryStage withSlotMs(String slotMs) {
        this.slotMs = slotMs;
        return this;
    }
    
    /**
     * Stage start time represented as milliseconds since epoch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startMs")
    public String startMs;
    public ExplainQueryStage withStartMs(String startMs) {
        this.startMs = startMs;
        return this;
    }
    
    /**
     * Current status for the stage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public ExplainQueryStage withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * List of operations within the stage in dependency order (approximately chronological).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("steps")
    public ExplainQueryStep[] steps;
    public ExplainQueryStage withSteps(ExplainQueryStep[] steps) {
        this.steps = steps;
        return this;
    }
    
    /**
     * Milliseconds the average shard spent waiting to be scheduled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("waitMsAvg")
    public String waitMsAvg;
    public ExplainQueryStage withWaitMsAvg(String waitMsAvg) {
        this.waitMsAvg = waitMsAvg;
        return this;
    }
    
    /**
     * Milliseconds the slowest shard spent waiting to be scheduled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("waitMsMax")
    public String waitMsMax;
    public ExplainQueryStage withWaitMsMax(String waitMsMax) {
        this.waitMsMax = waitMsMax;
        return this;
    }
    
    /**
     * Relative amount of time the average shard spent waiting to be scheduled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("waitRatioAvg")
    public Double waitRatioAvg;
    public ExplainQueryStage withWaitRatioAvg(Double waitRatioAvg) {
        this.waitRatioAvg = waitRatioAvg;
        return this;
    }
    
    /**
     * Relative amount of time the slowest shard spent waiting to be scheduled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("waitRatioMax")
    public Double waitRatioMax;
    public ExplainQueryStage withWaitRatioMax(Double waitRatioMax) {
        this.waitRatioMax = waitRatioMax;
        return this;
    }
    
    /**
     * Milliseconds the average shard spent on writing output.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("writeMsAvg")
    public String writeMsAvg;
    public ExplainQueryStage withWriteMsAvg(String writeMsAvg) {
        this.writeMsAvg = writeMsAvg;
        return this;
    }
    
    /**
     * Milliseconds the slowest shard spent on writing output.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("writeMsMax")
    public String writeMsMax;
    public ExplainQueryStage withWriteMsMax(String writeMsMax) {
        this.writeMsMax = writeMsMax;
        return this;
    }
    
    /**
     * Relative amount of time the average shard spent on writing output.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("writeRatioAvg")
    public Double writeRatioAvg;
    public ExplainQueryStage withWriteRatioAvg(Double writeRatioAvg) {
        this.writeRatioAvg = writeRatioAvg;
        return this;
    }
    
    /**
     * Relative amount of time the slowest shard spent on writing output.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("writeRatioMax")
    public Double writeRatioMax;
    public ExplainQueryStage withWriteRatioMax(Double writeRatioMax) {
        this.writeRatioMax = writeRatioMax;
        return this;
    }
    
}
