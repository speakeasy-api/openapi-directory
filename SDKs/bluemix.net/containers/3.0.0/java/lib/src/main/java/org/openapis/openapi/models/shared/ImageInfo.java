/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ImageInfo - OK. A list of all available Docker images in the private Bluemix registry is returned.
 */
public class ImageInfo {
    /**
     * The time when your container image was created. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Created")
    public Float created;

    public ImageInfo withCreated(Float created) {
        this.created = created;
        return this;
    }
    
    /**
     * The unique identifier representing a container image. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public String id;

    public ImageInfo withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The name of your container image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Image")
    public String image;

    public ImageInfo withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * The full path to the private Bluemix registry where the image is stored including the registry name, the organization namespace, and image tag.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RepoTags")
    public String[] repoTags;

    public ImageInfo withRepoTags(String[] repoTags) {
        this.repoTags = repoTags;
        return this;
    }
    
    /**
     * The real size of the container image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Size")
    public Integer size;

    public ImageInfo withSize(Integer size) {
        this.size = size;
        return this;
    }
    
    /**
     * The virtual size of the container image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VirtualSize")
    public Integer virtualSize;

    public ImageInfo withVirtualSize(Integer virtualSize) {
        this.virtualSize = virtualSize;
        return this;
    }
    
    public ImageInfo(){}
}
