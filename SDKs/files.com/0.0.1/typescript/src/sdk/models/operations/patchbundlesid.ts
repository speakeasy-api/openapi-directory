/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Permissions that apply to Folders in this Share Link.
 */
export enum PatchBundlesIdRequestBodyPermissionsEnum {
  Read = "read",
  Write = "write",
  ReadWrite = "read_write",
  Full = "full",
  None = "none",
  PreviewOnly = "preview_only",
}

export class PatchBundlesIdRequestBodyWatermarkAttachmentFile extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "multipart_form, content=true" })
  content: Uint8Array;

  @SpeakeasyMetadata({ data: "multipart_form, name=watermark_attachment_file" })
  watermarkAttachmentFile: string;
}

export class PatchBundlesIdRequestBody extends SpeakeasyBase {
  /**
   * ID of the clickwrap to use with this bundle.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=clickwrap_id" })
  clickwrapId?: number;

  /**
   * Bundle code.  This code forms the end part of the Public URL.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=code" })
  code?: string;

  /**
   * Public description
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=description" })
  description?: string;

  /**
   * Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required.
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=dont_separate_submissions_by_folder",
  })
  dontSeparateSubmissionsByFolder?: boolean;

  /**
   * Bundle expiration date/time
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=expires_at;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  expiresAt?: Date;

  /**
   * Id of Form Field Set to use with this bundle
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=form_field_set_id" })
  formFieldSetId?: number;

  /**
   * ID of the associated inbox, if available.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=inbox_id" })
  inboxId?: number;

  /**
   * Maximum number of times bundle can be accessed
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=max_uses" })
  maxUses?: number;

  /**
   * Bundle internal note
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=note" })
  note?: string;

  /**
   * Password for this bundle.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=password" })
  password?: string;

  /**
   * Template for creating submission subfolders. Can use the uploader's name, email address, ip, company, and any custom form data.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=path_template" })
  pathTemplate?: string;

  /**
   * A list of paths to include in this bundle.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=paths" })
  paths?: string[];

  /**
   * Permissions that apply to Folders in this Share Link.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=permissions" })
  permissions?: PatchBundlesIdRequestBodyPermissionsEnum;

  /**
   * Restrict users to previewing files only?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=preview_only" })
  previewOnly?: boolean;

  /**
   * Show a registration page that captures the downloader's name and email address?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=require_registration" })
  requireRegistration?: boolean;

  /**
   * Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=require_share_recipient" })
  requireShareRecipient?: boolean;

  /**
   * Send delivery receipt to the uploader. Note: For writable share only
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=send_email_receipt_to_uploader",
  })
  sendEmailReceiptToUploader?: boolean;

  /**
   * BundleRegistrations can be saved without providing company?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=skip_company" })
  skipCompany?: boolean;

  /**
   * BundleRegistrations can be saved without providing email?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=skip_email" })
  skipEmail?: boolean;

  /**
   * BundleRegistrations can be saved without providing name?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=skip_name" })
  skipName?: boolean;

  /**
   * If true, will delete the file stored in watermark_attachment
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=watermark_attachment_delete",
  })
  watermarkAttachmentDelete?: boolean;

  /**
   * Preview watermark image applied to all bundle items.
   */
  @SpeakeasyMetadata({ data: "multipart_form, file=true" })
  watermarkAttachmentFile?: PatchBundlesIdRequestBodyWatermarkAttachmentFile;
}

export class PatchBundlesIdRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=multipart/form-data" })
  requestBody?: PatchBundlesIdRequestBody;

  /**
   * Bundle ID.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;
}

export class PatchBundlesIdResponse extends SpeakeasyBase {
  /**
   * The Bundles object.
   */
  @SpeakeasyMetadata()
  bundleEntity?: shared.BundleEntity;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
