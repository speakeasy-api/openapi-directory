"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import alt_enum as shared_alt_enum
from ..shared import file as shared_file
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class DriveFilesPatchSecurityOption1:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DriveFilesPatchSecurityOption2:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DriveFilesPatchSecurityOption3:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DriveFilesPatchSecurityOption4:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DriveFilesPatchSecurityOption5:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DriveFilesPatchSecurityOption6:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DriveFilesPatchSecurity:
    
    option1: Optional[DriveFilesPatchSecurityOption1] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option2: Optional[DriveFilesPatchSecurityOption2] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option3: Optional[DriveFilesPatchSecurityOption3] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option4: Optional[DriveFilesPatchSecurityOption4] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option5: Optional[DriveFilesPatchSecurityOption5] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option6: Optional[DriveFilesPatchSecurityOption6] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    
class DriveFilesPatchModifiedDateBehaviorEnum(str, Enum):
    r"""Determines the behavior in which modifiedDate is updated. This overrides setModifiedDate."""
    FROM_BODY = 'fromBody'
    FROM_BODY_IF_NEEDED = 'fromBodyIfNeeded'
    FROM_BODY_OR_NOW = 'fromBodyOrNow'
    NO_CHANGE = 'noChange'
    NOW = 'now'
    NOW_IF_NEEDED = 'nowIfNeeded'


@dataclasses.dataclass
class DriveFilesPatchRequest:
    
    file_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'fileId', 'style': 'simple', 'explode': False }})
    r"""The ID of the file to update."""  
    add_parents: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'addParents', 'style': 'form', 'explode': True }})
    r"""Comma-separated list of parent IDs to add."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for the response."""  
    convert: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'convert', 'style': 'form', 'explode': True }})
    r"""This parameter is deprecated and has no function."""  
    enforce_single_parent: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'enforceSingleParent', 'style': 'form', 'explode': True }})
    r"""Deprecated. Adding files to multiple folders is no longer supported. Use shortcuts instead."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    file_input: Optional[shared_file.FileInput] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    include_labels: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeLabels', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of IDs of labels to include in the labelInfo part of the response."""  
    include_permissions_for_view: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includePermissionsForView', 'style': 'form', 'explode': True }})
    r"""Specifies which additional view's permissions to include in the response. Only 'published' is supported."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    modified_date_behavior: Optional[DriveFilesPatchModifiedDateBehaviorEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'modifiedDateBehavior', 'style': 'form', 'explode': True }})
    r"""Determines the behavior in which modifiedDate is updated. This overrides setModifiedDate."""  
    new_revision: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'newRevision', 'style': 'form', 'explode': True }})
    r"""Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely, using additional storage quota, up to a maximum of 200 revisions. For details on how revisions are retained, see the Drive Help Center. Note that this field is ignored if there is no payload in the request."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    ocr: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ocr', 'style': 'form', 'explode': True }})
    r"""Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads."""  
    ocr_language: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ocrLanguage', 'style': 'form', 'explode': True }})
    r"""If ocr is true, hints at the language to use. Valid values are BCP 47 codes."""  
    pinned: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pinned', 'style': 'form', 'explode': True }})
    r"""Whether to pin the new revision. A file can have a maximum of 200 pinned revisions. Note that this field is ignored if there is no payload in the request."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""An opaque string that represents a user for quota purposes. Must not exceed 40 characters."""  
    remove_parents: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'removeParents', 'style': 'form', 'explode': True }})
    r"""Comma-separated list of parent IDs to remove."""  
    set_modified_date: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'setModifiedDate', 'style': 'form', 'explode': True }})
    r"""Whether to set the modified date using the value supplied in the request body. Setting this field to true is equivalent to modifiedDateBehavior=fromBodyOrNow, and false is equivalent to modifiedDateBehavior=now. To prevent any changes to the modified date set modifiedDateBehavior=noChange."""  
    supports_all_drives: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'supportsAllDrives', 'style': 'form', 'explode': True }})
    r"""Whether the requesting application supports both My Drives and shared drives."""  
    supports_team_drives: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'supportsTeamDrives', 'style': 'form', 'explode': True }})
    r"""Deprecated use supportsAllDrives instead."""  
    timed_text_language: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timedTextLanguage', 'style': 'form', 'explode': True }})
    r"""The language of the timed text."""  
    timed_text_track_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timedTextTrackName', 'style': 'form', 'explode': True }})
    r"""The timed text track name."""  
    update_viewed_date: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updateViewedDate', 'style': 'form', 'explode': True }})
    r"""Whether to update the view date after successfully updating the file."""  
    use_content_as_indexable_text: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'useContentAsIndexableText', 'style': 'form', 'explode': True }})
    r"""Whether to use the content as indexable text."""  
    user_ip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userIp', 'style': 'form', 'explode': True }})
    r"""Deprecated. Please use quotaUser instead."""  
    

@dataclasses.dataclass
class DriveFilesPatchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    file: Optional[shared_file.File] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    