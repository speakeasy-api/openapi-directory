// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateAnswerRequestBodyReasonEnum - The reason why a question is not applicable to your workload.
type UpdateAnswerRequestBodyReasonEnum string

const (
	UpdateAnswerRequestBodyReasonEnumOutOfScope              UpdateAnswerRequestBodyReasonEnum = "OUT_OF_SCOPE"
	UpdateAnswerRequestBodyReasonEnumBusinessPriorities      UpdateAnswerRequestBodyReasonEnum = "BUSINESS_PRIORITIES"
	UpdateAnswerRequestBodyReasonEnumArchitectureConstraints UpdateAnswerRequestBodyReasonEnum = "ARCHITECTURE_CONSTRAINTS"
	UpdateAnswerRequestBodyReasonEnumOther                   UpdateAnswerRequestBodyReasonEnum = "OTHER"
	UpdateAnswerRequestBodyReasonEnumNone                    UpdateAnswerRequestBodyReasonEnum = "NONE"
)

func (e *UpdateAnswerRequestBodyReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OUT_OF_SCOPE":
		fallthrough
	case "BUSINESS_PRIORITIES":
		fallthrough
	case "ARCHITECTURE_CONSTRAINTS":
		fallthrough
	case "OTHER":
		fallthrough
	case "NONE":
		*e = UpdateAnswerRequestBodyReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAnswerRequestBodyReasonEnum: %s", s)
	}
}

type UpdateAnswerRequestBody struct {
	// A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.
	ChoiceUpdates map[string]shared.ChoiceUpdate `json:"ChoiceUpdates,omitempty"`
	// Defines whether this question is applicable to a lens review.
	IsApplicable *bool `json:"IsApplicable,omitempty"`
	// The notes associated with the workload.
	Notes *string `json:"Notes,omitempty"`
	// The reason why a question is not applicable to your workload.
	Reason *UpdateAnswerRequestBodyReasonEnum `json:"Reason,omitempty"`
	// <p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>
	SelectedChoices []string `json:"SelectedChoices,omitempty"`
}

type UpdateAnswerRequest struct {
	LensAlias         string                  `pathParam:"style=simple,explode=false,name=LensAlias"`
	QuestionID        string                  `pathParam:"style=simple,explode=false,name=QuestionId"`
	RequestBody       UpdateAnswerRequestBody `request:"mediaType=application/json"`
	WorkloadID        string                  `pathParam:"style=simple,explode=false,name=WorkloadId"`
	XAmzAlgorithm     *string                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type UpdateAnswerResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// Success
	UpdateAnswerOutput *shared.UpdateAnswerOutput
	// ValidationException
	ValidationException interface{}
}
