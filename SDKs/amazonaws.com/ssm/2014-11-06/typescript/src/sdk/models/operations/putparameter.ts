/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum PutParameterXAmzTargetEnum {
  AmazonSSMPutParameter = "AmazonSSM.PutParameter",
}

export class PutParameterRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  putParameterRequest: shared.PutParameterRequest;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: PutParameterXAmzTargetEnum;
}

export class PutParameterResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * HierarchyLevelLimitExceededException
   */
  @SpeakeasyMetadata()
  hierarchyLevelLimitExceededException?: any;

  /**
   * HierarchyTypeMismatchException
   */
  @SpeakeasyMetadata()
  hierarchyTypeMismatchException?: any;

  /**
   * IncompatiblePolicyException
   */
  @SpeakeasyMetadata()
  incompatiblePolicyException?: any;

  /**
   * InternalServerError
   */
  @SpeakeasyMetadata()
  internalServerError?: any;

  /**
   * InvalidAllowedPatternException
   */
  @SpeakeasyMetadata()
  invalidAllowedPatternException?: any;

  /**
   * InvalidKeyId
   */
  @SpeakeasyMetadata()
  invalidKeyId?: any;

  /**
   * InvalidPolicyAttributeException
   */
  @SpeakeasyMetadata()
  invalidPolicyAttributeException?: any;

  /**
   * InvalidPolicyTypeException
   */
  @SpeakeasyMetadata()
  invalidPolicyTypeException?: any;

  /**
   * ParameterAlreadyExists
   */
  @SpeakeasyMetadata()
  parameterAlreadyExists?: any;

  /**
   * ParameterLimitExceeded
   */
  @SpeakeasyMetadata()
  parameterLimitExceeded?: any;

  /**
   * ParameterMaxVersionLimitExceeded
   */
  @SpeakeasyMetadata()
  parameterMaxVersionLimitExceeded?: any;

  /**
   * ParameterPatternMismatchException
   */
  @SpeakeasyMetadata()
  parameterPatternMismatchException?: any;

  /**
   * PoliciesLimitExceededException
   */
  @SpeakeasyMetadata()
  policiesLimitExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  putParameterResult?: shared.PutParameterResult;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyUpdates
   */
  @SpeakeasyMetadata()
  tooManyUpdates?: any;

  /**
   * UnsupportedParameterType
   */
  @SpeakeasyMetadata()
  unsupportedParameterType?: any;
}
