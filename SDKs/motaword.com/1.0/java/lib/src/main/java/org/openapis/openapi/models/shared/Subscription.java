/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Subscription - Delete continuous project subscription
 */
public class Subscription {
    /**
     * Stripe downgradable plan
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downgrade")
    public String[] downgrade;

    public Subscription withDowngrade(String[] downgrade) {
        this.downgrade = downgrade;
        return this;
    }
    
    /**
     * Stripe subscription plan payment card internal id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    public Long paymentMethod;

    public Subscription withPaymentMethod(Long paymentMethod) {
        this.paymentMethod = paymentMethod;
        return this;
    }
    
    /**
     * Stripe plan period end
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("period_end")
    public OffsetDateTime periodEnd;

    public Subscription withPeriodEnd(OffsetDateTime periodEnd) {
        this.periodEnd = periodEnd;
        return this;
    }
    
    /**
     * Stripe subscription plan id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plan_id")
    public String planId;

    public Subscription withPlanId(String planId) {
        this.planId = planId;
        return this;
    }
    
    /**
     * Stripe subscription plan name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plan_name")
    public String planName;

    public Subscription withPlanName(String planName) {
        this.planName = planName;
        return this;
    }
    
    /**
     * Stripe plan price
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    public String price;

    public Subscription withPrice(String price) {
        this.price = price;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("products")
    public Object[] products;

    public Subscription withProducts(Object[] products) {
        this.products = products;
        return this;
    }
    
    /**
     * Stripe Scheduled plan period end
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule_name")
    public String scheduleName;

    public Subscription withScheduleName(String scheduleName) {
        this.scheduleName = scheduleName;
        return this;
    }
    
    /**
     * Stripe Scheduled start date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("schedule_start")
    public OffsetDateTime scheduleStart;

    public Subscription withScheduleStart(OffsetDateTime scheduleStart) {
        this.scheduleStart = scheduleStart;
        return this;
    }
    
    /**
     * Stripe subscription id for this project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscription_id")
    public String subscriptionId;

    public Subscription withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }
    
    /**
     * Stripe upgradable plan
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upgrade")
    public String[] upgrade;

    public Subscription withUpgrade(String[] upgrade) {
        this.upgrade = upgrade;
        return this;
    }
    
    /**
     * Stripe plan trial
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withTrial")
    public Object withTrial;

    public Subscription withWithTrial(Object withTrial) {
        this.withTrial = withTrial;
        return this;
    }
    
    public Subscription(){}
}
