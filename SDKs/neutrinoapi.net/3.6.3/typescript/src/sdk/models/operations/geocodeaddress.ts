/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GeocodeAddressRequest extends SpeakeasyBase {
  /**
   * The full address, partial address or name of a place to try and locate. Comma separated address components are preferred.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=address",
  })
  address?: string;

  /**
   * The city/town name to locate
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=city" })
  city?: string;

  /**
   * Limit result to this country (the default is no country bias)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=country-code",
  })
  countryCode?: string;

  /**
   * The county/region name to locate
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=county",
  })
  county?: string;

  /**
   * If no matches are found for the given address, start performing a recursive fuzzy search until a geolocation is found. This option is recommended for processing user input or implementing auto-complete. We use a combination of approximate string matching and data cleansing to find possible location matches
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fuzzy-search",
  })
  fuzzySearch?: boolean;

  /**
   * The house/building number to locate
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=house-number",
  })
  houseNumber?: string;

  /**
   * The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru, zh</li> </ul>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=language-code",
  })
  languageCode?: string;

  /**
   * The postal code to locate
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=postal-code",
  })
  postalCode?: string;

  /**
   * The state name to locate
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=state" })
  state?: string;

  /**
   * The street/road name to locate
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=street",
  })
  street?: string;
}

export class GeocodeAddressResponse extends SpeakeasyBase {
  /**
   * Your API request has been rejected. Check error code for details
   */
  @SpeakeasyMetadata()
  apiError?: shared.APIError;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  geocodeAddressResponse?: shared.GeocodeAddressResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
