/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * UsageStatistics - Statistics related to pool usage information.
 */
public class UsageStatistics {
    /**
     * Gets or sets the aggregated wall-clock time of the dedicated compute node cores being part of the pool.
     */
    @JsonProperty("dedicatedCoreTime")
    public String dedicatedCoreTime;

    public UsageStatistics withDedicatedCoreTime(String dedicatedCoreTime) {
        this.dedicatedCoreTime = dedicatedCoreTime;
        return this;
    }
    
    /**
     * Gets or sets the time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdateTime")
    public OffsetDateTime lastUpdateTime;

    public UsageStatistics withLastUpdateTime(OffsetDateTime lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
        return this;
    }
    
    /**
     * Gets or sets the start time of the time range covered by the statistics.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;

    public UsageStatistics withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    public UsageStatistics(@JsonProperty("dedicatedCoreTime") String dedicatedCoreTime, @JsonProperty("lastUpdateTime") OffsetDateTime lastUpdateTime, @JsonProperty("startTime") OffsetDateTime startTime) {
        this.dedicatedCoreTime = dedicatedCoreTime;
        this.lastUpdateTime = lastUpdateTime;
        this.startTime = startTime;
  }
}
