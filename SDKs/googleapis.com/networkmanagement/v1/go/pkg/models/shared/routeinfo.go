// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RouteInfoNextHopTypeEnum - Type of next hop.
type RouteInfoNextHopTypeEnum string

const (
	RouteInfoNextHopTypeEnumNextHopTypeUnspecified RouteInfoNextHopTypeEnum = "NEXT_HOP_TYPE_UNSPECIFIED"
	RouteInfoNextHopTypeEnumNextHopIP              RouteInfoNextHopTypeEnum = "NEXT_HOP_IP"
	RouteInfoNextHopTypeEnumNextHopInstance        RouteInfoNextHopTypeEnum = "NEXT_HOP_INSTANCE"
	RouteInfoNextHopTypeEnumNextHopNetwork         RouteInfoNextHopTypeEnum = "NEXT_HOP_NETWORK"
	RouteInfoNextHopTypeEnumNextHopPeering         RouteInfoNextHopTypeEnum = "NEXT_HOP_PEERING"
	RouteInfoNextHopTypeEnumNextHopInterconnect    RouteInfoNextHopTypeEnum = "NEXT_HOP_INTERCONNECT"
	RouteInfoNextHopTypeEnumNextHopVpnTunnel       RouteInfoNextHopTypeEnum = "NEXT_HOP_VPN_TUNNEL"
	RouteInfoNextHopTypeEnumNextHopVpnGateway      RouteInfoNextHopTypeEnum = "NEXT_HOP_VPN_GATEWAY"
	RouteInfoNextHopTypeEnumNextHopInternetGateway RouteInfoNextHopTypeEnum = "NEXT_HOP_INTERNET_GATEWAY"
	RouteInfoNextHopTypeEnumNextHopBlackhole       RouteInfoNextHopTypeEnum = "NEXT_HOP_BLACKHOLE"
	RouteInfoNextHopTypeEnumNextHopIlb             RouteInfoNextHopTypeEnum = "NEXT_HOP_ILB"
	RouteInfoNextHopTypeEnumNextHopRouterAppliance RouteInfoNextHopTypeEnum = "NEXT_HOP_ROUTER_APPLIANCE"
)

func (e RouteInfoNextHopTypeEnum) ToPointer() *RouteInfoNextHopTypeEnum {
	return &e
}

func (e *RouteInfoNextHopTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEXT_HOP_TYPE_UNSPECIFIED":
		fallthrough
	case "NEXT_HOP_IP":
		fallthrough
	case "NEXT_HOP_INSTANCE":
		fallthrough
	case "NEXT_HOP_NETWORK":
		fallthrough
	case "NEXT_HOP_PEERING":
		fallthrough
	case "NEXT_HOP_INTERCONNECT":
		fallthrough
	case "NEXT_HOP_VPN_TUNNEL":
		fallthrough
	case "NEXT_HOP_VPN_GATEWAY":
		fallthrough
	case "NEXT_HOP_INTERNET_GATEWAY":
		fallthrough
	case "NEXT_HOP_BLACKHOLE":
		fallthrough
	case "NEXT_HOP_ILB":
		fallthrough
	case "NEXT_HOP_ROUTER_APPLIANCE":
		*e = RouteInfoNextHopTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RouteInfoNextHopTypeEnum: %v", v)
	}
}

// RouteInfoRouteTypeEnum - Type of route.
type RouteInfoRouteTypeEnum string

const (
	RouteInfoRouteTypeEnumRouteTypeUnspecified RouteInfoRouteTypeEnum = "ROUTE_TYPE_UNSPECIFIED"
	RouteInfoRouteTypeEnumSubnet               RouteInfoRouteTypeEnum = "SUBNET"
	RouteInfoRouteTypeEnumStatic               RouteInfoRouteTypeEnum = "STATIC"
	RouteInfoRouteTypeEnumDynamic              RouteInfoRouteTypeEnum = "DYNAMIC"
	RouteInfoRouteTypeEnumPeeringSubnet        RouteInfoRouteTypeEnum = "PEERING_SUBNET"
	RouteInfoRouteTypeEnumPeeringStatic        RouteInfoRouteTypeEnum = "PEERING_STATIC"
	RouteInfoRouteTypeEnumPeeringDynamic       RouteInfoRouteTypeEnum = "PEERING_DYNAMIC"
	RouteInfoRouteTypeEnumPolicyBased          RouteInfoRouteTypeEnum = "POLICY_BASED"
)

func (e RouteInfoRouteTypeEnum) ToPointer() *RouteInfoRouteTypeEnum {
	return &e
}

func (e *RouteInfoRouteTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ROUTE_TYPE_UNSPECIFIED":
		fallthrough
	case "SUBNET":
		fallthrough
	case "STATIC":
		fallthrough
	case "DYNAMIC":
		fallthrough
	case "PEERING_SUBNET":
		fallthrough
	case "PEERING_STATIC":
		fallthrough
	case "PEERING_DYNAMIC":
		fallthrough
	case "POLICY_BASED":
		*e = RouteInfoRouteTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RouteInfoRouteTypeEnum: %v", v)
	}
}

// RouteInfo - For display only. Metadata associated with a Compute Engine route.
type RouteInfo struct {
	// Destination IP range of the route.
	DestIPRange *string `json:"destIpRange,omitempty"`
	// Destination port ranges of the route. Policy based routes only.
	DestPortRanges []string `json:"destPortRanges,omitempty"`
	// Name of a Compute Engine route.
	DisplayName *string `json:"displayName,omitempty"`
	// Instance tags of the route.
	InstanceTags []string `json:"instanceTags,omitempty"`
	// URI of a Compute Engine network.
	NetworkURI *string `json:"networkUri,omitempty"`
	// Next hop of the route.
	NextHop *string `json:"nextHop,omitempty"`
	// Type of next hop.
	NextHopType *RouteInfoNextHopTypeEnum `json:"nextHopType,omitempty"`
	// Priority of the route.
	Priority *int `json:"priority,omitempty"`
	// Protocols of the route. Policy based routes only.
	Protocols []string `json:"protocols,omitempty"`
	// Type of route.
	RouteType *RouteInfoRouteTypeEnum `json:"routeType,omitempty"`
	// Source IP address range of the route. Policy based routes only.
	SrcIPRange *string `json:"srcIpRange,omitempty"`
	// Source port ranges of the route. Policy based routes only.
	SrcPortRanges []string `json:"srcPortRanges,omitempty"`
	// URI of a Compute Engine route. Dynamic route from cloud router does not have a URI. Advertised route from Google Cloud VPC to on-premises network also does not have a URI.
	URI *string `json:"uri,omitempty"`
}
