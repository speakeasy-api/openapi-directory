"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import httprule as shared_httprule
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HTTP:
    r"""Defines the HTTP configuration for an API service. It contains a list of HttpRule, each specifying the mapping of an RPC method to one or more HTTP REST API methods."""
    
    fully_decode_reserved_expansion: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullyDecodeReservedExpansion'), 'exclude': lambda f: f is None }})
    r"""When set to true, URL path parameters will be fully URI-decoded except in cases of single segment matches in reserved expansion, where \\"%2F\\" will be left encoded. The default behavior is to not decode RFC 6570 reserved characters in multi segment matches."""  
    rules: Optional[list[shared_httprule.HTTPRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules'), 'exclude': lambda f: f is None }})
    r"""A list of HTTP configuration rules that apply to individual API methods. **NOTE:** All service configuration rules follow \\"last one wins\\" order."""  
    