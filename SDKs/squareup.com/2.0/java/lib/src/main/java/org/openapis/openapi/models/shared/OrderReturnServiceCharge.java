/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OrderReturnServiceCharge - Represents the service charge applied to the original order.
 */
public class OrderReturnServiceCharge {
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_money")
    public Money amountMoney;
    public OrderReturnServiceCharge withAmountMoney(Money amountMoney) {
        this.amountMoney = amountMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applied_money")
    public Money appliedMoney;
    public OrderReturnServiceCharge withAppliedMoney(Money appliedMoney) {
        this.appliedMoney = appliedMoney;
        return this;
    }
    
    /**
     * The list of references to `OrderReturnTax` entities applied to the
     * `OrderReturnServiceCharge`. Each `OrderLineItemAppliedTax` has a `tax_uid`
     * that references the `uid` of a top-level `OrderReturnTax` that is being
     * applied to the `OrderReturnServiceCharge`. On reads, the applied amount is
     * populated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applied_taxes")
    public OrderLineItemAppliedTax[] appliedTaxes;
    public OrderReturnServiceCharge withAppliedTaxes(OrderLineItemAppliedTax[] appliedTaxes) {
        this.appliedTaxes = appliedTaxes;
        return this;
    }
    
    /**
     * The calculation phase after which to apply the service charge.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calculation_phase")
    public String calculationPhase;
    public OrderReturnServiceCharge withCalculationPhase(String calculationPhase) {
        this.calculationPhase = calculationPhase;
        return this;
    }
    
    /**
     * The catalog object ID of the associated [OrderServiceCharge](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderServiceCharge).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog_object_id")
    public String catalogObjectId;
    public OrderReturnServiceCharge withCatalogObjectId(String catalogObjectId) {
        this.catalogObjectId = catalogObjectId;
        return this;
    }
    
    /**
     * The version of the catalog object that this service charge references.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog_version")
    public Long catalogVersion;
    public OrderReturnServiceCharge withCatalogVersion(Long catalogVersion) {
        this.catalogVersion = catalogVersion;
        return this;
    }
    
    /**
     * The name of the service charge.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public OrderReturnServiceCharge withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The percentage of the service charge, as a string representation of
     * a decimal number. For example, a value of `"7.25"` corresponds to a
     * percentage of 7.25%.
     * 
     * Either `percentage` or `amount_money` should be set, but not both.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentage")
    public String percentage;
    public OrderReturnServiceCharge withPercentage(String percentage) {
        this.percentage = percentage;
        return this;
    }
    
    /**
     * The service charge `uid` from the order containing the original
     * service charge. `source_service_charge_uid` is `null` for
     * unlinked returns.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_service_charge_uid")
    public String sourceServiceChargeUid;
    public OrderReturnServiceCharge withSourceServiceChargeUid(String sourceServiceChargeUid) {
        this.sourceServiceChargeUid = sourceServiceChargeUid;
        return this;
    }
    
    /**
     * Indicates whether the surcharge can be taxed. Service charges
     * calculated in the `TOTAL_PHASE` cannot be marked as taxable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxable")
    public Boolean taxable;
    public OrderReturnServiceCharge withTaxable(Boolean taxable) {
        this.taxable = taxable;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_money")
    public Money totalMoney;
    public OrderReturnServiceCharge withTotalMoney(Money totalMoney) {
        this.totalMoney = totalMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax_money")
    public Money totalTaxMoney;
    public OrderReturnServiceCharge withTotalTaxMoney(Money totalTaxMoney) {
        this.totalTaxMoney = totalTaxMoney;
        return this;
    }
    
    /**
     * A unique ID that identifies the return service charge only within this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;
    public OrderReturnServiceCharge withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
}
