"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import bookedroom as shared_bookedroom
from ..shared import cancellationfee as shared_cancellationfee
from ..shared import hotelstub as shared_hotelstub
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingCancellation:
    r"""Returned in case the booking (or parts of it) has been cancelled. Contains information on the cancellation."""
    
    fee: shared_cancellationfee.CancellationFee = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fee') }})
    r"""Describes the costs associated with a cancellation and how it is calculated."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingPerson:
    r"""Information on a person and their contact details."""
    
    contact_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contactId') }})
    r"""Unique identifier of this guest within the Impala platform."""  
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""Email address."""  
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName') }})
    r"""First name."""  
    last_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName') }})
    r"""Family name or surname."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingNotes:
    r"""The notes that were transmitted to the hotel as part of this booking.
    
    These fields allow for **Markdown formatting** that's displayed to hotels in its rendered format in most circumstances but might fall back to text-only in scenarios where that's not possible.
    """
    
    from_guest: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromGuest') }})
    r"""Notes your guest has entered as part of the booking. These allow them to communicate anything to the hotel (e.g. that they're travelling for a special occassion or have a particular room assignment preference)."""  
    from_seller: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromSeller') }})
    r"""Notes you as a seller want to communicated to the hotel. These might be around operational processes to watch out for. Impala communicates these as coming from you."""  
    
class BookingStatusEnum(str, Enum):
    r"""Status of this booking within the Impala platform. When you make a booking, it'll first appear as `PENDING` until we receive the hotel's confirmation details. At this point your booking will move to `ACCEPTED`."""
    CANCELLED = 'CANCELLED'
    PENDING = 'PENDING'
    ACCEPTED = 'ACCEPTED'
    PAYMENT_REQUIRED = 'PAYMENT_REQUIRED'
    PAYMENT_ABANDONED = 'PAYMENT_ABANDONED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Booking:
    r"""Details of an existing booking."""
    
    booked_rooms: list[shared_bookedroom.BookedRoom] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookedRooms') }})
    r"""List of rooms booked"""  
    booking_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingId') }})
    r"""Unique identifier for this booking within the Impala platform."""  
    contact: BookingPerson = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact') }})
    r"""Guest details for this booking."""  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date and time (in UTC and ISO 8601 format) when the booking was created."""  
    end: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The departure date of the booking."""  
    hotel: shared_hotelstub.HotelStub = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hotel') }})
    r"""Essential information on a hotel returned as part of other resources, linking to the full resource within its `href` field."""  
    notes: BookingNotes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes') }})
    r"""The notes that were transmitted to the hotel as part of this booking.
    
    These fields allow for **Markdown formatting** that's displayed to hotels in its rendered format in most circumstances but might fall back to text-only in scenarios where that's not possible.
    """  
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The arrival date of the booking."""  
    status: BookingStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of this booking within the Impala platform. When you make a booking, it'll first appear as `PENDING` until we receive the hotel's confirmation details. At this point your booking will move to `ACCEPTED`."""  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date and time (in UTC and ISO 8601 format) when the booking was last updated."""  
    cancellation: Optional[BookingCancellation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancellation'), 'exclude': lambda f: f is None }})
    r"""Returned in case the booking (or parts of it) has been cancelled. Contains information on the cancellation."""  
    hotel_confirmation_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hotelConfirmationCode'), 'exclude': lambda f: f is None }})
    r"""The hotel's confirmation identifier for this booking."""  
    payment_bearer_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentBearerToken'), 'exclude': lambda f: f is None }})
    r"""If status is PAYMENT_REQUIRED, then this should be used as the Authorisation header for the POST to the /payments endpoint."""  
    payment_client_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentClientSecret'), 'exclude': lambda f: f is None }})
    r"""If status is PAYMENT_REQUIRED, then this should be used as the client secret when rendering Impala Payment Elements in the UI."""  
    