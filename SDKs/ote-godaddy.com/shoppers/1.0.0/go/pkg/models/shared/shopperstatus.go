// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ShopperStatusBillingStateEnum - Indicates the billing state of the Shopper.<br />ABANDONED: The shopper has not been billed in at least 10 years and has no active subscriptions.<br />INACTIVE: The shopper has been billed within the last 10 years but has no active subscriptions.<br />ACTIVE: The shopper has at least one active subscription.
type ShopperStatusBillingStateEnum string

const (
	ShopperStatusBillingStateEnumAbandoned ShopperStatusBillingStateEnum = "ABANDONED"
	ShopperStatusBillingStateEnumInactive  ShopperStatusBillingStateEnum = "INACTIVE"
	ShopperStatusBillingStateEnumActive    ShopperStatusBillingStateEnum = "ACTIVE"
)

func (e *ShopperStatusBillingStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ABANDONED":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "ACTIVE":
		*e = ShopperStatusBillingStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShopperStatusBillingStateEnum: %s", s)
	}
}

// ShopperStatus - Request was successful
type ShopperStatus struct {
	// Indicates the billing state of the Shopper.<br />ABANDONED: The shopper has not been billed in at least 10 years and has no active subscriptions.<br />INACTIVE: The shopper has been billed within the last 10 years but has no active subscriptions.<br />ACTIVE: The shopper has at least one active subscription.
	BillingState *ShopperStatusBillingStateEnum `json:"billingState,omitempty"`
}
