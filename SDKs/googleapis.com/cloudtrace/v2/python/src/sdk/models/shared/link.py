"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import attributes as shared_attributes
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LinkTypeEnum(str, Enum):
    r"""The relationship of the current span relative to the linked span."""
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    CHILD_LINKED_SPAN = 'CHILD_LINKED_SPAN'
    PARENT_LINKED_SPAN = 'PARENT_LINKED_SPAN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Link:
    r"""A pointer from the current span to another span in the same trace or in a different trace. For example, this can be used in batching operations, where a single batch handler processes multiple requests from different traces or when the handler receives a request from a different project."""
    
    attributes: Optional[shared_attributes.Attributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})
    r"""A set of attributes as key-value pairs."""  
    span_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spanId'), 'exclude': lambda f: f is None }})
    r"""The `[SPAN_ID]` for a span within a trace."""  
    trace_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('traceId'), 'exclude': lambda f: f is None }})
    r"""The `[TRACE_ID]` for a trace within a project."""  
    type: Optional[LinkTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The relationship of the current span relative to the linked span."""  
    