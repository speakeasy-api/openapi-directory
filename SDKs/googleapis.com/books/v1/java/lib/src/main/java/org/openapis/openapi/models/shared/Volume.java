/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Volume - Successful response
 */
public class Volume {
    /**
     * Any information about a volume related to reading or obtaining that volume text. This information can depend on country (books may be public domain in one country but not in another, e.g.).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessInfo")
    public VolumeAccessInfo accessInfo;

    public Volume withAccessInfo(VolumeAccessInfo accessInfo) {
        this.accessInfo = accessInfo;
        return this;
    }
    
    /**
     * Opaque identifier for a specific version of a volume resource. (In LITE projection)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public Volume withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Unique identifier for a volume. (In LITE projection.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Volume withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Resource type for a volume. (In LITE projection.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Volume withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * What layers exist in this volume and high level information about them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("layerInfo")
    public VolumeLayerInfo layerInfo;

    public Volume withLayerInfo(VolumeLayerInfo layerInfo) {
        this.layerInfo = layerInfo;
        return this;
    }
    
    /**
     * Recommendation related information for this volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recommendedInfo")
    public VolumeRecommendedInfo recommendedInfo;

    public Volume withRecommendedInfo(VolumeRecommendedInfo recommendedInfo) {
        this.recommendedInfo = recommendedInfo;
        return this;
    }
    
    /**
     * Any information about a volume related to the eBookstore and/or purchaseability. This information can depend on the country where the request originates from (i.e. books may not be for sale in certain countries).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("saleInfo")
    public VolumeSaleInfo saleInfo;

    public Volume withSaleInfo(VolumeSaleInfo saleInfo) {
        this.saleInfo = saleInfo;
        return this;
    }
    
    /**
     * Search result information related to this volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchInfo")
    public VolumeSearchInfo searchInfo;

    public Volume withSearchInfo(VolumeSearchInfo searchInfo) {
        this.searchInfo = searchInfo;
        return this;
    }
    
    /**
     * URL to this resource. (In LITE projection.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;

    public Volume withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * User specific information related to this volume. (e.g. page this user last read or whether they purchased this book)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userInfo")
    public VolumeUserInfo userInfo;

    public Volume withUserInfo(VolumeUserInfo userInfo) {
        this.userInfo = userInfo;
        return this;
    }
    
    /**
     * General volume information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumeInfo")
    public VolumeVolumeInfo volumeInfo;

    public Volume withVolumeInfo(VolumeVolumeInfo volumeInfo) {
        this.volumeInfo = volumeInfo;
        return this;
    }
    
    public Volume(){}
}
