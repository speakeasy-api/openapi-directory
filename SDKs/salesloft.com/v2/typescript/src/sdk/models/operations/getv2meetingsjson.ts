/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class GetV2MeetingsJsonRequest extends SpeakeasyBase {
  /**
   * Filters meetings by account_id. Multiple account ids can be applied
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=account_id",
  })
  accountId?: string;

  /**
   * Filters meetings by event IDs
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=event_ids",
  })
  eventIds?: number[];

  /**
   * Filters meetings by UIDs provided by calendar provider
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=i_cal_uids",
  })
  iCalUids?: string[];

  /**
   * IDs of meetings to fetch. If a record can't be found, that record won't be returned and your request will be successful
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=false;name=ids" })
  ids?: number[];

  /**
   * Flag to indicate whether to include owned_by_meetings_settings and booked_by_meetings_settings objects
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_meetings_settings",
  })
  includeMeetingsSettings?: boolean;

  /**
   * Whether to include total_pages and total_count in the metadata. Defaults to false
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_paging_counts",
  })
  includePagingCounts?: boolean;

  /**
   * Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=limit_paging_counts",
  })
  limitPagingCounts?: boolean;

  /**
   * The current page to fetch results from. Defaults to 1
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * How many records to show per page in the range [1, 100]. Defaults to 25
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Filters meetings by person_id. Multiple person ids can be applied
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=person_id",
  })
  personId?: string;

  /**
   * Filters meetings by person_id. Multiple person ids can be applied
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=person_ids",
  })
  personIds?: number[];

  /**
   * Whether to include deleted events in the result
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=show_deleted",
  })
  showDeleted?: boolean;

  /**
   * Key to sort on, must be one of: start_time, created_at, updated_at. Defaults to start_time
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_by",
  })
  sortBy?: string;

  /**
   * Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_direction",
  })
  sortDirection?: string;

  /**
   * Equality filters that are applied to the start_time field. A single filter can be used by itself or combined with other filters to create a range.
   *
   * @remarks
   *
   * ---CUSTOM---
   * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=start_time",
  })
  startTime?: string[];

  /**
   * Filters meetings by status. Possible values are: pending, booked, failed, retry
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=status",
  })
  status?: string;

  /**
   * Filters meetings by task_id. Multiple task ids can be applied
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=task_ids",
  })
  taskIds?: number[];

  /**
   * Filters meetings by user_guid. Multiple user guids can be applied
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=user_guids",
  })
  userGuids?: string[];
}

export class GetV2MeetingsJsonResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
