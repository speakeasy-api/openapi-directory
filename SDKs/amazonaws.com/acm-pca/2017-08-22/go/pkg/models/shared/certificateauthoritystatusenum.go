// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CertificateAuthorityStatusEnum string

const (
	CertificateAuthorityStatusEnumCreating           CertificateAuthorityStatusEnum = "CREATING"
	CertificateAuthorityStatusEnumPendingCertificate CertificateAuthorityStatusEnum = "PENDING_CERTIFICATE"
	CertificateAuthorityStatusEnumActive             CertificateAuthorityStatusEnum = "ACTIVE"
	CertificateAuthorityStatusEnumDeleted            CertificateAuthorityStatusEnum = "DELETED"
	CertificateAuthorityStatusEnumDisabled           CertificateAuthorityStatusEnum = "DISABLED"
	CertificateAuthorityStatusEnumExpired            CertificateAuthorityStatusEnum = "EXPIRED"
	CertificateAuthorityStatusEnumFailed             CertificateAuthorityStatusEnum = "FAILED"
)

func (e CertificateAuthorityStatusEnum) ToPointer() *CertificateAuthorityStatusEnum {
	return &e
}

func (e *CertificateAuthorityStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREATING":
		fallthrough
	case "PENDING_CERTIFICATE":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "DELETED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "EXPIRED":
		fallthrough
	case "FAILED":
		*e = CertificateAuthorityStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateAuthorityStatusEnum: %v", v)
	}
}
