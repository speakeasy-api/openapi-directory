"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import verifiedaccessendpointprotocol_enum as shared_verifiedaccessendpointprotocol_enum
from enum import Enum
from typing import Optional

class GETModifyVerifiedAccessEndpointActionEnum(str, Enum):
    MODIFY_VERIFIED_ACCESS_ENDPOINT = 'ModifyVerifiedAccessEndpoint'


@dataclasses.dataclass
class GETModifyVerifiedAccessEndpointLoadBalancerOptions:
    r"""Describes a load balancer when creating an Amazon Web Services Verified Access endpoint using the <code>load-balancer</code> type."""
    
    port: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Port' }})  
    protocol: Optional[shared_verifiedaccessendpointprotocol_enum.VerifiedAccessEndpointProtocolEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Protocol' }})  
    subnet_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SubnetIds' }})  
    

@dataclasses.dataclass
class GETModifyVerifiedAccessEndpointNetworkInterfaceOptions:
    r"""Options for a network-interface type Verified Access endpoint."""
    
    port: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Port' }})  
    protocol: Optional[shared_verifiedaccessendpointprotocol_enum.VerifiedAccessEndpointProtocolEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Protocol' }})  
    
class GETModifyVerifiedAccessEndpointVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETModifyVerifiedAccessEndpointRequest:
    
    action: GETModifyVerifiedAccessEndpointActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    verified_access_endpoint_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'VerifiedAccessEndpointId', 'style': 'form', 'explode': True }})
    r"""The ID of the Amazon Web Services Verified Access endpoint."""  
    version: GETModifyVerifiedAccessEndpointVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ClientToken', 'style': 'form', 'explode': True }})
    r"""A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href=\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\">Ensuring Idempotency</a>."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Description', 'style': 'form', 'explode': True }})
    r"""A description for the Amazon Web Services Verified Access endpoint."""  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DryRun', 'style': 'form', 'explode': True }})
    r"""Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."""  
    load_balancer_options: Optional[GETModifyVerifiedAccessEndpointLoadBalancerOptions] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'LoadBalancerOptions', 'style': 'form', 'explode': True }})
    r"""The load balancer details if creating the Amazon Web Services Verified Access endpoint as <code>load-balancer</code>type."""  
    network_interface_options: Optional[GETModifyVerifiedAccessEndpointNetworkInterfaceOptions] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NetworkInterfaceOptions', 'style': 'form', 'explode': True }})
    r"""The network interface options."""  
    verified_access_group_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'VerifiedAccessGroupId', 'style': 'form', 'explode': True }})
    r"""The ID of the Amazon Web Services Verified Access group."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifyVerifiedAccessEndpointResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    