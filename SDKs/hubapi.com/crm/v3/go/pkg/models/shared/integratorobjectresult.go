// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type IntegratorObjectResultActionsType string

const (
	IntegratorObjectResultActionsTypeActionHookActionBody IntegratorObjectResultActionsType = "ActionHookActionBody"
	IntegratorObjectResultActionsTypeIFrameActionBody     IntegratorObjectResultActionsType = "IFrameActionBody"
)

type IntegratorObjectResultActions struct {
	ActionHookActionBody *ActionHookActionBody
	IFrameActionBody     *IFrameActionBody

	Type IntegratorObjectResultActionsType
}

func CreateIntegratorObjectResultActionsActionHookActionBody(actionHookActionBody ActionHookActionBody) IntegratorObjectResultActions {
	typ := IntegratorObjectResultActionsTypeActionHookActionBody

	return IntegratorObjectResultActions{
		ActionHookActionBody: &actionHookActionBody,
		Type:                 typ,
	}
}

func CreateIntegratorObjectResultActionsIFrameActionBody(iFrameActionBody IFrameActionBody) IntegratorObjectResultActions {
	typ := IntegratorObjectResultActionsTypeIFrameActionBody

	return IntegratorObjectResultActions{
		IFrameActionBody: &iFrameActionBody,
		Type:             typ,
	}
}

func (u *IntegratorObjectResultActions) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	actionHookActionBody := new(ActionHookActionBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&actionHookActionBody); err == nil {
		u.ActionHookActionBody = actionHookActionBody
		u.Type = IntegratorObjectResultActionsTypeActionHookActionBody
		return nil
	}

	iFrameActionBody := new(IFrameActionBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&iFrameActionBody); err == nil {
		u.IFrameActionBody = iFrameActionBody
		u.Type = IntegratorObjectResultActionsTypeIFrameActionBody
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IntegratorObjectResultActions) MarshalJSON() ([]byte, error) {
	if u.ActionHookActionBody != nil {
		return json.Marshal(u.ActionHookActionBody)
	}

	if u.IFrameActionBody != nil {
		return json.Marshal(u.IFrameActionBody)
	}

	return nil, nil
}

type IntegratorObjectResult struct {
	Actions []IntegratorObjectResultActions `json:"actions"`
	ID      string                          `json:"id"`
	LinkURL *string                         `json:"linkUrl,omitempty"`
	Title   string                          `json:"title"`
	Tokens  []ObjectToken                   `json:"tokens"`
}
