"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LeaseWorkItemRequest:
    r"""Request to lease WorkItems."""
    
    current_worker_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentWorkerTime'), 'exclude': lambda f: f is None }})
    r"""The current timestamp at the worker."""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the WorkItem's job."""  
    requested_lease_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestedLeaseDuration'), 'exclude': lambda f: f is None }})
    r"""The initial lease period."""  
    unified_worker_request: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unifiedWorkerRequest'), 'exclude': lambda f: f is None }})
    r"""Untranslated bag-of-bytes WorkRequest from UnifiedWorker."""  
    worker_capabilities: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerCapabilities'), 'exclude': lambda f: f is None }})
    r"""Worker capabilities. WorkItems might be limited to workers with specific capabilities."""  
    worker_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerId'), 'exclude': lambda f: f is None }})
    r"""Identifies the worker leasing work -- typically the ID of the virtual machine running the worker."""  
    work_item_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workItemTypes'), 'exclude': lambda f: f is None }})
    r"""Filter for WorkItem type."""  
    