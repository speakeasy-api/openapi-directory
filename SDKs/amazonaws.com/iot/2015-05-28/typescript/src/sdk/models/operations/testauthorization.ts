/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class TestAuthorizationRequestBody extends SpeakeasyBase {
  /**
   * A list of authorization info objects. Simulating authorization will create a response for each <code>authInfo</code> object in the list.
   */
  @SpeakeasyMetadata({ elemType: shared.AuthInfo })
  @Expose({ name: "authInfos" })
  @Type(() => shared.AuthInfo)
  authInfos: shared.AuthInfo[];

  /**
   * The Cognito identity pool ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cognitoIdentityPoolId" })
  cognitoIdentityPoolId?: string;

  /**
   * When testing custom authorization, the policies specified here are treated as if they are attached to the principal being authorized.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policyNamesToAdd" })
  policyNamesToAdd?: string[];

  /**
   * When testing custom authorization, the policies specified here are treated as if they are not attached to the principal being authorized.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policyNamesToSkip" })
  policyNamesToSkip?: string[];

  /**
   * The principal. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "principal" })
  principal?: string;
}

export class TestAuthorizationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: TestAuthorizationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The MQTT client ID.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=clientId",
  })
  clientId?: string;
}

export class TestAuthorizationResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  testAuthorizationResponse?: shared.TestAuthorizationResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * UnauthorizedException
   */
  @SpeakeasyMetadata()
  unauthorizedException?: any;
}
