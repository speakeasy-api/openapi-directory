// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConfigManagementSyncStateCodeEnum - Sync status code
type ConfigManagementSyncStateCodeEnum string

const (
	ConfigManagementSyncStateCodeEnumSyncCodeUnspecified ConfigManagementSyncStateCodeEnum = "SYNC_CODE_UNSPECIFIED"
	ConfigManagementSyncStateCodeEnumSynced              ConfigManagementSyncStateCodeEnum = "SYNCED"
	ConfigManagementSyncStateCodeEnumPending             ConfigManagementSyncStateCodeEnum = "PENDING"
	ConfigManagementSyncStateCodeEnumError               ConfigManagementSyncStateCodeEnum = "ERROR"
	ConfigManagementSyncStateCodeEnumNotConfigured       ConfigManagementSyncStateCodeEnum = "NOT_CONFIGURED"
	ConfigManagementSyncStateCodeEnumNotInstalled        ConfigManagementSyncStateCodeEnum = "NOT_INSTALLED"
	ConfigManagementSyncStateCodeEnumUnauthorized        ConfigManagementSyncStateCodeEnum = "UNAUTHORIZED"
	ConfigManagementSyncStateCodeEnumUnreachable         ConfigManagementSyncStateCodeEnum = "UNREACHABLE"
)

func (e *ConfigManagementSyncStateCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SYNC_CODE_UNSPECIFIED":
		fallthrough
	case "SYNCED":
		fallthrough
	case "PENDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "NOT_CONFIGURED":
		fallthrough
	case "NOT_INSTALLED":
		fallthrough
	case "UNAUTHORIZED":
		fallthrough
	case "UNREACHABLE":
		*e = ConfigManagementSyncStateCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigManagementSyncStateCodeEnum: %s", s)
	}
}

// ConfigManagementSyncState - State indicating an ACM's progress syncing configurations to a cluster
type ConfigManagementSyncState struct {
	// Sync status code
	Code *ConfigManagementSyncStateCodeEnum `json:"code,omitempty"`
	// A list of errors resulting from problematic configs. This list will be truncated after 100 errors, although it is unlikely for that many errors to simultaneously exist.
	Errors []ConfigManagementSyncError `json:"errors,omitempty"`
	// Token indicating the state of the importer.
	ImportToken *string `json:"importToken,omitempty"`
	// Deprecated: use last_sync_time instead. Timestamp of when ACM last successfully synced the repo The time format is specified in https://golang.org/pkg/time/#Time.String
	LastSync *string `json:"lastSync,omitempty"`
	// Timestamp type of when ACM last successfully synced the repo
	LastSyncTime *string `json:"lastSyncTime,omitempty"`
	// Token indicating the state of the repo.
	SourceToken *string `json:"sourceToken,omitempty"`
	// Token indicating the state of the syncer.
	SyncToken *string `json:"syncToken,omitempty"`
}
