/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * groupV2
 */
export class GroupV2 {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
   */
  groupV2AbdicateFoundership(
    req: operations.GroupV2AbdicateFoundershipRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2AbdicateFoundershipResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2AbdicateFoundershipRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Admin/AbdicateFoundership/{membershipType}/{founderIdNew}/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2AbdicateFoundershipResponse =
        new operations.GroupV2AbdicateFoundershipResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add a new optional conversation/chat channel. Requires admin permissions to the group.
   */
  groupV2AddOptionalConversation(
    req: operations.GroupV2AddOptionalConversationRequest,
    security: operations.GroupV2AddOptionalConversationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2AddOptionalConversationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2AddOptionalConversationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/OptionalConversations/Add/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2AddOptionalConversationSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2AddOptionalConversationResponse =
        new operations.GroupV2AddOptionalConversationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Approve all of the pending users for the given group.
   */
  groupV2ApproveAllPending(
    req: operations.GroupV2ApproveAllPendingRequest,
    security: operations.GroupV2ApproveAllPendingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2ApproveAllPendingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2ApproveAllPendingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Members/ApproveAll/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2ApproveAllPendingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2ApproveAllPendingResponse =
        new operations.GroupV2ApproveAllPendingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Approve the given membershipId to join the group/clan as long as they have applied.
   */
  groupV2ApprovePending(
    req: operations.GroupV2ApprovePendingRequest,
    security: operations.GroupV2ApprovePendingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2ApprovePendingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2ApprovePendingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Members/Approve/{membershipType}/{membershipId}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2ApprovePendingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2ApprovePendingResponse =
        new operations.GroupV2ApprovePendingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Approve all of the pending users for the given group.
   */
  groupV2ApprovePendingForList(
    req: operations.GroupV2ApprovePendingForListRequest,
    security: operations.GroupV2ApprovePendingForListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2ApprovePendingForListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2ApprovePendingForListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Members/ApproveList/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2ApprovePendingForListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2ApprovePendingForListResponse =
        new operations.GroupV2ApprovePendingForListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Bans the requested member from the requested group for the specified period of time.
   */
  groupV2BanMember(
    req: operations.GroupV2BanMemberRequest,
    security: operations.GroupV2BanMemberSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2BanMemberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2BanMemberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Ban/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2BanMemberSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2BanMemberResponse =
        new operations.GroupV2BanMemberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deny all of the pending users for the given group.
   */
  groupV2DenyAllPending(
    req: operations.GroupV2DenyAllPendingRequest,
    security: operations.GroupV2DenyAllPendingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2DenyAllPendingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2DenyAllPendingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Members/DenyAll/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2DenyAllPendingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2DenyAllPendingResponse =
        new operations.GroupV2DenyAllPendingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deny all of the pending users for the given group that match the passed-in .
   */
  groupV2DenyPendingForList(
    req: operations.GroupV2DenyPendingForListRequest,
    security: operations.GroupV2DenyPendingForListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2DenyPendingForListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2DenyPendingForListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Members/DenyList/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2DenyPendingForListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2DenyPendingForListResponse =
        new operations.GroupV2DenyPendingForListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Edit an existing group's clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
   */
  groupV2EditClanBanner(
    req: operations.GroupV2EditClanBannerRequest,
    security: operations.GroupV2EditClanBannerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2EditClanBannerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2EditClanBannerRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/EditClanBanner/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2EditClanBannerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2EditClanBannerResponse =
        new operations.GroupV2EditClanBannerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
   */
  groupV2EditFounderOptions(
    req: operations.GroupV2EditFounderOptionsRequest,
    security: operations.GroupV2EditFounderOptionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2EditFounderOptionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2EditFounderOptionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/EditFounderOptions/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2EditFounderOptionsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2EditFounderOptionsResponse =
        new operations.GroupV2EditFounderOptionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
   */
  groupV2EditGroup(
    req: operations.GroupV2EditGroupRequest,
    security: operations.GroupV2EditGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2EditGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2EditGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Edit/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2EditGroupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2EditGroupResponse =
        new operations.GroupV2EditGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
   */
  groupV2EditGroupMembership(
    req: operations.GroupV2EditGroupMembershipRequest,
    security: operations.GroupV2EditGroupMembershipSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2EditGroupMembershipResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2EditGroupMembershipRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/SetMembershipType/{memberType}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2EditGroupMembershipSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2EditGroupMembershipResponse =
        new operations.GroupV2EditGroupMembershipResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
   */
  groupV2EditOptionalConversation(
    req: operations.GroupV2EditOptionalConversationRequest,
    security: operations.GroupV2EditOptionalConversationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2EditOptionalConversationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2EditOptionalConversationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/OptionalConversations/Edit/{conversationId}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2EditOptionalConversationSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2EditOptionalConversationResponse =
        new operations.GroupV2EditOptionalConversationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the list of members in a given group who are of admin level or higher.
   */
  groupV2GetAdminsAndFounderOfGroup(
    req: operations.GroupV2GetAdminsAndFounderOfGroupRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2GetAdminsAndFounderOfGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2GetAdminsAndFounderOfGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/AdminsAndFounder/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2GetAdminsAndFounderOfGroupResponse =
        new operations.GroupV2GetAdminsAndFounderOfGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of all available group avatars for the signed-in user.
   */
  groupV2GetAvailableAvatars(
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2GetAvailableAvatarsResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/GroupV2/GetAvailableAvatars/";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2GetAvailableAvatarsResponse =
        new operations.GroupV2GetAvailableAvatarsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of all available group themes.
   */
  groupV2GetAvailableThemes(
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2GetAvailableThemesResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/GroupV2/GetAvailableThemes/";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2GetAvailableThemesResponse =
        new operations.GroupV2GetAvailableThemesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
   */
  groupV2GetBannedMembersOfGroup(
    req: operations.GroupV2GetBannedMembersOfGroupRequest,
    security: operations.GroupV2GetBannedMembersOfGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2GetBannedMembersOfGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2GetBannedMembersOfGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Banned/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2GetBannedMembersOfGroupSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2GetBannedMembersOfGroupResponse =
        new operations.GroupV2GetBannedMembersOfGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get information about a specific group of the given ID.
   */
  groupV2GetGroup(
    req: operations.GroupV2GetGroupRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2GetGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2GetGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/GroupV2/{groupId}/", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2GetGroupResponse =
        new operations.GroupV2GetGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get information about a specific group with the given name and type.
   */
  groupV2GetGroupByName(
    req: operations.GroupV2GetGroupByNameRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2GetGroupByNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2GetGroupByNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/Name/{groupName}/{groupType}/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2GetGroupByNameResponse =
        new operations.GroupV2GetGroupByNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get information about a specific group with the given name and type. The POST version.
   */
  groupV2GetGroupByNameV2(
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2GetGroupByNameV2Response> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/GroupV2/NameV2/";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2GetGroupByNameV2Response =
        new operations.GroupV2GetGroupByNameV2Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of available optional conversation channels and their settings.
   */
  groupV2GetGroupOptionalConversations(
    req: operations.GroupV2GetGroupOptionalConversationsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2GetGroupOptionalConversationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2GetGroupOptionalConversationsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/OptionalConversations/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2GetGroupOptionalConversationsResponse =
        new operations.GroupV2GetGroupOptionalConversationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get information about the groups that a given member has joined.
   */
  groupV2GetGroupsForMember(
    req: operations.GroupV2GetGroupsForMemberRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2GetGroupsForMemberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2GetGroupsForMemberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/User/{membershipType}/{membershipId}/{filter}/{groupType}/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2GetGroupsForMemberResponse =
        new operations.GroupV2GetGroupsForMemberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the list of users who have been invited into the group.
   */
  groupV2GetInvitedIndividuals(
    req: operations.GroupV2GetInvitedIndividualsRequest,
    security: operations.GroupV2GetInvitedIndividualsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2GetInvitedIndividualsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2GetInvitedIndividualsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Members/InvitedIndividuals/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2GetInvitedIndividualsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2GetInvitedIndividualsResponse =
        new operations.GroupV2GetInvitedIndividualsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the list of members in a given group.
   */
  groupV2GetMembersOfGroup(
    req: operations.GroupV2GetMembersOfGroupRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2GetMembersOfGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2GetMembersOfGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Members/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2GetMembersOfGroupResponse =
        new operations.GroupV2GetMembersOfGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
   */
  groupV2GetPendingMemberships(
    req: operations.GroupV2GetPendingMembershipsRequest,
    security: operations.GroupV2GetPendingMembershipsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2GetPendingMembershipsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2GetPendingMembershipsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Members/Pending/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2GetPendingMembershipsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2GetPendingMembershipsResponse =
        new operations.GroupV2GetPendingMembershipsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get information about the groups that a given member has applied to or been invited to.
   */
  groupV2GetPotentialGroupsForMember(
    req: operations.GroupV2GetPotentialGroupsForMemberRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2GetPotentialGroupsForMemberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2GetPotentialGroupsForMemberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/User/Potential/{membershipType}/{membershipId}/{filter}/{groupType}/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2GetPotentialGroupsForMemberResponse =
        new operations.GroupV2GetPotentialGroupsForMemberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets groups recommended for you based on the groups to whom those you follow belong.
   */
  groupV2GetRecommendedGroups(
    req: operations.GroupV2GetRecommendedGroupsRequest,
    security: operations.GroupV2GetRecommendedGroupsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2GetRecommendedGroupsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2GetRecommendedGroupsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/Recommended/{groupType}/{createDateRange}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2GetRecommendedGroupsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2GetRecommendedGroupsResponse =
        new operations.GroupV2GetRecommendedGroupsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the state of the user's clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
   */
  groupV2GetUserClanInviteSetting(
    req: operations.GroupV2GetUserClanInviteSettingRequest,
    security: operations.GroupV2GetUserClanInviteSettingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2GetUserClanInviteSettingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2GetUserClanInviteSettingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/GetUserClanInviteSetting/{mType}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2GetUserClanInviteSettingSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2GetUserClanInviteSettingResponse =
        new operations.GroupV2GetUserClanInviteSettingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Search for Groups.
   */
  groupV2GroupSearch(
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2GroupSearchResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/GroupV2/Search/";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2GroupSearchResponse =
        new operations.GroupV2GroupSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Invite a user to join this group.
   */
  groupV2IndividualGroupInvite(
    req: operations.GroupV2IndividualGroupInviteRequest,
    security: operations.GroupV2IndividualGroupInviteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2IndividualGroupInviteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2IndividualGroupInviteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Members/IndividualInvite/{membershipType}/{membershipId}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2IndividualGroupInviteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2IndividualGroupInviteResponse =
        new operations.GroupV2IndividualGroupInviteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Cancels a pending invitation to join a group.
   */
  groupV2IndividualGroupInviteCancel(
    req: operations.GroupV2IndividualGroupInviteCancelRequest,
    security: operations.GroupV2IndividualGroupInviteCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2IndividualGroupInviteCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2IndividualGroupInviteCancelRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Members/IndividualInviteCancel/{membershipType}/{membershipId}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2IndividualGroupInviteCancelSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2IndividualGroupInviteCancelResponse =
        new operations.GroupV2IndividualGroupInviteCancelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
   */
  groupV2KickMember(
    req: operations.GroupV2KickMemberRequest,
    security: operations.GroupV2KickMemberSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2KickMemberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2KickMemberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Kick/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2KickMemberSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2KickMemberResponse =
        new operations.GroupV2KickMemberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Allows a founder to manually recover a group they can see in game but not on bungie.net
   */
  groupV2RecoverGroupForFounder(
    req: operations.GroupV2RecoverGroupForFounderRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2RecoverGroupForFounderResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2RecoverGroupForFounderRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/Recover/{membershipType}/{membershipId}/{groupType}/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2RecoverGroupForFounderResponse =
        new operations.GroupV2RecoverGroupForFounderResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unbans the requested member, allowing them to re-apply for membership.
   */
  groupV2UnbanMember(
    req: operations.GroupV2UnbanMemberRequest,
    security: operations.GroupV2UnbanMemberSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GroupV2UnbanMemberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GroupV2UnbanMemberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Unban/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GroupV2UnbanMemberSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GroupV2UnbanMemberResponse =
        new operations.GroupV2UnbanMemberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
