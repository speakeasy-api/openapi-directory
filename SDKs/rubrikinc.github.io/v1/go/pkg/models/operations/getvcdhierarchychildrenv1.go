// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetVcdHierarchyChildrenV1ObjectTypeEnum - Filter by node object type.
type GetVcdHierarchyChildrenV1ObjectTypeEnum string

const (
	GetVcdHierarchyChildrenV1ObjectTypeEnumCluster   GetVcdHierarchyChildrenV1ObjectTypeEnum = "Cluster"
	GetVcdHierarchyChildrenV1ObjectTypeEnumVimServer GetVcdHierarchyChildrenV1ObjectTypeEnum = "VimServer"
	GetVcdHierarchyChildrenV1ObjectTypeEnumOrg       GetVcdHierarchyChildrenV1ObjectTypeEnum = "Org"
	GetVcdHierarchyChildrenV1ObjectTypeEnumOrgVdc    GetVcdHierarchyChildrenV1ObjectTypeEnum = "OrgVdc"
	GetVcdHierarchyChildrenV1ObjectTypeEnumCatalog   GetVcdHierarchyChildrenV1ObjectTypeEnum = "Catalog"
	GetVcdHierarchyChildrenV1ObjectTypeEnumVApp      GetVcdHierarchyChildrenV1ObjectTypeEnum = "vApp"
)

func (e GetVcdHierarchyChildrenV1ObjectTypeEnum) ToPointer() *GetVcdHierarchyChildrenV1ObjectTypeEnum {
	return &e
}

func (e *GetVcdHierarchyChildrenV1ObjectTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Cluster":
		fallthrough
	case "VimServer":
		fallthrough
	case "Org":
		fallthrough
	case "OrgVdc":
		fallthrough
	case "Catalog":
		fallthrough
	case "vApp":
		*e = GetVcdHierarchyChildrenV1ObjectTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVcdHierarchyChildrenV1ObjectTypeEnum: %v", v)
	}
}

// GetVcdHierarchyChildrenV1SLAAssignmentEnum - Filter by SLA assignment type.
type GetVcdHierarchyChildrenV1SLAAssignmentEnum string

const (
	GetVcdHierarchyChildrenV1SLAAssignmentEnumDerived    GetVcdHierarchyChildrenV1SLAAssignmentEnum = "Derived"
	GetVcdHierarchyChildrenV1SLAAssignmentEnumDirect     GetVcdHierarchyChildrenV1SLAAssignmentEnum = "Direct"
	GetVcdHierarchyChildrenV1SLAAssignmentEnumUnassigned GetVcdHierarchyChildrenV1SLAAssignmentEnum = "Unassigned"
)

func (e GetVcdHierarchyChildrenV1SLAAssignmentEnum) ToPointer() *GetVcdHierarchyChildrenV1SLAAssignmentEnum {
	return &e
}

func (e *GetVcdHierarchyChildrenV1SLAAssignmentEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Derived":
		fallthrough
	case "Direct":
		fallthrough
	case "Unassigned":
		*e = GetVcdHierarchyChildrenV1SLAAssignmentEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVcdHierarchyChildrenV1SLAAssignmentEnum: %v", v)
	}
}

// GetVcdHierarchyChildrenV1SnappableStatusEnum - Filters vCD hierarchy objects based on the specified query value.
type GetVcdHierarchyChildrenV1SnappableStatusEnum string

const (
	GetVcdHierarchyChildrenV1SnappableStatusEnumProtectable GetVcdHierarchyChildrenV1SnappableStatusEnum = "Protectable"
)

func (e GetVcdHierarchyChildrenV1SnappableStatusEnum) ToPointer() *GetVcdHierarchyChildrenV1SnappableStatusEnum {
	return &e
}

func (e *GetVcdHierarchyChildrenV1SnappableStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Protectable":
		*e = GetVcdHierarchyChildrenV1SnappableStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVcdHierarchyChildrenV1SnappableStatusEnum: %v", v)
	}
}

// GetVcdHierarchyChildrenV1SortByEnum - Attribute to sort the results on.
type GetVcdHierarchyChildrenV1SortByEnum string

const (
	GetVcdHierarchyChildrenV1SortByEnumName                   GetVcdHierarchyChildrenV1SortByEnum = "Name"
	GetVcdHierarchyChildrenV1SortByEnumEffectiveSLADomainName GetVcdHierarchyChildrenV1SortByEnum = "EffectiveSlaDomainName"
	GetVcdHierarchyChildrenV1SortByEnumSLAAssignment          GetVcdHierarchyChildrenV1SortByEnum = "SlaAssignment"
	GetVcdHierarchyChildrenV1SortByEnumConnectionStatus       GetVcdHierarchyChildrenV1SortByEnum = "ConnectionStatus"
	GetVcdHierarchyChildrenV1SortByEnumVappCount              GetVcdHierarchyChildrenV1SortByEnum = "VappCount"
)

func (e GetVcdHierarchyChildrenV1SortByEnum) ToPointer() *GetVcdHierarchyChildrenV1SortByEnum {
	return &e
}

func (e *GetVcdHierarchyChildrenV1SortByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Name":
		fallthrough
	case "EffectiveSlaDomainName":
		fallthrough
	case "SlaAssignment":
		fallthrough
	case "ConnectionStatus":
		fallthrough
	case "VappCount":
		*e = GetVcdHierarchyChildrenV1SortByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVcdHierarchyChildrenV1SortByEnum: %v", v)
	}
}

// GetVcdHierarchyChildrenV1SortOrderEnum - Order for sorting the results, either ascending or descending.
type GetVcdHierarchyChildrenV1SortOrderEnum string

const (
	GetVcdHierarchyChildrenV1SortOrderEnumAsc  GetVcdHierarchyChildrenV1SortOrderEnum = "asc"
	GetVcdHierarchyChildrenV1SortOrderEnumDesc GetVcdHierarchyChildrenV1SortOrderEnum = "desc"
)

func (e GetVcdHierarchyChildrenV1SortOrderEnum) ToPointer() *GetVcdHierarchyChildrenV1SortOrderEnum {
	return &e
}

func (e *GetVcdHierarchyChildrenV1SortOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetVcdHierarchyChildrenV1SortOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVcdHierarchyChildrenV1SortOrderEnum: %v", v)
	}
}

type GetVcdHierarchyChildrenV1Request struct {
	// Filter by ID of effective SLA domain.
	EffectiveSLADomainID *string `queryParam:"style=form,explode=true,name=effective_sla_domain_id"`
	// ID of the parent vCD hierarchy object. To get top-level nodes, use **root** as the ID.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Filter by isRelic field of vCD vApp hierarchy object. Return both relic and non-relic children when this value is not specified.
	IsRelic *bool `queryParam:"style=form,explode=true,name=is_relic"`
	// Limit the number of matches returned.
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Search object by object name.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Filter by node object type.
	ObjectType *GetVcdHierarchyChildrenV1ObjectTypeEnum `queryParam:"style=form,explode=true,name=object_type"`
	// Number of matches to ignore from the beginning of the results.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Filter by primary cluster ID, or **local**.
	PrimaryClusterID *string `queryParam:"style=form,explode=true,name=primary_cluster_id"`
	// Filter by SLA assignment type.
	SLAAssignment *GetVcdHierarchyChildrenV1SLAAssignmentEnum `queryParam:"style=form,explode=true,name=sla_assignment"`
	// Filters vCD hierarchy objects based on the specified query value.
	SnappableStatus *GetVcdHierarchyChildrenV1SnappableStatusEnum `queryParam:"style=form,explode=true,name=snappable_status"`
	// Attribute to sort the results on.
	SortBy *GetVcdHierarchyChildrenV1SortByEnum `queryParam:"style=form,explode=true,name=sort_by"`
	// Order for sorting the results, either ascending or descending.
	SortOrder *GetVcdHierarchyChildrenV1SortOrderEnum `queryParam:"style=form,explode=true,name=sort_order"`
}

type GetVcdHierarchyChildrenV1Response struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Summary list of immediate descendant objects.
	VcdHierarchyObjectSummaryListResponse *shared.VcdHierarchyObjectSummaryListResponse
}
