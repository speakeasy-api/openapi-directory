// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GroupLockedSettingsSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type GroupLockedSettingsPathParams struct {
	// The Id of the group.
	GroupID string `pathParam:"style=simple,explode=false,name=groupId"`
}

type GroupLockedSettingsQueryParams struct {
	// Provide the name of the field by which you would like to filter the response. For example, if you provide "host_video" as the value of this field, you will get a response similar to the following:<br>
	// {
	//     "schedule_meeting": {
	//         "host_video": false
	//     }
	// }
	// <br>You can provide multiple values by separating them with commas(example: "host_video,participant_video‚Äù).
	CustomQueryFields *string `queryParam:"style=form,explode=true,name=custom_query_fields"`
	// Specify `meeting_security` as the value of this field if you would like to view security settings applied on a meeting hosted by the users in this group.
	Option *string `queryParam:"style=form,explode=true,name=option"`
}

// GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum - Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
//
// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
type GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum string

const (
	GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnumEnhancedEncryption GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum = "enhanced_encryption"
	GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnumE2ee               GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum = "e2ee"
)

func (e *GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enhanced_encryption":
		fallthrough
	case "e2ee":
		*e = GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum: %s", s)
	}
}

type GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum string

const (
	GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumZero  GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "0"
	GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumFour  GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "4"
	GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumFive  GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "5"
	GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumSix   GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "6"
	GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumSeven GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "7"
	GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumEight GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "8"
)

func (e *GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		fallthrough
	case "8":
		*e = GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum: %s", s)
	}
}

// GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement - Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
type GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement struct {
	ConsecutiveCharactersLength *GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum `json:"consecutive_characters_length,omitempty"`
	// If set to `true`, the passcode must contain at least 1 letter (such as a,b,c...).
	//
	HaveLetter *bool `json:"have_letter,omitempty"`
	// If set to `true`, the passcode must contain at least 1 number (such as 1,2,3...).
	HaveNumber *bool `json:"have_number,omitempty"`
	// If set to `true`, the passcode must have at least 1 special character (!,@,#...).
	HaveSpecialCharacter *bool `json:"have_special_character,omitempty"`
	// If set to `true`, the passcode must include both uppercase and lowercase characters.
	HaveUpperAndLowerCharacters *bool `json:"have_upper_and_lower_characters,omitempty"`
	// The minimum length that the meeting/webinar passcode needs to have.
	Length *int64 `json:"length,omitempty"`
	// If set to `true`, the passcode must only contain numbers and no other characters.
	OnlyAllowNumeric *bool `json:"only_allow_numeric,omitempty"`
	// If set to `true`, users will be informed if the provided passcode is weak.
	WeakEnhanceDetection *bool `json:"weak_enhance_detection,omitempty"`
}

// GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum -
//
// Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
// `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
type GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum string

const (
	GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnumZero GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum = "0"
	GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnumOne  GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum = "1"
	GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnumTwo  GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum = "2"
)

func (e *GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum: %s", s)
	}
}

// GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings - Specify the settings to be applied if waiting room is enabled.
type GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings struct {
	//
	// Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
	// `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
	ParticipantsToPlaceInWaitingRoom *GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum `json:"participants_to_place_in_waiting_room,omitempty"`
	// Specify who can admit participants from the waiting room. The value of this field can be one of the following:<br>
	// `0`: Host and co-hosts only<br> `1`: Host, co-hosts, and anyone who bypassed the waiting room (only if host and co-hosts are not present).
	//
	//
	//
	UsersWhoCanAdmitParticipantsFromWaitingRoom *int64 `json:"users_who_can_admit_participants_from_waiting_room,omitempty"`
	// If the value of the `participants_to_place_in_waiting_room` field is `2`, use this setting to specify the domains that can bypass the waiting room feature. Separate multiple domains with commas(example: "aaa.com,bbb.com").
	WhitelistedDomainsForWaitingRoom *string `json:"whitelisted_domains_for_waiting_room,omitempty"`
}

type GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurity struct {
	// `true`: Require that all meetings are secured with at least one security option.
	//
	// This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and Education accounts. [Learn more](https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#meeting-security).
	AutoSecurity *bool `json:"auto_security,omitempty"`
	// If set to `true`, meeting passcode will be encrypted and included in the invite link to allow participants to join with just one click without having to enter the passcode.
	//
	EmbedPasswordInJoinLink *bool `json:"embed_password_in_join_link,omitempty"`
	// Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
	// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
	//
	// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
	EncryptionType *GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum `json:"encryption_type,omitempty"`
	// Allow use of end-to-end encryption for meetings. If set to `true`, you can specify the encryption type in `encryption_type` field.
	EndToEndEncryptedMeetings *bool `json:"end_to_end_encrypted_meetings,omitempty"`
	// If set to `true`, all instant, and scheduled meetings that users can join via client, or room systems will be passcode-protected. The Personal Meeting ID (PMI) meetings are not included in this setting.
	MeetingPassword *bool `json:"meeting_password,omitempty"`
	// Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
	MeetingPasswordRequirement *GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement `json:"meeting_password_requirement,omitempty"`
	// Require passcode for participants joining by phone. If set to `true`, a numeric passcode will be required for participants joining by phone if your meeting has a passcode. For meeting with an alphanumeric passcode, a numeric version will be generated.
	PhonePassword *bool `json:"phone_password,omitempty"`
	// If set to `true`, all Personal Meeting ID (PMI) meetings that users can join via client, or room systems will be passcode-protected.
	//
	PmiPassword *bool `json:"pmi_password,omitempty"`
	// Require a passcode for meetings which have already been scheduled.
	//
	RequirePasswordForScheduledMeeting *bool `json:"require_password_for_scheduled_meeting,omitempty"`
	// Require a passcode for webinars which have already been scheduled.
	//
	RequirePasswordForScheduledWebinar *bool `json:"require_password_for_scheduled_webinar,omitempty"`
	// When participants join a meeting, place them in a waiting room and require the host to admit them individually. Enabling the waiting room automatically disables the setting for allowing participants to join before host.
	//
	WaitingRoom *bool `json:"waiting_room,omitempty"`
	// Specify the settings to be applied if waiting room is enabled.
	WaitingRoomSettings *GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings `json:"waiting_room_settings,omitempty"`
	// If set to `true`, a passcode will be generated when scheduling a Webinar and participants require the passcode to join the Webinar.
	//
	WebinarPassword *bool `json:"webinar_password,omitempty"`
}

type GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings struct {
	MeetingSecurity *GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurity `json:"meeting_security,omitempty"`
}

type GroupLockedSettingsApplicationJSON1EmailNotification struct {
	// Notify the alternative host who is set or removed.
	AlternativeHostReminder *bool `json:"alternative_host_reminder,omitempty"`
	// Notify host and participants when the meeting is cancelled.
	CancelMeetingReminder *bool `json:"cancel_meeting_reminder,omitempty"`
	// Notify host when cloud recording is available.
	CloudRecordingAvailableReminder *bool `json:"cloud_recording_available_reminder,omitempty"`
	// Notify host when participants join the meeting before them.
	JbhReminder *bool `json:"jbh_reminder,omitempty"`
	// Notify the host there is a meeting is scheduled, rescheduled, or cancelled.
	ScheduleForHostReminder *bool `json:"schedule_for_host_reminder,omitempty"`
}

type GroupLockedSettingsApplicationJSON1InMeeting struct {
	// Allow participants who belong to your account to see that a guest (someone who does not belong to your account) is participating in the meeting/webinar.
	AlertGuestJoin *bool `json:"alert_guest_join,omitempty"`
	// Show Zoom windows during screen share.
	AllowShowZoomWindows *bool `json:"allow_show_zoom_windows,omitempty"`
	// Allow participants to use annotation tools to add information to shared screens.
	Annotation *bool `json:"annotation,omitempty"`
	// Allow host to put attendee on hold.
	//
	// **This field has been deprecated and is no longer supported.**
	AttendeeOnHold *bool `json:"attendee_on_hold,omitempty"`
	// Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered.
	AutoAnswer *bool `json:"auto_answer,omitempty"`
	// Automatically save all in-meeting chats.
	AutoSavingChat *bool `json:"auto_saving_chat,omitempty"`
	// Allow host to split meeting participants into separate, smaller rooms.
	BreakoutRoom *bool `json:"breakout_room,omitempty"`
	// Allow meeting participants to send chat message visible to all participants.
	Chat *bool `json:"chat,omitempty"`
	// Allow host to type closed captions or assign a participant/third party device to add closed captions.
	ClosedCaption *bool `json:"closed_caption,omitempty"`
	// Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host.
	CoHost *bool `json:"co_host,omitempty"`
	// Displays whether or not custom [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) have been selected for meetings/webinars hosted by this group.
	CustomDataCenterRegions *bool `json:"custom_data_center_regions,omitempty"`
	// Require that all meetings are encrypted using AES.
	E2eEncryption *bool `json:"e2e_encryption,omitempty"`
	// Play sound when participants join or leave.
	EntryExitChime *string `json:"entry_exit_chime,omitempty"`
	// Allow another user to take control of the camera during a meeting.
	FarEndCameraControl *bool `json:"far_end_camera_control,omitempty"`
	// Enable users to provide feedback to Zoom at the end of the meeting.
	Feedback *bool `json:"feedback,omitempty"`
	// Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the users in the group or not.
	FileTransfer *bool `json:"file_transfer,omitempty"`
	// Enable higher quality video for host and participants. This will require more bandwidth.
	GroupHd *bool `json:"group_hd,omitempty"`
	// Allow participants in a meeting can provide nonverbal feedback and express opinions by clicking on icons in the Participants panel.
	NonVerbalFeedback *bool `json:"non_verbal_feedback,omitempty"`
	// Allow users to select original sound during a meeting.
	OriginalAudio *bool `json:"original_audio,omitempty"`
	// Add 'Polls' to the meeting controls. This allows the host to survey the attendees.
	Polling *bool `json:"polling,omitempty"`
	// Display end-of-meeting experience feedback survey.
	PostMeetingFeedback *bool `json:"post_meeting_feedback,omitempty"`
	// Allow meeting participants to send a private 1:1 message to another participant.
	PrivateChat *bool `json:"private_chat,omitempty"`
	// During screen sharing, allow the person who is sharing to let others control the shared content.
	RemoteControl *bool `json:"remote_control,omitempty"`
	// Allow meeting host to provide 1:1 remote support to another participant.
	RemoteSupport *bool `json:"remote_support,omitempty"`
	// Indicate whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option should be enabled and locked for the group or not.
	RequestPermissionToUnmute *bool `json:"request_permission_to_unmute,omitempty"`
	// Allow host and participants to share their screen or content during meetings.
	ScreenSharing *bool `json:"screen_sharing,omitempty"`
	// Allow users to invite participants by email only by default.
	SendingDefaultEmailInvites *bool `json:"sending_default_email_invites,omitempty"`
	// Allow participants to join a meeting directly from their browser.
	ShowBrowserJoinLink *bool `json:"show_browser_join_link,omitempty"`
	// Always show meeting controls during a meeting.
	ShowMeetingControlToolbar *bool `json:"show_meeting_control_toolbar,omitempty"`
	// Allow users to select stereo audio during a meeting.
	StereoAudio *bool `json:"stereo_audio,omitempty"`
	// Allow  HTML formatting instead of plain text for meeting invitations scheduled with the Outlook plugin.
	UseHTMLFormatEmail *bool `json:"use_html_format_email,omitempty"`
	// Enable virtual background.
	VirtualBackground *bool `json:"virtual_background,omitempty"`
	// Attendees cannot join a meeting until a host admits them individually from the waiting room.
	WaitingRoom *bool `json:"waiting_room,omitempty"`
	// Allow participants to share a whiteboard that includes annotation tools.
	Whiteboard *bool `json:"whiteboard,omitempty"`
}

// GroupLockedSettingsApplicationJSON1RecordingIPAddressAccessControl - Setting to allow cloud recording access only from specific IP address ranges.
type GroupLockedSettingsApplicationJSON1RecordingIPAddressAccessControl struct {
	// If set to `true`, the cloud recordings of this account can only be accessed by the IP addresses defined in the `ip_addresses_or_ranges` property.
	//
	//
	Enable *bool `json:"enable,omitempty"`
	// IP addresses or ranges that have access to the cloud recordings. Separate multiple IP ranges with comma. Use n.n.n.n, n.n.n.n/n or n.n.n.n - n.n.n.n syntax where n is a number.
	//
	// Example: `46.33.24.184, 48.99.100.2/25` or `200.181.108.17 - 220.181.108.157`
	//
	//
	IPAddressesOrRanges *string `json:"ip_addresses_or_ranges,omitempty"`
}

type GroupLockedSettingsApplicationJSON1Recording struct {
	// Make cloud recordings accessible to account members only.
	AccountUserAccessRecording *bool `json:"account_user_access_recording,omitempty"`
	// Allow Zoom to automatically delete recordings permanently after a specified number of days.
	AutoDeleteCmr *bool `json:"auto_delete_cmr,omitempty"`
	// Record meetings automatically as they start.
	AutoRecording *string `json:"auto_recording,omitempty"`
	// Allow hosts to record and save the meeting / webinar in the cloud.
	CloudRecording *bool `json:"cloud_recording,omitempty"`
	// Allow anyone with a link to the cloud recording to download.
	CloudRecordingDownload *bool `json:"cloud_recording_download,omitempty"`
	// Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them.
	HostDeleteCloudRecording *bool `json:"host_delete_cloud_recording,omitempty"`
	// Setting to allow cloud recording access only from specific IP address ranges.
	//
	IPAddressAccessControl *GroupLockedSettingsApplicationJSON1RecordingIPAddressAccessControl `json:"ip_address_access_control,omitempty"`
	// Allow hosts and participants to record the meeting to a local file.
	LocalRecording          *bool   `json:"local_recording,omitempty"`
	RecordingAuthentication *string `json:"recording_authentication,omitempty"`
}

type GroupLockedSettingsApplicationJSON1ScheduleMeeting struct {
	// Determine how participants can join the audio portion of the meeting.
	AudioType *bool `json:"audio_type,omitempty"`
	// If the value is set to `true`, the meeting password will be encrypted and included in the join meeting link to allow participants to join with just one click without having to enter the password.
	//
	EmbedPasswordInJoinLink *bool `json:"embed_password_in_join_link,omitempty"`
	// If join before host option is enabled for a personal meeting, then enforce password requirement.
	ForcePmiJbhPassword *bool `json:"force_pmi_jbh_password,omitempty"`
	// Start meetings with host video on.
	HostVideo *bool `json:"host_video,omitempty"`
	// Allow participants to join the meeting before the host arrives
	JoinBeforeHost *bool `json:"join_before_host,omitempty"`
	// Only authenticated users can join meetings
	MeetingAuthentication *bool `json:"meeting_authentication,omitempty"`
	// Automatically mute all participants when they join the meeting.
	MuteUponEntry *bool `json:"mute_upon_entry,omitempty"`
	// Start meetings with participant video on.
	ParticipantVideo *bool `json:"participant_video,omitempty"`
	// Turn the lock setting on or off for the **Enable Personal Meeting ID** setting for a group.<br><br>
	// `true`: Turn the **"Enable Personal Meeting ID"** setting **on** for all users in the group. Users can choose to use personal meeting ID for their meetings. <br><br>
	// `false`: Turn **off** the **"Enable Personal Meeting ID"** setting. **If this setting is [disabled](https://support.zoom.us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link?flash_digest=eb7ac62d8c7fb4daf285916e3e15d87537806133#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a), meetings that were scheduled with PMI by this group members will be invalid. Users will have to update previously scheduled PMI meetings.**<br><br>
	// For Zoom Phone only:If a user has been assigned a desk phone, **"Elevate to Zoom Meeting"** on desk phone will be disabled.
	//
	//
	//
	PersonalMeeting *bool `json:"personal_meeting,omitempty"`
	// Generate and send new passwords for newly scheduled or edited meetings.
	PstnPasswordProtected *bool `json:"pstn_password_protected,omitempty"`
	// Require password for instant meetings. If you use PMI for your instant meetings, this option will be disabled.
	RequirePasswordForInstantMeetings *bool `json:"require_password_for_instant_meetings,omitempty"`
	// Require participants to enter password for PMI meetings.
	RequirePasswordForPmiMeetings *bool `json:"require_password_for_pmi_meetings,omitempty"`
	// This setting applies for regular meetings that do not use PMI. If enabled, a password will be generated while a host schedules a new meeting and participants will be required to enter the password before they can join the meeting.
	RequirePasswordForSchedulingNewMeetings *bool `json:"require_password_for_scheduling_new_meetings,omitempty"`
	// Receive desktop notification for upcoming meetings.
	UpcomingMeetingReminder *bool `json:"upcoming_meeting_reminder,omitempty"`
}

type GroupLockedSettingsApplicationJSON1Telephony struct {
	TelephonyRegions *bool `json:"telephony_regions,omitempty"`
	// Allow users to join the meeting using the existing 3rd party audio configuration.
	ThirdPartyAudio *bool `json:"third_party_audio,omitempty"`
}

type GroupLockedSettingsApplicationJSON1 struct {
	EmailNotification *GroupLockedSettingsApplicationJSON1EmailNotification `json:"email_notification,omitempty"`
	InMeeting         *GroupLockedSettingsApplicationJSON1InMeeting         `json:"in_meeting,omitempty"`
	Recording         *GroupLockedSettingsApplicationJSON1Recording         `json:"recording,omitempty"`
	ScheduleMeeting   *GroupLockedSettingsApplicationJSON1ScheduleMeeting   `json:"schedule_meeting,omitempty"`
	Telephony         *GroupLockedSettingsApplicationJSON1Telephony         `json:"telephony,omitempty"`
}

type GroupLockedSettingsApplicationJSONType string

const (
	GroupLockedSettingsApplicationJSONTypeGroupLockedSettingsApplicationJSON1                              GroupLockedSettingsApplicationJSONType = "groupLockedSettings_ApplicationJSON_1"
	GroupLockedSettingsApplicationJSONTypeGroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings GroupLockedSettingsApplicationJSONType = "groupLockedSettings_ApplicationJSON_Meeting/Webinar Security Settings"
)

type GroupLockedSettingsApplicationJSON struct {
	GroupLockedSettingsApplicationJSON1                              *GroupLockedSettingsApplicationJSON1
	GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings *GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings

	Type GroupLockedSettingsApplicationJSONType
}

func CreateGroupLockedSettingsApplicationJSONGroupLockedSettingsApplicationJSON1(groupLockedSettingsApplicationJSON1 GroupLockedSettingsApplicationJSON1) GroupLockedSettingsApplicationJSON {
	typ := GroupLockedSettingsApplicationJSONTypeGroupLockedSettingsApplicationJSON1

	return GroupLockedSettingsApplicationJSON{
		GroupLockedSettingsApplicationJSON1: &groupLockedSettingsApplicationJSON1,
		Type:                                typ,
	}
}

func CreateGroupLockedSettingsApplicationJSONGroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings(groupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings) GroupLockedSettingsApplicationJSON {
	typ := GroupLockedSettingsApplicationJSONTypeGroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings

	return GroupLockedSettingsApplicationJSON{
		GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings: &groupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings,
		Type: typ,
	}
}

func (u *GroupLockedSettingsApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	groupLockedSettingsApplicationJSON1 := new(GroupLockedSettingsApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&groupLockedSettingsApplicationJSON1); err == nil {
		u.GroupLockedSettingsApplicationJSON1 = groupLockedSettingsApplicationJSON1
		u.Type = GroupLockedSettingsApplicationJSONTypeGroupLockedSettingsApplicationJSON1
		return nil
	}

	groupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings := new(GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&groupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings); err == nil {
		u.GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings = groupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings
		u.Type = GroupLockedSettingsApplicationJSONTypeGroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GroupLockedSettingsApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.GroupLockedSettingsApplicationJSON1 != nil {
		return json.Marshal(u.GroupLockedSettingsApplicationJSON1)
	}

	if u.GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings != nil {
		return json.Marshal(u.GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings)
	}

	return nil, nil
}

type GroupLockedSettingsRequest struct {
	PathParams  GroupLockedSettingsPathParams
	QueryParams GroupLockedSettingsQueryParams
	Request     *GroupLockedSettingsApplicationJSON `request:"mediaType=application/json"`
	Security    GroupLockedSettingsSecurity
}

type GroupLockedSettingsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **Status Code:** `204`<br>
	// Group's locked settings updated.
	GroupLockedSettings204ApplicationJSONAny interface{}
}
