<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ClientManagement 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List clients
     * 
     * Retrieve a list of clients.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClientSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClientResponse
     */
	public function client(
        \OpenAPI\OpenAPI\Models\Operations\ClientSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/client');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clients = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Client>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oAuth2Error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OAuth2Error', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oAuth2Error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OAuth2Error', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-www-form-urlencoded')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Delete a client
     * 
     * Delete a previously registered client.
     * 
     * http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint - OIDC Client Configuration Endpoint
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClientClientIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClientClientIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClientClientIdResponse
     * @see http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint
     */
	public function clientClientId(
        \OpenAPI\OpenAPI\Models\Operations\ClientClientIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClientClientIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClientClientIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/client/{client_id}', \OpenAPI\OpenAPI\Models\Operations\ClientClientIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClientClientIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-www-form-urlencoded')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Register a client
     * 
     * Register a new client with this Authentiq Connect provider.
     * 
     * This endpoint is compatible with [OIDC's Client Registration](http://openid.net/specs/openid-connect-registration-1_0.html) extension.
     * 
     * http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration - OIDC Client Registration Endpoint
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\Client $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateClientSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateClientResponse
     * @see http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration
     */
	public function createClient(
        \OpenAPI\OpenAPI\Models\Shared\Client $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateClientSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/client');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-www-form-urlencoded')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * View a client
     * 
     * Retrieve the configuration of a previously registered client.
     * 
     * http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint - OIDC Client Configuration Endpoint
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetClientRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetClientSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetClientResponse
     * @see http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint
     */
	public function getClient(
        \OpenAPI\OpenAPI\Models\Operations\GetClientRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetClientSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/client/{client_id}', \OpenAPI\OpenAPI\Models\Operations\GetClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->client = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Client', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oAuth2Error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OAuth2Error', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oAuth2Error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OAuth2Error', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-www-form-urlencoded')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update a client
     * 
     * Update the configuration of a previously registered client.
     * 
     * http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint - OIDC Client Configuration Endpoint
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateClientRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateClientSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateClientResponse
     * @see http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint
     */
	public function updateClient(
        \OpenAPI\OpenAPI\Models\Operations\UpdateClientRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateClientSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateClientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/client/{client_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "client", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateClientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->client = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Client', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-www-form-urlencoded')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}