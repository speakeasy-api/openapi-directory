/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * GetDirectDebitByUuidDirectDebit - Retrieve all details of a single direct debit collection/payment
 */
public class GetDirectDebitByUuidDirectDebit {
    /**
     * Value of the payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    public Long amount;

    public GetDirectDebitByUuidDirectDebit withAmount(Long amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * The currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public GetDirectDebitByUuidDirectDebitCurrency currency;

    public GetDirectDebitByUuidDirectDebit withCurrency(GetDirectDebitByUuidDirectDebitCurrency currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Date the direct debit was created. Milliseconds since the epoch (1970).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("dateCreated")
    public OffsetDateTime dateCreated;

    public GetDirectDebitByUuidDirectDebit withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * The direct debit reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("directDebitReference")
    public String directDebitReference;

    public GetDirectDebitByUuidDirectDebit withDirectDebitReference(String directDebitReference) {
        this.directDebitReference = directDebitReference;
        return this;
    }
    
    /**
     * The UUID for the direct debit payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("directDebitUuid")
    public String directDebitUuid;

    public GetDirectDebitByUuidDirectDebit withDirectDebitUuid(String directDebitUuid) {
        this.directDebitUuid = directDebitUuid;
        return this;
    }
    
    /**
     * DDIC is a Direct Debit Indemnity Claim (i.e.a refund). If if the DD is requested to be refunded it is marked isDDIC true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isDDIC")
    public Boolean isDDIC;

    public GetDirectDebitByUuidDirectDebit withIsDDIC(Boolean isDDIC) {
        this.isDDIC = isDDIC;
        return this;
    }
    
    /**
     * Date the direct debit was last updated. Milliseconds since the epoch (1970).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdated")
    public OffsetDateTime lastUpdated;

    public GetDirectDebitByUuidDirectDebit withLastUpdated(OffsetDateTime lastUpdated) {
        this.lastUpdated = lastUpdated;
        return this;
    }
    
    /**
     * The UUID for the mandate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandateUUid")
    public String mandateUUid;

    public GetDirectDebitByUuidDirectDebit withMandateUUid(String mandateUUid) {
        this.mandateUUid = mandateUUid;
        return this;
    }
    
    /**
     * The Alias of the party who sets up the direct debit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originatorAlias")
    public String originatorAlias;

    public GetDirectDebitByUuidDirectDebit withOriginatorAlias(String originatorAlias) {
        this.originatorAlias = originatorAlias;
        return this;
    }
    
    /**
     * The creator of the party who sets up the direct debit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originatorName")
    public String originatorName;

    public GetDirectDebitByUuidDirectDebit withOriginatorName(String originatorName) {
        this.originatorName = originatorName;
        return this;
    }
    
    /**
     * Set by party who sets up the direct debit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originatorReference")
    public String originatorReference;

    public GetDirectDebitByUuidDirectDebit withOriginatorReference(String originatorReference) {
        this.originatorReference = originatorReference;
        return this;
    }
    
    /**
     * Reason why rejected
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schemeRejectReason")
    public String schemeRejectReason;

    public GetDirectDebitByUuidDirectDebit withSchemeRejectReason(String schemeRejectReason) {
        this.schemeRejectReason = schemeRejectReason;
        return this;
    }
    
    /**
     * The reject code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schemeRejectReasonCode")
    public GetDirectDebitByUuidDirectDebitSchemeRejectReasonCodeEnum schemeRejectReasonCode;

    public GetDirectDebitByUuidDirectDebit withSchemeRejectReasonCode(GetDirectDebitByUuidDirectDebitSchemeRejectReasonCodeEnum schemeRejectReasonCode) {
        this.schemeRejectReasonCode = schemeRejectReasonCode;
        return this;
    }
    
    /**
     * The statuses of the direct debit payments associated with the mandate.
     * * 'RECIEVED' - Direct Debit has been recieved
     * * 'REJECT_REQUESTED' - The direct debit has a rejected request associated with it
     * * 'REJECT_READY_FOR_PROCESSING' 
     * * 'REJECT_RECORD_IN_PROGRESS'
     * * 'REJECT_RECORDED'
     * * 'REJECT_FILE_CREATED'
     * * 'REJECT_FILE_SENT'
     * * 'COLLECTED' - Direct debit collected
     * * 'REFUND_REQUESTED' - Refund requested on direct debit
     * * 'REFUND_RECORD_IN_PROGRESS' - Refund in progress on direct debit
     * * 'REFUND_RECORDED'
     * * 'REFUND_FILE_CREATED'
     * * 'REFUND_FILE_SENT' 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public GetDirectDebitByUuidDirectDebitStatusEnum status;

    public GetDirectDebitByUuidDirectDebit withStatus(GetDirectDebitByUuidDirectDebitStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The ican of your fire account that the money was taken from
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetIcan")
    public Long targetIcan;

    public GetDirectDebitByUuidDirectDebit withTargetIcan(Long targetIcan) {
        this.targetIcan = targetIcan;
        return this;
    }
    
    /**
     * The payee that was created when the DD was processed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetPayeeId")
    public Long targetPayeeId;

    public GetDirectDebitByUuidDirectDebit withTargetPayeeId(Long targetPayeeId) {
        this.targetPayeeId = targetPayeeId;
        return this;
    }
    
    /**
     * The type of the direct debit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public GetDirectDebitByUuidDirectDebitTypeEnum type;

    public GetDirectDebitByUuidDirectDebit withType(GetDirectDebitByUuidDirectDebitTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public GetDirectDebitByUuidDirectDebit(){}
}
