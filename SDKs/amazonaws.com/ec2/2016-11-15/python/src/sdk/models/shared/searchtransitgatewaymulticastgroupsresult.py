"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from enum import Enum
from typing import Optional

class SearchTransitGatewayMulticastGroupsResultMulticastGroupsMemberTypeEnum(str, Enum):
    r"""The member type (for example, <code>static</code>)."""
    STATIC = 'static'
    IGMP = 'igmp'

class SearchTransitGatewayMulticastGroupsResultMulticastGroupsResourceTypeEnum(str, Enum):
    r"""The type of resource, for example a VPC attachment."""
    VPC = 'vpc'
    VPN = 'vpn'
    DIRECT_CONNECT_GATEWAY = 'direct-connect-gateway'
    CONNECT = 'connect'
    PEERING = 'peering'
    TGW_PEERING = 'tgw-peering'

class SearchTransitGatewayMulticastGroupsResultMulticastGroupsSourceTypeEnum(str, Enum):
    r"""The source type."""
    STATIC = 'static'
    IGMP = 'igmp'


@dataclasses.dataclass
class SearchTransitGatewayMulticastGroupsResultMulticastGroups:
    r"""Describes the transit gateway multicast group resources."""
    
    group_ip_address: Optional[str] = dataclasses.field(default=None)  
    group_member: Optional[bool] = dataclasses.field(default=None)  
    group_source: Optional[bool] = dataclasses.field(default=None)  
    member_type: Optional[SearchTransitGatewayMulticastGroupsResultMulticastGroupsMemberTypeEnum] = dataclasses.field(default=None)  
    network_interface_id: Optional[str] = dataclasses.field(default=None)  
    resource_id: Optional[str] = dataclasses.field(default=None)  
    resource_owner_id: Optional[str] = dataclasses.field(default=None)  
    resource_type: Optional[SearchTransitGatewayMulticastGroupsResultMulticastGroupsResourceTypeEnum] = dataclasses.field(default=None)  
    source_type: Optional[SearchTransitGatewayMulticastGroupsResultMulticastGroupsSourceTypeEnum] = dataclasses.field(default=None)  
    subnet_id: Optional[str] = dataclasses.field(default=None)  
    transit_gateway_attachment_id: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class SearchTransitGatewayMulticastGroupsResult:
    r"""Success"""
    
    multicast_groups: Optional[list[SearchTransitGatewayMulticastGroupsResultMulticastGroups]] = dataclasses.field(default=None)  
    next_token: Optional[str] = dataclasses.field(default=None)  
    