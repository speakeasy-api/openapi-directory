// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VideoContentDetailsCaptionEnum - The value of captions indicates whether the video has captions or not.
type VideoContentDetailsCaptionEnum string

const (
	VideoContentDetailsCaptionEnumTrue  VideoContentDetailsCaptionEnum = "true"
	VideoContentDetailsCaptionEnumFalse VideoContentDetailsCaptionEnum = "false"
)

func (e *VideoContentDetailsCaptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = VideoContentDetailsCaptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoContentDetailsCaptionEnum: %s", s)
	}
}

// VideoContentDetailsDefinitionEnum - The value of definition indicates whether the video is available in high definition or only in standard definition.
type VideoContentDetailsDefinitionEnum string

const (
	VideoContentDetailsDefinitionEnumSd VideoContentDetailsDefinitionEnum = "sd"
	VideoContentDetailsDefinitionEnumHd VideoContentDetailsDefinitionEnum = "hd"
)

func (e *VideoContentDetailsDefinitionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "sd":
		fallthrough
	case "hd":
		*e = VideoContentDetailsDefinitionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoContentDetailsDefinitionEnum: %s", s)
	}
}

// VideoContentDetailsProjectionEnum - Specifies the projection format of the video.
type VideoContentDetailsProjectionEnum string

const (
	VideoContentDetailsProjectionEnumRectangular          VideoContentDetailsProjectionEnum = "rectangular"
	VideoContentDetailsProjectionEnumThreeHundredAndSixty VideoContentDetailsProjectionEnum = "360"
)

func (e *VideoContentDetailsProjectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "rectangular":
		fallthrough
	case "360":
		*e = VideoContentDetailsProjectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoContentDetailsProjectionEnum: %s", s)
	}
}

// VideoContentDetails - Details about the content of a YouTube Video.
type VideoContentDetails struct {
	// The value of captions indicates whether the video has captions or not.
	Caption *VideoContentDetailsCaptionEnum `json:"caption,omitempty"`
	// Ratings schemes. The country-specific ratings are mostly for movies and shows. LINT.IfChange
	ContentRating *ContentRating `json:"contentRating,omitempty"`
	// Rights management policy for YouTube resources.
	CountryRestriction *AccessPolicy `json:"countryRestriction,omitempty"`
	// The value of definition indicates whether the video is available in high definition or only in standard definition.
	Definition *VideoContentDetailsDefinitionEnum `json:"definition,omitempty"`
	// The value of dimension indicates whether the video is available in 3D or in 2D.
	Dimension *string `json:"dimension,omitempty"`
	// The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long.
	Duration *string `json:"duration,omitempty"`
	// Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader.
	HasCustomThumbnail *bool `json:"hasCustomThumbnail,omitempty"`
	// The value of is_license_content indicates whether the video is licensed content.
	LicensedContent *bool `json:"licensedContent,omitempty"`
	// Specifies the projection format of the video.
	Projection *VideoContentDetailsProjectionEnum `json:"projection,omitempty"`
	// DEPRECATED Region restriction of the video.
	RegionRestriction *VideoContentDetailsRegionRestriction `json:"regionRestriction,omitempty"`
}
