"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import httpvalidationerror as shared_httpvalidationerror
from ..shared import openaqresult as shared_openaqresult
from ..shared import spatial_enum as shared_spatial_enum
from ..shared import temporal_enum as shared_temporal_enum
from enum import Enum
from typing import Any, Optional

class AveragesV2GetV2AveragesGetSortSortEnum(str, Enum):
    r"""An enumeration."""
    ASC = 'asc'
    DESC = 'desc'


@dataclasses.dataclass
class AveragesV2GetV2AveragesGetRequest:
    
    spatial: shared_spatial_enum.SpatialEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'spatial', 'style': 'form', 'explode': True }})
    r"""An enumeration."""  
    temporal: shared_temporal_enum.TemporalEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'temporal', 'style': 'form', 'explode': True }})
    r"""An enumeration."""  
    country: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country', 'style': 'form', 'explode': True }})
    r"""Limit results by a certain country using two letter country code.
            (ex. ?country=US or ?country=US&country=MX)
    """  
    country_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country_id', 'style': 'form', 'explode': True }})
    r"""Limit results by a certain country using two letter country code.
            (ex. /US)
    """  
    date_from: Optional[Any] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'date_from', 'style': 'form', 'explode': True }})  
    date_to: Optional[Any] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'date_to', 'style': 'form', 'explode': True }})  
    group: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'group', 'style': 'form', 'explode': True }})  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Change the number of results returned."""  
    location: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'location', 'style': 'form', 'explode': True }})  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Paginate through results."""  
    parameter: Optional[list[Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parameter', 'style': 'form', 'explode': True }})  
    parameter_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parameter_id', 'style': 'form', 'explode': True }})  
    project: Optional[list[Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'project', 'style': 'form', 'explode': True }})  
    project_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'project_id', 'style': 'form', 'explode': True }})  
    sort: Optional[AveragesV2GetV2AveragesGetSortSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Define sort order."""  
    unit: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'unit', 'style': 'form', 'explode': True }})  
    

@dataclasses.dataclass
class AveragesV2GetV2AveragesGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    http_validation_error: Optional[shared_httpvalidationerror.HTTPValidationError] = dataclasses.field(default=None)
    r"""Validation Error"""  
    open_aq_result: Optional[shared_openaqresult.OpenAQResult] = dataclasses.field(default=None)
    r"""Successful Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    