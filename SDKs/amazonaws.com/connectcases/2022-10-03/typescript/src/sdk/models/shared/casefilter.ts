/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FieldFilter } from "./fieldfilter";
import { Expose, Type } from "class-transformer";

/**
 * A filter for cases. Only one value can be provided.
 */
export class CaseFilter extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: CaseFilter })
  @Expose({ name: "andAll" })
  @Type(() => CaseFilter)
  andAll?: CaseFilter[];

  @SpeakeasyMetadata()
  @Expose({ name: "field" })
  @Type(() => FieldFilter)
  field?: FieldFilter;

  /**
   * A filter for cases. Only one value can be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "not" })
  @Type(() => CaseFilter)
  not?: CaseFilter;
}
