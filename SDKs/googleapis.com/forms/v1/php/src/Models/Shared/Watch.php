<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Watch - A watch for events for a form. When the designated event happens, a notification will be published to the specified target. The notification's attributes will include a `formId` key that has the ID of the watched form and an `eventType` key that has the string of the type. Messages are sent with at-least-once delivery and are only dropped in extraordinary circumstances. Typically all notifications should be reliably delivered within a few seconds; however, in some situations notifications may be delayed. A watch expires seven days after it is created unless it is renewed with watches.renew
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Watch
{
    /**
     * Output only. Timestamp of when this was created.
     * 
     * @var ?string $createTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('createTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $createTime = null;
    
    /**
     * Output only. The most recent error type for an attempted delivery. To begin watching the form again a call can be made to watches.renew which also clears this error information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\WatchErrorTypeEnum $errorType
     */
	#[\JMS\Serializer\Annotation\SerializedName('errorType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\WatchErrorTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?WatchErrorTypeEnum $errorType = null;
    
    /**
     * Required. Which event type to watch for.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\WatchEventTypeEnum $eventType
     */
	#[\JMS\Serializer\Annotation\SerializedName('eventType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\WatchEventTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?WatchEventTypeEnum $eventType = null;
    
    /**
     * Output only. Timestamp for when this will expire. Each watches.renew call resets this to seven days in the future.
     * 
     * @var ?string $expireTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('expireTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $expireTime = null;
    
    /**
     * Output only. The ID of this watch. See notes on CreateWatchRequest.watch_id.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * Output only. The current state of the watch. Additional details about suspended watches can be found by checking the `error_type`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\WatchStateEnum $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\WatchStateEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?WatchStateEnum $state = null;
    
    /**
     * The target for notification delivery.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\WatchTarget $target
     */
	#[\JMS\Serializer\Annotation\SerializedName('target')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\WatchTarget')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?WatchTarget $target = null;
    
	public function __construct()
	{
		$this->createTime = null;
		$this->errorType = null;
		$this->eventType = null;
		$this->expireTime = null;
		$this->id = null;
		$this->state = null;
		$this->target = null;
	}
}
