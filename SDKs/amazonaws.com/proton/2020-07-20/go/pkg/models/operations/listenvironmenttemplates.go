// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListEnvironmentTemplatesQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

// ListEnvironmentTemplatesXAmzTargetEnum
type ListEnvironmentTemplatesXAmzTargetEnum string

const (
	ListEnvironmentTemplatesXAmzTargetEnumAwsProton20200720ListEnvironmentTemplates ListEnvironmentTemplatesXAmzTargetEnum = "AwsProton20200720.ListEnvironmentTemplates"
)

func (e *ListEnvironmentTemplatesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AwsProton20200720.ListEnvironmentTemplates":
		*e = ListEnvironmentTemplatesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEnvironmentTemplatesXAmzTargetEnum: %s", s)
	}
}

type ListEnvironmentTemplatesHeaders struct {
	XAmzAlgorithm     *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListEnvironmentTemplatesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListEnvironmentTemplatesRequest struct {
	QueryParams ListEnvironmentTemplatesQueryParams
	Headers     ListEnvironmentTemplatesHeaders
	Request     shared.ListEnvironmentTemplatesInput `request:"mediaType=application/json"`
}

type ListEnvironmentTemplatesResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerException
	InternalServerException interface{}
	// Success
	ListEnvironmentTemplatesOutput *shared.ListEnvironmentTemplatesOutput
	StatusCode                     int
	RawResponse                    *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
