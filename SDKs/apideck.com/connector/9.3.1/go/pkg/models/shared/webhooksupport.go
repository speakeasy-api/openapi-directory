// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// WebhookSupportManagedViaEnum - How the subscription is managed in the downstream.
type WebhookSupportManagedViaEnum string

const (
	WebhookSupportManagedViaEnumManual WebhookSupportManagedViaEnum = "manual"
	WebhookSupportManagedViaEnumAPI    WebhookSupportManagedViaEnum = "api"
)

func (e WebhookSupportManagedViaEnum) ToPointer() *WebhookSupportManagedViaEnum {
	return &e
}

func (e *WebhookSupportManagedViaEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		fallthrough
	case "api":
		*e = WebhookSupportManagedViaEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookSupportManagedViaEnum: %v", v)
	}
}

// WebhookSupportModeEnum - Mode of the webhook support.
type WebhookSupportModeEnum string

const (
	WebhookSupportModeEnumNative  WebhookSupportModeEnum = "native"
	WebhookSupportModeEnumVirtual WebhookSupportModeEnum = "virtual"
	WebhookSupportModeEnumNone    WebhookSupportModeEnum = "none"
)

func (e WebhookSupportModeEnum) ToPointer() *WebhookSupportModeEnum {
	return &e
}

func (e *WebhookSupportModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "native":
		fallthrough
	case "virtual":
		fallthrough
	case "none":
		*e = WebhookSupportModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookSupportModeEnum: %v", v)
	}
}

// WebhookSupportSubscriptionLevelEnum - Received events are scoped to connection or across integration.
type WebhookSupportSubscriptionLevelEnum string

const (
	WebhookSupportSubscriptionLevelEnumConnection  WebhookSupportSubscriptionLevelEnum = "connection"
	WebhookSupportSubscriptionLevelEnumIntegration WebhookSupportSubscriptionLevelEnum = "integration"
)

func (e WebhookSupportSubscriptionLevelEnum) ToPointer() *WebhookSupportSubscriptionLevelEnum {
	return &e
}

func (e *WebhookSupportSubscriptionLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "connection":
		fallthrough
	case "integration":
		*e = WebhookSupportSubscriptionLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookSupportSubscriptionLevelEnum: %v", v)
	}
}

// WebhookSupportVirtualWebhooksRequestRateUnitEnum - The window unit for the rate.
type WebhookSupportVirtualWebhooksRequestRateUnitEnum string

const (
	WebhookSupportVirtualWebhooksRequestRateUnitEnumSecond WebhookSupportVirtualWebhooksRequestRateUnitEnum = "second"
	WebhookSupportVirtualWebhooksRequestRateUnitEnumMinute WebhookSupportVirtualWebhooksRequestRateUnitEnum = "minute"
	WebhookSupportVirtualWebhooksRequestRateUnitEnumHour   WebhookSupportVirtualWebhooksRequestRateUnitEnum = "hour"
	WebhookSupportVirtualWebhooksRequestRateUnitEnumDay    WebhookSupportVirtualWebhooksRequestRateUnitEnum = "day"
)

func (e WebhookSupportVirtualWebhooksRequestRateUnitEnum) ToPointer() *WebhookSupportVirtualWebhooksRequestRateUnitEnum {
	return &e
}

func (e *WebhookSupportVirtualWebhooksRequestRateUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "second":
		fallthrough
	case "minute":
		fallthrough
	case "hour":
		fallthrough
	case "day":
		*e = WebhookSupportVirtualWebhooksRequestRateUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookSupportVirtualWebhooksRequestRateUnitEnum: %v", v)
	}
}

// WebhookSupportVirtualWebhooksRequestRate - The rate at which requests for resources will be made to downstream.
type WebhookSupportVirtualWebhooksRequestRate struct {
	// The number of requests per window unit.
	Rate int64 `json:"rate"`
	// Size of request window.
	Size int64 `json:"size"`
	// The window unit for the rate.
	Unit WebhookSupportVirtualWebhooksRequestRateUnitEnum `json:"unit"`
}

// WebhookSupportVirtualWebhooks - Virtual webhook config for the connector.
type WebhookSupportVirtualWebhooks struct {
	// The rate at which requests for resources will be made to downstream.
	RequestRate WebhookSupportVirtualWebhooksRequestRate `json:"request_rate"`
	// The resources that will be requested from downstream.
	Resources map[string]interface{} `json:"resources,omitempty"`
}

// WebhookSupport - How webhooks are supported for the connector. Sometimes the connector natively supports webhooks, other times Apideck virtualizes them based on polling.
type WebhookSupport struct {
	// How the subscription is managed in the downstream.
	ManagedVia *WebhookSupportManagedViaEnum `json:"managed_via,omitempty"`
	// Mode of the webhook support.
	Mode *WebhookSupportModeEnum `json:"mode,omitempty"`
	// Received events are scoped to connection or across integration.
	SubscriptionLevel *WebhookSupportSubscriptionLevelEnum `json:"subscription_level,omitempty"`
	// Virtual webhook config for the connector.
	VirtualWebhooks *WebhookSupportVirtualWebhooks `json:"virtual_webhooks,omitempty"`
}
