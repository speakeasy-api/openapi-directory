// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ScimEnterpriseUserResponseGroups struct {
	DollarRef *string `json:"$ref,omitempty"`
	Display   *string `json:"display,omitempty"`
	Value     *string `json:"value,omitempty"`
}

type ScimEnterpriseUserResponseSchemasEnum string

const (
	ScimEnterpriseUserResponseSchemasEnumUrnIetfParamsScimSchemasCore20User ScimEnterpriseUserResponseSchemasEnum = "urn:ietf:params:scim:schemas:core:2.0:User"
)

func (e ScimEnterpriseUserResponseSchemasEnum) ToPointer() *ScimEnterpriseUserResponseSchemasEnum {
	return &e
}

func (e *ScimEnterpriseUserResponseSchemasEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:schemas:core:2.0:User":
		*e = ScimEnterpriseUserResponseSchemasEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScimEnterpriseUserResponseSchemasEnum: %v", v)
	}
}

// ScimEnterpriseUserResponse - User has been created
type ScimEnterpriseUserResponse struct {
	// Whether the user active in the IdP.
	Active bool `json:"active"`
	// A human-readable name for the user.
	DisplayName *string `json:"displayName,omitempty"`
	// The emails for the user.
	Emails []UserEmailsResponse `json:"emails"`
	// A unique identifier for the resource as defined by the provisioning client.
	ExternalID *string `json:"externalId,omitempty"`
	// Provisioned SCIM groups that the user is a member of.
	Groups []ScimEnterpriseUserResponseGroups `json:"groups,omitempty"`
	// The internally generated id for the user object.
	ID string `json:"id"`
	// The metadata associated with the creation/updates to the user.
	Meta Meta              `json:"meta"`
	Name *UserNameResponse `json:"name,omitempty"`
	// The roles assigned to the user.
	Roles []UserRole `json:"roles,omitempty"`
	// The URIs that are used to indicate the namespaces of the SCIM schemas.
	Schemas []ScimEnterpriseUserResponseSchemasEnum `json:"schemas"`
	// The username for the user.
	UserName *string `json:"userName,omitempty"`
}
