"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import creditmemotaxitemfrominvoicetaxitemtype as shared_creditmemotaxitemfrominvoicetaxitemtype
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreditMemoItemFromInvoiceItemTypeFinanceInformation:
    r"""Container for the finance information related to the credit memo item."""
    
    deferred_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deferredRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for the deferred revenue, such as Monthly Recurring Liability."""  
    on_account_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onAccountAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code that maps to an on account in your accounting system."""  
    recognized_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognizedRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges."""  
    revenue_recognition_rule_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueRecognitionRuleName'), 'exclude': lambda f: f is None }})
    r"""The name of the revenue recognition rule governing the revenue schedule."""  
    
class CreditMemoItemFromInvoiceItemTypeTaxModeEnum(str, Enum):
    r"""The tax mode of the credit memo item, indicating whether the amount of the credit memo item includes tax.
    
    **Note**: You can set this field to `TaxInclusive` only if the `taxAutoCalculation` field is set to `true`.
    
    If you set `taxMode` to `TaxInclusive`, you cannot input tax amounts for credit memo items. The corresponding invoice item must use the same tax engine as the credit memo item to calculate tax amounts.
    """
    TAX_EXCLUSIVE = 'TaxExclusive'
    TAX_INCLUSIVE = 'TaxInclusive'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreditMemoItemFromInvoiceItemType:
    r"""Container for custom fields of a Credit Memo Item object."""
    
    amount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The amount of the credit memo item."""  
    sku_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skuName') }})
    r"""The name of the charge associated with the invoice."""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Comments about the credit memo item.
    
    **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later.
    """  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the credit memo item.
    
    **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later.
    """  
    finance_information: Optional[CreditMemoItemFromInvoiceItemTypeFinanceInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('financeInformation'), 'exclude': lambda f: f is None }})
    r"""Container for the finance information related to the credit memo item."""  
    invoice_item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoiceItemId'), 'exclude': lambda f: f is None }})
    r"""The ID of the invoice item."""  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""The number of units for the credit memo item."""  
    service_end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceEndDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The service end date of the credit memo item."""  
    service_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceStartDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The service start date of the credit memo item."""  
    tax_items: Optional[list[shared_creditmemotaxitemfrominvoicetaxitemtype.CreditMemoTaxItemFromInvoiceTaxItemType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxItems'), 'exclude': lambda f: f is None }})
    r"""Container for taxation items."""  
    tax_mode: Optional[CreditMemoItemFromInvoiceItemTypeTaxModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxMode'), 'exclude': lambda f: f is None }})
    r"""The tax mode of the credit memo item, indicating whether the amount of the credit memo item includes tax.
    
    **Note**: You can set this field to `TaxInclusive` only if the `taxAutoCalculation` field is set to `true`.
    
    If you set `taxMode` to `TaxInclusive`, you cannot input tax amounts for credit memo items. The corresponding invoice item must use the same tax engine as the credit memo item to calculate tax amounts.
    """  
    unit_of_measure: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitOfMeasure'), 'exclude': lambda f: f is None }})
    r"""The definable unit that you measure when determining charges."""  
    