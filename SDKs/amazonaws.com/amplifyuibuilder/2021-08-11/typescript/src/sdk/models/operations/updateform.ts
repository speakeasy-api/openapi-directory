/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Updates and saves all of the information about a form, based on form ID.
 */
export class UpdateFormRequestBodyUpdatedForm extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "cta" })
  @Type(() => shared.FormCTA)
  cta?: shared.FormCTA;

  @SpeakeasyMetadata()
  @Expose({ name: "dataType" })
  @Type(() => shared.FormDataTypeConfig)
  dataType?: shared.FormDataTypeConfig;

  @SpeakeasyMetadata({ elemType: shared.FieldConfig })
  @Expose({ name: "fields" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.FieldConfig> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.FieldConfig);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  fields?: Record<string, shared.FieldConfig>;

  @SpeakeasyMetadata()
  @Expose({ name: "formActionType" })
  formActionType?: shared.FormActionTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "schemaVersion" })
  schemaVersion?: string;

  @SpeakeasyMetadata({ elemType: shared.SectionalElement })
  @Expose({ name: "sectionalElements" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.SectionalElement> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.SectionalElement);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  sectionalElements?: Record<string, shared.SectionalElement>;

  @SpeakeasyMetadata()
  @Expose({ name: "style" })
  @Type(() => shared.FormStyle)
  style?: shared.FormStyle;
}

export class UpdateFormRequestBody extends SpeakeasyBase {
  /**
   * Updates and saves all of the information about a form, based on form ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedForm" })
  @Type(() => UpdateFormRequestBodyUpdatedForm)
  updatedForm: UpdateFormRequestBodyUpdatedForm;
}

export class UpdateFormRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateFormRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The unique ID for the Amplify app.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=appId",
  })
  appId: string;

  /**
   * The unique client token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=clientToken",
  })
  clientToken?: string;

  /**
   * The name of the backend environment that is part of the Amplify app.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=environmentName",
  })
  environmentName: string;

  /**
   * The unique ID for the form.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;
}

export class UpdateFormResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceConflictException
   */
  @SpeakeasyMetadata()
  resourceConflictException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateFormResponse?: shared.UpdateFormResponse;
}
