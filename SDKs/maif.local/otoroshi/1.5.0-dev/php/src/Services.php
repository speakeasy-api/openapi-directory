<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Services 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get all services
     * 
     * Get all services
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AllServicesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AllServicesResponse
     */
	public function allServices(
        \OpenAPI\OpenAPI\Models\Operations\AllServicesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AllServicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AllServicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->services = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Service>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a new service descriptor
     * 
     * Create a new service descriptor
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\Service $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
     */
	public function createService(
        \OpenAPI\OpenAPI\Models\Shared\Service $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Service', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a service descriptor error template
     * 
     * Update a service descriptor targets
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceTemplateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceTemplateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateServiceTemplateResponse
     */
	public function createServiceTemplate(
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceTemplateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceTemplateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateServiceTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/template', \OpenAPI\OpenAPI\Models\Operations\CreateServiceTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "errorTemplate", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateServiceTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorTemplate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a service descriptor
     * 
     * Delete a service descriptor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
     */
	public function deleteService(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleted = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Deleted', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a service descriptor error template
     * 
     * Delete a service descriptor error template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceTemplateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceTemplateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceTemplateResponse
     */
	public function deleteServiceTemplate(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceTemplateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceTemplateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/template', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleted = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Deleted', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update a service descriptor with a diff
     * 
     * Update a service descriptor with a diff
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchServiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchServiceResponse
     */
	public function patchService(
        \OpenAPI\OpenAPI\Models\Operations\PatchServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchServiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}', \OpenAPI\OpenAPI\Models\Operations\PatchServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Service', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get a service descriptor
     * 
     * Get a service descriptor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceResponse
     */
	public function service(
        \OpenAPI\OpenAPI\Models\Operations\ServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}', \OpenAPI\OpenAPI\Models\Operations\ServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Service', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Add a target to a service descriptor
     * 
     * Add a target to a service descriptor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceAddTargetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceAddTargetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceAddTargetResponse
     */
	public function serviceAddTarget(
        \OpenAPI\OpenAPI\Models\Operations\ServiceAddTargetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceAddTargetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceAddTargetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/targets', \OpenAPI\OpenAPI\Models\Operations\ServiceAddTargetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "target", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceAddTargetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targets = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Target>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a service descriptor target
     * 
     * Delete a service descriptor target
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceDeleteTargetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceDeleteTargetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceDeleteTargetResponse
     */
	public function serviceDeleteTarget(
        \OpenAPI\OpenAPI\Models\Operations\ServiceDeleteTargetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceDeleteTargetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceDeleteTargetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/targets', \OpenAPI\OpenAPI\Models\Operations\ServiceDeleteTargetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceDeleteTargetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targets = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Target>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get all services descriptor for a group
     * 
     * Get all services descriptor for a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceGroupServicesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceGroupServicesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceGroupServicesResponse
     */
	public function serviceGroupServices(
        \OpenAPI\OpenAPI\Models\Operations\ServiceGroupServicesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceGroupServicesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceGroupServicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/groups/{serviceGroupId}/services', \OpenAPI\OpenAPI\Models\Operations\ServiceGroupServicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceGroupServicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKeys = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ApiKey>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get a service descriptor targets
     * 
     * Get a service descriptor targets
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceTargetsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceTargetsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceTargetsResponse
     */
	public function serviceTargets(
        \OpenAPI\OpenAPI\Models\Operations\ServiceTargetsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceTargetsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceTargetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/targets', \OpenAPI\OpenAPI\Models\Operations\ServiceTargetsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceTargetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targets = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Target>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get a service descriptor error template
     * 
     * Get a service descriptor error template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceTemplateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceTemplateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceTemplateResponse
     */
	public function serviceTemplate(
        \OpenAPI\OpenAPI\Models\Operations\ServiceTemplateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceTemplateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/template', \OpenAPI\OpenAPI\Models\Operations\ServiceTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorTemplate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update a service descriptor
     * 
     * Update a service descriptor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse
     */
	public function updateService(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "service", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Service', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update a service descriptor targets
     * 
     * Update a service descriptor targets
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceTargetsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceTargetsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceTargetsResponse
     */
	public function updateServiceTargets(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceTargetsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceTargetsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceTargetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/targets', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceTargetsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceTargetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targets = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Target>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update an error template to a service descriptor
     * 
     * Update an error template to a service descriptor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceTemplateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceTemplateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceTemplateResponse
     */
	public function updateServiceTemplate(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceTemplateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceTemplateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/template', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "errorTemplate", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorTemplate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}