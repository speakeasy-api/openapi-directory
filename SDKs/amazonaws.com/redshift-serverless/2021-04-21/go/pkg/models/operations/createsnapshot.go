// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateSnapshotXAmzTargetEnum
type CreateSnapshotXAmzTargetEnum string

const (
	CreateSnapshotXAmzTargetEnumRedshiftServerlessCreateSnapshot CreateSnapshotXAmzTargetEnum = "RedshiftServerless.CreateSnapshot"
)

func (e CreateSnapshotXAmzTargetEnum) ToPointer() *CreateSnapshotXAmzTargetEnum {
	return &e
}

func (e *CreateSnapshotXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RedshiftServerless.CreateSnapshot":
		*e = CreateSnapshotXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSnapshotXAmzTargetEnum: %v", v)
	}
}

type CreateSnapshotRequest struct {
	CreateSnapshotRequest shared.CreateSnapshotRequest `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            CreateSnapshotXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateSnapshotResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateSnapshotResponse *shared.CreateSnapshotResponse
	// InternalServerException
	InternalServerException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// TooManyTagsException
	TooManyTagsException interface{}
	// ValidationException
	ValidationException interface{}
}
