"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import minimal_repository as shared_minimal_repository
from enum import Enum
from typing import Optional

class ReposListForUserDirectionEnum(str, Enum):
    r"""Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`"""
    ASC = 'asc'
    DESC = 'desc'

class ReposListForUserSortEnum(str, Enum):
    r"""Can be one of `created`, `updated`, `pushed`, `full_name`."""
    CREATED = 'created'
    UPDATED = 'updated'
    PUSHED = 'pushed'
    FULL_NAME = 'full_name'

class ReposListForUserTypeEnum(str, Enum):
    r"""Can be one of `all`, `owner`, `member`."""
    ALL = 'all'
    OWNER = 'owner'
    MEMBER = 'member'


@dataclasses.dataclass
class ReposListForUserRequest:
    
    username: str = dataclasses.field(metadata={'path_param': { 'field_name': 'username', 'style': 'simple', 'explode': False }})  
    direction: Optional[ReposListForUserDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Results per page (max 100)"""  
    sort: Optional[ReposListForUserSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Can be one of `created`, `updated`, `pushed`, `full_name`."""  
    type: Optional[ReposListForUserTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Can be one of `all`, `owner`, `member`."""  
    

@dataclasses.dataclass
class ReposListForUserResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    minimal_repositories: Optional[list[shared_minimal_repository.MinimalRepository]] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    