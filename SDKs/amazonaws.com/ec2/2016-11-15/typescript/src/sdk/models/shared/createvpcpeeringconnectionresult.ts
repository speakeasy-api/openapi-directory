/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * Describes an IPv4 CIDR block.
 */
export class CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrBlock?: string;
}

/**
 * Describes an IPv6 CIDR block.
 */
export class CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  ipv6CidrBlock?: string;
}

/**
 * Information about the VPC peering connection options for the accepter or requester VPC.
 */
export class CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  allowDnsResolutionFromRemoteVpc?: boolean;

  @SpeakeasyMetadata()
  allowEgressFromLocalClassicLinkToRemoteVpc?: boolean;

  @SpeakeasyMetadata()
  allowEgressFromLocalVpcToRemoteClassicLink?: boolean;
}

/**
 * Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.
 */
export class CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrBlock?: string;

  @SpeakeasyMetadata({
    elemType:
      CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet,
  })
  cidrBlockSet?: CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoCidrBlockSet[];

  @SpeakeasyMetadata({
    elemType:
      CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet,
  })
  ipv6CidrBlockSet?: CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoIpv6CidrBlockSet[];

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata()
  peeringOptions?: CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfoPeeringOptions;

  @SpeakeasyMetadata()
  region?: string;

  @SpeakeasyMetadata()
  vpcId?: string;
}

/**
 * Describes an IPv4 CIDR block.
 */
export class CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrBlock?: string;
}

/**
 * Describes an IPv6 CIDR block.
 */
export class CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  ipv6CidrBlock?: string;
}

/**
 * Information about the VPC peering connection options for the accepter or requester VPC.
 */
export class CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  allowDnsResolutionFromRemoteVpc?: boolean;

  @SpeakeasyMetadata()
  allowEgressFromLocalClassicLinkToRemoteVpc?: boolean;

  @SpeakeasyMetadata()
  allowEgressFromLocalVpcToRemoteClassicLink?: boolean;
}

/**
 * Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.
 */
export class CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrBlock?: string;

  @SpeakeasyMetadata({
    elemType:
      CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet,
  })
  cidrBlockSet?: CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoCidrBlockSet[];

  @SpeakeasyMetadata({
    elemType:
      CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet,
  })
  ipv6CidrBlockSet?: CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoIpv6CidrBlockSet[];

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata()
  peeringOptions?: CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfoPeeringOptions;

  @SpeakeasyMetadata()
  region?: string;

  @SpeakeasyMetadata()
  vpcId?: string;
}

/**
 * The status of the VPC peering connection.
 */
export enum CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum {
  InitiatingRequest = "initiating-request",
  PendingAcceptance = "pending-acceptance",
  Active = "active",
  Deleted = "deleted",
  Rejected = "rejected",
  Failed = "failed",
  Expired = "expired",
  Provisioning = "provisioning",
  Deleting = "deleting",
}

/**
 * The status of the VPC peering connection.
 */
export class CreateVpcPeeringConnectionResultVpcPeeringConnectionStatus extends SpeakeasyBase {
  @SpeakeasyMetadata()
  code?: CreateVpcPeeringConnectionResultVpcPeeringConnectionStatusCodeEnum;

  @SpeakeasyMetadata()
  message?: string;
}

/**
 * Describes a tag.
 */
export class CreateVpcPeeringConnectionResultVpcPeeringConnectionTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Information about the VPC peering connection.
 */
export class CreateVpcPeeringConnectionResultVpcPeeringConnection extends SpeakeasyBase {
  @SpeakeasyMetadata()
  accepterVpcInfo?: CreateVpcPeeringConnectionResultVpcPeeringConnectionAccepterVpcInfo;

  @SpeakeasyMetadata()
  expirationTime?: Date;

  @SpeakeasyMetadata()
  requesterVpcInfo?: CreateVpcPeeringConnectionResultVpcPeeringConnectionRequesterVpcInfo;

  @SpeakeasyMetadata()
  status?: CreateVpcPeeringConnectionResultVpcPeeringConnectionStatus;

  @SpeakeasyMetadata({
    elemType: CreateVpcPeeringConnectionResultVpcPeeringConnectionTags,
  })
  tags?: CreateVpcPeeringConnectionResultVpcPeeringConnectionTags[];

  @SpeakeasyMetadata()
  vpcPeeringConnectionId?: string;
}

/**
 * Success
 */
export class CreateVpcPeeringConnectionResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  vpcPeeringConnection?: CreateVpcPeeringConnectionResultVpcPeeringConnection;
}
