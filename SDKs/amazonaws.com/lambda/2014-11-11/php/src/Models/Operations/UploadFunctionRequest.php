<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class UploadFunctionRequest
{
    /**
     * A short, user-defined function description. Lambda does not use this value. Assign a meaningful description as you see fit.
     * 
     * @var ?string $description
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Description')]
    public ?string $description = null;
    
    /**
     * The name you want to assign to the function you are uploading. The function names appear in the console and are returned in the <a>ListFunctions</a> API. Function names are used to specify functions to other AWS Lambda APIs, such as <a>InvokeAsync</a>. 
     * 
     * @var string $functionName
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=FunctionName')]
    public string $functionName;
    
    /**
     * The function that Lambda calls to begin execution. For Node.js, it is the <i>module-name</i>.<i>export</i> value in your function. 
     * 
     * @var string $handler
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Handler')]
    public string $handler;
    
    /**
     * The amount of memory, in MB, your Lambda function is given. Lambda uses this memory size to infer the amount of CPU allocated to your function. Your function use-case determines your CPU and memory requirements. For example, database operation might need less memory compared to image processing function. The default value is 128 MB. The value must be a multiple of 64 MB.
     * 
     * @var ?int $memorySize
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=MemorySize')]
    public ?int $memorySize = null;
    
    /**
     * How the Lambda function will be invoked. Lambda supports only the "event" mode. 
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\UploadFunctionModeEnum $mode
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Mode')]
    public UploadFunctionModeEnum $mode;
    
	#[SpeakeasyMetadata('request:mediaType=application/json')]
    public UploadFunctionRequestBody $requestBody;
    
    /**
     * The Amazon Resource Name (ARN) of the IAM role that Lambda assumes when it executes your function to access any other Amazon Web Services (AWS) resources. 
     * 
     * @var string $role
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Role')]
    public string $role;
    
    /**
     * The runtime environment for the Lambda function you are uploading. Currently, Lambda supports only "nodejs" as the runtime.
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\UploadFunctionRuntimeEnum $runtime
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Runtime')]
    public UploadFunctionRuntimeEnum $runtime;
    
    /**
     * The function execution time at which Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds. 
     * 
     * @var ?int $timeout
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Timeout')]
    public ?int $timeout = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Algorithm')]
    public ?string $xAmzAlgorithm = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Content-Sha256')]
    public ?string $xAmzContentSha256 = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Credential')]
    public ?string $xAmzCredential = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Date')]
    public ?string $xAmzDate = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Security-Token')]
    public ?string $xAmzSecurityToken = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Signature')]
    public ?string $xAmzSignature = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-SignedHeaders')]
    public ?string $xAmzSignedHeaders = null;
    
	public function __construct()
	{
		$this->description = null;
		$this->functionName = "";
		$this->handler = "";
		$this->memorySize = null;
		$this->mode = \OpenAPI\OpenAPI\Models\Operations\UploadFunctionModeEnum::EVENT;
		$this->requestBody = new \OpenAPI\OpenAPI\Models\Operations\UploadFunctionRequestBody();
		$this->role = "";
		$this->runtime = \OpenAPI\OpenAPI\Models\Operations\UploadFunctionRuntimeEnum::NODEJS;
		$this->timeout = null;
		$this->xAmzAlgorithm = null;
		$this->xAmzContentSha256 = null;
		$this->xAmzCredential = null;
		$this->xAmzDate = null;
		$this->xAmzSecurityToken = null;
		$this->xAmzSignature = null;
		$this->xAmzSignedHeaders = null;
	}
}
