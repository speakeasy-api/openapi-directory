/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Where channel data is stored. You may choose one of <code>serviceManagedS3</code>, <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. This can't be changed after creation of the channel.
 */
export class CreateChannelRequestBodyChannelStorage extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "customerManagedS3" })
  @Type(() => shared.CustomerManagedChannelS3Storage)
  customerManagedS3?: shared.CustomerManagedChannelS3Storage;

  @SpeakeasyMetadata()
  @Expose({ name: "serviceManagedS3" })
  serviceManagedS3?: Record<string, any>;
}

/**
 * How long, in days, message data is kept.
 */
export class CreateChannelRequestBodyRetentionPeriod extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "numberOfDays" })
  numberOfDays?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "unlimited" })
  unlimited?: boolean;
}

export class CreateChannelRequestBody extends SpeakeasyBase {
  /**
   * The name of the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channelName" })
  channelName: string;

  /**
   * Where channel data is stored. You may choose one of <code>serviceManagedS3</code>, <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. This can't be changed after creation of the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channelStorage" })
  @Type(() => CreateChannelRequestBodyChannelStorage)
  channelStorage?: CreateChannelRequestBodyChannelStorage;

  /**
   * How long, in days, message data is kept.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retentionPeriod" })
  @Type(() => CreateChannelRequestBodyRetentionPeriod)
  retentionPeriod?: CreateChannelRequestBodyRetentionPeriod;

  /**
   * Metadata which can be used to manage the channel.
   */
  @SpeakeasyMetadata({ elemType: shared.Tag })
  @Expose({ name: "tags" })
  @Type(() => shared.Tag)
  tags?: shared.Tag[];
}

export class CreateChannelRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateChannelRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateChannelResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createChannelResponse?: shared.CreateChannelResponse;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceAlreadyExistsException
   */
  @SpeakeasyMetadata()
  resourceAlreadyExistsException?: any;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
