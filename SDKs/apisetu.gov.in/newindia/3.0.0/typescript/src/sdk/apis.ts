/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class APIs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Insurance Policy - Car
   *
   * @remarks
   * API to verify Insurance Policy - Car.
   */
  cripc(
    req: operations.CripcRequestBody,
    security: operations.CripcSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CripcResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CripcRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/cripc/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CripcSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CripcResponse = new operations.CripcResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cripc400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cripc400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cripc401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cripc401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cripc404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cripc404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cripc500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cripc500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cripc502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cripc502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cripc503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cripc503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cripc504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cripc504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Insurance Policy - Commercial Vehicle
   *
   * @remarks
   * API to verify Insurance Policy - Commercial Vehicle.
   */
  cvipc(
    req: operations.CvipcRequestBody,
    security: operations.CvipcSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CvipcResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CvipcRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/cvipc/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CvipcSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CvipcResponse = new operations.CvipcResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cvipc400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cvipc400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cvipc401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cvipc401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cvipc404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cvipc404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cvipc500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cvipc500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cvipc502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cvipc502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cvipc503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cvipc503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cvipc504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Cvipc504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Insurance Policy - Engineering
   *
   * @remarks
   * API to verify Insurance Policy - Engineering.
   */
  egipc(
    req: operations.EgipcRequestBody,
    security: operations.EgipcSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EgipcResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EgipcRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/egipc/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EgipcSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EgipcResponse = new operations.EgipcResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.egipc400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Egipc400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.egipc401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Egipc401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.egipc404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Egipc404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.egipc500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Egipc500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.egipc502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Egipc502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.egipc503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Egipc503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.egipc504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Egipc504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Insurance Policy - Health
   *
   * @remarks
   * API to verify Insurance Policy - Health.
   */
  hlipc(
    req: operations.HlipcRequestBody,
    security: operations.HlipcSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.HlipcResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.HlipcRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/hlipc/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.HlipcSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HlipcResponse = new operations.HlipcResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hlipc400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hlipc400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hlipc401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hlipc401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hlipc404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hlipc404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hlipc500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hlipc500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hlipc502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hlipc502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hlipc503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hlipc503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hlipc504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hlipc504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Insurance Policy - Miscellaneous
   *
   * @remarks
   * API to verify Insurance Policy - Miscellaneous.
   */
  miipc(
    req: operations.MiipcRequestBody,
    security: operations.MiipcSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MiipcResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MiipcRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/miipc/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MiipcSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MiipcResponse = new operations.MiipcResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.miipc400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Miipc400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.miipc401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Miipc401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.miipc404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Miipc404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.miipc500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Miipc500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.miipc502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Miipc502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.miipc503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Miipc503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.miipc504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Miipc504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Insurance Policy - Travel
   *
   * @remarks
   * API to verify Insurance Policy - Travel.
   */
  tripc(
    req: operations.TripcRequestBody,
    security: operations.TripcSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TripcResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TripcRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tripc/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TripcSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TripcResponse = new operations.TripcResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tripc400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tripc400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tripc401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tripc401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tripc404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tripc404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tripc500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tripc500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tripc502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tripc502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tripc503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tripc503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tripc504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Tripc504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Insurance Policy - Two Wheeler
   *
   * @remarks
   * API to verify Insurance Policy - Two Wheeler.
   */
  twipc(
    req: operations.TwipcRequestBody,
    security: operations.TwipcSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TwipcResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TwipcRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/twipc/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TwipcSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TwipcResponse = new operations.TwipcResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.twipc400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Twipc400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.twipc401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Twipc401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.twipc404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Twipc404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.twipc500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Twipc500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.twipc502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Twipc502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.twipc503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Twipc503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.twipc504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Twipc504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
