"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AdvertiserGroups:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dfareporting_advertiser_groups_delete(self, request: operations.DfareportingAdvertiserGroupsDeleteRequest, security: operations.DfareportingAdvertiserGroupsDeleteSecurity) -> operations.DfareportingAdvertiserGroupsDeleteResponse:
        r"""Deletes an existing advertiser group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingAdvertiserGroupsDeleteRequest, base_url, '/userprofiles/{profileId}/advertiserGroups/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingAdvertiserGroupsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingAdvertiserGroupsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dfareporting_advertiser_groups_get(self, request: operations.DfareportingAdvertiserGroupsGetRequest, security: operations.DfareportingAdvertiserGroupsGetSecurity) -> operations.DfareportingAdvertiserGroupsGetResponse:
        r"""Gets one advertiser group by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingAdvertiserGroupsGetRequest, base_url, '/userprofiles/{profileId}/advertiserGroups/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingAdvertiserGroupsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingAdvertiserGroupsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdvertiserGroup])
                res.advertiser_group = out

        return res

    def dfareporting_advertiser_groups_insert(self, request: operations.DfareportingAdvertiserGroupsInsertRequest, security: operations.DfareportingAdvertiserGroupsInsertSecurity) -> operations.DfareportingAdvertiserGroupsInsertResponse:
        r"""Inserts a new advertiser group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingAdvertiserGroupsInsertRequest, base_url, '/userprofiles/{profileId}/advertiserGroups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "advertiser_group", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingAdvertiserGroupsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingAdvertiserGroupsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdvertiserGroup])
                res.advertiser_group = out

        return res

    def dfareporting_advertiser_groups_list(self, request: operations.DfareportingAdvertiserGroupsListRequest, security: operations.DfareportingAdvertiserGroupsListSecurity) -> operations.DfareportingAdvertiserGroupsListResponse:
        r"""Retrieves a list of advertiser groups, possibly filtered. This method supports paging."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingAdvertiserGroupsListRequest, base_url, '/userprofiles/{profileId}/advertiserGroups', request)
        
        query_params = utils.get_query_params(operations.DfareportingAdvertiserGroupsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingAdvertiserGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdvertiserGroupsListResponse])
                res.advertiser_groups_list_response = out

        return res

    def dfareporting_advertiser_groups_patch(self, request: operations.DfareportingAdvertiserGroupsPatchRequest, security: operations.DfareportingAdvertiserGroupsPatchSecurity) -> operations.DfareportingAdvertiserGroupsPatchResponse:
        r"""Updates an existing advertiser group. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingAdvertiserGroupsPatchRequest, base_url, '/userprofiles/{profileId}/advertiserGroups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "advertiser_group", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingAdvertiserGroupsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingAdvertiserGroupsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdvertiserGroup])
                res.advertiser_group = out

        return res

    def dfareporting_advertiser_groups_update(self, request: operations.DfareportingAdvertiserGroupsUpdateRequest, security: operations.DfareportingAdvertiserGroupsUpdateSecurity) -> operations.DfareportingAdvertiserGroupsUpdateResponse:
        r"""Updates an existing advertiser group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingAdvertiserGroupsUpdateRequest, base_url, '/userprofiles/{profileId}/advertiserGroups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "advertiser_group", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingAdvertiserGroupsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingAdvertiserGroupsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdvertiserGroup])
                res.advertiser_group = out

        return res

    