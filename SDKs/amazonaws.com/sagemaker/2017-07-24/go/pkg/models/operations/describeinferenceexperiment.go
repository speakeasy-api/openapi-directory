// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeInferenceExperimentXAmzTargetEnum
type DescribeInferenceExperimentXAmzTargetEnum string

const (
	DescribeInferenceExperimentXAmzTargetEnumSageMakerDescribeInferenceExperiment DescribeInferenceExperimentXAmzTargetEnum = "SageMaker.DescribeInferenceExperiment"
)

func (e DescribeInferenceExperimentXAmzTargetEnum) ToPointer() *DescribeInferenceExperimentXAmzTargetEnum {
	return &e
}

func (e *DescribeInferenceExperimentXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SageMaker.DescribeInferenceExperiment":
		*e = DescribeInferenceExperimentXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeInferenceExperimentXAmzTargetEnum: %v", v)
	}
}

type DescribeInferenceExperimentRequest struct {
	DescribeInferenceExperimentRequest shared.DescribeInferenceExperimentRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                      *string                                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                  *string                                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                     *string                                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                           *string                                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                  *string                                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                      *string                                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                  *string                                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                         DescribeInferenceExperimentXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeInferenceExperimentResponse struct {
	ContentType string
	// Success
	DescribeInferenceExperimentResponse *shared.DescribeInferenceExperimentResponse
	// ResourceNotFound
	ResourceNotFound interface{}
	StatusCode       int
	RawResponse      *http.Response
}
