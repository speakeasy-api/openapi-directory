"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import transactgetitemsinput as shared_transactgetitemsinput
from ..shared import transactgetitemsoutput as shared_transactgetitemsoutput
from enum import Enum
from typing import Any, Optional

class TransactGetItemsXAmzTargetEnum(str, Enum):
    DYNAMO_DB_20120810_TRANSACT_GET_ITEMS = 'DynamoDB_20120810.TransactGetItems'


@dataclasses.dataclass
class TransactGetItemsRequest:
    
    transact_get_items_input: shared_transactgetitemsinput.TransactGetItemsInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: TransactGetItemsXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class TransactGetItemsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_server_error: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerError"""  
    provisioned_throughput_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ProvisionedThroughputExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    request_limit_exceeded: Optional[Any] = dataclasses.field(default=None)
    r"""RequestLimitExceeded"""  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    transact_get_items_output: Optional[shared_transactgetitemsoutput.TransactGetItemsOutput] = dataclasses.field(default=None)
    r"""Success"""  
    transaction_canceled_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TransactionCanceledException"""  
    