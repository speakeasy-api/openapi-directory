"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PermissionLevelEnum(str, Enum):
    r"""Level at which permission could be applied (app or channel)"""
    APP = 'app'
    CHANNEL = 'channel'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Permission:
    
    action: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})
    r"""Action name this permission is for (e.g. SendMessage)"""  
    custom: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom') }})
    r"""Whether this is a custom permission or built-in"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the permission"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique permission ID"""  
    level: PermissionLevelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('level') }})
    r"""Level at which permission could be applied (app or channel)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the permission"""  
    owner: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner') }})
    r"""Whether this permission applies to resource owner or not"""  
    same_team: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('same_team') }})
    r"""Whether this permission applies to teammates (multi-tenancy mode only)"""  
    tags: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags') }})
    r"""List of tags of the permission"""  
    condition: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('condition'), 'exclude': lambda f: f is None }})
    r"""MongoDB style condition which decides whether or not the permission is granted"""  
    