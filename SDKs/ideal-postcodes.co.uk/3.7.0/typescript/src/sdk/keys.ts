/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Monitor and manage API Keys
 */
export class Keys {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Availability
   *
   * @remarks
   * Returns public information on key. Currently only returns whether the key is currently useable via the `available` property. Use this to discover if the key is useable before making further requests.
   *
   * You may pass both API Keys (beginning `ak_`) and Sub-licensed Keys (beginning `sl_`).
   * ## Testing
   *
   * To test your implementation of our API, you may use the following test keys.
   *
   * - **iddqd** Availability will return as `true`
   * - **idkfa** Availability will return as `false`
   *
   *
   */
  keyAvailability(
    req: operations.KeyAvailabilityRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.KeyAvailabilityResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KeyAvailabilityRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/keys/{key}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KeyAvailabilityResponse =
        new operations.KeyAvailabilityResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKeyResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiKeyResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Details
   *
   * @remarks
   * Returns private data on the key including remaining lookups, available datasets and usage limits.
   *
   */
  keyDetails(
    req: operations.KeyDetailsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.KeyDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KeyDetailsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/keys/{key}/details", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KeyDetailsResponse =
        new operations.KeyDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKeyDetailsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiKeyDetailsResponse
            );
          }
          break;
        case [401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Logs (CSV)
   *
   * @remarks
   * Reports lookup information on a key for paid lookups.
   *
   * This method requires a `user_token`, which can be found on your [accounts page](https://ideal-postcodes.co.uk/account).
   *
   * A maximum interval of 90 days can be provided for analysis. If no start or end date is provided, the last 21 days will be used as the default interval.
   *
   * ## Download Usage History (CSV)
   *
   * `GET /keys/:key/lookups`
   *
   * Returns a CSV download of lookups performed and associated information.
   *
   * Note that the Content-Type returned will be CSV (text/csv). For a non 200 response, the `Content-Type` will revert to JSON with the error code and message embedded.
   *
   * ## Data Redaction
   *
   * Personally Identifiable Data (PII) caught in this your usage log (including IP, search term and URL data) will be redacted on a weekly basis.
   *
   * By default, PII will be redacted if it is older than 21 days. This timeframe can be configured from your dashboard.
   *
   * You may prevent PII collection altogether by setting the interval to `0` days.
   *
   */
  keyLogs(
    req: operations.KeyLogsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.KeyLogsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KeyLogsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/keys/{key}/lookups", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KeyLogsResponse = new operations.KeyLogsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `text/csv`)) {
            res.keyLogs200TextCsvString = JSON.stringify(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestResponse = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Usage Stats
   *
   * @remarks
   * Reports the number of lookups consumed on a key for a range of days.
   *
   * A maximum interval of 90 days can be provided for analysis. If no start or end date is provided, the last 21 days will be used as the default interval.
   *
   */
  keyUsage(
    req: operations.KeyUsageRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.KeyUsageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KeyUsageRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/keys/{key}/usage", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KeyUsageResponse = new operations.KeyUsageResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKeyUsageResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApiKeyUsageResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestResponse = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
