/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Workflow - A workflow.
 * 
 */
public class Workflow {
    /**
     * Indicates whether the callout trigger is enabled for the retrieved workflow.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calloutTrigger")
    public Boolean calloutTrigger;
    public Workflow withCalloutTrigger(Boolean calloutTrigger) {
        this.calloutTrigger = calloutTrigger;
        return this;
    }
    
    /**
     * The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    public String createdAt;
    public Workflow withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The description of the workflow.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Workflow withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The unique ID of the workflow.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public Workflow withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * The schedule of the workflow, in a CRON expression. Returns null if the schedued trigger is disabled.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval")
    public String interval;
    public Workflow withInterval(String interval) {
        this.interval = interval;
        return this;
    }
    
    /**
     * The name of the workflow.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Workflow withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Indicates whether the ondemand trigger is enabled for the workflow.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ondemandTrigger")
    public Boolean ondemandTrigger;
    public Workflow withOndemandTrigger(Boolean ondemandTrigger) {
        this.ondemandTrigger = ondemandTrigger;
        return this;
    }
    
    /**
     * Indicates whether the scheduled trigger is enabled for the workflow.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduledTrigger")
    public Boolean scheduledTrigger;
    public Workflow withScheduledTrigger(Boolean scheduledTrigger) {
        this.scheduledTrigger = scheduledTrigger;
        return this;
    }
    
    /**
     * The timezone that is configured for the scheduler of the workflow. Returns null if the scheduled trigger is disabled.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;
    public Workflow withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * The type of the workflow. Currently the only valid value is 'Workflow::Setup'.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public WorkflowTypeEnum type;
    public Workflow withType(WorkflowTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    public String updatedAt;
    public Workflow withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
