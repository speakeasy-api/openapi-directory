// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/utils"
)

// schemaResponseActions - Schema Response Actions are objects that when created cause state transitions for Schema Responses. Users use state transitions to submit, approve, and revise new Schema Responses.
//
// Schema Response Actions have a  few different triggers to cause state transitions:
//
//   - `submit` is a trigger to transition a Schema Response from an `in_progress` state to an `unapproved` state,
//     this freezes edits for the Schema Response and allows all admin contributors to the Schema Response's
//     Registration to either approved or reject the Schema Response.
//
//   - `approve` is a trigger to transition a Schema Response from an `unapproved` state to an `approved` state, this
//     makes the Schema Response changes public completing the update of the Schema Response. On Schema Responses that
//     are associated with a Registration that has Registration Provider a moderated workflow the `approve` trigger
//     will transition the Schema Response to `pending_moderation`.
//
//   - `accept` is a trigger to transition a Schema Response from an `pending_moderation` state to an `approved`
//     state. This trigger is only valid for Schema Responses that are associated with a Registration that has
//     Registration Provider a moderated workflow and only possible for a user designated as moderator of a
//     Registration Provider.
//
//   - `admin_reject` is a trigger to transition a Schema Response from an `unapproved` state to an
//     `in_progress`  state. This trigger allows users to reject purposed changes to a Schema Response.
//
//   - `moderator_reject` is a trigger to transition a Schema Response from an `pending_moderation` state to an
//     `in_progress`  state. This trigger is only valid for Schema Responses that are associated with a Registration
//     that has Registration Provider a moderated workflow and only possible for a user designated as moderator of a
//     Registration Provider.
type schemaResponseActions struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newSchemaResponseActions(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *schemaResponseActions {
	return &schemaResponseActions{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// GetSchemaResponsesSchemaResponseIDActionsSchemaResponseActionID - A Schema Response Action from a Schema Response
// Retrieves a Schema Response Action by it's ID.
// #### Returns
// Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.
// #### Errors
// If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
func (s *schemaResponseActions) GetSchemaResponsesSchemaResponseIDActionsSchemaResponseActionID(ctx context.Context, request operations.GetSchemaResponsesSchemaResponseIDActionsSchemaResponseActionIDRequest) (*operations.GetSchemaResponsesSchemaResponseIDActionsSchemaResponseActionIDResponse, error) {
	baseURL := s.serverURL
	url, err := utils.GenerateURL(ctx, baseURL, "/schema_responses/{schema_response_id}/actions/{schema_response_action_id}", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetSchemaResponsesSchemaResponseIDActionsSchemaResponseActionIDResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `*/*`):
			out, err := io.ReadAll(httpRes.Body)
			if err != nil {
				return nil, fmt.Errorf("error reading response body: %w", err)
			}

			res.Body = out
		}
	}

	return res, nil
}

// PostSchemaResponsesSchemaResponseIDActions - Create a new Schema Response Action
// This creates a new Schema Response Action in order to trigger a state transition for a Schema Response.
// #### Returns
// Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.
// #### Errors
// If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
func (s *schemaResponseActions) PostSchemaResponsesSchemaResponseIDActions(ctx context.Context, request operations.PostSchemaResponsesSchemaResponseIDActionsRequest) (*operations.PostSchemaResponsesSchemaResponseIDActionsResponse, error) {
	baseURL := s.serverURL
	url, err := utils.GenerateURL(ctx, baseURL, "/schema_responses/{schema_response_id}/actions/", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostSchemaResponsesSchemaResponseIDActionsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 201:
	}

	return res, nil
}

// SchemaResponseActionRead - Retrieve a list of Schema Response Actions for a Schema Response
// This retrieves a paginated list of all Schema Response Actions created for a Schema Response.
// #### Returns
// Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.
// #### Errors
// If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
func (s *schemaResponseActions) SchemaResponseActionRead(ctx context.Context, request operations.SchemaResponseActionReadRequest) (*operations.SchemaResponseActionReadResponse, error) {
	baseURL := s.serverURL
	url, err := utils.GenerateURL(ctx, baseURL, "/schema_responses/{schema_response_id}/actions/", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.SchemaResponseActionReadResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `*/*`):
			out, err := io.ReadAll(httpRes.Body)
			if err != nil {
				return nil, fmt.Errorf("error reading response body: %w", err)
			}

			res.Body = out
		}
	}

	return res, nil
}
