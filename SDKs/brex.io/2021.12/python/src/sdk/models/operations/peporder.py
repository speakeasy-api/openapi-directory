"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class PepOrderSecurity:
    
    user_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'user_key' }})  
    

@dataclasses.dataclass
class PepOrderRequestBody:
    r"""Optional parameters to enhance search"""
    
    aliases: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Aliases' }})
    r"""Optional parameter for declaring alias names when doing a person search (seperated by commas)"""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Country' }})
    r"""Optional name of Country to assist in identifying matches based upon location/geography."""  
    dob: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'DOB' }})
    r"""Optional parameter for date of birth name when doing a person search"""  
    family_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FamilyName' }})
    r"""Optional parameter for last name when doing a person search"""  
    filters: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Filters' }})
    r"""Optional parameter for restricting search when doing a person search (seperated by commas)"""  
    given_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'GivenName' }})
    r"""Optional parameter for first name when doing a person search"""  
    lei: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'LEI' }})
    r"""Optional Legal Entity Identifier for additional business identifier verification."""  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Locale' }})
    r"""Optional name of City or Locale to assist in identifying matches based upon location/geography."""  
    medialists: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Medialists' }})
    r"""Optional parameter for selecting only specific media lists. By default all lists are queried"""  
    middle_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MiddleName' }})
    r"""Optional parameter for middle name when doing a person search"""  
    monitoring: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Monitoring' }})
    r"""If this Pep Sanction Check should be continuesly monitored."""  
    peplists: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Peplists' }})
    r"""Optional parameter for selecting only specific pep lists. By default all lists are queried"""  
    region: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Region' }})
    r"""Optional name of Region or State to assist in identifying matches based upon location/geography."""  
    smart_match: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SmartMatch' }})
    r"""Optional parameter for enabling SmartMatch to retrieve more results"""  
    watchlists: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Watchlists' }})
    r"""Optional parameter for selecting only specific watch lists. By default all lists are queried"""  
    webhook: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhook' }})
    r"""If Monitoring is enabled this parameter is required. This is where updates will be sent to"""  
    
class PepOrderTypeEnum(str, Enum):
    r"""Type (Business or Person) of the requested Pep Sanction Check"""
    UNKNOWN = ''
    B = 'B'
    P = 'P'


@dataclasses.dataclass
class PepOrderRequest:
    
    search: str = dataclasses.field(metadata={'path_param': { 'field_name': 'search', 'style': 'simple', 'explode': False }})
    r"""Search string for the Pep Sanction Check"""  
    type: PepOrderTypeEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'type', 'style': 'simple', 'explode': False }})
    r"""Type (Business or Person) of the requested Pep Sanction Check"""  
    request_body: Optional[PepOrderRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})
    r"""Optional parameters to enhance search"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PepOrderDefaultApplicationJSON:
    r"""Detailed information about the error"""
    
    code: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    tag: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag') }})  
    fault: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fault'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PepOrder200ApplicationJSON:
    r"""Product details"""
    
    availability: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availability') }})  
    category: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})  
    country_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countryCode') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    has_options: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasOptions') }})  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})  
    price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})  
    provider: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider') }})  
    sku: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    

@dataclasses.dataclass
class PepOrderResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    pep_order_200_application_json_object: Optional[PepOrder200ApplicationJSON] = dataclasses.field(default=None)
    r"""Product details"""  
    pep_order_default_application_json_object: Optional[PepOrderDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Detailed information about the error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    