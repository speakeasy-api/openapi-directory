"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Namespaces:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_namespace_data_by_timespan(self, request: operations.GetNamespaceDataByTimespanRequest) -> operations.GetNamespaceDataByTimespanResponse:
        r"""Get namespace data for timespan
        Gets a list of URLs that can be used to download the pull data for the given namespace and timespan
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNamespaceDataByTimespanRequest, base_url, '/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}/{dataview}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNamespaceDataByTimespanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseData])
                res.response_data = out

        return res

    def get_namespace_timespan_metadata(self, request: operations.GetNamespaceTimespanMetadataRequest) -> operations.GetNamespaceTimespanMetadataResponse:
        r"""Get namespace metadata for timespan
        Gets info about data for the given namespace and timespan
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNamespaceTimespanMetadataRequest, base_url, '/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNamespaceTimespanMetadataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.timespan_model = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_namespace_timespans(self, request: operations.GetNamespaceTimespansRequest) -> operations.GetNamespaceTimespansResponse:
        r"""Get timespans with data
        Gets a list of timespans of the given type that have data for the given namespace and year
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNamespaceTimespansRequest, base_url, '/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNamespaceTimespansResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.timespan_data = out

        return res

    def get_namespace_years(self, request: operations.GetNamespaceYearsRequest) -> operations.GetNamespaceYearsResponse:
        r"""Get years with data
        Gets a list of years that have data for the given namespace
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNamespaceYearsRequest, base_url, '/namespaces/{namespace}/pulls/exports/years', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNamespaceYearsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.YearData])
                res.year_data = out

        return res

    