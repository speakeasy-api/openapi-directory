<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Tftp 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Show the agent's TFTP argument structure
     * 
     * Agent's TFTP configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetArgsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetArgsResponse
     */
	public function protocolTftpGetArgs(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetArgsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetArgsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tftp/get/args', \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetArgsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetArgsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTftpGetArgs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's TFTP configuration
     * 
     * Agent's TFTP configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetConfigResponse
     */
	public function protocolTftpGetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tftp/get/config', \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configTFTP = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigTFTP', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's TFTP statistics
     * 
     * Statistics of fields indicated in the headers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetStatisticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetStatisticsResponse
     */
	public function protocolTftpGetStatistics(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetStatisticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetStatisticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tftp/get/statistics', \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTftpGetStatistics200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the TFTP statistics headers
     * 
     * The headers of statistics fields
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetStatsHdrResponse
     */
	public function protocolTftpGetStatsHdr(
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetStatsHdrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/protocol/msg/tftp/get/stats_hdr');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetStatsHdrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTftpGetStatsHdr200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's TFTP traffic tracing
     * 
     * Trace 1 means enabled, 0 means not
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetTraceResponse
     */
	public function protocolTftpGetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tftp/get/trace', \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpGetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configTFTP = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigTFTP', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show a parameter of a TFTP sesssion
     * 
     * Parameter is server , port , or dstfile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionGetParameterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionGetParameterResponse
     */
	public function protocolTftpSessionGetParameter(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionGetParameterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionGetParameterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/get/{parameter}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionGetParameterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionGetParameterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolTftpSessionGetParameter200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Create a read session to download srcfile from server
     * 
     * Session ID is returned
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionReadResponse
     */
	public function protocolTftpSessionRead(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tftp/session/read/server/{srcfile}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTftpSessionRead200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set a parameter of a TFTP sesssion
     * 
     * Parameter is server , port , or dstfile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionSetParameterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionSetParameterResponse
     */
	public function protocolTftpSessionSetParameter(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionSetParameterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionSetParameterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/set/{parameter}/{value}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionSetParameterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionSetParameterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolTftpSessionSetParameter200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Start a TFTP sesssion
     * 
     * Start uploading or downloading the file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStartRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStartResponse
     */
	public function protocolTftpSessionStart(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStartRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/start', \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStartRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolTftpSessionStart200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Check a TFTP sesssion's status
     * 
     * Status includes running state, bytes transfered, and time elapsed
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStatusResponse
     */
	public function protocolTftpSessionStatus(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/status', \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolTftpSessionStatus200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Stop a TFTP sesssion
     * 
     * Stop uploading or downloading the file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStopRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStopResponse
     */
	public function protocolTftpSessionStop(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStopRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/stop', \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStopRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolTftpSessionStop200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Create a read session to upload srcfile to server
     * 
     * Session ID is returned
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionWriteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionWriteResponse
     */
	public function protocolTftpSessionWrite(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionWriteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionWriteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tftp/session/write/server/{srcfile}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionWriteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSessionWriteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTftpSessionWrite200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's TFTP configuration
     * 
     * Agent's TFTP configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSetConfigResponse
     */
	public function protocolTftpSetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tftp/set/config/{argument}/{value}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolTftpSetConfig200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's TFTP traffic tracing
     * 
     * 1 to enable, 0 to disable
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSetTraceResponse
     */
	public function protocolTftpSetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tftp/set/trace/{enableOrNot}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTftpSetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolTftpSetTrace200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}