"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class MetaPub:
    r"""Endpoints to access MetaPub ingest functionality such as synchronizing producer metadata to programs and episodes. These API operations are deprecated. Use the pieces endpoints instead."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_api_v2_metapub_program_information_batch_batch_id_(self, request: operations.GetAPIV2MetapubProgramInformationBatchBatchIDRequest, security: operations.GetAPIV2MetapubProgramInformationBatchBatchIDSecurity) -> operations.GetAPIV2MetapubProgramInformationBatchBatchIDResponse:
        r"""Get an EPG batch operation.
        Gets the batch information which can be used to check the status of the operation or retrieve more details if the batch fails.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV2MetapubProgramInformationBatchBatchIDRequest, base_url, '/api/v2/metapub/program-information/batch/{batch-id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV2MetapubProgramInformationBatchBatchIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProgramInformationBatch])
                res.program_information_batch = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def post_api_v2_metapub_program_information_batch(self, request: operations.PostAPIV2MetapubProgramInformationBatchRequestBody, security: operations.PostAPIV2MetapubProgramInformationBatchSecurity) -> operations.PostAPIV2MetapubProgramInformationBatchResponse:
        r"""Create a batch operation on EPG information.
        Create a batch to process the metadata of one or more electronic program guide (EPG) programs using metadata that has been uploaded to the customer's CD Drive. If multiple EPG programs are present in the metadata, they will all be updated, however updates across programs are not atomic. Note that an EPG program maps to the ContentDepot concept of an episode which is also known as a \"program instance\".
        
        A batch operation must be explicitly created rather than the server attempting to detect new metadata in order to allow for all the content to be uploaded including any supporting content like images. A batch operation is accepted and queued for asynchronous processing at a later time. A client can poll the batch periodically to determine when it completes and the resulting state.
        /api/epg-cd-mapping.html - Find RadioDns to ContentDepot Mapping here
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/metapub/program-information/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV2MetapubProgramInformationBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProgramInformationBatch])
                res.program_information_batch = out

        return res

    