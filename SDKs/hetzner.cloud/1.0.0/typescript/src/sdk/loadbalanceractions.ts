/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class LoadBalancerActions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get all Actions for a Load Balancer
   *
   * @remarks
   * Returns all Action objects for a Load Balancer. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.
   */
  getLoadBalancersIdActions(
    req: operations.GetLoadBalancersIdActionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetLoadBalancersIdActionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetLoadBalancersIdActionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/load_balancers/{id}/actions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetLoadBalancersIdActionsResponse =
        new operations.GetLoadBalancersIdActionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionsResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetLoadBalancersIdActionsActionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get an Action for a Load Balancer
   *
   * @remarks
   * Returns a specific Action for a Load Balancer.
   */
  getLoadBalancersIdActionsActionId(
    req: operations.GetLoadBalancersIdActionsActionIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetLoadBalancersIdActionsActionIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetLoadBalancersIdActionsActionIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/load_balancers/{id}/actions/{action_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetLoadBalancersIdActionsActionIdResponse =
        new operations.GetLoadBalancersIdActionsActionIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetLoadBalancersIdActionsActionIdActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add Service
   *
   * @remarks
   * Adds a service to a Load Balancer.
   *
   * #### Call specific error codes
   *
   * | Code                       | Description                                             |
   * |----------------------------|---------------------------------------------------------|
   * | `source_port_already_used` | The source port you are trying to add is already in use |
   *
   */
  postLoadBalancersIdActionsAddService(
    req: operations.PostLoadBalancersIdActionsAddServiceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostLoadBalancersIdActionsAddServiceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostLoadBalancersIdActionsAddServiceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/load_balancers/{id}/actions/add_service",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostLoadBalancersIdActionsAddServiceResponse =
        new operations.PostLoadBalancersIdActionsAddServiceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostLoadBalancersIdActionsAddServiceActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add Target
   *
   * @remarks
   * Adds a target to a Load Balancer.
   *
   * #### Call specific error codes
   *
   * | Code                                    | Description                                                                                           |
   * |-----------------------------------------|-------------------------------------------------------------------------------------------------------|
   * | `cloud_resource_ip_not_allowed`         | The IP you are trying to add as a target belongs to a Hetzner Cloud resource                          |
   * | `ip_not_owned`                          | The IP you are trying to add as a target is not owned by the Project owner                            |
   * | `load_balancer_not_attached_to_network` | The Load Balancer is not attached to a network                                                        |
   * | `robot_unavailable`                     | Robot was not available. The caller may retry the operation after a short delay.                      |
   * | `server_not_attached_to_network`        | The server you are trying to add as a target is not attached to the same network as the Load Balancer |
   * | `target_already_defined`                | The Load Balancer target you are trying to define is already defined                                  |
   *
   */
  postLoadBalancersIdActionsAddTarget(
    req: operations.PostLoadBalancersIdActionsAddTargetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostLoadBalancersIdActionsAddTargetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostLoadBalancersIdActionsAddTargetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/load_balancers/{id}/actions/add_target",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostLoadBalancersIdActionsAddTargetResponse =
        new operations.PostLoadBalancersIdActionsAddTargetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostLoadBalancersIdActionsAddTargetActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Attach a Load Balancer to a Network
   *
   * @remarks
   * Attach a Load Balancer to a Network.
   *
   * **Call specific error codes**
   *
   * | Code                             | Description                                                           |
   * |----------------------------------|-----------------------------------------------------------------------|
   * | `load_balancer_already_attached` | The Load Balancer is already attached to a network                    |
   * | `ip_not_available`               | The provided Network IP is not available                              |
   * | `no_subnet_available`            | No Subnet or IP is available for the Load Balancer within the network |
   *
   */
  postLoadBalancersIdActionsAttachToNetwork(
    req: operations.PostLoadBalancersIdActionsAttachToNetworkRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostLoadBalancersIdActionsAttachToNetworkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostLoadBalancersIdActionsAttachToNetworkRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/load_balancers/{id}/actions/attach_to_network",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostLoadBalancersIdActionsAttachToNetworkResponse =
        new operations.PostLoadBalancersIdActionsAttachToNetworkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostLoadBalancersIdActionsAttachToNetworkActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Change Algorithm
   *
   * @remarks
   * Change the algorithm that determines to which target new requests are sent.
   */
  postLoadBalancersIdActionsChangeAlgorithm(
    req: operations.PostLoadBalancersIdActionsChangeAlgorithmRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostLoadBalancersIdActionsChangeAlgorithmResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostLoadBalancersIdActionsChangeAlgorithmRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/load_balancers/{id}/actions/change_algorithm",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostLoadBalancersIdActionsChangeAlgorithmResponse =
        new operations.PostLoadBalancersIdActionsChangeAlgorithmResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostLoadBalancersIdActionsChangeAlgorithmActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Change reverse DNS entry for this Load Balancer
   *
   * @remarks
   * Changes the hostname that will appear when getting the hostname belonging to the public IPs (IPv4 and IPv6) of this Load Balancer.
   *
   * Floating IPs assigned to the Server are not affected by this.
   *
   */
  postLoadBalancersIdActionsChangeDnsPtr(
    req: operations.PostLoadBalancersIdActionsChangeDnsPtrRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostLoadBalancersIdActionsChangeDnsPtrResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostLoadBalancersIdActionsChangeDnsPtrRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/load_balancers/{id}/actions/change_dns_ptr",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostLoadBalancersIdActionsChangeDnsPtrResponse =
        new operations.PostLoadBalancersIdActionsChangeDnsPtrResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostLoadBalancersIdActionsChangeDnsPtrActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Change Load Balancer Protection
   *
   * @remarks
   * Changes the protection configuration of a Load Balancer.
   */
  postLoadBalancersIdActionsChangeProtection(
    req: operations.PostLoadBalancersIdActionsChangeProtectionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostLoadBalancersIdActionsChangeProtectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostLoadBalancersIdActionsChangeProtectionRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/load_balancers/{id}/actions/change_protection",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostLoadBalancersIdActionsChangeProtectionResponse =
        new operations.PostLoadBalancersIdActionsChangeProtectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostLoadBalancersIdActionsChangeProtectionActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Change the Type of a Load Balancer
   *
   * @remarks
   * Changes the type (Max Services, Max Targets and Max Connections) of a Load Balancer.
   *
   * **Call specific error codes**
   *
   * | Code                         | Description                                                     |
   * |------------------------------|-----------------------------------------------------------------|
   * | `invalid_load_balancer_type` | The Load Balancer type does not fit for the given Load Balancer |
   *
   */
  postLoadBalancersIdActionsChangeType(
    req: operations.PostLoadBalancersIdActionsChangeTypeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostLoadBalancersIdActionsChangeTypeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostLoadBalancersIdActionsChangeTypeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/load_balancers/{id}/actions/change_type",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostLoadBalancersIdActionsChangeTypeResponse =
        new operations.PostLoadBalancersIdActionsChangeTypeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostLoadBalancersIdActionsChangeTypeActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete Service
   *
   * @remarks
   * Delete a service of a Load Balancer.
   */
  postLoadBalancersIdActionsDeleteService(
    req: operations.PostLoadBalancersIdActionsDeleteServiceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostLoadBalancersIdActionsDeleteServiceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostLoadBalancersIdActionsDeleteServiceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/load_balancers/{id}/actions/delete_service",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostLoadBalancersIdActionsDeleteServiceResponse =
        new operations.PostLoadBalancersIdActionsDeleteServiceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostLoadBalancersIdActionsDeleteServiceActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Detach a Load Balancer from a Network
   *
   * @remarks
   * Detaches a Load Balancer from a network.
   */
  postLoadBalancersIdActionsDetachFromNetwork(
    req: operations.PostLoadBalancersIdActionsDetachFromNetworkRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostLoadBalancersIdActionsDetachFromNetworkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostLoadBalancersIdActionsDetachFromNetworkRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/load_balancers/{id}/actions/detach_from_network",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostLoadBalancersIdActionsDetachFromNetworkResponse =
        new operations.PostLoadBalancersIdActionsDetachFromNetworkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostLoadBalancersIdActionsDetachFromNetworkActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Disable the public interface of a Load Balancer
   *
   * @remarks
   * Disable the public interface of a Load Balancer. The Load Balancer will be not accessible from the internet via its public IPs.
   *
   * #### Call specific error codes
   *
   * | Code                                      | Description                                                                    |
   * |-------------------------------------------|--------------------------------------------------------------------------------|
   * | `load_balancer_not_attached_to_network`   |  The Load Balancer is not attached to a network                                |
   * | `targets_without_use_private_ip`          | The Load Balancer has targets that use the public IP instead of the private IP |
   *
   */
  postLoadBalancersIdActionsDisablePublicInterface(
    req: operations.PostLoadBalancersIdActionsDisablePublicInterfaceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostLoadBalancersIdActionsDisablePublicInterfaceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostLoadBalancersIdActionsDisablePublicInterfaceRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/load_balancers/{id}/actions/disable_public_interface",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostLoadBalancersIdActionsDisablePublicInterfaceResponse =
        new operations.PostLoadBalancersIdActionsDisablePublicInterfaceResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostLoadBalancersIdActionsDisablePublicInterfaceActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Enable the public interface of a Load Balancer
   *
   * @remarks
   * Enable the public interface of a Load Balancer. The Load Balancer will be accessible from the internet via its public IPs.
   */
  postLoadBalancersIdActionsEnablePublicInterface(
    req: operations.PostLoadBalancersIdActionsEnablePublicInterfaceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostLoadBalancersIdActionsEnablePublicInterfaceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostLoadBalancersIdActionsEnablePublicInterfaceRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/load_balancers/{id}/actions/enable_public_interface",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostLoadBalancersIdActionsEnablePublicInterfaceResponse =
        new operations.PostLoadBalancersIdActionsEnablePublicInterfaceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostLoadBalancersIdActionsEnablePublicInterfaceActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove Target
   *
   * @remarks
   * Removes a target from a Load Balancer.
   */
  postLoadBalancersIdActionsRemoveTarget(
    req: operations.PostLoadBalancersIdActionsRemoveTargetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostLoadBalancersIdActionsRemoveTargetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostLoadBalancersIdActionsRemoveTargetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/load_balancers/{id}/actions/remove_target",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostLoadBalancersIdActionsRemoveTargetResponse =
        new operations.PostLoadBalancersIdActionsRemoveTargetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostLoadBalancersIdActionsRemoveTargetActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Service
   *
   * @remarks
   * Updates a Load Balancer Service.
   *
   * #### Call specific error codes
   *
   * | Code                       | Description                                             |
   * |----------------------------|---------------------------------------------------------|
   * | `source_port_already_used` | The source port you are trying to add is already in use |
   *
   */
  postLoadBalancersIdActionsUpdateService(
    req: operations.PostLoadBalancersIdActionsUpdateServiceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostLoadBalancersIdActionsUpdateServiceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostLoadBalancersIdActionsUpdateServiceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/load_balancers/{id}/actions/update_service",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostLoadBalancersIdActionsUpdateServiceResponse =
        new operations.PostLoadBalancersIdActionsUpdateServiceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostLoadBalancersIdActionsUpdateServiceActionResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
