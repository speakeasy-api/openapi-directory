"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import range as shared_range
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomAttributeFilter:
    r"""Supported custom attribute query expressions for calling the
    [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items)
    endpoint to search for items or item variations.
    """
    
    bool_filter: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bool_filter'), 'exclude': lambda f: f is None }})
    r"""A query expression to filter items or item variations by matching their custom attributes'
    `boolean_value` property values
    against the specified Boolean expression.
    """  
    custom_attribute_definition_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_attribute_definition_id'), 'exclude': lambda f: f is None }})
    r"""A query expression to filter items or item variations by matching their custom attributes'
    `custom_attribute_definition_id`
    property value against the the specified id.
    """  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""A query expression to filter items or item variations by matching their custom attributes'
    `key` property value against
    the specified key.
    """  
    number_filter: Optional[shared_range.Range] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number_filter'), 'exclude': lambda f: f is None }})
    r"""The range of a number value between the specified lower and upper bounds."""  
    selection_uids_filter: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selection_uids_filter'), 'exclude': lambda f: f is None }})
    r"""A query expression to filter items or item variations by matching  their custom attributes'
    `selection_uid_values`
    values against the specified selection uids.
    """  
    string_filter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('string_filter'), 'exclude': lambda f: f is None }})
    r"""A query expression to filter items or item variations by matching their custom attributes'
    `string_value`  property value
    against the specified text.
    """  
    