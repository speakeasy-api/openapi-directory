// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BasicLevelCombiningFunctionEnum - How the `conditions` list should be combined to determine if a request is granted this `AccessLevel`. If AND is used, each `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. If OR is used, at least one `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. Default behavior is AND.
type BasicLevelCombiningFunctionEnum string

const (
	BasicLevelCombiningFunctionEnumAnd BasicLevelCombiningFunctionEnum = "AND"
	BasicLevelCombiningFunctionEnumOr  BasicLevelCombiningFunctionEnum = "OR"
)

func (e BasicLevelCombiningFunctionEnum) ToPointer() *BasicLevelCombiningFunctionEnum {
	return &e
}

func (e *BasicLevelCombiningFunctionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AND":
		fallthrough
	case "OR":
		*e = BasicLevelCombiningFunctionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BasicLevelCombiningFunctionEnum: %v", v)
	}
}

// BasicLevel - `BasicLevel` is an `AccessLevel` using a set of recommended features.
type BasicLevel struct {
	// How the `conditions` list should be combined to determine if a request is granted this `AccessLevel`. If AND is used, each `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. If OR is used, at least one `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. Default behavior is AND.
	CombiningFunction *BasicLevelCombiningFunctionEnum `json:"combiningFunction,omitempty"`
	// Required. A list of requirements for the `AccessLevel` to be granted.
	Conditions []Condition `json:"conditions,omitempty"`
}
