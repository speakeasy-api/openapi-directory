/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * DataQueryJob - A data query job.
 * 
 */
public class DataQueryJob {
    /**
     * The query job creator's Id.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdBy")
    public String createdBy;
    public DataQueryJob withCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }
    
    /**
     * The URL of the query results. Only applicable if the value of the `queryStatus` field is `completed`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataFile")
    public String dataFile;
    public DataQueryJob withDataFile(String dataFile) {
        this.dataFile = dataFile;
        return this;
    }
    
    /**
     * Internal identifier of the query job.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public DataQueryJob withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The number of rows the query results. Only applicable if the value of the `queryStatus` field is `completed`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outputRows")
    public Long outputRows;
    public DataQueryJob withOutputRows(Long outputRows) {
        this.outputRows = outputRows;
        return this;
    }
    
    /**
     * Processing time of the query job, in milliseconds. Only applicable if the value of the `queryStatus` field is `completed`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processingTime")
    public Long processingTime;
    public DataQueryJob withProcessingTime(Long processingTime) {
        this.processingTime = processingTime;
        return this;
    }
    
    /**
     * The query that was submitted.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    public String query;
    public DataQueryJob withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * Status of the query job.
     * 
     * * `submitted` - query submitted to query service for processing
     * * `accepted` - query accepted by the query service
     * * `in_progress` - query executed by the query service
     * * `completed` - query execution completed by the query service
     * * `failed` - query unable to be processed by the query service
     * * `cancelled` - query cancelled by the user
     * 
     * If the value of this field is `completed`, the `dataFile` field contains the location of the query results.
     * 
     * If the value of this field is `accepted` or `in_progress`, you can use [Cancel a data query job](#operation/DELETE_DataQueryJob) to prevent Zuora from performing the query. Zuora then sets the status of the query job to `cancelled`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queryStatus")
    public DataQueryJobQueryStatusEnum queryStatus;
    public DataQueryJob withQueryStatus(DataQueryJobQueryStatusEnum queryStatus) {
        this.queryStatus = queryStatus;
        return this;
    }
    
    /**
     * The number of times that Zuora will retry the query if Zuora is unable to perform the query.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remainingRetries")
    public Long remainingRetries;
    public DataQueryJob withRemainingRetries(Long remainingRetries) {
        this.remainingRetries = remainingRetries;
        return this;
    }
    
    /**
     * Date and time when the query job was last updated, in ISO 8601 format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedOn")
    public OffsetDateTime updatedOn;
    public DataQueryJob withUpdatedOn(OffsetDateTime updatedOn) {
        this.updatedOn = updatedOn;
        return this;
    }
    
}
