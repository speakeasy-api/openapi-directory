"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import catalogobject as shared_catalogobject
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CatalogModifierList:
    r"""A list of modifiers applicable to items at the time of sale.
    
    For example, a \"Condiments\" modifier list applicable to a \"Hot Dog\" item
    may contain \"Ketchup\", \"Mustard\", and \"Relish\" modifiers.
    Use the `selection_type` field to specify whether or not multiple selections from
    the modifier list are allowed.
    """
    
    modifiers: Optional[list[shared_catalogobject.CatalogObject]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modifiers'), 'exclude': lambda f: f is None }})
    r"""The options included in the `CatalogModifierList`.
    You must include at least one `CatalogModifier`.
    Each CatalogObject must have type `MODIFIER` and contain
    `CatalogModifier` data.
    """  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name for the `CatalogModifierList` instance. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points."""  
    ordinal: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ordinal'), 'exclude': lambda f: f is None }})
    r"""Determines where this modifier list appears in a list of `CatalogModifierList` values."""  
    selection_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selection_type'), 'exclude': lambda f: f is None }})
    r"""Indicates whether multiple options from the modifier list
    can be applied to a single `CatalogItem`.
    """  
    