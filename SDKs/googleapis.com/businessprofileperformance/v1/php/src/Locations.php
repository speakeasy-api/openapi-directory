<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Locations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     *  Returns the values for each date from a given time range and optionally the sub entity type, where applicable, that are associated with the specific daily metrics. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345:fetchMultiDailyMetricsTimeSeries?dailyMetrics=WEBSITE_CLICKS&dailyMetrics=CALL_CLICKS&daily_range.start_date.year=2022&daily_range.start_date.month=1&daily_range.start_date.day=1&daily_range.end_date.year=2022&daily_range.end_date.month=3&daily_range.end_date.day=31`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeriesResponse
     */
	public function businessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeries(
        \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{location}:fetchMultiDailyMetricsTimeSeries', \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeriesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsFetchMultiDailyMetricsTimeSeriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchMultiDailyMetricsTimeSeriesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchMultiDailyMetricsTimeSeriesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     *  Returns the values for each date from a given time range that are associated with the specific daily metric. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345:getDailyMetricsTimeSeries?dailyMetric=WEBSITE_CLICKS&daily_range.start_date.year=2022&daily_range.start_date.month=1&daily_range.start_date.day=1&daily_range.end_date.year=2022&daily_range.end_date.month=3&daily_range.end_date.day=31`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesResponse
     */
	public function businessprofileperformanceLocationsGetDailyMetricsTimeSeries(
        \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:getDailyMetricsTimeSeries', \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsGetDailyMetricsTimeSeriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDailyMetricsTimeSeriesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetDailyMetricsTimeSeriesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the search keywords used to find a business in search or maps. Each search keyword is accompanied by impressions which are aggregated on a monthly basis. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345/searchkeywords/impressions/monthly?monthly_range.start_month.year=2022&monthly_range.start_month.month=1&monthly_range.end_month.year=2022&monthly_range.end_month.month=3`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsSearchkeywordsImpressionsMonthlyListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsSearchkeywordsImpressionsMonthlyListResponse
     */
	public function businessprofileperformanceLocationsSearchkeywordsImpressionsMonthlyList(
        \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsSearchkeywordsImpressionsMonthlyListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsSearchkeywordsImpressionsMonthlyListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/searchkeywords/impressions/monthly', \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsSearchkeywordsImpressionsMonthlyListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsSearchkeywordsImpressionsMonthlyListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BusinessprofileperformanceLocationsSearchkeywordsImpressionsMonthlyListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSearchKeywordImpressionsMonthlyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSearchKeywordImpressionsMonthlyResponse', 'json');
            }
        }

        return $response;
    }
}