"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import servicelistviewmodel as shared_servicelistviewmodel
from ..shared import servicesortorder_enum as shared_servicesortorder_enum
from ..shared import servicesscope_enum as shared_servicesscope_enum
from typing import Optional


@dataclasses.dataclass
class GetConsumerV1ServicesRequest:
    
    all_locations: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'allLocations', 'style': 'form', 'explode': True }})
    r"""Search All Locations, default is false"""  
    default_service: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'defaultService', 'style': 'form', 'explode': True }})
    r"""Filter by default service, default is false"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Page limit default 20, max 100"""  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'locationId', 'style': 'form', 'explode': True }})
    r"""id of business location, defaults to primary business location"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Filter by Name, supports Partial name search"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Starting row of page, default 0"""  
    scope: Optional[shared_servicesscope_enum.ServicesScopeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'scope', 'style': 'form', 'explode': True }})
    r"""Filter by scope, Company, Location or All, default is All"""  
    service_group_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'serviceGroupId', 'style': 'form', 'explode': True }})
    r"""Filter by groupId"""  
    service_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'serviceId', 'style': 'form', 'explode': True }})
    r"""Filter by ServiceId, using this parameter would ignore all other parameters"""  
    sort_descending: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortDescending', 'style': 'form', 'explode': True }})
    r"""Sort results in Descending Order, default true"""  
    sort_order: Optional[shared_servicesortorder_enum.ServiceSortOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortOrder', 'style': 'form', 'explode': True }})
    r"""Sort results using Natural Sort or Sorted alphabetically by Service Names, default is natural"""  
    

@dataclasses.dataclass
class GetConsumerV1ServicesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_list_view_model: Optional[shared_servicelistviewmodel.ServiceListViewModel] = dataclasses.field(default=None)
    r"""Success"""  
    