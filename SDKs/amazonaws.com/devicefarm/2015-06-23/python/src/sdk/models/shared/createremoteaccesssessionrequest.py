"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import createremoteaccesssessionconfiguration as shared_createremoteaccesssessionconfiguration
from ..shared import interactionmode_enum as shared_interactionmode_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateRemoteAccessSessionRequest:
    r"""Creates and submits a request to start a remote access session."""
    
    device_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceArn') }})  
    project_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectArn') }})  
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})  
    configuration: Optional[shared_createremoteaccesssessionconfiguration.CreateRemoteAccessSessionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configuration'), 'exclude': lambda f: f is None }})  
    instance_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceArn'), 'exclude': lambda f: f is None }})  
    interaction_mode: Optional[shared_interactionmode_enum.InteractionModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interactionMode'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    remote_debug_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteDebugEnabled'), 'exclude': lambda f: f is None }})  
    remote_record_app_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteRecordAppArn'), 'exclude': lambda f: f is None }})  
    remote_record_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteRecordEnabled'), 'exclude': lambda f: f is None }})  
    skip_app_resign: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skipAppResign'), 'exclude': lambda f: f is None }})  
    ssh_public_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sshPublicKey'), 'exclude': lambda f: f is None }})  
    