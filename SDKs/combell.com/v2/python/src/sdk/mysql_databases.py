"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class MySQLDatabases:
    r"""Manage your MySql databases."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def change_database_user_password(self, request: operations.ChangeDatabaseUserPasswordRequest) -> operations.ChangeDatabaseUserPasswordResponse:
        r"""Change password for mysql user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangeDatabaseUserPasswordRequest, base_url, '/mysqldatabases/{databaseName}/users/{userName}/password', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_user_password_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ChangeDatabaseUserPasswordRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeDatabaseUserPasswordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def change_database_user_status(self, request: operations.ChangeDatabaseUserStatusRequest) -> operations.ChangeDatabaseUserStatusResponse:
        r"""Enable/disable mysql user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangeDatabaseUserStatusRequest, base_url, '/mysqldatabases/{databaseName}/users/{userName}/status', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_user_status_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ChangeDatabaseUserStatusRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeDatabaseUserStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_my_sql_database(self, request: shared.CreateMySQLDatabase) -> operations.CreateMySQLDatabaseResponse:
        r"""Create a new mysql database"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mysqldatabases'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateMySQLDatabaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out

        return res

    def create_my_sql_user(self, request: operations.CreateMySQLUserRequest) -> operations.CreateMySQLUserResponse:
        r"""Create a new mysql user
        The creation of a new mysql user will result in a user with read_only rights.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateMySQLUserRequest, base_url, '/mysqldatabases/{databaseName}/users', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_my_sql_user", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CreateMySQLUserRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateMySQLUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out

        return res

    def delete_database(self, request: operations.DeleteDatabaseRequest) -> operations.DeleteDatabaseResponse:
        r"""Delete a mysql database"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDatabaseRequest, base_url, '/mysqldatabases/{databaseName}', request)
        
        query_params = utils.get_query_params(operations.DeleteDatabaseRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDatabaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_database_user(self, request: operations.DeleteDatabaseUserRequest) -> operations.DeleteDatabaseUserResponse:
        r"""Delete a mysql user
        The deletion of a mysql user is allowed for users with read_only rights.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDatabaseUserRequest, base_url, '/mysqldatabases/{databaseName}/users/{userName}', request)
        
        query_params = utils.get_query_params(operations.DeleteDatabaseUserRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDatabaseUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_database_users(self, request: operations.GetDatabaseUsersRequest) -> operations.GetDatabaseUsersResponse:
        r"""Overview of mysql users"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDatabaseUsersRequest, base_url, '/mysqldatabases/{databaseName}/users', request)
        
        query_params = utils.get_query_params(operations.GetDatabaseUsersRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDatabaseUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.MySQLUser]])
                res.my_sql_users = out

        return res

    def get_my_sql_database(self, request: operations.GetMySQLDatabaseRequest) -> operations.GetMySQLDatabaseResponse:
        r"""Get a specific database"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMySQLDatabaseRequest, base_url, '/mysqldatabases/{databaseName}', request)
        
        query_params = utils.get_query_params(operations.GetMySQLDatabaseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMySQLDatabaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MySQLDatabase])
                res.my_sql_database = out

        return res

    def get_my_sql_databases(self, request: operations.GetMySQLDatabasesRequest) -> operations.GetMySQLDatabasesResponse:
        r"""Overview of mysql databases"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mysqldatabases'
        
        query_params = utils.get_query_params(operations.GetMySQLDatabasesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMySQLDatabasesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.MySQLDatabase]])
                res.my_sql_databases = out

        return res

    