"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import destinationfieldproperties as shared_destinationfieldproperties
from ..shared import sourcefieldproperties as shared_sourcefieldproperties
from ..shared import supportedfieldtypedetails as shared_supportedfieldtypedetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConnectorEntityField:
    r"""Describes the data model of a connector field. For example, for an <i>account</i> entity, the fields would be <i>account name</i>, <i>account ID</i>, and so on."""
    
    identifier: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier') }})  
    custom_properties: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customProperties'), 'exclude': lambda f: f is None }})  
    default_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultValue'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    destination_properties: Optional[shared_destinationfieldproperties.DestinationFieldProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationProperties'), 'exclude': lambda f: f is None }})  
    is_deprecated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDeprecated'), 'exclude': lambda f: f is None }})  
    is_primary_key: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPrimaryKey'), 'exclude': lambda f: f is None }})  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})  
    parent_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentIdentifier'), 'exclude': lambda f: f is None }})  
    source_properties: Optional[shared_sourcefieldproperties.SourceFieldProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceProperties'), 'exclude': lambda f: f is None }})  
    supported_field_type_details: Optional[shared_supportedfieldtypedetails.SupportedFieldTypeDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedFieldTypeDetails'), 'exclude': lambda f: f is None }})  
    