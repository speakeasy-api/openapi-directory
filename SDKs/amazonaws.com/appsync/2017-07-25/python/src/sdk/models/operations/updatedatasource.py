"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import authorizationconfig as shared_authorizationconfig
from ..shared import deltasyncconfig as shared_deltasyncconfig
from ..shared import rdshttpendpointconfig as shared_rdshttpendpointconfig
from ..shared import relationaldatabasesourcetype_enum as shared_relationaldatabasesourcetype_enum
from ..shared import updatedatasourceresponse as shared_updatedatasourceresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDataSourceRequestBodyDynamodbConfig:
    r"""Describes an Amazon DynamoDB data source configuration."""
    
    aws_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awsRegion'), 'exclude': lambda f: f is None }})  
    delta_sync_config: Optional[shared_deltasyncconfig.DeltaSyncConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deltaSyncConfig'), 'exclude': lambda f: f is None }})  
    table_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tableName'), 'exclude': lambda f: f is None }})  
    use_caller_credentials: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useCallerCredentials'), 'exclude': lambda f: f is None }})  
    versioned: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('versioned'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDataSourceRequestBodyElasticsearchConfig:
    r"""<p>Describes an OpenSearch data source configuration.</p> <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <a>OpenSearchServiceDataSourceConfig</a> to specify an OpenSearch data source.</p>"""
    
    aws_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awsRegion'), 'exclude': lambda f: f is None }})  
    endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpoint'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDataSourceRequestBodyEventBridgeConfig:
    r"""Describes an Amazon EventBridge bus data source configuration."""
    
    event_bus_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventBusArn'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDataSourceRequestBodyHTTPConfig:
    r"""Describes an HTTP data source configuration."""
    
    authorization_config: Optional[shared_authorizationconfig.AuthorizationConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizationConfig'), 'exclude': lambda f: f is None }})  
    endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpoint'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDataSourceRequestBodyLambdaConfig:
    r"""Describes an Lambda data source configuration."""
    
    lambda_function_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lambdaFunctionArn'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDataSourceRequestBodyOpenSearchServiceConfig:
    r"""Describes an OpenSearch data source configuration."""
    
    aws_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awsRegion'), 'exclude': lambda f: f is None }})  
    endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpoint'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDataSourceRequestBodyRelationalDatabaseConfig:
    r"""Describes a relational database data source configuration."""
    
    rds_http_endpoint_config: Optional[shared_rdshttpendpointconfig.RdsHTTPEndpointConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rdsHttpEndpointConfig'), 'exclude': lambda f: f is None }})  
    relational_database_source_type: Optional[shared_relationaldatabasesourcetype_enum.RelationalDatabaseSourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationalDatabaseSourceType'), 'exclude': lambda f: f is None }})  
    
class UpdateDataSourceRequestBodyTypeEnum(str, Enum):
    r"""The new data source type."""
    AWS_LAMBDA = 'AWS_LAMBDA'
    AMAZON_DYNAMODB = 'AMAZON_DYNAMODB'
    AMAZON_ELASTICSEARCH = 'AMAZON_ELASTICSEARCH'
    NONE = 'NONE'
    HTTP = 'HTTP'
    RELATIONAL_DATABASE = 'RELATIONAL_DATABASE'
    AMAZON_OPENSEARCH_SERVICE = 'AMAZON_OPENSEARCH_SERVICE'
    AMAZON_EVENTBRIDGE = 'AMAZON_EVENTBRIDGE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDataSourceRequestBody:
    
    type: UpdateDataSourceRequestBodyTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The new data source type."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The new description for the data source."""  
    dynamodb_config: Optional[UpdateDataSourceRequestBodyDynamodbConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dynamodbConfig'), 'exclude': lambda f: f is None }})
    r"""Describes an Amazon DynamoDB data source configuration."""  
    elasticsearch_config: Optional[UpdateDataSourceRequestBodyElasticsearchConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elasticsearchConfig'), 'exclude': lambda f: f is None }})
    r"""<p>Describes an OpenSearch data source configuration.</p> <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <a>OpenSearchServiceDataSourceConfig</a> to specify an OpenSearch data source.</p>"""  
    event_bridge_config: Optional[UpdateDataSourceRequestBodyEventBridgeConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventBridgeConfig'), 'exclude': lambda f: f is None }})
    r"""Describes an Amazon EventBridge bus data source configuration."""  
    http_config: Optional[UpdateDataSourceRequestBodyHTTPConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpConfig'), 'exclude': lambda f: f is None }})
    r"""Describes an HTTP data source configuration."""  
    lambda_config: Optional[UpdateDataSourceRequestBodyLambdaConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lambdaConfig'), 'exclude': lambda f: f is None }})
    r"""Describes an Lambda data source configuration."""  
    open_search_service_config: Optional[UpdateDataSourceRequestBodyOpenSearchServiceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('openSearchServiceConfig'), 'exclude': lambda f: f is None }})
    r"""Describes an OpenSearch data source configuration."""  
    relational_database_config: Optional[UpdateDataSourceRequestBodyRelationalDatabaseConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationalDatabaseConfig'), 'exclude': lambda f: f is None }})
    r"""Describes a relational database data source configuration."""  
    service_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceRoleArn'), 'exclude': lambda f: f is None }})
    r"""The new service role Amazon Resource Name (ARN) for the data source."""  
    

@dataclasses.dataclass
class UpdateDataSourceRequest:
    
    api_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'apiId', 'style': 'simple', 'explode': False }})
    r"""The API ID."""  
    name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'name', 'style': 'simple', 'explode': False }})
    r"""The new name for the data source."""  
    request_body: UpdateDataSourceRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateDataSourceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    concurrent_modification_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConcurrentModificationException"""  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    unauthorized_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnauthorizedException"""  
    update_data_source_response: Optional[shared_updatedatasourceresponse.UpdateDataSourceResponse] = dataclasses.field(default=None)
    r"""Success"""  
    