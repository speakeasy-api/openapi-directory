"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import lambdaeventsource as shared_lambdaeventsource
from ..shared import lambdainputpayloadencodingtype_enum as shared_lambdainputpayloadencodingtype_enum
from ..shared import lambdalinuxprocessparams as shared_lambdalinuxprocessparams
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LambdaExecutionParameters:
    r"""Contains parameters for a Lambda function that runs on IoT Greengrass."""
    
    environment_variables: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentVariables'), 'exclude': lambda f: f is None }})  
    event_sources: Optional[list[shared_lambdaeventsource.LambdaEventSource]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventSources'), 'exclude': lambda f: f is None }})  
    exec_args: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('execArgs'), 'exclude': lambda f: f is None }})  
    input_payload_encoding_type: Optional[shared_lambdainputpayloadencodingtype_enum.LambdaInputPayloadEncodingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputPayloadEncodingType'), 'exclude': lambda f: f is None }})  
    linux_process_params: Optional[shared_lambdalinuxprocessparams.LambdaLinuxProcessParams] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linuxProcessParams'), 'exclude': lambda f: f is None }})  
    max_idle_time_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxIdleTimeInSeconds'), 'exclude': lambda f: f is None }})  
    max_instances_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxInstancesCount'), 'exclude': lambda f: f is None }})  
    max_queue_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxQueueSize'), 'exclude': lambda f: f is None }})  
    pinned: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pinned'), 'exclude': lambda f: f is None }})  
    status_timeout_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusTimeoutInSeconds'), 'exclude': lambda f: f is None }})  
    timeout_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeoutInSeconds'), 'exclude': lambda f: f is None }})  
    