"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import appointmentlistviewmodel as shared_appointmentlistviewmodel
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class GetConsumerV1AppointmentsRequest:
    
    booked_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bookedBy', 'style': 'form', 'explode': True }})
    r"""Filter by the email of who booked"""  
    calendar_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'calendarId', 'style': 'form', 'explode': True }})
    r"""Filter by calendar"""  
    customer_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'customerId', 'style': 'form', 'explode': True }})
    r"""Filter by customer"""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'email', 'style': 'form', 'explode': True }})
    r"""Filter by email address"""  
    end_date: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endDate', 'style': 'form', 'explode': True }})
    r"""Format YYYY-MM-DD. Filter on/before endDate"""  
    lastname: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lastname', 'style': 'form', 'explode': True }})
    r"""Filter by lastname or part of it"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Page limit, default 20, max 100"""  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'locationId', 'style': 'form', 'explode': True }})
    r"""id of business location"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Starting row of page, default 0"""  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'phone', 'style': 'form', 'explode': True }})
    r"""Filter by phone number or part of it"""  
    resource_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'resourceId', 'style': 'form', 'explode': True }})
    r"""Filter by resource"""  
    service_allocation_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'serviceAllocationId', 'style': 'form', 'explode': True }})
    r"""Filter by service allocation"""  
    service_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'serviceId', 'style': 'form', 'explode': True }})
    r"""Filter by service"""  
    start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startDate', 'style': 'form', 'explode': True }})
    r"""Format YYYY-MM-DD. Filter by on/after startDate"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Filter by status: IN, BK, CN, RE, RS"""  
    

@dataclasses.dataclass
class GetConsumerV1AppointmentsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    appointment_list_view_model: Optional[shared_appointmentlistviewmodel.AppointmentListViewModel] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    