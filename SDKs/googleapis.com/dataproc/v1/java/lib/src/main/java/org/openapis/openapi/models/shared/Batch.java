/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Batch - A representation of a batch workload in the service.
 */
public class Batch {
    /**
     * Output only. The time when the batch was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Batch withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. The email address of the user who created the batch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creator")
    public String creator;
    public Batch withCreator(String creator) {
        this.creator = creator;
        return this;
    }
    
    /**
     * Environment configuration for a workload.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environmentConfig")
    public EnvironmentConfig environmentConfig;
    public Batch withEnvironmentConfig(EnvironmentConfig environmentConfig) {
        this.environmentConfig = environmentConfig;
        return this;
    }
    
    /**
     * Optional. The labels to associate with this batch. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a batch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Batch withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Output only. The resource name of the batch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Batch withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. The resource name of the operation associated with this batch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operation")
    public String operation;
    public Batch withOperation(String operation) {
        this.operation = operation;
        return this;
    }
    
    /**
     * A configuration for running an Apache PySpark (https://spark.apache.org/docs/latest/api/python/getting_started/quickstart.html) batch workload.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pysparkBatch")
    public PySparkBatch pysparkBatch;
    public Batch withPysparkBatch(PySparkBatch pysparkBatch) {
        this.pysparkBatch = pysparkBatch;
        return this;
    }
    
    /**
     * Runtime configuration for a workload.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeConfig")
    public RuntimeConfig runtimeConfig;
    public Batch withRuntimeConfig(RuntimeConfig runtimeConfig) {
        this.runtimeConfig = runtimeConfig;
        return this;
    }
    
    /**
     * Runtime information about workload execution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeInfo")
    public RuntimeInfo runtimeInfo;
    public Batch withRuntimeInfo(RuntimeInfo runtimeInfo) {
        this.runtimeInfo = runtimeInfo;
        return this;
    }
    
    /**
     * A configuration for running an Apache Spark (https://spark.apache.org/) batch workload.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sparkBatch")
    public SparkBatch sparkBatch;
    public Batch withSparkBatch(SparkBatch sparkBatch) {
        this.sparkBatch = sparkBatch;
        return this;
    }
    
    /**
     * A configuration for running an Apache SparkR (https://spark.apache.org/docs/latest/sparkr.html) batch workload.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sparkRBatch")
    public SparkRBatch sparkRBatch;
    public Batch withSparkRBatch(SparkRBatch sparkRBatch) {
        this.sparkRBatch = sparkRBatch;
        return this;
    }
    
    /**
     * A configuration for running Apache Spark SQL (https://spark.apache.org/sql/) queries as a batch workload.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sparkSqlBatch")
    public SparkSqlBatch sparkSqlBatch;
    public Batch withSparkSqlBatch(SparkSqlBatch sparkSqlBatch) {
        this.sparkSqlBatch = sparkSqlBatch;
        return this;
    }
    
    /**
     * Output only. The state of the batch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public BatchStateEnum state;
    public Batch withState(BatchStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. Historical state information for the batch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stateHistory")
    public StateHistory[] stateHistory;
    public Batch withStateHistory(StateHistory[] stateHistory) {
        this.stateHistory = stateHistory;
        return this;
    }
    
    /**
     * Output only. Batch state details, such as a failure description if the state is FAILED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stateMessage")
    public String stateMessage;
    public Batch withStateMessage(String stateMessage) {
        this.stateMessage = stateMessage;
        return this;
    }
    
    /**
     * Output only. The time when the batch entered a current state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stateTime")
    public String stateTime;
    public Batch withStateTime(String stateTime) {
        this.stateTime = stateTime;
        return this;
    }
    
    /**
     * Output only. A batch UUID (Unique Universal Identifier). The service generates this value when it creates the batch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    public String uuid;
    public Batch withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }
    
}
