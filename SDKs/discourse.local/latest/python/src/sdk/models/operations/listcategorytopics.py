"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class ListCategoryTopicsRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})  
    slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'slug', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListCategoryTopics200ApplicationJSONTopicListTopicsPosters:
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    extras: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extras') }})  
    primary_group_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_group_id') }})  
    user_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListCategoryTopics200ApplicationJSONTopicListTopics:
    
    archetype: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archetype') }})  
    archived: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived') }})  
    bookmarked: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookmarked') }})  
    bumped: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bumped') }})  
    bumped_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bumped_at') }})  
    category_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category_id') }})  
    closed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closed') }})  
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})  
    excerpt: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excerpt') }})  
    fancy_title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fancy_title') }})  
    featured_link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('featured_link') }})  
    has_summary: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_summary') }})  
    highest_post_number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highest_post_number') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    image_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_url') }})  
    last_posted_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_posted_at') }})  
    last_poster_username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_poster_username') }})  
    like_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('like_count') }})  
    liked: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liked') }})  
    pinned: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pinned') }})  
    pinned_globally: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pinned_globally') }})  
    posters: list[ListCategoryTopics200ApplicationJSONTopicListTopicsPosters] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posters') }})  
    posts_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posts_count') }})  
    reply_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reply_count') }})  
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    unpinned: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unpinned') }})  
    unseen: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unseen') }})  
    views: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('views') }})  
    visible: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visible') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListCategoryTopics200ApplicationJSONTopicList:
    
    can_create_topic: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_create_topic') }})  
    per_page: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per_page') }})  
    topics: list[ListCategoryTopics200ApplicationJSONTopicListTopics] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topics') }})  
    top_tags: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('top_tags'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListCategoryTopics200ApplicationJSONUsers:
    
    avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_template') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListCategoryTopics200ApplicationJSON:
    r"""success response"""
    
    topic_list: ListCategoryTopics200ApplicationJSONTopicList = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_list') }})  
    primary_groups: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_groups'), 'exclude': lambda f: f is None }})  
    users: Optional[list[ListCategoryTopics200ApplicationJSONUsers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ListCategoryTopicsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_category_topics_200_application_json_object: Optional[ListCategoryTopics200ApplicationJSON] = dataclasses.field(default=None)
    r"""success response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    