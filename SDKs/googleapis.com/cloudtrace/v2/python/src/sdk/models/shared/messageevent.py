"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MessageEventTypeEnum(str, Enum):
    r"""Type of MessageEvent. Indicates whether the message was sent or received."""
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    SENT = 'SENT'
    RECEIVED = 'RECEIVED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessageEvent:
    r"""An event describing a message sent/received between Spans."""
    
    compressed_size_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compressedSizeBytes'), 'exclude': lambda f: f is None }})
    r"""The number of compressed bytes sent or received. If missing, the compressed size is assumed to be the same size as the uncompressed size."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""An identifier for the MessageEvent's message that can be used to match `SENT` and `RECEIVED` MessageEvents."""  
    type: Optional[MessageEventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of MessageEvent. Indicates whether the message was sent or received."""  
    uncompressed_size_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uncompressedSizeBytes'), 'exclude': lambda f: f is None }})
    r"""The number of uncompressed bytes sent or received."""  
    