"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Returnaddress:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def content_returnaddress_custombatch(self, request: operations.ContentReturnaddressCustombatchRequest, security: operations.ContentReturnaddressCustombatchSecurity) -> operations.ContentReturnaddressCustombatchResponse:
        r"""Batches multiple return address related calls in a single request."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/returnaddress/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "returnaddress_custom_batch_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentReturnaddressCustombatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentReturnaddressCustombatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReturnaddressCustomBatchResponse])
                res.returnaddress_custom_batch_response = out

        return res

    def content_returnaddress_delete(self, request: operations.ContentReturnaddressDeleteRequest, security: operations.ContentReturnaddressDeleteSecurity) -> operations.ContentReturnaddressDeleteResponse:
        r"""Deletes a return address for the given Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentReturnaddressDeleteRequest, base_url, '/{merchantId}/returnaddress/{returnAddressId}', request)
        
        query_params = utils.get_query_params(operations.ContentReturnaddressDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentReturnaddressDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def content_returnaddress_get(self, request: operations.ContentReturnaddressGetRequest, security: operations.ContentReturnaddressGetSecurity) -> operations.ContentReturnaddressGetResponse:
        r"""Gets a return address of the Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentReturnaddressGetRequest, base_url, '/{merchantId}/returnaddress/{returnAddressId}', request)
        
        query_params = utils.get_query_params(operations.ContentReturnaddressGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentReturnaddressGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReturnAddress])
                res.return_address = out

        return res

    def content_returnaddress_insert(self, request: operations.ContentReturnaddressInsertRequest, security: operations.ContentReturnaddressInsertSecurity) -> operations.ContentReturnaddressInsertResponse:
        r"""Inserts a return address for the Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentReturnaddressInsertRequest, base_url, '/{merchantId}/returnaddress', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "return_address", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentReturnaddressInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentReturnaddressInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReturnAddress])
                res.return_address = out

        return res

    def content_returnaddress_list(self, request: operations.ContentReturnaddressListRequest, security: operations.ContentReturnaddressListSecurity) -> operations.ContentReturnaddressListResponse:
        r"""Lists the return addresses of the Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentReturnaddressListRequest, base_url, '/{merchantId}/returnaddress', request)
        
        query_params = utils.get_query_params(operations.ContentReturnaddressListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentReturnaddressListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReturnaddressListResponse])
                res.returnaddress_list_response = out

        return res

    