"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import filesystemsize as shared_filesystemsize
from ..shared import lifecyclestate_enum as shared_lifecyclestate_enum
from ..shared import performancemode_enum as shared_performancemode_enum
from ..shared import tag as shared_tag
from ..shared import throughputmode_enum as shared_throughputmode_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FileSystemDescription:
    r"""A description of the file system."""
    
    creation_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    creation_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationToken') }})  
    file_system_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileSystemId') }})  
    life_cycle_state: shared_lifecyclestate_enum.LifeCycleStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LifeCycleState') }})  
    number_of_mount_targets: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfMountTargets') }})  
    owner_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OwnerId') }})  
    performance_mode: shared_performancemode_enum.PerformanceModeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PerformanceMode') }})  
    size_in_bytes: shared_filesystemsize.FileSystemSize = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SizeInBytes') }})  
    tags: list[shared_tag.Tag] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags') }})  
    availability_zone_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailabilityZoneId'), 'exclude': lambda f: f is None }})  
    availability_zone_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailabilityZoneName'), 'exclude': lambda f: f is None }})  
    encrypted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Encrypted'), 'exclude': lambda f: f is None }})  
    file_system_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileSystemArn'), 'exclude': lambda f: f is None }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    provisioned_throughput_in_mibps: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProvisionedThroughputInMibps'), 'exclude': lambda f: f is None }})  
    throughput_mode: Optional[shared_throughputmode_enum.ThroughputModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThroughputMode'), 'exclude': lambda f: f is None }})  
    