// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreatePrivateVirtualInterfaceXAmzTargetEnum
type CreatePrivateVirtualInterfaceXAmzTargetEnum string

const (
	CreatePrivateVirtualInterfaceXAmzTargetEnumOvertureServiceCreatePrivateVirtualInterface CreatePrivateVirtualInterfaceXAmzTargetEnum = "OvertureService.CreatePrivateVirtualInterface"
)

func (e CreatePrivateVirtualInterfaceXAmzTargetEnum) ToPointer() *CreatePrivateVirtualInterfaceXAmzTargetEnum {
	return &e
}

func (e *CreatePrivateVirtualInterfaceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OvertureService.CreatePrivateVirtualInterface":
		*e = CreatePrivateVirtualInterfaceXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePrivateVirtualInterfaceXAmzTargetEnum: %v", v)
	}
}

type CreatePrivateVirtualInterfaceRequest struct {
	CreatePrivateVirtualInterfaceRequest shared.CreatePrivateVirtualInterfaceRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                        *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                    *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                       *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                             *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                    *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                        *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                    *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                           CreatePrivateVirtualInterfaceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreatePrivateVirtualInterfaceResponse struct {
	ContentType string
	// DirectConnectClientException
	DirectConnectClientException interface{}
	// DirectConnectServerException
	DirectConnectServerException interface{}
	// DuplicateTagKeysException
	DuplicateTagKeysException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// TooManyTagsException
	TooManyTagsException interface{}
	// Success
	VirtualInterface *shared.VirtualInterface
}
