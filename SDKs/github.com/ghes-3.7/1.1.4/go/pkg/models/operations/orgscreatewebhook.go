// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

// OrgsCreateWebhookRequestBodyConfig - Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.7/rest/reference/orgs#create-hook-config-params).
type OrgsCreateWebhookRequestBodyConfig struct {
	// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
	ContentType *string                          `json:"content_type,omitempty"`
	InsecureSsl *shared.WebhookConfigInsecureSsl `json:"insecure_ssl,omitempty"`
	Password    *string                          `json:"password,omitempty"`
	// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.7/webhooks/event-payloads/#delivery-headers).
	Secret *string `json:"secret,omitempty"`
	// The URL to which the payloads will be delivered.
	URL      string  `json:"url"`
	Username *string `json:"username,omitempty"`
}

type OrgsCreateWebhookRequestBody struct {
	// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
	Active *bool `json:"active,omitempty"`
	// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.7/rest/reference/orgs#create-hook-config-params).
	Config OrgsCreateWebhookRequestBodyConfig `json:"config"`
	// Determines what [events](https://docs.github.com/enterprise-server@3.7/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.
	Events []string `json:"events,omitempty"`
	// Must be passed as "web".
	Name string `json:"name"`
}

type OrgsCreateWebhookRequest struct {
	RequestBody OrgsCreateWebhookRequestBody `request:"mediaType=application/json"`
	// The organization name. The name is not case sensitive.
	Org string `pathParam:"style=simple,explode=false,name=org"`
}

type OrgsCreateWebhookResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Resource not found
	BasicError *shared.BasicError
	// Response
	OrgHook *shared.OrgHook
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
