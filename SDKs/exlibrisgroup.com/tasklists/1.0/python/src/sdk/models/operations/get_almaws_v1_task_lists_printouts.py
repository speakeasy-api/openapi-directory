"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetAlmawsV1TaskListsPrintoutsRequest:
    
    letter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'letter', 'style': 'form', 'explode': True }})
    r"""Printout Name. Optional."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Limits the number of results. Optional. Valid values are 0-100. Default value: 10."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Offset of the results returned. Optional. Default value: 0, which means that the first results will be returned."""  
    printer_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'printer_id', 'style': 'form', 'explode': True }})
    r"""Printout Printer"""  
    printout_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'printout_id', 'style': 'form', 'explode': True }})
    r"""A list of Printout IDs (for example: 123,456,778) from 1 to the limit of 100 Optional. Use of this option overrides all of the filtering parameters"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Printout status. Optional. Valid values are: Printed, Pending, Canceled."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsPrintouts200ApplicationJSONPrintoutPrinter:
    r"""The printer."""
    
    desc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desc'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsPrintouts200ApplicationJSONPrintoutStatus:
    r"""Status of the printout (Pending/Printed/Canceled)."""
    
    desc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desc'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsPrintouts200ApplicationJSONPrintout:
    r"""Printout Object."""
    
    date_: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time that the letter has been send to the Printout Queue."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The printout id."""  
    letter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('letter'), 'exclude': lambda f: f is None }})
    r"""Letter Html body."""  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})  
    printer: Optional[GetAlmawsV1TaskListsPrintouts200ApplicationJSONPrintoutPrinter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('printer'), 'exclude': lambda f: f is None }})
    r"""The printer."""  
    printout: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('printout'), 'exclude': lambda f: f is None }})
    r"""The printout name."""  
    size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""The size of the letter."""  
    source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""The user who printed the letter."""  
    status: Optional[GetAlmawsV1TaskListsPrintouts200ApplicationJSONPrintoutStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the printout (Pending/Printed/Canceled)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsPrintouts200ApplicationJSON:
    r"""A list of printouts."""
    
    printout: Optional[list[GetAlmawsV1TaskListsPrintouts200ApplicationJSONPrintout]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('printout'), 'exclude': lambda f: f is None }})
    r"""printout object."""  
    total_record_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_record_count'), 'exclude': lambda f: f is None }})
    r"""The total number of printouts."""  
    

@dataclasses.dataclass
class GetAlmawsV1TaskListsPrintoutsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    get_almaws_v1_task_lists_printouts_200_application_json_object: Optional[GetAlmawsV1TaskListsPrintouts200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK - This method returns an object based on rest_printouts.xsd. See [here](/alma/apis/docs/xsd/rest_printouts.xsd)"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    