/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;
import org.openapis.openapi.utils.SpeakeasyMetadata;

/**
 * DeviceToPost - Container Class for the Web API
 */
public class DeviceToPost {
    /**
     * The Active Power or current flow rate. In kW or m3/h
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ActivePower")
    @SpeakeasyMetadata("form:name=ActivePower")
    public Double activePower;
    public DeviceToPost withActivePower(Double activePower) {
        this.activePower = activePower;
        return this;
    }
    
    /**
     * The Meter Counter Reading (Total Energy used) in kWh or m3.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReading")
    @SpeakeasyMetadata("form:name=CounterReading")
    public Double counterReading;
    public DeviceToPost withCounterReading(Double counterReading) {
        this.counterReading = counterReading;
        return this;
    }
    
    /**
     * The Meter Counter Reading only export
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingExport")
    @SpeakeasyMetadata("form:name=CounterReadingExport")
    public Double counterReadingExport;
    public DeviceToPost withCounterReadingExport(Double counterReadingExport) {
        this.counterReadingExport = counterReadingExport;
        return this;
    }
    
    /**
     * The Meter Counter Reading only export (Tariff 1)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingExportT1")
    @SpeakeasyMetadata("form:name=CounterReadingExportT1")
    public Double counterReadingExportT1;
    public DeviceToPost withCounterReadingExportT1(Double counterReadingExportT1) {
        this.counterReadingExportT1 = counterReadingExportT1;
        return this;
    }
    
    /**
     * The Meter Counter Reading only export (Tariff 2)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingExportT2")
    @SpeakeasyMetadata("form:name=CounterReadingExportT2")
    public Double counterReadingExportT2;
    public DeviceToPost withCounterReadingExportT2(Double counterReadingExportT2) {
        this.counterReadingExportT2 = counterReadingExportT2;
        return this;
    }
    
    /**
     * The Meter Counter Reading Tariff 1 in kWh or m3.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingT1")
    @SpeakeasyMetadata("form:name=CounterReadingT1")
    public Double counterReadingT1;
    public DeviceToPost withCounterReadingT1(Double counterReadingT1) {
        this.counterReadingT1 = counterReadingT1;
        return this;
    }
    
    /**
     * The Meter Counter Reading Tariff 2 in kWh or m3.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CounterReadingT2")
    @SpeakeasyMetadata("form:name=CounterReadingT2")
    public Double counterReadingT2;
    public DeviceToPost withCounterReadingT2(Double counterReadingT2) {
        this.counterReadingT2 = counterReadingT2;
        return this;
    }
    
    /**
     * The Current (in A)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Current")
    @SpeakeasyMetadata("form:name=Current")
    public Double current;
    public DeviceToPost withCurrent(Double current) {
        this.current = current;
        return this;
    }
    
    /**
     * The Current Phase L1 (in A)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CurrentL1")
    @SpeakeasyMetadata("form:name=CurrentL1")
    public Double currentL1;
    public DeviceToPost withCurrentL1(Double currentL1) {
        this.currentL1 = currentL1;
        return this;
    }
    
    /**
     * The Current Phase L2 (in A)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CurrentL2")
    @SpeakeasyMetadata("form:name=CurrentL2")
    public Double currentL2;
    public DeviceToPost withCurrentL2(Double currentL2) {
        this.currentL2 = currentL2;
        return this;
    }
    
    /**
     * The Current Phase L3 (in A)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CurrentL3")
    @SpeakeasyMetadata("form:name=CurrentL3")
    public Double currentL3;
    public DeviceToPost withCurrentL3(Double currentL3) {
        this.currentL3 = currentL3;
        return this;
    }
    
    /**
     * The Energy Type of this device
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DeviceEnergyType")
    @SpeakeasyMetadata("form:name=DeviceEnergyType")
    public DeviceToPostDeviceEnergyTypeEnum deviceEnergyType;
    public DeviceToPost withDeviceEnergyType(DeviceToPostDeviceEnergyTypeEnum deviceEnergyType) {
        this.deviceEnergyType = deviceEnergyType;
        return this;
    }
    
    /**
     * The digital input number 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DigitalInput1")
    @SpeakeasyMetadata("form:name=DigitalInput1")
    public Boolean digitalInput1;
    public DeviceToPost withDigitalInput1(Boolean digitalInput1) {
        this.digitalInput1 = digitalInput1;
        return this;
    }
    
    /**
     * The ID of the device
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    @SpeakeasyMetadata("form:name=Id")
    public String id;
    public DeviceToPost withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The Sub Type of this Meter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MeterSubType")
    @SpeakeasyMetadata("form:name=MeterSubType")
    public DeviceToPostMeterSubTypeEnum meterSubType;
    public DeviceToPost withMeterSubType(DeviceToPostMeterSubTypeEnum meterSubType) {
        this.meterSubType = meterSubType;
        return this;
    }
    
    /**
     * The Name of the Device
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Name")
    @SpeakeasyMetadata("form:name=Name")
    public String name;
    public DeviceToPost withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The Power Factor (cos phi). Range: 0 - 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PowerFactor")
    @SpeakeasyMetadata("form:name=PowerFactor")
    public Double powerFactor;
    public DeviceToPost withPowerFactor(Double powerFactor) {
        this.powerFactor = powerFactor;
        return this;
    }
    
    /**
     * The Power Factor (cos phi) Phase L1. Range: 0 - 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PowerFactorL1")
    @SpeakeasyMetadata("form:name=PowerFactorL1")
    public Double powerFactorL1;
    public DeviceToPost withPowerFactorL1(Double powerFactorL1) {
        this.powerFactorL1 = powerFactorL1;
        return this;
    }
    
    /**
     * The Power Factor (cos phi) Phase L2. Range: 0 - 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PowerFactorL2")
    @SpeakeasyMetadata("form:name=PowerFactorL2")
    public Double powerFactorL2;
    public DeviceToPost withPowerFactorL2(Double powerFactorL2) {
        this.powerFactorL2 = powerFactorL2;
        return this;
    }
    
    /**
     * The Power Factor (cos phi) Phase L3. Range: 0 - 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PowerFactorL3")
    @SpeakeasyMetadata("form:name=PowerFactorL3")
    public Double powerFactorL3;
    public DeviceToPost withPowerFactorL3(Double powerFactorL3) {
        this.powerFactorL3 = powerFactorL3;
        return this;
    }
    
    /**
     * The Serial number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Serial")
    @SpeakeasyMetadata("form:name=Serial")
    public Long serial;
    public DeviceToPost withSerial(Long serial) {
        this.serial = serial;
        return this;
    }
    
    /**
     * The Temperature (in degree celsius)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Temperature")
    @SpeakeasyMetadata("form:name=Temperature")
    public Double temperature;
    public DeviceToPost withTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }
    
    /**
     * The Date of the Value (in UTC). If this is null the Server Time is used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("ValueDate")
    @SpeakeasyMetadata("form:name=ValueDate")
    public OffsetDateTime valueDate;
    public DeviceToPost withValueDate(OffsetDateTime valueDate) {
        this.valueDate = valueDate;
        return this;
    }
    
    /**
     * The Voltage (in V)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Voltage")
    @SpeakeasyMetadata("form:name=Voltage")
    public Double voltage;
    public DeviceToPost withVoltage(Double voltage) {
        this.voltage = voltage;
        return this;
    }
    
    /**
     * The Voltage Phase L1 (in V)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VoltageL1")
    @SpeakeasyMetadata("form:name=VoltageL1")
    public Double voltageL1;
    public DeviceToPost withVoltageL1(Double voltageL1) {
        this.voltageL1 = voltageL1;
        return this;
    }
    
    /**
     * The Voltage Phase L2 (in V)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VoltageL2")
    @SpeakeasyMetadata("form:name=VoltageL2")
    public Double voltageL2;
    public DeviceToPost withVoltageL2(Double voltageL2) {
        this.voltageL2 = voltageL2;
        return this;
    }
    
    /**
     * The Voltage Phase L3 (in V)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VoltageL3")
    @SpeakeasyMetadata("form:name=VoltageL3")
    public Double voltageL3;
    public DeviceToPost withVoltageL3(Double voltageL3) {
        this.voltageL3 = voltageL3;
        return this;
    }
    
}
