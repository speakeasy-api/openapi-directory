<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class OnDemandGenres 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a genre to an On Demand page
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVodGenreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVodGenreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVodGenreResponse
     */
	public function addVodGenre(
        \OpenAPI\OpenAPI\Models\Operations\AddVodGenreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVodGenreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVodGenreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/pages/{ondemand_id}/genres/{genre_id}', \OpenAPI\OpenAPI\Models\Operations\AddVodGenreRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVodGenreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.genre+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandGenre = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OnDemandGenre', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.genre+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a genre from an On Demand page
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVodGenreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVodGenreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVodGenreResponse
     */
	public function deleteVodGenre(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVodGenreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteVodGenreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVodGenreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/pages/{ondemand_id}/genres/{genre_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteVodGenreRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVodGenreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.genre+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific On Demand page in a genre
     * 
     * Check whether a genre contains an On Demand page.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenreVodRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenreVodResponse
     */
	public function getGenreVod(
        \OpenAPI\OpenAPI\Models\Operations\GetGenreVodRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenreVodResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/genres/{genre_id}/pages/{ondemand_id}', \OpenAPI\OpenAPI\Models\Operations\GetGenreVodRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenreVodResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.page+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OnDemandPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.page+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the On Demand pages in a genre
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenreVodsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenreVodsResponse
     */
	public function getGenreVods(
        \OpenAPI\OpenAPI\Models\Operations\GetGenreVodsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenreVodsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/genres/{genre_id}/pages', \OpenAPI\OpenAPI\Models\Operations\GetGenreVodsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGenreVodsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenreVodsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.page+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandPages = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OnDemandPage>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific On Demand genre
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVodGenreRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVodGenreResponse
     */
	public function getVodGenre(
        \OpenAPI\OpenAPI\Models\Operations\GetVodGenreRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVodGenreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/genres/{genre_id}', \OpenAPI\OpenAPI\Models\Operations\GetVodGenreRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVodGenreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.genre+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandGenre = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OnDemandGenre', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.genre+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check whether an On Demand page belongs to a genre
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVodGenreByOndemandIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVodGenreByOndemandIdResponse
     */
	public function getVodGenreByOndemandId(
        \OpenAPI\OpenAPI\Models\Operations\GetVodGenreByOndemandIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVodGenreByOndemandIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/pages/{ondemand_id}/genres/{genre_id}', \OpenAPI\OpenAPI\Models\Operations\GetVodGenreByOndemandIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVodGenreByOndemandIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.genre+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandGenre = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OnDemandGenre', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.genre+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all On Demand genres
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVodGenresResponse
     */
	public function getVodGenres(
    ): \OpenAPI\OpenAPI\Models\Operations\GetVodGenresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/genres');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVodGenresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.genre+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandGenres = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OnDemandGenre>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the genres of an On Demand page
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVodGenresByOndemandIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVodGenresByOndemandIdResponse
     */
	public function getVodGenresByOndemandId(
        \OpenAPI\OpenAPI\Models\Operations\GetVodGenresByOndemandIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVodGenresByOndemandIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/pages/{ondemand_id}/genres', \OpenAPI\OpenAPI\Models\Operations\GetVodGenresByOndemandIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVodGenresByOndemandIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.genre+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandGenres = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OnDemandGenre>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.genre+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
}