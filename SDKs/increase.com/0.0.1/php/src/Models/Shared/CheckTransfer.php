<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CheckTransfer - Check Transfers move funds from your Increase account by mailing a physical check.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CheckTransfer
{
    /**
     * The identifier of the Account from which funds will be transferred.
     * 
     * @var string $accountId
     */
	#[\JMS\Serializer\Annotation\SerializedName('account_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $accountId;
    
    /**
     * The city of the check's destination.
     * 
     * @var string $addressCity
     */
	#[\JMS\Serializer\Annotation\SerializedName('address_city')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $addressCity;
    
    /**
     * The street address of the check's destination.
     * 
     * @var string $addressLine1
     */
	#[\JMS\Serializer\Annotation\SerializedName('address_line1')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $addressLine1;
    
    /**
     * The second line of the address of the check's destination.
     * 
     * @var string $addressLine2
     */
	#[\JMS\Serializer\Annotation\SerializedName('address_line2')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $addressLine2;
    
    /**
     * The state of the check's destination.
     * 
     * @var string $addressState
     */
	#[\JMS\Serializer\Annotation\SerializedName('address_state')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $addressState;
    
    /**
     * The postal code of the check's destination.
     * 
     * @var string $addressZip
     */
	#[\JMS\Serializer\Annotation\SerializedName('address_zip')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $addressZip;
    
    /**
     * The transfer amount in USD cents.
     * 
     * @var int $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $amount;
    
    /**
     * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
     * 
     * @var \DateTime $createdAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $createdAt;
    
    /**
     * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\CheckTransferCurrencyEnum $currency
     */
	#[\JMS\Serializer\Annotation\SerializedName('currency')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CheckTransferCurrencyEnum>')]
    public CheckTransferCurrencyEnum $currency;
    
    /**
     * After a check transfer is deposited, this will contain supplemental details.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\CheckTransferCheckTransferDeposit $deposit
     */
	#[\JMS\Serializer\Annotation\SerializedName('deposit')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CheckTransferCheckTransferDeposit')]
    public CheckTransferCheckTransferDeposit $deposit;
    
    /**
     * The Check transfer's identifier.
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was mailed.
     * 
     * @var \DateTime $mailedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('mailed_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $mailedAt;
    
    /**
     * The descriptor that will be printed on the memo field on the check.
     * 
     * @var string $message
     */
	#[\JMS\Serializer\Annotation\SerializedName('message')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $message;
    
    /**
     * The descriptor that will be printed on the letter included with the check.
     * 
     * @var string $note
     */
	#[\JMS\Serializer\Annotation\SerializedName('note')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $note;
    
    /**
     * The name that will be printed on the check.
     * 
     * @var string $recipientName
     */
	#[\JMS\Serializer\Annotation\SerializedName('recipient_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $recipientName;
    
    /**
     * The return address to be printed on the check.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\CheckTransferReturnAddress $returnAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('return_address')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CheckTransferReturnAddress')]
    public CheckTransferReturnAddress $returnAddress;
    
    /**
     * The lifecycle status of the transfer.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\CheckTransferStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CheckTransferStatusEnum>')]
    public CheckTransferStatusEnum $status;
    
    /**
     * After a stop-payment is requested on the check, this will contain supplemental details.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\CheckTransferCheckTransferStopPaymentRequest $stopPaymentRequest
     */
	#[\JMS\Serializer\Annotation\SerializedName('stop_payment_request')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CheckTransferCheckTransferStopPaymentRequest')]
    public CheckTransferCheckTransferStopPaymentRequest $stopPaymentRequest;
    
    /**
     * After the transfer is submitted, this will contain supplemental details.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\CheckTransferCheckTransferSubmission $submission
     */
	#[\JMS\Serializer\Annotation\SerializedName('submission')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CheckTransferCheckTransferSubmission')]
    public CheckTransferCheckTransferSubmission $submission;
    
    /**
     * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was submitted.
     * 
     * @var \DateTime $submittedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('submitted_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $submittedAt;
    
    /**
     * If the transfer was created from a template, this will be the template's ID.
     * 
     * @var string $templateId
     */
	#[\JMS\Serializer\Annotation\SerializedName('template_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $templateId;
    
    /**
     * The ID for the transaction caused by the transfer.
     * 
     * @var string $transactionId
     */
	#[\JMS\Serializer\Annotation\SerializedName('transaction_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $transactionId;
    
    /**
     * A constant representing the object's type. For this resource it will always be `check_transfer`.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\CheckTransferTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CheckTransferTypeEnum>')]
    public CheckTransferTypeEnum $type;
    
	public function __construct()
	{
		$this->accountId = "";
		$this->addressCity = "";
		$this->addressLine1 = "";
		$this->addressLine2 = "";
		$this->addressState = "";
		$this->addressZip = "";
		$this->amount = 0;
		$this->createdAt = new \DateTime();
		$this->currency = \OpenAPI\OpenAPI\Models\Shared\CheckTransferCurrencyEnum::CAD;
		$this->deposit = new \OpenAPI\OpenAPI\Models\Shared\CheckTransferCheckTransferDeposit();
		$this->id = "";
		$this->mailedAt = new \DateTime();
		$this->message = "";
		$this->note = "";
		$this->recipientName = "";
		$this->returnAddress = new \OpenAPI\OpenAPI\Models\Shared\CheckTransferReturnAddress();
		$this->status = \OpenAPI\OpenAPI\Models\Shared\CheckTransferStatusEnum::PENDING_APPROVAL;
		$this->stopPaymentRequest = new \OpenAPI\OpenAPI\Models\Shared\CheckTransferCheckTransferStopPaymentRequest();
		$this->submission = new \OpenAPI\OpenAPI\Models\Shared\CheckTransferCheckTransferSubmission();
		$this->submittedAt = new \DateTime();
		$this->templateId = "";
		$this->transactionId = "";
		$this->type = \OpenAPI\OpenAPI\Models\Shared\CheckTransferTypeEnum::CHECK_TRANSFER;
	}
}
