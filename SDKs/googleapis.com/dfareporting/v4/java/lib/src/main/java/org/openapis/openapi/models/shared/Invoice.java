/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Invoice - Contains information about a single invoice
 */
public class Invoice {
    /**
     * The list of summarized campaign information associated with this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("campaign_summaries")
    public CampaignSummary[] campaignSummaries;

    public Invoice withCampaignSummaries(CampaignSummary[] campaignSummaries) {
        this.campaignSummaries = campaignSummaries;
        return this;
    }
    
    /**
     * The originally issued invoice that is being adjusted by this invoice, if applicable. May appear on invoice PDF as *Reference invoice number*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("correctedInvoiceId")
    public String correctedInvoiceId;

    public Invoice withCorrectedInvoiceId(String correctedInvoiceId) {
        this.correctedInvoiceId = correctedInvoiceId;
        return this;
    }
    
    /**
     * Invoice currency code in ISO 4217 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyCode")
    public String currencyCode;

    public Invoice withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * The invoice due date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dueDate")
    public String dueDate;

    public Invoice withDueDate(String dueDate) {
        this.dueDate = dueDate;
        return this;
    }
    
    /**
     * ID of this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Invoice withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The type of invoice document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceType")
    public InvoiceInvoiceTypeEnum invoiceType;

    public Invoice withInvoiceType(InvoiceInvoiceTypeEnum invoiceType) {
        this.invoiceType = invoiceType;
        return this;
    }
    
    /**
     * The date when the invoice was issued.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issueDate")
    public String issueDate;

    public Invoice withIssueDate(String issueDate) {
        this.issueDate = issueDate;
        return this;
    }
    
    /**
     * Identifies what kind of resource this is. Value: the fixed string "dfareporting#invoice".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Invoice withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The ID of the payments account the invoice belongs to. Appears on the invoice PDF as *Billing Account Number*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentsAccountId")
    public String paymentsAccountId;

    public Invoice withPaymentsAccountId(String paymentsAccountId) {
        this.paymentsAccountId = paymentsAccountId;
        return this;
    }
    
    /**
     * The ID of the payments profile the invoice belongs to. Appears on the invoice PDF as *Billing ID*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentsProfileId")
    public String paymentsProfileId;

    public Invoice withPaymentsProfileId(String paymentsProfileId) {
        this.paymentsProfileId = paymentsProfileId;
        return this;
    }
    
    /**
     * The URL to download a PDF copy of the invoice. Note that this URL is user specific and requires a valid OAuth 2.0 access token to access. The access token must be provided in an *Authorization: Bearer* HTTP header. The URL will only be usable for 7 days from when the api is called.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pdfUrl")
    public String pdfUrl;

    public Invoice withPdfUrl(String pdfUrl) {
        this.pdfUrl = pdfUrl;
        return this;
    }
    
    /**
     * Purchase order number associated with the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purchaseOrderNumber")
    public String purchaseOrderNumber;

    public Invoice withPurchaseOrderNumber(String purchaseOrderNumber) {
        this.purchaseOrderNumber = purchaseOrderNumber;
        return this;
    }
    
    /**
     * The originally issued invoice(s) that is being cancelled by this invoice, if applicable. May appear on invoice PDF as *Replaced invoice numbers*. Note: There may be multiple replaced invoices due to consolidation of multiple invoices into a single invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replacedInvoiceIds")
    public String[] replacedInvoiceIds;

    public Invoice withReplacedInvoiceIds(String[] replacedInvoiceIds) {
        this.replacedInvoiceIds = replacedInvoiceIds;
        return this;
    }
    
    /**
     * The invoice service end date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceEndDate")
    public String serviceEndDate;

    public Invoice withServiceEndDate(String serviceEndDate) {
        this.serviceEndDate = serviceEndDate;
        return this;
    }
    
    /**
     * The invoice service start date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceStartDate")
    public String serviceStartDate;

    public Invoice withServiceStartDate(String serviceStartDate) {
        this.serviceStartDate = serviceStartDate;
        return this;
    }
    
    /**
     * The pre-tax subtotal amount, in micros of the invoice's currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtotalAmountMicros")
    public String subtotalAmountMicros;

    public Invoice withSubtotalAmountMicros(String subtotalAmountMicros) {
        this.subtotalAmountMicros = subtotalAmountMicros;
        return this;
    }
    
    /**
     * The invoice total amount, in micros of the invoice's currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmountMicros")
    public String totalAmountMicros;

    public Invoice withTotalAmountMicros(String totalAmountMicros) {
        this.totalAmountMicros = totalAmountMicros;
        return this;
    }
    
    /**
     * The sum of all taxes in invoice, in micros of the invoice's currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalTaxAmountMicros")
    public String totalTaxAmountMicros;

    public Invoice withTotalTaxAmountMicros(String totalTaxAmountMicros) {
        this.totalTaxAmountMicros = totalTaxAmountMicros;
        return this;
    }
    
    public Invoice(){}
}
