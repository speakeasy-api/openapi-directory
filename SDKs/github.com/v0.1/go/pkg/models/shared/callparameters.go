// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CallParametersAsyncAmdStatusCallbackMethodEnum - HTTP method to be used when answering machine detection is completed (an Eqivo extension)
type CallParametersAsyncAmdStatusCallbackMethodEnum string

const (
	CallParametersAsyncAmdStatusCallbackMethodEnumPost CallParametersAsyncAmdStatusCallbackMethodEnum = "POST"
	CallParametersAsyncAmdStatusCallbackMethodEnumGet  CallParametersAsyncAmdStatusCallbackMethodEnum = "GET"
)

func (e *CallParametersAsyncAmdStatusCallbackMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "POST":
		fallthrough
	case "GET":
		*e = CallParametersAsyncAmdStatusCallbackMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CallParametersAsyncAmdStatusCallbackMethodEnum: %s", s)
	}
}

// CallParametersMachineDetectionEnum - Enables answering machine detection; optionally, it waits until the greeting message has been played back (an Eqivo extension)
type CallParametersMachineDetectionEnum string

const (
	CallParametersMachineDetectionEnumEnable           CallParametersMachineDetectionEnum = "Enable"
	CallParametersMachineDetectionEnumDetectMessageEnd CallParametersMachineDetectionEnum = "DetectMessageEnd"
)

func (e *CallParametersMachineDetectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Enable":
		fallthrough
	case "DetectMessageEnd":
		*e = CallParametersMachineDetectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CallParametersMachineDetectionEnum: %s", s)
	}
}

// CallParameters - POST parameters
type CallParameters struct {
	// Fully qualified URL which will provide the RestXML once the call connects
	AnswerURL string `form:"name=AnswerUrl"`
	// When set to `true`, the call flow execution is blocked until answering machine detection is complete (an Eqivo extension)
	AsyncAMD *bool `form:"name=AsyncAMD"`
	// Fully qualified URL to which the answering machine detection result will be sent. `AnsweredBy` and `MachineDetectionDuration` are appended to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (an Eqivo extension)
	AsyncAmdStatusCallback *string `form:"name=AsyncAmdStatusCallback"`
	// HTTP method to be used when answering machine detection is completed (an Eqivo extension)
	AsyncAmdStatusCallbackMethod *CallParametersAsyncAmdStatusCallbackMethodEnum `form:"name=AsyncAmdStatusCallbackMethod"`
	// Caller Name to be set for the call
	CallerName *string `form:"name=CallerName"`
	// Core UUID of the desired FreeSWITCH instance (an Eqivo extension)
	CoreUUID *string `form:"name=CoreUUID"`
	// Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call.
	ExtraDialString *string `form:"name=ExtraDialString"`
	// Phone number to be used as Caller ID
	From string `form:"name=From"`
	// List of codec(s) to be used for each gateway. Enclose codec groups in single quotes
	GatewayCodecs *string `form:"name=GatewayCodecs"`
	// List of maximum retry counts for each gateway
	GatewayRetries *string `form:"name=GatewayRetries"`
	// List of maximum timeout amounts (in seconds) for each gateway
	GatewayTimeouts *string `form:"name=GatewayTimeouts"`
	// Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover)
	Gateways string `form:"name=Gateways"`
	// Schedules the call's hangup at a given time offset (in seconds) after the destination starts ringing
	HangupOnRing *int64 `form:"name=HangupOnRing"`
	// Fully qualified URL to which the call hangup notification will be POSTed. `HangupCause` is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters)
	HangupURL *string `form:"name=HangupUrl"`
	// Enables answering machine detection; optionally, it waits until the greeting message has been played back (an Eqivo extension)
	MachineDetection *CallParametersMachineDetectionEnum `form:"name=MachineDetection"`
	// Initial silence threshold (in milliseconds, an Eqivo extension)
	MachineDetectionSilenceTimeout *int64 `form:"name=MachineDetectionSilenceTimeout"`
	// Silence threshold (in milliseconds, an Eqivo extension)
	MachineDetectionSpeechEndThreshold *int64 `form:"name=MachineDetectionSpeechEndThreshold"`
	// Speech activity/utterance threshold (in milliseconds, an Eqivo extension)
	MachineDetectionSpeechThreshold *int64 `form:"name=MachineDetectionSpeechThreshold"`
	// Amount of time (in seconds) allotted for answering machine detection assessment (an Eqivo extension)
	MachineDetectionTimeout *int64 `form:"name=MachineDetectionTimeout"`
	// Fully qualified URL to which the call ringing notification will be POSTed. `RequestUUID` and `CallUUID` is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters)
	RingURL *string `form:"name=RingUrl"`
	// DTMF tones to be sent when the call is answered. Each occurrence of `w` implies a 0.5 seconds delay whereas `W` will apply a whole second delay. To alter the tone duration (by default, 2000ms), append `@` and the length in milliseconds at the end of the string
	SendDigits *string `form:"name=SendDigits"`
	// When set to `true`, DTMF tones will be sent as early media rather than when the call is answered
	SendOnPreanswer *bool `form:"name=SendOnPreanswer"`
	// Schedules the call's hangup at a given time offset (in seconds) after the call is answered
	TimeLimit *int64 `form:"name=TimeLimit"`
	// Phone number to be called
	To string `form:"name=To"`
}
