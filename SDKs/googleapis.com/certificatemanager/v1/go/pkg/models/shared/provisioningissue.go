// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProvisioningIssueReasonEnum - Output only. Reason for provisioning failures.
type ProvisioningIssueReasonEnum string

const (
	ProvisioningIssueReasonEnumReasonUnspecified  ProvisioningIssueReasonEnum = "REASON_UNSPECIFIED"
	ProvisioningIssueReasonEnumAuthorizationIssue ProvisioningIssueReasonEnum = "AUTHORIZATION_ISSUE"
	ProvisioningIssueReasonEnumRateLimited        ProvisioningIssueReasonEnum = "RATE_LIMITED"
)

func (e ProvisioningIssueReasonEnum) ToPointer() *ProvisioningIssueReasonEnum {
	return &e
}

func (e *ProvisioningIssueReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REASON_UNSPECIFIED":
		fallthrough
	case "AUTHORIZATION_ISSUE":
		fallthrough
	case "RATE_LIMITED":
		*e = ProvisioningIssueReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisioningIssueReasonEnum: %v", v)
	}
}

// ProvisioningIssue - Information about issues with provisioning a Managed Certificate.
type ProvisioningIssue struct {
	// Output only. Human readable explanation about the issue. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.
	Details *string `json:"details,omitempty"`
	// Output only. Reason for provisioning failures.
	Reason *ProvisioningIssueReasonEnum `json:"reason,omitempty"`
}
