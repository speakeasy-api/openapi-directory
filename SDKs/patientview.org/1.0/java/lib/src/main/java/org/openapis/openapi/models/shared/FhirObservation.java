/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class FhirObservation {
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("applies")
    public OffsetDateTime applies;
    public FhirObservation withApplies(OffsetDateTime applies) {
        this.applies = applies;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bodySite")
    public String bodySite;
    public FhirObservation withBodySite(String bodySite) {
        this.bodySite = bodySite;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comments")
    public String comments;
    public FhirObservation withComments(String comments) {
        this.comments = comments;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comparator")
    public String comparator;
    public FhirObservation withComparator(String comparator) {
        this.comparator = comparator;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diagram")
    public String diagram;
    public FhirObservation withDiagram(String diagram) {
        this.diagram = diagram;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group")
    public Group group;
    public FhirObservation withGroup(Group group) {
        this.group = group;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public FhirObservation withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identifier")
    public String identifier;
    public FhirObservation withIdentifier(String identifier) {
        this.identifier = identifier;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public FhirObservation withLocation(String location) {
        this.location = location;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public FhirObservation withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("temporaryUuid")
    public String temporaryUuid;
    public FhirObservation withTemporaryUuid(String temporaryUuid) {
        this.temporaryUuid = temporaryUuid;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("units")
    public String units;
    public FhirObservation withUnits(String units) {
        this.units = units;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    public String value;
    public FhirObservation withValue(String value) {
        this.value = value;
        return this;
    }
    
}
