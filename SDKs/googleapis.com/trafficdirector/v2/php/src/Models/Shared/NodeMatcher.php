<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * NodeMatcher - Specifies the way to match a Node. The match follows AND semantics.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class NodeMatcher
{
    /**
     * Specifies the way to match a string. [#next-free-field: 7]
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\StringMatcher $nodeId
     */
	#[\JMS\Serializer\Annotation\SerializedName('nodeId')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\StringMatcher')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?StringMatcher $nodeId = null;
    
    /**
     * Specifies match criteria on the node metadata.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\StructMatcher> $nodeMetadatas
     */
	#[\JMS\Serializer\Annotation\SerializedName('nodeMetadatas')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\StructMatcher>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $nodeMetadatas = null;
    
	public function __construct()
	{
		$this->nodeId = null;
		$this->nodeMetadatas = null;
	}
}
