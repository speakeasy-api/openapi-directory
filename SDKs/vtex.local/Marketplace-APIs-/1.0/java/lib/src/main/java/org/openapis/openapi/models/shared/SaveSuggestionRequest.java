/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class SaveSuggestionRequest {
    @JsonProperty("AvailableQuantity")
    public Integer availableQuantity;
    public SaveSuggestionRequest withAvailableQuantity(Integer availableQuantity) {
        this.availableQuantity = availableQuantity;
        return this;
    }
    
    /**
     * Name of the brand to which this SKU belongs. It must match the brand created in the marketplace.
     */
    @JsonProperty("BrandName")
    public String brandName;
    public SaveSuggestionRequest withBrandName(String brandName) {
        this.brandName = brandName;
        return this;
    }
    
    /**
     * Full path to the SKU's category. It should be written as {department}/{category}. For example: if the department is **Appliances** and the category is **Oven**, the full path should be 'Appliances/Oven'.
     */
    @JsonProperty("CategoryFullPath")
    public String categoryFullPath;
    public SaveSuggestionRequest withCategoryFullPath(String categoryFullPath) {
        this.categoryFullPath = categoryFullPath;
        return this;
    }
    
    /**
     * SKU reference code. Mandatory if the RefId is not informed.
     */
    @JsonProperty("EAN")
    public String ean;
    public SaveSuggestionRequest withEan(String ean) {
        this.ean = ean;
        return this;
    }
    
    /**
     * Height of the SKU.
     */
    @JsonProperty("Height")
    public Long height;
    public SaveSuggestionRequest withHeight(Long height) {
        this.height = height;
        return this;
    }
    
    /**
     * Array containing the URLs and names the SKU images.
     */
    @JsonProperty("Images")
    public Image[] images;
    public SaveSuggestionRequest withImages(Image[] images) {
        this.images = images;
        return this;
    }
    
    /**
     * Length of the SKU.
     */
    @JsonProperty("Length")
    public Long length;
    public SaveSuggestionRequest withLength(Long length) {
        this.length = length;
        return this;
    }
    
    /**
     * Measurement unit that should be used for this SKU. If this information doesn't apply, you should use the default value `un`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MeasurementUnit")
    public String measurementUnit;
    public SaveSuggestionRequest withMeasurementUnit(String measurementUnit) {
        this.measurementUnit = measurementUnit;
        return this;
    }
    
    @JsonProperty("Pricing")
    public SaveSuggestionRequestPricing pricing;
    public SaveSuggestionRequest withPricing(SaveSuggestionRequestPricing pricing) {
        this.pricing = pricing;
        return this;
    }
    
    /**
     * Product Description containing the main information about the product (not the SKU).
     */
    @JsonProperty("ProductDescription")
    public String productDescription;
    public SaveSuggestionRequest withProductDescription(String productDescription) {
        this.productDescription = productDescription;
        return this;
    }
    
    /**
     * Product ID in seller's account.
     */
    @JsonProperty("ProductId")
    public String productId;
    public SaveSuggestionRequest withProductId(String productId) {
        this.productId = productId;
        return this;
    }
    
    /**
     * Name of the suggested product. This field has a limit of 150 characters.
     */
    @JsonProperty("ProductName")
    public String productName;
    public SaveSuggestionRequest withProductName(String productName) {
        this.productName = productName;
        return this;
    }
    
    /**
     * Array containing the names and values of the product specifications.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ProductSpecifications")
    public ProductSpecification[] productSpecifications;
    public SaveSuggestionRequest withProductSpecifications(ProductSpecification[] productSpecifications) {
        this.productSpecifications = productSpecifications;
        return this;
    }
    
    /**
     * SKU reference code. Mandotory if the EAN is not informed.
     */
    @JsonProperty("RefId")
    public String refId;
    public SaveSuggestionRequest withRefId(String refId) {
        this.refId = refId;
        return this;
    }
    
    /**
     * ID of the seller in the marketplace. This ID must be created by the marketplace and informed to the seller before the integration is built.
     */
    @JsonProperty("SellerId")
    public String sellerId;
    public SaveSuggestionRequest withSellerId(String sellerId) {
        this.sellerId = sellerId;
        return this;
    }
    
    /**
     * ID of the SKU registered in the seller.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SellerStockKeepingUnitId")
    public Integer sellerStockKeepingUnitId;
    public SaveSuggestionRequest withSellerStockKeepingUnitId(Integer sellerStockKeepingUnitId) {
        this.sellerStockKeepingUnitId = sellerStockKeepingUnitId;
        return this;
    }
    
    /**
     * Name of the suggested SKU.
     */
    @JsonProperty("SkuName")
    public String skuName;
    public SaveSuggestionRequest withSkuName(String skuName) {
        this.skuName = skuName;
        return this;
    }
    
    /**
     * Array containing the names and values of the SKU specifications.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SkuSpecifications")
    public SkuSpecification[] skuSpecifications;
    public SaveSuggestionRequest withSkuSpecifications(SkuSpecification[] skuSpecifications) {
        this.skuSpecifications = skuSpecifications;
        return this;
    }
    
    /**
     * Unit multiplier for this SKU. If this information doesn't apply, you should use the default value `1`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UnitMultiplier")
    public Integer unitMultiplier;
    public SaveSuggestionRequest withUnitMultiplier(Integer unitMultiplier) {
        this.unitMultiplier = unitMultiplier;
        return this;
    }
    
    /**
     * Weight of the SKU in grams.
     */
    @JsonProperty("Weight")
    public Long weight;
    public SaveSuggestionRequest withWeight(Long weight) {
        this.weight = weight;
        return this;
    }
    
    /**
     * Width of the SKU.
     */
    @JsonProperty("Width")
    public Long width;
    public SaveSuggestionRequest withWidth(Long width) {
        this.width = width;
        return this;
    }
    
}
