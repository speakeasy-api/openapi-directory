"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datatype as shared_datatype
from ..shared import datavalue as shared_datavalue
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PropertyDefinitionResponse:
    r"""An object that contains response data from a property definition request."""
    
    data_type: shared_datatype.DataType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataType') }})  
    is_external_id: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isExternalId') }})  
    is_final: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isFinal') }})  
    is_imported: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isImported') }})  
    is_inherited: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isInherited') }})  
    is_required_in_entity: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isRequiredInEntity') }})  
    is_stored_externally: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isStoredExternally') }})  
    is_time_series: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isTimeSeries') }})  
    configuration: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configuration'), 'exclude': lambda f: f is None }})  
    default_value: Optional[shared_datavalue.DataValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultValue'), 'exclude': lambda f: f is None }})  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})  
    