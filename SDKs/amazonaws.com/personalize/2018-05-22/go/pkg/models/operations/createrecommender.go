// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateRecommenderXAmzTargetEnum
type CreateRecommenderXAmzTargetEnum string

const (
	CreateRecommenderXAmzTargetEnumAmazonPersonalizeCreateRecommender CreateRecommenderXAmzTargetEnum = "AmazonPersonalize.CreateRecommender"
)

func (e *CreateRecommenderXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonPersonalize.CreateRecommender":
		*e = CreateRecommenderXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecommenderXAmzTargetEnum: %s", s)
	}
}

type CreateRecommenderHeaders struct {
	XAmzAlgorithm     *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateRecommenderXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateRecommenderRequest struct {
	Headers CreateRecommenderHeaders
	Request shared.CreateRecommenderRequest `request:"mediaType=application/json"`
}

type CreateRecommenderResponse struct {
	ContentType string
	// Success
	CreateRecommenderResponse *shared.CreateRecommenderResponse
	// InvalidInputException
	InvalidInputException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	// TooManyTagsException
	TooManyTagsException interface{}
}
