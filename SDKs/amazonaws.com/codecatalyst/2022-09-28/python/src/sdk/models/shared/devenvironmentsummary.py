"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import devenvironmentrepositorysummary as shared_devenvironmentrepositorysummary
from ..shared import devenvironmentstatus_enum as shared_devenvironmentstatus_enum
from ..shared import ide as shared_ide
from ..shared import instancetype_enum as shared_instancetype_enum
from ..shared import persistentstorage as shared_persistentstorage
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DevEnvironmentSummary:
    r"""Information about a Dev Environment."""
    
    creator_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatorId') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    inactivity_timeout_minutes: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inactivityTimeoutMinutes') }})  
    instance_type: shared_instancetype_enum.InstanceTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceType') }})  
    last_updated_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdatedTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    persistent_storage: shared_persistentstorage.PersistentStorage = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('persistentStorage') }})  
    repositories: list[shared_devenvironmentrepositorysummary.DevEnvironmentRepositorySummary] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositories') }})  
    status: shared_devenvironmentstatus_enum.DevEnvironmentStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alias'), 'exclude': lambda f: f is None }})  
    ides: Optional[list[shared_ide.Ide]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ides'), 'exclude': lambda f: f is None }})  
    project_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectName'), 'exclude': lambda f: f is None }})  
    space_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spaceName'), 'exclude': lambda f: f is None }})  
    status_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusReason'), 'exclude': lambda f: f is None }})  
    