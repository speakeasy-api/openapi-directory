/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EncryptionTypeEnum } from "./encryptiontypeenum";
import { Expose, Transform } from "class-transformer";

/**
 * The unit of data of the Kinesis data stream, which is composed of a sequence number, a partition key, and a data blob.
 */
export class RecordT extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ApproximateArrivalTimestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  approximateArrivalTimestamp?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Data" })
  data: string;

  @SpeakeasyMetadata()
  @Expose({ name: "EncryptionType" })
  encryptionType?: EncryptionTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "PartitionKey" })
  partitionKey: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SequenceNumber" })
  sequenceNumber: string;
}
