/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Space - A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app.
 */
public class Space {
    /**
     * Output only. Whether the Chat app was installed by a Google Workspace administrator. Administrators can install a Chat app for their domain, organizational unit, or a group of users. Administrators can only install Chat apps for direct messaging between users and the app. To support admin install, your app must feature direct messaging.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adminInstalled")
    public Boolean adminInstalled;
    public Space withAdminInstalled(Boolean adminInstalled) {
        this.adminInstalled = adminInstalled;
        return this;
    }
    
    /**
     * The space's display name. Required when [creating a space](https://developers.google.com/chat/api/reference/rest/v1/spaces/create). For direct messages, this field may be empty. Supports up to 128 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public Space withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Resource name of the space. Format: spaces/{space}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Space withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Optional. Whether the space is a DM between a Chat app and a single human.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("singleUserBotDm")
    public Boolean singleUserBotDm;
    public Space withSingleUserBotDm(Boolean singleUserBotDm) {
        this.singleUserBotDm = singleUserBotDm;
        return this;
    }
    
    /**
     * Details about the space including description and rules.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spaceDetails")
    public SpaceDetails spaceDetails;
    public Space withSpaceDetails(SpaceDetails spaceDetails) {
        this.spaceDetails = spaceDetails;
        return this;
    }
    
    /**
     * Output only. The threading state in the Chat space.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spaceThreadingState")
    public SpaceSpaceThreadingStateEnum spaceThreadingState;
    public Space withSpaceThreadingState(SpaceSpaceThreadingStateEnum spaceThreadingState) {
        this.spaceThreadingState = spaceThreadingState;
        return this;
    }
    
    /**
     * Output only. Deprecated: Use `spaceThreadingState` instead. Whether messages are threaded in this space.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("threaded")
    public Boolean threaded;
    public Space withThreaded(Boolean threaded) {
        this.threaded = threaded;
        return this;
    }
    
    /**
     * Output only. Deprecated: Use `singleUserBotDm` or `spaceType` (developer preview) instead. The type of a space.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public SpaceTypeEnum type;
    public Space withType(SpaceTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
