"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetDefinitionsResponse = exports.GetDefinitionsRequest = exports.GetDefinitionsUseCanonicalEnum = exports.GetDefinitionsSourceDictionariesEnum = exports.GetDefinitionsPartOfSpeechEnum = exports.GetDefinitionsIncludeTagsEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * Return a closed set of XML tags in response
 */
var GetDefinitionsIncludeTagsEnum;
(function (GetDefinitionsIncludeTagsEnum) {
    GetDefinitionsIncludeTagsEnum["False"] = "false";
    GetDefinitionsIncludeTagsEnum["True"] = "true";
})(GetDefinitionsIncludeTagsEnum = exports.GetDefinitionsIncludeTagsEnum || (exports.GetDefinitionsIncludeTagsEnum = {}));
/**
 * CSV list of part-of-speech types
 */
var GetDefinitionsPartOfSpeechEnum;
(function (GetDefinitionsPartOfSpeechEnum) {
    GetDefinitionsPartOfSpeechEnum["Noun"] = "noun";
    GetDefinitionsPartOfSpeechEnum["Adjective"] = "adjective";
    GetDefinitionsPartOfSpeechEnum["Verb"] = "verb";
    GetDefinitionsPartOfSpeechEnum["Adverb"] = "adverb";
    GetDefinitionsPartOfSpeechEnum["Interjection"] = "interjection";
    GetDefinitionsPartOfSpeechEnum["Pronoun"] = "pronoun";
    GetDefinitionsPartOfSpeechEnum["Preposition"] = "preposition";
    GetDefinitionsPartOfSpeechEnum["Abbreviation"] = "abbreviation";
    GetDefinitionsPartOfSpeechEnum["Affix"] = "affix";
    GetDefinitionsPartOfSpeechEnum["Article"] = "article";
    GetDefinitionsPartOfSpeechEnum["AuxiliaryVerb"] = "auxiliary-verb";
    GetDefinitionsPartOfSpeechEnum["Conjunction"] = "conjunction";
    GetDefinitionsPartOfSpeechEnum["DefiniteArticle"] = "definite-article";
    GetDefinitionsPartOfSpeechEnum["FamilyName"] = "family-name";
    GetDefinitionsPartOfSpeechEnum["GivenName"] = "given-name";
    GetDefinitionsPartOfSpeechEnum["Idiom"] = "idiom";
    GetDefinitionsPartOfSpeechEnum["Imperative"] = "imperative";
    GetDefinitionsPartOfSpeechEnum["NounPlural"] = "noun-plural";
    GetDefinitionsPartOfSpeechEnum["NounPosessive"] = "noun-posessive";
    GetDefinitionsPartOfSpeechEnum["PastParticiple"] = "past-participle";
    GetDefinitionsPartOfSpeechEnum["PhrasalPrefix"] = "phrasal-prefix";
    GetDefinitionsPartOfSpeechEnum["ProperNoun"] = "proper-noun";
    GetDefinitionsPartOfSpeechEnum["ProperNounPlural"] = "proper-noun-plural";
    GetDefinitionsPartOfSpeechEnum["ProperNounPosessive"] = "proper-noun-posessive";
    GetDefinitionsPartOfSpeechEnum["Suffix"] = "suffix";
    GetDefinitionsPartOfSpeechEnum["VerbIntransitive"] = "verb-intransitive";
    GetDefinitionsPartOfSpeechEnum["VerbTransitive"] = "verb-transitive";
})(GetDefinitionsPartOfSpeechEnum = exports.GetDefinitionsPartOfSpeechEnum || (exports.GetDefinitionsPartOfSpeechEnum = {}));
/**
 * Source dictionary to return definitions from.  If 'all' is received, results are returned from all sources. If multiple values are received (e.g. 'century,wiktionary'), results are returned from the first specified dictionary that has definitions. If left blank, results are returned from the first dictionary that has definitions. By default, dictionaries are searched in this order: ahd-5, wiktionary, webster, century, wordnet
 */
var GetDefinitionsSourceDictionariesEnum;
(function (GetDefinitionsSourceDictionariesEnum) {
    GetDefinitionsSourceDictionariesEnum["All"] = "all";
    GetDefinitionsSourceDictionariesEnum["Ahd5"] = "ahd-5";
    GetDefinitionsSourceDictionariesEnum["Century"] = "century";
    GetDefinitionsSourceDictionariesEnum["Wiktionary"] = "wiktionary";
    GetDefinitionsSourceDictionariesEnum["Webster"] = "webster";
    GetDefinitionsSourceDictionariesEnum["Wordnet"] = "wordnet";
})(GetDefinitionsSourceDictionariesEnum = exports.GetDefinitionsSourceDictionariesEnum || (exports.GetDefinitionsSourceDictionariesEnum = {}));
/**
 * If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
 */
var GetDefinitionsUseCanonicalEnum;
(function (GetDefinitionsUseCanonicalEnum) {
    GetDefinitionsUseCanonicalEnum["False"] = "false";
    GetDefinitionsUseCanonicalEnum["True"] = "true";
})(GetDefinitionsUseCanonicalEnum = exports.GetDefinitionsUseCanonicalEnum || (exports.GetDefinitionsUseCanonicalEnum = {}));
var GetDefinitionsRequest = /** @class */ (function (_super) {
    __extends(GetDefinitionsRequest, _super);
    function GetDefinitionsRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=includeRelated",
        }),
        __metadata("design:type", String)
    ], GetDefinitionsRequest.prototype, "includeRelated", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=includeTags",
        }),
        __metadata("design:type", String)
    ], GetDefinitionsRequest.prototype, "includeTags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "queryParam, style=form;explode=true;name=limit" }),
        __metadata("design:type", Number)
    ], GetDefinitionsRequest.prototype, "limit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=partOfSpeech",
        }),
        __metadata("design:type", String)
    ], GetDefinitionsRequest.prototype, "partOfSpeech", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=false;name=sourceDictionaries",
        }),
        __metadata("design:type", String)
    ], GetDefinitionsRequest.prototype, "sourceDictionaries", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=useCanonical",
        }),
        __metadata("design:type", String)
    ], GetDefinitionsRequest.prototype, "useCanonical", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=word",
        }),
        __metadata("design:type", String)
    ], GetDefinitionsRequest.prototype, "word", void 0);
    return GetDefinitionsRequest;
}(utils_1.SpeakeasyBase));
exports.GetDefinitionsRequest = GetDefinitionsRequest;
var GetDefinitionsResponse = /** @class */ (function (_super) {
    __extends(GetDefinitionsResponse, _super);
    function GetDefinitionsResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Uint8Array)
    ], GetDefinitionsResponse.prototype, "body", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetDefinitionsResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetDefinitionsResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], GetDefinitionsResponse.prototype, "rawResponse", void 0);
    return GetDefinitionsResponse;
}(utils_1.SpeakeasyBase));
exports.GetDefinitionsResponse = GetDefinitionsResponse;
