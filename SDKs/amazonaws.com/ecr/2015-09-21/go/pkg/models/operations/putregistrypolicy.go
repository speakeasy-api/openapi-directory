// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutRegistryPolicyXAmzTargetEnum
type PutRegistryPolicyXAmzTargetEnum string

const (
	PutRegistryPolicyXAmzTargetEnumAmazonEc2ContainerRegistryV20150921PutRegistryPolicy PutRegistryPolicyXAmzTargetEnum = "AmazonEC2ContainerRegistry_V20150921.PutRegistryPolicy"
)

func (e *PutRegistryPolicyXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonEC2ContainerRegistry_V20150921.PutRegistryPolicy":
		*e = PutRegistryPolicyXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutRegistryPolicyXAmzTargetEnum: %s", s)
	}
}

type PutRegistryPolicyRequest struct {
	PutRegistryPolicyRequest shared.PutRegistryPolicyRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               PutRegistryPolicyXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutRegistryPolicyResponse struct {
	ContentType string
	// InvalidParameterException
	InvalidParameterException interface{}
	// Success
	PutRegistryPolicyResponse *shared.PutRegistryPolicyResponse
	// ServerException
	ServerException interface{}
	StatusCode      int
	RawResponse     *http.Response
	// ValidationException
	ValidationException interface{}
}
