"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Build:
    r"""Describes the Car specification"""
    
    antibrake_sys: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antibrake_sys'), 'exclude': lambda f: f is None }})
    r"""Antibrake system of the car"""  
    body_subtype: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_subtype'), 'exclude': lambda f: f is None }})
    r"""Body subtype of the car"""  
    body_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_type'), 'exclude': lambda f: f is None }})
    r"""Body type of the car"""  
    city_miles: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city_miles'), 'exclude': lambda f: f is None }})
    r"""City miles of the car"""  
    city_mpg: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city_mpg'), 'exclude': lambda f: f is None }})
    r"""City Mileage in MPG"""  
    cylinders: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cylinders'), 'exclude': lambda f: f is None }})
    r"""No of cylinders of the car"""  
    doors: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doors'), 'exclude': lambda f: f is None }})
    r"""No of doors of the car"""  
    drivetrain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drivetrain'), 'exclude': lambda f: f is None }})
    r"""Drivetrain of the car"""  
    engine: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('engine'), 'exclude': lambda f: f is None }})
    r"""Engine of the car"""  
    engine_aspiration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('engine_aspiration'), 'exclude': lambda f: f is None }})
    r"""Engine aspiration of the car"""  
    engine_block: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('engine_block'), 'exclude': lambda f: f is None }})
    r"""Engine block of the car"""  
    engine_measure: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('engine_measure'), 'exclude': lambda f: f is None }})
    r"""Engine block of the car"""  
    engine_size: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('engine_size'), 'exclude': lambda f: f is None }})
    r"""Engine size of the car"""  
    fuel_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fuel_type'), 'exclude': lambda f: f is None }})
    r"""Fuel type of the car"""  
    highway_miles: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highway_miles'), 'exclude': lambda f: f is None }})
    r"""Highway miles of the car"""  
    highway_mpg: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highway_mpg'), 'exclude': lambda f: f is None }})
    r"""Highway Mileage in MPG"""  
    made_in: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('made_in'), 'exclude': lambda f: f is None }})
    r"""Made in of the car"""  
    make: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('make'), 'exclude': lambda f: f is None }})
    r"""Car Make"""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""Car model"""  
    opt_seating: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('opt_seating'), 'exclude': lambda f: f is None }})
    r"""opt seating of the car"""  
    overall_height: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overall_height'), 'exclude': lambda f: f is None }})
    r"""Overall height of the car"""  
    overall_length: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overall_length'), 'exclude': lambda f: f is None }})
    r"""Overall length of the car"""  
    overall_width: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overall_width'), 'exclude': lambda f: f is None }})
    r"""Overall width of the car"""  
    powertrain_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('powertrain_type'), 'exclude': lambda f: f is None }})
    r"""powertrain_type of the car"""  
    short_trim: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('short_trim'), 'exclude': lambda f: f is None }})
    r"""Short trim of the car"""  
    std_seating: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('std_seating'), 'exclude': lambda f: f is None }})
    r"""Std seating of the car"""  
    steering_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('steering_type'), 'exclude': lambda f: f is None }})
    r"""Steering type of the car"""  
    tank_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tank_size'), 'exclude': lambda f: f is None }})
    r"""Tank size of the car"""  
    transmission: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transmission'), 'exclude': lambda f: f is None }})
    r"""Transmission of the car"""  
    trim: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trim'), 'exclude': lambda f: f is None }})
    r"""Trim of the car"""  
    trim_r: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trim_r'), 'exclude': lambda f: f is None }})
    r"""Trim_r of the car"""  
    vehicle_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vehicle_type'), 'exclude': lambda f: f is None }})
    r"""Vehicle type of the car"""  
    year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('year'), 'exclude': lambda f: f is None }})
    r"""Year of the Car"""  
    