// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GETUserContentUserJSONSecurity struct {
	APIKey string `security:"scheme,type=apiKey,subtype=query,name=api-key"`
}

type GETUserContentUserJSONRequest struct {
	UserID *int64 `queryParam:"style=form,explode=true,name=userID"`
}

type GETUserContentUserJSON200ApplicationJSONDebug struct {
	Version *float64 `json:"version,omitempty"`
}

type GETUserContentUserJSON200ApplicationJSONResultsCommentsAssetAllProperties struct {
	Description *string                  `json:"description,omitempty"`
	Name        *string                  `json:"name,omitempty"`
	Properties  []map[string]interface{} `json:"properties,omitempty"`
}

type GETUserContentUserJSON200ApplicationJSONResultsCommentsAssetLabels struct {
	LabelID   *int64  `json:"labelID,omitempty"`
	LabelName *string `json:"labelName,omitempty"`
}

type GETUserContentUserJSON200ApplicationJSONResultsCommentsAssetPropertiesAutomoderationOff struct {
	GroupID    *int64 `json:"groupID,omitempty"`
	TaxonomyID *int64 `json:"taxonomyID,omitempty"`
}

type GETUserContentUserJSON200ApplicationJSONResultsCommentsAssetPropertiesCommentListSortApprovedateDesc struct {
	GroupID    *int64 `json:"groupID,omitempty"`
	TaxonomyID *int64 `json:"taxonomyID,omitempty"`
}

type GETUserContentUserJSON200ApplicationJSONResultsCommentsAssetPropertiesReachedMaxComOn struct {
	GroupID    *int64 `json:"groupID,omitempty"`
	TaxonomyID *int64 `json:"taxonomyID,omitempty"`
}

type GETUserContentUserJSON200ApplicationJSONResultsCommentsAssetProperties struct {
	AutomoderationOff              *GETUserContentUserJSON200ApplicationJSONResultsCommentsAssetPropertiesAutomoderationOff              `json:"automoderation-off,omitempty"`
	CommentListSortApprovedateDesc *GETUserContentUserJSON200ApplicationJSONResultsCommentsAssetPropertiesCommentListSortApprovedateDesc `json:"comment-list-sort-approvedate-desc,omitempty"`
	ReachedMaxComOn                *GETUserContentUserJSON200ApplicationJSONResultsCommentsAssetPropertiesReachedMaxComOn                `json:"reached-max-com-on,omitempty"`
}

type GETUserContentUserJSON200ApplicationJSONResultsCommentsAsset struct {
	AllProperties []GETUserContentUserJSON200ApplicationJSONResultsCommentsAssetAllProperties `json:"all-properties,omitempty"`
	AssetID       *int64                                                                      `json:"assetID,omitempty"`
	AssetTitle    *string                                                                     `json:"assetTitle,omitempty"`
	AssetURL      *string                                                                     `json:"assetURL,omitempty"`
	CreateDate    *string                                                                     `json:"createDate,omitempty"`
	Labels        []GETUserContentUserJSON200ApplicationJSONResultsCommentsAssetLabels        `json:"labels,omitempty"`
	Properties    *GETUserContentUserJSON200ApplicationJSONResultsCommentsAssetProperties     `json:"properties,omitempty"`
	Source        *string                                                                     `json:"source,omitempty"`
	Taxonomy      *string                                                                     `json:"taxonomy,omitempty"`
	Text          []map[string]interface{}                                                    `json:"text,omitempty"`
	UpdateDate    *string                                                                     `json:"updateDate,omitempty"`
	VendorID      *string                                                                     `json:"vendorID,omitempty"`
}

type GETUserContentUserJSON200ApplicationJSONResultsComments struct {
	ApproveDate              *string                                                       `json:"approveDate,omitempty"`
	Asset                    *GETUserContentUserJSON200ApplicationJSONResultsCommentsAsset `json:"asset,omitempty"`
	CommentBody              *string                                                       `json:"commentBody,omitempty"`
	CommentID                *int64                                                        `json:"commentID,omitempty"`
	CommentSequence          *int64                                                        `json:"commentSequence,omitempty"`
	CommentTitle             *string                                                       `json:"commentTitle,omitempty"`
	CommentType              *string                                                       `json:"commentType,omitempty"`
	CreateDate               *string                                                       `json:"createDate,omitempty"`
	EditorsSelection         *bool                                                         `json:"editorsSelection,omitempty"`
	Labels                   []map[string]interface{}                                      `json:"labels,omitempty"`
	ParentID                 interface{}                                                   `json:"parentID,omitempty"`
	Permid                   *int64                                                        `json:"permid,omitempty"`
	PicURL                   *string                                                       `json:"picURL,omitempty"`
	Recommendations          *int64                                                        `json:"recommendations,omitempty"`
	Replies                  []map[string]interface{}                                      `json:"replies,omitempty"`
	ReplyCount               *int64                                                        `json:"replyCount,omitempty"`
	Status                   *string                                                       `json:"status,omitempty"`
	UpdateDate               *string                                                       `json:"updateDate,omitempty"`
	UserDisplayName          interface{}                                                   `json:"userDisplayName,omitempty"`
	UserID                   *int64                                                        `json:"userID,omitempty"`
	UserLocation             interface{}                                                   `json:"userLocation,omitempty"`
	UserSubmittedDisplayName *string                                                       `json:"userSubmittedDisplayName,omitempty"`
	UserSubmittedLocation    *string                                                       `json:"userSubmittedLocation,omitempty"`
	UserSubmittedTitle       interface{}                                                   `json:"userSubmittedTitle,omitempty"`
	UserSubmittedURL         interface{}                                                   `json:"userSubmittedURL,omitempty"`
	UserTitle                interface{}                                                   `json:"userTitle,omitempty"`
	UserURL                  interface{}                                                   `json:"userURL,omitempty"`
}

type GETUserContentUserJSON200ApplicationJSONResults struct {
	APITimestamp          *string                                                   `json:"api_timestamp,omitempty"`
	Comments              []GETUserContentUserJSON200ApplicationJSONResultsComments `json:"comments,omitempty"`
	TotalCommentsFound    *int64                                                    `json:"totalCommentsFound,omitempty"`
	TotalCommentsReturned *int64                                                    `json:"totalCommentsReturned,omitempty"`
}

type GETUserContentUserJSON200ApplicationJSON struct {
	Copyright *string                                          `json:"copyright,omitempty"`
	Debug     *GETUserContentUserJSON200ApplicationJSONDebug   `json:"debug,omitempty"`
	Results   *GETUserContentUserJSON200ApplicationJSONResults `json:"results,omitempty"`
	Status    *string                                          `json:"status,omitempty"`
}

type GETUserContentUserJSONResponse struct {
	ContentType                                    string
	GETUserContentUserJSON200ApplicationJSONObject *GETUserContentUserJSON200ApplicationJSON
	StatusCode                                     int
	RawResponse                                    *http.Response
}
