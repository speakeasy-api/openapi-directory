/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateServiceConversationMessageServerList = [
  "https://conversations.twilio.com",
] as const;

export class CreateServiceConversationMessageSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class CreateServiceConversationMessageCreateServiceConversationMessageRequest extends SpeakeasyBase {
  /**
   * A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set "{}" will be returned.
   */
  @SpeakeasyMetadata({ data: "form, name=Attributes" })
  attributes?: string;

  /**
   * The channel specific identifier of the message's author. Defaults to `system`.
   */
  @SpeakeasyMetadata({ data: "form, name=Author" })
  author?: string;

  /**
   * The content of the message, can be up to 1,600 characters long.
   */
  @SpeakeasyMetadata({ data: "form, name=Body" })
  body?: string;

  /**
   * The unique ID of the multi-channel [Rich Content](https://www.twilio.com/docs/content-api) template, required for template-generated messages.  **Note** that if this field is set, `Body` and `MediaSid` parameters are ignored.
   */
  @SpeakeasyMetadata({ data: "form, name=ContentSid" })
  contentSid?: string;

  /**
   * A structurally valid JSON string that contains values to resolve Rich Content template variables.
   */
  @SpeakeasyMetadata({ data: "form, name=ContentVariables" })
  contentVariables?: string;

  /**
   * The date that this resource was created.
   */
  @SpeakeasyMetadata({
    data: "form, name=DateCreated;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  dateCreated?: Date;

  /**
   * The date that this resource was last updated. `null` if the message has not been edited.
   */
  @SpeakeasyMetadata({
    data: "form, name=DateUpdated;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  dateUpdated?: Date;

  /**
   * The Media SID to be attached to the new Message.
   */
  @SpeakeasyMetadata({ data: "form, name=MediaSid" })
  mediaSid?: string;
}

export class CreateServiceConversationMessageRequest extends SpeakeasyBase {
  /**
   * The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ChatServiceSid",
  })
  chatServiceSid: string;

  /**
   * The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ConversationSid",
  })
  conversationSid: string;

  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: CreateServiceConversationMessageCreateServiceConversationMessageRequest;

  /**
   * The X-Twilio-Webhook-Enabled HTTP request header
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Twilio-Webhook-Enabled",
  })
  xTwilioWebhookEnabled?: shared.ServiceConversationMessageEnumWebhookEnabledTypeEnum;
}

export class CreateServiceConversationMessageResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  conversationsV1ServiceServiceConversationServiceConversationMessage?: shared.ConversationsV1ServiceServiceConversationServiceConversationMessage;
}
