// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworkClientsRequest struct {
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	NetworkID    string  `pathParam:"style=simple,explode=false,name=networkId"`
	// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
	// The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
	T0 *string `queryParam:"style=form,explode=true,name=t0"`
	// The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
	Timespan *float32 `queryParam:"style=form,explode=true,name=timespan"`
}

// GetNetworkClients200ApplicationJSONStatusEnum - The connection status of the client
type GetNetworkClients200ApplicationJSONStatusEnum string

const (
	GetNetworkClients200ApplicationJSONStatusEnumOffline GetNetworkClients200ApplicationJSONStatusEnum = "Offline"
	GetNetworkClients200ApplicationJSONStatusEnumOnline  GetNetworkClients200ApplicationJSONStatusEnum = "Online"
)

func (e *GetNetworkClients200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Offline":
		fallthrough
	case "Online":
		*e = GetNetworkClients200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkClients200ApplicationJSONStatusEnum: %s", s)
	}
}

// GetNetworkClients200ApplicationJSONUsage - Usage, sent and received
type GetNetworkClients200ApplicationJSONUsage struct {
	// Usage received by the client
	Recv *float32 `json:"recv,omitempty"`
	// Usage sent by the client
	Sent *float32 `json:"sent,omitempty"`
}

// GetNetworkClients200ApplicationJSON - Successful operation
type GetNetworkClients200ApplicationJSON struct {
	// Short description of the client
	Description *string `json:"description,omitempty"`
	// Timestamp client was first seen in the network
	FirstSeen *int64 `json:"firstSeen,omitempty"`
	// 802.1x group policy of the client
	GroupPolicy8021x *string `json:"groupPolicy8021x,omitempty"`
	// The ID of the client
	ID *string `json:"id,omitempty"`
	// The IP address of the client
	IP *string `json:"ip,omitempty"`
	// The IPv6 address of the client
	Ip6 *string `json:"ip6,omitempty"`
	// Local IPv6 address of the client
	Ip6Local *string `json:"ip6Local,omitempty"`
	// Timestamp client was last seen in the network
	LastSeen *int64 `json:"lastSeen,omitempty"`
	// The MAC address of the client
	Mac *string `json:"mac,omitempty"`
	// Manufacturer of the client
	Manufacturer *string `json:"manufacturer,omitempty"`
	// Notes on the client
	Notes *string `json:"notes,omitempty"`
	// The operating system of the client
	Os *string `json:"os,omitempty"`
	// The MAC address of the node that the device was last connected to
	RecentDeviceMac *string `json:"recentDeviceMac,omitempty"`
	// The name of the node the device was last connected to
	RecentDeviceName *string `json:"recentDeviceName,omitempty"`
	// The serial of the node the device was last connected to
	RecentDeviceSerial *string `json:"recentDeviceSerial,omitempty"`
	// Status of SM for the client
	SmInstalled *bool `json:"smInstalled,omitempty"`
	// The name of the SSID that the client is connected to
	Ssid *string `json:"ssid,omitempty"`
	// The connection status of the client
	Status *GetNetworkClients200ApplicationJSONStatusEnum `json:"status,omitempty"`
	// The switch port that the client is connected to
	Switchport *string `json:"switchport,omitempty"`
	// Usage, sent and received
	Usage *GetNetworkClients200ApplicationJSONUsage `json:"usage,omitempty"`
	// The username of the user of the client
	User *string `json:"user,omitempty"`
	// The name of the VLAN that the client is connected to
	Vlan *string `json:"vlan,omitempty"`
}

type GetNetworkClientsResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkClients200ApplicationJSONObject *GetNetworkClients200ApplicationJSON
}
