// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MitigationActionTypeEnum string

const (
	MitigationActionTypeEnumUpdateDeviceCertificate     MitigationActionTypeEnum = "UPDATE_DEVICE_CERTIFICATE"
	MitigationActionTypeEnumUpdateCaCertificate         MitigationActionTypeEnum = "UPDATE_CA_CERTIFICATE"
	MitigationActionTypeEnumAddThingsToThingGroup       MitigationActionTypeEnum = "ADD_THINGS_TO_THING_GROUP"
	MitigationActionTypeEnumReplaceDefaultPolicyVersion MitigationActionTypeEnum = "REPLACE_DEFAULT_POLICY_VERSION"
	MitigationActionTypeEnumEnableIotLogging            MitigationActionTypeEnum = "ENABLE_IOT_LOGGING"
	MitigationActionTypeEnumPublishFindingToSns         MitigationActionTypeEnum = "PUBLISH_FINDING_TO_SNS"
)

func (e MitigationActionTypeEnum) ToPointer() *MitigationActionTypeEnum {
	return &e
}

func (e *MitigationActionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UPDATE_DEVICE_CERTIFICATE":
		fallthrough
	case "UPDATE_CA_CERTIFICATE":
		fallthrough
	case "ADD_THINGS_TO_THING_GROUP":
		fallthrough
	case "REPLACE_DEFAULT_POLICY_VERSION":
		fallthrough
	case "ENABLE_IOT_LOGGING":
		fallthrough
	case "PUBLISH_FINDING_TO_SNS":
		*e = MitigationActionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MitigationActionTypeEnum: %v", v)
	}
}
