/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { WLTRecord } from "./wltrecord";
import { Expose, Type } from "class-transformer";

/**
 * Backup team called in, may be null.
 */
export class EliminationAllianceBackup extends SpeakeasyBase {
  /**
   * Team key that was called in as the backup.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "in" })
  in?: string;

  /**
   * Team key that was replaced by the backup team.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "out" })
  out?: string;
}

export class EliminationAllianceStatus extends SpeakeasyBase {
  /**
   * A Win-Loss-Tie record for a team, or an alliance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "current_level_record" })
  @Type(() => WLTRecord)
  currentLevelRecord?: WLTRecord;

  @SpeakeasyMetadata()
  @Expose({ name: "level" })
  level?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "playoff_average" })
  playoffAverage?: number;

  /**
   * A Win-Loss-Tie record for a team, or an alliance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "record" })
  @Type(() => WLTRecord)
  record?: WLTRecord;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;
}

export class EliminationAlliance extends SpeakeasyBase {
  /**
   * Backup team called in, may be null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "backup" })
  @Type(() => EliminationAllianceBackup)
  backup?: EliminationAllianceBackup;

  /**
   * List of teams that declined the alliance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "declines" })
  declines?: string[];

  /**
   * Alliance name, may be null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * List of team keys picked for the alliance. First pick is captain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "picks" })
  picks: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(() => EliminationAllianceStatus)
  status?: EliminationAllianceStatus;
}
