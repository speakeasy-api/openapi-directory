"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import image as shared_image
from enum import Enum
from typing import Optional

class GetUntaggedImagesOrderByEnum(str, Enum):
    r"""The ordering. Defaults to newest."""
    NEWEST = 'Newest'
    OLDEST = 'Oldest'


@dataclasses.dataclass
class GetUntaggedImagesRequest:
    
    project_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'projectId', 'style': 'simple', 'explode': False }})
    r"""The project id."""  
    training_key: str = dataclasses.field(metadata={'header': { 'field_name': 'Training-Key', 'style': 'simple', 'explode': False }})  
    iteration_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'iterationId', 'style': 'form', 'explode': True }})
    r"""The iteration id. Defaults to workspace."""  
    order_by: Optional[GetUntaggedImagesOrderByEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'orderBy', 'style': 'form', 'explode': True }})
    r"""The ordering. Defaults to newest."""  
    skip: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'skip', 'style': 'form', 'explode': True }})
    r"""Number of images to skip before beginning the image batch. Defaults to 0."""  
    take: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'take', 'style': 'form', 'explode': True }})
    r"""Maximum number of images to return. Defaults to 50, limited to 256."""  
    

@dataclasses.dataclass
class GetUntaggedImagesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    images: Optional[list[shared_image.Image]] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    