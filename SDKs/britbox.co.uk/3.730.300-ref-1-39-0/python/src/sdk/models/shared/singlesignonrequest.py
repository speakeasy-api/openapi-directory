"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SingleSignOnRequestCookieTypeEnum(str, Enum):
    r"""If you specify a cookie type then a content filter cookie will be returned
    along with the token(s). This is only intended for web based clients which
    need to pass the cookies to a server to render a page based on the user's
    content filters e.g subscription code.
    
    If type `Session` the cookie will be session based.
    If type `Persistent` the cookie will have a medium term lifespan.
    If undefined no cookies will be set.
    """
    SESSION = 'Session'
    PERSISTENT = 'Persistent'

class SingleSignOnRequestProviderEnum(str, Enum):
    r"""The third party single-sign-on provider."""
    FACEBOOK = 'Facebook'

class SingleSignOnRequestScopesEnum(str, Enum):
    CATALOG = 'Catalog'
    COMMERCE = 'Commerce'
    SETTINGS = 'Settings'
    PLAYBACK = 'Playback'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SingleSignOnRequest:
    r"""A single-sign-on request."""
    
    provider: SingleSignOnRequestProviderEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider') }})
    r"""The third party single-sign-on provider."""  
    token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token') }})
    r"""A token from the third party single-sign-on provider e.g. an identity token from Facebook."""  
    cookie_type: Optional[SingleSignOnRequestCookieTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cookieType'), 'exclude': lambda f: f is None }})
    r"""If you specify a cookie type then a content filter cookie will be returned
    along with the token(s). This is only intended for web based clients which
    need to pass the cookies to a server to render a page based on the user's
    content filters e.g subscription code.
    
    If type `Session` the cookie will be session based.
    If type `Persistent` the cookie will have a medium term lifespan.
    If undefined no cookies will be set.
    """  
    link_accounts: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkAccounts'), 'exclude': lambda f: f is None }})
    r"""When a user attempts to sign in using single-sign-on, we may find an account created
    previously through the manual sign up flow with the same email. If this is the
    case then an option to link the two accounts can be made available.
    
    If this flag is set to true then accounts will be linked automatically.
    
    If this flag is not set or set to false and an existing account is found 
    then an http 401 with subcode `6001` will be returned. Client apps can then present the
    option to link the accounts. If the user decides to accept, then the same call
    can be repeated with this flag set to true.
    """  
    scopes: Optional[list[SingleSignOnRequestScopesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes'), 'exclude': lambda f: f is None }})
    r"""The scope(s) of the tokens required.
    For each scope listed an Account and Profile token of that scope will be returned.
    """  
    