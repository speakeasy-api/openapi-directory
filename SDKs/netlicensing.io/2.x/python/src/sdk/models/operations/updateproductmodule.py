"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import netlicensing as shared_netlicensing
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class UpdateProductModuleSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class UpdateProductModuleRequestBodyLicenseTemplateEnum(str, Enum):
    TIMEVOLUME = 'TIMEVOLUME'
    FEATURE = 'FEATURE'

class UpdateProductModuleRequestBodyNodeSecretModeEnum(str, Enum):
    PREDEFINED = 'PREDEFINED'
    CLIENT = 'CLIENT'


@dataclasses.dataclass
class UpdateProductModuleRequestBody:
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'active' }})
    r"""If set to 'false', the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module."""  
    license_template: Optional[list[UpdateProductModuleRequestBodyLicenseTemplateEnum]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'licenseTemplate' }})
    r"""License Template. Mandatory for 'Try &amp; Buy' licensing model."""  
    licensing_model: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'licensingModel' }})
    r"""Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation."""  
    max_checkout_validity: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'maxCheckoutValidity' }})
    r"""Maximum checkout validity (days). Mandatory for 'Floating' licensing model."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'name' }})
    r"""Product Module name that is visible to the end customers in NetLicensing Shop."""  
    node_secret_mode: Optional[list[UpdateProductModuleRequestBodyNodeSecretModeEnum]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'nodeSecretMode' }})
    r"""Secret Mode. Mandatory for 'Node-Locked' licensing model."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'number' }})
    r"""New Product Module number (update)."""  
    red_threshold: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'redThreshold' }})
    r"""Remaining time volume for red level. Mandatory for 'Rental' licensing model."""  
    yellow_threshold: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'yellowThreshold' }})
    r"""Remaining time volume for yellow level. Mandatory for 'Rental' licensing model."""  
    

@dataclasses.dataclass
class UpdateProductModuleRequest:
    
    product_module_number: str = dataclasses.field(metadata={'path_param': { 'field_name': 'productModuleNumber', 'style': 'simple', 'explode': False }})
    r"""Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product."""  
    request_body: Optional[UpdateProductModuleRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateProductModuleResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    netlicensing: Optional[shared_netlicensing.Netlicensing] = dataclasses.field(default=None)
    r"""Successful request"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    