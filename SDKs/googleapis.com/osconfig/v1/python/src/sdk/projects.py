"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def osconfig_projects_locations_instances_inventories_list(self, request: operations.OsconfigProjectsLocationsInstancesInventoriesListRequest, security: operations.OsconfigProjectsLocationsInstancesInventoriesListSecurity) -> operations.OsconfigProjectsLocationsInstancesInventoriesListResponse:
        r"""List inventory data for all VM instances in the specified zone."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsLocationsInstancesInventoriesListRequest, base_url, '/v1/{parent}/inventories', request)
        
        query_params = utils.get_query_params(operations.OsconfigProjectsLocationsInstancesInventoriesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsLocationsInstancesInventoriesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListInventoriesResponse])
                res.list_inventories_response = out

        return res

    def osconfig_projects_locations_instances_os_policy_assignments_reports_list(self, request: operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListRequest, security: operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListSecurity) -> operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListResponse:
        r"""List OS policy asssignment reports for all Compute Engine VM instances in the specified zone."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListRequest, base_url, '/v1/{parent}/reports', request)
        
        query_params = utils.get_query_params(operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOSPolicyAssignmentReportsResponse])
                res.list_os_policy_assignment_reports_response = out

        return res

    def osconfig_projects_locations_instances_vulnerability_reports_list(self, request: operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListRequest, security: operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListSecurity) -> operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListResponse:
        r"""List vulnerability reports for all VM instances in the specified zone."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListRequest, base_url, '/v1/{parent}/vulnerabilityReports', request)
        
        query_params = utils.get_query_params(operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListVulnerabilityReportsResponse])
                res.list_vulnerability_reports_response = out

        return res

    def osconfig_projects_locations_os_policy_assignments_create(self, request: operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateRequest, security: operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateSecurity) -> operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateResponse:
        r"""Create an OS policy assignment. This method also creates the first revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1/projects.locations.osPolicyAssignments.operations/cancel)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateRequest, base_url, '/v1/{parent}/osPolicyAssignments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "os_policy_assignment_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def osconfig_projects_locations_os_policy_assignments_list(self, request: operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRequest, security: operations.OsconfigProjectsLocationsOsPolicyAssignmentsListSecurity) -> operations.OsconfigProjectsLocationsOsPolicyAssignmentsListResponse:
        r"""List the OS policy assignments under the parent resource. For each OS policy assignment, the latest revision is returned."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRequest, base_url, '/v1/{parent}/osPolicyAssignments', request)
        
        query_params = utils.get_query_params(operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsLocationsOsPolicyAssignmentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOSPolicyAssignmentsResponse])
                res.list_os_policy_assignments_response = out

        return res

    def osconfig_projects_locations_os_policy_assignments_list_revisions(self, request: operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsRequest, security: operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsSecurity) -> operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsResponse:
        r"""List the OS policy assignment revisions for a given OS policy assignment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsRequest, base_url, '/v1/{name}:listRevisions', request)
        
        query_params = utils.get_query_params(operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOSPolicyAssignmentRevisionsResponse])
                res.list_os_policy_assignment_revisions_response = out

        return res

    def osconfig_projects_patch_deployments_create(self, request: operations.OsconfigProjectsPatchDeploymentsCreateRequest, security: operations.OsconfigProjectsPatchDeploymentsCreateSecurity) -> operations.OsconfigProjectsPatchDeploymentsCreateResponse:
        r"""Create an OS Config patch deployment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsPatchDeploymentsCreateRequest, base_url, '/v1/{parent}/patchDeployments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "patch_deployment_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.OsconfigProjectsPatchDeploymentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsPatchDeploymentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatchDeployment])
                res.patch_deployment = out

        return res

    def osconfig_projects_patch_deployments_delete(self, request: operations.OsconfigProjectsPatchDeploymentsDeleteRequest, security: operations.OsconfigProjectsPatchDeploymentsDeleteSecurity) -> operations.OsconfigProjectsPatchDeploymentsDeleteResponse:
        r"""Delete an OS Config patch deployment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsPatchDeploymentsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.OsconfigProjectsPatchDeploymentsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsPatchDeploymentsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def osconfig_projects_patch_deployments_list(self, request: operations.OsconfigProjectsPatchDeploymentsListRequest, security: operations.OsconfigProjectsPatchDeploymentsListSecurity) -> operations.OsconfigProjectsPatchDeploymentsListResponse:
        r"""Get a page of OS Config patch deployments."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsPatchDeploymentsListRequest, base_url, '/v1/{parent}/patchDeployments', request)
        
        query_params = utils.get_query_params(operations.OsconfigProjectsPatchDeploymentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsPatchDeploymentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPatchDeploymentsResponse])
                res.list_patch_deployments_response = out

        return res

    def osconfig_projects_patch_deployments_patch(self, request: operations.OsconfigProjectsPatchDeploymentsPatchRequest, security: operations.OsconfigProjectsPatchDeploymentsPatchSecurity) -> operations.OsconfigProjectsPatchDeploymentsPatchResponse:
        r"""Update an OS Config patch deployment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsPatchDeploymentsPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "patch_deployment_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.OsconfigProjectsPatchDeploymentsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsPatchDeploymentsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatchDeployment])
                res.patch_deployment = out

        return res

    def osconfig_projects_patch_deployments_pause(self, request: operations.OsconfigProjectsPatchDeploymentsPauseRequest, security: operations.OsconfigProjectsPatchDeploymentsPauseSecurity) -> operations.OsconfigProjectsPatchDeploymentsPauseResponse:
        r"""Change state of patch deployment to \\"PAUSED\\". Patch deployment in paused state doesn't generate patch jobs."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsPatchDeploymentsPauseRequest, base_url, '/v1/{name}:pause', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.OsconfigProjectsPatchDeploymentsPauseRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsPatchDeploymentsPauseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatchDeployment])
                res.patch_deployment = out

        return res

    def osconfig_projects_patch_deployments_resume(self, request: operations.OsconfigProjectsPatchDeploymentsResumeRequest, security: operations.OsconfigProjectsPatchDeploymentsResumeSecurity) -> operations.OsconfigProjectsPatchDeploymentsResumeResponse:
        r"""Change state of patch deployment back to \\"ACTIVE\\". Patch deployment in active state continues to generate patch jobs."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsPatchDeploymentsResumeRequest, base_url, '/v1/{name}:resume', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.OsconfigProjectsPatchDeploymentsResumeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsPatchDeploymentsResumeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatchDeployment])
                res.patch_deployment = out

        return res

    def osconfig_projects_patch_jobs_cancel(self, request: operations.OsconfigProjectsPatchJobsCancelRequest, security: operations.OsconfigProjectsPatchJobsCancelSecurity) -> operations.OsconfigProjectsPatchJobsCancelResponse:
        r"""Cancel a patch job. The patch job must be active. Canceled patch jobs cannot be restarted."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsPatchJobsCancelRequest, base_url, '/v1/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.OsconfigProjectsPatchJobsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsPatchJobsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatchJob])
                res.patch_job = out

        return res

    def osconfig_projects_patch_jobs_execute(self, request: operations.OsconfigProjectsPatchJobsExecuteRequest, security: operations.OsconfigProjectsPatchJobsExecuteSecurity) -> operations.OsconfigProjectsPatchJobsExecuteResponse:
        r"""Patch VM instances by creating and running a patch job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsPatchJobsExecuteRequest, base_url, '/v1/{parent}/patchJobs:execute', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "execute_patch_job_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.OsconfigProjectsPatchJobsExecuteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsPatchJobsExecuteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatchJob])
                res.patch_job = out

        return res

    def osconfig_projects_patch_jobs_get(self, request: operations.OsconfigProjectsPatchJobsGetRequest, security: operations.OsconfigProjectsPatchJobsGetSecurity) -> operations.OsconfigProjectsPatchJobsGetResponse:
        r"""Get the patch job. This can be used to track the progress of an ongoing patch job or review the details of completed jobs."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsPatchJobsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.OsconfigProjectsPatchJobsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsPatchJobsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatchJob])
                res.patch_job = out

        return res

    def osconfig_projects_patch_jobs_instance_details_list(self, request: operations.OsconfigProjectsPatchJobsInstanceDetailsListRequest, security: operations.OsconfigProjectsPatchJobsInstanceDetailsListSecurity) -> operations.OsconfigProjectsPatchJobsInstanceDetailsListResponse:
        r"""Get a list of instance details for a given patch job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsPatchJobsInstanceDetailsListRequest, base_url, '/v1/{parent}/instanceDetails', request)
        
        query_params = utils.get_query_params(operations.OsconfigProjectsPatchJobsInstanceDetailsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsPatchJobsInstanceDetailsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPatchJobInstanceDetailsResponse])
                res.list_patch_job_instance_details_response = out

        return res

    def osconfig_projects_patch_jobs_list(self, request: operations.OsconfigProjectsPatchJobsListRequest, security: operations.OsconfigProjectsPatchJobsListSecurity) -> operations.OsconfigProjectsPatchJobsListResponse:
        r"""Get a list of patch jobs."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsconfigProjectsPatchJobsListRequest, base_url, '/v1/{parent}/patchJobs', request)
        
        query_params = utils.get_query_params(operations.OsconfigProjectsPatchJobsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsconfigProjectsPatchJobsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPatchJobsResponse])
                res.list_patch_jobs_response = out

        return res

    