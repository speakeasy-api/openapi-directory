"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://routes.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def fetch_phone_number(self, request: operations.FetchPhoneNumberRequest, security: operations.FetchPhoneNumberSecurity, server_url: Optional[str] = None) -> operations.FetchPhoneNumberResponse:
        r"""Fetch the Inbound Processing Region assigned to a phone number."""
        base_url = operations.FETCH_PHONE_NUMBER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchPhoneNumberRequest, base_url, '/v2/PhoneNumbers/{PhoneNumber}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchPhoneNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RoutesV2PhoneNumber])
                res.routes_v2_phone_number = out

        return res

    def fetch_sip_domain(self, request: operations.FetchSipDomainRequest, security: operations.FetchSipDomainSecurity, server_url: Optional[str] = None) -> operations.FetchSipDomainResponse:
        base_url = operations.FETCH_SIP_DOMAIN_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSipDomainRequest, base_url, '/v2/SipDomains/{SipDomain}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSipDomainResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RoutesV2SipDomain])
                res.routes_v2_sip_domain = out

        return res

    def fetch_trunks(self, request: operations.FetchTrunksRequest, security: operations.FetchTrunksSecurity, server_url: Optional[str] = None) -> operations.FetchTrunksResponse:
        r"""Fetch the Inbound Processing Region assigned to a SIP Trunk."""
        base_url = operations.FETCH_TRUNKS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchTrunksRequest, base_url, '/v2/Trunks/{SipTrunkDomain}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTrunksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RoutesV2Trunks])
                res.routes_v2_trunks = out

        return res

    def update_phone_number(self, request: operations.UpdatePhoneNumberRequest, security: operations.UpdatePhoneNumberSecurity, server_url: Optional[str] = None) -> operations.UpdatePhoneNumberResponse:
        r"""Assign an Inbound Processing Region to a phone number."""
        base_url = operations.UPDATE_PHONE_NUMBER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdatePhoneNumberRequest, base_url, '/v2/PhoneNumbers/{PhoneNumber}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePhoneNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RoutesV2PhoneNumber])
                res.routes_v2_phone_number = out

        return res

    def update_sip_domain(self, request: operations.UpdateSipDomainRequest, security: operations.UpdateSipDomainSecurity, server_url: Optional[str] = None) -> operations.UpdateSipDomainResponse:
        base_url = operations.UPDATE_SIP_DOMAIN_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateSipDomainRequest, base_url, '/v2/SipDomains/{SipDomain}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSipDomainResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RoutesV2SipDomain])
                res.routes_v2_sip_domain = out

        return res

    def update_trunks(self, request: operations.UpdateTrunksRequest, security: operations.UpdateTrunksSecurity, server_url: Optional[str] = None) -> operations.UpdateTrunksResponse:
        r"""Assign an Inbound Processing Region to a SIP Trunk"""
        base_url = operations.UPDATE_TRUNKS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateTrunksRequest, base_url, '/v2/Trunks/{SipTrunkDomain}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTrunksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RoutesV2Trunks])
                res.routes_v2_trunks = out

        return res

    