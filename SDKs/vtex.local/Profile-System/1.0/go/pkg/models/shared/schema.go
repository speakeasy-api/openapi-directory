// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// SchemaPropertiesFieldName - Schema of any given field described in the `properties` field.
type SchemaPropertiesFieldName struct {
	// Object containing the type of the items if the field is an array. Typically, arrays will contain strings and will be used for fields such as `email`.
	Items map[string]interface{} `json:"items,omitempty"`
	// Indicates whether property is Personal Identifiable Information.
	Pii bool `json:"pii"`
	// Indicates whether property is sensitive data.
	Sensitive bool `json:"sensitive"`
	// Schema property type.
	Type string `json:"type"`
}

// SchemaProperties - Object describing each field in your desired schema. In this object, each property is a new object, describing the field according to: `type` (string); `sensitive` (boolean); `pii` (boolean) and; `items.type` (if field is array).
type SchemaProperties struct {
	// Schema of any given field described in the `properties` field.
	FieldName *SchemaPropertiesFieldName `json:"{fieldName},omitempty"`
}

type Schema struct {
	// Schema's human readable description.
	Description string `json:"description"`
	// Document time to live, in days. After this many days from its creation or update, any document cerated from this schema will be deleted.
	DocumentTTL *int64 `json:"documentTTL,omitempty"`
	// Object describing each field in your desired schema. In this object, each property is a new object, describing the field according to: `type` (string); `sensitive` (boolean); `pii` (boolean) and; `items.type` (if field is array).
	Properties SchemaProperties `json:"properties"`
	// Schema required fields.
	Required []string `json:"required"`
	// Schema title.
	Title string `json:"title"`
	// Schema type.
	Type     string        `json:"type"`
	VIndexed []interface{} `json:"v-indexed,omitempty"`
	VUnique  []interface{} `json:"v-unique,omitempty"`
	// Schema version.
	Version *int64 `json:"version,omitempty"`
}
