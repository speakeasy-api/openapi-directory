// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TemplateDefinitionDataSettings - Defines filter and sort option for root data set.
type TemplateDefinitionDataSettings struct {
	FilterBy []map[string]interface{} `json:"filterBy,omitempty"`
	SortBy   []map[string]interface{} `json:"sortBy,omitempty"`
}

// TemplateDefinitionEditor - Configuration preferences for the editor
type TemplateDefinitionEditor struct {
	HeightMultiplier *float64 `json:"heightMultiplier,omitempty"`
}

// TemplateDefinitionLayoutFormatEnum - Defines template page size
type TemplateDefinitionLayoutFormatEnum string

const (
	TemplateDefinitionLayoutFormatEnumA4     TemplateDefinitionLayoutFormatEnum = "A4"
	TemplateDefinitionLayoutFormatEnumLetter TemplateDefinitionLayoutFormatEnum = "letter"
	TemplateDefinitionLayoutFormatEnumCustom TemplateDefinitionLayoutFormatEnum = "custom"
)

func (e TemplateDefinitionLayoutFormatEnum) ToPointer() *TemplateDefinitionLayoutFormatEnum {
	return &e
}

func (e *TemplateDefinitionLayoutFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A4":
		fallthrough
	case "letter":
		fallthrough
	case "custom":
		*e = TemplateDefinitionLayoutFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateDefinitionLayoutFormatEnum: %v", v)
	}
}

// TemplateDefinitionLayoutMargins - Page margins in units
type TemplateDefinitionLayoutMargins struct {
	Bottom *float64 `json:"bottom,omitempty"`
	Left   *float64 `json:"left,omitempty"`
	Right  *float64 `json:"right,omitempty"`
	Top    *float64 `json:"top,omitempty"`
}

// TemplateDefinitionLayoutOrientationEnum - Page orientation
type TemplateDefinitionLayoutOrientationEnum string

const (
	TemplateDefinitionLayoutOrientationEnumPortrait  TemplateDefinitionLayoutOrientationEnum = "portrait"
	TemplateDefinitionLayoutOrientationEnumLandscape TemplateDefinitionLayoutOrientationEnum = "landscape"
)

func (e TemplateDefinitionLayoutOrientationEnum) ToPointer() *TemplateDefinitionLayoutOrientationEnum {
	return &e
}

func (e *TemplateDefinitionLayoutOrientationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "portrait":
		fallthrough
	case "landscape":
		*e = TemplateDefinitionLayoutOrientationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateDefinitionLayoutOrientationEnum: %v", v)
	}
}

// TemplateDefinitionLayoutRepeatLayoutFormatEnum - Defines template page size
type TemplateDefinitionLayoutRepeatLayoutFormatEnum string

const (
	TemplateDefinitionLayoutRepeatLayoutFormatEnumA4     TemplateDefinitionLayoutRepeatLayoutFormatEnum = "A4"
	TemplateDefinitionLayoutRepeatLayoutFormatEnumLetter TemplateDefinitionLayoutRepeatLayoutFormatEnum = "letter"
	TemplateDefinitionLayoutRepeatLayoutFormatEnumCustom TemplateDefinitionLayoutRepeatLayoutFormatEnum = "custom"
)

func (e TemplateDefinitionLayoutRepeatLayoutFormatEnum) ToPointer() *TemplateDefinitionLayoutRepeatLayoutFormatEnum {
	return &e
}

func (e *TemplateDefinitionLayoutRepeatLayoutFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A4":
		fallthrough
	case "letter":
		fallthrough
	case "custom":
		*e = TemplateDefinitionLayoutRepeatLayoutFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateDefinitionLayoutRepeatLayoutFormatEnum: %v", v)
	}
}

// TemplateDefinitionLayoutRepeatLayout - Defines page size if layout is repeated on the page e.g sheet labels
type TemplateDefinitionLayoutRepeatLayout struct {
	// Defines template page size
	Format *TemplateDefinitionLayoutRepeatLayoutFormatEnum `json:"format,omitempty"`
	// Page height in units
	Height *float64 `json:"height,omitempty"`
	// Page width in units
	Width *float64 `json:"width,omitempty"`
}

// TemplateDefinitionLayoutRotationEnum - Page rotation in degrees
type TemplateDefinitionLayoutRotationEnum int64

const (
	TemplateDefinitionLayoutRotationEnumZero                 TemplateDefinitionLayoutRotationEnum = 0
	TemplateDefinitionLayoutRotationEnumNinety               TemplateDefinitionLayoutRotationEnum = 90
	TemplateDefinitionLayoutRotationEnumOneHundredAndEighty  TemplateDefinitionLayoutRotationEnum = 180
	TemplateDefinitionLayoutRotationEnumTwoHundredAndSeventy TemplateDefinitionLayoutRotationEnum = 270
)

func (e TemplateDefinitionLayoutRotationEnum) ToPointer() *TemplateDefinitionLayoutRotationEnum {
	return &e
}

func (e *TemplateDefinitionLayoutRotationEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 90:
		fallthrough
	case 180:
		fallthrough
	case 270:
		*e = TemplateDefinitionLayoutRotationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateDefinitionLayoutRotationEnum: %v", v)
	}
}

// TemplateDefinitionLayoutUnitEnum - Measure unit
type TemplateDefinitionLayoutUnitEnum string

const (
	TemplateDefinitionLayoutUnitEnumCm TemplateDefinitionLayoutUnitEnum = "cm"
	TemplateDefinitionLayoutUnitEnumIn TemplateDefinitionLayoutUnitEnum = "in"
)

func (e TemplateDefinitionLayoutUnitEnum) ToPointer() *TemplateDefinitionLayoutUnitEnum {
	return &e
}

func (e *TemplateDefinitionLayoutUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cm":
		fallthrough
	case "in":
		*e = TemplateDefinitionLayoutUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateDefinitionLayoutUnitEnum: %v", v)
	}
}

// TemplateDefinitionLayout - Defines template layout (e.g page format, margins).
type TemplateDefinitionLayout struct {
	// Defines how many pages or labels should be empty
	EmptyLabels *int64 `json:"emptyLabels,omitempty"`
	// Defines template page size
	Format *TemplateDefinitionLayoutFormatEnum `json:"format,omitempty"`
	// Page height in units
	Height *float64 `json:"height,omitempty"`
	// Page margins in units
	Margins *TemplateDefinitionLayoutMargins `json:"margins,omitempty"`
	// Page orientation
	Orientation *TemplateDefinitionLayoutOrientationEnum `json:"orientation,omitempty"`
	// Defines page size if layout is repeated on the page e.g sheet labels
	RepeatLayout *TemplateDefinitionLayoutRepeatLayout `json:"repeatLayout,omitempty"`
	// Page rotation in degrees
	Rotation *TemplateDefinitionLayoutRotationEnum `json:"rotation,omitempty"`
	// Measure unit
	Unit *TemplateDefinitionLayoutUnitEnum `json:"unit,omitempty"`
	// Page width in units
	Width *float64 `json:"width,omitempty"`
}

type TemplateDefinitionPagesMargins struct {
	// Page or label margin from bottom
	Bottom *float64 `json:"bottom,omitempty"`
	// Page or label margin from right
	Right *float64 `json:"right,omitempty"`
}

type TemplateDefinitionPages struct {
	Components []Component `json:"components,omitempty"`
	// Page height in units
	Height  *float64                        `json:"height,omitempty"`
	Margins *TemplateDefinitionPagesMargins `json:"margins,omitempty"`
	// Page width in units
	Width *float64 `json:"width,omitempty"`
}

type TemplateDefinition struct {
	// Defines filter and sort option for root data set.
	DataSettings *TemplateDefinitionDataSettings `json:"dataSettings,omitempty"`
	// Configuration preferences for the editor
	Editor *TemplateDefinitionEditor `json:"editor,omitempty"`
	// Unique identifier
	ID *int64 `json:"id,omitempty"`
	// Indicates if the template is a draft or published.
	IsDraft *bool `json:"isDraft,omitempty"`
	// Defines template layout (e.g page format, margins).
	Layout *TemplateDefinitionLayout `json:"layout,omitempty"`
	// Template name
	Name *string `json:"name,omitempty"`
	// Defines page or label size, margins and components on page or label
	Pages []TemplateDefinitionPages `json:"pages,omitempty"`
	// A list of tags assigned to a template
	Tags []string `json:"tags,omitempty"`
}
