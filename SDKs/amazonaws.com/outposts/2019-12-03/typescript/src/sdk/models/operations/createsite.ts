/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 *  Information about an address.
 */
export class CreateSiteRequestBodyOperatingAddress extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AddressLine1" })
  addressLine1?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AddressLine2" })
  addressLine2?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AddressLine3" })
  addressLine3?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "City" })
  city?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ContactName" })
  contactName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ContactPhoneNumber" })
  contactPhoneNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CountryCode" })
  countryCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DistrictOrCounty" })
  districtOrCounty?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Municipality" })
  municipality?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "PostalCode" })
  postalCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StateOrRegion" })
  stateOrRegion?: string;
}

/**
 *  Information about the physical and logistical details for racks at sites. For more information about hardware requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist">Network readiness checklist</a> in the Amazon Web Services Outposts User Guide.
 */
export class CreateSiteRequestBodyRackPhysicalProperties extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "FiberOpticCableType" })
  fiberOpticCableType?: shared.FiberOpticCableTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "MaximumSupportedWeightLbs" })
  maximumSupportedWeightLbs?: shared.MaximumSupportedWeightLbsEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "OpticalStandard" })
  opticalStandard?: shared.OpticalStandardEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "PowerConnector" })
  powerConnector?: shared.PowerConnectorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "PowerDrawKva" })
  powerDrawKva?: shared.PowerDrawKvaEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "PowerFeedDrop" })
  powerFeedDrop?: shared.PowerFeedDropEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "PowerPhase" })
  powerPhase?: shared.PowerPhaseEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "UplinkCount" })
  uplinkCount?: shared.UplinkCountEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "UplinkGbps" })
  uplinkGbps?: shared.UplinkGbpsEnum;
}

/**
 *  Information about an address.
 */
export class CreateSiteRequestBodyShippingAddress extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AddressLine1" })
  addressLine1?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AddressLine2" })
  addressLine2?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AddressLine3" })
  addressLine3?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "City" })
  city?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ContactName" })
  contactName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ContactPhoneNumber" })
  contactPhoneNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CountryCode" })
  countryCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DistrictOrCounty" })
  districtOrCounty?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Municipality" })
  municipality?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "PostalCode" })
  postalCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StateOrRegion" })
  stateOrRegion?: string;
}

export class CreateSiteRequestBody extends SpeakeasyBase {
  /**
   * The description of the site.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  /**
   * The name of the site.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  /**
   * Additional information that you provide about site access requirements, electrician scheduling, personal protective equipment, or regulation of equipment materials that could affect your installation process.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Notes" })
  notes?: string;

  /**
   *  Information about an address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OperatingAddress" })
  @Type(() => CreateSiteRequestBodyOperatingAddress)
  operatingAddress?: CreateSiteRequestBodyOperatingAddress;

  /**
   *  Information about the physical and logistical details for racks at sites. For more information about hardware requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist">Network readiness checklist</a> in the Amazon Web Services Outposts User Guide.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RackPhysicalProperties" })
  @Type(() => CreateSiteRequestBodyRackPhysicalProperties)
  rackPhysicalProperties?: CreateSiteRequestBodyRackPhysicalProperties;

  /**
   *  Information about an address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ShippingAddress" })
  @Type(() => CreateSiteRequestBodyShippingAddress)
  shippingAddress?: CreateSiteRequestBodyShippingAddress;

  /**
   *  The tags to apply to a site.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;
}

export class CreateSiteRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateSiteRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateSiteResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createSiteOutput?: shared.CreateSiteOutput;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
