<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class UserStorageProvider 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Need this for admin console to display simple name of provider when displaying client detail   KEYCLOAK-4328
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIdNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIdNameResponse
     */
	public function getIdName(
        \OpenAPI\OpenAPI\Models\Operations\GetIdNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIdNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}/name', \OpenAPI\OpenAPI\Models\Operations\GetIdNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIdNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getIdName2XXApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Need this for admin console to display simple name of provider when displaying user detail   KEYCLOAK-4328
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmUserStorageIdNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmUserStorageIdNameResponse
     */
	public function getRealmUserStorageIdName(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmUserStorageIdNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmUserStorageIdNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/user-storage/{id}/name', \OpenAPI\OpenAPI\Models\Operations\GetRealmUserStorageIdNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmUserStorageIdNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRealmUserStorageIdName2XXApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove imported users
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdRemoveImportedUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdRemoveImportedUsersResponse
     */
	public function postRealmUserStorageIdRemoveImportedUsers(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdRemoveImportedUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdRemoveImportedUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/user-storage/{id}/remove-imported-users', \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdRemoveImportedUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdRemoveImportedUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Trigger sync of users   Action can be "triggerFullSync" or "triggerChangedUsersSync"
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdSyncRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdSyncResponse
     */
	public function postRealmUserStorageIdSync(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdSyncRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdSyncResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/user-storage/{id}/sync', \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdSyncRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdSyncRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdSyncResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->synchronizationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SynchronizationResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unlink imported users from a storage provider
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdUnlinkUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdUnlinkUsersResponse
     */
	public function postRealmUserStorageIdUnlinkUsers(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdUnlinkUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdUnlinkUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/user-storage/{id}/unlink-users', \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdUnlinkUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageIdUnlinkUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Trigger sync of mapper data related to ldap mapper (roles, groups, …​)   direction is "fedToKeycloak" or "keycloakToFed"
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageParentIdMappersIdSyncRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageParentIdMappersIdSyncResponse
     */
	public function postRealmUserStorageParentIdMappersIdSync(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageParentIdMappersIdSyncRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageParentIdMappersIdSyncResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/user-storage/{parentId}/mappers/{id}/sync', \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageParentIdMappersIdSyncRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageParentIdMappersIdSyncRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmUserStorageParentIdMappersIdSyncResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->synchronizationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SynchronizationResult', 'json');
            }
        }

        return $response;
    }
}