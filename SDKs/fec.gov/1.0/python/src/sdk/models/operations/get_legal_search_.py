"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class GetLegalSearchAoCategoryEnum(str, Enum):
    F = 'F'
    V = 'V'
    D = 'D'
    R = 'R'
    W = 'W'
    C = 'C'
    S = 'S'

class GetLegalSearchAoRequestorTypeEnum(str, Enum):
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'
    EIGHT = '8'
    NINE = '9'
    TEN = '10'
    ELEVEN = '11'
    TWELVE = '12'
    THIRTEEN = '13'
    FOURTEEN = '14'
    FIFTEEN = '15'
    SIXTEEN = '16'

class GetLegalSearchCaseDocCategoryIDEnum(str, Enum):
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'


@dataclasses.dataclass
class GetLegalSearchRequest:
    
    api_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""API key for https://api.data.gov. Get one at https://api.data.gov/signup."""  
    af_committee_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'af_committee_id', 'style': 'form', 'explode': True }})
    r"""Admin fine committee ID"""  
    af_fd_fine_amount: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'af_fd_fine_amount', 'style': 'form', 'explode': True }})
    r"""Final Determination fine amount"""  
    af_max_fd_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'af_max_fd_date', 'style': 'form', 'explode': True }})
    r"""The latest Final Determination date"""  
    af_max_rtb_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'af_max_rtb_date', 'style': 'form', 'explode': True }})
    r"""The latest Reason to Believe date"""  
    af_min_fd_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'af_min_fd_date', 'style': 'form', 'explode': True }})
    r"""The earliest Final Determination date"""  
    af_min_rtb_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'af_min_rtb_date', 'style': 'form', 'explode': True }})
    r"""The earliest Reason to Believe date"""  
    af_name: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'af_name', 'style': 'form', 'explode': True }})
    r"""Admin fine committee name"""  
    af_report_year: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'af_report_year', 'style': 'form', 'explode': True }})
    r"""Admin fine report year"""  
    af_rtb_fine_amount: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'af_rtb_fine_amount', 'style': 'form', 'explode': True }})
    r"""Reason to Believe fine amount"""  
    ao_category: Optional[list[GetLegalSearchAoCategoryEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ao_category', 'style': 'form', 'explode': True }})
    r"""Category of the document"""  
    ao_citation_require_all: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ao_citation_require_all', 'style': 'form', 'explode': True }})
    r"""Require all citations to be in document (default behavior is any)"""  
    ao_entity_name: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ao_entity_name', 'style': 'form', 'explode': True }})
    r"""Name of commenter or representative"""  
    ao_is_pending: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ao_is_pending', 'style': 'form', 'explode': True }})
    r"""AO is pending"""  
    ao_max_issue_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ao_max_issue_date', 'style': 'form', 'explode': True }})
    r"""Latest issue date of advisory opinion"""  
    ao_max_request_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ao_max_request_date', 'style': 'form', 'explode': True }})
    r"""Latest request date of advisory opinion"""  
    ao_min_issue_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ao_min_issue_date', 'style': 'form', 'explode': True }})
    r"""Earliest issue date of advisory opinion"""  
    ao_min_request_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ao_min_request_date', 'style': 'form', 'explode': True }})
    r"""Earliest request date of advisory opinion"""  
    ao_name: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ao_name', 'style': 'form', 'explode': True }})
    r"""Force advisory opinion name"""  
    ao_no: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ao_no', 'style': 'form', 'explode': True }})
    r"""Force advisory opinion number"""  
    ao_regulatory_citation: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ao_regulatory_citation', 'style': 'form', 'explode': True }})
    r"""Regulatory citations"""  
    ao_requestor: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ao_requestor', 'style': 'form', 'explode': True }})
    r"""The requestor of the advisory opinion"""  
    ao_requestor_type: Optional[list[GetLegalSearchAoRequestorTypeEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ao_requestor_type', 'style': 'form', 'explode': True }})
    r"""Code of the advisory opinion requestor type."""  
    ao_status: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ao_status', 'style': 'form', 'explode': True }})
    r"""Status of AO (pending, withdrawn, or final)"""  
    ao_statutory_citation: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ao_statutory_citation', 'style': 'form', 'explode': True }})
    r"""Statutory citations"""  
    case_citation_require_all: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'case_citation_require_all', 'style': 'form', 'explode': True }})
    r"""Require all citations to be in document (default behavior is any)"""  
    case_dispositions: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'case_dispositions', 'style': 'form', 'explode': True }})
    r"""Cases dispositions"""  
    case_doc_category_id: Optional[list[GetLegalSearchCaseDocCategoryIDEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'case_doc_category_id', 'style': 'form', 'explode': True }})
    r"""Select one or more case_doc_category_id to filter by corresponding CASE_DOCUMENT_CATEGORY:
            - 1 - Conciliation Agreements
            - 2 - Complaint, Responses, Designation of Counsel and Extensions of Timee
            - 3 - General Counsel Reports, Briefs, Notifications and Responses
            - 4 - Certifications
            - 5 - Civil Penalties, Disgorgements and Other Payments
            - 6 - Statements of Reasons
    """  
    case_election_cycles: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'case_election_cycles', 'style': 'form', 'explode': True }})
    r"""Cases election cycles"""  
    case_max_close_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'case_max_close_date', 'style': 'form', 'explode': True }})
    r"""The latest date closed of case"""  
    case_max_open_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'case_max_open_date', 'style': 'form', 'explode': True }})
    r"""The latest date opened of case"""  
    case_min_close_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'case_min_close_date', 'style': 'form', 'explode': True }})
    r"""The earliest date closed of case"""  
    case_min_open_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'case_min_open_date', 'style': 'form', 'explode': True }})
    r"""The earliest date opened of case"""  
    case_no: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'case_no', 'style': 'form', 'explode': True }})
    r"""Enforcement matter case number"""  
    case_regulatory_citation: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'case_regulatory_citation', 'style': 'form', 'explode': True }})
    r"""Regulatory citations"""  
    case_respondents: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'case_respondents', 'style': 'form', 'explode': True }})
    r"""Cases respondents"""  
    case_statutory_citation: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'case_statutory_citation', 'style': 'form', 'explode': True }})
    r"""Statutory citations"""  
    from_hit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'from_hit', 'style': 'form', 'explode': True }})
    r"""Get results starting from this index"""  
    hits_returned: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'hits_returned', 'style': 'form', 'explode': True }})
    r"""Number of results to return (max 10)"""  
    mur_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'mur_type', 'style': 'form', 'explode': True }})
    r"""Type of MUR : current or archived"""  
    q: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""Text to search legal documents for"""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Provide a field to sort by. Use `-` for descending order. ex: `-case_no`"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Legal Document type to refine search by
        - statutes
        - regulations
        - advisory_opinions
        - murs
        - admin_fines
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONAdminFinesCommissionVotes:
    
    action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})  
    vote_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vote_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONAdminFinesDocuments:
    
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    document_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    document_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_id'), 'exclude': lambda f: f is None }})  
    length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONAdminFines:
    
    challenge_outcome: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('challenge_outcome'), 'exclude': lambda f: f is None }})  
    challenge_receipt_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('challenge_receipt_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    check_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('check_amount'), 'exclude': lambda f: f is None }})  
    commission_votes: Optional[list[GetLegalSearchDefaultApplicationJSONAdminFinesCommissionVotes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commission_votes'), 'exclude': lambda f: f is None }})  
    committee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_id'), 'exclude': lambda f: f is None }})  
    doc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doc_id'), 'exclude': lambda f: f is None }})  
    document_highlights: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_highlights'), 'exclude': lambda f: f is None }})  
    documents: Optional[list[GetLegalSearchDefaultApplicationJSONAdminFinesDocuments]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documents'), 'exclude': lambda f: f is None }})  
    final_determination_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('final_determination_amount'), 'exclude': lambda f: f is None }})  
    final_determination_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('final_determination_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    highlights: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highlights'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    no: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('no'), 'exclude': lambda f: f is None }})  
    petition_court_decision_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('petition_court_decision_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    petition_court_filing_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('petition_court_filing_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    reason_to_believe_action_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason_to_believe_action_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    reason_to_believe_fine_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason_to_believe_fine_amount'), 'exclude': lambda f: f is None }})  
    report_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_type'), 'exclude': lambda f: f is None }})  
    report_year: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_year'), 'exclude': lambda f: f is None }})  
    treasury_referral_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasury_referral_amount'), 'exclude': lambda f: f is None }})  
    treasury_referral_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasury_referral_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONAdrsCommissionVotes:
    
    action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})  
    vote_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vote_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONAdrsDispositionsCitations:
    
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONAdrsDispositions:
    
    citations: Optional[list[GetLegalSearchDefaultApplicationJSONAdrsDispositionsCitations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('citations'), 'exclude': lambda f: f is None }})  
    disposition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disposition'), 'exclude': lambda f: f is None }})  
    penalty: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('penalty'), 'exclude': lambda f: f is None }})  
    respondent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('respondent'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONAdrsDocuments:
    
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    document_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    document_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_id'), 'exclude': lambda f: f is None }})  
    length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONAdrsParticipants:
    
    citations: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('citations'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONAdrs:
    
    close_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('close_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    commission_votes: Optional[list[GetLegalSearchDefaultApplicationJSONAdrsCommissionVotes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commission_votes'), 'exclude': lambda f: f is None }})  
    dispositions: Optional[list[GetLegalSearchDefaultApplicationJSONAdrsDispositions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dispositions'), 'exclude': lambda f: f is None }})  
    doc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doc_id'), 'exclude': lambda f: f is None }})  
    document_highlights: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_highlights'), 'exclude': lambda f: f is None }})  
    documents: Optional[list[GetLegalSearchDefaultApplicationJSONAdrsDocuments]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documents'), 'exclude': lambda f: f is None }})  
    election_cycles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('election_cycles'), 'exclude': lambda f: f is None }})  
    highlights: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highlights'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    no: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('no'), 'exclude': lambda f: f is None }})  
    open_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('open_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    participants: Optional[list[GetLegalSearchDefaultApplicationJSONAdrsParticipants]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participants'), 'exclude': lambda f: f is None }})  
    respondents: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('respondents'), 'exclude': lambda f: f is None }})  
    subjects: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subjects'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsAoCitations:
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    no: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('no'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsAosCitedBy:
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    no: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('no'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsDocuments:
    
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})  
    date_: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    document_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_id'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsEntities:
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsRegulatoryCitations:
    
    part: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('part'), 'exclude': lambda f: f is None }})  
    section: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('section'), 'exclude': lambda f: f is None }})  
    title: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsStatutoryCitations:
    
    section: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('section'), 'exclude': lambda f: f is None }})  
    title: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONAdvisoryOpinions:
    
    ao_citations: Optional[list[GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsAoCitations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ao_citations'), 'exclude': lambda f: f is None }})  
    aos_cited_by: Optional[list[GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsAosCitedBy]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aos_cited_by'), 'exclude': lambda f: f is None }})  
    commenter_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commenter_names'), 'exclude': lambda f: f is None }})  
    document_highlights: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_highlights'), 'exclude': lambda f: f is None }})  
    documents: Optional[list[GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsDocuments]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documents'), 'exclude': lambda f: f is None }})  
    entities: Optional[list[GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsEntities]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entities'), 'exclude': lambda f: f is None }})  
    highlights: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highlights'), 'exclude': lambda f: f is None }})  
    is_pending: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_pending'), 'exclude': lambda f: f is None }})  
    issue_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    no: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('no'), 'exclude': lambda f: f is None }})  
    regulatory_citations: Optional[list[GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsRegulatoryCitations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regulatory_citations'), 'exclude': lambda f: f is None }})  
    representative_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('representative_names'), 'exclude': lambda f: f is None }})  
    request_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    requestor_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestor_names'), 'exclude': lambda f: f is None }})  
    requestor_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestor_types'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    statutory_citations: Optional[list[GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsStatutoryCitations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statutory_citations'), 'exclude': lambda f: f is None }})  
    summary: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONMursCommissionVotes:
    
    action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})  
    vote_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vote_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONMursDispositionsCitations:
    
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONMursDispositions:
    
    citations: Optional[list[GetLegalSearchDefaultApplicationJSONMursDispositionsCitations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('citations'), 'exclude': lambda f: f is None }})  
    disposition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disposition'), 'exclude': lambda f: f is None }})  
    penalty: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('penalty'), 'exclude': lambda f: f is None }})  
    respondent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('respondent'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONMursDocuments:
    
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    document_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    document_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_id'), 'exclude': lambda f: f is None }})  
    length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    
class GetLegalSearchDefaultApplicationJSONMursMurTypeEnum(str, Enum):
    CURRENT = 'current'
    ARCHIVED = 'archived'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONMursParticipants:
    
    citations: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('citations'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONMurs:
    
    close_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('close_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    commission_votes: Optional[list[GetLegalSearchDefaultApplicationJSONMursCommissionVotes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commission_votes'), 'exclude': lambda f: f is None }})  
    dispositions: Optional[list[GetLegalSearchDefaultApplicationJSONMursDispositions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dispositions'), 'exclude': lambda f: f is None }})  
    doc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doc_id'), 'exclude': lambda f: f is None }})  
    document_highlights: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_highlights'), 'exclude': lambda f: f is None }})  
    documents: Optional[list[GetLegalSearchDefaultApplicationJSONMursDocuments]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documents'), 'exclude': lambda f: f is None }})  
    election_cycles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('election_cycles'), 'exclude': lambda f: f is None }})  
    highlights: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highlights'), 'exclude': lambda f: f is None }})  
    mur_type: Optional[GetLegalSearchDefaultApplicationJSONMursMurTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mur_type'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    no: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('no'), 'exclude': lambda f: f is None }})  
    open_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('open_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    participants: Optional[list[GetLegalSearchDefaultApplicationJSONMursParticipants]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participants'), 'exclude': lambda f: f is None }})  
    respondents: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('respondents'), 'exclude': lambda f: f is None }})  
    subjects: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subjects'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONRegulations:
    
    doc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doc_id'), 'exclude': lambda f: f is None }})  
    document_highlights: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_highlights'), 'exclude': lambda f: f is None }})  
    highlights: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highlights'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    no: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('no'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSONStatutes:
    
    chapter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chapter'), 'exclude': lambda f: f is None }})  
    doc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doc_id'), 'exclude': lambda f: f is None }})  
    document_highlights: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_highlights'), 'exclude': lambda f: f is None }})  
    highlights: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highlights'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    no: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('no'), 'exclude': lambda f: f is None }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetLegalSearchDefaultApplicationJSON:
    r"""Legal search results"""
    
    admin_fines: Optional[list[GetLegalSearchDefaultApplicationJSONAdminFines]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin_fines'), 'exclude': lambda f: f is None }})  
    adrs: Optional[list[GetLegalSearchDefaultApplicationJSONAdrs]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adrs'), 'exclude': lambda f: f is None }})  
    advisory_opinions: Optional[list[GetLegalSearchDefaultApplicationJSONAdvisoryOpinions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advisory_opinions'), 'exclude': lambda f: f is None }})  
    murs: Optional[list[GetLegalSearchDefaultApplicationJSONMurs]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('murs'), 'exclude': lambda f: f is None }})  
    regulations: Optional[list[GetLegalSearchDefaultApplicationJSONRegulations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regulations'), 'exclude': lambda f: f is None }})  
    statutes: Optional[list[GetLegalSearchDefaultApplicationJSONStatutes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statutes'), 'exclude': lambda f: f is None }})  
    total_admin_fines: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_admin_fines'), 'exclude': lambda f: f is None }})
    r"""Total number of Admin Fines matching the search criteria"""  
    total_adrs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_adrs'), 'exclude': lambda f: f is None }})
    r"""Total number of ADRs matching the search criteria"""  
    total_advisory_opinions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_advisory_opinions'), 'exclude': lambda f: f is None }})
    r"""Total number of Advisory Opinions matching the search criteria"""  
    total_all: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_all'), 'exclude': lambda f: f is None }})
    r"""Total number of legal documents matching the search criteria"""  
    total_murs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_murs'), 'exclude': lambda f: f is None }})
    r"""Total number of MURs matching the search criteria"""  
    total_regulations: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_regulations'), 'exclude': lambda f: f is None }})
    r"""Total number of Regulations matching the search criteria"""  
    total_statutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_statutes'), 'exclude': lambda f: f is None }})
    r"""Total number of Statutes matching the search criteria"""  
    

@dataclasses.dataclass
class GetLegalSearchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_legal_search_default_application_json_object: Optional[GetLegalSearchDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Legal search results"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    