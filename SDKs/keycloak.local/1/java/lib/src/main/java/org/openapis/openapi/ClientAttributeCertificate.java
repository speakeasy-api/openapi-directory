/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class ClientAttributeCertificate {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public ClientAttributeCertificate(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Get key info
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdCertificatesAttrResponse getRealmClientsIdCertificatesAttr(org.openapis.openapi.models.operations.GetRealmClientsIdCertificatesAttrRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdCertificatesAttrPathParams.class, baseUrl, "/{realm}/clients/{id}/certificates/{attr}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdCertificatesAttrResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdCertificatesAttrResponse() {{
            certificateRepresentation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CertificateRepresentation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CertificateRepresentation.class);
                res.certificateRepresentation = out;
            }
        }

        return res;
    }

    /**
     * Get a keystore file for the client, containing private key and public certificate
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrDownloadResponse postRealmClientsIdCertificatesAttrDownload(org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrDownloadRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrDownloadPathParams.class, baseUrl, "/{realm}/clients/{id}/certificates/{attr}/download", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrDownloadResponse res = new org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrDownloadResponse() {{
            postRealmClientsIdCertificatesAttrDownload2XXApplicationOctetStreamByteString = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/octet-stream")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.postRealmClientsIdCertificatesAttrDownload2XXApplicationOctetStreamByteString = out;
            }
        }

        return res;
    }

    /**
     * Generate a new certificate with new key pair
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrGenerateResponse postRealmClientsIdCertificatesAttrGenerate(org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrGenerateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrGeneratePathParams.class, baseUrl, "/{realm}/clients/{id}/certificates/{attr}/generate", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrGenerateResponse res = new org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrGenerateResponse() {{
            certificateRepresentation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CertificateRepresentation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CertificateRepresentation.class);
                res.certificateRepresentation = out;
            }
        }

        return res;
    }

    /**
     * Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse postRealmClientsIdCertificatesAttrGenerateAndDownload(org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrGenerateAndDownloadRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrGenerateAndDownloadPathParams.class, baseUrl, "/{realm}/clients/{id}/certificates/{attr}/generate-and-download", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse res = new org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrGenerateAndDownloadResponse() {{
            postRealmClientsIdCertificatesAttrGenerateAndDownload2XXApplicationOctetStreamByteString = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/octet-stream")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.postRealmClientsIdCertificatesAttrGenerateAndDownload2XXApplicationOctetStreamByteString = out;
            }
        }

        return res;
    }

    /**
     * Upload certificate and eventually private key
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrUploadResponse postRealmClientsIdCertificatesAttrUpload(org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrUploadRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrUploadPathParams.class, baseUrl, "/{realm}/clients/{id}/certificates/{attr}/upload", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrUploadResponse res = new org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrUploadResponse() {{
            certificateRepresentation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CertificateRepresentation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CertificateRepresentation.class);
                res.certificateRepresentation = out;
            }
        }

        return res;
    }

    /**
     * Upload only certificate, not private key
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrUploadCertificateResponse postRealmClientsIdCertificatesAttrUploadCertificate(org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrUploadCertificateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrUploadCertificatePathParams.class, baseUrl, "/{realm}/clients/{id}/certificates/{attr}/upload-certificate", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrUploadCertificateResponse res = new org.openapis.openapi.models.operations.PostRealmClientsIdCertificatesAttrUploadCertificateResponse() {{
            certificateRepresentation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CertificateRepresentation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CertificateRepresentation.class);
                res.certificateRepresentation = out;
            }
        }

        return res;
    }
}