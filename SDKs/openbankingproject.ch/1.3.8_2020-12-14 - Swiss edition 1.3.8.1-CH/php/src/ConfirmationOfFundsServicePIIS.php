<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ConfirmationOfFundsServicePIIS 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Confirmation of funds request
     * 
     * Creates a confirmation of funds request at the ASPSP. Checks whether a specific amount is available at point of time of the request on an account linked to a given tuple card issuer(TPP)/card number, or addressed by IBAN and TPP respectively.
     * If the related extended services are used a conditional Consent-ID is contained in the header. This field is contained but commented out in this specification.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckAvailabilityOfFundsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckAvailabilityOfFundsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckAvailabilityOfFundsResponse
     */
	public function checkAvailabilityOfFunds(
        \OpenAPI\OpenAPI\Models\Operations\CheckAvailabilityOfFundsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CheckAvailabilityOfFundsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckAvailabilityOfFundsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/funds-confirmations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "confirmationOfFunds", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckAvailabilityOfFundsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkAvailabilityOfFunds200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CheckAvailabilityOfFunds200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error400NGAIS = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error400NGAIS', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error400AIS = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error400AIS', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error401NGPIIS = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error401NGPIIS', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error401PIIS = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error401PIIS', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error403NGPIIS = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error403NGPIIS', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error403PIIS = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error403PIIS', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error404NGPIIS = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error404NGPIIS', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error404PIIS = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error404PIIS', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 405) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error405NGPIIS = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error405NGPIIS', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error405PIIS = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error405PIIS', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 408 or $httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 429 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 409) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error409NGPIIS = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error409NGPIIS', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error409PIIS = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error409PIIS', 'json');
            }
        }

        return $response;
    }
}