<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ManagedZones 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new ManagedZone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesCreateResponse
     */
	public function dnsManagedZonesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1beta2/projects/{project}/managedZones', \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "managedZone", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managedZone = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagedZone', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a previously created ManagedZone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesDeleteResponse
     */
	public function dnsManagedZonesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1beta2/projects/{project}/managedZones/{managedZone}', \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Fetches the representation of an existing ManagedZone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetResponse
     */
	public function dnsManagedZonesGet(
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1beta2/projects/{project}/managedZones/{managedZone}', \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managedZone = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagedZone', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetIamPolicyResponse
     */
	public function dnsManagedZonesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1beta2/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1GetIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enumerates ManagedZones that have been created but not yet deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesListResponse
     */
	public function dnsManagedZonesList(
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1beta2/projects/{project}/managedZones', \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managedZonesListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagedZonesListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Applies a partial update to an existing ManagedZone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesPatchResponse
     */
	public function dnsManagedZonesPatch(
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1beta2/projects/{project}/managedZones/{managedZone}', \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "managedZone1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesSetIamPolicyResponse
     */
	public function dnsManagedZonesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1beta2/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1SetIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this returns an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesTestIamPermissionsResponse
     */
	public function dnsManagedZonesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1beta2/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1TestIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1TestIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing ManagedZone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesUpdateResponse
     */
	public function dnsManagedZonesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1beta2/projects/{project}/managedZones/{managedZone}', \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "managedZone1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsManagedZonesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}