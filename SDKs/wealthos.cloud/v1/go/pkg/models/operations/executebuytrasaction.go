// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ExecuteBuyTrasactionSecurity struct {
	APISecretKey string `security:"scheme,type=apiKey,subtype=header,name=x-api-key"`
}

// ExecuteBuyTrasactionBuyTransactionRequestInstructionBuySell - Definition of an single instruction(buy|sell)
type ExecuteBuyTrasactionBuyTransactionRequestInstructionBuySell struct {
	// (Optional) Order identifier assigned by the wealth manager
	ClientOrderID       *string `json:"client_order_id,omitempty"`
	InvestmentProductID string  `json:"investment_product_id"`
	// Require if `value` is not available. Must be in correct pattern (eg: 25, 332.34, 1050.0025). For `funds`, upto 4 decimal places. For `equities`, `bonds` and `etf`, 0 decimal places allowed.
	Quantity *string `json:"quantity,omitempty"`
	// Require if `quantity` is not available. Must be in correct pattern (upto 2 decimal places, eg: 25, 332.3, 1050.25).
	Value *string `json:"value,omitempty"`
}

// ExecuteBuyTrasactionBuyTransactionRequest - Definition of an buy transaction request
type ExecuteBuyTrasactionBuyTransactionRequest struct {
	InvestmentInstructions []ExecuteBuyTrasactionBuyTransactionRequestInstructionBuySell `json:"investment_instructions"`
	PotID                  string                                                        `json:"pot_id"`
	// Unique request id to ensure idempotency. (ex: UUID)
	RequestID string `json:"request_id"`
}

type ExecuteBuyTrasactionRequest struct {
	RequestBody *ExecuteBuyTrasactionBuyTransactionRequest `request:"mediaType=application/json"`
	// ApiSecretKey
	XAPIKey string `header:"style=simple,explode=false,name=x-api-key"`
}

// ExecuteBuyTrasaction500ApplicationJSON - System error. Retry later. If the error persist, contact WOS support
type ExecuteBuyTrasaction500ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteBuyTrasaction429ApplicationJSON - You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
type ExecuteBuyTrasaction429ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteBuyTrasaction409ApplicationJSONStatusEnum - Current status of the original request
type ExecuteBuyTrasaction409ApplicationJSONStatusEnum string

const (
	ExecuteBuyTrasaction409ApplicationJSONStatusEnumProcessing ExecuteBuyTrasaction409ApplicationJSONStatusEnum = "PROCESSING"
	ExecuteBuyTrasaction409ApplicationJSONStatusEnumComplete   ExecuteBuyTrasaction409ApplicationJSONStatusEnum = "COMPLETE"
)

func (e ExecuteBuyTrasaction409ApplicationJSONStatusEnum) ToPointer() *ExecuteBuyTrasaction409ApplicationJSONStatusEnum {
	return &e
}

func (e *ExecuteBuyTrasaction409ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROCESSING":
		fallthrough
	case "COMPLETE":
		*e = ExecuteBuyTrasaction409ApplicationJSONStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteBuyTrasaction409ApplicationJSONStatusEnum: %v", v)
	}
}

// ExecuteBuyTrasaction409ApplicationJSON - Duplicate request
type ExecuteBuyTrasaction409ApplicationJSON struct {
	// Human readable description of the error
	Message string `json:"message"`
	// Stringified original response body if status is `COMPLETE`
	Response map[string]interface{} `json:"response,omitempty"`
	// Current status of the original request
	Status ExecuteBuyTrasaction409ApplicationJSONStatusEnum `json:"status"`
}

// ExecuteBuyTrasaction404ApplicationJSON - The specified resource was not found
type ExecuteBuyTrasaction404ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteBuyTrasaction403ApplicationJSON - Your authentication information is missing or invalid. Please check the keys are properly set and its correct
type ExecuteBuyTrasaction403ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteBuyTrasaction401ApplicationJSON - You do not have permissions to access this resource.
type ExecuteBuyTrasaction401ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteBuyTrasaction400ApplicationJSON - Request is not complete and may have one or more validations errors. Please check the error message and the code
type ExecuteBuyTrasaction400ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// ExecuteBuyTrasaction200ApplicationJSONStatusEnum - status of the transaction request
// . `submitted`: All requested transactions submitted
// . `partially_submitted`: Some (but not all) requested transactions submitted
type ExecuteBuyTrasaction200ApplicationJSONStatusEnum string

const (
	ExecuteBuyTrasaction200ApplicationJSONStatusEnumSubmitted          ExecuteBuyTrasaction200ApplicationJSONStatusEnum = "submitted"
	ExecuteBuyTrasaction200ApplicationJSONStatusEnumPartiallySubmitted ExecuteBuyTrasaction200ApplicationJSONStatusEnum = "partially_submitted"
)

func (e ExecuteBuyTrasaction200ApplicationJSONStatusEnum) ToPointer() *ExecuteBuyTrasaction200ApplicationJSONStatusEnum {
	return &e
}

func (e *ExecuteBuyTrasaction200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "submitted":
		fallthrough
	case "partially_submitted":
		*e = ExecuteBuyTrasaction200ApplicationJSONStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteBuyTrasaction200ApplicationJSONStatusEnum: %v", v)
	}
}

// ExecuteBuyTrasaction200ApplicationJSONTransactionsDirectionEnum - in = cash payment or pending buy transaction, out= cash out or pending sell transaction.
type ExecuteBuyTrasaction200ApplicationJSONTransactionsDirectionEnum string

const (
	ExecuteBuyTrasaction200ApplicationJSONTransactionsDirectionEnumIn  ExecuteBuyTrasaction200ApplicationJSONTransactionsDirectionEnum = "in"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsDirectionEnumOut ExecuteBuyTrasaction200ApplicationJSONTransactionsDirectionEnum = "out"
)

func (e ExecuteBuyTrasaction200ApplicationJSONTransactionsDirectionEnum) ToPointer() *ExecuteBuyTrasaction200ApplicationJSONTransactionsDirectionEnum {
	return &e
}

func (e *ExecuteBuyTrasaction200ApplicationJSONTransactionsDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in":
		fallthrough
	case "out":
		*e = ExecuteBuyTrasaction200ApplicationJSONTransactionsDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteBuyTrasaction200ApplicationJSONTransactionsDirectionEnum: %v", v)
	}
}

// ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnum - Origin of the transaction
type ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnum string

const (
	ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnumAPI        ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnum = "api"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnumAdminUI    ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnum = "admin_ui"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnumFileUpload ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnum = "file_upload"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnumSystem     ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnum = "system"
)

func (e ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnum) ToPointer() *ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnum {
	return &e
}

func (e *ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api":
		fallthrough
	case "admin_ui":
		fallthrough
	case "file_upload":
		fallthrough
	case "system":
		*e = ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnum: %v", v)
	}
}

type ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum string

const (
	ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumFees             ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Fees"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumBuy              ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Buy"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumSell             ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Sell"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumTransfers        ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Transfers"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumIncome           ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Income"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumTax              ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Tax"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumContribution     ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Contribution"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumWithdrawal       ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Withdrawal"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnumCorporateActions ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = "Corporate actions"
)

func (e ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum) ToPointer() *ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum {
	return &e
}

func (e *ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Fees":
		fallthrough
	case "Buy":
		fallthrough
	case "Sell":
		fallthrough
	case "Transfers":
		fallthrough
	case "Income":
		fallthrough
	case "Tax":
		fallthrough
	case "Contribution":
		fallthrough
	case "Withdrawal":
		fallthrough
	case "Corporate actions":
		*e = ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum: %v", v)
	}
}

type ExecuteBuyTrasaction200ApplicationJSONTransactionsStatusEnum string

const (
	ExecuteBuyTrasaction200ApplicationJSONTransactionsStatusEnumSubmitted ExecuteBuyTrasaction200ApplicationJSONTransactionsStatusEnum = "submitted"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsStatusEnumFailed    ExecuteBuyTrasaction200ApplicationJSONTransactionsStatusEnum = "failed"
)

func (e ExecuteBuyTrasaction200ApplicationJSONTransactionsStatusEnum) ToPointer() *ExecuteBuyTrasaction200ApplicationJSONTransactionsStatusEnum {
	return &e
}

func (e *ExecuteBuyTrasaction200ApplicationJSONTransactionsStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "submitted":
		fallthrough
	case "failed":
		*e = ExecuteBuyTrasaction200ApplicationJSONTransactionsStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteBuyTrasaction200ApplicationJSONTransactionsStatusEnum: %v", v)
	}
}

// ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum - Sub transaction type
type ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum string

const (
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumDividendReinvestment                     ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Dividend Reinvestment"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumInterestReinvestment                     ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Interest Reinvestment"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumReinvestment                             ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Reinvestment"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumBuy                                      ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Buy"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumSellCancel                               ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Sell Cancel"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumSwitchBuy                                ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Switch Buy"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumSell                                     ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Sell"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumBuyCancel                                ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Buy Cancel"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumSwitchSell                               ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Switch Sell"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumLumpSum                                  ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Lump sum"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumEmployerContribution                     ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Employer contribution"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumEmployeeContribution                     ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Employee contribution"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumRegularContribution                      ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Regular contribution"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumPaymentInForFees                         ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Payment in for fees"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumInternalTransferCashIn                   ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Internal Transfer - Cash In"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumInternalTransferStockIn                  ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Internal Transfer - Stock In"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumInternalTransferCashOut                  ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Internal Transfer - Cash Out"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumInternalTransferStockOut                 ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Internal Transfer - Stock Out"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumStockTransferIn                          ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Stock Transfer In"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumCashTransferIn                           ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Cash Transfer In"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumStockTransferOut                         ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Stock Transfer Out"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumCashTransferOut                          ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Cash Transfer Out"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumCommission                               ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Commission"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumAncillaryFee                             ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Ancillary fee"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumManagementFee                            ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Management fee"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumFeeCredit                                ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fee credit"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumFeeRebate                                ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fee rebate"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumAdvisorOngoingFee                        ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Advisor ongoing fee"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumOneOffAdvisorFee                         ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "One-off advisor fee"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumCommissionRebate                         ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Commission rebate"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumCustodyFees                              ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Custody fees"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumDividends                                ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Dividends"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumDistributions                            ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Distributions"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumInterest                                 ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Interest"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumOtherIncome                              ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Other income"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumTakeoversMergersAndNameChangesCreate     ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Takeovers, Mergers & Name Changes - Create"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumTakeoversMergersAndNameChangesExtinguish ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Takeovers, Mergers & Name Changes - Extinguish"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumRightsExpiry                             ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Rights Expiry"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumRightsExercise                           ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Rights Exercise"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumWarrantExercise                          ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Warrant Exercise"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumFixedIncomeMaturityReceiveCapital        ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fixed Income Maturity - Receive Capital"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumFixedIncomeMaturityExtinguishBondUnits   ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fixed Income Maturity - Extinguish Bond Units"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumFundMergerCreateNewFundUnits             ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fund Merger - Create New Fund Units"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumFundMergerExtinguishOldFundUnits         ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fund Merger - Extinguish Old Fund Units"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumRightsIssue                              ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Rights Issue"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumStockDividend                            ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Stock Dividend"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumSpinOff                                  ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Spin-Off"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumWarrantIssue                             ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Warrant Issue"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumStockSplit                               ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Stock Split"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumFeeTax                                   ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Fee Tax"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumTaxRelief                                ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Tax Relief"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumGst                                      ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "GST"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumHst                                      ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "HST"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumPst                                      ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "PST"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumQst                                      ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "QST"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumWithholdingTax                           ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Withholding Tax"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumNonResidentTax                           ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Non-resident Tax"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumPenalty                                  ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Penalty"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumContributionRefund                       ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Contribution Refund"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumIncomeWithdrawal                         ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Income Withdrawal"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumReversal                                 ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Reversal"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumWithdrawal                               ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Withdrawal"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnumMiscellaneousCorporateActionExercise     ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = "Miscellaneous Corporate Action Exercise"
)

func (e ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum) ToPointer() *ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum {
	return &e
}

func (e *ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Dividend Reinvestment":
		fallthrough
	case "Interest Reinvestment":
		fallthrough
	case "Reinvestment":
		fallthrough
	case "Buy":
		fallthrough
	case "Sell Cancel":
		fallthrough
	case "Switch Buy":
		fallthrough
	case "Sell":
		fallthrough
	case "Buy Cancel":
		fallthrough
	case "Switch Sell":
		fallthrough
	case "Lump sum":
		fallthrough
	case "Employer contribution":
		fallthrough
	case "Employee contribution":
		fallthrough
	case "Regular contribution":
		fallthrough
	case "Payment in for fees":
		fallthrough
	case "Internal Transfer - Cash In":
		fallthrough
	case "Internal Transfer - Stock In":
		fallthrough
	case "Internal Transfer - Cash Out":
		fallthrough
	case "Internal Transfer - Stock Out":
		fallthrough
	case "Stock Transfer In":
		fallthrough
	case "Cash Transfer In":
		fallthrough
	case "Stock Transfer Out":
		fallthrough
	case "Cash Transfer Out":
		fallthrough
	case "Commission":
		fallthrough
	case "Ancillary fee":
		fallthrough
	case "Management fee":
		fallthrough
	case "Fee credit":
		fallthrough
	case "Fee rebate":
		fallthrough
	case "Advisor ongoing fee":
		fallthrough
	case "One-off advisor fee":
		fallthrough
	case "Commission rebate":
		fallthrough
	case "Custody fees":
		fallthrough
	case "Dividends":
		fallthrough
	case "Distributions":
		fallthrough
	case "Interest":
		fallthrough
	case "Other income":
		fallthrough
	case "Takeovers, Mergers & Name Changes - Create":
		fallthrough
	case "Takeovers, Mergers & Name Changes - Extinguish":
		fallthrough
	case "Rights Expiry":
		fallthrough
	case "Rights Exercise":
		fallthrough
	case "Warrant Exercise":
		fallthrough
	case "Fixed Income Maturity - Receive Capital":
		fallthrough
	case "Fixed Income Maturity - Extinguish Bond Units":
		fallthrough
	case "Fund Merger - Create New Fund Units":
		fallthrough
	case "Fund Merger - Extinguish Old Fund Units":
		fallthrough
	case "Rights Issue":
		fallthrough
	case "Stock Dividend":
		fallthrough
	case "Spin-Off":
		fallthrough
	case "Warrant Issue":
		fallthrough
	case "Stock Split":
		fallthrough
	case "Fee Tax":
		fallthrough
	case "Tax Relief":
		fallthrough
	case "GST":
		fallthrough
	case "HST":
		fallthrough
	case "PST":
		fallthrough
	case "QST":
		fallthrough
	case "Withholding Tax":
		fallthrough
	case "Non-resident Tax":
		fallthrough
	case "Penalty":
		fallthrough
	case "Contribution Refund":
		fallthrough
	case "Income Withdrawal":
		fallthrough
	case "Reversal":
		fallthrough
	case "Withdrawal":
		fallthrough
	case "Miscellaneous Corporate Action Exercise":
		*e = ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum: %v", v)
	}
}

// ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum - Sub state of the transaction. instructed, confirmed, priced and scheduled sub_types are applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state
type ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum string

const (
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnumInstructed ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum = "instructed"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnumConfirmed  ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum = "confirmed"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnumPriced     ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum = "priced"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnumRejected   ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum = "rejected"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnumSettled    ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum = "settled"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnumCancelled  ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum = "cancelled"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnumScheduled  ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum = "scheduled"
)

func (e ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum) ToPointer() *ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum {
	return &e
}

func (e *ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "instructed":
		fallthrough
	case "confirmed":
		fallthrough
	case "priced":
		fallthrough
	case "rejected":
		fallthrough
	case "settled":
		fallthrough
	case "cancelled":
		fallthrough
	case "scheduled":
		*e = ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum: %v", v)
	}
}

// ExecuteBuyTrasaction200ApplicationJSONTransactionsTypeEnum - State of the transaction
type ExecuteBuyTrasaction200ApplicationJSONTransactionsTypeEnum string

const (
	ExecuteBuyTrasaction200ApplicationJSONTransactionsTypeEnumPending  ExecuteBuyTrasaction200ApplicationJSONTransactionsTypeEnum = "pending"
	ExecuteBuyTrasaction200ApplicationJSONTransactionsTypeEnumArchived ExecuteBuyTrasaction200ApplicationJSONTransactionsTypeEnum = "archived"
)

func (e ExecuteBuyTrasaction200ApplicationJSONTransactionsTypeEnum) ToPointer() *ExecuteBuyTrasaction200ApplicationJSONTransactionsTypeEnum {
	return &e
}

func (e *ExecuteBuyTrasaction200ApplicationJSONTransactionsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "archived":
		*e = ExecuteBuyTrasaction200ApplicationJSONTransactionsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecuteBuyTrasaction200ApplicationJSONTransactionsTypeEnum: %v", v)
	}
}

type ExecuteBuyTrasaction200ApplicationJSONTransactions struct {
	// Additional external details of the transaction, This may be populated in reconciliation process
	AdditionalExternalDetails map[string]interface{} `json:"additional_external_details,omitempty"`
	// (optional) Order identifier assigned by the wealth manager
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// Will indicate the date where this record was created
	CreatedAt string `json:"created_at"`
	// Currency of the transaction
	Currency string `json:"currency"`
	// in = cash payment or pending buy transaction, out= cash out or pending sell transaction.
	Direction ExecuteBuyTrasaction200ApplicationJSONTransactionsDirectionEnum `json:"direction"`
	// Executed price of the buy, sell transaction
	ExecutionPrice *string `json:"execution_price,omitempty"`
	// External Transaction Reference
	ExternalTransactionReference *string `json:"external_transaction_reference,omitempty"`
	// Investment product id of the transaction. Will be 'cash' for cash transaction
	InvestmentProductID string `json:"investment_product_id"`
	// Origin of the transaction
	Origin ExecuteBuyTrasaction200ApplicationJSONTransactionsOriginEnum `json:"origin"`
	// parent_transaction_id
	ParentTransactionID    *string                                                                      `json:"parent_transaction_id,omitempty"`
	PrimaryTransactionType ExecuteBuyTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum `json:"primary_transaction_type"`
	// Intended settlement date of the pending transaction or actual the settled day of the transaction
	SettlementDate *string                                                      `json:"settlement_date,omitempty"`
	Status         ExecuteBuyTrasaction200ApplicationJSONTransactionsStatusEnum `json:"status"`
	// Sub transaction type
	SubTransactionType ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum `json:"sub_transaction_type"`
	// Sub state of the transaction. instructed, confirmed, priced and scheduled sub_types are applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state
	SubType ExecuteBuyTrasaction200ApplicationJSONTransactionsSubTypeEnum `json:"sub_type"`
	// Date the transaction was effected
	TradeDate *string `json:"trade_date,omitempty"`
	// transaction_id of successful transaction
	TransactionID string `json:"transaction_id"`
	// (optional) quantity of the investment product, required for unit based orders
	TransactionQuantity *string `json:"transaction_quantity,omitempty"`
	// (optional) value of the investment product, required for value based orders
	TransactionValue *string `json:"transaction_value,omitempty"`
	// State of the transaction
	Type ExecuteBuyTrasaction200ApplicationJSONTransactionsTypeEnum `json:"type"`
	// Will indicate the date where this record was last changed
	UpdatedAt string `json:"updated_at"`
}

// ExecuteBuyTrasaction200ApplicationJSON - success
type ExecuteBuyTrasaction200ApplicationJSON struct {
	// error message if status is `failed`
	Message *string `json:"message,omitempty"`
	PotID   string  `json:"pot_id"`
	// status of the transaction request
	// . `submitted`: All requested transactions submitted
	// . `partially_submitted`: Some (but not all) requested transactions submitted
	//
	Status       ExecuteBuyTrasaction200ApplicationJSONStatusEnum     `json:"status"`
	Transactions []ExecuteBuyTrasaction200ApplicationJSONTransactions `json:"transactions,omitempty"`
}

type ExecuteBuyTrasactionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// success
	ExecuteBuyTrasaction200ApplicationJSONObject *ExecuteBuyTrasaction200ApplicationJSON
	// Request is not complete and may have one or more validations errors. Please check the error message and the code
	ExecuteBuyTrasaction400ApplicationJSONObject *ExecuteBuyTrasaction400ApplicationJSON
	// You do not have permissions to access this resource.
	ExecuteBuyTrasaction401ApplicationJSONObject *ExecuteBuyTrasaction401ApplicationJSON
	// Your authentication information is missing or invalid. Please check the keys are properly set and its correct
	ExecuteBuyTrasaction403ApplicationJSONObject *ExecuteBuyTrasaction403ApplicationJSON
	// The specified resource was not found
	ExecuteBuyTrasaction404ApplicationJSONObject *ExecuteBuyTrasaction404ApplicationJSON
	// Duplicate request
	ExecuteBuyTrasaction409ApplicationJSONObject *ExecuteBuyTrasaction409ApplicationJSON
	// You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
	ExecuteBuyTrasaction429ApplicationJSONObject *ExecuteBuyTrasaction429ApplicationJSON
	// System error. Retry later. If the error persist, contact WOS support
	ExecuteBuyTrasaction500ApplicationJSONObject *ExecuteBuyTrasaction500ApplicationJSON
}
