"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class MoveOrganizationLicensingCotermLicensesRequestBodyDestinationModeEnum(str, Enum):
    r"""The claim mode of the moved license"""
    ADD_DEVICES = 'addDevices'
    RENEW = 'renew'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MoveOrganizationLicensingCotermLicensesRequestBodyDestination:
    r"""Destination data for the license move"""
    
    mode: Optional[MoveOrganizationLicensingCotermLicensesRequestBodyDestinationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""The claim mode of the moved license"""  
    organization_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organizationId'), 'exclude': lambda f: f is None }})
    r"""The organization to move the license to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MoveOrganizationLicensingCotermLicensesRequestBodyLicensesCounts:
    
    count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count') }})
    r"""The number of counts to move"""  
    model: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model') }})
    r"""The license model type to move counts of"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MoveOrganizationLicensingCotermLicensesRequestBodyLicenses:
    
    counts: list[MoveOrganizationLicensingCotermLicensesRequestBodyLicensesCounts] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('counts') }})
    r"""The counts to move from the license by model type"""  
    key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key') }})
    r"""The license key to move counts from"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MoveOrganizationLicensingCotermLicensesRequestBody:
    
    destination: MoveOrganizationLicensingCotermLicensesRequestBodyDestination = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination') }})
    r"""Destination data for the license move"""  
    licenses: list[MoveOrganizationLicensingCotermLicensesRequestBodyLicenses] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licenses') }})
    r"""The list of licenses to move"""  
    

@dataclasses.dataclass
class MoveOrganizationLicensingCotermLicensesRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    request_body: MoveOrganizationLicensingCotermLicensesRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesCounts:
    
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""The number of counts the license contains of this model"""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""The license model type"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesEditions:
    
    edition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('edition'), 'exclude': lambda f: f is None }})
    r"""The name of the license edition"""  
    product_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productType'), 'exclude': lambda f: f is None }})
    r"""The product type of the license edition"""  
    
class MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesModeEnum(str, Enum):
    r"""The operation mode of the license when it was claimed"""
    ADD_DEVICES = 'addDevices'
    RENEW = 'renew'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicenses:
    
    claimed_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('claimedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""When the license was claimed into the organization"""  
    counts: Optional[list[MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesCounts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('counts'), 'exclude': lambda f: f is None }})
    r"""The counts of the license by model type"""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""The duration (term length) of the license, measured in days"""  
    editions: Optional[list[MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesEditions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('editions'), 'exclude': lambda f: f is None }})
    r"""The editions of the license for each relevant product type"""  
    expired: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expired'), 'exclude': lambda f: f is None }})
    r"""Flag to indicate if the license is expired"""  
    invalidated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invalidated'), 'exclude': lambda f: f is None }})
    r"""Flag to indicated that the license is invalidated"""  
    invalidated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invalidatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""When the license was invalidated. Will be null for active licenses"""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""The key of the license"""  
    mode: Optional[MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""The operation mode of the license when it was claimed"""  
    organization_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organizationId'), 'exclude': lambda f: f is None }})
    r"""The ID of the organization that the license is claimed in"""  
    started_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""When the license's term began (approximately the date when the license was created)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesCounts:
    
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""The number of counts the license contains of this model"""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""The license model type"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesEditions:
    
    edition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('edition'), 'exclude': lambda f: f is None }})
    r"""The name of the license edition"""  
    product_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productType'), 'exclude': lambda f: f is None }})
    r"""The product type of the license edition"""  
    
class MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesModeEnum(str, Enum):
    r"""The operation mode of the license when it was claimed"""
    ADD_DEVICES = 'addDevices'
    RENEW = 'renew'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses:
    
    claimed_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('claimedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""When the license was claimed into the organization"""  
    counts: Optional[list[MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesCounts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('counts'), 'exclude': lambda f: f is None }})
    r"""The counts of the license by model type"""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""The duration (term length) of the license, measured in days"""  
    editions: Optional[list[MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesEditions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('editions'), 'exclude': lambda f: f is None }})
    r"""The editions of the license for each relevant product type"""  
    expired: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expired'), 'exclude': lambda f: f is None }})
    r"""Flag to indicate if the license is expired"""  
    invalidated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invalidated'), 'exclude': lambda f: f is None }})
    r"""Flag to indicated that the license is invalidated"""  
    invalidated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invalidatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""When the license was invalidated. Will be null for active licenses"""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""The key of the license"""  
    mode: Optional[MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""The operation mode of the license when it was claimed"""  
    organization_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organizationId'), 'exclude': lambda f: f is None }})
    r"""The ID of the organization that the license is claimed in"""  
    started_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""When the license's term began (approximately the date when the license was created)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MoveOrganizationLicensingCotermLicenses200ApplicationJSON:
    r"""Successful operation"""
    
    moved_licenses: Optional[list[MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicenses]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('movedLicenses'), 'exclude': lambda f: f is None }})
    r"""Newly moved licenses created in the destination organization of the license move operation"""  
    remainder_licenses: Optional[list[MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remainderLicenses'), 'exclude': lambda f: f is None }})
    r"""Remainder licenses created in the source organization as a result of moving a subset of the counts of a license"""  
    

@dataclasses.dataclass
class MoveOrganizationLicensingCotermLicensesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    move_organization_licensing_coterm_licenses_200_application_json_object: Optional[MoveOrganizationLicensingCotermLicenses200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    