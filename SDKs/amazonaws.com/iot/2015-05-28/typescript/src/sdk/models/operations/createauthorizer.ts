/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The status of the create authorizer request.
 */
export enum CreateAuthorizerRequestBodyStatusEnum {
  Active = "ACTIVE",
  Inactive = "INACTIVE",
}

export class CreateAuthorizerRequestBody extends SpeakeasyBase {
  /**
   * The ARN of the authorizer's Lambda function.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizerFunctionArn" })
  authorizerFunctionArn: string;

  /**
   * <p>When <code>true</code>, the result from the authorizerâ€™s Lambda function is cached for clients that use persistent HTTP connections. The results are cached for the time specified by the Lambda function in <code>refreshAfterInSeconds</code>. This value does not affect authorization of clients that use MQTT connections.</p> <p>The default value is <code>false</code>.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableCachingForHttp" })
  enableCachingForHttp?: boolean;

  /**
   * Specifies whether IoT validates the token signature in an authorization request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "signingDisabled" })
  signingDisabled?: boolean;

  /**
   * The status of the create authorizer request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: CreateAuthorizerRequestBodyStatusEnum;

  /**
   * <p>Metadata which can be used to manage the custom authorizer.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
   */
  @SpeakeasyMetadata({ elemType: shared.Tag })
  @Expose({ name: "tags" })
  @Type(() => shared.Tag)
  tags?: shared.Tag[];

  /**
   * The name of the token key used to extract the token from the HTTP headers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tokenKeyName" })
  tokenKeyName?: string;

  /**
   * The public keys used to verify the digital signature returned by your custom authentication service.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tokenSigningPublicKeys" })
  tokenSigningPublicKeys?: Record<string, string>;
}

export class CreateAuthorizerRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateAuthorizerRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The authorizer name.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=authorizerName",
  })
  authorizerName: string;
}

export class CreateAuthorizerResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createAuthorizerResponse?: shared.CreateAuthorizerResponse;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * ResourceAlreadyExistsException
   */
  @SpeakeasyMetadata()
  resourceAlreadyExistsException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * UnauthorizedException
   */
  @SpeakeasyMetadata()
  unauthorizedException?: any;
}
