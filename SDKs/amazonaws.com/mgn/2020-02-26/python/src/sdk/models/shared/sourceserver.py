"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datareplicationinfo as shared_datareplicationinfo
from ..shared import launchedinstance as shared_launchedinstance
from ..shared import lifecycle as shared_lifecycle
from ..shared import replicationtype_enum as shared_replicationtype_enum
from ..shared import sourceproperties as shared_sourceproperties
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceServer:
    r"""Success"""
    
    application_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationID'), 'exclude': lambda f: f is None }})  
    arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arn'), 'exclude': lambda f: f is None }})  
    data_replication_info: Optional[shared_datareplicationinfo.DataReplicationInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataReplicationInfo'), 'exclude': lambda f: f is None }})  
    fqdn_for_action_framework: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fqdnForActionFramework'), 'exclude': lambda f: f is None }})  
    is_archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isArchived'), 'exclude': lambda f: f is None }})  
    launched_instance: Optional[shared_launchedinstance.LaunchedInstance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('launchedInstance'), 'exclude': lambda f: f is None }})  
    life_cycle: Optional[shared_lifecycle.LifeCycle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lifeCycle'), 'exclude': lambda f: f is None }})  
    replication_type: Optional[shared_replicationtype_enum.ReplicationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replicationType'), 'exclude': lambda f: f is None }})  
    source_properties: Optional[shared_sourceproperties.SourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceProperties'), 'exclude': lambda f: f is None }})  
    source_server_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceServerID'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    user_provided_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userProvidedID'), 'exclude': lambda f: f is None }})  
    vcenter_client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vcenterClientID'), 'exclude': lambda f: f is None }})  
    