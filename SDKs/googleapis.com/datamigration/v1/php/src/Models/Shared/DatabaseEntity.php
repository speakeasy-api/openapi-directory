<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * DatabaseEntity - The base entity type for all the database related entities. The message contains the entity name, the name of its parent, the entity type, and the specific details per entity type.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class DatabaseEntity
{
    /**
     * Function's parent is a schema.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\FunctionEntity $databaseFunction
     */
	#[\JMS\Serializer\Annotation\SerializedName('databaseFunction')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\FunctionEntity')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?FunctionEntity $databaseFunction = null;
    
    /**
     * Package's parent is a schema.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PackageEntity $databasePackage
     */
	#[\JMS\Serializer\Annotation\SerializedName('databasePackage')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\PackageEntity')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PackageEntity $databasePackage = null;
    
    /**
     * The type of the database entity (table, view, index, ...).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DatabaseEntityEntityTypeEnum $entityType
     */
	#[\JMS\Serializer\Annotation\SerializedName('entityType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DatabaseEntityEntityTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DatabaseEntityEntityTypeEnum $entityType = null;
    
    /**
     * Details about entity mappings. For source tree entities, this holds the draft entities which were generated by the mapping rules. For draft tree entities, this holds the source entities which were converted to form the draft entity. Destination entities will have no mapping details.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\EntityMapping> $mappings
     */
	#[\JMS\Serializer\Annotation\SerializedName('mappings')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\EntityMapping>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $mappings = null;
    
    /**
     * The full name of the parent entity (e.g. schema name).
     * 
     * @var ?string $parentEntity
     */
	#[\JMS\Serializer\Annotation\SerializedName('parentEntity')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $parentEntity = null;
    
    /**
     * Schema typically has no parent entity, but can have a parent entity DatabaseInstance (for database engines which support it). For some database engines, the terms schema and user can be used interchangeably when they refer to a namespace or a collection of other database entities. Can store additional information which is schema specific.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SchemaEntity $schema
     */
	#[\JMS\Serializer\Annotation\SerializedName('schema')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SchemaEntity')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SchemaEntity $schema = null;
    
    /**
     * Sequence's parent is a schema.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SequenceEntity $sequence
     */
	#[\JMS\Serializer\Annotation\SerializedName('sequence')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SequenceEntity')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SequenceEntity $sequence = null;
    
    /**
     * The short name (e.g. table name) of the entity.
     * 
     * @var ?string $shortName
     */
	#[\JMS\Serializer\Annotation\SerializedName('shortName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $shortName = null;
    
    /**
     * Stored procedure's parent is a schema.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\StoredProcedureEntity $storedProcedure
     */
	#[\JMS\Serializer\Annotation\SerializedName('storedProcedure')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\StoredProcedureEntity')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?StoredProcedureEntity $storedProcedure = null;
    
    /**
     * Synonym's parent is a schema.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SynonymEntity $synonym
     */
	#[\JMS\Serializer\Annotation\SerializedName('synonym')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SynonymEntity')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SynonymEntity $synonym = null;
    
    /**
     * Table's parent is a schema.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TableEntity $table
     */
	#[\JMS\Serializer\Annotation\SerializedName('table')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TableEntity')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TableEntity $table = null;
    
    /**
     * The type of tree the entity belongs to.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DatabaseEntityTreeEnum $tree
     */
	#[\JMS\Serializer\Annotation\SerializedName('tree')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DatabaseEntityTreeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DatabaseEntityTreeEnum $tree = null;
    
    /**
     * View's parent is a schema.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ViewEntity $view
     */
	#[\JMS\Serializer\Annotation\SerializedName('view')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ViewEntity')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ViewEntity $view = null;
    
	public function __construct()
	{
		$this->databaseFunction = null;
		$this->databasePackage = null;
		$this->entityType = null;
		$this->mappings = null;
		$this->parentEntity = null;
		$this->schema = null;
		$this->sequence = null;
		$this->shortName = null;
		$this->storedProcedure = null;
		$this->synonym = null;
		$this->table = null;
		$this->tree = null;
		$this->view = null;
	}
}
