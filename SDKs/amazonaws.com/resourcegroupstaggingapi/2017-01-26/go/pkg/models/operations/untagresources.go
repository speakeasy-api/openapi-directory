// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UntagResourcesXAmzTargetEnum
type UntagResourcesXAmzTargetEnum string

const (
	UntagResourcesXAmzTargetEnumResourceGroupsTaggingApi20170126UntagResources UntagResourcesXAmzTargetEnum = "ResourceGroupsTaggingAPI_20170126.UntagResources"
)

func (e *UntagResourcesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ResourceGroupsTaggingAPI_20170126.UntagResources":
		*e = UntagResourcesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UntagResourcesXAmzTargetEnum: %s", s)
	}
}

type UntagResourcesRequest struct {
	UntagResourcesInput shared.UntagResourcesInput   `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          UntagResourcesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UntagResourcesResponse struct {
	ContentType string
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottledException
	ThrottledException interface{}
	// Success
	UntagResourcesOutput *shared.UntagResourcesOutput
}
