/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AnalysisCompleted } from "./analysiscompleted";
import { Status } from "./status";
import { Expose, Type } from "class-transformer";

/**
 * The status of discovery for the resource.
 */
export enum DiscoveryOccurrenceAnalysisStatusEnum {
  AnalysisStatusUnspecified = "ANALYSIS_STATUS_UNSPECIFIED",
  Pending = "PENDING",
  Scanning = "SCANNING",
  FinishedSuccess = "FINISHED_SUCCESS",
  Complete = "COMPLETE",
  FinishedFailed = "FINISHED_FAILED",
  FinishedUnsupported = "FINISHED_UNSUPPORTED",
}

/**
 * Whether the resource is continuously analyzed.
 */
export enum DiscoveryOccurrenceContinuousAnalysisEnum {
  ContinuousAnalysisUnspecified = "CONTINUOUS_ANALYSIS_UNSPECIFIED",
  Active = "ACTIVE",
  Inactive = "INACTIVE",
}

/**
 * Provides information about the analysis status of a discovered resource.
 */
export class DiscoveryOccurrence extends SpeakeasyBase {
  /**
   * Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "analysisCompleted" })
  @Type(() => AnalysisCompleted)
  analysisCompleted?: AnalysisCompleted;

  /**
   * Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
   */
  @SpeakeasyMetadata({ elemType: Status })
  @Expose({ name: "analysisError" })
  @Type(() => Status)
  analysisError?: Status[];

  /**
   * The status of discovery for the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "analysisStatus" })
  analysisStatus?: DiscoveryOccurrenceAnalysisStatusEnum;

  /**
   * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "analysisStatusError" })
  @Type(() => Status)
  analysisStatusError?: Status;

  /**
   * Output only. The time occurrences related to this discovery occurrence were archived.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "archiveTime" })
  archiveTime?: string;

  /**
   * Whether the resource is continuously analyzed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "continuousAnalysis" })
  continuousAnalysis?: DiscoveryOccurrenceContinuousAnalysisEnum;

  /**
   * The CPE of the resource being scanned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cpe" })
  cpe?: string;

  /**
   * The last time this resource was scanned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastScanTime" })
  lastScanTime?: string;
}
