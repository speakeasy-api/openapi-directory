/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates an app profile within an instance.
   */
  bigtableadminProjectsInstancesAppProfilesCreate(
    req: operations.BigtableadminProjectsInstancesAppProfilesCreateRequest,
    security: operations.BigtableadminProjectsInstancesAppProfilesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesAppProfilesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigtableadminProjectsInstancesAppProfilesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/appProfiles",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "appProfile",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesAppProfilesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesAppProfilesCreateResponse =
        new operations.BigtableadminProjectsInstancesAppProfilesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appProfile = utils.objectToClass(
              httpRes?.data,
              shared.AppProfile
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists information about app profiles in an instance.
   */
  bigtableadminProjectsInstancesAppProfilesList(
    req: operations.BigtableadminProjectsInstancesAppProfilesListRequest,
    security: operations.BigtableadminProjectsInstancesAppProfilesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesAppProfilesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigtableadminProjectsInstancesAppProfilesListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/appProfiles",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesAppProfilesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesAppProfilesListResponse =
        new operations.BigtableadminProjectsInstancesAppProfilesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAppProfilesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAppProfilesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Copy a Cloud Bigtable backup to a new backup in the destination cluster located in the destination instance and project.
   */
  bigtableadminProjectsInstancesClustersBackupsCopy(
    req: operations.BigtableadminProjectsInstancesClustersBackupsCopyRequest,
    security: operations.BigtableadminProjectsInstancesClustersBackupsCopySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesClustersBackupsCopyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigtableadminProjectsInstancesClustersBackupsCopyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/backups:copy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "copyBackupRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesClustersBackupsCopySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesClustersBackupsCopyResponse =
        new operations.BigtableadminProjectsInstancesClustersBackupsCopyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts creating a new Cloud Bigtable Backup. The returned backup long-running operation can be used to track creation of the backup. The metadata field type is CreateBackupMetadata. The response field type is Backup, if successful. Cancelling the returned operation will stop the creation and delete the backup.
   */
  bigtableadminProjectsInstancesClustersBackupsCreate(
    req: operations.BigtableadminProjectsInstancesClustersBackupsCreateRequest,
    security: operations.BigtableadminProjectsInstancesClustersBackupsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesClustersBackupsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigtableadminProjectsInstancesClustersBackupsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{parent}/backups", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "backupInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesClustersBackupsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesClustersBackupsCreateResponse =
        new operations.BigtableadminProjectsInstancesClustersBackupsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Cloud Bigtable backups. Returns both completed and pending backups.
   */
  bigtableadminProjectsInstancesClustersBackupsList(
    req: operations.BigtableadminProjectsInstancesClustersBackupsListRequest,
    security: operations.BigtableadminProjectsInstancesClustersBackupsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesClustersBackupsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigtableadminProjectsInstancesClustersBackupsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{parent}/backups", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesClustersBackupsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesClustersBackupsListResponse =
        new operations.BigtableadminProjectsInstancesClustersBackupsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listBackupsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListBackupsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a cluster within an instance. Note that exactly one of Cluster.serve_nodes and Cluster.cluster_config.cluster_autoscaling_config can be set. If serve_nodes is set to non-zero, then the cluster is manually scaled. If cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is enabled.
   */
  bigtableadminProjectsInstancesClustersCreate(
    req: operations.BigtableadminProjectsInstancesClustersCreateRequest,
    security: operations.BigtableadminProjectsInstancesClustersCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesClustersCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigtableadminProjectsInstancesClustersCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/clusters",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "clusterInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesClustersCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesClustersCreateResponse =
        new operations.BigtableadminProjectsInstancesClustersCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists hot tablets in a cluster, within the time range provided. Hot tablets are ordered based on CPU usage.
   */
  bigtableadminProjectsInstancesClustersHotTabletsList(
    req: operations.BigtableadminProjectsInstancesClustersHotTabletsListRequest,
    security: operations.BigtableadminProjectsInstancesClustersHotTabletsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesClustersHotTabletsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigtableadminProjectsInstancesClustersHotTabletsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/hotTablets",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesClustersHotTabletsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesClustersHotTabletsListResponse =
        new operations.BigtableadminProjectsInstancesClustersHotTabletsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listHotTabletsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListHotTabletsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists information about clusters in an instance.
   */
  bigtableadminProjectsInstancesClustersList(
    req: operations.BigtableadminProjectsInstancesClustersListRequest,
    security: operations.BigtableadminProjectsInstancesClustersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesClustersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigtableadminProjectsInstancesClustersListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/clusters",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesClustersListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesClustersListResponse =
        new operations.BigtableadminProjectsInstancesClustersListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listClustersResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListClustersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a cluster within an instance. Note that UpdateCluster does not support updating cluster_config.cluster_autoscaling_config. In order to update it, you must use PartialUpdateCluster.
   */
  bigtableadminProjectsInstancesClustersUpdate(
    req: operations.BigtableadminProjectsInstancesClustersUpdateRequest,
    security: operations.BigtableadminProjectsInstancesClustersUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesClustersUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigtableadminProjectsInstancesClustersUpdateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "clusterInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesClustersUpdateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesClustersUpdateResponse =
        new operations.BigtableadminProjectsInstancesClustersUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an instance within a project. Note that exactly one of Cluster.serve_nodes and Cluster.cluster_config.cluster_autoscaling_config can be set. If serve_nodes is set to non-zero, then the cluster is manually scaled. If cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is enabled.
   */
  bigtableadminProjectsInstancesCreate(
    req: operations.BigtableadminProjectsInstancesCreateRequest,
    security: operations.BigtableadminProjectsInstancesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigtableadminProjectsInstancesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/instances",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createInstanceRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BigtableadminProjectsInstancesCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesCreateResponse =
        new operations.BigtableadminProjectsInstancesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists information about instances in a project.
   */
  bigtableadminProjectsInstancesList(
    req: operations.BigtableadminProjectsInstancesListRequest,
    security: operations.BigtableadminProjectsInstancesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigtableadminProjectsInstancesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/instances",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BigtableadminProjectsInstancesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesListResponse =
        new operations.BigtableadminProjectsInstancesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listInstancesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListInstancesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Checks replication consistency based on a consistency token, that is, if replication has caught up based on the conditions specified in the token and the check request.
   */
  bigtableadminProjectsInstancesTablesCheckConsistency(
    req: operations.BigtableadminProjectsInstancesTablesCheckConsistencyRequest,
    security: operations.BigtableadminProjectsInstancesTablesCheckConsistencySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesTablesCheckConsistencyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigtableadminProjectsInstancesTablesCheckConsistencyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{name}:checkConsistency",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "checkConsistencyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesTablesCheckConsistencySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesTablesCheckConsistencyResponse =
        new operations.BigtableadminProjectsInstancesTablesCheckConsistencyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.checkConsistencyResponse = utils.objectToClass(
              httpRes?.data,
              shared.CheckConsistencyResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new table in the specified instance. The table can be created with a full set of initial column families, specified in the request.
   */
  bigtableadminProjectsInstancesTablesCreate(
    req: operations.BigtableadminProjectsInstancesTablesCreateRequest,
    security: operations.BigtableadminProjectsInstancesTablesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesTablesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigtableadminProjectsInstancesTablesCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{parent}/tables", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createTableRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesTablesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesTablesCreateResponse =
        new operations.BigtableadminProjectsInstancesTablesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.table = utils.objectToClass(httpRes?.data, shared.Table);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Permanently deletes a specified table and all of its data.
   */
  bigtableadminProjectsInstancesTablesDelete(
    req: operations.BigtableadminProjectsInstancesTablesDeleteRequest,
    security: operations.BigtableadminProjectsInstancesTablesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesTablesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigtableadminProjectsInstancesTablesDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesTablesDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesTablesDeleteResponse =
        new operations.BigtableadminProjectsInstancesTablesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Permanently drop/delete a row range from a specified table. The request can specify whether to delete all rows in a table, or only those that match a particular prefix.
   */
  bigtableadminProjectsInstancesTablesDropRowRange(
    req: operations.BigtableadminProjectsInstancesTablesDropRowRangeRequest,
    security: operations.BigtableadminProjectsInstancesTablesDropRowRangeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesTablesDropRowRangeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigtableadminProjectsInstancesTablesDropRowRangeRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{name}:dropRowRange",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "dropRowRangeRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesTablesDropRowRangeSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesTablesDropRowRangeResponse =
        new operations.BigtableadminProjectsInstancesTablesDropRowRangeResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generates a consistency token for a Table, which can be used in CheckConsistency to check whether mutations to the table that finished before this call started have been replicated. The tokens will be available for 90 days.
   */
  bigtableadminProjectsInstancesTablesGenerateConsistencyToken(
    req: operations.BigtableadminProjectsInstancesTablesGenerateConsistencyTokenRequest,
    security: operations.BigtableadminProjectsInstancesTablesGenerateConsistencyTokenSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesTablesGenerateConsistencyTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigtableadminProjectsInstancesTablesGenerateConsistencyTokenRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{name}:generateConsistencyToken",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesTablesGenerateConsistencyTokenSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesTablesGenerateConsistencyTokenResponse =
        new operations.BigtableadminProjectsInstancesTablesGenerateConsistencyTokenResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generateConsistencyTokenResponse = utils.objectToClass(
              httpRes?.data,
              shared.GenerateConsistencyTokenResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the access control policy for a Table resource. Returns an empty policy if the resource exists but does not have a policy set.
   */
  bigtableadminProjectsInstancesTablesGetIamPolicy(
    req: operations.BigtableadminProjectsInstancesTablesGetIamPolicyRequest,
    security: operations.BigtableadminProjectsInstancesTablesGetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesTablesGetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigtableadminProjectsInstancesTablesGetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{resource}:getIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "getIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesTablesGetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesTablesGetIamPolicyResponse =
        new operations.BigtableadminProjectsInstancesTablesGetIamPolicyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all tables served from a specified instance.
   */
  bigtableadminProjectsInstancesTablesList(
    req: operations.BigtableadminProjectsInstancesTablesListRequest,
    security: operations.BigtableadminProjectsInstancesTablesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesTablesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigtableadminProjectsInstancesTablesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{parent}/tables", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesTablesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesTablesListResponse =
        new operations.BigtableadminProjectsInstancesTablesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTablesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTablesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Performs a series of column family modifications on the specified table. Either all or none of the modifications will occur before this method returns, but data requests received prior to that point may see a table where only some modifications have taken effect.
   */
  bigtableadminProjectsInstancesTablesModifyColumnFamilies(
    req: operations.BigtableadminProjectsInstancesTablesModifyColumnFamiliesRequest,
    security: operations.BigtableadminProjectsInstancesTablesModifyColumnFamiliesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesTablesModifyColumnFamiliesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigtableadminProjectsInstancesTablesModifyColumnFamiliesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{name}:modifyColumnFamilies",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "modifyColumnFamiliesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesTablesModifyColumnFamiliesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesTablesModifyColumnFamiliesResponse =
        new operations.BigtableadminProjectsInstancesTablesModifyColumnFamiliesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.table = utils.objectToClass(httpRes?.data, shared.Table);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a specified table.
   */
  bigtableadminProjectsInstancesTablesPatch(
    req: operations.BigtableadminProjectsInstancesTablesPatchRequest,
    security: operations.BigtableadminProjectsInstancesTablesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesTablesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigtableadminProjectsInstancesTablesPatchRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "tableInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesTablesPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesTablesPatchResponse =
        new operations.BigtableadminProjectsInstancesTablesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new table by restoring from a completed backup. The returned table long-running operation can be used to track the progress of the operation, and to cancel it. The metadata field type is RestoreTableMetadata. The response type is Table, if successful.
   */
  bigtableadminProjectsInstancesTablesRestore(
    req: operations.BigtableadminProjectsInstancesTablesRestoreRequest,
    security: operations.BigtableadminProjectsInstancesTablesRestoreSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesTablesRestoreResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigtableadminProjectsInstancesTablesRestoreRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/tables:restore",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "restoreTableRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesTablesRestoreSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesTablesRestoreResponse =
        new operations.BigtableadminProjectsInstancesTablesRestoreResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the access control policy on a Table resource. Replaces any existing policy.
   */
  bigtableadminProjectsInstancesTablesSetIamPolicy(
    req: operations.BigtableadminProjectsInstancesTablesSetIamPolicyRequest,
    security: operations.BigtableadminProjectsInstancesTablesSetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesTablesSetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigtableadminProjectsInstancesTablesSetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{resource}:setIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "setIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesTablesSetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesTablesSetIamPolicyResponse =
        new operations.BigtableadminProjectsInstancesTablesSetIamPolicyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns permissions that the caller has on the specified table resource.
   */
  bigtableadminProjectsInstancesTablesTestIamPermissions(
    req: operations.BigtableadminProjectsInstancesTablesTestIamPermissionsRequest,
    security: operations.BigtableadminProjectsInstancesTablesTestIamPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesTablesTestIamPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigtableadminProjectsInstancesTablesTestIamPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{resource}:testIamPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "testIamPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesTablesTestIamPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesTablesTestIamPermissionsResponse =
        new operations.BigtableadminProjectsInstancesTablesTestIamPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.testIamPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.TestIamPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Restores a specified table which was accidentally deleted.
   */
  bigtableadminProjectsInstancesTablesUndelete(
    req: operations.BigtableadminProjectsInstancesTablesUndeleteRequest,
    security: operations.BigtableadminProjectsInstancesTablesUndeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsInstancesTablesUndeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigtableadminProjectsInstancesTablesUndeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}:undelete", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigtableadminProjectsInstancesTablesUndeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsInstancesTablesUndeleteResponse =
        new operations.BigtableadminProjectsInstancesTablesUndeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets information about a location.
   */
  bigtableadminProjectsLocationsGet(
    req: operations.BigtableadminProjectsLocationsGetRequest,
    security: operations.BigtableadminProjectsLocationsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsLocationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigtableadminProjectsLocationsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BigtableadminProjectsLocationsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsLocationsGetResponse =
        new operations.BigtableadminProjectsLocationsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.location = utils.objectToClass(httpRes?.data, shared.Location);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists information about the supported locations for this service.
   */
  bigtableadminProjectsLocationsList(
    req: operations.BigtableadminProjectsLocationsListRequest,
    security: operations.BigtableadminProjectsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigtableadminProjectsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigtableadminProjectsLocationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}/locations", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BigtableadminProjectsLocationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigtableadminProjectsLocationsListResponse =
        new operations.BigtableadminProjectsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
