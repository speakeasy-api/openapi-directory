"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def contactcenterinsights_projects_locations_conversations_analyses_create(self, request: operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateRequest, security: operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateSecurity) -> operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateResponse:
        r"""Creates an analysis. The long running operation is done when the analysis has completed."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateRequest, base_url, '/v1/{parent}/analyses', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_contactcenterinsights_v1_analysis_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def contactcenterinsights_projects_locations_conversations_analyses_list(self, request: operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListRequest, security: operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListSecurity) -> operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListResponse:
        r"""Lists analyses."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListRequest, base_url, '/v1/{parent}/analyses', request)
        
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudContactcenterinsightsV1ListAnalysesResponse])
                res.google_cloud_contactcenterinsights_v1_list_analyses_response = out

        return res

    def contactcenterinsights_projects_locations_conversations_bulk_analyze(self, request: operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeRequest, security: operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeSecurity) -> operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeResponse:
        r"""Analyzes multiple conversations in a single request."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeRequest, base_url, '/v1/{parent}/conversations:bulkAnalyze', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_contactcenterinsights_v1_bulk_analyze_conversations_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def contactcenterinsights_projects_locations_conversations_calculate_stats(self, request: operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsRequest, security: operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsSecurity) -> operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsResponse:
        r"""Gets conversation statistics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsRequest, base_url, '/v1/{location}/conversations:calculateStats', request)
        
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudContactcenterinsightsV1CalculateStatsResponse])
                res.google_cloud_contactcenterinsights_v1_calculate_stats_response = out

        return res

    def contactcenterinsights_projects_locations_conversations_create(self, request: operations.ContactcenterinsightsProjectsLocationsConversationsCreateRequest, security: operations.ContactcenterinsightsProjectsLocationsConversationsCreateSecurity) -> operations.ContactcenterinsightsProjectsLocationsConversationsCreateResponse:
        r"""Creates a conversation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsConversationsCreateRequest, base_url, '/v1/{parent}/conversations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_contactcenterinsights_v1_conversation_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsConversationsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsConversationsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudContactcenterinsightsV1Conversation])
                res.google_cloud_contactcenterinsights_v1_conversation = out

        return res

    def contactcenterinsights_projects_locations_conversations_ingest(self, request: operations.ContactcenterinsightsProjectsLocationsConversationsIngestRequest, security: operations.ContactcenterinsightsProjectsLocationsConversationsIngestSecurity) -> operations.ContactcenterinsightsProjectsLocationsConversationsIngestResponse:
        r"""Imports conversations and processes them according to the user's configuration."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsConversationsIngestRequest, base_url, '/v1/{parent}/conversations:ingest', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_contactcenterinsights_v1_ingest_conversations_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsConversationsIngestRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsConversationsIngestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def contactcenterinsights_projects_locations_conversations_list(self, request: operations.ContactcenterinsightsProjectsLocationsConversationsListRequest, security: operations.ContactcenterinsightsProjectsLocationsConversationsListSecurity) -> operations.ContactcenterinsightsProjectsLocationsConversationsListResponse:
        r"""Lists conversations."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsConversationsListRequest, base_url, '/v1/{parent}/conversations', request)
        
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsConversationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsConversationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudContactcenterinsightsV1ListConversationsResponse])
                res.google_cloud_contactcenterinsights_v1_list_conversations_response = out

        return res

    def contactcenterinsights_projects_locations_insightsdata_export(self, request: operations.ContactcenterinsightsProjectsLocationsInsightsdataExportRequest, security: operations.ContactcenterinsightsProjectsLocationsInsightsdataExportSecurity) -> operations.ContactcenterinsightsProjectsLocationsInsightsdataExportResponse:
        r"""Export insights data to a destination defined in the request body."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsInsightsdataExportRequest, base_url, '/v1/{parent}/insightsdata:export', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_contactcenterinsights_v1_export_insights_data_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsInsightsdataExportRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsInsightsdataExportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def contactcenterinsights_projects_locations_issue_models_calculate_issue_model_stats(self, request: operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsRequest, security: operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsSecurity) -> operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsResponse:
        r"""Gets an issue model's statistics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsRequest, base_url, '/v1/{issueModel}:calculateIssueModelStats', request)
        
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse])
                res.google_cloud_contactcenterinsights_v1_calculate_issue_model_stats_response = out

        return res

    def contactcenterinsights_projects_locations_issue_models_create(self, request: operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateRequest, security: operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateSecurity) -> operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateResponse:
        r"""Creates an issue model."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateRequest, base_url, '/v1/{parent}/issueModels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_contactcenterinsights_v1_issue_model_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def contactcenterinsights_projects_locations_issue_models_deploy(self, request: operations.ContactcenterinsightsProjectsLocationsIssueModelsDeployRequest, security: operations.ContactcenterinsightsProjectsLocationsIssueModelsDeploySecurity) -> operations.ContactcenterinsightsProjectsLocationsIssueModelsDeployResponse:
        r"""Deploys an issue model. Returns an error if a model is already deployed. An issue model can only be used in analysis after it has been deployed."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsIssueModelsDeployRequest, base_url, '/v1/{name}:deploy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_contactcenterinsights_v1_deploy_issue_model_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsIssueModelsDeployRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsIssueModelsDeployResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def contactcenterinsights_projects_locations_issue_models_issues_list(self, request: operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListRequest, security: operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListSecurity) -> operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListResponse:
        r"""Lists issues."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListRequest, base_url, '/v1/{parent}/issues', request)
        
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudContactcenterinsightsV1ListIssuesResponse])
                res.google_cloud_contactcenterinsights_v1_list_issues_response = out

        return res

    def contactcenterinsights_projects_locations_issue_models_list(self, request: operations.ContactcenterinsightsProjectsLocationsIssueModelsListRequest, security: operations.ContactcenterinsightsProjectsLocationsIssueModelsListSecurity) -> operations.ContactcenterinsightsProjectsLocationsIssueModelsListResponse:
        r"""Lists issue models."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsIssueModelsListRequest, base_url, '/v1/{parent}/issueModels', request)
        
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsIssueModelsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsIssueModelsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudContactcenterinsightsV1ListIssueModelsResponse])
                res.google_cloud_contactcenterinsights_v1_list_issue_models_response = out

        return res

    def contactcenterinsights_projects_locations_issue_models_undeploy(self, request: operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeployRequest, security: operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeploySecurity) -> operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeployResponse:
        r"""Undeploys an issue model. An issue model can not be used in analysis after it has been undeployed."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeployRequest, base_url, '/v1/{name}:undeploy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_contactcenterinsights_v1_undeploy_issue_model_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeployRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeployResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def contactcenterinsights_projects_locations_operations_cancel(self, request: operations.ContactcenterinsightsProjectsLocationsOperationsCancelRequest, security: operations.ContactcenterinsightsProjectsLocationsOperationsCancelSecurity) -> operations.ContactcenterinsightsProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsOperationsCancelRequest, base_url, '/v1/{name}:cancel', request)
        
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def contactcenterinsights_projects_locations_operations_list(self, request: operations.ContactcenterinsightsProjectsLocationsOperationsListRequest, security: operations.ContactcenterinsightsProjectsLocationsOperationsListSecurity) -> operations.ContactcenterinsightsProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsOperationsListRequest, base_url, '/v1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningListOperationsResponse])
                res.google_longrunning_list_operations_response = out

        return res

    def contactcenterinsights_projects_locations_phrase_matchers_create(self, request: operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateRequest, security: operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateSecurity) -> operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateResponse:
        r"""Creates a phrase matcher."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateRequest, base_url, '/v1/{parent}/phraseMatchers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_contactcenterinsights_v1_phrase_matcher_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudContactcenterinsightsV1PhraseMatcher])
                res.google_cloud_contactcenterinsights_v1_phrase_matcher = out

        return res

    def contactcenterinsights_projects_locations_phrase_matchers_list(self, request: operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListRequest, security: operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListSecurity) -> operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListResponse:
        r"""Lists phrase matchers."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListRequest, base_url, '/v1/{parent}/phraseMatchers', request)
        
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudContactcenterinsightsV1ListPhraseMatchersResponse])
                res.google_cloud_contactcenterinsights_v1_list_phrase_matchers_response = out

        return res

    def contactcenterinsights_projects_locations_views_create(self, request: operations.ContactcenterinsightsProjectsLocationsViewsCreateRequest, security: operations.ContactcenterinsightsProjectsLocationsViewsCreateSecurity) -> operations.ContactcenterinsightsProjectsLocationsViewsCreateResponse:
        r"""Creates a view."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsViewsCreateRequest, base_url, '/v1/{parent}/views', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_contactcenterinsights_v1_view_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsViewsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsViewsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudContactcenterinsightsV1View])
                res.google_cloud_contactcenterinsights_v1_view = out

        return res

    def contactcenterinsights_projects_locations_views_delete(self, request: operations.ContactcenterinsightsProjectsLocationsViewsDeleteRequest, security: operations.ContactcenterinsightsProjectsLocationsViewsDeleteSecurity) -> operations.ContactcenterinsightsProjectsLocationsViewsDeleteResponse:
        r"""Deletes a view."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsViewsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsViewsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsViewsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def contactcenterinsights_projects_locations_views_get(self, request: operations.ContactcenterinsightsProjectsLocationsViewsGetRequest, security: operations.ContactcenterinsightsProjectsLocationsViewsGetSecurity) -> operations.ContactcenterinsightsProjectsLocationsViewsGetResponse:
        r"""Gets a view."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsViewsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsViewsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsViewsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudContactcenterinsightsV1View])
                res.google_cloud_contactcenterinsights_v1_view = out

        return res

    def contactcenterinsights_projects_locations_views_list(self, request: operations.ContactcenterinsightsProjectsLocationsViewsListRequest, security: operations.ContactcenterinsightsProjectsLocationsViewsListSecurity) -> operations.ContactcenterinsightsProjectsLocationsViewsListResponse:
        r"""Lists views."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsViewsListRequest, base_url, '/v1/{parent}/views', request)
        
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsViewsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsViewsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudContactcenterinsightsV1ListViewsResponse])
                res.google_cloud_contactcenterinsights_v1_list_views_response = out

        return res

    def contactcenterinsights_projects_locations_views_patch(self, request: operations.ContactcenterinsightsProjectsLocationsViewsPatchRequest, security: operations.ContactcenterinsightsProjectsLocationsViewsPatchSecurity) -> operations.ContactcenterinsightsProjectsLocationsViewsPatchResponse:
        r"""Updates a view."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactcenterinsightsProjectsLocationsViewsPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_contactcenterinsights_v1_view_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContactcenterinsightsProjectsLocationsViewsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactcenterinsightsProjectsLocationsViewsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudContactcenterinsightsV1View])
                res.google_cloud_contactcenterinsights_v1_view = out

        return res

    