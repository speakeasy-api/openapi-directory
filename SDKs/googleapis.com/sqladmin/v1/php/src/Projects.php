<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get Disk Shrink Config for a given instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesGetDiskShrinkConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesGetDiskShrinkConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesGetDiskShrinkConfigResponse
     */
	public function sqlProjectsInstancesGetDiskShrinkConfig(
        \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesGetDiskShrinkConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesGetDiskShrinkConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesGetDiskShrinkConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{project}/instances/{instance}/getDiskShrinkConfig', \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesGetDiskShrinkConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesGetDiskShrinkConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesGetDiskShrinkConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sqlInstancesGetDiskShrinkConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SqlInstancesGetDiskShrinkConfigResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Perform Disk Shrink on primary instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesPerformDiskShrinkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesPerformDiskShrinkSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesPerformDiskShrinkResponse
     */
	public function sqlProjectsInstancesPerformDiskShrink(
        \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesPerformDiskShrinkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesPerformDiskShrinkSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesPerformDiskShrinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{project}/instances/{instance}/performDiskShrink', \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesPerformDiskShrinkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "performDiskShrinkContext", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesPerformDiskShrinkRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesPerformDiskShrinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reschedules the maintenance on the given instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesRescheduleMaintenanceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesRescheduleMaintenanceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesRescheduleMaintenanceResponse
     */
	public function sqlProjectsInstancesRescheduleMaintenance(
        \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesRescheduleMaintenanceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesRescheduleMaintenanceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesRescheduleMaintenanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{project}/instances/{instance}/rescheduleMaintenance', \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesRescheduleMaintenanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sqlInstancesRescheduleMaintenanceRequestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesRescheduleMaintenanceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesRescheduleMaintenanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reset Replica Size to primary instance disk size.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesResetReplicaSizeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesResetReplicaSizeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesResetReplicaSizeResponse
     */
	public function sqlProjectsInstancesResetReplicaSize(
        \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesResetReplicaSizeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesResetReplicaSizeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesResetReplicaSizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{project}/instances/{instance}/resetReplicaSize', \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesResetReplicaSizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesResetReplicaSizeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesResetReplicaSizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Start External primary instance migration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesStartExternalSyncRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesStartExternalSyncSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesStartExternalSyncResponse
     */
	public function sqlProjectsInstancesStartExternalSync(
        \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesStartExternalSyncRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesStartExternalSyncSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesStartExternalSyncResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{project}/instances/{instance}/startExternalSync', \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesStartExternalSyncRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sqlInstancesStartExternalSyncRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesStartExternalSyncRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesStartExternalSyncResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Verify External primary instance external sync settings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesVerifyExternalSyncSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesVerifyExternalSyncSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesVerifyExternalSyncSettingsResponse
     */
	public function sqlProjectsInstancesVerifyExternalSyncSettings(
        \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesVerifyExternalSyncSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesVerifyExternalSyncSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesVerifyExternalSyncSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{project}/instances/{instance}/verifyExternalSyncSettings', \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesVerifyExternalSyncSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sqlInstancesVerifyExternalSyncSettingsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesVerifyExternalSyncSettingsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlProjectsInstancesVerifyExternalSyncSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sqlInstancesVerifyExternalSyncSettingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SqlInstancesVerifyExternalSyncSettingsResponse', 'json');
            }
        }

        return $response;
    }
}