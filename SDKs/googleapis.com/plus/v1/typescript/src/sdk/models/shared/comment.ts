/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Actor info specific to YouTube clients.
 */
export class CommentActorClientSpecificActorInfoYoutubeActorInfo extends SpeakeasyBase {
  /**
   * ID of the YouTube channel owned by the Actor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channelId" })
  channelId?: string;
}

/**
 * Actor info specific to particular clients.
 */
export class CommentActorClientSpecificActorInfo extends SpeakeasyBase {
  /**
   * Actor info specific to YouTube clients.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "youtubeActorInfo" })
  @Type(() => CommentActorClientSpecificActorInfoYoutubeActorInfo)
  youtubeActorInfo?: CommentActorClientSpecificActorInfoYoutubeActorInfo;
}

/**
 * The image representation of this actor.
 */
export class CommentActorImage extends SpeakeasyBase {
  /**
   * The URL of the actor's profile photo. To resize the image and crop it to a square, append the query string ?sz=x, where x is the dimension in pixels of each side.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * Verification status of actor.
 */
export class CommentActorVerification extends SpeakeasyBase {
  /**
   * Verification for one-time or manual processes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "adHocVerified" })
  adHocVerified?: string;
}

/**
 * The person who posted this comment.
 */
export class CommentActor extends SpeakeasyBase {
  /**
   * Actor info specific to particular clients.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientSpecificActorInfo" })
  @Type(() => CommentActorClientSpecificActorInfo)
  clientSpecificActorInfo?: CommentActorClientSpecificActorInfo;

  /**
   * The name of this actor, suitable for display.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * The ID of the actor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The image representation of this actor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  @Type(() => CommentActorImage)
  image?: CommentActorImage;

  /**
   * A link to the Person resource for this actor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  /**
   * Verification status of actor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verification" })
  @Type(() => CommentActorVerification)
  verification?: CommentActorVerification;
}

export class CommentInReplyTo extends SpeakeasyBase {
  /**
   * The ID of the activity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The URL of the activity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * The object of this comment.
 */
export class CommentObject extends SpeakeasyBase {
  /**
   * The HTML-formatted content, suitable for display.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  content?: string;

  /**
   * The object type of this comment. Possible values are:
   *
   * @remarks
   * - "comment" - A comment in reply to an activity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "objectType" })
  objectType?: string;

  /**
   * The content (text) as provided by the author, stored without any HTML formatting. When creating or updating a comment, this value must be supplied as plain text in the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originalContent" })
  originalContent?: string;
}

/**
 * People who +1'd this comment.
 */
export class CommentPlusoners extends SpeakeasyBase {
  /**
   * Total number of people who +1'd this comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalItems" })
  totalItems?: number;
}

/**
 * Successful response
 */
export class Comment extends SpeakeasyBase {
  /**
   * The person who posted this comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "actor" })
  @Type(() => CommentActor)
  actor?: CommentActor;

  /**
   * ETag of this response for caching purposes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "etag" })
  etag?: string;

  /**
   * The ID of this comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The activity this comment replied to.
   */
  @SpeakeasyMetadata({ elemType: CommentInReplyTo })
  @Expose({ name: "inReplyTo" })
  @Type(() => CommentInReplyTo)
  inReplyTo?: CommentInReplyTo[];

  /**
   * Identifies this resource as a comment. Value: "plus#comment".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * The object of this comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "object" })
  @Type(() => CommentObject)
  object?: CommentObject;

  /**
   * People who +1'd this comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "plusoners" })
  @Type(() => CommentPlusoners)
  plusoners?: CommentPlusoners;

  /**
   * The time at which this comment was initially published. Formatted as an RFC 3339 timestamp.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "published" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  published?: Date;

  /**
   * Link to this comment resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfLink" })
  selfLink?: string;

  /**
   * The time at which this comment was last updated. Formatted as an RFC 3339 timestamp.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updated?: Date;

  /**
   * This comment's verb, indicating what action was performed. Possible values are:
   *
   * @remarks
   * - "post" - Publish content to the stream.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verb" })
  verb?: string;
}
