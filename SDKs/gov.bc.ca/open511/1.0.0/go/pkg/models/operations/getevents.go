// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetEventsEventTypeEnum - Limits the response to events tagged with one of the listed event types.  The possible values include: [CONSTRUCTION, INCIDENT, SPECIAL_EVENT, WEATHER_CONDITION].  Multiple values may be listed, and should be separated by a comma. The default is to return events of all types.
type GetEventsEventTypeEnum string

const (
	GetEventsEventTypeEnumConstruction     GetEventsEventTypeEnum = "CONSTRUCTION"
	GetEventsEventTypeEnumSpecialEvent     GetEventsEventTypeEnum = "SPECIAL_EVENT"
	GetEventsEventTypeEnumIncident         GetEventsEventTypeEnum = "INCIDENT"
	GetEventsEventTypeEnumWeatherCondition GetEventsEventTypeEnum = "WEATHER_CONDITION"
	GetEventsEventTypeEnumRoadCondition    GetEventsEventTypeEnum = "ROAD_CONDITION"
)

func (e GetEventsEventTypeEnum) ToPointer() *GetEventsEventTypeEnum {
	return &e
}

func (e *GetEventsEventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CONSTRUCTION":
		fallthrough
	case "SPECIAL_EVENT":
		fallthrough
	case "INCIDENT":
		fallthrough
	case "WEATHER_CONDITION":
		fallthrough
	case "ROAD_CONDITION":
		*e = GetEventsEventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEventsEventTypeEnum: %v", v)
	}
}

// GetEventsFormatEnum - The format of the response
type GetEventsFormatEnum string

const (
	GetEventsFormatEnumJSON GetEventsFormatEnum = "json"
	GetEventsFormatEnumXML  GetEventsFormatEnum = "xml"
)

func (e GetEventsFormatEnum) ToPointer() *GetEventsFormatEnum {
	return &e
}

func (e *GetEventsFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "xml":
		*e = GetEventsFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEventsFormatEnum: %v", v)
	}
}

// GetEventsStatusEnum - Limits the response to events having a given status.
type GetEventsStatusEnum string

const (
	GetEventsStatusEnumAll      GetEventsStatusEnum = "ALL"
	GetEventsStatusEnumActive   GetEventsStatusEnum = "ACTIVE"
	GetEventsStatusEnumArchived GetEventsStatusEnum = "ARCHIVED"
)

func (e GetEventsStatusEnum) ToPointer() *GetEventsStatusEnum {
	return &e
}

func (e *GetEventsStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "ARCHIVED":
		*e = GetEventsStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEventsStatusEnum: %v", v)
	}
}

type GetEventsRequest struct {
	// Limits the response to events within one of the specified areas.  An area must be specified as the ID of an item returned by the /areas resource. For example: an area_id of 'drivebc.ca/1' limits events to those within the Lower Mainland District.  The default is to return events in all areas.
	AreaID *string `queryParam:"style=form,explode=true,name=area_id"`
	// Limits the response to events that fall within the specified geographical bounding box.  The bbox format must be '[min longitude],[min latitude],[max longitude],[max latitude]' with WGS84 coordinates.  For example: -123.45,48.99,-122.45,49.49.  The default is to return events in all geographical locations.
	Bbox *string `queryParam:"style=form,explode=true,name=bbox"`
	// Limits the response to events based on the date and time that the event was created (first recorded). The date/time must be specified in ISO 8601 format, and may be prefixed by one of the following operators [<, <=, >, >=] to indicate 'before', 'before or equal to', 'after' or 'after or equal to' respectively.  For example, >2013-12-01T12:00:00Z requests all events create after Dec. 1, 2015 at 12pm (noon) Coordinated Universal Time.  The default is to return events with any creation time.
	Created *string `queryParam:"style=form,explode=true,name=created"`
	// Limits the response to events tagged with one of the listed event types.  The possible values include: [CONSTRUCTION, INCIDENT, SPECIAL_EVENT, WEATHER_CONDITION].  Multiple values may be listed, and should be separated by a comma. The default is to return events of all types.
	EventType *GetEventsEventTypeEnum `queryParam:"style=form,explode=true,name=event_type"`
	// The format of the response
	Format *GetEventsFormatEnum `queryParam:"style=form,explode=true,name=format"`
	// Limits the response to events reported by a given jurisdiction. The value given must be specified as the ID of a jurisdiction returned by the /jurisdiction resource. The default is to return events from all jurisdictions.
	Jurisdiction *string `queryParam:"style=form,explode=true,name=jurisdiction"`
	// Limits the response to events on a given road as specified by the road name.  An example of a valid road name is 'Highway 1'. The default is to return events on all roads.
	RoadName *string `queryParam:"style=form,explode=true,name=road_name"`
	// Limits the response to events tagged with one of the listed severity values. The possible values are: [MINOR, MODERATE, MAJOR].  Multiple values may be listed, and should be separated by a comma. The default is to return events of any severity.
	Severity *string `queryParam:"style=form,explode=true,name=severity"`
	// Limits the response to events having a given status.
	Status *GetEventsStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// Limits the response to events based on the date and time that the event was last updated. The date/time must be specified in ISO 8601 format, and may be prefixed by one of the following operators [<, <=, >, >=] to indicate 'before', 'before or equal to', 'after' or 'after or equal to' respectively.  For example, >2013-12-01T12:00:00Z requests all events updated after Dec. 1, 2015 at 12pm (noon) Coordinated Universal Time. The default is to return events with any update time
	Updated *string `queryParam:"style=form,explode=true,name=updated"`
}

type GetEventsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
