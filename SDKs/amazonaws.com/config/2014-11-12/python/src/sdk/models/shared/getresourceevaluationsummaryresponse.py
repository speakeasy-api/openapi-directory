"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import compliancetype_enum as shared_compliancetype_enum
from ..shared import evaluationcontext as shared_evaluationcontext
from ..shared import evaluationmode_enum as shared_evaluationmode_enum
from ..shared import evaluationstatus as shared_evaluationstatus
from ..shared import resourcedetails as shared_resourcedetails
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetResourceEvaluationSummaryResponse:
    r"""Success"""
    
    compliance: Optional[shared_compliancetype_enum.ComplianceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Compliance'), 'exclude': lambda f: f is None }})  
    evaluation_context: Optional[shared_evaluationcontext.EvaluationContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EvaluationContext'), 'exclude': lambda f: f is None }})  
    evaluation_mode: Optional[shared_evaluationmode_enum.EvaluationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EvaluationMode'), 'exclude': lambda f: f is None }})  
    evaluation_start_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EvaluationStartTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    evaluation_status: Optional[shared_evaluationstatus.EvaluationStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EvaluationStatus'), 'exclude': lambda f: f is None }})  
    resource_details: Optional[shared_resourcedetails.ResourceDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceDetails'), 'exclude': lambda f: f is None }})  
    resource_evaluation_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceEvaluationId'), 'exclude': lambda f: f is None }})  
    