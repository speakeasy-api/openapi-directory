"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import action as shared_action
from ..shared import eventbatchingcondition as shared_eventbatchingcondition
from ..shared import predicate as shared_predicate
from ..shared import triggertype_enum as shared_triggertype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateTriggerRequest:
    
    actions: list[shared_action.Action] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Actions') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    type: shared_triggertype_enum.TriggerTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    event_batching_condition: Optional[shared_eventbatchingcondition.EventBatchingCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventBatchingCondition'), 'exclude': lambda f: f is None }})  
    predicate: Optional[shared_predicate.Predicate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Predicate'), 'exclude': lambda f: f is None }})  
    schedule: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Schedule'), 'exclude': lambda f: f is None }})  
    start_on_creation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartOnCreation'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    workflow_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkflowName'), 'exclude': lambda f: f is None }})  
    