"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import databaseresource as shared_databaseresource
from ..shared import datacellsfilterresource as shared_datacellsfilterresource
from ..shared import datalocationresource as shared_datalocationresource
from ..shared import lftagkeyresource as shared_lftagkeyresource
from ..shared import lftagpolicyresource as shared_lftagpolicyresource
from ..shared import listpermissionsresponse as shared_listpermissionsresponse
from ..shared import tableresource as shared_tableresource
from ..shared import tablewithcolumnsresource as shared_tablewithcolumnsresource
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListPermissionsRequestBodyPrincipal:
    r"""The Lake Formation principal. Supported principals are IAM users or IAM roles."""
    
    data_lake_principal_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataLakePrincipalIdentifier'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListPermissionsRequestBodyResource:
    r"""A structure for the resource."""
    
    catalog: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Catalog'), 'exclude': lambda f: f is None }})  
    database: Optional[shared_databaseresource.DatabaseResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Database'), 'exclude': lambda f: f is None }})  
    data_cells_filter: Optional[shared_datacellsfilterresource.DataCellsFilterResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataCellsFilter'), 'exclude': lambda f: f is None }})  
    data_location: Optional[shared_datalocationresource.DataLocationResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataLocation'), 'exclude': lambda f: f is None }})  
    lf_tag: Optional[shared_lftagkeyresource.LFTagKeyResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LFTag'), 'exclude': lambda f: f is None }})  
    lf_tag_policy: Optional[shared_lftagpolicyresource.LFTagPolicyResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LFTagPolicy'), 'exclude': lambda f: f is None }})  
    table: Optional[shared_tableresource.TableResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Table'), 'exclude': lambda f: f is None }})  
    table_with_columns: Optional[shared_tablewithcolumnsresource.TableWithColumnsResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableWithColumns'), 'exclude': lambda f: f is None }})  
    
class ListPermissionsRequestBodyResourceTypeEnum(str, Enum):
    r"""Specifies a resource type to filter the permissions returned."""
    CATALOG = 'CATALOG'
    DATABASE = 'DATABASE'
    TABLE = 'TABLE'
    DATA_LOCATION = 'DATA_LOCATION'
    LF_TAG = 'LF_TAG'
    LF_TAG_POLICY = 'LF_TAG_POLICY'
    LF_TAG_POLICY_DATABASE = 'LF_TAG_POLICY_DATABASE'
    LF_TAG_POLICY_TABLE = 'LF_TAG_POLICY_TABLE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListPermissionsRequestBody:
    
    catalog_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CatalogId'), 'exclude': lambda f: f is None }})
    r"""The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment."""  
    include_related: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncludeRelated'), 'exclude': lambda f: f is None }})
    r"""Indicates that related permissions should be included in the results."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxResults'), 'exclude': lambda f: f is None }})
    r"""The maximum number of results to return."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextToken'), 'exclude': lambda f: f is None }})
    r"""A continuation token, if this is not the first call to retrieve this list."""  
    principal: Optional[ListPermissionsRequestBodyPrincipal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Principal'), 'exclude': lambda f: f is None }})
    r"""The Lake Formation principal. Supported principals are IAM users or IAM roles."""  
    resource: Optional[ListPermissionsRequestBodyResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Resource'), 'exclude': lambda f: f is None }})
    r"""A structure for the resource."""  
    resource_type: Optional[ListPermissionsRequestBodyResourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceType'), 'exclude': lambda f: f is None }})
    r"""Specifies a resource type to filter the permissions returned."""  
    

@dataclasses.dataclass
class ListPermissionsRequest:
    
    request_body: ListPermissionsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    max_results: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxResults', 'style': 'form', 'explode': True }})
    r"""Pagination limit"""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})
    r"""Pagination token"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListPermissionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServiceException"""  
    invalid_input_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidInputException"""  
    list_permissions_response: Optional[shared_listpermissionsresponse.ListPermissionsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    operation_timeout_exception: Optional[Any] = dataclasses.field(default=None)
    r"""OperationTimeoutException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    