"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddatacatalogv1physicalschemaavroschema as shared_googleclouddatacatalogv1physicalschemaavroschema
from ..shared import googleclouddatacatalogv1physicalschemaprotobufschema as shared_googleclouddatacatalogv1physicalschemaprotobufschema
from ..shared import googleclouddatacatalogv1physicalschemathriftschema as shared_googleclouddatacatalogv1physicalschemathriftschema
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDatacatalogV1PhysicalSchema:
    r"""Native schema used by a resource represented as an entry. Used by query engines for deserializing and parsing source data."""
    
    avro: Optional[shared_googleclouddatacatalogv1physicalschemaavroschema.GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avro'), 'exclude': lambda f: f is None }})
    r"""Schema in Avro JSON format."""  
    csv: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('csv'), 'exclude': lambda f: f is None }})
    r"""Marks a CSV-encoded data source."""  
    orc: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orc'), 'exclude': lambda f: f is None }})
    r"""Marks an ORC-encoded data source."""  
    parquet: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parquet'), 'exclude': lambda f: f is None }})
    r"""Marks a Parquet-encoded data source."""  
    protobuf: Optional[shared_googleclouddatacatalogv1physicalschemaprotobufschema.GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protobuf'), 'exclude': lambda f: f is None }})
    r"""Schema in protocol buffer format."""  
    thrift: Optional[shared_googleclouddatacatalogv1physicalschemathriftschema.GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thrift'), 'exclude': lambda f: f is None }})
    r"""Schema in Thrift format."""  
    