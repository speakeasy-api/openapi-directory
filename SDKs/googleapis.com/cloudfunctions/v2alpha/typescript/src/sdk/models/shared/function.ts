/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BuildConfig, BuildConfigInput } from "./buildconfig";
import { EventTrigger, EventTriggerInput } from "./eventtrigger";
import { GoogleCloudFunctionsV2alphaStateMessage } from "./googlecloudfunctionsv2alphastatemessage";
import { ServiceConfig, ServiceConfigInput } from "./serviceconfig";
import { Expose, Type } from "class-transformer";

/**
 * Describe whether the function is 1st Gen or 2nd Gen.
 */
export enum FunctionEnvironmentEnum {
  EnvironmentUnspecified = "ENVIRONMENT_UNSPECIFIED",
  Gen1 = "GEN_1",
  Gen2 = "GEN_2",
}

/**
 * Describes a Cloud Function that contains user computation executed in response to an event. It encapsulates function and trigger configurations.
 */
export class FunctionInput extends SpeakeasyBase {
  /**
   * Describes the Build step of the function that builds a container from the given source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "buildConfig" })
  @Type(() => BuildConfigInput)
  buildConfig?: BuildConfigInput;

  /**
   * User-provided description of a function.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Describe whether the function is 1st Gen or 2nd Gen.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "environment" })
  environment?: FunctionEnvironmentEnum;

  /**
   * Describes EventTrigger, used to request events to be sent from another service.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventTrigger" })
  @Type(() => EventTriggerInput)
  eventTrigger?: EventTriggerInput;

  /**
   * Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kmsKeyName" })
  kmsKeyName?: string;

  /**
   * Labels associated with this Cloud Function.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * A user-defined name of the function. Function names must be unique globally and match pattern `projects/* /locations/* /functions/*`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Describes the Service being deployed. Currently Supported : Cloud Run (fully managed). Next tag: 23
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceConfig" })
  @Type(() => ServiceConfigInput)
  serviceConfig?: ServiceConfigInput;
}

/**
 * Output only. State of the function.
 */
export enum FunctionStateEnum {
  StateUnspecified = "STATE_UNSPECIFIED",
  Active = "ACTIVE",
  Failed = "FAILED",
  Deploying = "DEPLOYING",
  Deleting = "DELETING",
  Unknown = "UNKNOWN",
}

/**
 * Describes a Cloud Function that contains user computation executed in response to an event. It encapsulates function and trigger configurations.
 */
export class FunctionT extends SpeakeasyBase {
  /**
   * Describes the Build step of the function that builds a container from the given source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "buildConfig" })
  @Type(() => BuildConfig)
  buildConfig?: BuildConfig;

  /**
   * User-provided description of a function.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Describe whether the function is 1st Gen or 2nd Gen.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "environment" })
  environment?: FunctionEnvironmentEnum;

  /**
   * Describes EventTrigger, used to request events to be sent from another service.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventTrigger" })
  @Type(() => EventTrigger)
  eventTrigger?: EventTrigger;

  /**
   * Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kmsKeyName" })
  kmsKeyName?: string;

  /**
   * Labels associated with this Cloud Function.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * A user-defined name of the function. Function names must be unique globally and match pattern `projects/* /locations/* /functions/*`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Describes the Service being deployed. Currently Supported : Cloud Run (fully managed). Next tag: 23
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceConfig" })
  @Type(() => ServiceConfig)
  serviceConfig?: ServiceConfig;

  /**
   * Output only. State of the function.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: FunctionStateEnum;

  /**
   * Output only. State Messages for this Cloud Function.
   */
  @SpeakeasyMetadata({ elemType: GoogleCloudFunctionsV2alphaStateMessage })
  @Expose({ name: "stateMessages" })
  @Type(() => GoogleCloudFunctionsV2alphaStateMessage)
  stateMessages?: GoogleCloudFunctionsV2alphaStateMessage[];

  /**
   * Output only. The last update timestamp of a Cloud Function.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;

  /**
   * Output only. The deployed url for the function.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}
