"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ItineraryPriceMetricLocation:
    r"""Description of a particular point or place in physical space"""
    
    iata_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iataCode'), 'exclude': lambda f: f is None }})
    r"""IATA location code"""  
    
class ItineraryPriceMetricPriceMetricsQuartileRankingEnum(str, Enum):
    MINIMUM = 'MINIMUM'
    FIRST = 'FIRST'
    MEDIUM = 'MEDIUM'
    THIRD = 'THIRD'
    MAXIMUM = 'MAXIMUM'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ItineraryPriceMetricPriceMetrics:
    
    amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Defines the monetary value with decimal position. It can be in cash or miles."""  
    quartile_ranking: Optional[ItineraryPriceMetricPriceMetricsQuartileRankingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quartileRanking'), 'exclude': lambda f: f is None }})  
    
class ItineraryPriceMetricTransportTypeEnum(str, Enum):
    r"""transportation type"""
    FLIGHT = 'FLIGHT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ItineraryPriceMetric:
    r"""price metric"""
    
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""currency of the prices.
    
    Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro
    """  
    departure_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('departureDate'), 'exclude': lambda f: f is None }})
    r"""The date on which the traveler will depart from the origin to go to the destination.
    
    Dates are specified in the[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format.
    """  
    destination: Optional[ItineraryPriceMetricLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination'), 'exclude': lambda f: f is None }})
    r"""Description of a particular point or place in physical space"""  
    one_way: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oneWay'), 'exclude': lambda f: f is None }})
    r"""true for a one way trip,
    false for a round trip
    """  
    origin: Optional[ItineraryPriceMetricLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin'), 'exclude': lambda f: f is None }})
    r"""Description of a particular point or place in physical space"""  
    price_metrics: Optional[list[ItineraryPriceMetricPriceMetrics]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceMetrics'), 'exclude': lambda f: f is None }})  
    transport_type: Optional[ItineraryPriceMetricTransportTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transportType'), 'exclude': lambda f: f is None }})
    r"""transportation type"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""ressource type - always price-metrics"""  
    