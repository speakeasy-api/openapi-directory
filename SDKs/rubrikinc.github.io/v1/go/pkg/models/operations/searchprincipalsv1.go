// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SearchPrincipalsV1PrincipalTypeEnum - The type of principal.
type SearchPrincipalsV1PrincipalTypeEnum string

const (
	SearchPrincipalsV1PrincipalTypeEnumUser  SearchPrincipalsV1PrincipalTypeEnum = "User"
	SearchPrincipalsV1PrincipalTypeEnumGroup SearchPrincipalsV1PrincipalTypeEnum = "Group"
)

func (e SearchPrincipalsV1PrincipalTypeEnum) ToPointer() *SearchPrincipalsV1PrincipalTypeEnum {
	return &e
}

func (e *SearchPrincipalsV1PrincipalTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User":
		fallthrough
	case "Group":
		*e = SearchPrincipalsV1PrincipalTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchPrincipalsV1PrincipalTypeEnum: %v", v)
	}
}

// SearchPrincipalsV1SortByEnum - Attribute by which to sort. Default is "name".
type SearchPrincipalsV1SortByEnum string

const (
	SearchPrincipalsV1SortByEnumName          SearchPrincipalsV1SortByEnum = "Name"
	SearchPrincipalsV1SortByEnumPrincipalType SearchPrincipalsV1SortByEnum = "PrincipalType"
	SearchPrincipalsV1SortByEnumDescription   SearchPrincipalsV1SortByEnum = "Description"
	SearchPrincipalsV1SortByEnumFirstName     SearchPrincipalsV1SortByEnum = "FirstName"
	SearchPrincipalsV1SortByEnumLastName      SearchPrincipalsV1SortByEnum = "LastName"
	SearchPrincipalsV1SortByEnumEmailAddress  SearchPrincipalsV1SortByEnum = "EmailAddress"
	SearchPrincipalsV1SortByEnumDisplayName   SearchPrincipalsV1SortByEnum = "DisplayName"
)

func (e SearchPrincipalsV1SortByEnum) ToPointer() *SearchPrincipalsV1SortByEnum {
	return &e
}

func (e *SearchPrincipalsV1SortByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Name":
		fallthrough
	case "PrincipalType":
		fallthrough
	case "Description":
		fallthrough
	case "FirstName":
		fallthrough
	case "LastName":
		fallthrough
	case "EmailAddress":
		fallthrough
	case "DisplayName":
		*e = SearchPrincipalsV1SortByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchPrincipalsV1SortByEnum: %v", v)
	}
}

// SearchPrincipalsV1SortOrderEnum - Sort order. Default order is ascending.
type SearchPrincipalsV1SortOrderEnum string

const (
	SearchPrincipalsV1SortOrderEnumAsc  SearchPrincipalsV1SortOrderEnum = "asc"
	SearchPrincipalsV1SortOrderEnumDesc SearchPrincipalsV1SortOrderEnum = "desc"
)

func (e SearchPrincipalsV1SortOrderEnum) ToPointer() *SearchPrincipalsV1SortOrderEnum {
	return &e
}

func (e *SearchPrincipalsV1SortOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = SearchPrincipalsV1SortOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchPrincipalsV1SortOrderEnum: %v", v)
	}
}

type SearchPrincipalsV1Request struct {
	// ID of the authentication domain that contains the principal.
	AuthDomainID *string `queryParam:"style=form,explode=true,name=auth_domain_id"`
	// A Boolean that specifies whether the principal has any roles assigned or is a local user. When a principal is a local user, or when the principal has any roles assigned, this value is 'true'.
	//
	IsAssignedRolesOrIsLocal *bool `queryParam:"style=form,explode=true,name=is_assigned_roles_or_is_local"`
	// Indicates if the principal has TOTP authentication enabled. Returns the users with TOTP authentication enabled when the value is true.
	//
	IsTotpEnabled *bool `queryParam:"style=form,explode=true,name=is_totp_enabled"`
	// Maximum number of results to return.
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// The name of the principal.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Starting offset of the results to return.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// ID of the organization of which the principal is a member.
	OrganizationID *string `queryParam:"style=form,explode=true,name=organization_id"`
	// The type of principal.
	PrincipalType *SearchPrincipalsV1PrincipalTypeEnum `queryParam:"style=form,explode=true,name=principal_type"`
	// ID of a role assigned to the principal.
	RoleID *string `queryParam:"style=form,explode=true,name=role_id"`
	// Attribute by which to sort. Default is "name".
	SortBy *SearchPrincipalsV1SortByEnum `queryParam:"style=form,explode=true,name=sort_by"`
	// Sort order. Default order is ascending.
	SortOrder *SearchPrincipalsV1SortOrderEnum `queryParam:"style=form,explode=true,name=sort_order"`
}

type SearchPrincipalsV1Response struct {
	ContentType string
	// The list of matching principals.
	PrincipalSummaryV1ListResponse *shared.PrincipalSummaryV1ListResponse
	StatusCode                     int
	RawResponse                    *http.Response
}
