// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type NtltrSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type NtltrRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Roll No
	Rollno string `json:"rollno"`
	// Year
	Year string `json:"year"`
}

// NtltrRequestBodyFormatEnum - The format of the certificate in response.
type NtltrRequestBodyFormatEnum string

const (
	NtltrRequestBodyFormatEnumPdf NtltrRequestBodyFormatEnum = "pdf"
)

func (e *NtltrRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = NtltrRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NtltrRequestBodyFormatEnum: %s", s)
	}
}

// NtltrRequestBody - Request format
type NtltrRequestBody struct {
	CertificateParameters *NtltrRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format NtltrRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Ntltr504ApplicationJSONErrorEnum string

const (
	Ntltr504ApplicationJSONErrorEnumGatewayTimeout Ntltr504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Ntltr504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Ntltr504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntltr504ApplicationJSONErrorEnum: %s", s)
	}
}

type Ntltr504ApplicationJSONErrorDescriptionEnum string

const (
	Ntltr504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Ntltr504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Ntltr504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Ntltr504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntltr504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ntltr504ApplicationJSON - Gateway timeout
type Ntltr504ApplicationJSON struct {
	Error            *Ntltr504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntltr504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntltr503ApplicationJSONErrorEnum string

const (
	Ntltr503ApplicationJSONErrorEnumServiceUnavailable Ntltr503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Ntltr503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Ntltr503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntltr503ApplicationJSONErrorEnum: %s", s)
	}
}

type Ntltr503ApplicationJSONErrorDescriptionEnum string

const (
	Ntltr503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Ntltr503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Ntltr503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Ntltr503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntltr503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ntltr503ApplicationJSON - Service unavailable
type Ntltr503ApplicationJSON struct {
	Error            *Ntltr503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntltr503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntltr502ApplicationJSONErrorEnum string

const (
	Ntltr502ApplicationJSONErrorEnumBadGatewy Ntltr502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Ntltr502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Ntltr502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntltr502ApplicationJSONErrorEnum: %s", s)
	}
}

type Ntltr502ApplicationJSONErrorDescriptionEnum string

const (
	Ntltr502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Ntltr502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Ntltr502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Ntltr502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntltr502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ntltr502ApplicationJSON - Bad gateway
type Ntltr502ApplicationJSON struct {
	Error            *Ntltr502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntltr502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntltr500ApplicationJSONErrorEnum string

const (
	Ntltr500ApplicationJSONErrorEnumInternalServerError Ntltr500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Ntltr500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Ntltr500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntltr500ApplicationJSONErrorEnum: %s", s)
	}
}

type Ntltr500ApplicationJSONErrorDescriptionEnum string

const (
	Ntltr500ApplicationJSONErrorDescriptionEnumInternalServerError Ntltr500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Ntltr500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Ntltr500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntltr500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ntltr500ApplicationJSON - Internal server error
type Ntltr500ApplicationJSON struct {
	Error            *Ntltr500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntltr500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntltr404ApplicationJSONErrorEnum string

const (
	Ntltr404ApplicationJSONErrorEnumRecordNotFound Ntltr404ApplicationJSONErrorEnum = "record_not_found"
	Ntltr404ApplicationJSONErrorEnumURLNotFound    Ntltr404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Ntltr404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Ntltr404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntltr404ApplicationJSONErrorEnum: %s", s)
	}
}

type Ntltr404ApplicationJSONErrorDescriptionEnum string

const (
	Ntltr404ApplicationJSONErrorDescriptionEnumNoRecordFound               Ntltr404ApplicationJSONErrorDescriptionEnum = "No record found"
	Ntltr404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Ntltr404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Ntltr404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Ntltr404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntltr404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ntltr404ApplicationJSON - No record found
type Ntltr404ApplicationJSON struct {
	Error            *Ntltr404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntltr404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntltr401ApplicationJSONErrorEnum string

const (
	Ntltr401ApplicationJSONErrorEnumInvalidAuthentication Ntltr401ApplicationJSONErrorEnum = "invalid_authentication"
	Ntltr401ApplicationJSONErrorEnumInvalidAuthorization  Ntltr401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Ntltr401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Ntltr401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntltr401ApplicationJSONErrorEnum: %s", s)
	}
}

type Ntltr401ApplicationJSONErrorDescriptionEnum string

const (
	Ntltr401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Ntltr401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Ntltr401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Ntltr401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Ntltr401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Ntltr401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntltr401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ntltr401ApplicationJSON - Unauthorized access
type Ntltr401ApplicationJSON struct {
	Error            *Ntltr401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntltr401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ntltr400ApplicationJSONErrorEnum string

const (
	Ntltr400ApplicationJSONErrorEnumMissingParameter Ntltr400ApplicationJSONErrorEnum = "missing_parameter"
	Ntltr400ApplicationJSONErrorEnumInvalidParameter Ntltr400ApplicationJSONErrorEnum = "invalid_parameter"
	Ntltr400ApplicationJSONErrorEnumInvalidFormat    Ntltr400ApplicationJSONErrorEnum = "invalid_format"
	Ntltr400ApplicationJSONErrorEnumInvalidTxnid     Ntltr400ApplicationJSONErrorEnum = "invalid_txnid"
	Ntltr400ApplicationJSONErrorEnumInvalidConsentid Ntltr400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Ntltr400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Ntltr400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntltr400ApplicationJSONErrorEnum: %s", s)
	}
}

type Ntltr400ApplicationJSONErrorDescriptionEnum string

const (
	Ntltr400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Ntltr400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Ntltr400ApplicationJSONErrorDescriptionEnumBadRequest                              Ntltr400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Ntltr400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Ntltr400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Ntltr400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Ntltr400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Ntltr400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Ntltr400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Ntltr400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Ntltr400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ntltr400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ntltr400ApplicationJSON - Bad request
type Ntltr400ApplicationJSON struct {
	Error            *Ntltr400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ntltr400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type NtltrResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Ntltr400ApplicationJSONObject *Ntltr400ApplicationJSON
	// Unauthorized access
	Ntltr401ApplicationJSONObject *Ntltr401ApplicationJSON
	// No record found
	Ntltr404ApplicationJSONObject *Ntltr404ApplicationJSON
	// Internal server error
	Ntltr500ApplicationJSONObject *Ntltr500ApplicationJSON
	// Bad gateway
	Ntltr502ApplicationJSONObject *Ntltr502ApplicationJSON
	// Service unavailable
	Ntltr503ApplicationJSONObject *Ntltr503ApplicationJSON
	// Gateway timeout
	Ntltr504ApplicationJSONObject *Ntltr504ApplicationJSON
}
