// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type StatusEnum string

const (
	StatusEnumRetried            StatusEnum = "retried"
	StatusEnumCanceled           StatusEnum = "canceled"
	StatusEnumInfrastructureFail StatusEnum = "infrastructure_fail"
	StatusEnumTimedout           StatusEnum = "timedout"
	StatusEnumNotRun             StatusEnum = "not_run"
	StatusEnumRunning            StatusEnum = "running"
	StatusEnumFailed             StatusEnum = "failed"
	StatusEnumQueued             StatusEnum = "queued"
	StatusEnumScheduled          StatusEnum = "scheduled"
	StatusEnumNotRunning         StatusEnum = "not_running"
	StatusEnumNoTests            StatusEnum = "no_tests"
	StatusEnumFixed              StatusEnum = "fixed"
	StatusEnumSuccess            StatusEnum = "success"
)

func (e StatusEnum) ToPointer() *StatusEnum {
	return &e
}

func (e *StatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "retried":
		fallthrough
	case "canceled":
		fallthrough
	case "infrastructure_fail":
		fallthrough
	case "timedout":
		fallthrough
	case "not_run":
		fallthrough
	case "running":
		fallthrough
	case "failed":
		fallthrough
	case "queued":
		fallthrough
	case "scheduled":
		fallthrough
	case "not_running":
		fallthrough
	case "no_tests":
		fallthrough
	case "fixed":
		fallthrough
	case "success":
		*e = StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatusEnum: %v", v)
	}
}
