/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { UsableSubnetworkSecondaryRange } from "./usablesubnetworksecondaryrange";
import { Expose, Type } from "class-transformer";

/**
 * The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack.
 */
export enum UsableSubnetworkIpv6AccessTypeEnum {
  External = "EXTERNAL",
  Internal = "INTERNAL",
}

/**
 * The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
 */
export enum UsableSubnetworkPurposeEnum {
  Aggregate = "AGGREGATE",
  CloudExtension = "CLOUD_EXTENSION",
  GlobalManagedProxy = "GLOBAL_MANAGED_PROXY",
  InternalHttpsLoadBalancer = "INTERNAL_HTTPS_LOAD_BALANCER",
  Private = "PRIVATE",
  PrivateNat = "PRIVATE_NAT",
  PrivateRfc1918 = "PRIVATE_RFC_1918",
  PrivateServiceConnect = "PRIVATE_SERVICE_CONNECT",
  RegionalManagedProxy = "REGIONAL_MANAGED_PROXY",
}

/**
 * The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
 */
export enum UsableSubnetworkRoleEnum {
  Active = "ACTIVE",
  Backup = "BACKUP",
}

/**
 * The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
 */
export enum UsableSubnetworkStackTypeEnum {
  Ipv4Ipv6 = "IPV4_IPV6",
  Ipv4Only = "IPV4_ONLY",
}

/**
 * Subnetwork which the current user has compute.subnetworks.use permission on.
 */
export class UsableSubnetwork extends SpeakeasyBase {
  /**
   * [Output Only] The external IPv6 address range that is assigned to this subnetwork.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "externalIpv6Prefix" })
  externalIpv6Prefix?: string;

  /**
   * [Output Only] The internal IPv6 address range that is assigned to this subnetwork.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "internalIpv6Prefix" })
  internalIpv6Prefix?: string;

  /**
   * The range of internal addresses that are owned by this subnetwork.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipCidrRange" })
  ipCidrRange?: string;

  /**
   * The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipv6AccessType" })
  ipv6AccessType?: UsableSubnetworkIpv6AccessTypeEnum;

  /**
   * Network URL.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network?: string;

  /**
   * The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "purpose" })
  purpose?: UsableSubnetworkPurposeEnum;

  /**
   * The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "role" })
  role?: UsableSubnetworkRoleEnum;

  /**
   * Secondary IP ranges.
   */
  @SpeakeasyMetadata({ elemType: UsableSubnetworkSecondaryRange })
  @Expose({ name: "secondaryIpRanges" })
  @Type(() => UsableSubnetworkSecondaryRange)
  secondaryIpRanges?: UsableSubnetworkSecondaryRange[];

  /**
   * The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stackType" })
  stackType?: UsableSubnetworkStackTypeEnum;

  /**
   * Subnetwork URL.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subnetwork" })
  subnetwork?: string;
}
