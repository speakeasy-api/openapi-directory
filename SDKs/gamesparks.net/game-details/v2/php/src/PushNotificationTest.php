<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PushNotificationTest 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * testPushAmazonNotifications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestPushAmazonNotificationsUsingPOSTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestPushAmazonNotificationsUsingPOSTResponse
     */
	public function testPushAmazonNotificationsUsingPOST(
        \OpenAPI\OpenAPI\Models\Operations\TestPushAmazonNotificationsUsingPOSTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestPushAmazonNotificationsUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/pushNotifications/test/amazon', \OpenAPI\OpenAPI\Models\Operations\TestPushAmazonNotificationsUsingPOSTRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "pushNotificationTestModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestPushAmazonNotificationsUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * testPushAppleDevNotifications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestPushAppleDevNotificationsUsingPOSTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestPushAppleDevNotificationsUsingPOSTResponse
     */
	public function testPushAppleDevNotificationsUsingPOST(
        \OpenAPI\OpenAPI\Models\Operations\TestPushAppleDevNotificationsUsingPOSTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestPushAppleDevNotificationsUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/pushNotifications/test/apple/development', \OpenAPI\OpenAPI\Models\Operations\TestPushAppleDevNotificationsUsingPOSTRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "pushNotificationTestModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestPushAppleDevNotificationsUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * testPushAppleProdNotifications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestPushAppleProdNotificationsUsingPOSTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestPushAppleProdNotificationsUsingPOSTResponse
     */
	public function testPushAppleProdNotificationsUsingPOST(
        \OpenAPI\OpenAPI\Models\Operations\TestPushAppleProdNotificationsUsingPOSTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestPushAppleProdNotificationsUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/pushNotifications/test/apple/production', \OpenAPI\OpenAPI\Models\Operations\TestPushAppleProdNotificationsUsingPOSTRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "pushNotificationTestModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestPushAppleProdNotificationsUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * testPushGoogleNotifications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestPushGoogleNotificationsUsingPOSTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestPushGoogleNotificationsUsingPOSTResponse
     */
	public function testPushGoogleNotificationsUsingPOST(
        \OpenAPI\OpenAPI\Models\Operations\TestPushGoogleNotificationsUsingPOSTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestPushGoogleNotificationsUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/pushNotifications/test/google', \OpenAPI\OpenAPI\Models\Operations\TestPushGoogleNotificationsUsingPOSTRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "pushNotificationTestModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestPushGoogleNotificationsUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * testViberIntegrationNotifications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestViberIntegrationNotificationsUsingPOSTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestViberIntegrationNotificationsUsingPOSTResponse
     */
	public function testViberIntegrationNotificationsUsingPOST(
        \OpenAPI\OpenAPI\Models\Operations\TestViberIntegrationNotificationsUsingPOSTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestViberIntegrationNotificationsUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/pushNotifications/test/viber/integration', \OpenAPI\OpenAPI\Models\Operations\TestViberIntegrationNotificationsUsingPOSTRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "pushNotificationTestModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestViberIntegrationNotificationsUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * testViberProductionNotifications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestViberProductionNotificationsUsingPOSTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestViberProductionNotificationsUsingPOSTResponse
     */
	public function testViberProductionNotificationsUsingPOST(
        \OpenAPI\OpenAPI\Models\Operations\TestViberProductionNotificationsUsingPOSTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestViberProductionNotificationsUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/pushNotifications/test/viber/production', \OpenAPI\OpenAPI\Models\Operations\TestViberProductionNotificationsUsingPOSTRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "pushNotificationTestModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestViberProductionNotificationsUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * testWindows8Notifications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestWindows8NotificationsUsingPOSTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestWindows8NotificationsUsingPOSTResponse
     */
	public function testWindows8NotificationsUsingPOST(
        \OpenAPI\OpenAPI\Models\Operations\TestWindows8NotificationsUsingPOSTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestWindows8NotificationsUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/pushNotifications/test/microsoft/windows8', \OpenAPI\OpenAPI\Models\Operations\TestWindows8NotificationsUsingPOSTRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "pushNotificationTestModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestWindows8NotificationsUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * testWindowsPhone8Notifications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestWindowsPhone8NotificationsUsingPOSTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestWindowsPhone8NotificationsUsingPOSTResponse
     */
	public function testWindowsPhone8NotificationsUsingPOST(
        \OpenAPI\OpenAPI\Models\Operations\TestWindowsPhone8NotificationsUsingPOSTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestWindowsPhone8NotificationsUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/pushNotifications/test/microsoft/windowsPhone8', \OpenAPI\OpenAPI\Models\Operations\TestWindowsPhone8NotificationsUsingPOSTRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "pushNotificationTestModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestWindowsPhone8NotificationsUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}