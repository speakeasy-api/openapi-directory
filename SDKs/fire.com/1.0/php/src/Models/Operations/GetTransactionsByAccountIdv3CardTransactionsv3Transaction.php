<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class GetTransactionsByAccountIdv3CardTransactionsv3Transaction
{
    /**
     * Net amount lodged or taken from the account after fees and charges were applied.
     * 
     * @var ?int $amountAfterCharges
     */
	#[\JMS\Serializer\Annotation\SerializedName('amountAfterCharges')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $amountAfterCharges = null;
    
    /**
     * Amount of the transaction before the fees and taxes were applied.
     * 
     * @var ?int $amountBeforeCharges
     */
	#[\JMS\Serializer\Annotation\SerializedName('amountBeforeCharges')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $amountBeforeCharges = null;
    
    /**
     * the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).
     * 
     * @var ?int $balance
     */
	#[\JMS\Serializer\Annotation\SerializedName('balance')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $balance = null;
    
    /**
     * Details of the batch run if this transaction was part of a batch.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GetTransactionsByAccountIdv3CardTransactionsv3TransactionBatchItemDetails $batchItemDetails
     */
	#[\JMS\Serializer\Annotation\SerializedName('batchItemDetails')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\GetTransactionsByAccountIdv3CardTransactionsv3TransactionBatchItemDetails')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GetTransactionsByAccountIdv3CardTransactionsv3TransactionBatchItemDetails $batchItemDetails = null;
    
    /**
     * Details of the card used (if applicable)
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GetTransactionsByAccountIdv3CardTransactionsv3TransactionRelatedCard $card
     */
	#[\JMS\Serializer\Annotation\SerializedName('card')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\GetTransactionsByAccountIdv3CardTransactionsv3TransactionRelatedCard')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GetTransactionsByAccountIdv3CardTransactionsv3TransactionRelatedCard $card = null;
    
    /**
     * The currency.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GetTransactionsByAccountIdv3CardTransactionsv3TransactionCurrency $currency
     */
	#[\JMS\Serializer\Annotation\SerializedName('currency')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\GetTransactionsByAccountIdv3CardTransactionsv3TransactionCurrency')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GetTransactionsByAccountIdv3CardTransactionsv3TransactionCurrency $currency = null;
    
    /**
     * Date of the transaction
     * 
     * @var ?\DateTime $date
     */
	#[\JMS\Serializer\Annotation\SerializedName('date')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $date = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('dateAcknowledged')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $dateAcknowledged = null;
    
    /**
     * Details of the direct debit (if applicable)
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GetTransactionsByAccountIdv3CardTransactionsv3TransactionDirectDebitDetails $directDebitDetails
     */
	#[\JMS\Serializer\Annotation\SerializedName('directDebitDetails')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\GetTransactionsByAccountIdv3CardTransactionsv3TransactionDirectDebitDetails')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GetTransactionsByAccountIdv3CardTransactionsv3TransactionDirectDebitDetails $directDebitDetails = null;
    
    /**
     * An internal Fire reference for the transaction (UUID)
     * 
     * @var ?string $eventUuid
     */
	#[\JMS\Serializer\Annotation\SerializedName('eventUuid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $eventUuid = null;
    
    /**
     * The amount of the fee, if any.
     * 
     * @var ?int $feeAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('feeAmount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $feeAmount = null;
    
    /**
     * Details of the FX trade (if applicable)
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GetTransactionsByAccountIdv3CardTransactionsv3TransactionFxTrade $fxTradeDetails
     */
	#[\JMS\Serializer\Annotation\SerializedName('fxTradeDetails')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\GetTransactionsByAccountIdv3CardTransactionsv3TransactionFxTrade')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GetTransactionsByAccountIdv3CardTransactionsv3TransactionFxTrade $fxTradeDetails = null;
    
    /**
     * identifier for the fire.com account (assigned by fire.com) This field is only used in the condensed version.
     * 
     * @var ?int $ican
     */
	#[\JMS\Serializer\Annotation\SerializedName('ican')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $ican = null;
    
    /**
     * The comment/reference on the transaction
     * 
     * @var ?string $myRef
     */
	#[\JMS\Serializer\Annotation\SerializedName('myRef')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $myRef = null;
    
    /**
     * (FOP payments only) The FOP Payment Code that was used to make this payment.
     * 
     * @var ?string $paymentRequestPublicCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('paymentRequestPublicCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $paymentRequestPublicCode = null;
    
    /**
     * Extra details about the transaction based on the scheme used to make the payment.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Operations\GetTransactionsByAccountIdv3CardTransactionsv3TransactionProprietarySchemeDetails> $proprietarySchemeDetails
     */
	#[\JMS\Serializer\Annotation\SerializedName('proprietarySchemeDetails')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Operations\GetTransactionsByAccountIdv3CardTransactionsv3TransactionProprietarySchemeDetails>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $proprietarySchemeDetails = null;
    
    /**
     * The id of the transaction.
     * 
     * @var ?int $refId
     */
	#[\JMS\Serializer\Annotation\SerializedName('refId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $refId = null;
    
    /**
     * Details of the related third party involved in the transaction.
     * 
     * @var mixed $relatedParty
     */
	#[\JMS\Serializer\Annotation\SerializedName('relatedParty')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $relatedParty = null;
    
    /**
     * The amount of the tax, if any (e.g. Stamp duty for ATM transactions)
     * 
     * @var ?int $taxAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('taxAmount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $taxAmount = null;
    
    /**
     * The id of this side of the transaction (each transaction has two sides - a to and a from). This is used to get the details of the transaction.
     * 
     * @var ?int $txnId
     */
	#[\JMS\Serializer\Annotation\SerializedName('txnId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $txnId = null;
    
    /**
     * The type of the transaction:
     * 
     * * `LODGEMENT` - Bank Transfer received
     * * `PIS_LODGEMENT` - Fire Open Payments Lodgement received
     * * `MANUAL_TRANSFER` - Manual Transfer to
     * * `WITHDRAWAL` - Bank Transfer sent
     * * `REVERSAL` - Credit Reversal
     * * `DIRECT_DEBIT` - A direct debit.
     * * `DIRECT_DEBIT_REPRESENTED` - A Direct Debit that was requested again after initially failing.
     * * `DIRECT_DEBIT_REFUND` - A refund of a Direct debit.
     * * `INTERNAL_TRANSFER_TO` - Internal Transfer sent (between two of my accounts of the same currency)
     * * `INTERNAL_TRANSFER_FROM` - Internal Transfer received (between two of my accounts of the same currency)
     * * `WITHDRAWAL_RETURNED` - Bank Transfer sent returned
     * * `LODGEMENT_REVERSED` - Bank Transfer received returned
     * * `FX_INTERNAL_TRANSFER_FROM` - FX Internal Transfer received (between two of my accounts of different currency)
     * * `FX_INTERNAL_TRANSFER_TO` - FX Internal Transfer sent (between two of my accounts of different currency)
     * * `CREATE_CARD` - The fee taken when a debit card is issued.
     * * `ADD_ACCOUNT` - The fee taken when an account is created.
     * * `CREATE_ADDITIONAL_USER` - The fee taken when an additional user is created.       
     * * `CARD_POS_CONTACT_DEBIT` - Card used in store; read by magnetic stripe or pin
     * * `CARD_POS_CONTACT_CREDIT` - Card used in store; read by magnetic stripe or pin
     * * `CARD_POS_CONTACTLESS_DEBIT` - Card used in store; read by NFC
     * * `CARD_POS_CONTACTLESS_CREDIT` - Card used in store; read by NFC
     * * `CARD_ECOMMERCE_DEBIT` - Card used on the internet
     * * `CARD_ECOMMERCE_CREDIT` - Card used on the internet
     * * `CARD_ATM_DEBIT` - Card used in an ATM
     * * `CARD_ATM_CREDIT` - Card used in an ATM
     * * `CARD_INTERNATIONAL_POS_CONTACT_DEBIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
     * * `CARD_INTERNATIONAL_POS_CONTACT_CREDIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
     * * `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT` - Card used in store in non-processing currency; read by NFC
     * * `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT` - Card used in store in non-processing currency; read by NFC
     * * `CARD_INTERNATIONAL_ECOMMERCE_DEBIT	` - Card used on the internet in non-processing currency
     * * `CARD_INTERNATIONAL_ECOMMERCE_CREDIT` - Card used on the internet in non-processing currency
     * * `CARD_INTERNATIONAL_ATM_DEBIT` - Card used in an ATM in non-processing currency
     * * `CARD_INTERNATIONAL_ATM_CREDIT` - Card used in an ATM in non-processing currency
     * * `CARD_POS_CONTACT_DEBIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
     * * `CARD_POS_CONTACT_CREDIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
     * * `CARD_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store; read by NFC - reversed
     * * `CARD_POS_CONTACTLESS_CREDIT_REVERSAL` - Card used in store; read by NFC - reversed
     * * `CARD_ECOMMERCE_DEBIT_REVERSAL	` - Card used on the internet - reversed
     * * `CARD_ECOMMERCE_CREDIT_REVERSAL` - Card used on the internet - reversed
     * * `CARD_ATM_DEBIT_REVERSAL` - Card used in an ATM - reversed
     * * `CARD_ATM_CREDIT_REVERSAL` - Card used in an ATM - reversed
     * * `CARD_INTERNATIONAL_POS_CONTACT_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
     * * `CARD_INTERNATIONAL_POS_CONTACT_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
     * * `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
     * * `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT_REVERSAL` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types.
     * * `CARD_INTERNATIONAL_ECOMMERCE_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
     * * `CARD_INTERNATIONAL_ECOMMERCE_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
     * * `CARD_INTERNATIONAL_ATM_DEBIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
     * * `CARD_INTERNATIONAL_ATM_CREDIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
     * 
     * 
     * @var ?string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $type = null;
    
    /**
     * The comment/reference on the transaction that appears on the recipients statement. Only for withdrawals
     * 
     * @var ?string $yourRef
     */
	#[\JMS\Serializer\Annotation\SerializedName('yourRef')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $yourRef = null;
    
	public function __construct()
	{
		$this->amountAfterCharges = null;
		$this->amountBeforeCharges = null;
		$this->balance = null;
		$this->batchItemDetails = null;
		$this->card = null;
		$this->currency = null;
		$this->date = null;
		$this->dateAcknowledged = null;
		$this->directDebitDetails = null;
		$this->eventUuid = null;
		$this->feeAmount = null;
		$this->fxTradeDetails = null;
		$this->ican = null;
		$this->myRef = null;
		$this->paymentRequestPublicCode = null;
		$this->proprietarySchemeDetails = null;
		$this->refId = null;
		$this->relatedParty = null;
		$this->taxAmount = null;
		$this->txnId = null;
		$this->type = null;
		$this->yourRef = null;
	}
}
