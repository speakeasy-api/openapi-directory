// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CertificateRevokeReasonEnum - Reason for revocation
type CertificateRevokeReasonEnum string

const (
	CertificateRevokeReasonEnumAffiliationChanged   CertificateRevokeReasonEnum = "AFFILIATION_CHANGED"
	CertificateRevokeReasonEnumCessationOfOperation CertificateRevokeReasonEnum = "CESSATION_OF_OPERATION"
	CertificateRevokeReasonEnumKeyCompromise        CertificateRevokeReasonEnum = "KEY_COMPROMISE"
	CertificateRevokeReasonEnumPrivilegeWithdrawn   CertificateRevokeReasonEnum = "PRIVILEGE_WITHDRAWN"
	CertificateRevokeReasonEnumSuperseded           CertificateRevokeReasonEnum = "SUPERSEDED"
)

func (e CertificateRevokeReasonEnum) ToPointer() *CertificateRevokeReasonEnum {
	return &e
}

func (e *CertificateRevokeReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AFFILIATION_CHANGED":
		fallthrough
	case "CESSATION_OF_OPERATION":
		fallthrough
	case "KEY_COMPROMISE":
		fallthrough
	case "PRIVILEGE_WITHDRAWN":
		fallthrough
	case "SUPERSEDED":
		*e = CertificateRevokeReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateRevokeReasonEnum: %v", v)
	}
}

// CertificateRevoke - The certificate revocation request
type CertificateRevoke struct {
	// Reason for revocation
	Reason CertificateRevokeReasonEnum `json:"reason"`
}
