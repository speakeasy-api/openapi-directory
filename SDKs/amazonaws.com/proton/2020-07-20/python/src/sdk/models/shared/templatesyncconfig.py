"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import repositoryprovider_enum as shared_repositoryprovider_enum
from ..shared import templatetype_enum as shared_templatetype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TemplateSyncConfig:
    r"""The detail data for a template sync configuration."""
    
    branch: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branch') }})  
    repository_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositoryName') }})  
    repository_provider: shared_repositoryprovider_enum.RepositoryProviderEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositoryProvider') }})  
    template_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('templateName') }})  
    template_type: shared_templatetype_enum.TemplateTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('templateType') }})  
    subdirectory: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subdirectory'), 'exclude': lambda f: f is None }})  
    