<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Config 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a new Secret
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\Secret $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSecretSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSecretResponse
     */
	public function createSecret(
        \OpenAPI\OpenAPI\Models\Shared\Secret $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSecretSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSecretResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/secrets');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->secret = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Secret', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Secret
     * 
     * Delete a Secret
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSecretRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSecretSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSecretResponse
     */
	public function deleteSecret(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSecretRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSecretSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSecretResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/secrets/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteSecretRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get features configuration
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFeaturesConfigurationResponse
     */
	public function getFeaturesConfiguration(
    ): \OpenAPI\OpenAPI\Models\Operations\GetFeaturesConfigurationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/features/config');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFeaturesConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get authentification configuration
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetKeycloakConfigResponse
     */
	public function getKeycloakConfig(
    ): \OpenAPI\OpenAPI\Models\Operations\GetKeycloakConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/keycloak/config');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetKeycloakConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->keycloakConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\KeycloakConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Secret
     * 
     * Retrieve a Secret
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSecretRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSecretSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSecretResponse
     */
	public function getSecret(
        \OpenAPI\OpenAPI\Models\Operations\GetSecretRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSecretSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSecretResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/secrets/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSecretRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->secret = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Secret', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Secrets
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSecretsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSecretsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSecretsResponse
     */
	public function getSecrets(
        \OpenAPI\OpenAPI\Models\Operations\GetSecretsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSecretsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSecretsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/secrets');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSecretsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSecretsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->secrets = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Secret>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the Secrets counter
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSecretsCounterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSecretsCounterResponse
     */
	public function getSecretsCounter(
        \OpenAPI\OpenAPI\Models\Operations\GetSecretsCounterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSecretsCounterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/secrets/count');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSecretsCounterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->counter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Counter', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Secret
     * 
     * Update a Secret
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSecretRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSecretSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSecretResponse
     */
	public function updateSecret(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSecretRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSecretSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSecretResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/secrets/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateSecretRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}