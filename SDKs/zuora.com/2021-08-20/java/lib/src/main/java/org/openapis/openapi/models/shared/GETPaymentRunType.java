/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class GETPaymentRunType {
    /**
     * The ID of the customer account associated with the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountId")
    public String accountId;
    public GETPaymentRunType withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * **Note:** This field is only available if you have the Credit Balance feature enabled and the Invoice Settlement feature disabled.
     * 
     * Whether to apply credit balances in the payment run. This field is only available when you have Invoice Settlement feature disabled.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applyCreditBalance")
    public Boolean applyCreditBalance;
    public GETPaymentRunType withApplyCreditBalance(Boolean applyCreditBalance) {
        this.applyCreditBalance = applyCreditBalance;
        return this;
    }
    
    /**
     * **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
     * 
     * Whether to automatically apply a posted credit memo to one or more receivables in the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoApplyCreditMemo")
    public Boolean autoApplyCreditMemo;
    public GETPaymentRunType withAutoApplyCreditMemo(Boolean autoApplyCreditMemo) {
        this.autoApplyCreditMemo = autoApplyCreditMemo;
        return this;
    }
    
    /**
     * **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
     * 
     * Whether to automatically apply unapplied payments to  one or more receivables in the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoApplyUnappliedPayment")
    public Boolean autoApplyUnappliedPayment;
    public GETPaymentRunType withAutoApplyUnappliedPayment(Boolean autoApplyUnappliedPayment) {
        this.autoApplyUnappliedPayment = autoApplyUnappliedPayment;
        return this;
    }
    
    /**
     * The alias name given to a batch.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batch")
    public String batch;
    public GETPaymentRunType withBatch(String batch) {
        this.batch = batch;
        return this;
    }
    
    /**
     * The billing cycle day (BCD), the day of the month when a bill run generates invoices for the account. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billCycleDay")
    public String billCycleDay;
    public GETPaymentRunType withBillCycleDay(String billCycleDay) {
        this.billCycleDay = billCycleDay;
        return this;
    }
    
    /**
     * The ID of the bill run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingRunId")
    public String billingRunId;
    public GETPaymentRunType withBillingRunId(String billingRunId) {
        this.billingRunId = billingRunId;
        return this;
    }
    
    /**
     * Whether to process electronic payments during the execution of payment runs. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collectPayment")
    public Boolean collectPayment;
    public GETPaymentRunType withCollectPayment(Boolean collectPayment) {
        this.collectPayment = collectPayment;
        return this;
    }
    
    /**
     * The date and time when the payment run is completed, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 11:39:58.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("completedOn")
    public OffsetDateTime completedOn;
    public GETPaymentRunType withCompletedOn(OffsetDateTime completedOn) {
        this.completedOn = completedOn;
        return this;
    }
    
    /**
     * **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information. 
     * 
     * Whether to process a single payment for all receivables that are due on an account.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consolidatedPayment")
    public Boolean consolidatedPayment;
    public GETPaymentRunType withConsolidatedPayment(Boolean consolidatedPayment) {
        this.consolidatedPayment = consolidatedPayment;
        return this;
    }
    
    /**
     * The ID of the Zuora user who created the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdById")
    public String createdById;
    public GETPaymentRunType withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     * The date and time when the payment run was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdDate")
    public OffsetDateTime createdDate;
    public GETPaymentRunType withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * A currency defined in the web-based UI administrative settings.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;
    public GETPaymentRunType withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * The date and time when the payment run is executed, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 11:30:37.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("executedOn")
    public OffsetDateTime executedOn;
    public GETPaymentRunType withExecutedOn(OffsetDateTime executedOn) {
        this.executedOn = executedOn;
        return this;
    }
    
    /**
     * The ID of the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public GETPaymentRunType withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The identification number of the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public String number;
    public GETPaymentRunType withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * The ID of the gateway instance that processes the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentGatewayId")
    public String paymentGatewayId;
    public GETPaymentRunType withPaymentGatewayId(String paymentGatewayId) {
        this.paymentGatewayId = paymentGatewayId;
        return this;
    }
    
    /**
     * **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information. 
     * 
     * Whether to process payments even if the default payment method is closed.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processPaymentWithClosedPM")
    public Boolean processPaymentWithClosedPM;
    public GETPaymentRunType withProcessPaymentWithClosedPM(Boolean processPaymentWithClosedPM) {
        this.processPaymentWithClosedPM = processPaymentWithClosedPM;
        return this;
    }
    
    /**
     * The date and time when the scheduled payment run is to be executed for collecting payments.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("runDate")
    public OffsetDateTime runDate;
    public GETPaymentRunType withRunDate(OffsetDateTime runDate) {
        this.runDate = runDate;
        return this;
    }
    
    /**
     * The status of the created payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public GETPaymentRunTypeStatusEnum status;
    public GETPaymentRunType withStatus(GETPaymentRunTypeStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Returns `true` if the request was processed successfully.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    public Boolean success;
    public GETPaymentRunType withSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    
    /**
     * The target date used to determine which receivables to be collected in the payment run. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("targetDate")
    public LocalDate targetDate;
    public GETPaymentRunType withTargetDate(LocalDate targetDate) {
        this.targetDate = targetDate;
        return this;
    }
    
    /**
     * The ID of the Zuora user who last updated the payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedById")
    public String updatedById;
    public GETPaymentRunType withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     * The date and time when the payment run was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedDate")
    public OffsetDateTime updatedDate;
    public GETPaymentRunType withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
}
