// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListHubsXAmzTargetEnum
type ListHubsXAmzTargetEnum string

const (
	ListHubsXAmzTargetEnumSageMakerListHubs ListHubsXAmzTargetEnum = "SageMaker.ListHubs"
)

func (e ListHubsXAmzTargetEnum) ToPointer() *ListHubsXAmzTargetEnum {
	return &e
}

func (e *ListHubsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SageMaker.ListHubs":
		*e = ListHubsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListHubsXAmzTargetEnum: %v", v)
	}
}

type ListHubsRequest struct {
	ListHubsRequest   shared.ListHubsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListHubsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListHubsResponse struct {
	ContentType string
	// Success
	ListHubsResponse *shared.ListHubsResponse
	StatusCode       int
	RawResponse      *http.Response
}
