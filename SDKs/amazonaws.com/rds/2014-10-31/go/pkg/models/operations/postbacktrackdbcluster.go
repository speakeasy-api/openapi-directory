// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTBacktrackDBClusterActionEnum
type POSTBacktrackDBClusterActionEnum string

const (
	POSTBacktrackDBClusterActionEnumBacktrackDbCluster POSTBacktrackDBClusterActionEnum = "BacktrackDBCluster"
)

func (e *POSTBacktrackDBClusterActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BacktrackDBCluster":
		*e = POSTBacktrackDBClusterActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTBacktrackDBClusterActionEnum: %s", s)
	}
}

// POSTBacktrackDBClusterVersionEnum
type POSTBacktrackDBClusterVersionEnum string

const (
	POSTBacktrackDBClusterVersionEnumTwoThousandAndFourteen1031 POSTBacktrackDBClusterVersionEnum = "2014-10-31"
)

func (e *POSTBacktrackDBClusterVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2014-10-31":
		*e = POSTBacktrackDBClusterVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTBacktrackDBClusterVersionEnum: %s", s)
	}
}

type POSTBacktrackDBClusterQueryParams struct {
	Action  POSTBacktrackDBClusterActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Version POSTBacktrackDBClusterVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTBacktrackDBClusterHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTBacktrackDBClusterRequest struct {
	QueryParams POSTBacktrackDBClusterQueryParams
	Headers     POSTBacktrackDBClusterHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTBacktrackDBClusterResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
