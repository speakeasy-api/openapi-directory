// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetMapVersionNumberEnum - Version of the service to call. The current version is 1
type GetMapVersionNumberEnum string

const (
	GetMapVersionNumberEnumOne GetMapVersionNumberEnum = "1"
)

func (e *GetMapVersionNumberEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		*e = GetMapVersionNumberEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMapVersionNumberEnum: %s", s)
	}
}

type GetMapPathParams struct {
	// Version of the service to call. The current version is 1
	VersionNumber GetMapVersionNumberEnum `pathParam:"style=simple,explode=false,name=versionNumber"`
}

// GetMapFormatEnum - Image format to be returned
type GetMapFormatEnum string

const (
	GetMapFormatEnumImageJpeg GetMapFormatEnum = "image/jpeg"
	GetMapFormatEnumImagePng  GetMapFormatEnum = "image/png"
)

func (e *GetMapFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "image/jpeg":
		fallthrough
	case "image/png":
		*e = GetMapFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMapFormatEnum: %s", s)
	}
}

// GetMapLayersEnum - Map layers requested Currently only the basic layer is available
type GetMapLayersEnum string

const (
	GetMapLayersEnumBasic GetMapLayersEnum = "basic"
)

func (e *GetMapLayersEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "basic":
		*e = GetMapLayersEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMapLayersEnum: %s", s)
	}
}

// GetMapRequestEnum - Request type
type GetMapRequestEnum string

const (
	GetMapRequestEnumGetMap GetMapRequestEnum = "GetMap"
)

func (e *GetMapRequestEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GetMap":
		*e = GetMapRequestEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMapRequestEnum: %s", s)
	}
}

// GetMapServiceEnum - Service type
type GetMapServiceEnum string

const (
	GetMapServiceEnumWms GetMapServiceEnum = "WMS"
)

func (e *GetMapServiceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WMS":
		*e = GetMapServiceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMapServiceEnum: %s", s)
	}
}

// GetMapSrsEnum - Projection used in describing the <b>bbox</b> EPSG:3857 is
// recommended, particularly at higher zoom levels. (Note that
// EPSG:3857 is functionally equivalent to EPSG:900913/EPSG:3785)
type GetMapSrsEnum string

const (
	GetMapSrsEnumEpsg3857 GetMapSrsEnum = "EPSG:3857"
	GetMapSrsEnumEpsg4326 GetMapSrsEnum = "EPSG:4326"
)

func (e *GetMapSrsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EPSG:3857":
		fallthrough
	case "EPSG:4326":
		*e = GetMapSrsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMapSrsEnum: %s", s)
	}
}

// GetMapStylesEnum - Map styles to be returned. Currently, no styles are available. This
// parameter is present for forward compatibility; it must be used and
// left blank.
type GetMapStylesEnum string

const (
	GetMapStylesEnumUnknown GetMapStylesEnum = ""
)

func (e *GetMapStylesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		*e = GetMapStylesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMapStylesEnum: %s", s)
	}
}

// GetMapVersionEnum - WMS service version
type GetMapVersionEnum string

const (
	GetMapVersionEnumOne11 GetMapVersionEnum = "1.1.1"
)

func (e *GetMapVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1.1.1":
		*e = GetMapVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMapVersionEnum: %s", s)
	}
}

type GetMapQueryParams struct {
	// Bounding box in the projection stated in <b>srs</b>
	// (minLon,minLat,maxLon,maxLat)
	Bbox string `queryParam:"style=form,explode=true,name=bbox"`
	// Image format to be returned
	Format GetMapFormatEnum `queryParam:"style=form,explode=true,name=format"`
	// Height of the resulting image, in pixels Maximum value is 2048
	Height int64 `queryParam:"style=form,explode=true,name=height"`
	// Map layers requested Currently only the basic layer is available
	Layers GetMapLayersEnum `queryParam:"style=form,explode=true,name=layers"`
	// Request type
	Request GetMapRequestEnum `queryParam:"style=form,explode=true,name=request"`
	// Service type
	Service *GetMapServiceEnum `queryParam:"style=form,explode=true,name=service"`
	// Projection used in describing the <b>bbox</b> EPSG:3857 is
	// recommended, particularly at higher zoom levels. (Note that
	// EPSG:3857 is functionally equivalent to EPSG:900913/EPSG:3785)
	Srs GetMapSrsEnum `queryParam:"style=form,explode=true,name=srs"`
	// Map styles to be returned. Currently, no styles are available. This
	// parameter is present for forward compatibility; it must be used and
	// left blank.
	Styles *GetMapStylesEnum `queryParam:"style=form,explode=true,name=styles"`
	// WMS service version
	Version GetMapVersionEnum `queryParam:"style=form,explode=true,name=version"`
	// Width of the resulting image, in pixels Maximum value is 2048
	Width int64 `queryParam:"style=form,explode=true,name=width"`
}

type GetMapRequest struct {
	PathParams  GetMapPathParams
	QueryParams GetMapQueryParams
}

type GetMapResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
