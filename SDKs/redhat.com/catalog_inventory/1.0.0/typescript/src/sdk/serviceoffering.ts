/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class ServiceOffering {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Invokes computing of ServiceInventories tags for given ServiceOffering
   *
   * @remarks
   * Returns an array of inventories tags
   */
  appliedInventoriesTagsForServiceOffering(
    req: operations.AppliedInventoriesTagsForServiceOfferingRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AppliedInventoriesTagsForServiceOfferingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppliedInventoriesTagsForServiceOfferingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/service_offerings/{id}/applied_inventories_tags",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "appliedInventoriesParametersServicePlan",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppliedInventoriesTagsForServiceOfferingResponse =
        new operations.AppliedInventoriesTagsForServiceOfferingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tags = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tags = utils.objectToClass(
              httpRes?.data,
              shared.Tag,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * List ServiceInstances for ServiceOffering
   *
   * @remarks
   * Returns an array of ServiceInstance objects
   */
  listServiceOfferingServiceInstances(
    req: operations.ListServiceOfferingServiceInstancesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListServiceOfferingServiceInstancesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListServiceOfferingServiceInstancesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/service_offerings/{id}/service_instances",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListServiceOfferingServiceInstancesResponse =
        new operations.ListServiceOfferingServiceInstancesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceInstancesCollection = utils.objectToClass(
              httpRes?.data,
              shared.ServiceInstancesCollection
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorNotFound = utils.objectToClass(
              httpRes?.data,
              shared.ErrorNotFound
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List ServiceOfferingNodes for ServiceOffering
   *
   * @remarks
   * Returns an array of ServiceOfferingNode objects
   */
  listServiceOfferingServiceOfferingNodes(
    req: operations.ListServiceOfferingServiceOfferingNodesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListServiceOfferingServiceOfferingNodesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListServiceOfferingServiceOfferingNodesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/service_offerings/{id}/service_offering_nodes",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListServiceOfferingServiceOfferingNodesResponse =
        new operations.ListServiceOfferingServiceOfferingNodesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceOfferingNodesCollection = utils.objectToClass(
              httpRes?.data,
              shared.ServiceOfferingNodesCollection
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorNotFound = utils.objectToClass(
              httpRes?.data,
              shared.ErrorNotFound
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List ServicePlans for ServiceOffering
   *
   * @remarks
   * Returns an array of ServicePlan objects
   */
  listServiceOfferingServicePlans(
    req: operations.ListServiceOfferingServicePlansRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListServiceOfferingServicePlansResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListServiceOfferingServicePlansRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/service_offerings/{id}/service_plans",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListServiceOfferingServicePlansResponse =
        new operations.ListServiceOfferingServicePlansResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.servicePlansCollection = utils.objectToClass(
              httpRes?.data,
              shared.ServicePlansCollection
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorNotFound = utils.objectToClass(
              httpRes?.data,
              shared.ErrorNotFound
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List ServiceOfferings
   *
   * @remarks
   * Returns an array of ServiceOffering objects
   */
  listServiceOfferings(
    req: operations.ListServiceOfferingsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListServiceOfferingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListServiceOfferingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/service_offerings";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListServiceOfferingsResponse =
        new operations.ListServiceOfferingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceOfferingsCollection = utils.objectToClass(
              httpRes?.data,
              shared.ServiceOfferingsCollection
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Order an existing ServiceOffering
   *
   * @remarks
   * Returns a Task id
   */
  orderServiceOffering(
    req: operations.OrderServiceOfferingRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.OrderServiceOfferingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OrderServiceOfferingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/service_offerings/{id}/order",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "orderParametersServiceOfferingInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OrderServiceOfferingResponse =
        new operations.OrderServiceOfferingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.orderServiceOffering200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.OrderServiceOffering200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show an existing ServiceOffering
   *
   * @remarks
   * Returns a ServiceOffering object
   */
  showServiceOffering(
    req: operations.ShowServiceOfferingRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ShowServiceOfferingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ShowServiceOfferingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/service_offerings/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ShowServiceOfferingResponse =
        new operations.ShowServiceOfferingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceOffering = utils.objectToClass(
              httpRes?.data,
              shared.ServiceOffering
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorNotFound = utils.objectToClass(
              httpRes?.data,
              shared.ErrorNotFound
            );
          }
          break;
      }

      return res;
    });
  }
}
