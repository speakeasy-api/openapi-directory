"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class BackupRuns:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def sql_backup_runs_delete(self, request: operations.SQLBackupRunsDeleteRequest, security: operations.SQLBackupRunsDeleteSecurity) -> operations.SQLBackupRunsDeleteResponse:
        r"""Deletes the backup taken by a backup run."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLBackupRunsDeleteRequest, base_url, '/v1/projects/{project}/instances/{instance}/backupRuns/{id}', request)
        
        query_params = utils.get_query_params(operations.SQLBackupRunsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLBackupRunsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def sql_backup_runs_get(self, request: operations.SQLBackupRunsGetRequest, security: operations.SQLBackupRunsGetSecurity) -> operations.SQLBackupRunsGetResponse:
        r"""Retrieves a resource containing information about a backup run."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLBackupRunsGetRequest, base_url, '/v1/projects/{project}/instances/{instance}/backupRuns/{id}', request)
        
        query_params = utils.get_query_params(operations.SQLBackupRunsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLBackupRunsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BackupRun])
                res.backup_run = out

        return res

    def sql_backup_runs_insert(self, request: operations.SQLBackupRunsInsertRequest, security: operations.SQLBackupRunsInsertSecurity) -> operations.SQLBackupRunsInsertResponse:
        r"""Creates a new backup run on demand."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLBackupRunsInsertRequest, base_url, '/v1/projects/{project}/instances/{instance}/backupRuns', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "backup_run", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SQLBackupRunsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLBackupRunsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def sql_backup_runs_list(self, request: operations.SQLBackupRunsListRequest, security: operations.SQLBackupRunsListSecurity) -> operations.SQLBackupRunsListResponse:
        r"""Lists all backup runs associated with the project or a given instance and configuration in the reverse chronological order of the backup initiation time."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLBackupRunsListRequest, base_url, '/v1/projects/{project}/instances/{instance}/backupRuns', request)
        
        query_params = utils.get_query_params(operations.SQLBackupRunsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLBackupRunsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BackupRunsListResponse])
                res.backup_runs_list_response = out

        return res

    