/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { LegacyTrackingChannelCatalog } from "./legacytrackingchannelcatalog";
import { LegacyTrackingChannelCatalogListLinks } from "./legacytrackingchannelcataloglistlinks";
import { Expose, Transform, Type } from "class-transformer";

/**
 * This is the index of the channel catalog API
 */
export class LegacyTrackingChannelCatalogList extends SpeakeasyBase {
  /**
   * The channel catalog list. The key is the channel catalog identifier
   */
  @SpeakeasyMetadata({ elemType: LegacyTrackingChannelCatalog })
  @Expose({ name: "channelCatalogs" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, LegacyTrackingChannelCatalog> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], LegacyTrackingChannelCatalog);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  channelCatalogs?: Record<string, LegacyTrackingChannelCatalog>;

  /**
   * Indicates how global actions you can do like how to create a channel catalog, exclusion filter operators, etc...
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => LegacyTrackingChannelCatalogListLinks)
  links?: LegacyTrackingChannelCatalogListLinks;
}
