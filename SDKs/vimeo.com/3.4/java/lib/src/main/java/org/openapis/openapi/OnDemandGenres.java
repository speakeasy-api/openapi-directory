/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

public class OnDemandGenres {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public OnDemandGenres(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Add a genre to an On Demand page
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AddVodGenreResponse addVodGenre(org.openapis.openapi.models.operations.AddVodGenreRequest request, org.openapis.openapi.models.operations.AddVodGenreSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AddVodGenreRequest.class, baseUrl, "/ondemand/pages/{ondemand_id}/genres/{genre_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AddVodGenreResponse res = new org.openapis.openapi.models.operations.AddVodGenreResponse() {{
            onDemandGenre = null;
            legacyError = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.vimeo.ondemand.genre+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.OnDemandGenre out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.OnDemandGenre.class);
                res.onDemandGenre = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.vimeo.ondemand.genre+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.LegacyError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.LegacyError.class);
                res.legacyError = out;
            }
        }

        return res;
    }

    /**
     * Remove a genre from an On Demand page
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteVodGenreResponse deleteVodGenre(org.openapis.openapi.models.operations.DeleteVodGenreRequest request, org.openapis.openapi.models.operations.DeleteVodGenreSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteVodGenreRequest.class, baseUrl, "/ondemand/pages/{ondemand_id}/genres/{genre_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteVodGenreResponse res = new org.openapis.openapi.models.operations.DeleteVodGenreResponse() {{
            legacyError = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.vimeo.ondemand.genre+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.LegacyError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.LegacyError.class);
                res.legacyError = out;
            }
        }

        return res;
    }

    /**
     * Get a specific On Demand page in a genre
     * Check whether a genre contains an On Demand page.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetGenreVodResponse getGenreVod(org.openapis.openapi.models.operations.GetGenreVodRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetGenreVodRequest.class, baseUrl, "/ondemand/genres/{genre_id}/pages/{ondemand_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetGenreVodResponse res = new org.openapis.openapi.models.operations.GetGenreVodResponse() {{
            onDemandPage = null;
            legacyError = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.vimeo.ondemand.page+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.OnDemandPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.OnDemandPage.class);
                res.onDemandPage = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.vimeo.ondemand.page+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.LegacyError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.LegacyError.class);
                res.legacyError = out;
            }
        }

        return res;
    }

    /**
     * Get all the On Demand pages in a genre
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetGenreVodsResponse getGenreVods(org.openapis.openapi.models.operations.GetGenreVodsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetGenreVodsRequest.class, baseUrl, "/ondemand/genres/{genre_id}/pages", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetGenreVodsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetGenreVodsResponse res = new org.openapis.openapi.models.operations.GetGenreVodsResponse() {{
            onDemandPages = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.vimeo.ondemand.page+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.OnDemandPage[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.OnDemandPage[].class);
                res.onDemandPages = out;
            }
        }

        return res;
    }

    /**
     * Get a specific On Demand genre
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetVodGenreResponse getVodGenre(org.openapis.openapi.models.operations.GetVodGenreRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetVodGenreRequest.class, baseUrl, "/ondemand/genres/{genre_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetVodGenreResponse res = new org.openapis.openapi.models.operations.GetVodGenreResponse() {{
            onDemandGenre = null;
            legacyError = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.vimeo.ondemand.genre+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.OnDemandGenre out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.OnDemandGenre.class);
                res.onDemandGenre = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.vimeo.ondemand.genre+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.LegacyError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.LegacyError.class);
                res.legacyError = out;
            }
        }

        return res;
    }

    /**
     * Check whether an On Demand page belongs to a genre
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetVodGenreByOndemandIdResponse getVodGenreByOndemandId(org.openapis.openapi.models.operations.GetVodGenreByOndemandIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetVodGenreByOndemandIdRequest.class, baseUrl, "/ondemand/pages/{ondemand_id}/genres/{genre_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetVodGenreByOndemandIdResponse res = new org.openapis.openapi.models.operations.GetVodGenreByOndemandIdResponse() {{
            onDemandGenre = null;
            legacyError = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.vimeo.ondemand.genre+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.OnDemandGenre out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.OnDemandGenre.class);
                res.onDemandGenre = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.vimeo.ondemand.genre+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.LegacyError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.LegacyError.class);
                res.legacyError = out;
            }
        }

        return res;
    }

    /**
     * Get all On Demand genres
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetVodGenresResponse getVodGenres() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/ondemand/genres");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetVodGenresResponse res = new org.openapis.openapi.models.operations.GetVodGenresResponse() {{
            onDemandGenres = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.vimeo.ondemand.genre+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.OnDemandGenre[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.OnDemandGenre[].class);
                res.onDemandGenres = out;
            }
        }

        return res;
    }

    /**
     * Get all the genres of an On Demand page
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetVodGenresByOndemandIdResponse getVodGenresByOndemandId(org.openapis.openapi.models.operations.GetVodGenresByOndemandIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetVodGenresByOndemandIdRequest.class, baseUrl, "/ondemand/pages/{ondemand_id}/genres", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetVodGenresByOndemandIdResponse res = new org.openapis.openapi.models.operations.GetVodGenresByOndemandIdResponse() {{
            onDemandGenres = null;
            legacyError = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.vimeo.ondemand.genre+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.OnDemandGenre[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.OnDemandGenre[].class);
                res.onDemandGenres = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/vnd.vimeo.ondemand.genre+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.LegacyError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.LegacyError.class);
                res.legacyError = out;
            }
        }

        return res;
    }
}