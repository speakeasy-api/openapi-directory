"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import connection as shared_connection
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetBanksIDConnectorConnectionsRequest:
    
    id_connector: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id_connector', 'style': 'simple', 'explode': False }})  
    expand: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'expand', 'style': 'form', 'explode': True }})  
    method: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'method', 'style': 'form', 'explode': True }})
    r"""methode of selection use between 'diversity' (default), 'cover' and 'type_select'"""  
    minutes_without_sync: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'minutes_without_sync', 'style': 'form', 'explode': True }})
    r"""Ensure the connection will not have a sync happening for at"""  
    n: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'n', 'style': 'form', 'explode': True }})
    r"""the number of requested connections, if applicable by the method"""  
    occurences: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'occurences', 'style': 'form', 'explode': True }})
    r"""for 'type_select' method. Each connection requires at least N"""  
    source: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'source', 'style': 'form', 'explode': True }})
    r"""specify a source name that should have a null state"""  
    type: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""for 'type_select' method. Specific account type id (weboob_type_id) to select"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBanksIDConnectorConnections200ApplicationJSON:
    r"""connections"""
    
    connections: list[shared_connection.Connection] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})  
    total: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""total number of results"""  
    

@dataclasses.dataclass
class GetBanksIDConnectorConnectionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_banks_id_connector_connections_200_application_json_object: Optional[GetBanksIDConnectorConnections200ApplicationJSON] = dataclasses.field(default=None)
    r"""connections"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    