<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ExecutionTemplate - The description a notebook execution workload.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ExecutionTemplate
{
    /**
     * Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus) to find a valid combination. TPUs are not supported.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SchedulerAcceleratorConfig $acceleratorConfig
     */
	#[\JMS\Serializer\Annotation\SerializedName('acceleratorConfig')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SchedulerAcceleratorConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SchedulerAcceleratorConfig $acceleratorConfig = null;
    
    /**
     * Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
     * 
     * @var ?string $containerImageUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('containerImageUri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $containerImageUri = null;
    
    /**
     * Parameters used in Dataproc JobType executions.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DataprocParameters $dataprocParameters
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataprocParameters')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DataprocParameters')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DataprocParameters $dataprocParameters = null;
    
    /**
     * Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: `gs://{bucket_name}/{folder}/{notebook_file_name}` Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb`
     * 
     * @var ?string $inputNotebookFile
     */
	#[\JMS\Serializer\Annotation\SerializedName('inputNotebookFile')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $inputNotebookFile = null;
    
    /**
     * The type of Job to be used on this execution.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ExecutionTemplateJobTypeEnum $jobType
     */
	#[\JMS\Serializer\Annotation\SerializedName('jobType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ExecutionTemplateJobTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExecutionTemplateJobTypeEnum $jobType = null;
    
    /**
     * Name of the kernel spec to use. This must be specified if the kernel spec name on the execution target does not match the name in the input notebook file.
     * 
     * @var ?string $kernelSpec
     */
	#[\JMS\Serializer\Annotation\SerializedName('kernelSpec')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $kernelSpec = null;
    
    /**
     * Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
     * 
     * @var ?array<string, string> $labels
     */
	#[\JMS\Serializer\Annotation\SerializedName('labels')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $labels = null;
    
    /**
     * Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU](https://cloud.google.com/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).
     * 
     * @var ?string $masterType
     */
	#[\JMS\Serializer\Annotation\SerializedName('masterType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $masterType = null;
    
    /**
     * Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: `gs://{bucket_name}/{folder}` Ex: `gs://notebook_user/scheduled_notebooks`
     * 
     * @var ?string $outputNotebookFolder
     */
	#[\JMS\Serializer\Annotation\SerializedName('outputNotebookFolder')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $outputNotebookFolder = null;
    
    /**
     * Parameters used within the 'input_notebook_file' notebook.
     * 
     * @var ?string $parameters
     */
	#[\JMS\Serializer\Annotation\SerializedName('parameters')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $parameters = null;
    
    /**
     * Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml`
     * 
     * @var ?string $paramsYamlFile
     */
	#[\JMS\Serializer\Annotation\SerializedName('paramsYamlFile')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $paramsYamlFile = null;
    
    /**
     * Required. Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ExecutionTemplateScaleTierEnum $scaleTier
     */
	#[\JMS\Serializer\Annotation\SerializedName('scaleTier')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ExecutionTemplateScaleTierEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExecutionTemplateScaleTierEnum $scaleTier = null;
    
    /**
     * The email address of a service account to use when running the execution. You must have the `iam.serviceAccounts.actAs` permission for the specified service account.
     * 
     * @var ?string $serviceAccount
     */
	#[\JMS\Serializer\Annotation\SerializedName('serviceAccount')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $serviceAccount = null;
    
    /**
     * The name of a Vertex AI [Tensorboard] resource to which this execution will upload Tensorboard logs. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
     * 
     * @var ?string $tensorboard
     */
	#[\JMS\Serializer\Annotation\SerializedName('tensorboard')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $tensorboard = null;
    
    /**
     * Parameters used in Vertex AI JobType executions.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\VertexAIParameters $vertexAiParameters
     */
	#[\JMS\Serializer\Annotation\SerializedName('vertexAiParameters')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\VertexAIParameters')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VertexAIParameters $vertexAiParameters = null;
    
	public function __construct()
	{
		$this->acceleratorConfig = null;
		$this->containerImageUri = null;
		$this->dataprocParameters = null;
		$this->inputNotebookFile = null;
		$this->jobType = null;
		$this->kernelSpec = null;
		$this->labels = null;
		$this->masterType = null;
		$this->outputNotebookFolder = null;
		$this->parameters = null;
		$this->paramsYamlFile = null;
		$this->scaleTier = null;
		$this->serviceAccount = null;
		$this->tensorboard = null;
		$this->vertexAiParameters = null;
	}
}
