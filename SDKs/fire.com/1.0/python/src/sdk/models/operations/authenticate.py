"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class AuthenticateAuthenticationGrantTypeEnum(str, Enum):
    r"""Always `AccessToken`. (This will change to `refresh_token` in a future release.)"""
    ACCESS_TOKEN = 'AccessToken'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AuthenticateAuthentication:
    r"""Authentication data"""
    
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})
    r"""The Client ID for this API Application"""  
    client_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientSecret'), 'exclude': lambda f: f is None }})
    r"""The SHA256 hash of the nonce above and the app’s Client Key. The Client Key will only be shown to you when you create the app, so don’t forget to save it somewhere safe. SECRET=( `/bin/echo -n $NONCE$CLIENT_KEY | sha256sum` )."""  
    grant_type: Optional[AuthenticateAuthenticationGrantTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grantType'), 'exclude': lambda f: f is None }})
    r"""Always `AccessToken`. (This will change to `refresh_token` in a future release.)"""  
    nonce: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonce'), 'exclude': lambda f: f is None }})
    r"""A random non-repeating number used as a salt for the `clientSecret` below. The simplest nonce is a unix time."""  
    refresh_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refreshToken'), 'exclude': lambda f: f is None }})
    r"""The Refresh Token for this API Application"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AuthenticateAccessToken:
    r"""Successfully authenticated"""
    
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessToken'), 'exclude': lambda f: f is None }})
    r"""The App Bearer Access Token you can use in further API calls."""  
    api_application_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiApplicationId'), 'exclude': lambda f: f is None }})
    r"""The ID of the application you are using."""  
    business_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessId'), 'exclude': lambda f: f is None }})
    r"""The business ID for the business."""  
    expiry: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiry'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The expiry date and time for this token (ISO-8601)."""  
    permissions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})
    r"""The permissions assigned to the Access Token as an array of strings. This provides information on what API access it is allowed. See the section on Scope below."""  
    

@dataclasses.dataclass
class AuthenticateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_token: Optional[AuthenticateAccessToken] = dataclasses.field(default=None)
    r"""Successfully authenticated"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    