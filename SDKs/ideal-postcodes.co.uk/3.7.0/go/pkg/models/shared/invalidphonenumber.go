// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InvalidPhoneNumberCountryEnum - Full country name
type InvalidPhoneNumberCountryEnum string

const (
	InvalidPhoneNumberCountryEnumNull InvalidPhoneNumberCountryEnum = "null"
)

func (e *InvalidPhoneNumberCountryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "null":
		*e = InvalidPhoneNumberCountryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvalidPhoneNumberCountryEnum: %s", s)
	}
}

// InvalidPhoneNumberCurrentCarrierEnum - Representation of current phone carrier information like network code, name, country, network type
type InvalidPhoneNumberCurrentCarrierEnum string

const (
	InvalidPhoneNumberCurrentCarrierEnumNull InvalidPhoneNumberCurrentCarrierEnum = "null"
)

func (e *InvalidPhoneNumberCurrentCarrierEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "null":
		*e = InvalidPhoneNumberCurrentCarrierEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvalidPhoneNumberCurrentCarrierEnum: %s", s)
	}
}

// InvalidPhoneNumberInternationalFormatEnum - Phone number formatted to international standard
type InvalidPhoneNumberInternationalFormatEnum string

const (
	InvalidPhoneNumberInternationalFormatEnumNull InvalidPhoneNumberInternationalFormatEnum = "null"
)

func (e *InvalidPhoneNumberInternationalFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "null":
		*e = InvalidPhoneNumberInternationalFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvalidPhoneNumberInternationalFormatEnum: %s", s)
	}
}

// InvalidPhoneNumberIsoCountryEnum - Country code in 3 letter ISO format
type InvalidPhoneNumberIsoCountryEnum string

const (
	InvalidPhoneNumberIsoCountryEnumNull InvalidPhoneNumberIsoCountryEnum = "null"
)

func (e *InvalidPhoneNumberIsoCountryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "null":
		*e = InvalidPhoneNumberIsoCountryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvalidPhoneNumberIsoCountryEnum: %s", s)
	}
}

// InvalidPhoneNumberIsoCountry2Enum - Country code in 2 letter ISO format
type InvalidPhoneNumberIsoCountry2Enum string

const (
	InvalidPhoneNumberIsoCountry2EnumNull InvalidPhoneNumberIsoCountry2Enum = "null"
)

func (e *InvalidPhoneNumberIsoCountry2Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "null":
		*e = InvalidPhoneNumberIsoCountry2Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvalidPhoneNumberIsoCountry2Enum: %s", s)
	}
}

// InvalidPhoneNumberNationalFormatEnum - Phone number formatted to local standard
type InvalidPhoneNumberNationalFormatEnum string

const (
	InvalidPhoneNumberNationalFormatEnumNull InvalidPhoneNumberNationalFormatEnum = "null"
)

func (e *InvalidPhoneNumberNationalFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "null":
		*e = InvalidPhoneNumberNationalFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvalidPhoneNumberNationalFormatEnum: %s", s)
	}
}

// InvalidPhoneNumberOriginalCarrierEnum - Representation of original phone carrier information like network code, name, country, network type
type InvalidPhoneNumberOriginalCarrierEnum string

const (
	InvalidPhoneNumberOriginalCarrierEnumNull InvalidPhoneNumberOriginalCarrierEnum = "null"
)

func (e *InvalidPhoneNumberOriginalCarrierEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "null":
		*e = InvalidPhoneNumberOriginalCarrierEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvalidPhoneNumberOriginalCarrierEnum: %s", s)
	}
}

type InvalidPhoneNumberValidEnum string

const (
	InvalidPhoneNumberValidEnumFalse InvalidPhoneNumberValidEnum = "false"
)

func (e *InvalidPhoneNumberValidEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		*e = InvalidPhoneNumberValidEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InvalidPhoneNumberValidEnum: %s", s)
	}
}

type InvalidPhoneNumber struct {
	// Full country name
	Country InvalidPhoneNumberCountryEnum `json:"country"`
	// Representation of current phone carrier information like network code, name, country, network type
	CurrentCarrier *InvalidPhoneNumberCurrentCarrierEnum `json:"current_carrier,omitempty"`
	// Phone number formatted to international standard
	InternationalFormat InvalidPhoneNumberInternationalFormatEnum `json:"international_format"`
	// Country code in 3 letter ISO format
	IsoCountry InvalidPhoneNumberIsoCountryEnum `json:"iso_country"`
	// Country code in 2 letter ISO format
	IsoCountry2 InvalidPhoneNumberIsoCountry2Enum `json:"iso_country_2"`
	// Phone number formatted to local standard
	NationalFormat InvalidPhoneNumberNationalFormatEnum `json:"national_format"`
	// Representation of original phone carrier information like network code, name, country, network type
	OriginalCarrier *InvalidPhoneNumberOriginalCarrierEnum `json:"original_carrier,omitempty"`
	Valid           InvalidPhoneNumberValidEnum            `json:"valid"`
}
