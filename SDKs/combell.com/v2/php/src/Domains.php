<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Domains 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Edit domain name renew state
     * 
     * Allowed if can_toggle_renew is true on the domain detail:<br /><ul><li>If there are no unpaid invoices for the domain name anymore.</li><li>If the renewal won't start within 1 month.</li></ul>
     * Allowed if the requesting user has the finance role.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfigureDomainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfigureDomainResponse
     */
	public function configureDomain(
        \OpenAPI\OpenAPI\Models\Operations\ConfigureDomainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfigureDomainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/{domainName}/renew', \OpenAPI\OpenAPI\Models\Operations\ConfigureDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "editDomainWillRenewRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConfigureDomainRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfigureDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Edit domain name servers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditNameServersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EditNameServersResponse
     */
	public function editNameServers(
        \OpenAPI\OpenAPI\Models\Operations\EditNameServersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EditNameServersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/{domainName}/nameservers', \OpenAPI\OpenAPI\Models\Operations\EditNameServersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "editNameServers", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EditNameServersRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditNameServersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Details of a domain
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDomainResponse
     */
	public function getDomain(
        \OpenAPI\OpenAPI\Models\Operations\GetDomainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDomainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/{domainName}', \OpenAPI\OpenAPI\Models\Operations\GetDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDomainRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->domainDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DomainDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Overviews of domains
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomainsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDomainsResponse
     */
	public function getDomains(
        \OpenAPI\OpenAPI\Models\Operations\GetDomainsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDomainsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDomainsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDomainsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->domains = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Domain>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Register a domain
     * 
     * Registers an available domain.<br />Domain names with extension '.ca' are only available for registrants with country code 'CA'.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RegisterDomain $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RegisterResponse
     */
	public function register(
        \OpenAPI\OpenAPI\Models\Shared\RegisterDomain $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RegisterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/registrations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RegisterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }

        return $response;
    }
	
    /**
     * Transfer a domain
     * 
     * Transfers a domain with a transfer authorization code.<br />Domain names with extension '.ca' are only available for registrants with country code 'CA'.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\TransferDomain $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TransferResponse
     */
	public function transfer(
        \OpenAPI\OpenAPI\Models\Shared\TransferDomain $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TransferResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domains/transfers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TransferResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }

        return $response;
    }
}