/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class ProductSearchFilteredandOrderedQueryParams {
    /**
     * Sorting method. It can be by Price (`O=OrderByPriceDESC` or `O=OrderByPriceASC`), by Top Selling Products (`O=OrderByTopSaleDESC`), by Best Reviews (`O=OrderByReviewRateDESC`), by Name (`O=OrderByNameASC` or `O=OrderByNameDESC`), by Release Date (`O=OrderByReleaseDateDESC`), by Best Discounts (`O=OrderByBestDiscountDESC`), by Score (`O=OrderByScoreDESC`)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=O")
    public String o;
    public ProductSearchFilteredandOrderedQueryParams withO(String o) {
        this.o = o;
        return this;
    }
    
    /**
     * Starter page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=_from")
    public String from;
    public ProductSearchFilteredandOrderedQueryParams withFrom(String from) {
        this.from = from;
        return this;
    }
    
    /**
     * Finisher page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=_to")
    public String to;
    public ProductSearchFilteredandOrderedQueryParams withTo(String to) {
        this.to = to;
        return this;
    }
    
    /**
     * General filter. It can be by category (`fq=C:/{a}/{b}`), by specification (`fq=specificationFilter_{a}:{b}`),  by price range (`fq=P:[{a} TO {b}]`), by collection (`fq=productClusterIds:{{productClusterId}}`), by product ID (`fq=productId:{{productId}}`),  by SKU ID (`fq=skuId:{{skuId}}`), by Reference ID (`fq=alternateIds_RefId:{{referenceId}}`), by EAN13 (`fq=alternateIds_Ean:{{ean13}}`), by availability at a specific sales channel (`fq=isAvailablePerSalesChannel_{{sc}}:{{bool}}`), by available at a specific seller (`fq=sellerId:{{sellerId}}`)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fq")
    public String fq;
    public ProductSearchFilteredandOrderedQueryParams withFq(String fq) {
        this.fq = fq;
        return this;
    }
    
    /**
     * Filter by full text. The form is`ft={searchWord}`
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ft")
    public String ft;
    public ProductSearchFilteredandOrderedQueryParams withFt(String ft) {
        this.ft = ft;
        return this;
    }
    
}
