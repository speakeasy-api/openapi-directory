<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class DataFlow 
{
	
	public const POST_V05_HEALTH_INFORMATION_HIU_ON_REQUEST_JSON_SERVERS = [
		'https://dev.ndhm.gov.in/hiu',
	];
	
	public const POST_V05_HEALTH_INFORMATION_HIU_ON_REQUEST_RAW_SERVERS = [
		'https://dev.ndhm.gov.in/hiu',
	];
	
	public const POST_V05_HEALTH_INFORMATION_TRANSFER_JSON_SERVERS = [
		'https://dev.ndhm.gov.in/hiu',
	];
	
	public const POST_V05_HEALTH_INFORMATION_TRANSFER_RAW_SERVERS = [
		'https://dev.ndhm.gov.in/hiu',
	];

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Health information data request
     * 
     * Callback API for acknowledgement of Health information request made by HIU. Gateway calls this API when request has validated for the specified  consent id. Either the **hiRequest** or **error** would be specified. If the health info request was valid, then the ***hiRequest.transactionId*** specifies the transaction context against which HIP would send over the data.  Possible cases of errors are
     *   1. **Invalid consent artefact id**
     *   2. **Consent has expired**
     *   3. **Date ranges are invalid**
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationHiuOnRequestJsonRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationHiuOnRequestJsonResponse
     */
	public function postV05HealthInformationHiuOnRequestJson(
        \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationHiuOnRequestJsonRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationHiuOnRequestJsonResponse
    {
        $baseUrl = DataFlow::POST_V05_HEALTH_INFORMATION_HIU_ON_REQUEST_JSON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/health-information/hiu/on-request');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "hiuHealthInformationRequestResponse", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationHiuOnRequestJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Health information data request
     * 
     * Callback API for acknowledgement of Health information request made by HIU. Gateway calls this API when request has validated for the specified  consent id. Either the **hiRequest** or **error** would be specified. If the health info request was valid, then the ***hiRequest.transactionId*** specifies the transaction context against which HIP would send over the data.  Possible cases of errors are
     *   1. **Invalid consent artefact id**
     *   2. **Consent has expired**
     *   3. **Date ranges are invalid**
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationHiuOnRequestRawRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationHiuOnRequestRawResponse
     */
	public function postV05HealthInformationHiuOnRequestRaw(
        \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationHiuOnRequestRawRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationHiuOnRequestRawResponse
    {
        $baseUrl = DataFlow::POST_V05_HEALTH_INFORMATION_HIU_ON_REQUEST_RAW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/health-information/hiu/on-request');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationHiuOnRequestRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * health information transfer API
     * 
     * **NOTE**: This API is actually the callback URL that is passed as **dataPushUrl** in the data request API - /v0.5/health-information/hip/request. This API is directly called by HIP Data Bridge and is not mediated via CM, and hence not routed through the Gateway. 
     *   1. This API should be implemented at HIU side. It maybe implemented by the Data Bridge representing the HIU. 
     *   2. Entry elements maybe ***content*** or ***link***, although for version 1, entry ***content*** is preferred. 
     *   3. Entry ***content*** (or even link reference content) must be encrypted by means of Elliptic-curve Diffieâ€“Hellman Key Exchange, utilizing the HIU keymaterials that are passed through the data request API - /v0.5/health-information/hip/request. 
     *   4. Media contains the mimetype of content, and for v1, it is "application/fhir+json"
     *   5. checksum is Md5 checksum of the data conent, before encryption
     *   6. Please refer to the NDHM Sandbox documentation for the format of FHIR bundle that is passed through content 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationTransferJsonRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationTransferJsonResponse
     */
	public function postV05HealthInformationTransferJson(
        \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationTransferJsonRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationTransferJsonResponse
    {
        $baseUrl = DataFlow::POST_V05_HEALTH_INFORMATION_TRANSFER_JSON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/health-information/transfer');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "dataNotification", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationTransferJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * health information transfer API
     * 
     * **NOTE**: This API is actually the callback URL that is passed as **dataPushUrl** in the data request API - /v0.5/health-information/hip/request. This API is directly called by HIP Data Bridge and is not mediated via CM, and hence not routed through the Gateway. 
     *   1. This API should be implemented at HIU side. It maybe implemented by the Data Bridge representing the HIU. 
     *   2. Entry elements maybe ***content*** or ***link***, although for version 1, entry ***content*** is preferred. 
     *   3. Entry ***content*** (or even link reference content) must be encrypted by means of Elliptic-curve Diffieâ€“Hellman Key Exchange, utilizing the HIU keymaterials that are passed through the data request API - /v0.5/health-information/hip/request. 
     *   4. Media contains the mimetype of content, and for v1, it is "application/fhir+json"
     *   5. checksum is Md5 checksum of the data conent, before encryption
     *   6. Please refer to the NDHM Sandbox documentation for the format of FHIR bundle that is passed through content 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationTransferRawRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationTransferRawResponse
     */
	public function postV05HealthInformationTransferRaw(
        \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationTransferRawRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationTransferRawResponse
    {
        $baseUrl = DataFlow::POST_V05_HEALTH_INFORMATION_TRANSFER_RAW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/health-information/transfer');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05HealthInformationTransferRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}