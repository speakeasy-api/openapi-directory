"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeviceSwitchRoutingInterfaceRequestBodyIpv6:
    r"""The IPv6 settings of the interface."""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""The IPv6 address of the interface. Required if assignmentMode is 'static'. Must not be included if           assignmentMode is 'eui-64'."""  
    assignment_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignmentMode'), 'exclude': lambda f: f is None }})
    r"""The IPv6 assignment mode for the interface. Can be either 'eui-64' or 'static'."""  
    gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway'), 'exclude': lambda f: f is None }})
    r"""The IPv6 default gateway of the interface. Required if prefix is defined and this is the first           interface with IPv6 configured for the switch."""  
    prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefix'), 'exclude': lambda f: f is None }})
    r"""The IPv6 prefix of the interface. Required if IPv6 object is included."""  
    
class CreateDeviceSwitchRoutingInterfaceRequestBodyMulticastRoutingEnum(str, Enum):
    r"""Enable multicast support if, multicast routing between VLANs is required. Options are:         'disabled', 'enabled' or 'IGMP snooping querier'. Default is 'disabled'."""
    IGMP_SNOOPING_QUERIER = 'IGMP snooping querier'
    DISABLED = 'disabled'
    ENABLED = 'enabled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeviceSwitchRoutingInterfaceRequestBodyOspfSettings:
    r"""The OSPF routing settings of the interface."""
    
    area: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('area'), 'exclude': lambda f: f is None }})
    r"""The OSPF area to which this interface should belong. Can be either 'disabled' or the identifier of an           existing OSPF area. Defaults to 'disabled'."""  
    cost: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cost'), 'exclude': lambda f: f is None }})
    r"""The path cost for this interface. Defaults to 1, but can be increased up to 65535           to give lower priority."""  
    is_passive_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPassiveEnabled'), 'exclude': lambda f: f is None }})
    r"""When enabled, OSPF will not run on the interface, but the subnet will still be advertised."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeviceSwitchRoutingInterfaceRequestBodyOspfV3:
    r"""The OSPFv3 routing settings of the interface."""
    
    area: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('area'), 'exclude': lambda f: f is None }})
    r"""The OSPFv3 area to which this interface should belong. Can be either 'disabled' or the identifier of an           existing OSPFv3 area. Defaults to 'disabled'."""  
    cost: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cost'), 'exclude': lambda f: f is None }})
    r"""The path cost for this interface. Defaults to 1, but can be increased up to 65535           to give lower priority."""  
    is_passive_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPassiveEnabled'), 'exclude': lambda f: f is None }})
    r"""When enabled, OSPFv3 will not run on the interface, but the subnet will still be advertised."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeviceSwitchRoutingInterfaceRequestBody:
    
    default_gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultGateway'), 'exclude': lambda f: f is None }})
    r"""The next hop for any traffic that isn't going to a directly connected subnet or over a static route.         This IP address must exist in a subnet with a routed interface. Required if this is the first IPv4 interface."""  
    interface_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interfaceIp'), 'exclude': lambda f: f is None }})
    r"""The IP address this switch will use for layer 3 routing on this VLAN or subnet. This cannot be the same         as the switch's management IP."""  
    ipv6: Optional[CreateDeviceSwitchRoutingInterfaceRequestBodyIpv6] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv6'), 'exclude': lambda f: f is None }})
    r"""The IPv6 settings of the interface."""  
    multicast_routing: Optional[CreateDeviceSwitchRoutingInterfaceRequestBodyMulticastRoutingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multicastRouting'), 'exclude': lambda f: f is None }})
    r"""Enable multicast support if, multicast routing between VLANs is required. Options are:         'disabled', 'enabled' or 'IGMP snooping querier'. Default is 'disabled'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A friendly name or description for the interface or VLAN."""  
    ospf_settings: Optional[CreateDeviceSwitchRoutingInterfaceRequestBodyOspfSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ospfSettings'), 'exclude': lambda f: f is None }})
    r"""The OSPF routing settings of the interface."""  
    ospf_v3: Optional[CreateDeviceSwitchRoutingInterfaceRequestBodyOspfV3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ospfV3'), 'exclude': lambda f: f is None }})
    r"""The OSPFv3 routing settings of the interface."""  
    subnet: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnet'), 'exclude': lambda f: f is None }})
    r"""The network that this routed interface is on, in CIDR notation (ex. 10.1.1.0/24)."""  
    vlan_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlanId'), 'exclude': lambda f: f is None }})
    r"""The VLAN this routed interface is on. VLAN must be between 1 and 4094."""  
    

@dataclasses.dataclass
class CreateDeviceSwitchRoutingInterfaceRequest:
    
    serial: str = dataclasses.field(metadata={'path_param': { 'field_name': 'serial', 'style': 'simple', 'explode': False }})  
    request_body: Optional[CreateDeviceSwitchRoutingInterfaceRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeviceSwitchRoutingInterface201ApplicationJSONIpv6:
    r"""IPv6 addressing"""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""IPv6 address"""  
    assignment_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignmentMode'), 'exclude': lambda f: f is None }})
    r"""Assignment mode"""  
    gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway'), 'exclude': lambda f: f is None }})
    r"""IPv6 gateway"""  
    prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefix'), 'exclude': lambda f: f is None }})
    r"""IPv6 subnet"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeviceSwitchRoutingInterface201ApplicationJSONOspfSettings:
    r"""IPv4 OSPF Settings"""
    
    area: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('area'), 'exclude': lambda f: f is None }})
    r"""Area id"""  
    cost: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cost'), 'exclude': lambda f: f is None }})
    r"""OSPF Cost"""  
    is_passive_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPassiveEnabled'), 'exclude': lambda f: f is None }})
    r"""Disable sending Hello packets on this interface's IPv4 area"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeviceSwitchRoutingInterface201ApplicationJSONOspfV3:
    r"""IPv6 OSPF Settings"""
    
    area: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('area'), 'exclude': lambda f: f is None }})
    r"""Area id"""  
    cost: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cost'), 'exclude': lambda f: f is None }})
    r"""OSPF Cost"""  
    is_passive_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPassiveEnabled'), 'exclude': lambda f: f is None }})
    r"""Disable sending Hello packets on this interface's IPv6 area"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeviceSwitchRoutingInterface201ApplicationJSON:
    r"""Successful operation"""
    
    default_gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultGateway'), 'exclude': lambda f: f is None }})
    r"""IPv4 default gateway"""  
    interface_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interfaceId'), 'exclude': lambda f: f is None }})
    r"""The id"""  
    interface_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interfaceIp'), 'exclude': lambda f: f is None }})
    r"""IPv4 address"""  
    ipv6: Optional[CreateDeviceSwitchRoutingInterface201ApplicationJSONIpv6] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv6'), 'exclude': lambda f: f is None }})
    r"""IPv6 addressing"""  
    multicast_routing: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multicastRouting'), 'exclude': lambda f: f is None }})
    r"""Multicast routing status"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name"""  
    ospf_settings: Optional[CreateDeviceSwitchRoutingInterface201ApplicationJSONOspfSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ospfSettings'), 'exclude': lambda f: f is None }})
    r"""IPv4 OSPF Settings"""  
    ospf_v3: Optional[CreateDeviceSwitchRoutingInterface201ApplicationJSONOspfV3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ospfV3'), 'exclude': lambda f: f is None }})
    r"""IPv6 OSPF Settings"""  
    subnet: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnet'), 'exclude': lambda f: f is None }})
    r"""IPv4 subnet"""  
    vlan_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlanId'), 'exclude': lambda f: f is None }})
    r"""VLAN id"""  
    

@dataclasses.dataclass
class CreateDeviceSwitchRoutingInterfaceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_device_switch_routing_interface_201_application_json_object: Optional[CreateDeviceSwitchRoutingInterface201ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    