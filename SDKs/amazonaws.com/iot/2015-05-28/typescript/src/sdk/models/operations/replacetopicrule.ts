/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Describes a rule.
 */
export class ReplaceTopicRuleRequestBodyTopicRulePayload extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.Action })
  @Expose({ name: "actions" })
  @Type(() => shared.Action)
  actions?: shared.Action[];

  @SpeakeasyMetadata()
  @Expose({ name: "awsIotSqlVersion" })
  awsIotSqlVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "errorAction" })
  @Type(() => shared.Action)
  errorAction?: shared.Action;

  @SpeakeasyMetadata()
  @Expose({ name: "ruleDisabled" })
  ruleDisabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "sql" })
  sql?: string;
}

export class ReplaceTopicRuleRequestBody extends SpeakeasyBase {
  /**
   * Describes a rule.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "topicRulePayload" })
  @Type(() => ReplaceTopicRuleRequestBodyTopicRulePayload)
  topicRulePayload: ReplaceTopicRuleRequestBodyTopicRulePayload;
}

export class ReplaceTopicRuleRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ReplaceTopicRuleRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The name of the rule.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ruleName",
  })
  ruleName: string;
}

export class ReplaceTopicRuleResponse extends SpeakeasyBase {
  /**
   * ConflictingResourceUpdateException
   */
  @SpeakeasyMetadata()
  conflictingResourceUpdateException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalException
   */
  @SpeakeasyMetadata()
  internalException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;

  /**
   * SqlParseException
   */
  @SpeakeasyMetadata()
  sqlParseException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * UnauthorizedException
   */
  @SpeakeasyMetadata()
  unauthorizedException?: any;
}
