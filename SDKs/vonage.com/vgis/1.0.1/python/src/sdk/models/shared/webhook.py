"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class WebhookEventsEnum(str, Enum):
    CALL = 'CALL'

class WebhookMetadataPolicyEnum(str, Enum):
    r"""Metadata policy for the webhook"""
    NONE = 'NONE'
    HEADER = 'HEADER'
    BODY = 'BODY'

class WebhookSigningAlgoEnum(str, Enum):
    r"""Signing algorithm for the webhook"""
    HMAC_SHA256 = 'HMAC_SHA256'
    NONE = 'NONE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebhookStatistics:
    
    failed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failed'), 'exclude': lambda f: f is None }})
    r"""Current delivery status"""  
    total_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalAttempts'), 'exclude': lambda f: f is None }})
    r"""Total delivery attempts"""  
    total_failures: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalFailures'), 'exclude': lambda f: f is None }})
    r"""Total failed deliveries"""  
    total_successes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalSuccesses'), 'exclude': lambda f: f is None }})
    r"""Total successful deliveries"""  
    
class WebhookStatusEnum(str, Enum):
    r"""Status for the webhook"""
    ACTIVE = 'ACTIVE'
    PAUSED = 'PAUSED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Webhook:
    r"""Successful"""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the account"""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'exclude': lambda f: f is None }})
    r"""Created time for the webhook"""  
    events: Optional[list[WebhookEventsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events'), 'exclude': lambda f: f is None }})
    r"""Subscribed events for the webhook"""  
    expire_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expireAt'), 'exclude': lambda f: f is None }})
    r"""Expiration time for the webhook"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the webhook"""  
    metadata_policy: Optional[WebhookMetadataPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadataPolicy'), 'exclude': lambda f: f is None }})
    r"""Metadata policy for the webhook"""  
    purge_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purgeAt'), 'exclude': lambda f: f is None }})
    r"""Scheduled purge time for the webhook"""  
    renewed_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewedAt'), 'exclude': lambda f: f is None }})
    r"""Last renewed time for the webhook"""  
    signing_algo: Optional[WebhookSigningAlgoEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signingAlgo'), 'exclude': lambda f: f is None }})
    r"""Signing algorithm for the webhook"""  
    signing_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signingKey'), 'exclude': lambda f: f is None }})
    r"""Signing key for the webhook"""  
    statistics: Optional[WebhookStatistics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statistics'), 'exclude': lambda f: f is None }})  
    status: Optional[WebhookStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status for the webhook"""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Destination URL for events"""  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the user"""  
    