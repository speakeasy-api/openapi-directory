"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class StatusConditionCanonicalCodeEnum(str, Enum):
    r"""Canonical code of the condition."""
    OK = 'OK'
    CANCELLED = 'CANCELLED'
    UNKNOWN = 'UNKNOWN'
    INVALID_ARGUMENT = 'INVALID_ARGUMENT'
    DEADLINE_EXCEEDED = 'DEADLINE_EXCEEDED'
    NOT_FOUND = 'NOT_FOUND'
    ALREADY_EXISTS = 'ALREADY_EXISTS'
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    UNAUTHENTICATED = 'UNAUTHENTICATED'
    RESOURCE_EXHAUSTED = 'RESOURCE_EXHAUSTED'
    FAILED_PRECONDITION = 'FAILED_PRECONDITION'
    ABORTED = 'ABORTED'
    OUT_OF_RANGE = 'OUT_OF_RANGE'
    UNIMPLEMENTED = 'UNIMPLEMENTED'
    INTERNAL = 'INTERNAL'
    UNAVAILABLE = 'UNAVAILABLE'
    DATA_LOSS = 'DATA_LOSS'

class StatusConditionCodeEnum(str, Enum):
    r"""Machine-friendly representation of the condition Deprecated. Use canonical_code instead."""
    UNKNOWN = 'UNKNOWN'
    GCE_STOCKOUT = 'GCE_STOCKOUT'
    GKE_SERVICE_ACCOUNT_DELETED = 'GKE_SERVICE_ACCOUNT_DELETED'
    GCE_QUOTA_EXCEEDED = 'GCE_QUOTA_EXCEEDED'
    SET_BY_OPERATOR = 'SET_BY_OPERATOR'
    CLOUD_KMS_KEY_ERROR = 'CLOUD_KMS_KEY_ERROR'
    CA_EXPIRING = 'CA_EXPIRING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StatusCondition:
    r"""StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."""
    
    canonical_code: Optional[StatusConditionCanonicalCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canonicalCode'), 'exclude': lambda f: f is None }})
    r"""Canonical code of the condition."""  
    code: Optional[StatusConditionCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Machine-friendly representation of the condition Deprecated. Use canonical_code instead."""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""Human-friendly representation of the condition"""  
    