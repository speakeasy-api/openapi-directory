/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Allotment - An allotment of credits as part of a subscription
 */
public class Allotment {
    /**
     * Number of credits remaining in the subscription
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downloads_left")
    public Long downloadsLeft;
    public Allotment withDownloadsLeft(Long downloadsLeft) {
        this.downloadsLeft = downloadsLeft;
        return this;
    }
    
    /**
     * Total number of credits available to this subscription
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downloads_limit")
    public Long downloadsLimit;
    public Allotment withDownloadsLimit(Long downloadsLimit) {
        this.downloadsLimit = downloadsLimit;
        return this;
    }
    
    /**
     * Date the subscription ends
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("end_time")
    public OffsetDateTime endTime;
    public Allotment withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * Date the subscription started
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start_time")
    public OffsetDateTime startTime;
    public Allotment withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
}
