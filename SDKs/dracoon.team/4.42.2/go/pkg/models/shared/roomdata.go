// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// RoomDataTypeEnum - Node type
type RoomDataTypeEnum string

const (
	RoomDataTypeEnumRoom RoomDataTypeEnum = "room"
)

func (e *RoomDataTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "room":
		*e = RoomDataTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RoomDataTypeEnum: %s", s)
	}
}

// RoomData - Room information
type RoomData struct {
	// &#128679; Deprecated since v4.10.0
	//
	// List of rooms, where this room is a parent (if exist)
	Children []RoomData `json:"children,omitempty"`
	// Returns the number of Download Shares of this node.
	CntDownloadShares *int `json:"cntDownloadShares,omitempty"`
	// Returns the number of Upload Shares of this node.
	CntUploadShares *int `json:"cntUploadShares,omitempty"`
	// Expiration date
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// User information
	CreatedBy *UserInfo `json:"createdBy,omitempty"`
	// &#128679; Deprecated since v4.10.0
	//
	// Is recycle bin active (for rooms only)
	//
	// Recycle bin is always on (disabling is not possible).
	HasRecycleBin bool `json:"hasRecycleBin"`
	// Room ID
	ID int64 `json:"id"`
	// Encryption state
	IsEncrypted bool `json:"isEncrypted"`
	// Node is marked as favorite (for rooms / folders only)
	IsFavorite *bool `json:"isFavorite,omitempty"`
	// Is user granted room permissions
	IsGranted bool `json:"isGranted"`
	// Name
	Name string `json:"name"`
	// Parent node ID (room or folder)
	ParentID *int64 `json:"parentId,omitempty"`
	// Node permissions
	Permissions *NodePermissions `json:"permissions,omitempty"`
	// Quota in byte
	Quota *int64 `json:"quota,omitempty"`
	// Retention period for deleted nodes in days
	RecycleBinRetentionPeriod int `json:"recycleBinRetentionPeriod"`
	// Room size
	Size *int64 `json:"size,omitempty"`
	// Node type
	Type *RoomDataTypeEnum `json:"type,omitempty"`
	// Modification date
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// User information
	UpdatedBy *UserInfo `json:"updatedBy,omitempty"`
}
