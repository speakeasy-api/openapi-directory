/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class UpdatePostRequestBody {
    /**
     * A longer description of the item(s).
     */
    @SpeakeasyMetadata("multipartForm:name=content")
    public String content;
    public UpdatePostRequestBody withContent(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * When the post should expire.   Any amount of time from 1 hour to 90 days can be provided.  To pass a number of hours, provide the number of hours prefixed by 'h' (eg. 1hr 24hr). To pass a number of days, provide the number of days prefixed by 'd' (eg. 1d 90d). &lt;br /&gt;&lt;br /&gt; Note that updates may not appear instantly after submission because the volunteer moderators of many groups may have additional automatic or manual review processes in place that can cause delays.  So with short expirations (eg. &lt; 8 hours), there is a chance that the post may expire before the update is approved and so it will never be published.
     * &lt;br&gt;&lt;br&gt; NOTE: The max expiration for a post is 90 days after the post is published.  So updates to posts that try to set an longer expiration will be silently changed to just apply the max expiration.
     * 
     */
    @SpeakeasyMetadata("multipartForm:name=expires_in")
    public String expiresIn;
    public UpdatePostRequestBody withExpiresIn(String expiresIn) {
        this.expiresIn = expiresIn;
        return this;
    }
    
    /**
     * If set to 1, the post will be posted with the Fair Offer Policy (only valid for offer posts - see https://trashnothing.com/fair_offer_policy ).
     */
    @SpeakeasyMetadata("multipartForm:name=fair_offer")
    public Long fairOffer;
    public UpdatePostRequestBody withFairOffer(Long fairOffer) {
        this.fairOffer = fairOffer;
        return this;
    }
    
    /**
     * The latitude corresponding to the location description provided. &lt;br /&gt;&lt;br /&gt; If latitude and longitude are not provided, an attempt will be made to automatically geocode the location.  If the location is unable to be geocoded, the post will be rejected* and will have to be resubmitted with a latitude and longitude corresponding to the location or resubmitted with a different location that can be automatically geocoded. &lt;br /&gt;&lt;br /&gt; NOTE: The latitude and longitude should NOT be the users' exact location because we don't want to publicize their exact location unless their location description is their full address (which is not recommended). &lt;br /&gt;&lt;br /&gt; *When a post is rejected because it can't be geocoded, the returned error will have its identifier property set to 'unknown-location'.
     * 
     */
    @SpeakeasyMetadata("multipartForm:name=latitude")
    public Double latitude;
    public UpdatePostRequestBody withLatitude(Double latitude) {
        this.latitude = latitude;
        return this;
    }
    
    /**
     * A short location description.
     */
    @SpeakeasyMetadata("multipartForm:name=location")
    public String location;
    public UpdatePostRequestBody withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * The longitude corresponding to the location description provided. (see the NOTE in latitude description)
     */
    @SpeakeasyMetadata("multipartForm:name=longitude")
    public Double longitude;
    public UpdatePostRequestBody withLongitude(Double longitude) {
        this.longitude = longitude;
        return this;
    }
    
    /**
     * A comma separated list of the IDs of the photos that should be attached to this post.
     */
    @SpeakeasyMetadata("multipartForm:name=photo_ids")
    public String photoIds;
    public UpdatePostRequestBody withPhotoIds(String photoIds) {
        this.photoIds = photoIds;
        return this;
    }
    
    /**
     * A JSON string representing a permanent object that the client persists and modifies based on warnings returned by the update submission process and user input.  Some warnings returned after submitting  an update have a preference_key string property so that users can opt out of those warnings in the future.  To save this opt-out preference, set the property indicated by the preference_key in the preferences object (eg. preferences[preference_key] = 1).  The preferences object is never modified by the server - it is up to the client to initialize, modify and persist the preferences object.
     * 
     */
    @SpeakeasyMetadata("multipartForm:name=preferences")
    public String preferences;
    public UpdatePostRequestBody withPreferences(String preferences) {
        this.preferences = preferences;
        return this;
    }
    
    /**
     * For wanted posts only. If set to 1, the wanted post will show that the poster intends to resell any items that they receive in response to this post.  Posters must declare if they intend to resell items.
     * 
     */
    @SpeakeasyMetadata("multipartForm:name=reselling")
    public String reselling;
    public UpdatePostRequestBody withReselling(String reselling) {
        this.reselling = reselling;
        return this;
    }
    
    /**
     * A JSON string representing a temporary object that is used to store data about the update process for a single post.  The first time a post update is submitted, session should be a new empty object (eg. '{}').  The session object should be persisted by the client until that update is successfully submitted and then it  can be discarded so that the next update will start over with a new empty session object.  Every time an update is submitted and the response indicates that the submission was not successful, the session object returned in the response should override the clients copy of the session.
     * 
     */
    @SpeakeasyMetadata("multipartForm:name=session")
    public String session;
    public UpdatePostRequestBody withSession(String session) {
        this.session = session;
        return this;
    }
    
    /**
     * A short description of the item(s).
     */
    @SpeakeasyMetadata("multipartForm:name=title")
    public String title;
    public UpdatePostRequestBody withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The type of post.  One of: offer, wanted
     * 
     */
    @SpeakeasyMetadata("multipartForm:name=type")
    public String type;
    public UpdatePostRequestBody withType(String type) {
        this.type = type;
        return this;
    }
    
}
