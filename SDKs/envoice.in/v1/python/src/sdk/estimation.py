"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Estimation:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def estimation_api_all(self, request: operations.EstimationAPIAllRequest) -> operations.EstimationAPIAllResponse:
        r"""Return all estimation for the account"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/all'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.EstimationAPIAllRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPIAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListResultEstimationDetailsAPIModel])
                res.list_result_estimation_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListResultEstimationDetailsAPIModel])
                res.list_result_estimation_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def estimation_api_change_status_form(self, request: operations.EstimationAPIChangeStatusFormRequest) -> operations.EstimationAPIChangeStatusFormResponse:
        r"""Change estimation status"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/changestatus'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "estimation_change_status_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPIChangeStatusFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.estimation_api_change_status_form_200_application_json_boolean = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.estimation_api_change_status_form_200_text_json_boolean = out

        return res

    def estimation_api_change_status_json(self, request: operations.EstimationAPIChangeStatusJSONRequest) -> operations.EstimationAPIChangeStatusJSONResponse:
        r"""Change estimation status"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/changestatus'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "estimation_change_status_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPIChangeStatusJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.estimation_api_change_status_json_200_application_json_boolean = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.estimation_api_change_status_json_200_text_json_boolean = out

        return res

    def estimation_api_change_status_raw(self, request: operations.EstimationAPIChangeStatusRawRequest) -> operations.EstimationAPIChangeStatusRawResponse:
        r"""Change estimation status"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/changestatus'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPIChangeStatusRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.estimation_api_change_status_raw_200_application_json_boolean = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.estimation_api_change_status_raw_200_text_json_boolean = out

        return res

    def estimation_api_delete_form(self, request: operations.EstimationAPIDeleteFormRequest) -> operations.EstimationAPIDeleteFormResponse:
        r"""Delete an existing estimation"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "estimation_delete_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPIDeleteFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.estimation_api_delete_form_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.estimation_api_delete_form_200_text_json_int32_integer = out

        return res

    def estimation_api_delete_json(self, request: operations.EstimationAPIDeleteJSONRequest) -> operations.EstimationAPIDeleteJSONResponse:
        r"""Delete an existing estimation"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "estimation_delete_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPIDeleteJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.estimation_api_delete_json_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.estimation_api_delete_json_200_text_json_int32_integer = out

        return res

    def estimation_api_delete_raw(self, request: operations.EstimationAPIDeleteRawRequest) -> operations.EstimationAPIDeleteRawResponse:
        r"""Delete an existing estimation"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPIDeleteRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.estimation_api_delete_raw_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.estimation_api_delete_raw_200_text_json_int32_integer = out

        return res

    def estimation_api_details(self, request: operations.EstimationAPIDetailsRequest) -> operations.EstimationAPIDetailsResponse:
        r"""Return estimation data"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/details'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.EstimationAPIDetailsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPIDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimationFullDetailsAPIModel])
                res.estimation_full_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimationFullDetailsAPIModel])
                res.estimation_full_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def estimation_api_new_form(self, request: operations.EstimationAPINewFormRequest) -> operations.EstimationAPINewFormResponse:
        r"""Create an estimation"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/new'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "estimation_create_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPINewFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimationFullDetailsAPIModel])
                res.estimation_full_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimationFullDetailsAPIModel])
                res.estimation_full_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def estimation_api_new_json(self, request: operations.EstimationAPINewJSONRequest) -> operations.EstimationAPINewJSONResponse:
        r"""Create an estimation"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/new'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "estimation_create_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPINewJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimationFullDetailsAPIModel])
                res.estimation_full_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimationFullDetailsAPIModel])
                res.estimation_full_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def estimation_api_new_raw(self, request: operations.EstimationAPINewRawRequest) -> operations.EstimationAPINewRawResponse:
        r"""Create an estimation"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/new'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPINewRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimationFullDetailsAPIModel])
                res.estimation_full_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimationFullDetailsAPIModel])
                res.estimation_full_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def estimation_api_send_to_client_form(self, request: operations.EstimationAPISendToClientFormRequest) -> operations.EstimationAPISendToClientFormResponse:
        r"""Send the provided estimation to the client"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/sendtoclient'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "send_estimation_to_client_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPISendToClientFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.estimation_api_send_to_client_form_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.estimation_api_send_to_client_form_200_text_json_int32_integer = out

        return res

    def estimation_api_send_to_client_json(self, request: operations.EstimationAPISendToClientJSONRequest) -> operations.EstimationAPISendToClientJSONResponse:
        r"""Send the provided estimation to the client"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/sendtoclient'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "send_estimation_to_client_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPISendToClientJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.estimation_api_send_to_client_json_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.estimation_api_send_to_client_json_200_text_json_int32_integer = out

        return res

    def estimation_api_send_to_client_raw(self, request: operations.EstimationAPISendToClientRawRequest) -> operations.EstimationAPISendToClientRawResponse:
        r"""Send the provided estimation to the client"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/sendtoclient'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPISendToClientRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.estimation_api_send_to_client_raw_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.estimation_api_send_to_client_raw_200_text_json_int32_integer = out

        return res

    def estimation_api_status(self, request: operations.EstimationAPIStatusRequest) -> operations.EstimationAPIStatusResponse:
        r"""Retrieve the status of the estimation"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/status'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.EstimationAPIStatusRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPIStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EstimationAPIStatus200ApplicationJSONEnum])
                res.estimation_api_status_200_application_json_string_enum = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EstimationAPIStatus200TextJSONEnum])
                res.estimation_api_status_200_text_json_string_enum = out

        return res

    def estimation_api_update_form(self, request: operations.EstimationAPIUpdateFormRequest) -> operations.EstimationAPIUpdateFormResponse:
        r"""Update an existing estimation"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/update'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "estimation_update_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPIUpdateFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimationFullDetailsAPIModel])
                res.estimation_full_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimationFullDetailsAPIModel])
                res.estimation_full_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def estimation_api_update_json(self, request: operations.EstimationAPIUpdateJSONRequest) -> operations.EstimationAPIUpdateJSONResponse:
        r"""Update an existing estimation"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/update'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "estimation_update_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPIUpdateJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimationFullDetailsAPIModel])
                res.estimation_full_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimationFullDetailsAPIModel])
                res.estimation_full_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def estimation_api_update_raw(self, request: operations.EstimationAPIUpdateRawRequest) -> operations.EstimationAPIUpdateRawResponse:
        r"""Update an existing estimation"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/update'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPIUpdateRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimationFullDetailsAPIModel])
                res.estimation_full_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimationFullDetailsAPIModel])
                res.estimation_full_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def estimation_api_uri(self, request: operations.EstimationAPIURIRequest) -> operations.EstimationAPIURIResponse:
        r"""Return the unique url to the client's invoice"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/estimation/uri'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.EstimationAPIURIRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EstimationAPIURIResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimationURIAPIModel])
                res.estimation_uri_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimationURIAPIModel])
                res.estimation_uri_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    