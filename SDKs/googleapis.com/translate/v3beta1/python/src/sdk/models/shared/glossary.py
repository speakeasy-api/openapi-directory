"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import glossaryinputconfig as shared_glossaryinputconfig
from ..shared import languagecodepair as shared_languagecodepair
from ..shared import languagecodesset as shared_languagecodesset
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Glossary:
    r"""Represents a glossary built from user provided data."""
    
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'exclude': lambda f: f is None }})
    r"""Output only. When the glossary creation was finished."""  
    entry_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entryCount'), 'exclude': lambda f: f is None }})
    r"""Output only. The number of entries defined in the glossary."""  
    input_config: Optional[shared_glossaryinputconfig.GlossaryInputConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputConfig'), 'exclude': lambda f: f is None }})
    r"""Input configuration for glossaries."""  
    language_codes_set: Optional[shared_languagecodesset.LanguageCodesSet] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCodesSet'), 'exclude': lambda f: f is None }})
    r"""Used with equivalent term set glossaries."""  
    language_pair: Optional[shared_languagecodepair.LanguageCodePair] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languagePair'), 'exclude': lambda f: f is None }})
    r"""Used with unidirectional glossaries."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Required. The resource name of the glossary. Glossary names have the form `projects/{project-number-or-id}/locations/{location-id}/glossaries/{glossary-id}`."""  
    submit_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submitTime'), 'exclude': lambda f: f is None }})
    r"""Output only. When CreateGlossary was called."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GlossaryInput:
    r"""Represents a glossary built from user provided data."""
    
    input_config: Optional[shared_glossaryinputconfig.GlossaryInputConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputConfig'), 'exclude': lambda f: f is None }})
    r"""Input configuration for glossaries."""  
    language_codes_set: Optional[shared_languagecodesset.LanguageCodesSet] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCodesSet'), 'exclude': lambda f: f is None }})
    r"""Used with equivalent term set glossaries."""  
    language_pair: Optional[shared_languagecodepair.LanguageCodePair] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languagePair'), 'exclude': lambda f: f is None }})
    r"""Used with unidirectional glossaries."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Required. The resource name of the glossary. Glossary names have the form `projects/{project-number-or-id}/locations/{location-id}/glossaries/{glossary-id}`."""  
    