// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateCaseXAmzTargetEnum
type CreateCaseXAmzTargetEnum string

const (
	CreateCaseXAmzTargetEnumAwsSupport20130415CreateCase CreateCaseXAmzTargetEnum = "AWSSupport_20130415.CreateCase"
)

func (e *CreateCaseXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSSupport_20130415.CreateCase":
		*e = CreateCaseXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCaseXAmzTargetEnum: %s", s)
	}
}

type CreateCaseHeaders struct {
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateCaseXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateCaseRequest struct {
	Headers CreateCaseHeaders
	Request shared.CreateCaseRequest `request:"mediaType=application/json"`
}

type CreateCaseResponse struct {
	// AttachmentSetExpired
	AttachmentSetExpired interface{}
	// AttachmentSetIdNotFound
	AttachmentSetIDNotFound interface{}
	// CaseCreationLimitExceeded
	CaseCreationLimitExceeded interface{}
	ContentType               string
	// Success
	CreateCaseResponse *shared.CreateCaseResponse
	// InternalServerError
	InternalServerError interface{}
	StatusCode          int
	RawResponse         *http.Response
}
