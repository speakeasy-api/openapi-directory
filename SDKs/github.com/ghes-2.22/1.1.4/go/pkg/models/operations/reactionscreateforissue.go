// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ReactionsCreateForIssueRequestBodyContentEnum - The [reaction type](https://docs.github.com/enterprise-server@2.22/rest/reference/reactions#reaction-types) to add to the issue.
type ReactionsCreateForIssueRequestBodyContentEnum string

const (
	ReactionsCreateForIssueRequestBodyContentEnumPlus1    ReactionsCreateForIssueRequestBodyContentEnum = "+1"
	ReactionsCreateForIssueRequestBodyContentEnumMinus1   ReactionsCreateForIssueRequestBodyContentEnum = "-1"
	ReactionsCreateForIssueRequestBodyContentEnumLaugh    ReactionsCreateForIssueRequestBodyContentEnum = "laugh"
	ReactionsCreateForIssueRequestBodyContentEnumConfused ReactionsCreateForIssueRequestBodyContentEnum = "confused"
	ReactionsCreateForIssueRequestBodyContentEnumHeart    ReactionsCreateForIssueRequestBodyContentEnum = "heart"
	ReactionsCreateForIssueRequestBodyContentEnumHooray   ReactionsCreateForIssueRequestBodyContentEnum = "hooray"
	ReactionsCreateForIssueRequestBodyContentEnumRocket   ReactionsCreateForIssueRequestBodyContentEnum = "rocket"
	ReactionsCreateForIssueRequestBodyContentEnumEyes     ReactionsCreateForIssueRequestBodyContentEnum = "eyes"
)

func (e *ReactionsCreateForIssueRequestBodyContentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "+1":
		fallthrough
	case "-1":
		fallthrough
	case "laugh":
		fallthrough
	case "confused":
		fallthrough
	case "heart":
		fallthrough
	case "hooray":
		fallthrough
	case "rocket":
		fallthrough
	case "eyes":
		*e = ReactionsCreateForIssueRequestBodyContentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReactionsCreateForIssueRequestBodyContentEnum: %s", s)
	}
}

type ReactionsCreateForIssueRequestBody struct {
	// The [reaction type](https://docs.github.com/enterprise-server@2.22/rest/reference/reactions#reaction-types) to add to the issue.
	Content ReactionsCreateForIssueRequestBodyContentEnum `json:"content"`
}

type ReactionsCreateForIssueRequest struct {
	RequestBody ReactionsCreateForIssueRequestBody `request:"mediaType=application/json"`
	// issue_number parameter
	IssueNumber int64  `pathParam:"style=simple,explode=false,name=issue_number"`
	Owner       string `pathParam:"style=simple,explode=false,name=owner"`
	Repo        string `pathParam:"style=simple,explode=false,name=repo"`
}

type ReactionsCreateForIssueResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Response
	Reaction *shared.Reaction
	// Validation failed
	ValidationError *shared.ValidationError
}
