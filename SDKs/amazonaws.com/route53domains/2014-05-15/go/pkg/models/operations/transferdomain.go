// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// TransferDomainXAmzTargetEnum
type TransferDomainXAmzTargetEnum string

const (
	TransferDomainXAmzTargetEnumRoute53DomainsV20140515TransferDomain TransferDomainXAmzTargetEnum = "Route53Domains_v20140515.TransferDomain"
)

func (e *TransferDomainXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Route53Domains_v20140515.TransferDomain":
		*e = TransferDomainXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferDomainXAmzTargetEnum: %s", s)
	}
}

type TransferDomainRequest struct {
	TransferDomainRequest shared.TransferDomainRequest `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            TransferDomainXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type TransferDomainResponse struct {
	ContentType string
	// DomainLimitExceeded
	DomainLimitExceeded interface{}
	// DuplicateRequest
	DuplicateRequest interface{}
	// InvalidInput
	InvalidInput interface{}
	// OperationLimitExceeded
	OperationLimitExceeded interface{}
	StatusCode             int
	RawResponse            *http.Response
	// TLDRulesViolation
	TLDRulesViolation interface{}
	// Success
	TransferDomainResponse *shared.TransferDomainResponse
	// UnsupportedTLD
	UnsupportedTLD interface{}
}
