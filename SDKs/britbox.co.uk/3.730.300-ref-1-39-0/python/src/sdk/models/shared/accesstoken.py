"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class AccessTokenTypeEnum(str, Enum):
    r"""The type of the token."""
    USER_ACCOUNT = 'UserAccount'
    USER_PROFILE = 'UserProfile'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccessToken:
    r"""OK"""
    
    expiration_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expirationDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The timestamp this token expires."""  
    refreshable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refreshable') }})
    r"""True if this token can be refreshed, false if not."""  
    type: AccessTokenTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of the token."""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The token value used for authenticated requests."""  
    account_created: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountCreated'), 'exclude': lambda f: f is None }})
    r"""When a `UserAccount` token is issued during a single-sign-on flow
    a user may have been automatically registered if they didn't
    have an account already. If this occurs then `accountCreated`
    will be `true`.
    """  
    