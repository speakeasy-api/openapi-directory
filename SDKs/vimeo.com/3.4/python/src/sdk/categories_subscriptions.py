"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CategoriesSubscriptions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def check_if_user_subscribed_to_category(self, request: operations.CheckIfUserSubscribedToCategoryRequest, security: operations.CheckIfUserSubscribedToCategorySecurity) -> operations.CheckIfUserSubscribedToCategoryResponse:
        r"""Check if a user follows a category"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CheckIfUserSubscribedToCategoryRequest, base_url, '/users/{user_id}/categories/{category}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckIfUserSubscribedToCategoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def check_if_user_subscribed_to_category_alt1(self, request: operations.CheckIfUserSubscribedToCategoryAlt1Request, security: operations.CheckIfUserSubscribedToCategoryAlt1Security) -> operations.CheckIfUserSubscribedToCategoryAlt1Response:
        r"""Check if a user follows a category"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CheckIfUserSubscribedToCategoryAlt1Request, base_url, '/me/categories/{category}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckIfUserSubscribedToCategoryAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_category_subscriptions(self, request: operations.GetCategorySubscriptionsRequest, security: operations.GetCategorySubscriptionsSecurity) -> operations.GetCategorySubscriptionsResponse:
        r"""Get all the categories that a user follows"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCategorySubscriptionsRequest, base_url, '/users/{user_id}/categories', request)
        
        query_params = utils.get_query_params(operations.GetCategorySubscriptionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCategorySubscriptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.category+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Category]])
                res.categories = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.category+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_category_subscriptions_alt1(self, request: operations.GetCategorySubscriptionsAlt1Request, security: operations.GetCategorySubscriptionsAlt1Security) -> operations.GetCategorySubscriptionsAlt1Response:
        r"""Get all the categories that a user follows"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/categories'
        
        query_params = utils.get_query_params(operations.GetCategorySubscriptionsAlt1Request, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCategorySubscriptionsAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.category+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Category]])
                res.categories = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.category+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def subscribe_to_category(self, request: operations.SubscribeToCategoryRequest, security: operations.SubscribeToCategorySecurity) -> operations.SubscribeToCategoryResponse:
        r"""Subscribe a user to a single category"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SubscribeToCategoryRequest, base_url, '/users/{user_id}/categories/{category}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscribeToCategoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def subscribe_to_category_alt1(self, request: operations.SubscribeToCategoryAlt1Request, security: operations.SubscribeToCategoryAlt1Security) -> operations.SubscribeToCategoryAlt1Response:
        r"""Subscribe a user to a single category"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SubscribeToCategoryAlt1Request, base_url, '/me/categories/{category}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscribeToCategoryAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def unsubscribe_from_category(self, request: operations.UnsubscribeFromCategoryRequest, security: operations.UnsubscribeFromCategorySecurity) -> operations.UnsubscribeFromCategoryResponse:
        r"""Unsubscribe a user from a category"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnsubscribeFromCategoryRequest, base_url, '/users/{user_id}/categories/{category}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnsubscribeFromCategoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def unsubscribe_from_category_alt1(self, request: operations.UnsubscribeFromCategoryAlt1Request, security: operations.UnsubscribeFromCategoryAlt1Security) -> operations.UnsubscribeFromCategoryAlt1Response:
        r"""Unsubscribe a user from a category"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnsubscribeFromCategoryAlt1Request, base_url, '/me/categories/{category}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnsubscribeFromCategoryAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    