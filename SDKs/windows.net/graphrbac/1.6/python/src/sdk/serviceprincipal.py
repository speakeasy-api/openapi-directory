"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class ServicePrincipal:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def service_principals_create(self, request: operations.ServicePrincipalsCreateRequest) -> operations.ServicePrincipalsCreateResponse:
        r"""Creates a service principal in the directory."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicePrincipalsCreateRequest, base_url, '/{tenantID}/servicePrincipals', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "service_principal_create_parameters", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ServicePrincipalsCreateRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicePrincipalsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.service_principal = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.service_principal = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    def service_principals_delete(self, request: operations.ServicePrincipalsDeleteRequest) -> operations.ServicePrincipalsDeleteResponse:
        r"""Deletes a service principal from the directory."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicePrincipalsDeleteRequest, base_url, '/{tenantID}/servicePrincipals/{objectId}', request)
        
        query_params = utils.get_query_params(operations.ServicePrincipalsDeleteRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicePrincipalsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    def service_principals_get(self, request: operations.ServicePrincipalsGetRequest) -> operations.ServicePrincipalsGetResponse:
        r"""Gets service principal information from the directory. Query by objectId or pass a filter to query by appId"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicePrincipalsGetRequest, base_url, '/{tenantID}/servicePrincipals/{objectId}', request)
        
        query_params = utils.get_query_params(operations.ServicePrincipalsGetRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicePrincipalsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.service_principal = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, dict[str, Any]]])
                res.service_principal = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    def service_principals_list(self, request: operations.ServicePrincipalsListRequest) -> operations.ServicePrincipalsListResponse:
        r"""Gets a list of service principals from the current tenant."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicePrincipalsListRequest, base_url, '/{tenantID}/servicePrincipals', request)
        
        query_params = utils.get_query_params(operations.ServicePrincipalsListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicePrincipalsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServicePrincipalListResult])
                res.service_principal_list_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServicePrincipalListResult])
                res.service_principal_list_result = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    def service_principals_update(self, request: operations.ServicePrincipalsUpdateRequest) -> operations.ServicePrincipalsUpdateResponse:
        r"""Updates a service principal in the directory."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicePrincipalsUpdateRequest, base_url, '/{tenantID}/servicePrincipals/{objectId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "service_principal_update_parameters", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ServicePrincipalsUpdateRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicePrincipalsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    