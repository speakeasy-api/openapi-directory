"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import componentconfiguration as shared_componentconfiguration
from ..shared import containerrepositoryservice_enum as shared_containerrepositoryservice_enum
from ..shared import createcontainerreciperesponse as shared_createcontainerreciperesponse
from ..shared import instanceblockdevicemapping as shared_instanceblockdevicemapping
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateContainerRecipeRequestBodyContainerTypeEnum(str, Enum):
    r"""The type of container to create."""
    DOCKER = 'DOCKER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateContainerRecipeRequestBodyInstanceConfiguration:
    r"""Defines a custom base AMI and block device mapping configurations of an instance used for building and testing container images."""
    
    block_device_mappings: Optional[list[shared_instanceblockdevicemapping.InstanceBlockDeviceMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockDeviceMappings'), 'exclude': lambda f: f is None }})  
    image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})  
    
class CreateContainerRecipeRequestBodyPlatformOverrideEnum(str, Enum):
    r"""Specifies the operating system platform when you use a custom base image."""
    WINDOWS = 'Windows'
    LINUX = 'Linux'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateContainerRecipeRequestBodyTargetRepository:
    r"""The container repository where the output container image is stored."""
    
    repository_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositoryName'), 'exclude': lambda f: f is None }})  
    service: Optional[shared_containerrepositoryservice_enum.ContainerRepositoryServiceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateContainerRecipeRequestBody:
    
    client_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientToken') }})
    r"""The client token used to make this request idempotent."""  
    components: list[shared_componentconfiguration.ComponentConfiguration] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('components') }})
    r"""Components for build and test that are included in the container recipe. Recipes require a minimum of one build component, and can have a maximum of 20 build and test components in any combination."""  
    container_type: CreateContainerRecipeRequestBodyContainerTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containerType') }})
    r"""The type of container to create."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the container recipe."""  
    parent_image: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentImage') }})
    r"""The base image for the container recipe."""  
    semantic_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('semanticVersion') }})
    r"""<p>The semantic version of the container recipe. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>"""  
    target_repository: CreateContainerRecipeRequestBodyTargetRepository = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetRepository') }})
    r"""The container repository where the output container image is stored."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the container recipe."""  
    dockerfile_template_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockerfileTemplateData'), 'exclude': lambda f: f is None }})
    r"""The Dockerfile template used to build your image as an inline data blob."""  
    dockerfile_template_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockerfileTemplateUri'), 'exclude': lambda f: f is None }})
    r"""The Amazon S3 URI for the Dockerfile that will be used to build your container image."""  
    image_os_version_override: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageOsVersionOverride'), 'exclude': lambda f: f is None }})
    r"""Specifies the operating system version for the base image."""  
    instance_configuration: Optional[CreateContainerRecipeRequestBodyInstanceConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceConfiguration'), 'exclude': lambda f: f is None }})
    r"""Defines a custom base AMI and block device mapping configurations of an instance used for building and testing container images."""  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsKeyId'), 'exclude': lambda f: f is None }})
    r"""Identifies which KMS key is used to encrypt the container image."""  
    platform_override: Optional[CreateContainerRecipeRequestBodyPlatformOverrideEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platformOverride'), 'exclude': lambda f: f is None }})
    r"""Specifies the operating system platform when you use a custom base image."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Tags that are attached to the container recipe."""  
    working_directory: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workingDirectory'), 'exclude': lambda f: f is None }})
    r"""The working directory for use during build and test workflows."""  
    

@dataclasses.dataclass
class CreateContainerRecipeRequest:
    
    request_body: CreateContainerRecipeRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateContainerRecipeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    call_rate_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CallRateLimitExceededException"""  
    client_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ClientException"""  
    create_container_recipe_response: Optional[shared_createcontainerreciperesponse.CreateContainerRecipeResponse] = dataclasses.field(default=None)
    r"""Success"""  
    forbidden_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ForbiddenException"""  
    idempotent_parameter_mismatch_exception: Optional[Any] = dataclasses.field(default=None)
    r"""IdempotentParameterMismatchException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    invalid_version_number_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidVersionNumberException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_already_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceAlreadyExistsException"""  
    resource_in_use_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceInUseException"""  
    service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    