/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Detailed information about the agent.
 */
export class RegisterAgentRequestBodyAgentDetails extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "agentVersion" })
  agentVersion?: string;

  @SpeakeasyMetadata({ elemType: shared.ComponentVersion })
  @Expose({ name: "componentVersions" })
  @Type(() => shared.ComponentVersion)
  componentVersions?: shared.ComponentVersion[];

  @SpeakeasyMetadata()
  @Expose({ name: "instanceId" })
  instanceId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "instanceType" })
  instanceType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "reservedCpuCores" })
  reservedCpuCores?: number[];
}

/**
 * Data for agent discovery.
 */
export class RegisterAgentRequestBodyDiscoveryData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "capabilityArns" })
  capabilityArns?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "privateIpAddresses" })
  privateIpAddresses?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "publicIpAddresses" })
  publicIpAddresses?: string[];
}

export class RegisterAgentRequestBody extends SpeakeasyBase {
  /**
   * Detailed information about the agent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "agentDetails" })
  @Type(() => RegisterAgentRequestBodyAgentDetails)
  agentDetails: RegisterAgentRequestBodyAgentDetails;

  /**
   * Data for agent discovery.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "discoveryData" })
  @Type(() => RegisterAgentRequestBodyDiscoveryData)
  discoveryData: RegisterAgentRequestBodyDiscoveryData;
}

export class RegisterAgentRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: RegisterAgentRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class RegisterAgentResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * DependencyException
   */
  @SpeakeasyMetadata()
  dependencyException?: any;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  registerAgentResponse?: shared.RegisterAgentResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;
}
