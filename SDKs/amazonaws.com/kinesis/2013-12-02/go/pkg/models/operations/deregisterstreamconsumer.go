// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeregisterStreamConsumerXAmzTargetEnum
type DeregisterStreamConsumerXAmzTargetEnum string

const (
	DeregisterStreamConsumerXAmzTargetEnumKinesis20131202DeregisterStreamConsumer DeregisterStreamConsumerXAmzTargetEnum = "Kinesis_20131202.DeregisterStreamConsumer"
)

func (e DeregisterStreamConsumerXAmzTargetEnum) ToPointer() *DeregisterStreamConsumerXAmzTargetEnum {
	return &e
}

func (e *DeregisterStreamConsumerXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Kinesis_20131202.DeregisterStreamConsumer":
		*e = DeregisterStreamConsumerXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeregisterStreamConsumerXAmzTargetEnum: %v", v)
	}
}

type DeregisterStreamConsumerRequest struct {
	DeregisterStreamConsumerInput shared.DeregisterStreamConsumerInput   `request:"mediaType=application/json"`
	XAmzAlgorithm                 *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256             *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                      *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken             *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                 *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders             *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                    DeregisterStreamConsumerXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeregisterStreamConsumerResponse struct {
	ContentType string
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
