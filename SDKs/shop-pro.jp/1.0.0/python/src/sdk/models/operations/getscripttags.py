"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetScriptTags200ApplicationJSONScriptTagsDisplayScopeEnum(str, Enum):
    r"""スクリプトを出力するページ。
    
    - `all`: ショップページと注文完了ページの両方
    - `shop`: ショップページ
    - `thanks_page`: 注文完了ページ
    - `cart`: カートの途中のページ
    """
    ALL = 'all'
    SHOP = 'shop'
    THANKS_PAGE = 'thanks_page'
    CART = 'cart'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetScriptTags200ApplicationJSONScriptTags:
    
    display_scope: Optional[GetScriptTags200ApplicationJSONScriptTagsDisplayScopeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_scope'), 'exclude': lambda f: f is None }})
    r"""スクリプトを出力するページ。
    
    - `all`: ショップページと注文完了ページの両方
    - `shop`: ショップページ
    - `thanks_page`: 注文完了ページ
    - `cart`: カートの途中のページ
    """  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""スクリプトタグID"""  
    make_date: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('make_date'), 'exclude': lambda f: f is None }})
    r"""作成日時"""  
    src: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('src'), 'exclude': lambda f: f is None }})
    r"""スクリプトURL"""  
    update_date: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('update_date'), 'exclude': lambda f: f is None }})
    r"""更新日時"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetScriptTags200ApplicationJSON:
    
    script_tags: Optional[list[GetScriptTags200ApplicationJSONScriptTags]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('script_tags'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetScriptTagsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_script_tags_200_application_json_object: Optional[GetScriptTags200ApplicationJSON] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    