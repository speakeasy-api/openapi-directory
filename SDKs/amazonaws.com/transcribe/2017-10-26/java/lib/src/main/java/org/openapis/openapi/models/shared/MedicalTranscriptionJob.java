/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * MedicalTranscriptionJob - &lt;p&gt;Provides detailed information about a medical transcription job.&lt;/p&gt; &lt;p&gt;To view the status of the specified medical transcription job, check the &lt;code&gt;TranscriptionJobStatus&lt;/code&gt; field. If the status is &lt;code&gt;COMPLETED&lt;/code&gt;, the job is finished and you can find the results at the location specified in &lt;code&gt;TranscriptFileUri&lt;/code&gt;. If the status is &lt;code&gt;FAILED&lt;/code&gt;, &lt;code&gt;FailureReason&lt;/code&gt; provides details on why your transcription job failed.&lt;/p&gt;
 */
public class MedicalTranscriptionJob {
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CompletionTime")
    public OffsetDateTime completionTime;
    public MedicalTranscriptionJob withCompletionTime(OffsetDateTime completionTime) {
        this.completionTime = completionTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ContentIdentificationType")
    public MedicalContentIdentificationTypeEnum contentIdentificationType;
    public MedicalTranscriptionJob withContentIdentificationType(MedicalContentIdentificationTypeEnum contentIdentificationType) {
        this.contentIdentificationType = contentIdentificationType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreationTime")
    public OffsetDateTime creationTime;
    public MedicalTranscriptionJob withCreationTime(OffsetDateTime creationTime) {
        this.creationTime = creationTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FailureReason")
    public String failureReason;
    public MedicalTranscriptionJob withFailureReason(String failureReason) {
        this.failureReason = failureReason;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LanguageCode")
    public LanguageCodeEnum languageCode;
    public MedicalTranscriptionJob withLanguageCode(LanguageCodeEnum languageCode) {
        this.languageCode = languageCode;
        return this;
    }
    
    /**
     * &lt;p&gt;Describes the Amazon S3 location of the media file you want to use in your request.&lt;/p&gt; &lt;p&gt;For information on supported media formats, refer to the &lt;a href="https://docs.aws.amazon.com/APIReference/API_StartTranscriptionJob.html#transcribe-StartTranscriptionJob-request-MediaFormat"&gt;MediaFormat&lt;/a&gt; parameter or the &lt;a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-input.html#how-input-audio"&gt;Media formats&lt;/a&gt; section in the Amazon S3 Developer Guide.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Media")
    public Media media;
    public MedicalTranscriptionJob withMedia(Media media) {
        this.media = media;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MediaFormat")
    public MediaFormatEnum mediaFormat;
    public MedicalTranscriptionJob withMediaFormat(MediaFormatEnum mediaFormat) {
        this.mediaFormat = mediaFormat;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MediaSampleRateHertz")
    public Long mediaSampleRateHertz;
    public MedicalTranscriptionJob withMediaSampleRateHertz(Long mediaSampleRateHertz) {
        this.mediaSampleRateHertz = mediaSampleRateHertz;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MedicalTranscriptionJobName")
    public String medicalTranscriptionJobName;
    public MedicalTranscriptionJob withMedicalTranscriptionJobName(String medicalTranscriptionJobName) {
        this.medicalTranscriptionJobName = medicalTranscriptionJobName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Settings")
    public MedicalTranscriptionSetting settings;
    public MedicalTranscriptionJob withSettings(MedicalTranscriptionSetting settings) {
        this.settings = settings;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Specialty")
    public SpecialtyEnum specialty;
    public MedicalTranscriptionJob withSpecialty(SpecialtyEnum specialty) {
        this.specialty = specialty;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("StartTime")
    public OffsetDateTime startTime;
    public MedicalTranscriptionJob withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Tags")
    public Tag[] tags;
    public MedicalTranscriptionJob withTags(Tag[] tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Transcript")
    public MedicalTranscript transcript;
    public MedicalTranscriptionJob withTranscript(MedicalTranscript transcript) {
        this.transcript = transcript;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TranscriptionJobStatus")
    public TranscriptionJobStatusEnum transcriptionJobStatus;
    public MedicalTranscriptionJob withTranscriptionJobStatus(TranscriptionJobStatusEnum transcriptionJobStatus) {
        this.transcriptionJobStatus = transcriptionJobStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Type")
    public TypeEnum type;
    public MedicalTranscriptionJob withType(TypeEnum type) {
        this.type = type;
        return this;
    }
    
}
