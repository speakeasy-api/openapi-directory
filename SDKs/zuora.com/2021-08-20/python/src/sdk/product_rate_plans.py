"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ProductRatePlans:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_product_rate_plans(self, request: operations.GETProductRatePlansRequest) -> operations.GETProductRatePlansResponse:
        r"""List all product rate plans of a product
        Retrieves information about all product rate plans of a specific product.
        
        For a use case of this operation, see [Retrieve the product catalog](https://www.zuora.com/developer/api-guides/#Retrieve-the-product-catalog).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETProductRatePlansRequest, base_url, '/v1/rateplan/{product_id}/productRatePlan', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETProductRatePlansRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETProductRatePlansResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GETProductRatePlansResponse])
                res.get_product_rate_plans_response = out

        return res

    def object_delete_product_rate_plan(self, request: operations.ObjectDELETEProductRatePlanRequest) -> operations.ObjectDELETEProductRatePlanResponse:
        r"""CRUD: Delete a product rate plan"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ObjectDELETEProductRatePlanRequest, base_url, '/v1/object/product-rate-plan/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ObjectDELETEProductRatePlanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyDeleteResponse])
                res.proxy_delete_response = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyUnauthorizedResponse])
                res.proxy_unauthorized_response = out

        return res

    def object_get_product_rate_plan(self, request: operations.ObjectGETProductRatePlanRequest) -> operations.ObjectGETProductRatePlanResponse:
        r"""CRUD: Retrieve a product rate plan"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ObjectGETProductRatePlanRequest, base_url, '/v1/object/product-rate-plan/{id}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ObjectGETProductRatePlanRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ObjectGETProductRatePlanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyGetProductRatePlan])
                res.proxy_get_product_rate_plan = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyUnauthorizedResponse])
                res.proxy_unauthorized_response = out
        elif http_res.status_code == 404:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyNoDataResponse])
                res.proxy_no_data_response = out

        return res

    def object_post_product_rate_plan(self, request: operations.ObjectPOSTProductRatePlanRequest) -> operations.ObjectPOSTProductRatePlanResponse:
        r"""CRUD: Create a product rate plan"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/object/product-rate-plan'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "proxy_create_product_rate_plan", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ObjectPOSTProductRatePlanRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ObjectPOSTProductRatePlanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyCreateOrModifyResponse])
                res.proxy_create_or_modify_response = out
        elif http_res.status_code == 400:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyBadRequestResponse])
                res.proxy_bad_request_response = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyUnauthorizedResponse])
                res.proxy_unauthorized_response = out

        return res

    def object_put_product_rate_plan(self, request: operations.ObjectPUTProductRatePlanRequest) -> operations.ObjectPUTProductRatePlanResponse:
        r"""CRUD: Update a product rate plan"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ObjectPUTProductRatePlanRequest, base_url, '/v1/object/product-rate-plan/{id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "proxy_modify_product_rate_plan", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ObjectPUTProductRatePlanRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ObjectPUTProductRatePlanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyCreateOrModifyResponse])
                res.proxy_create_or_modify_response = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyUnauthorizedResponse])
                res.proxy_unauthorized_response = out

        return res

    