/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Sort order, ascending or descending.
 */
export enum SearchArtifactsOrderEnum {
  Asc = "asc",
  Desc = "desc",
}

/**
 * What fields to search.
 */
export enum SearchArtifactsOverEnum {
  Everything = "everything",
  Name = "name",
  Description = "description",
  Labels = "labels",
}

export class SearchArtifactsRequest extends SpeakeasyBase {
  /**
   * The number of artifacts to return.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit: number;

  /**
   * The number of artifacts to skip before starting to collect the result set.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=offset",
  })
  offset: number;

  /**
   * Sort order, ascending or descending.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=order" })
  order?: SearchArtifactsOrderEnum;

  /**
   * What fields to search.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=over" })
  over?: SearchArtifactsOverEnum;

  /**
   * The text to search.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=search",
  })
  search?: string;
}

export class SearchArtifactsResponse extends SpeakeasyBase {
  /**
   * On a successful response, returns a result set of artifacts - one for each artifact
   *
   * @remarks
   * in the registry that matches the criteria.
   */
  @SpeakeasyMetadata()
  artifactSearchResults?: shared.ArtifactSearchResults;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Common response for all operations that can fail with an unexpected server error.
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
