/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

public class Category {
    /**
     * Activity amount in milliunits format
     */
    @JsonProperty("activity")
    public Long activity;

    public Category withActivity(Long activity) {
        this.activity = activity;
        return this;
    }
    
    /**
     * Balance in milliunits format
     */
    @JsonProperty("balance")
    public Long balance;

    public Category withBalance(Long balance) {
        this.balance = balance;
        return this;
    }
    
    /**
     * Budgeted amount in milliunits format
     */
    @JsonProperty("budgeted")
    public Long budgeted;

    public Category withBudgeted(Long budgeted) {
        this.budgeted = budgeted;
        return this;
    }
    
    @JsonProperty("category_group_id")
    public String categoryGroupId;

    public Category withCategoryGroupId(String categoryGroupId) {
        this.categoryGroupId = categoryGroupId;
        return this;
    }
    
    /**
     * Whether or not the category has been deleted.  Deleted categories will only be included in delta requests.
     */
    @JsonProperty("deleted")
    public Boolean deleted;

    public Category withDeleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }
    
    /**
     * The goal cadence
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("goal_cadence")
    public Integer goalCadence;

    public Category withGoalCadence(Integer goalCadence) {
        this.goalCadence = goalCadence;
        return this;
    }
    
    /**
     * The goal cadence frequency
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("goal_cadence_frequency")
    public Integer goalCadenceFrequency;

    public Category withGoalCadenceFrequency(Integer goalCadenceFrequency) {
        this.goalCadenceFrequency = goalCadenceFrequency;
        return this;
    }
    
    /**
     * The month a goal was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("goal_creation_month")
    public LocalDate goalCreationMonth;

    public Category withGoalCreationMonth(LocalDate goalCreationMonth) {
        this.goalCreationMonth = goalCreationMonth;
        return this;
    }
    
    /**
     * The day of the goal
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("goal_day")
    public Integer goalDay;

    public Category withGoalDay(Integer goalDay) {
        this.goalDay = goalDay;
        return this;
    }
    
    /**
     * The number of months, including the current month, left in the current goal period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("goal_months_to_budget")
    public Integer goalMonthsToBudget;

    public Category withGoalMonthsToBudget(Integer goalMonthsToBudget) {
        this.goalMonthsToBudget = goalMonthsToBudget;
        return this;
    }
    
    /**
     * The total amount funded towards the goal within the current goal period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("goal_overall_funded")
    public Long goalOverallFunded;

    public Category withGoalOverallFunded(Long goalOverallFunded) {
        this.goalOverallFunded = goalOverallFunded;
        return this;
    }
    
    /**
     * The amount of funding still needed to complete the goal within the current goal period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("goal_overall_left")
    public Long goalOverallLeft;

    public Category withGoalOverallLeft(Long goalOverallLeft) {
        this.goalOverallLeft = goalOverallLeft;
        return this;
    }
    
    /**
     * The percentage completion of the goal
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("goal_percentage_complete")
    public Integer goalPercentageComplete;

    public Category withGoalPercentageComplete(Integer goalPercentageComplete) {
        this.goalPercentageComplete = goalPercentageComplete;
        return this;
    }
    
    /**
     * The goal target amount in milliunits
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("goal_target")
    public Long goalTarget;

    public Category withGoalTarget(Long goalTarget) {
        this.goalTarget = goalTarget;
        return this;
    }
    
    /**
     * The original target month for the goal to be completed.  Only some goal types specify this date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("goal_target_month")
    public LocalDate goalTargetMonth;

    public Category withGoalTargetMonth(LocalDate goalTargetMonth) {
        this.goalTargetMonth = goalTargetMonth;
        return this;
    }
    
    /**
     * The type of goal, if the category has a goal (TB='Target Category Balance', TBD='Target Category Balance by Date', MF='Monthly Funding', NEED='Plan Your Spending')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("goal_type")
    public CategoryGoalTypeEnum goalType;

    public Category withGoalType(CategoryGoalTypeEnum goalType) {
        this.goalType = goalType;
        return this;
    }
    
    /**
     * The amount of funding still needed in the current month to stay on track towards completing the goal within the current goal period.  This amount will generally correspond to the 'Underfunded' amount in the web and mobile clients except when viewing a category with a Needed for Spending Goal in a future month.  The web and mobile clients will ignore any funding from a prior goal period when viewing category with a Needed for Spending Goal in a future month.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("goal_under_funded")
    public Long goalUnderFunded;

    public Category withGoalUnderFunded(Long goalUnderFunded) {
        this.goalUnderFunded = goalUnderFunded;
        return this;
    }
    
    /**
     * Whether or not the category is hidden
     */
    @JsonProperty("hidden")
    public Boolean hidden;

    public Category withHidden(Boolean hidden) {
        this.hidden = hidden;
        return this;
    }
    
    @JsonProperty("id")
    public String id;

    public Category withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonProperty("name")
    public String name;

    public Category withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    public String note;

    public Category withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * DEPRECATED: No longer used.  Value will always be null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_category_group_id")
    public String originalCategoryGroupId;

    public Category withOriginalCategoryGroupId(String originalCategoryGroupId) {
        this.originalCategoryGroupId = originalCategoryGroupId;
        return this;
    }
    
    public Category(@JsonProperty("activity") Long activity, @JsonProperty("balance") Long balance, @JsonProperty("budgeted") Long budgeted, @JsonProperty("category_group_id") String categoryGroupId, @JsonProperty("deleted") Boolean deleted, @JsonProperty("hidden") Boolean hidden, @JsonProperty("id") String id, @JsonProperty("name") String name) {
        this.activity = activity;
        this.balance = balance;
        this.budgeted = budgeted;
        this.categoryGroupId = categoryGroupId;
        this.deleted = deleted;
        this.hidden = hidden;
        this.id = id;
        this.name = name;
  }
}
