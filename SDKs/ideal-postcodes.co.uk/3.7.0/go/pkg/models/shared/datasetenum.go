// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DatasetEnum - Indicates the provenance of an address.
//
//   - `paf` (GBR) Postcode Address File
//   - `mr` (GBR) Multiple Residence File
//   - `nyb` (GBR) Not Yet Built File
//   - `pafa` (GBR) Alias File
//   - `pafw` (GBR) Welsh File
//   - `ecaf` (IRL) Eircode ECAF
//   - `ecad` (IRL) Eircode ECAD
//   - `usps` (USA) USPS Zip+4
type DatasetEnum string

const (
	DatasetEnumPaf  DatasetEnum = "paf"
	DatasetEnumPafw DatasetEnum = "pafw"
	DatasetEnumPafa DatasetEnum = "pafa"
	DatasetEnumMr   DatasetEnum = "mr"
	DatasetEnumNyb  DatasetEnum = "nyb"
	DatasetEnumUsps DatasetEnum = "usps"
	DatasetEnumEcaf DatasetEnum = "ecaf"
	DatasetEnumEcad DatasetEnum = "ecad"
)

func (e *DatasetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "paf":
		fallthrough
	case "pafw":
		fallthrough
	case "pafa":
		fallthrough
	case "mr":
		fallthrough
	case "nyb":
		fallthrough
	case "usps":
		fallthrough
	case "ecaf":
		fallthrough
	case "ecad":
		*e = DatasetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DatasetEnum: %s", s)
	}
}
