// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ZapierRuleResponseRuleTypeEnum string

const (
	ZapierRuleResponseRuleTypeEnumHTTPZapier ZapierRuleResponseRuleTypeEnum = "http/zapier"
)

func (e ZapierRuleResponseRuleTypeEnum) ToPointer() *ZapierRuleResponseRuleTypeEnum {
	return &e
}

func (e *ZapierRuleResponseRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http/zapier":
		*e = ZapierRuleResponseRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ZapierRuleResponseRuleTypeEnum: %v", v)
	}
}

type ZapierRuleResponseTargetHeaders struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

type ZapierRuleResponseTarget struct {
	Headers      []ZapierRuleResponseTargetHeaders `json:"headers,omitempty"`
	SigningKeyID *string                           `json:"signingKeyId,omitempty"`
	URL          string                            `json:"url"`
}

type ZapierRuleResponse struct {
	Links       map[string]interface{}         `json:"_links,omitempty"`
	AppID       *string                        `json:"appId,omitempty"`
	Created     *float64                       `json:"created,omitempty"`
	ID          *string                        `json:"id,omitempty"`
	Modified    *float64                       `json:"modified,omitempty"`
	RequestMode string                         `json:"requestMode"`
	RuleType    ZapierRuleResponseRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                     `json:"source"`
	Status      *string                        `json:"status,omitempty"`
	Target      ZapierRuleResponseTarget       `json:"target"`
	Version     *string                        `json:"version,omitempty"`
}
