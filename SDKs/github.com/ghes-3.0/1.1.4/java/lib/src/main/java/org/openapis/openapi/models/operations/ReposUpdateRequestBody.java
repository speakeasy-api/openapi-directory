/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ReposUpdateRequestBody {
    /**
     * Either `true` to allow private forks, or `false` to prevent private forks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_forking")
    public Boolean allowForking;

    public ReposUpdateRequestBody withAllowForking(Boolean allowForking) {
        this.allowForking = allowForking;
        return this;
    }
    
    /**
     * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_merge_commit")
    public Boolean allowMergeCommit;

    public ReposUpdateRequestBody withAllowMergeCommit(Boolean allowMergeCommit) {
        this.allowMergeCommit = allowMergeCommit;
        return this;
    }
    
    /**
     * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_rebase_merge")
    public Boolean allowRebaseMerge;

    public ReposUpdateRequestBody withAllowRebaseMerge(Boolean allowRebaseMerge) {
        this.allowRebaseMerge = allowRebaseMerge;
        return this;
    }
    
    /**
     * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_squash_merge")
    public Boolean allowSquashMerge;

    public ReposUpdateRequestBody withAllowSquashMerge(Boolean allowSquashMerge) {
        this.allowSquashMerge = allowSquashMerge;
        return this;
    }
    
    /**
     * `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    public Boolean archived;

    public ReposUpdateRequestBody withArchived(Boolean archived) {
        this.archived = archived;
        return this;
    }
    
    /**
     * Updates the default branch for this repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_branch")
    public String defaultBranch;

    public ReposUpdateRequestBody withDefaultBranch(String defaultBranch) {
        this.defaultBranch = defaultBranch;
        return this;
    }
    
    /**
     * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delete_branch_on_merge")
    public Boolean deleteBranchOnMerge;

    public ReposUpdateRequestBody withDeleteBranchOnMerge(Boolean deleteBranchOnMerge) {
        this.deleteBranchOnMerge = deleteBranchOnMerge;
        return this;
    }
    
    /**
     * A short description of the repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public ReposUpdateRequestBody withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Either `true` to enable issues for this repository or `false` to disable them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_issues")
    public Boolean hasIssues;

    public ReposUpdateRequestBody withHasIssues(Boolean hasIssues) {
        this.hasIssues = hasIssues;
        return this;
    }
    
    /**
     * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_projects")
    public Boolean hasProjects;

    public ReposUpdateRequestBody withHasProjects(Boolean hasProjects) {
        this.hasProjects = hasProjects;
        return this;
    }
    
    /**
     * Either `true` to enable the wiki for this repository or `false` to disable it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_wiki")
    public Boolean hasWiki;

    public ReposUpdateRequestBody withHasWiki(Boolean hasWiki) {
        this.hasWiki = hasWiki;
        return this;
    }
    
    /**
     * A URL with more information about the repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("homepage")
    public String homepage;

    public ReposUpdateRequestBody withHomepage(String homepage) {
        this.homepage = homepage;
        return this;
    }
    
    /**
     * Either `true` to make this repo available as a template repository or `false` to prevent it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_template")
    public Boolean isTemplate;

    public ReposUpdateRequestBody withIsTemplate(Boolean isTemplate) {
        this.isTemplate = isTemplate;
        return this;
    }
    
    /**
     * The name of the repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public ReposUpdateRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Either `true` to make the repository private or `false` to make it public. Default: `false`.  
     * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private")
    public Boolean private_;

    public ReposUpdateRequestBody withPrivate(Boolean private_) {
        this.private_ = private_;
        return this;
    }
    
    /**
     * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`."
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibility")
    public ReposUpdateRequestBodyVisibilityEnum visibility;

    public ReposUpdateRequestBody withVisibility(ReposUpdateRequestBodyVisibilityEnum visibility) {
        this.visibility = visibility;
        return this;
    }
    
    public ReposUpdateRequestBody(){}
}
