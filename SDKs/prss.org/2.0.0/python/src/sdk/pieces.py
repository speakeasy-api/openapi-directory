"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Pieces:
    r"""Pieces define specific story or song level metadata within an episode and segment. For example, an 18 minute audio segment may be composed of multiple 2 or 3 minute pieces."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_api_v2_pieces_id_(self, request: operations.DeleteAPIV2PiecesIDRequest, security: operations.DeleteAPIV2PiecesIDSecurity) -> operations.DeleteAPIV2PiecesIDResponse:
        r"""Deletes the piece with the given ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAPIV2PiecesIDRequest, base_url, '/api/v2/pieces/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAPIV2PiecesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_api_v2_pieces(self, request: operations.GetAPIV2PiecesRequest, security: operations.GetAPIV2PiecesSecurity) -> operations.GetAPIV2PiecesResponse:
        r"""Returns the pieces matching the query parameters."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/pieces'
        
        query_params = utils.get_query_params(operations.GetAPIV2PiecesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV2PiecesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Piece]])
                res.pieces = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_api_v2_pieces_id_(self, request: operations.GetAPIV2PiecesIDRequest, security: operations.GetAPIV2PiecesIDSecurity) -> operations.GetAPIV2PiecesIDResponse:
        r"""Returns the piece matching the given ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV2PiecesIDRequest, base_url, '/api/v2/pieces/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV2PiecesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Piece])
                res.piece = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            pass

        return res

    def post_api_v2_pieces(self, request: shared.PieceInput, security: operations.PostAPIV2PiecesSecurity) -> operations.PostAPIV2PiecesResponse:
        r"""Create a new piece."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/pieces'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV2PiecesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Piece])
                res.piece = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 403:
            pass

        return res

    