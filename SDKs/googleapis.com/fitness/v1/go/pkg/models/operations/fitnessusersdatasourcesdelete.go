// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type FitnessUsersDataSourcesDeleteSecurityOption1 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type FitnessUsersDataSourcesDeleteSecurityOption10 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type FitnessUsersDataSourcesDeleteSecurityOption11 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type FitnessUsersDataSourcesDeleteSecurityOption2 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type FitnessUsersDataSourcesDeleteSecurityOption3 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type FitnessUsersDataSourcesDeleteSecurityOption4 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type FitnessUsersDataSourcesDeleteSecurityOption5 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type FitnessUsersDataSourcesDeleteSecurityOption6 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type FitnessUsersDataSourcesDeleteSecurityOption7 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type FitnessUsersDataSourcesDeleteSecurityOption8 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type FitnessUsersDataSourcesDeleteSecurityOption9 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type FitnessUsersDataSourcesDeleteSecurity struct {
	Option1  *FitnessUsersDataSourcesDeleteSecurityOption1  `security:"option"`
	Option10 *FitnessUsersDataSourcesDeleteSecurityOption10 `security:"option"`
	Option11 *FitnessUsersDataSourcesDeleteSecurityOption11 `security:"option"`
	Option2  *FitnessUsersDataSourcesDeleteSecurityOption2  `security:"option"`
	Option3  *FitnessUsersDataSourcesDeleteSecurityOption3  `security:"option"`
	Option4  *FitnessUsersDataSourcesDeleteSecurityOption4  `security:"option"`
	Option5  *FitnessUsersDataSourcesDeleteSecurityOption5  `security:"option"`
	Option6  *FitnessUsersDataSourcesDeleteSecurityOption6  `security:"option"`
	Option7  *FitnessUsersDataSourcesDeleteSecurityOption7  `security:"option"`
	Option8  *FitnessUsersDataSourcesDeleteSecurityOption8  `security:"option"`
	Option9  *FitnessUsersDataSourcesDeleteSecurityOption9  `security:"option"`
}

type FitnessUsersDataSourcesDeletePathParams struct {
	// The data stream ID of the data source to delete.
	DataSourceID string `pathParam:"style=simple,explode=false,name=dataSourceId"`
	// Retrieve a data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

type FitnessUsersDataSourcesDeleteQueryParams struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type FitnessUsersDataSourcesDeleteRequest struct {
	PathParams  FitnessUsersDataSourcesDeletePathParams
	QueryParams FitnessUsersDataSourcesDeleteQueryParams
	Security    FitnessUsersDataSourcesDeleteSecurity
}

type FitnessUsersDataSourcesDeleteResponse struct {
	ContentType string
	// Successful response
	DataSource  *shared.DataSource
	StatusCode  int
	RawResponse *http.Response
}
