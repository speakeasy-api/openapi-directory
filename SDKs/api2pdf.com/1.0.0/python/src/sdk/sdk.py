"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .headless_chrome import HeadlessChrome
from .libreoffice import LibreOffice
from .merge_combine_pdfs import MergeCombinePdfs
from .wkhtmltopdf import Wkhtmltopdf
from .zxing_zebra_crossing_bar_codes import ZXINGZebraCrossingBarCodes
from sdk.models import shared

SERVERS = [
    "https://v2018.api2pdf.com",
    r"""Api2Pdf.com API"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""# Introduction
    [Api2Pdf](https://www.api2pdf.com) is a powerful PDF generation API with no rate limits or file size constraints. Api2Pdf runs on AWS Lambda, a serverless architecture powered by Amazon to scale to millions of requests while being up to 90% cheaper than alternatives. **Supports wkhtmltopdf, Headless Chrome, LibreOffice, and PDF Merge.** You can also generate barcodes with ZXING (Zebra Crossing).
    # SDKs & Client Libraries
    We've made a number of open source libraries available for the API
    - Python: [https://github.com/api2pdf/api2pdf.python](https://github.com/api2pdf/api2pdf.python)
    - .NET: [https://github.com/api2pdf/api2pdf.dotnet](https://github.com/api2pdf/api2pdf.dotnet)
    - Nodejs: [https://github.com/api2pdf/api2pdf.node](https://github.com/api2pdf/api2pdf.node)
    - PHP: [https://github.com/Api2Pdf/api2pdf.php](https://github.com/Api2Pdf/api2pdf.php)
    - Ruby: (Coming soon)
    # Authorization
    Create an account at [portal.api2pdf.com](https://portal.api2pdf.com/register) to get an API key.
    
    **Authorize your API calls**
    - GET requests, include apikey=YOUR-API-KEY as a query string parameter
    - POST requests, add **Authorization** to your header.
    ``` Authorization: YOUR-API-KEY ```
    
    # Quickstart
    If you are looking for just a quick call to grab PDFs of a URL, you can do a GET request like:
    ``` https://v2018.api2pdf.com/chrome/url?url={UrlToConvert}&apikey={YourApiKey} ```
    
    For more advanced usage and settings, see the API specification below.
    https://www.api2pdf.com - Find out more about Api2Pdf
    """
    headless_chrome: HeadlessChrome
    libre_office: LibreOffice
    merge_combine_pdfs: MergeCombinePdfs
    zxing_zebra_crossing_bar_codes: ZXINGZebraCrossingBarCodes
    wkhtmltopdf: Wkhtmltopdf

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.headless_chrome = HeadlessChrome(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.libre_office = LibreOffice(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.merge_combine_pdfs = MergeCombinePdfs(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.zxing_zebra_crossing_bar_codes = ZXINGZebraCrossingBarCodes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.wkhtmltopdf = Wkhtmltopdf(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    