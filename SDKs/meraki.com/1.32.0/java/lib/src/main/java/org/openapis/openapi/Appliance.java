/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Appliance {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Appliance(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Generate a new vMX authentication token
     * Generate a new vMX authentication token
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeviceApplianceVmxAuthenticationTokenResponse createDeviceApplianceVmxAuthenticationToken(org.openapis.openapi.models.operations.CreateDeviceApplianceVmxAuthenticationTokenRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateDeviceApplianceVmxAuthenticationTokenRequest.class, baseUrl, "/devices/{serial}/appliance/vmx/authenticationToken", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateDeviceApplianceVmxAuthenticationTokenResponse res = new org.openapis.openapi.models.operations.CreateDeviceApplianceVmxAuthenticationTokenResponse(contentType, httpRes.statusCode()) {{
            createDeviceApplianceVmxAuthenticationToken201ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CreateDeviceApplianceVmxAuthenticationToken201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CreateDeviceApplianceVmxAuthenticationToken201ApplicationJSON.class);
                res.createDeviceApplianceVmxAuthenticationToken201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a static delegated prefix from a network
     * Add a static delegated prefix from a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateNetworkAppliancePrefixesDelegatedStaticResponse createNetworkAppliancePrefixesDelegatedStatic(org.openapis.openapi.models.operations.CreateNetworkAppliancePrefixesDelegatedStaticRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateNetworkAppliancePrefixesDelegatedStaticRequest.class, baseUrl, "/networks/{networkId}/appliance/prefixes/delegated/statics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateNetworkAppliancePrefixesDelegatedStaticResponse res = new org.openapis.openapi.models.operations.CreateNetworkAppliancePrefixesDelegatedStaticResponse(contentType, httpRes.statusCode()) {{
            createNetworkAppliancePrefixesDelegatedStatic201ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.createNetworkAppliancePrefixesDelegatedStatic201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a static route for an MX or teleworker network
     * Add a static route for an MX or teleworker network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateNetworkApplianceStaticRouteResponse createNetworkApplianceStaticRoute(org.openapis.openapi.models.operations.CreateNetworkApplianceStaticRouteRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateNetworkApplianceStaticRouteRequest.class, baseUrl, "/networks/{networkId}/appliance/staticRoutes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateNetworkApplianceStaticRouteResponse res = new org.openapis.openapi.models.operations.CreateNetworkApplianceStaticRouteResponse(contentType, httpRes.statusCode()) {{
            createNetworkApplianceStaticRoute201ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.createNetworkApplianceStaticRoute201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a custom performance class for an MX network
     * Add a custom performance class for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateNetworkApplianceTrafficShapingCustomPerformanceClassResponse createNetworkApplianceTrafficShapingCustomPerformanceClass(org.openapis.openapi.models.operations.CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest.class, baseUrl, "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateNetworkApplianceTrafficShapingCustomPerformanceClassResponse res = new org.openapis.openapi.models.operations.CreateNetworkApplianceTrafficShapingCustomPerformanceClassResponse(contentType, httpRes.statusCode()) {{
            createNetworkApplianceTrafficShapingCustomPerformanceClass201ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.createNetworkApplianceTrafficShapingCustomPerformanceClass201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a VLAN
     * Add a VLAN
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateNetworkApplianceVlanResponse createNetworkApplianceVlan(org.openapis.openapi.models.operations.CreateNetworkApplianceVlanRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateNetworkApplianceVlanRequest.class, baseUrl, "/networks/{networkId}/appliance/vlans", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateNetworkApplianceVlanResponse res = new org.openapis.openapi.models.operations.CreateNetworkApplianceVlanResponse(contentType, httpRes.statusCode()) {{
            createNetworkApplianceVlan201ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CreateNetworkApplianceVlan201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CreateNetworkApplianceVlan201ApplicationJSON.class);
                res.createNetworkApplianceVlan201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Delete a static delegated prefix from a network
     * Delete a static delegated prefix from a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteNetworkAppliancePrefixesDelegatedStaticResponse deleteNetworkAppliancePrefixesDelegatedStatic(org.openapis.openapi.models.operations.DeleteNetworkAppliancePrefixesDelegatedStaticRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteNetworkAppliancePrefixesDelegatedStaticRequest.class, baseUrl, "/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteNetworkAppliancePrefixesDelegatedStaticResponse res = new org.openapis.openapi.models.operations.DeleteNetworkAppliancePrefixesDelegatedStaticResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a static route from an MX or teleworker network
     * Delete a static route from an MX or teleworker network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteNetworkApplianceStaticRouteResponse deleteNetworkApplianceStaticRoute(org.openapis.openapi.models.operations.DeleteNetworkApplianceStaticRouteRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteNetworkApplianceStaticRouteRequest.class, baseUrl, "/networks/{networkId}/appliance/staticRoutes/{staticRouteId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteNetworkApplianceStaticRouteResponse res = new org.openapis.openapi.models.operations.DeleteNetworkApplianceStaticRouteResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a custom performance class from an MX network
     * Delete a custom performance class from an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteNetworkApplianceTrafficShapingCustomPerformanceClassResponse deleteNetworkApplianceTrafficShapingCustomPerformanceClass(org.openapis.openapi.models.operations.DeleteNetworkApplianceTrafficShapingCustomPerformanceClassRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteNetworkApplianceTrafficShapingCustomPerformanceClassRequest.class, baseUrl, "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteNetworkApplianceTrafficShapingCustomPerformanceClassResponse res = new org.openapis.openapi.models.operations.DeleteNetworkApplianceTrafficShapingCustomPerformanceClassResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a VLAN from a network
     * Delete a VLAN from a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteNetworkApplianceVlanResponse deleteNetworkApplianceVlan(org.openapis.openapi.models.operations.DeleteNetworkApplianceVlanRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteNetworkApplianceVlanRequest.class, baseUrl, "/networks/{networkId}/appliance/vlans/{vlanId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteNetworkApplianceVlanResponse res = new org.openapis.openapi.models.operations.DeleteNetworkApplianceVlanResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Return the DHCP subnet information for an appliance
     * Return the DHCP subnet information for an appliance
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetDeviceApplianceDhcpSubnetsResponse getDeviceApplianceDhcpSubnets(org.openapis.openapi.models.operations.GetDeviceApplianceDhcpSubnetsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetDeviceApplianceDhcpSubnetsRequest.class, baseUrl, "/devices/{serial}/appliance/dhcp/subnets", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDeviceApplianceDhcpSubnetsResponse res = new org.openapis.openapi.models.operations.GetDeviceApplianceDhcpSubnetsResponse(contentType, httpRes.statusCode()) {{
            getDeviceApplianceDhcpSubnets200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getDeviceApplianceDhcpSubnets200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Return the performance score for a single MX
     * Return the performance score for a single MX. Only primary MX devices supported. If no data is available, a 204 error code is returned.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetDeviceAppliancePerformanceResponse getDeviceAppliancePerformance(org.openapis.openapi.models.operations.GetDeviceAppliancePerformanceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetDeviceAppliancePerformanceRequest.class, baseUrl, "/devices/{serial}/appliance/performance", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDeviceAppliancePerformanceResponse res = new org.openapis.openapi.models.operations.GetDeviceAppliancePerformanceResponse(contentType, httpRes.statusCode()) {{
            getDeviceAppliancePerformance200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getDeviceAppliancePerformance200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return current delegated IPv6 prefixes on an appliance.
     * Return current delegated IPv6 prefixes on an appliance.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetDeviceAppliancePrefixesDelegatedResponse getDeviceAppliancePrefixesDelegated(org.openapis.openapi.models.operations.GetDeviceAppliancePrefixesDelegatedRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetDeviceAppliancePrefixesDelegatedRequest.class, baseUrl, "/devices/{serial}/appliance/prefixes/delegated", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDeviceAppliancePrefixesDelegatedResponse res = new org.openapis.openapi.models.operations.GetDeviceAppliancePrefixesDelegatedResponse(contentType, httpRes.statusCode()) {{
            getDeviceAppliancePrefixesDelegated200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getDeviceAppliancePrefixesDelegated200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Return prefixes assigned to all IPv6 enabled VLANs on an appliance.
     * Return prefixes assigned to all IPv6 enabled VLANs on an appliance.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetDeviceAppliancePrefixesDelegatedVlanAssignmentsResponse getDeviceAppliancePrefixesDelegatedVlanAssignments(org.openapis.openapi.models.operations.GetDeviceAppliancePrefixesDelegatedVlanAssignmentsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetDeviceAppliancePrefixesDelegatedVlanAssignmentsRequest.class, baseUrl, "/devices/{serial}/appliance/prefixes/delegated/vlanAssignments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDeviceAppliancePrefixesDelegatedVlanAssignmentsResponse res = new org.openapis.openapi.models.operations.GetDeviceAppliancePrefixesDelegatedVlanAssignmentsResponse(contentType, httpRes.statusCode()) {{
            getDeviceAppliancePrefixesDelegatedVlanAssignments200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getDeviceAppliancePrefixesDelegatedVlanAssignments200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Return the uplink settings for an MX appliance
     * Return the uplink settings for an MX appliance
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetDeviceApplianceUplinksSettingsResponse getDeviceApplianceUplinksSettings(org.openapis.openapi.models.operations.GetDeviceApplianceUplinksSettingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetDeviceApplianceUplinksSettingsRequest.class, baseUrl, "/devices/{serial}/appliance/uplinks/settings", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDeviceApplianceUplinksSettingsResponse res = new org.openapis.openapi.models.operations.GetDeviceApplianceUplinksSettingsResponse(contentType, httpRes.statusCode()) {{
            getDeviceApplianceUplinksSettings200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetDeviceApplianceUplinksSettings200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetDeviceApplianceUplinksSettings200ApplicationJSON.class);
                res.getDeviceApplianceUplinksSettings200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List the security events for a client
     * List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceClientSecurityEventsResponse getNetworkApplianceClientSecurityEvents(org.openapis.openapi.models.operations.GetNetworkApplianceClientSecurityEventsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceClientSecurityEventsRequest.class, baseUrl, "/networks/{networkId}/appliance/clients/{clientId}/security/events", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetNetworkApplianceClientSecurityEventsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceClientSecurityEventsResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceClientSecurityEventsResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceClientSecurityEvents200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getNetworkApplianceClientSecurityEvents200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Return the connectivity testing destinations for an MX network
     * Return the connectivity testing destinations for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceConnectivityMonitoringDestinationsResponse getNetworkApplianceConnectivityMonitoringDestinations(org.openapis.openapi.models.operations.GetNetworkApplianceConnectivityMonitoringDestinationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceConnectivityMonitoringDestinationsRequest.class, baseUrl, "/networks/{networkId}/appliance/connectivityMonitoringDestinations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceConnectivityMonitoringDestinationsResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceConnectivityMonitoringDestinationsResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceConnectivityMonitoringDestinations200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceConnectivityMonitoringDestinations200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return the content filtering settings for an MX network
     * Return the content filtering settings for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceContentFilteringResponse getNetworkApplianceContentFiltering(org.openapis.openapi.models.operations.GetNetworkApplianceContentFilteringRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceContentFilteringRequest.class, baseUrl, "/networks/{networkId}/appliance/contentFiltering", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceContentFilteringResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceContentFilteringResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceContentFiltering200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceContentFiltering200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List all available content filtering categories for an MX network
     * List all available content filtering categories for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceContentFilteringCategoriesResponse getNetworkApplianceContentFilteringCategories(org.openapis.openapi.models.operations.GetNetworkApplianceContentFilteringCategoriesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceContentFilteringCategoriesRequest.class, baseUrl, "/networks/{networkId}/appliance/contentFiltering/categories", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceContentFilteringCategoriesResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceContentFilteringCategoriesResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceContentFilteringCategories200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceContentFilteringCategories200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return the cellular firewall rules for an MX network
     * Return the cellular firewall rules for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceFirewallCellularFirewallRulesResponse getNetworkApplianceFirewallCellularFirewallRules(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallCellularFirewallRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallCellularFirewallRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/cellularFirewallRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceFirewallCellularFirewallRulesResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceFirewallCellularFirewallRulesResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceFirewallCellularFirewallRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceFirewallCellularFirewallRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceFirewallFirewalledServiceResponse getNetworkApplianceFirewallFirewalledService(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallFirewalledServiceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallFirewalledServiceRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/firewalledServices/{service}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceFirewallFirewalledServiceResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceFirewallFirewalledServiceResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceFirewallFirewalledService200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceFirewallFirewalledService200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List the appliance services and their accessibility rules
     * List the appliance services and their accessibility rules
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceFirewallFirewalledServicesResponse getNetworkApplianceFirewallFirewalledServices(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallFirewalledServicesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallFirewalledServicesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/firewalledServices", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceFirewallFirewalledServicesResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceFirewallFirewalledServicesResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceFirewallFirewalledServices200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getNetworkApplianceFirewallFirewalledServices200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Return the inbound cellular firewall rules for an MX network
     * Return the inbound cellular firewall rules for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceFirewallInboundCellularFirewallRulesResponse getNetworkApplianceFirewallInboundCellularFirewallRules(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallInboundCellularFirewallRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallInboundCellularFirewallRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/inboundCellularFirewallRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceFirewallInboundCellularFirewallRulesResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceFirewallInboundCellularFirewallRulesResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceFirewallInboundCellularFirewallRules200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getNetworkApplianceFirewallInboundCellularFirewallRules200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Return the inbound firewall rules for an MX network
     * Return the inbound firewall rules for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceFirewallInboundFirewallRulesResponse getNetworkApplianceFirewallInboundFirewallRules(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallInboundFirewallRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallInboundFirewallRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/inboundFirewallRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceFirewallInboundFirewallRulesResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceFirewallInboundFirewallRulesResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceFirewallInboundFirewallRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceFirewallInboundFirewallRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return the L3 firewall rules for an MX network
     * Return the L3 firewall rules for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceFirewallL3FirewallRulesResponse getNetworkApplianceFirewallL3FirewallRules(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallL3FirewallRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallL3FirewallRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/l3FirewallRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceFirewallL3FirewallRulesResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceFirewallL3FirewallRulesResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceFirewallL3FirewallRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceFirewallL3FirewallRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List the MX L7 firewall rules for an MX network
     * List the MX L7 firewall rules for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceFirewallL7FirewallRulesResponse getNetworkApplianceFirewallL7FirewallRules(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallL7FirewallRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallL7FirewallRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/l7FirewallRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceFirewallL7FirewallRulesResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceFirewallL7FirewallRulesResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceFirewallL7FirewallRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceFirewallL7FirewallRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return the L7 firewall application categories and their associated applications for an MX network
     * Return the L7 firewall application categories and their associated applications for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesResponse getNetworkApplianceFirewallL7FirewallRulesApplicationCategories(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/l7FirewallRules/applicationCategories", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceFirewallL7FirewallRulesApplicationCategories200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceFirewallL7FirewallRulesApplicationCategories200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return the 1:Many NAT mapping rules for an MX network
     * Return the 1:Many NAT mapping rules for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceFirewallOneToManyNatRulesResponse getNetworkApplianceFirewallOneToManyNatRules(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallOneToManyNatRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallOneToManyNatRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/oneToManyNatRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceFirewallOneToManyNatRulesResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceFirewallOneToManyNatRulesResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceFirewallOneToManyNatRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceFirewallOneToManyNatRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return the 1:1 NAT mapping rules for an MX network
     * Return the 1:1 NAT mapping rules for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceFirewallOneToOneNatRulesResponse getNetworkApplianceFirewallOneToOneNatRules(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallOneToOneNatRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallOneToOneNatRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/oneToOneNatRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceFirewallOneToOneNatRulesResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceFirewallOneToOneNatRulesResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceFirewallOneToOneNatRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceFirewallOneToOneNatRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return the port forwarding rules for an MX network
     * Return the port forwarding rules for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceFirewallPortForwardingRulesResponse getNetworkApplianceFirewallPortForwardingRules(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallPortForwardingRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallPortForwardingRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/portForwardingRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceFirewallPortForwardingRulesResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceFirewallPortForwardingRulesResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceFirewallPortForwardingRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceFirewallPortForwardingRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return the firewall settings for this network
     * Return the firewall settings for this network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceFirewallSettingsResponse getNetworkApplianceFirewallSettings(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallSettingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceFirewallSettingsRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/settings", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceFirewallSettingsResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceFirewallSettingsResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceFirewallSettings200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceFirewallSettings200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return per-port VLAN settings for a single MX port.
     * Return per-port VLAN settings for a single MX port.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkAppliancePortResponse getNetworkAppliancePort(org.openapis.openapi.models.operations.GetNetworkAppliancePortRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkAppliancePortRequest.class, baseUrl, "/networks/{networkId}/appliance/ports/{portId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkAppliancePortResponse res = new org.openapis.openapi.models.operations.GetNetworkAppliancePortResponse(contentType, httpRes.statusCode()) {{
            getNetworkAppliancePort200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkAppliancePort200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkAppliancePort200ApplicationJSON.class);
                res.getNetworkAppliancePort200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List per-port VLAN settings for all ports of a MX.
     * List per-port VLAN settings for all ports of a MX.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkAppliancePortsResponse getNetworkAppliancePorts(org.openapis.openapi.models.operations.GetNetworkAppliancePortsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkAppliancePortsRequest.class, baseUrl, "/networks/{networkId}/appliance/ports", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkAppliancePortsResponse res = new org.openapis.openapi.models.operations.GetNetworkAppliancePortsResponse(contentType, httpRes.statusCode()) {{
            getNetworkAppliancePorts200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkAppliancePorts200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkAppliancePorts200ApplicationJSON[].class);
                res.getNetworkAppliancePorts200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Return a static delegated prefix from a network
     * Return a static delegated prefix from a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkAppliancePrefixesDelegatedStaticResponse getNetworkAppliancePrefixesDelegatedStatic(org.openapis.openapi.models.operations.GetNetworkAppliancePrefixesDelegatedStaticRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkAppliancePrefixesDelegatedStaticRequest.class, baseUrl, "/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkAppliancePrefixesDelegatedStaticResponse res = new org.openapis.openapi.models.operations.GetNetworkAppliancePrefixesDelegatedStaticResponse(contentType, httpRes.statusCode()) {{
            getNetworkAppliancePrefixesDelegatedStatic200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkAppliancePrefixesDelegatedStatic200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkAppliancePrefixesDelegatedStatic200ApplicationJSON.class);
                res.getNetworkAppliancePrefixesDelegatedStatic200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List static delegated prefixes for a network
     * List static delegated prefixes for a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkAppliancePrefixesDelegatedStaticsResponse getNetworkAppliancePrefixesDelegatedStatics(org.openapis.openapi.models.operations.GetNetworkAppliancePrefixesDelegatedStaticsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkAppliancePrefixesDelegatedStaticsRequest.class, baseUrl, "/networks/{networkId}/appliance/prefixes/delegated/statics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkAppliancePrefixesDelegatedStaticsResponse res = new org.openapis.openapi.models.operations.GetNetworkAppliancePrefixesDelegatedStaticsResponse(contentType, httpRes.statusCode()) {{
            getNetworkAppliancePrefixesDelegatedStatics200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkAppliancePrefixesDelegatedStatics200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkAppliancePrefixesDelegatedStatics200ApplicationJSON[].class);
                res.getNetworkAppliancePrefixesDelegatedStatics200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * List the security events for a network
     * List the security events for a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceSecurityEventsResponse getNetworkApplianceSecurityEvents(org.openapis.openapi.models.operations.GetNetworkApplianceSecurityEventsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceSecurityEventsRequest.class, baseUrl, "/networks/{networkId}/appliance/security/events", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetNetworkApplianceSecurityEventsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceSecurityEventsResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceSecurityEventsResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceSecurityEvents200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getNetworkApplianceSecurityEvents200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Returns all supported intrusion settings for an MX network
     * Returns all supported intrusion settings for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceSecurityIntrusionResponse getNetworkApplianceSecurityIntrusion(org.openapis.openapi.models.operations.GetNetworkApplianceSecurityIntrusionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceSecurityIntrusionRequest.class, baseUrl, "/networks/{networkId}/appliance/security/intrusion", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceSecurityIntrusionResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceSecurityIntrusionResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceSecurityIntrusion200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceSecurityIntrusion200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns all supported malware settings for an MX network
     * Returns all supported malware settings for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceSecurityMalwareResponse getNetworkApplianceSecurityMalware(org.openapis.openapi.models.operations.GetNetworkApplianceSecurityMalwareRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceSecurityMalwareRequest.class, baseUrl, "/networks/{networkId}/appliance/security/malware", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceSecurityMalwareResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceSecurityMalwareResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceSecurityMalware200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceSecurityMalware200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return the appliance settings for a network
     * Return the appliance settings for a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceSettingsResponse getNetworkApplianceSettings(org.openapis.openapi.models.operations.GetNetworkApplianceSettingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceSettingsRequest.class, baseUrl, "/networks/{networkId}/appliance/settings", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceSettingsResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceSettingsResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceSettings200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkApplianceSettings200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkApplianceSettings200ApplicationJSON.class);
                res.getNetworkApplianceSettings200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return single LAN configuration
     * Return single LAN configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceSingleLanResponse getNetworkApplianceSingleLan(org.openapis.openapi.models.operations.GetNetworkApplianceSingleLanRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceSingleLanRequest.class, baseUrl, "/networks/{networkId}/appliance/singleLan", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceSingleLanResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceSingleLanResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceSingleLan200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkApplianceSingleLan200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkApplianceSingleLan200ApplicationJSON.class);
                res.getNetworkApplianceSingleLan200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return a single MX SSID
     * Return a single MX SSID
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceSsidResponse getNetworkApplianceSsid(org.openapis.openapi.models.operations.GetNetworkApplianceSsidRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceSsidRequest.class, baseUrl, "/networks/{networkId}/appliance/ssids/{number}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceSsidResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceSsidResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceSsid200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkApplianceSsid200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkApplianceSsid200ApplicationJSON.class);
                res.getNetworkApplianceSsid200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List the MX SSIDs in a network
     * List the MX SSIDs in a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceSsidsResponse getNetworkApplianceSsids(org.openapis.openapi.models.operations.GetNetworkApplianceSsidsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceSsidsRequest.class, baseUrl, "/networks/{networkId}/appliance/ssids", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceSsidsResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceSsidsResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceSsids200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkApplianceSsids200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkApplianceSsids200ApplicationJSON[].class);
                res.getNetworkApplianceSsids200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Return a static route for an MX or teleworker network
     * Return a static route for an MX or teleworker network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceStaticRouteResponse getNetworkApplianceStaticRoute(org.openapis.openapi.models.operations.GetNetworkApplianceStaticRouteRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceStaticRouteRequest.class, baseUrl, "/networks/{networkId}/appliance/staticRoutes/{staticRouteId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceStaticRouteResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceStaticRouteResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceStaticRoute200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceStaticRoute200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List the static routes for an MX or teleworker network
     * List the static routes for an MX or teleworker network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceStaticRoutesResponse getNetworkApplianceStaticRoutes(org.openapis.openapi.models.operations.GetNetworkApplianceStaticRoutesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceStaticRoutesRequest.class, baseUrl, "/networks/{networkId}/appliance/staticRoutes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceStaticRoutesResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceStaticRoutesResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceStaticRoutes200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getNetworkApplianceStaticRoutes200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Display the traffic shaping settings for an MX network
     * Display the traffic shaping settings for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingResponse getNetworkApplianceTrafficShaping(org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingRequest.class, baseUrl, "/networks/{networkId}/appliance/trafficShaping", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceTrafficShaping200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceTrafficShaping200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return a custom performance class for an MX network
     * Return a custom performance class for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingCustomPerformanceClassResponse getNetworkApplianceTrafficShapingCustomPerformanceClass(org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingCustomPerformanceClassRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingCustomPerformanceClassRequest.class, baseUrl, "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingCustomPerformanceClassResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingCustomPerformanceClassResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceTrafficShapingCustomPerformanceClass200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceTrafficShapingCustomPerformanceClass200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List all custom performance classes for an MX network
     * List all custom performance classes for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingCustomPerformanceClassesResponse getNetworkApplianceTrafficShapingCustomPerformanceClasses(org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingCustomPerformanceClassesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingCustomPerformanceClassesRequest.class, baseUrl, "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingCustomPerformanceClassesResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingCustomPerformanceClassesResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceTrafficShapingCustomPerformanceClasses200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getNetworkApplianceTrafficShapingCustomPerformanceClasses200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Display the traffic shaping settings rules for an MX network
     * Display the traffic shaping settings rules for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingRulesResponse getNetworkApplianceTrafficShapingRules(org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/trafficShaping/rules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingRulesResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingRulesResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceTrafficShapingRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceTrafficShapingRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns the uplink bandwidth limits for your MX network
     * Returns the uplink bandwidth limits for your MX network. This may not reflect the affected device's hardware capabilities.  For more information on your device's hardware capabilities, please consult our MX Family Datasheet - [https://meraki.cisco.com/product-collateral/mx-family-datasheet/?file]
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingUplinkBandwidthResponse getNetworkApplianceTrafficShapingUplinkBandwidth(org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingUplinkBandwidthRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingUplinkBandwidthRequest.class, baseUrl, "/networks/{networkId}/appliance/trafficShaping/uplinkBandwidth", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingUplinkBandwidthResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingUplinkBandwidthResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSON.class);
                res.getNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Show uplink selection settings for an MX network
     * Show uplink selection settings for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingUplinkSelectionResponse getNetworkApplianceTrafficShapingUplinkSelection(org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingUplinkSelectionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingUplinkSelectionRequest.class, baseUrl, "/networks/{networkId}/appliance/trafficShaping/uplinkSelection", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingUplinkSelectionResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingUplinkSelectionResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSON.class);
                res.getNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get the sent and received bytes for each uplink of a network.
     * Get the sent and received bytes for each uplink of a network.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceUplinksUsageHistoryResponse getNetworkApplianceUplinksUsageHistory(org.openapis.openapi.models.operations.GetNetworkApplianceUplinksUsageHistoryRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceUplinksUsageHistoryRequest.class, baseUrl, "/networks/{networkId}/appliance/uplinks/usageHistory", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetNetworkApplianceUplinksUsageHistoryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceUplinksUsageHistoryResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceUplinksUsageHistoryResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceUplinksUsageHistory200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getNetworkApplianceUplinksUsageHistory200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Return a VLAN
     * Return a VLAN
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceVlanResponse getNetworkApplianceVlan(org.openapis.openapi.models.operations.GetNetworkApplianceVlanRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceVlanRequest.class, baseUrl, "/networks/{networkId}/appliance/vlans/{vlanId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceVlanResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceVlanResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceVlan200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkApplianceVlan200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkApplianceVlan200ApplicationJSON.class);
                res.getNetworkApplianceVlan200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List the VLANs for an MX network
     * List the VLANs for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceVlansResponse getNetworkApplianceVlans(org.openapis.openapi.models.operations.GetNetworkApplianceVlansRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceVlansRequest.class, baseUrl, "/networks/{networkId}/appliance/vlans", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceVlansResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceVlansResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceVlans200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkApplianceVlans200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkApplianceVlans200ApplicationJSON[].class);
                res.getNetworkApplianceVlans200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Returns the enabled status of VLANs for the network
     * Returns the enabled status of VLANs for the network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceVlansSettingsResponse getNetworkApplianceVlansSettings(org.openapis.openapi.models.operations.GetNetworkApplianceVlansSettingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceVlansSettingsRequest.class, baseUrl, "/networks/{networkId}/appliance/vlans/settings", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceVlansSettingsResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceVlansSettingsResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceVlansSettings200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceVlansSettings200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return a Hub BGP Configuration
     * Return a Hub BGP Configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceVpnBgpResponse getNetworkApplianceVpnBgp(org.openapis.openapi.models.operations.GetNetworkApplianceVpnBgpRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceVpnBgpRequest.class, baseUrl, "/networks/{networkId}/appliance/vpn/bgp", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceVpnBgpResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceVpnBgpResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceVpnBgp200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceVpnBgp200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return the site-to-site VPN settings of a network
     * Return the site-to-site VPN settings of a network. Only valid for MX networks.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceVpnSiteToSiteVpnResponse getNetworkApplianceVpnSiteToSiteVpn(org.openapis.openapi.models.operations.GetNetworkApplianceVpnSiteToSiteVpnRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceVpnSiteToSiteVpnRequest.class, baseUrl, "/networks/{networkId}/appliance/vpn/siteToSiteVpn", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceVpnSiteToSiteVpnResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceVpnSiteToSiteVpnResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetNetworkApplianceVpnSiteToSiteVpn200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetNetworkApplianceVpnSiteToSiteVpn200ApplicationJSON.class);
                res.getNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return MX warm spare settings
     * Return MX warm spare settings
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetNetworkApplianceWarmSpareResponse getNetworkApplianceWarmSpare(org.openapis.openapi.models.operations.GetNetworkApplianceWarmSpareRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetNetworkApplianceWarmSpareRequest.class, baseUrl, "/networks/{networkId}/appliance/warmSpare", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetNetworkApplianceWarmSpareResponse res = new org.openapis.openapi.models.operations.GetNetworkApplianceWarmSpareResponse(contentType, httpRes.statusCode()) {{
            getNetworkApplianceWarmSpare200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getNetworkApplianceWarmSpare200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List the security events for an organization
     * List the security events for an organization
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetOrganizationApplianceSecurityEventsResponse getOrganizationApplianceSecurityEvents(org.openapis.openapi.models.operations.GetOrganizationApplianceSecurityEventsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetOrganizationApplianceSecurityEventsRequest.class, baseUrl, "/organizations/{organizationId}/appliance/security/events", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetOrganizationApplianceSecurityEventsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetOrganizationApplianceSecurityEventsResponse res = new org.openapis.openapi.models.operations.GetOrganizationApplianceSecurityEventsResponse(contentType, httpRes.statusCode()) {{
            getOrganizationApplianceSecurityEvents200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getOrganizationApplianceSecurityEvents200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Returns all supported intrusion settings for an organization
     * Returns all supported intrusion settings for an organization
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetOrganizationApplianceSecurityIntrusionResponse getOrganizationApplianceSecurityIntrusion(org.openapis.openapi.models.operations.GetOrganizationApplianceSecurityIntrusionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetOrganizationApplianceSecurityIntrusionRequest.class, baseUrl, "/organizations/{organizationId}/appliance/security/intrusion", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetOrganizationApplianceSecurityIntrusionResponse res = new org.openapis.openapi.models.operations.GetOrganizationApplianceSecurityIntrusionResponse(contentType, httpRes.statusCode()) {{
            getOrganizationApplianceSecurityIntrusion200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getOrganizationApplianceSecurityIntrusion200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List the uplink status of every Meraki MX and Z series appliances in the organization
     * List the uplink status of every Meraki MX and Z series appliances in the organization
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetOrganizationApplianceUplinkStatusesResponse getOrganizationApplianceUplinkStatuses(org.openapis.openapi.models.operations.GetOrganizationApplianceUplinkStatusesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetOrganizationApplianceUplinkStatusesRequest.class, baseUrl, "/organizations/{organizationId}/appliance/uplink/statuses", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetOrganizationApplianceUplinkStatusesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetOrganizationApplianceUplinkStatusesResponse res = new org.openapis.openapi.models.operations.GetOrganizationApplianceUplinkStatusesResponse(contentType, httpRes.statusCode()) {{
            getOrganizationApplianceUplinkStatuses200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getOrganizationApplianceUplinkStatuses200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Show VPN history stat for networks in an organization
     * Show VPN history stat for networks in an organization
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetOrganizationApplianceVpnStatsResponse getOrganizationApplianceVpnStats(org.openapis.openapi.models.operations.GetOrganizationApplianceVpnStatsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetOrganizationApplianceVpnStatsRequest.class, baseUrl, "/organizations/{organizationId}/appliance/vpn/stats", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetOrganizationApplianceVpnStatsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetOrganizationApplianceVpnStatsResponse res = new org.openapis.openapi.models.operations.GetOrganizationApplianceVpnStatsResponse(contentType, httpRes.statusCode()) {{
            getOrganizationApplianceVpnStats200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getOrganizationApplianceVpnStats200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Show VPN status for networks in an organization
     * Show VPN status for networks in an organization
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetOrganizationApplianceVpnStatusesResponse getOrganizationApplianceVpnStatuses(org.openapis.openapi.models.operations.GetOrganizationApplianceVpnStatusesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetOrganizationApplianceVpnStatusesRequest.class, baseUrl, "/organizations/{organizationId}/appliance/vpn/statuses", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetOrganizationApplianceVpnStatusesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetOrganizationApplianceVpnStatusesResponse res = new org.openapis.openapi.models.operations.GetOrganizationApplianceVpnStatusesResponse(contentType, httpRes.statusCode()) {{
            getOrganizationApplianceVpnStatuses200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getOrganizationApplianceVpnStatuses200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Return the third party VPN peers for an organization
     * Return the third party VPN peers for an organization
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetOrganizationApplianceVPNThirdPartyVPNPeersResponse getOrganizationApplianceVPNThirdPartyVPNPeers(org.openapis.openapi.models.operations.GetOrganizationApplianceVPNThirdPartyVPNPeersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetOrganizationApplianceVPNThirdPartyVPNPeersRequest.class, baseUrl, "/organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetOrganizationApplianceVPNThirdPartyVPNPeersResponse res = new org.openapis.openapi.models.operations.GetOrganizationApplianceVPNThirdPartyVPNPeersResponse(contentType, httpRes.statusCode()) {{
            getOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSON.class);
                res.getOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return the firewall rules for an organization's site-to-site VPN
     * Return the firewall rules for an organization's site-to-site VPN
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetOrganizationApplianceVpnVpnFirewallRulesResponse getOrganizationApplianceVpnVpnFirewallRules(org.openapis.openapi.models.operations.GetOrganizationApplianceVpnVpnFirewallRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetOrganizationApplianceVpnVpnFirewallRulesRequest.class, baseUrl, "/organizations/{organizationId}/appliance/vpn/vpnFirewallRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetOrganizationApplianceVpnVpnFirewallRulesResponse res = new org.openapis.openapi.models.operations.GetOrganizationApplianceVpnVpnFirewallRulesResponse(contentType, httpRes.statusCode()) {{
            getOrganizationApplianceVpnVpnFirewallRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getOrganizationApplianceVpnVpnFirewallRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Swap MX primary and warm spare appliances
     * Swap MX primary and warm spare appliances
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SwapNetworkApplianceWarmSpareResponse swapNetworkApplianceWarmSpare(org.openapis.openapi.models.operations.SwapNetworkApplianceWarmSpareRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SwapNetworkApplianceWarmSpareRequest.class, baseUrl, "/networks/{networkId}/appliance/warmSpare/swap", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SwapNetworkApplianceWarmSpareResponse res = new org.openapis.openapi.models.operations.SwapNetworkApplianceWarmSpareResponse(contentType, httpRes.statusCode()) {{
            swapNetworkApplianceWarmSpare200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.swapNetworkApplianceWarmSpare200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the uplink settings for an MX appliance
     * Update the uplink settings for an MX appliance
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDeviceApplianceUplinksSettingsResponse updateDeviceApplianceUplinksSettings(org.openapis.openapi.models.operations.UpdateDeviceApplianceUplinksSettingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateDeviceApplianceUplinksSettingsRequest.class, baseUrl, "/devices/{serial}/appliance/uplinks/settings", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateDeviceApplianceUplinksSettingsResponse res = new org.openapis.openapi.models.operations.UpdateDeviceApplianceUplinksSettingsResponse(contentType, httpRes.statusCode()) {{
            updateDeviceApplianceUplinksSettings200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateDeviceApplianceUplinksSettings200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateDeviceApplianceUplinksSettings200ApplicationJSON.class);
                res.updateDeviceApplianceUplinksSettings200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the connectivity testing destinations for an MX network
     * Update the connectivity testing destinations for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceConnectivityMonitoringDestinationsResponse updateNetworkApplianceConnectivityMonitoringDestinations(org.openapis.openapi.models.operations.UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest.class, baseUrl, "/networks/{networkId}/appliance/connectivityMonitoringDestinations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceConnectivityMonitoringDestinationsResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceConnectivityMonitoringDestinationsResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceConnectivityMonitoringDestinations200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceConnectivityMonitoringDestinations200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the content filtering settings for an MX network
     * Update the content filtering settings for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceContentFilteringResponse updateNetworkApplianceContentFiltering(org.openapis.openapi.models.operations.UpdateNetworkApplianceContentFilteringRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceContentFilteringRequest.class, baseUrl, "/networks/{networkId}/appliance/contentFiltering", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceContentFilteringResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceContentFilteringResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceContentFiltering200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceContentFiltering200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the cellular firewall rules of an MX network
     * Update the cellular firewall rules of an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallCellularFirewallRulesResponse updateNetworkApplianceFirewallCellularFirewallRules(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallCellularFirewallRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallCellularFirewallRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/cellularFirewallRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallCellularFirewallRulesResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallCellularFirewallRulesResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceFirewallCellularFirewallRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceFirewallCellularFirewallRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallFirewalledServiceResponse updateNetworkApplianceFirewallFirewalledService(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallFirewalledServiceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallFirewalledServiceRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/firewalledServices/{service}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallFirewalledServiceResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallFirewalledServiceResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceFirewallFirewalledService200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceFirewallFirewalledService200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the inbound cellular firewall rules of an MX network
     * Update the inbound cellular firewall rules of an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallInboundCellularFirewallRulesResponse updateNetworkApplianceFirewallInboundCellularFirewallRules(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallInboundCellularFirewallRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallInboundCellularFirewallRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/inboundCellularFirewallRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallInboundCellularFirewallRulesResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallInboundCellularFirewallRulesResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceFirewallInboundCellularFirewallRules200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.updateNetworkApplianceFirewallInboundCellularFirewallRules200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Update the inbound firewall rules of an MX network
     * Update the inbound firewall rules of an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallInboundFirewallRulesResponse updateNetworkApplianceFirewallInboundFirewallRules(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallInboundFirewallRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallInboundFirewallRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/inboundFirewallRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallInboundFirewallRulesResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallInboundFirewallRulesResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceFirewallInboundFirewallRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceFirewallInboundFirewallRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the L3 firewall rules of an MX network
     * Update the L3 firewall rules of an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallL3FirewallRulesResponse updateNetworkApplianceFirewallL3FirewallRules(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallL3FirewallRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallL3FirewallRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/l3FirewallRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallL3FirewallRulesResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallL3FirewallRulesResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceFirewallL3FirewallRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceFirewallL3FirewallRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the MX L7 firewall rules for an MX network
     * Update the MX L7 firewall rules for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallL7FirewallRulesResponse updateNetworkApplianceFirewallL7FirewallRules(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallL7FirewallRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallL7FirewallRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/l7FirewallRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallL7FirewallRulesResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallL7FirewallRulesResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceFirewallL7FirewallRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceFirewallL7FirewallRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Set the 1:Many NAT mapping rules for an MX network
     * Set the 1:Many NAT mapping rules for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallOneToManyNatRulesResponse updateNetworkApplianceFirewallOneToManyNatRules(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallOneToManyNatRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallOneToManyNatRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/oneToManyNatRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallOneToManyNatRulesResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallOneToManyNatRulesResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceFirewallOneToManyNatRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceFirewallOneToManyNatRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Set the 1:1 NAT mapping rules for an MX network
     * Set the 1:1 NAT mapping rules for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallOneToOneNatRulesResponse updateNetworkApplianceFirewallOneToOneNatRules(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallOneToOneNatRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallOneToOneNatRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/oneToOneNatRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallOneToOneNatRulesResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallOneToOneNatRulesResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceFirewallOneToOneNatRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceFirewallOneToOneNatRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the port forwarding rules for an MX network
     * Update the port forwarding rules for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallPortForwardingRulesResponse updateNetworkApplianceFirewallPortForwardingRules(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallPortForwardingRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallPortForwardingRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/portForwardingRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallPortForwardingRulesResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallPortForwardingRulesResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceFirewallPortForwardingRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceFirewallPortForwardingRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the firewall settings for this network
     * Update the firewall settings for this network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallSettingsResponse updateNetworkApplianceFirewallSettings(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallSettingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallSettingsRequest.class, baseUrl, "/networks/{networkId}/appliance/firewall/settings", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallSettingsResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceFirewallSettingsResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceFirewallSettings200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceFirewallSettings200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the per-port VLAN settings for a single MX port.
     * Update the per-port VLAN settings for a single MX port.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkAppliancePortResponse updateNetworkAppliancePort(org.openapis.openapi.models.operations.UpdateNetworkAppliancePortRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkAppliancePortRequest.class, baseUrl, "/networks/{networkId}/appliance/ports/{portId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkAppliancePortResponse res = new org.openapis.openapi.models.operations.UpdateNetworkAppliancePortResponse(contentType, httpRes.statusCode()) {{
            updateNetworkAppliancePort200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateNetworkAppliancePort200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateNetworkAppliancePort200ApplicationJSON.class);
                res.updateNetworkAppliancePort200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update a static delegated prefix from a network
     * Update a static delegated prefix from a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkAppliancePrefixesDelegatedStaticResponse updateNetworkAppliancePrefixesDelegatedStatic(org.openapis.openapi.models.operations.UpdateNetworkAppliancePrefixesDelegatedStaticRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkAppliancePrefixesDelegatedStaticRequest.class, baseUrl, "/networks/{networkId}/appliance/prefixes/delegated/statics/{staticDelegatedPrefixId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkAppliancePrefixesDelegatedStaticResponse res = new org.openapis.openapi.models.operations.UpdateNetworkAppliancePrefixesDelegatedStaticResponse(contentType, httpRes.statusCode()) {{
            updateNetworkAppliancePrefixesDelegatedStatic200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkAppliancePrefixesDelegatedStatic200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Set the supported intrusion settings for an MX network
     * Set the supported intrusion settings for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceSecurityIntrusionResponse updateNetworkApplianceSecurityIntrusion(org.openapis.openapi.models.operations.UpdateNetworkApplianceSecurityIntrusionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceSecurityIntrusionRequest.class, baseUrl, "/networks/{networkId}/appliance/security/intrusion", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceSecurityIntrusionResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceSecurityIntrusionResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceSecurityIntrusion200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceSecurityIntrusion200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Set the supported malware settings for an MX network
     * Set the supported malware settings for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceSecurityMalwareResponse updateNetworkApplianceSecurityMalware(org.openapis.openapi.models.operations.UpdateNetworkApplianceSecurityMalwareRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceSecurityMalwareRequest.class, baseUrl, "/networks/{networkId}/appliance/security/malware", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceSecurityMalwareResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceSecurityMalwareResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceSecurityMalware200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceSecurityMalware200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the appliance settings for a network
     * Update the appliance settings for a network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceSettingsResponse updateNetworkApplianceSettings(org.openapis.openapi.models.operations.UpdateNetworkApplianceSettingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceSettingsRequest.class, baseUrl, "/networks/{networkId}/appliance/settings", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceSettingsResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceSettingsResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceSettings200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateNetworkApplianceSettings200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateNetworkApplianceSettings200ApplicationJSON.class);
                res.updateNetworkApplianceSettings200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update single LAN configuration
     * Update single LAN configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceSingleLanResponse updateNetworkApplianceSingleLan(org.openapis.openapi.models.operations.UpdateNetworkApplianceSingleLanRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceSingleLanRequest.class, baseUrl, "/networks/{networkId}/appliance/singleLan", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceSingleLanResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceSingleLanResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceSingleLan200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateNetworkApplianceSingleLan200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateNetworkApplianceSingleLan200ApplicationJSON.class);
                res.updateNetworkApplianceSingleLan200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the attributes of an MX SSID
     * Update the attributes of an MX SSID
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceSsidResponse updateNetworkApplianceSsid(org.openapis.openapi.models.operations.UpdateNetworkApplianceSsidRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceSsidRequest.class, baseUrl, "/networks/{networkId}/appliance/ssids/{number}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceSsidResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceSsidResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceSsid200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateNetworkApplianceSsid200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateNetworkApplianceSsid200ApplicationJSON.class);
                res.updateNetworkApplianceSsid200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update a static route for an MX or teleworker network
     * Update a static route for an MX or teleworker network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceStaticRouteResponse updateNetworkApplianceStaticRoute(org.openapis.openapi.models.operations.UpdateNetworkApplianceStaticRouteRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceStaticRouteRequest.class, baseUrl, "/networks/{networkId}/appliance/staticRoutes/{staticRouteId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceStaticRouteResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceStaticRouteResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceStaticRoute200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceStaticRoute200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the traffic shaping settings for an MX network
     * Update the traffic shaping settings for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingResponse updateNetworkApplianceTrafficShaping(org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingRequest.class, baseUrl, "/networks/{networkId}/appliance/trafficShaping", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceTrafficShaping200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceTrafficShaping200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update a custom performance class for an MX network
     * Update a custom performance class for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingCustomPerformanceClassResponse updateNetworkApplianceTrafficShapingCustomPerformanceClass(org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest.class, baseUrl, "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingCustomPerformanceClassResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingCustomPerformanceClassResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceTrafficShapingCustomPerformanceClass200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceTrafficShapingCustomPerformanceClass200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the traffic shaping settings rules for an MX network
     * Update the traffic shaping settings rules for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingRulesResponse updateNetworkApplianceTrafficShapingRules(org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingRulesRequest.class, baseUrl, "/networks/{networkId}/appliance/trafficShaping/rules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingRulesResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingRulesResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceTrafficShapingRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceTrafficShapingRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Updates the uplink bandwidth settings for your MX network.
     * Updates the uplink bandwidth settings for your MX network.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingUplinkBandwidthResponse updateNetworkApplianceTrafficShapingUplinkBandwidth(org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest.class, baseUrl, "/networks/{networkId}/appliance/trafficShaping/uplinkBandwidth", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingUplinkBandwidthResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingUplinkBandwidthResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceTrafficShapingUplinkBandwidth200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update uplink selection settings for an MX network
     * Update uplink selection settings for an MX network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingUplinkSelectionResponse updateNetworkApplianceTrafficShapingUplinkSelection(org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest.class, baseUrl, "/networks/{networkId}/appliance/trafficShaping/uplinkSelection", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingUplinkSelectionResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingUplinkSelectionResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSON.class);
                res.updateNetworkApplianceTrafficShapingUplinkSelection200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update a VLAN
     * Update a VLAN
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceVlanResponse updateNetworkApplianceVlan(org.openapis.openapi.models.operations.UpdateNetworkApplianceVlanRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceVlanRequest.class, baseUrl, "/networks/{networkId}/appliance/vlans/{vlanId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceVlanResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceVlanResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceVlan200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateNetworkApplianceVlan200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateNetworkApplianceVlan200ApplicationJSON.class);
                res.updateNetworkApplianceVlan200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Enable/Disable VLANs for the given network
     * Enable/Disable VLANs for the given network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceVlansSettingsResponse updateNetworkApplianceVlansSettings(org.openapis.openapi.models.operations.UpdateNetworkApplianceVlansSettingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceVlansSettingsRequest.class, baseUrl, "/networks/{networkId}/appliance/vlans/settings", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceVlansSettingsResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceVlansSettingsResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceVlansSettings200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceVlansSettings200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update a Hub BGP Configuration
     * Update a Hub BGP Configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceVpnBgpResponse updateNetworkApplianceVpnBgp(org.openapis.openapi.models.operations.UpdateNetworkApplianceVpnBgpRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceVpnBgpRequest.class, baseUrl, "/networks/{networkId}/appliance/vpn/bgp", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceVpnBgpResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceVpnBgpResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceVpnBgp200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceVpnBgp200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the site-to-site VPN settings of a network
     * Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceVpnSiteToSiteVpnResponse updateNetworkApplianceVpnSiteToSiteVpn(org.openapis.openapi.models.operations.UpdateNetworkApplianceVpnSiteToSiteVpnRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceVpnSiteToSiteVpnRequest.class, baseUrl, "/networks/{networkId}/appliance/vpn/siteToSiteVpn", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceVpnSiteToSiteVpnResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceVpnSiteToSiteVpnResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSON.class);
                res.updateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update MX warm spare settings
     * Update MX warm spare settings
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateNetworkApplianceWarmSpareResponse updateNetworkApplianceWarmSpare(org.openapis.openapi.models.operations.UpdateNetworkApplianceWarmSpareRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateNetworkApplianceWarmSpareRequest.class, baseUrl, "/networks/{networkId}/appliance/warmSpare", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateNetworkApplianceWarmSpareResponse res = new org.openapis.openapi.models.operations.UpdateNetworkApplianceWarmSpareResponse(contentType, httpRes.statusCode()) {{
            updateNetworkApplianceWarmSpare200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateNetworkApplianceWarmSpare200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Sets supported intrusion settings for an organization
     * Sets supported intrusion settings for an organization
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateOrganizationApplianceSecurityIntrusionResponse updateOrganizationApplianceSecurityIntrusion(org.openapis.openapi.models.operations.UpdateOrganizationApplianceSecurityIntrusionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateOrganizationApplianceSecurityIntrusionRequest.class, baseUrl, "/organizations/{organizationId}/appliance/security/intrusion", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateOrganizationApplianceSecurityIntrusionResponse res = new org.openapis.openapi.models.operations.UpdateOrganizationApplianceSecurityIntrusionResponse(contentType, httpRes.statusCode()) {{
            updateOrganizationApplianceSecurityIntrusion200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateOrganizationApplianceSecurityIntrusion200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the third party VPN peers for an organization
     * Update the third party VPN peers for an organization
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateOrganizationApplianceVPNThirdPartyVPNPeersResponse updateOrganizationApplianceVPNThirdPartyVPNPeers(org.openapis.openapi.models.operations.UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequest.class, baseUrl, "/organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateOrganizationApplianceVPNThirdPartyVPNPeersResponse res = new org.openapis.openapi.models.operations.UpdateOrganizationApplianceVPNThirdPartyVPNPeersResponse(contentType, httpRes.statusCode()) {{
            updateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSON.class);
                res.updateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the firewall rules of an organization's site-to-site VPN
     * Update the firewall rules of an organization's site-to-site VPN
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateOrganizationApplianceVpnVpnFirewallRulesResponse updateOrganizationApplianceVpnVpnFirewallRules(org.openapis.openapi.models.operations.UpdateOrganizationApplianceVpnVpnFirewallRulesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateOrganizationApplianceVpnVpnFirewallRulesRequest.class, baseUrl, "/organizations/{organizationId}/appliance/vpn/vpnFirewallRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateOrganizationApplianceVpnVpnFirewallRulesResponse res = new org.openapis.openapi.models.operations.UpdateOrganizationApplianceVpnVpnFirewallRulesResponse(contentType, httpRes.statusCode()) {{
            updateOrganizationApplianceVpnVpnFirewallRules200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.updateOrganizationApplianceVpnVpnFirewallRules200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}