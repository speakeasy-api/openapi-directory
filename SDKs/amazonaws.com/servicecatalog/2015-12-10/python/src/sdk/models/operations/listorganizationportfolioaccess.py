"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listorganizationportfolioaccessinput as shared_listorganizationportfolioaccessinput
from ..shared import listorganizationportfolioaccessoutput as shared_listorganizationportfolioaccessoutput
from enum import Enum
from typing import Any, Optional

class ListOrganizationPortfolioAccessXAmzTargetEnum(str, Enum):
    AWS242_SERVICE_CATALOG_SERVICE_LIST_ORGANIZATION_PORTFOLIO_ACCESS = 'AWS242ServiceCatalogService.ListOrganizationPortfolioAccess'


@dataclasses.dataclass
class ListOrganizationPortfolioAccessRequest:
    
    list_organization_portfolio_access_input: shared_listorganizationportfolioaccessinput.ListOrganizationPortfolioAccessInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: ListOrganizationPortfolioAccessXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    page_size: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PageSize', 'style': 'form', 'explode': True }})
    r"""Pagination limit"""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PageToken', 'style': 'form', 'explode': True }})
    r"""Pagination token"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListOrganizationPortfolioAccessResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    invalid_parameters_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParametersException"""  
    list_organization_portfolio_access_output: Optional[shared_listorganizationportfolioaccessoutput.ListOrganizationPortfolioAccessOutput] = dataclasses.field(default=None)
    r"""Success"""  
    operation_not_supported_exception: Optional[Any] = dataclasses.field(default=None)
    r"""OperationNotSupportedException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    