"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import allocateinfo as shared_allocateinfo
from ..shared import metricvalueset as shared_metricvalueset
from ..shared import quotaerror as shared_quotaerror
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AllocateQuotaResponse:
    r"""Response message for the AllocateQuota method."""
    
    allocate_errors: Optional[list[shared_quotaerror.QuotaError]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allocateErrors'), 'exclude': lambda f: f is None }})
    r"""Indicates the decision of the allocate."""  
    allocate_info: Optional[shared_allocateinfo.AllocateInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allocateInfo'), 'exclude': lambda f: f is None }})  
    operation_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operationId'), 'exclude': lambda f: f is None }})
    r"""The same operation_id value used in the AllocateQuotaRequest. Used for logging and diagnostics purposes."""  
    quota_metrics: Optional[list[shared_metricvalueset.MetricValueSet]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quotaMetrics'), 'exclude': lambda f: f is None }})
    r"""Quota metrics to indicate the result of allocation. Depending on the request, one or more of the following metrics will be included: 1. Per quota group or per quota metric incremental usage will be specified using the following delta metric : \\"serviceruntime.googleapis.com/api/consumer/quota_used_count\\" 2. The quota limit reached condition will be specified using the following boolean metric : \\"serviceruntime.googleapis.com/quota/exceeded\\" """  
    service_config_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceConfigId'), 'exclude': lambda f: f is None }})
    r"""ID of the actual config used to process the request."""  
    