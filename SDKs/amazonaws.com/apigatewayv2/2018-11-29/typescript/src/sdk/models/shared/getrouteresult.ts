/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ParameterConstraints } from "./parameterconstraints";
import { Expose, Transform } from "class-transformer";

/**
 * The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
 */
export enum GetRouteResultAuthorizationTypeEnum {
  None = "NONE",
  AwsIam = "AWS_IAM",
  Custom = "CUSTOM",
  Jwt = "JWT",
}

/**
 * Success
 */
export class GetRouteResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ApiGatewayManaged" })
  apiGatewayManaged?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "ApiKeyRequired" })
  apiKeyRequired?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "AuthorizationScopes" })
  authorizationScopes?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "AuthorizationType" })
  authorizationType?: GetRouteResultAuthorizationTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "AuthorizerId" })
  authorizerId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ModelSelectionExpression" })
  modelSelectionExpression?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "OperationName" })
  operationName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RequestModels" })
  requestModels?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: ParameterConstraints })
  @Expose({ name: "RequestParameters" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ParameterConstraints> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ParameterConstraints);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  requestParameters?: Record<string, ParameterConstraints>;

  @SpeakeasyMetadata()
  @Expose({ name: "RouteId" })
  routeId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RouteKey" })
  routeKey?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RouteResponseSelectionExpression" })
  routeResponseSelectionExpression?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Target" })
  target?: string;
}
