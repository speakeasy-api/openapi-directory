/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class DataflowProjectsTemplatesLaunchQueryParams {
    /**
     * V1 error format.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=$.xgafv")
    public org.openapis.openapi.models.shared.XgafvEnum dollarXgafv;
    public DataflowProjectsTemplatesLaunchQueryParams withDollarXgafv(org.openapis.openapi.models.shared.XgafvEnum dollarXgafv) {
        this.dollarXgafv = dollarXgafv;
        return this;
    }
    
    /**
     * OAuth access token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=access_token")
    public String accessToken;
    public DataflowProjectsTemplatesLaunchQueryParams withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * Data format for response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;
    public DataflowProjectsTemplatesLaunchQueryParams withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * JSONP
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=callback")
    public String callback;
    public DataflowProjectsTemplatesLaunchQueryParams withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * Path to dynamic template spec file on Cloud Storage. The file must be a Json serialized DynamicTemplateFieSpec object.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=dynamicTemplate.gcsPath")
    public String dynamicTemplateGcsPath;
    public DataflowProjectsTemplatesLaunchQueryParams withDynamicTemplateGcsPath(String dynamicTemplateGcsPath) {
        this.dynamicTemplateGcsPath = dynamicTemplateGcsPath;
        return this;
    }
    
    /**
     * Cloud Storage path for staging dependencies. Must be a valid Cloud Storage URL, beginning with `gs://`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=dynamicTemplate.stagingLocation")
    public String dynamicTemplateStagingLocation;
    public DataflowProjectsTemplatesLaunchQueryParams withDynamicTemplateStagingLocation(String dynamicTemplateStagingLocation) {
        this.dynamicTemplateStagingLocation = dynamicTemplateStagingLocation;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;
    public DataflowProjectsTemplatesLaunchQueryParams withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * A Cloud Storage path to the template from which to create the job. Must be valid Cloud Storage URL, beginning with 'gs://'.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=gcsPath")
    public String gcsPath;
    public DataflowProjectsTemplatesLaunchQueryParams withGcsPath(String gcsPath) {
        this.gcsPath = gcsPath;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;
    public DataflowProjectsTemplatesLaunchQueryParams withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to which to direct the request.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=location")
    public String location;
    public DataflowProjectsTemplatesLaunchQueryParams withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;
    public DataflowProjectsTemplatesLaunchQueryParams withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;
    public DataflowProjectsTemplatesLaunchQueryParams withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;
    public DataflowProjectsTemplatesLaunchQueryParams withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uploadType")
    public String uploadType;
    public DataflowProjectsTemplatesLaunchQueryParams withUploadType(String uploadType) {
        this.uploadType = uploadType;
        return this;
    }
    
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=upload_protocol")
    public String uploadProtocol;
    public DataflowProjectsTemplatesLaunchQueryParams withUploadProtocol(String uploadProtocol) {
        this.uploadProtocol = uploadProtocol;
        return this;
    }
    
    /**
     * If true, the request is validated but not actually executed. Defaults to false.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=validateOnly")
    public Boolean validateOnly;
    public DataflowProjectsTemplatesLaunchQueryParams withValidateOnly(Boolean validateOnly) {
        this.validateOnly = validateOnly;
        return this;
    }
    
}
