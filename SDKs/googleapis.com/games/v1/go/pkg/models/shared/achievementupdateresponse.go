// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AchievementUpdateResponseCurrentStateEnum - The current state of the achievement.
type AchievementUpdateResponseCurrentStateEnum string

const (
	AchievementUpdateResponseCurrentStateEnumUpdatedAchievementStateUnspecified AchievementUpdateResponseCurrentStateEnum = "UPDATED_ACHIEVEMENT_STATE_UNSPECIFIED"
	AchievementUpdateResponseCurrentStateEnumHidden                             AchievementUpdateResponseCurrentStateEnum = "HIDDEN"
	AchievementUpdateResponseCurrentStateEnumRevealed                           AchievementUpdateResponseCurrentStateEnum = "REVEALED"
	AchievementUpdateResponseCurrentStateEnumUnlocked                           AchievementUpdateResponseCurrentStateEnum = "UNLOCKED"
)

func (e *AchievementUpdateResponseCurrentStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UPDATED_ACHIEVEMENT_STATE_UNSPECIFIED":
		fallthrough
	case "HIDDEN":
		fallthrough
	case "REVEALED":
		fallthrough
	case "UNLOCKED":
		*e = AchievementUpdateResponseCurrentStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AchievementUpdateResponseCurrentStateEnum: %s", s)
	}
}

// AchievementUpdateResponse - An updated achievement.
type AchievementUpdateResponse struct {
	// The achievement this update is was applied to.
	AchievementID *string `json:"achievementId,omitempty"`
	// The current state of the achievement.
	CurrentState *AchievementUpdateResponseCurrentStateEnum `json:"currentState,omitempty"`
	// The current steps recorded for this achievement if it is incremental.
	CurrentSteps *int `json:"currentSteps,omitempty"`
	// Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateResponse`.
	Kind *string `json:"kind,omitempty"`
	// Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player).
	NewlyUnlocked *bool `json:"newlyUnlocked,omitempty"`
	// Whether the requested updates actually affected the achievement.
	UpdateOccurred *bool `json:"updateOccurred,omitempty"`
}
