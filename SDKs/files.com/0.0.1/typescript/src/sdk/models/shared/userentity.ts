/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * How is this user authenticated?
 */
export enum UserEntityAuthenticationMethodEnum {
  Password = "password",
  UnusedFormerLdap = "unused_former_ldap",
  Sso = "sso",
  None = "none",
  EmailSignup = "email_signup",
  PasswordWithImportedHash = "password_with_imported_hash",
}

/**
 * 2FA required setting
 */
export enum UserEntityRequire2faEnum {
  UseSystemSetting = "use_system_setting",
  AlwaysRequire = "always_require",
  NeverRequire = "never_require",
}

/**
 * SSL required setting
 */
export enum UserEntitySslRequiredEnum {
  UseSystemSetting = "use_system_setting",
  AlwaysRequire = "always_require",
  NeverRequire = "never_require",
}

/**
 * Create User
 */
export class UserEntity extends SpeakeasyBase {
  /**
   * Is 2fa active for the user?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active_2fa" })
  active2fa?: boolean;

  /**
   * List of group IDs of which this user is an administrator
   */
  @SpeakeasyMetadata()
  @Expose({ name: "admin_group_ids" })
  adminGroupIds?: number[];

  /**
   * A list of allowed IPs if applicable.  Newline delimited
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowed_ips" })
  allowedIps?: string;

  /**
   * Number of api keys associated with this user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "api_keys_count" })
  apiKeysCount?: number;

  /**
   * DEPRECATED: Can the user create Bundles (aka Share Links)? Use the bundle permission instead.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attachments_permission" })
  attachmentsPermission?: boolean;

  /**
   * Scheduled Date/Time at which user will be deactivated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authenticate_until" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  authenticateUntil?: Date;

  /**
   * How is this user authenticated?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authentication_method" })
  authenticationMethod?: UserEntityAuthenticationMethodEnum;

  /**
   * URL holding the user's avatar
   */
  @SpeakeasyMetadata()
  @Expose({ name: "avatar_url" })
  avatarUrl?: string;

  /**
   * Allow this user to perform operations on the account, payments, and invoices?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "billing_permission" })
  billingPermission?: boolean;

  /**
   * Exempt this user from being disabled based on inactivity?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bypass_inactive_disable" })
  bypassInactiveDisable?: boolean;

  /**
   * Allow this user to skip site-wide IP blacklists?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bypass_site_allowed_ips" })
  bypassSiteAllowedIps?: boolean;

  /**
   * User's company
   */
  @SpeakeasyMetadata()
  @Expose({ name: "company" })
  company?: string;

  /**
   * When this user was created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * Can the user connect with WebDAV?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dav_permission" })
  davPermission?: boolean;

  /**
   * Number of days remaining until password expires
   */
  @SpeakeasyMetadata()
  @Expose({ name: "days_remaining_until_password_expire" })
  daysRemainingUntilPasswordExpire?: number;

  /**
   * Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disabled" })
  disabled?: boolean;

  /**
   * User email address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Is this user managed by a SsoStrategy?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "externally_managed" })
  externallyManaged?: boolean;

  /**
   * User's first login time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first_login_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  firstLoginAt?: Date;

  /**
   * Can the user access with FTP/FTPS?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ftp_permission" })
  ftpPermission?: boolean;

  /**
   * Comma-separated list of group IDs of which this user is a member
   */
  @SpeakeasyMetadata()
  @Expose({ name: "group_ids" })
  groupIds?: string;

  /**
   * Text to display to the user in the header of the UI
   */
  @SpeakeasyMetadata()
  @Expose({ name: "header_text" })
  headerText?: string;

  /**
   * User ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Preferred language
   */
  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language?: string;

  /**
   * User's most recent activity time, which is the latest of most recent login, most recent API use, enablement, or creation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_active_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastActiveAt?: Date;

  /**
   * User's most recent API use time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_api_use_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastApiUseAt?: Date;

  /**
   * User's most recent login time via WebDAV
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_dav_login_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastDavLoginAt?: Date;

  /**
   * User's most recent login time via Desktop app
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_desktop_login_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastDesktopLoginAt?: Date;

  /**
   * User's most recent login time via FTP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_ftp_login_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastFtpLoginAt?: Date;

  /**
   * User's most recent login time via any protocol
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_login_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastLoginAt?: Date;

  /**
   * The most recent protocol and cipher used
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_protocol_cipher" })
  lastProtocolCipher?: string;

  /**
   * User's most recent login time via Rest API
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_restapi_login_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastRestapiLoginAt?: Date;

  /**
   * User's most recent login time via SFTP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_sftp_login_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastSftpLoginAt?: Date;

  /**
   * User's most recent login time via web
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_web_login_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastWebLoginAt?: Date;

  /**
   * Time in the future that the user will no longer be locked out if applicable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lockout_expires" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lockoutExpires?: Date;

  /**
   * User's full name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Any internal notes on the user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;

  /**
   * Hour of the day at which daily notifications should be sent. Can be in range 0 to 23
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notification_daily_send_time" })
  notificationDailySendTime?: number;

  /**
   * Enable integration with Office for the web?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "office_integration_enabled" })
  officeIntegrationEnabled?: boolean;

  /**
   * Password expiration datetime
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password_expire_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  passwordExpireAt?: Date;

  /**
   * Is user's password expired?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password_expired" })
  passwordExpired?: boolean;

  /**
   * Last time the user's password was set
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password_set_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  passwordSetAt?: Date;

  /**
   * Number of days to allow user to use the same password
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password_validity_days" })
  passwordValidityDays?: number;

  /**
   * Number of public keys associated with this user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "public_keys_count" })
  publicKeysCount?: number;

  /**
   * Should the user receive admin alerts such a certificate expiration notifications and overages?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "receive_admin_alerts" })
  receiveAdminAlerts?: boolean;

  /**
   * 2FA required setting
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_2fa" })
  require2fa?: UserEntityRequire2faEnum;

  /**
   * Is a password change required upon next user login?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_password_change" })
  requirePasswordChange?: boolean;

  /**
   * Can this user access the REST API?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "restapi_permission" })
  restapiPermission?: boolean;

  /**
   * Does this user manage it's own credentials or is it a shared/bot user?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "self_managed" })
  selfManaged?: boolean;

  /**
   * Can the user access with SFTP?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sftp_permission" })
  sftpPermission?: boolean;

  /**
   * Is the user an administrator for this site?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "site_admin" })
  siteAdmin?: boolean;

  /**
   * Skip Welcome page in the UI?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "skip_welcome_screen" })
  skipWelcomeScreen?: boolean;

  /**
   * SSL required setting
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ssl_required" })
  sslRequired?: UserEntitySslRequiredEnum;

  /**
   * SSO (Single Sign On) strategy ID for the user, if applicable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sso_strategy_id" })
  ssoStrategyId?: number;

  /**
   * Is the user subscribed to the newsletter?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscribe_to_newsletter" })
  subscribeToNewsletter?: boolean;

  /**
   * User time zone
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time_zone" })
  timeZone?: string;

  /**
   * Type(s) of 2FA methods in use.  Will be either `sms`, `totp`, `u2f`, `yubi`, or multiple values sorted alphabetically and joined by an underscore.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type_of_2fa" })
  typeOf2fa?: string;

  /**
   * Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_root" })
  userRoot?: string;

  /**
   * User's username
   */
  @SpeakeasyMetadata()
  @Expose({ name: "username" })
  username?: string;
}
