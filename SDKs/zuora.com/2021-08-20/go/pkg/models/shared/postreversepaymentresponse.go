// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// POSTReversePaymentResponseFinanceInformationTransferredToAccountingEnum - Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
type POSTReversePaymentResponseFinanceInformationTransferredToAccountingEnum string

const (
	POSTReversePaymentResponseFinanceInformationTransferredToAccountingEnumProcessing POSTReversePaymentResponseFinanceInformationTransferredToAccountingEnum = "Processing"
	POSTReversePaymentResponseFinanceInformationTransferredToAccountingEnumYes        POSTReversePaymentResponseFinanceInformationTransferredToAccountingEnum = "Yes"
	POSTReversePaymentResponseFinanceInformationTransferredToAccountingEnumNo         POSTReversePaymentResponseFinanceInformationTransferredToAccountingEnum = "No"
	POSTReversePaymentResponseFinanceInformationTransferredToAccountingEnumError      POSTReversePaymentResponseFinanceInformationTransferredToAccountingEnum = "Error"
	POSTReversePaymentResponseFinanceInformationTransferredToAccountingEnumIgnore     POSTReversePaymentResponseFinanceInformationTransferredToAccountingEnum = "Ignore"
)

func (e *POSTReversePaymentResponseFinanceInformationTransferredToAccountingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Processing":
		fallthrough
	case "Yes":
		fallthrough
	case "No":
		fallthrough
	case "Error":
		fallthrough
	case "Ignore":
		*e = POSTReversePaymentResponseFinanceInformationTransferredToAccountingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTReversePaymentResponseFinanceInformationTransferredToAccountingEnum: %s", s)
	}
}

// POSTReversePaymentResponseFinanceInformation - Container for the finance information related to the refund.
type POSTReversePaymentResponseFinanceInformation struct {
	// The accounting code that maps to a bank account in your accounting system.
	//
	BankAccountAccountingCode *string `json:"bankAccountAccountingCode,omitempty"`
	// The type of the accounting code that maps to a bank account in your accounting system.
	//
	//
	BankAccountAccountingCodeType *string `json:"bankAccountAccountingCodeType,omitempty"`
	// Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
	//
	TransferredToAccounting *POSTReversePaymentResponseFinanceInformationTransferredToAccountingEnum `json:"transferredToAccounting,omitempty"`
	// The accounting code for the unapplied payment.
	//
	UnappliedPaymentAccountingCode *string `json:"unappliedPaymentAccountingCode,omitempty"`
	// The type of the accounting code for the unapplied payment.
	//
	//
	UnappliedPaymentAccountingCodeType *string `json:"unappliedPaymentAccountingCodeType,omitempty"`
}

// POSTReversePaymentResponseGatewayStateEnum - The status of the payment in the gateway; used for reconciliation.
type POSTReversePaymentResponseGatewayStateEnum string

const (
	POSTReversePaymentResponseGatewayStateEnumMarkedForSubmission POSTReversePaymentResponseGatewayStateEnum = "MarkedForSubmission"
	POSTReversePaymentResponseGatewayStateEnumSubmitted           POSTReversePaymentResponseGatewayStateEnum = "Submitted"
	POSTReversePaymentResponseGatewayStateEnumSettled             POSTReversePaymentResponseGatewayStateEnum = "Settled"
	POSTReversePaymentResponseGatewayStateEnumNotSubmitted        POSTReversePaymentResponseGatewayStateEnum = "NotSubmitted"
	POSTReversePaymentResponseGatewayStateEnumFailedToSettle      POSTReversePaymentResponseGatewayStateEnum = "FailedToSettle"
)

func (e *POSTReversePaymentResponseGatewayStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MarkedForSubmission":
		fallthrough
	case "Submitted":
		fallthrough
	case "Settled":
		fallthrough
	case "NotSubmitted":
		fallthrough
	case "FailedToSettle":
		*e = POSTReversePaymentResponseGatewayStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTReversePaymentResponseGatewayStateEnum: %s", s)
	}
}

// POSTReversePaymentResponseMethodTypeEnum - How an external refund was issued to a customer.
type POSTReversePaymentResponseMethodTypeEnum string

const (
	POSTReversePaymentResponseMethodTypeEnumAch                            POSTReversePaymentResponseMethodTypeEnum = "ACH"
	POSTReversePaymentResponseMethodTypeEnumCash                           POSTReversePaymentResponseMethodTypeEnum = "Cash"
	POSTReversePaymentResponseMethodTypeEnumCheck                          POSTReversePaymentResponseMethodTypeEnum = "Check"
	POSTReversePaymentResponseMethodTypeEnumCreditCard                     POSTReversePaymentResponseMethodTypeEnum = "CreditCard"
	POSTReversePaymentResponseMethodTypeEnumPayPal                         POSTReversePaymentResponseMethodTypeEnum = "PayPal"
	POSTReversePaymentResponseMethodTypeEnumWireTransfer                   POSTReversePaymentResponseMethodTypeEnum = "WireTransfer"
	POSTReversePaymentResponseMethodTypeEnumDebitCard                      POSTReversePaymentResponseMethodTypeEnum = "DebitCard"
	POSTReversePaymentResponseMethodTypeEnumCreditCardReferenceTransaction POSTReversePaymentResponseMethodTypeEnum = "CreditCardReferenceTransaction"
	POSTReversePaymentResponseMethodTypeEnumBankTransfer                   POSTReversePaymentResponseMethodTypeEnum = "BankTransfer"
	POSTReversePaymentResponseMethodTypeEnumOther                          POSTReversePaymentResponseMethodTypeEnum = "Other"
)

func (e *POSTReversePaymentResponseMethodTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACH":
		fallthrough
	case "Cash":
		fallthrough
	case "Check":
		fallthrough
	case "CreditCard":
		fallthrough
	case "PayPal":
		fallthrough
	case "WireTransfer":
		fallthrough
	case "DebitCard":
		fallthrough
	case "CreditCardReferenceTransaction":
		fallthrough
	case "BankTransfer":
		fallthrough
	case "Other":
		*e = POSTReversePaymentResponseMethodTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTReversePaymentResponseMethodTypeEnum: %s", s)
	}
}

// POSTReversePaymentResponseTypeEnum - The type of the payment.
type POSTReversePaymentResponseTypeEnum string

const (
	POSTReversePaymentResponseTypeEnumExternal   POSTReversePaymentResponseTypeEnum = "External"
	POSTReversePaymentResponseTypeEnumElectronic POSTReversePaymentResponseTypeEnum = "Electronic"
)

func (e *POSTReversePaymentResponseTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "External":
		fallthrough
	case "Electronic":
		*e = POSTReversePaymentResponseTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTReversePaymentResponseTypeEnum: %s", s)
	}
}

type POSTReversePaymentResponse struct {
	// The ID of the customer account that the payment is for.
	//
	AccountID *string `json:"accountId,omitempty"`
	// The total amount of the payment.
	//
	Amount *float64 `json:"amount,omitempty"`
	// The date and time when the payment was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
	//
	CancelledOn *time.Time `json:"cancelledOn,omitempty"`
	// Comments about the payment.
	//
	Comment *string `json:"comment,omitempty"`
	// The ID of the Zuora user who created the refund.
	//
	CreatedByID *string `json:"createdById,omitempty"`
	// The date and time when the chargeback is created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2019-03-01 15:31:10.
	//
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	// The ID of the credit memo that is refunded.
	//
	CreditMemoID *string `json:"creditMemoId,omitempty"`
	// Container for the finance information related to the refund.
	//
	FinanceInformation *POSTReversePaymentResponseFinanceInformation `json:"financeInformation,omitempty"`
	// The ID of the gateway instance that processes the payment.
	//
	GatewayID *string `json:"gatewayId,omitempty"`
	// The message returned from the payment gateway for the payment. This message is gateway-dependent.
	//
	GatewayResponse *string `json:"gatewayResponse,omitempty"`
	// The code returned from the payment gateway for the payment. This code is gateway-dependent.
	//
	GatewayResponseCode *string `json:"gatewayResponseCode,omitempty"`
	// The status of the payment in the gateway; used for reconciliation.
	//
	GatewayState *POSTReversePaymentResponseGatewayStateEnum `json:"gatewayState,omitempty"`
	// The ID of the payment chargeback.
	//
	ID *string `json:"id,omitempty"`
	// The date and time when a charge was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
	//
	MarkedForSubmissionOn *time.Time `json:"markedForSubmissionOn,omitempty"`
	// How an external refund was issued to a customer.
	//
	MethodType *POSTReversePaymentResponseMethodTypeEnum `json:"methodType,omitempty"`
	// The unique identification number of the payment. For example, P-00000001.
	//
	Number *string `json:"number,omitempty"`
	// The ID of the payment that is refunded.
	//
	PaymentID *string `json:"paymentId,omitempty"`
	// The unique ID of the payment method that the customer used to make the payment.
	//
	PaymentMethodID *string `json:"paymentMethodId,omitempty"`
	// The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.
	//
	PaymentMethodSnapshotID *string `json:"paymentMethodSnapshotId,omitempty"`
	// A code identifying the reason for the transaction.
	//
	ReasonCode *string `json:"reasonCode,omitempty"`
	// The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
	//
	ReferenceID *string `json:"referenceId,omitempty"`
	// The date when the refund takes effect, in `yyyy-mm-dd` format. For example, 2017-03-01.
	//
	RefundDate *types.Date `json:"refundDate,omitempty"`
	// The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.
	//
	RefundTransactionTime *time.Time `json:"refundTransactionTime,omitempty"`
	// The transaction ID returned by the payment gateway if there is an additional refund.
	//
	SecondRefundReferenceID *string `json:"secondRefundReferenceId,omitempty"`
	// The date and time when the transaction is settled, in `yyyy-mm-dd hh:mm:ss` format.
	//
	SettledOn *time.Time `json:"settledOn,omitempty"`
	// A payment gateway-specific field that maps Zuora to other gateways.
	//
	SoftDescriptor *string `json:"softDescriptor,omitempty"`
	// A payment gateway-specific field that maps Zuora to other gateways.
	//
	SoftDescriptorPhone *string `json:"softDescriptorPhone,omitempty"`
	// The status of the payment.
	//
	Status *string `json:"status,omitempty"`
	// The date and time when the payment was submitted, in yyyy-mm-dd hh:mm:ss format.
	//
	SubmittedOn *time.Time `json:"submittedOn,omitempty"`
	// Returns `true` if the request was processed successfully.
	//
	Success *bool `json:"success,omitempty"`
	// The type of the payment.
	//
	Type *POSTReversePaymentResponseTypeEnum `json:"type,omitempty"`
	// The ID of the Zuora user who last updated the payment.
	//
	UpdatedByID *string `json:"updatedById,omitempty"`
	// The date and time when the payment was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2019-03-02 15:36:10.
	//
	UpdatedDate *time.Time `json:"updatedDate,omitempty"`
}
