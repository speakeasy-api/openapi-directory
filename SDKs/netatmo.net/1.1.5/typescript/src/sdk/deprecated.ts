/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * These methods are no longer maintained nor supported
 */
export class Deprecated {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * The method devicelist returns the list of devices owned by the user, and their modules.
   * A device is identified by its _id (which is its mac address) and each device may have one, several or no modules, also identified by an _id.
   *
   */
  devicelist(
    req: operations.DevicelistRequest,
    security: operations.DevicelistSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DevicelistResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DevicelistRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/devicelist";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DevicelistSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DevicelistResponse =
        new operations.DevicelistResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naDeviceListResponse = utils.objectToClass(
              httpRes?.data,
              shared.NADeviceListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * The method getthermstate returns the last Thermostat measurements, its current weekly schedule, and, if present, its current manual temperature setpoint.
   */
  getthermstate(
    req: operations.GetthermstateRequest,
    security: operations.GetthermstateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetthermstateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetthermstateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getthermstate";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetthermstateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetthermstateResponse =
        new operations.GetthermstateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naThermStateResponse = utils.objectToClass(
              httpRes?.data,
              shared.NAThermStateResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * The method getuser returns information about a user such as prefered language, prefered units, and list of devices.
   *
   */
  getuser(config?: AxiosRequestConfig): Promise<operations.GetuserResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getuser";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetuserResponse = new operations.GetuserResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.naUserResponse = utils.objectToClass(
              httpRes?.data,
              shared.NAUserResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
