// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SynthesizeSpeechRequestBodyEngineEnum - <p>Specifies the engine (<code>standard</code> or <code>neural</code>) for Amazon Polly to use when processing input text for speech synthesis. For information on Amazon Polly voices and which voices are available in standard-only, NTTS-only, and both standard and NTTS formats, see <a href="https://docs.aws.amazon.com/polly/latest/dg/voicelist.html">Available Voices</a>.</p> <p> <b>NTTS-only voices</b> </p> <p>When using NTTS-only voices such as Kevin (en-US), this parameter is required and must be set to <code>neural</code>. If the engine is not specified, or is set to <code>standard</code>, this will result in an error. </p> <p>Type: String</p> <p>Valid Values: <code>standard</code> | <code>neural</code> </p> <p>Required: Yes</p> <p> <b>Standard voices</b> </p> <p>For standard voices, this is not required; the engine parameter defaults to <code>standard</code>. If the engine is not specified, or is set to <code>standard</code> and an NTTS-only voice is selected, this will result in an error. </p>
type SynthesizeSpeechRequestBodyEngineEnum string

const (
	SynthesizeSpeechRequestBodyEngineEnumStandard SynthesizeSpeechRequestBodyEngineEnum = "standard"
	SynthesizeSpeechRequestBodyEngineEnumNeural   SynthesizeSpeechRequestBodyEngineEnum = "neural"
)

func (e SynthesizeSpeechRequestBodyEngineEnum) ToPointer() *SynthesizeSpeechRequestBodyEngineEnum {
	return &e
}

func (e *SynthesizeSpeechRequestBodyEngineEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "neural":
		*e = SynthesizeSpeechRequestBodyEngineEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SynthesizeSpeechRequestBodyEngineEnum: %v", v)
	}
}

// SynthesizeSpeechRequestBodyLanguageCodeEnum - <p>Optional language code for the Synthesize Speech request. This is only necessary if using a bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi (hi-IN). </p> <p>If a bilingual voice is used and no language code is specified, Amazon Polly uses the default language of the bilingual voice. The default language for any voice is the one returned by the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices</a> operation for the <code>LanguageCode</code> parameter. For example, if no language code is specified, Aditi will use Indian English rather than Hindi.</p>
type SynthesizeSpeechRequestBodyLanguageCodeEnum string

const (
	SynthesizeSpeechRequestBodyLanguageCodeEnumArb     SynthesizeSpeechRequestBodyLanguageCodeEnum = "arb"
	SynthesizeSpeechRequestBodyLanguageCodeEnumCmnCn   SynthesizeSpeechRequestBodyLanguageCodeEnum = "cmn-CN"
	SynthesizeSpeechRequestBodyLanguageCodeEnumCyGb    SynthesizeSpeechRequestBodyLanguageCodeEnum = "cy-GB"
	SynthesizeSpeechRequestBodyLanguageCodeEnumDaDk    SynthesizeSpeechRequestBodyLanguageCodeEnum = "da-DK"
	SynthesizeSpeechRequestBodyLanguageCodeEnumDeDe    SynthesizeSpeechRequestBodyLanguageCodeEnum = "de-DE"
	SynthesizeSpeechRequestBodyLanguageCodeEnumEnAu    SynthesizeSpeechRequestBodyLanguageCodeEnum = "en-AU"
	SynthesizeSpeechRequestBodyLanguageCodeEnumEnGb    SynthesizeSpeechRequestBodyLanguageCodeEnum = "en-GB"
	SynthesizeSpeechRequestBodyLanguageCodeEnumEnGbWls SynthesizeSpeechRequestBodyLanguageCodeEnum = "en-GB-WLS"
	SynthesizeSpeechRequestBodyLanguageCodeEnumEnIn    SynthesizeSpeechRequestBodyLanguageCodeEnum = "en-IN"
	SynthesizeSpeechRequestBodyLanguageCodeEnumEnUs    SynthesizeSpeechRequestBodyLanguageCodeEnum = "en-US"
	SynthesizeSpeechRequestBodyLanguageCodeEnumEsEs    SynthesizeSpeechRequestBodyLanguageCodeEnum = "es-ES"
	SynthesizeSpeechRequestBodyLanguageCodeEnumEsMx    SynthesizeSpeechRequestBodyLanguageCodeEnum = "es-MX"
	SynthesizeSpeechRequestBodyLanguageCodeEnumEsUs    SynthesizeSpeechRequestBodyLanguageCodeEnum = "es-US"
	SynthesizeSpeechRequestBodyLanguageCodeEnumFrCa    SynthesizeSpeechRequestBodyLanguageCodeEnum = "fr-CA"
	SynthesizeSpeechRequestBodyLanguageCodeEnumFrFr    SynthesizeSpeechRequestBodyLanguageCodeEnum = "fr-FR"
	SynthesizeSpeechRequestBodyLanguageCodeEnumIsIs    SynthesizeSpeechRequestBodyLanguageCodeEnum = "is-IS"
	SynthesizeSpeechRequestBodyLanguageCodeEnumItIt    SynthesizeSpeechRequestBodyLanguageCodeEnum = "it-IT"
	SynthesizeSpeechRequestBodyLanguageCodeEnumJaJp    SynthesizeSpeechRequestBodyLanguageCodeEnum = "ja-JP"
	SynthesizeSpeechRequestBodyLanguageCodeEnumHiIn    SynthesizeSpeechRequestBodyLanguageCodeEnum = "hi-IN"
	SynthesizeSpeechRequestBodyLanguageCodeEnumKoKr    SynthesizeSpeechRequestBodyLanguageCodeEnum = "ko-KR"
	SynthesizeSpeechRequestBodyLanguageCodeEnumNbNo    SynthesizeSpeechRequestBodyLanguageCodeEnum = "nb-NO"
	SynthesizeSpeechRequestBodyLanguageCodeEnumNlNl    SynthesizeSpeechRequestBodyLanguageCodeEnum = "nl-NL"
	SynthesizeSpeechRequestBodyLanguageCodeEnumPlPl    SynthesizeSpeechRequestBodyLanguageCodeEnum = "pl-PL"
	SynthesizeSpeechRequestBodyLanguageCodeEnumPtBr    SynthesizeSpeechRequestBodyLanguageCodeEnum = "pt-BR"
	SynthesizeSpeechRequestBodyLanguageCodeEnumPtPt    SynthesizeSpeechRequestBodyLanguageCodeEnum = "pt-PT"
	SynthesizeSpeechRequestBodyLanguageCodeEnumRoRo    SynthesizeSpeechRequestBodyLanguageCodeEnum = "ro-RO"
	SynthesizeSpeechRequestBodyLanguageCodeEnumRuRu    SynthesizeSpeechRequestBodyLanguageCodeEnum = "ru-RU"
	SynthesizeSpeechRequestBodyLanguageCodeEnumSvSe    SynthesizeSpeechRequestBodyLanguageCodeEnum = "sv-SE"
	SynthesizeSpeechRequestBodyLanguageCodeEnumTrTr    SynthesizeSpeechRequestBodyLanguageCodeEnum = "tr-TR"
	SynthesizeSpeechRequestBodyLanguageCodeEnumEnNz    SynthesizeSpeechRequestBodyLanguageCodeEnum = "en-NZ"
	SynthesizeSpeechRequestBodyLanguageCodeEnumEnZa    SynthesizeSpeechRequestBodyLanguageCodeEnum = "en-ZA"
	SynthesizeSpeechRequestBodyLanguageCodeEnumCaEs    SynthesizeSpeechRequestBodyLanguageCodeEnum = "ca-ES"
	SynthesizeSpeechRequestBodyLanguageCodeEnumDeAt    SynthesizeSpeechRequestBodyLanguageCodeEnum = "de-AT"
	SynthesizeSpeechRequestBodyLanguageCodeEnumYueCn   SynthesizeSpeechRequestBodyLanguageCodeEnum = "yue-CN"
	SynthesizeSpeechRequestBodyLanguageCodeEnumArAe    SynthesizeSpeechRequestBodyLanguageCodeEnum = "ar-AE"
	SynthesizeSpeechRequestBodyLanguageCodeEnumFiFi    SynthesizeSpeechRequestBodyLanguageCodeEnum = "fi-FI"
)

func (e SynthesizeSpeechRequestBodyLanguageCodeEnum) ToPointer() *SynthesizeSpeechRequestBodyLanguageCodeEnum {
	return &e
}

func (e *SynthesizeSpeechRequestBodyLanguageCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "arb":
		fallthrough
	case "cmn-CN":
		fallthrough
	case "cy-GB":
		fallthrough
	case "da-DK":
		fallthrough
	case "de-DE":
		fallthrough
	case "en-AU":
		fallthrough
	case "en-GB":
		fallthrough
	case "en-GB-WLS":
		fallthrough
	case "en-IN":
		fallthrough
	case "en-US":
		fallthrough
	case "es-ES":
		fallthrough
	case "es-MX":
		fallthrough
	case "es-US":
		fallthrough
	case "fr-CA":
		fallthrough
	case "fr-FR":
		fallthrough
	case "is-IS":
		fallthrough
	case "it-IT":
		fallthrough
	case "ja-JP":
		fallthrough
	case "hi-IN":
		fallthrough
	case "ko-KR":
		fallthrough
	case "nb-NO":
		fallthrough
	case "nl-NL":
		fallthrough
	case "pl-PL":
		fallthrough
	case "pt-BR":
		fallthrough
	case "pt-PT":
		fallthrough
	case "ro-RO":
		fallthrough
	case "ru-RU":
		fallthrough
	case "sv-SE":
		fallthrough
	case "tr-TR":
		fallthrough
	case "en-NZ":
		fallthrough
	case "en-ZA":
		fallthrough
	case "ca-ES":
		fallthrough
	case "de-AT":
		fallthrough
	case "yue-CN":
		fallthrough
	case "ar-AE":
		fallthrough
	case "fi-FI":
		*e = SynthesizeSpeechRequestBodyLanguageCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SynthesizeSpeechRequestBodyLanguageCodeEnum: %v", v)
	}
}

// SynthesizeSpeechRequestBodyOutputFormatEnum - <p> The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json. </p> <p>When pcm is used, the content returned is audio/pcm in a signed 16-bit, 1 channel (mono), little-endian format. </p>
type SynthesizeSpeechRequestBodyOutputFormatEnum string

const (
	SynthesizeSpeechRequestBodyOutputFormatEnumJSON      SynthesizeSpeechRequestBodyOutputFormatEnum = "json"
	SynthesizeSpeechRequestBodyOutputFormatEnumMp3       SynthesizeSpeechRequestBodyOutputFormatEnum = "mp3"
	SynthesizeSpeechRequestBodyOutputFormatEnumOggVorbis SynthesizeSpeechRequestBodyOutputFormatEnum = "ogg_vorbis"
	SynthesizeSpeechRequestBodyOutputFormatEnumPcm       SynthesizeSpeechRequestBodyOutputFormatEnum = "pcm"
)

func (e SynthesizeSpeechRequestBodyOutputFormatEnum) ToPointer() *SynthesizeSpeechRequestBodyOutputFormatEnum {
	return &e
}

func (e *SynthesizeSpeechRequestBodyOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "mp3":
		fallthrough
	case "ogg_vorbis":
		fallthrough
	case "pcm":
		*e = SynthesizeSpeechRequestBodyOutputFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SynthesizeSpeechRequestBodyOutputFormatEnum: %v", v)
	}
}

// SynthesizeSpeechRequestBodyTextTypeEnum -  Specifies whether the input text is plain text or SSML. The default value is plain text. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/ssml.html">Using SSML</a>.
type SynthesizeSpeechRequestBodyTextTypeEnum string

const (
	SynthesizeSpeechRequestBodyTextTypeEnumSsml SynthesizeSpeechRequestBodyTextTypeEnum = "ssml"
	SynthesizeSpeechRequestBodyTextTypeEnumText SynthesizeSpeechRequestBodyTextTypeEnum = "text"
)

func (e SynthesizeSpeechRequestBodyTextTypeEnum) ToPointer() *SynthesizeSpeechRequestBodyTextTypeEnum {
	return &e
}

func (e *SynthesizeSpeechRequestBodyTextTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ssml":
		fallthrough
	case "text":
		*e = SynthesizeSpeechRequestBodyTextTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SynthesizeSpeechRequestBodyTextTypeEnum: %v", v)
	}
}

// SynthesizeSpeechRequestBodyVoiceIDEnum -  Voice ID to use for the synthesis. You can get a list of available voice IDs by calling the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices</a> operation.
type SynthesizeSpeechRequestBodyVoiceIDEnum string

const (
	SynthesizeSpeechRequestBodyVoiceIDEnumAditi     SynthesizeSpeechRequestBodyVoiceIDEnum = "Aditi"
	SynthesizeSpeechRequestBodyVoiceIDEnumAmy       SynthesizeSpeechRequestBodyVoiceIDEnum = "Amy"
	SynthesizeSpeechRequestBodyVoiceIDEnumAstrid    SynthesizeSpeechRequestBodyVoiceIDEnum = "Astrid"
	SynthesizeSpeechRequestBodyVoiceIDEnumBianca    SynthesizeSpeechRequestBodyVoiceIDEnum = "Bianca"
	SynthesizeSpeechRequestBodyVoiceIDEnumBrian     SynthesizeSpeechRequestBodyVoiceIDEnum = "Brian"
	SynthesizeSpeechRequestBodyVoiceIDEnumCamila    SynthesizeSpeechRequestBodyVoiceIDEnum = "Camila"
	SynthesizeSpeechRequestBodyVoiceIDEnumCarla     SynthesizeSpeechRequestBodyVoiceIDEnum = "Carla"
	SynthesizeSpeechRequestBodyVoiceIDEnumCarmen    SynthesizeSpeechRequestBodyVoiceIDEnum = "Carmen"
	SynthesizeSpeechRequestBodyVoiceIDEnumCeline    SynthesizeSpeechRequestBodyVoiceIDEnum = "Celine"
	SynthesizeSpeechRequestBodyVoiceIDEnumChantal   SynthesizeSpeechRequestBodyVoiceIDEnum = "Chantal"
	SynthesizeSpeechRequestBodyVoiceIDEnumConchita  SynthesizeSpeechRequestBodyVoiceIDEnum = "Conchita"
	SynthesizeSpeechRequestBodyVoiceIDEnumCristiano SynthesizeSpeechRequestBodyVoiceIDEnum = "Cristiano"
	SynthesizeSpeechRequestBodyVoiceIDEnumDora      SynthesizeSpeechRequestBodyVoiceIDEnum = "Dora"
	SynthesizeSpeechRequestBodyVoiceIDEnumEmma      SynthesizeSpeechRequestBodyVoiceIDEnum = "Emma"
	SynthesizeSpeechRequestBodyVoiceIDEnumEnrique   SynthesizeSpeechRequestBodyVoiceIDEnum = "Enrique"
	SynthesizeSpeechRequestBodyVoiceIDEnumEwa       SynthesizeSpeechRequestBodyVoiceIDEnum = "Ewa"
	SynthesizeSpeechRequestBodyVoiceIDEnumFiliz     SynthesizeSpeechRequestBodyVoiceIDEnum = "Filiz"
	SynthesizeSpeechRequestBodyVoiceIDEnumGabrielle SynthesizeSpeechRequestBodyVoiceIDEnum = "Gabrielle"
	SynthesizeSpeechRequestBodyVoiceIDEnumGeraint   SynthesizeSpeechRequestBodyVoiceIDEnum = "Geraint"
	SynthesizeSpeechRequestBodyVoiceIDEnumGiorgio   SynthesizeSpeechRequestBodyVoiceIDEnum = "Giorgio"
	SynthesizeSpeechRequestBodyVoiceIDEnumGwyneth   SynthesizeSpeechRequestBodyVoiceIDEnum = "Gwyneth"
	SynthesizeSpeechRequestBodyVoiceIDEnumHans      SynthesizeSpeechRequestBodyVoiceIDEnum = "Hans"
	SynthesizeSpeechRequestBodyVoiceIDEnumInes      SynthesizeSpeechRequestBodyVoiceIDEnum = "Ines"
	SynthesizeSpeechRequestBodyVoiceIDEnumIvy       SynthesizeSpeechRequestBodyVoiceIDEnum = "Ivy"
	SynthesizeSpeechRequestBodyVoiceIDEnumJacek     SynthesizeSpeechRequestBodyVoiceIDEnum = "Jacek"
	SynthesizeSpeechRequestBodyVoiceIDEnumJan       SynthesizeSpeechRequestBodyVoiceIDEnum = "Jan"
	SynthesizeSpeechRequestBodyVoiceIDEnumJoanna    SynthesizeSpeechRequestBodyVoiceIDEnum = "Joanna"
	SynthesizeSpeechRequestBodyVoiceIDEnumJoey      SynthesizeSpeechRequestBodyVoiceIDEnum = "Joey"
	SynthesizeSpeechRequestBodyVoiceIDEnumJustin    SynthesizeSpeechRequestBodyVoiceIDEnum = "Justin"
	SynthesizeSpeechRequestBodyVoiceIDEnumKarl      SynthesizeSpeechRequestBodyVoiceIDEnum = "Karl"
	SynthesizeSpeechRequestBodyVoiceIDEnumKendra    SynthesizeSpeechRequestBodyVoiceIDEnum = "Kendra"
	SynthesizeSpeechRequestBodyVoiceIDEnumKevin     SynthesizeSpeechRequestBodyVoiceIDEnum = "Kevin"
	SynthesizeSpeechRequestBodyVoiceIDEnumKimberly  SynthesizeSpeechRequestBodyVoiceIDEnum = "Kimberly"
	SynthesizeSpeechRequestBodyVoiceIDEnumLea       SynthesizeSpeechRequestBodyVoiceIDEnum = "Lea"
	SynthesizeSpeechRequestBodyVoiceIDEnumLiv       SynthesizeSpeechRequestBodyVoiceIDEnum = "Liv"
	SynthesizeSpeechRequestBodyVoiceIDEnumLotte     SynthesizeSpeechRequestBodyVoiceIDEnum = "Lotte"
	SynthesizeSpeechRequestBodyVoiceIDEnumLucia     SynthesizeSpeechRequestBodyVoiceIDEnum = "Lucia"
	SynthesizeSpeechRequestBodyVoiceIDEnumLupe      SynthesizeSpeechRequestBodyVoiceIDEnum = "Lupe"
	SynthesizeSpeechRequestBodyVoiceIDEnumMads      SynthesizeSpeechRequestBodyVoiceIDEnum = "Mads"
	SynthesizeSpeechRequestBodyVoiceIDEnumMaja      SynthesizeSpeechRequestBodyVoiceIDEnum = "Maja"
	SynthesizeSpeechRequestBodyVoiceIDEnumMarlene   SynthesizeSpeechRequestBodyVoiceIDEnum = "Marlene"
	SynthesizeSpeechRequestBodyVoiceIDEnumMathieu   SynthesizeSpeechRequestBodyVoiceIDEnum = "Mathieu"
	SynthesizeSpeechRequestBodyVoiceIDEnumMatthew   SynthesizeSpeechRequestBodyVoiceIDEnum = "Matthew"
	SynthesizeSpeechRequestBodyVoiceIDEnumMaxim     SynthesizeSpeechRequestBodyVoiceIDEnum = "Maxim"
	SynthesizeSpeechRequestBodyVoiceIDEnumMia       SynthesizeSpeechRequestBodyVoiceIDEnum = "Mia"
	SynthesizeSpeechRequestBodyVoiceIDEnumMiguel    SynthesizeSpeechRequestBodyVoiceIDEnum = "Miguel"
	SynthesizeSpeechRequestBodyVoiceIDEnumMizuki    SynthesizeSpeechRequestBodyVoiceIDEnum = "Mizuki"
	SynthesizeSpeechRequestBodyVoiceIDEnumNaja      SynthesizeSpeechRequestBodyVoiceIDEnum = "Naja"
	SynthesizeSpeechRequestBodyVoiceIDEnumNicole    SynthesizeSpeechRequestBodyVoiceIDEnum = "Nicole"
	SynthesizeSpeechRequestBodyVoiceIDEnumOlivia    SynthesizeSpeechRequestBodyVoiceIDEnum = "Olivia"
	SynthesizeSpeechRequestBodyVoiceIDEnumPenelope  SynthesizeSpeechRequestBodyVoiceIDEnum = "Penelope"
	SynthesizeSpeechRequestBodyVoiceIDEnumRaveena   SynthesizeSpeechRequestBodyVoiceIDEnum = "Raveena"
	SynthesizeSpeechRequestBodyVoiceIDEnumRicardo   SynthesizeSpeechRequestBodyVoiceIDEnum = "Ricardo"
	SynthesizeSpeechRequestBodyVoiceIDEnumRuben     SynthesizeSpeechRequestBodyVoiceIDEnum = "Ruben"
	SynthesizeSpeechRequestBodyVoiceIDEnumRussell   SynthesizeSpeechRequestBodyVoiceIDEnum = "Russell"
	SynthesizeSpeechRequestBodyVoiceIDEnumSalli     SynthesizeSpeechRequestBodyVoiceIDEnum = "Salli"
	SynthesizeSpeechRequestBodyVoiceIDEnumSeoyeon   SynthesizeSpeechRequestBodyVoiceIDEnum = "Seoyeon"
	SynthesizeSpeechRequestBodyVoiceIDEnumTakumi    SynthesizeSpeechRequestBodyVoiceIDEnum = "Takumi"
	SynthesizeSpeechRequestBodyVoiceIDEnumTatyana   SynthesizeSpeechRequestBodyVoiceIDEnum = "Tatyana"
	SynthesizeSpeechRequestBodyVoiceIDEnumVicki     SynthesizeSpeechRequestBodyVoiceIDEnum = "Vicki"
	SynthesizeSpeechRequestBodyVoiceIDEnumVitoria   SynthesizeSpeechRequestBodyVoiceIDEnum = "Vitoria"
	SynthesizeSpeechRequestBodyVoiceIDEnumZeina     SynthesizeSpeechRequestBodyVoiceIDEnum = "Zeina"
	SynthesizeSpeechRequestBodyVoiceIDEnumZhiyu     SynthesizeSpeechRequestBodyVoiceIDEnum = "Zhiyu"
	SynthesizeSpeechRequestBodyVoiceIDEnumAria      SynthesizeSpeechRequestBodyVoiceIDEnum = "Aria"
	SynthesizeSpeechRequestBodyVoiceIDEnumAyanda    SynthesizeSpeechRequestBodyVoiceIDEnum = "Ayanda"
	SynthesizeSpeechRequestBodyVoiceIDEnumArlet     SynthesizeSpeechRequestBodyVoiceIDEnum = "Arlet"
	SynthesizeSpeechRequestBodyVoiceIDEnumHannah    SynthesizeSpeechRequestBodyVoiceIDEnum = "Hannah"
	SynthesizeSpeechRequestBodyVoiceIDEnumArthur    SynthesizeSpeechRequestBodyVoiceIDEnum = "Arthur"
	SynthesizeSpeechRequestBodyVoiceIDEnumDaniel    SynthesizeSpeechRequestBodyVoiceIDEnum = "Daniel"
	SynthesizeSpeechRequestBodyVoiceIDEnumLiam      SynthesizeSpeechRequestBodyVoiceIDEnum = "Liam"
	SynthesizeSpeechRequestBodyVoiceIDEnumPedro     SynthesizeSpeechRequestBodyVoiceIDEnum = "Pedro"
	SynthesizeSpeechRequestBodyVoiceIDEnumKajal     SynthesizeSpeechRequestBodyVoiceIDEnum = "Kajal"
	SynthesizeSpeechRequestBodyVoiceIDEnumHiujin    SynthesizeSpeechRequestBodyVoiceIDEnum = "Hiujin"
	SynthesizeSpeechRequestBodyVoiceIDEnumLaura     SynthesizeSpeechRequestBodyVoiceIDEnum = "Laura"
	SynthesizeSpeechRequestBodyVoiceIDEnumElin      SynthesizeSpeechRequestBodyVoiceIDEnum = "Elin"
	SynthesizeSpeechRequestBodyVoiceIDEnumIda       SynthesizeSpeechRequestBodyVoiceIDEnum = "Ida"
	SynthesizeSpeechRequestBodyVoiceIDEnumSuvi      SynthesizeSpeechRequestBodyVoiceIDEnum = "Suvi"
	SynthesizeSpeechRequestBodyVoiceIDEnumOla       SynthesizeSpeechRequestBodyVoiceIDEnum = "Ola"
	SynthesizeSpeechRequestBodyVoiceIDEnumHala      SynthesizeSpeechRequestBodyVoiceIDEnum = "Hala"
	SynthesizeSpeechRequestBodyVoiceIDEnumAndres    SynthesizeSpeechRequestBodyVoiceIDEnum = "Andres"
	SynthesizeSpeechRequestBodyVoiceIDEnumSergio    SynthesizeSpeechRequestBodyVoiceIDEnum = "Sergio"
	SynthesizeSpeechRequestBodyVoiceIDEnumRemi      SynthesizeSpeechRequestBodyVoiceIDEnum = "Remi"
	SynthesizeSpeechRequestBodyVoiceIDEnumAdriano   SynthesizeSpeechRequestBodyVoiceIDEnum = "Adriano"
	SynthesizeSpeechRequestBodyVoiceIDEnumThiago    SynthesizeSpeechRequestBodyVoiceIDEnum = "Thiago"
	SynthesizeSpeechRequestBodyVoiceIDEnumRuth      SynthesizeSpeechRequestBodyVoiceIDEnum = "Ruth"
	SynthesizeSpeechRequestBodyVoiceIDEnumStephen   SynthesizeSpeechRequestBodyVoiceIDEnum = "Stephen"
	SynthesizeSpeechRequestBodyVoiceIDEnumKazuha    SynthesizeSpeechRequestBodyVoiceIDEnum = "Kazuha"
	SynthesizeSpeechRequestBodyVoiceIDEnumTomoko    SynthesizeSpeechRequestBodyVoiceIDEnum = "Tomoko"
)

func (e SynthesizeSpeechRequestBodyVoiceIDEnum) ToPointer() *SynthesizeSpeechRequestBodyVoiceIDEnum {
	return &e
}

func (e *SynthesizeSpeechRequestBodyVoiceIDEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Aditi":
		fallthrough
	case "Amy":
		fallthrough
	case "Astrid":
		fallthrough
	case "Bianca":
		fallthrough
	case "Brian":
		fallthrough
	case "Camila":
		fallthrough
	case "Carla":
		fallthrough
	case "Carmen":
		fallthrough
	case "Celine":
		fallthrough
	case "Chantal":
		fallthrough
	case "Conchita":
		fallthrough
	case "Cristiano":
		fallthrough
	case "Dora":
		fallthrough
	case "Emma":
		fallthrough
	case "Enrique":
		fallthrough
	case "Ewa":
		fallthrough
	case "Filiz":
		fallthrough
	case "Gabrielle":
		fallthrough
	case "Geraint":
		fallthrough
	case "Giorgio":
		fallthrough
	case "Gwyneth":
		fallthrough
	case "Hans":
		fallthrough
	case "Ines":
		fallthrough
	case "Ivy":
		fallthrough
	case "Jacek":
		fallthrough
	case "Jan":
		fallthrough
	case "Joanna":
		fallthrough
	case "Joey":
		fallthrough
	case "Justin":
		fallthrough
	case "Karl":
		fallthrough
	case "Kendra":
		fallthrough
	case "Kevin":
		fallthrough
	case "Kimberly":
		fallthrough
	case "Lea":
		fallthrough
	case "Liv":
		fallthrough
	case "Lotte":
		fallthrough
	case "Lucia":
		fallthrough
	case "Lupe":
		fallthrough
	case "Mads":
		fallthrough
	case "Maja":
		fallthrough
	case "Marlene":
		fallthrough
	case "Mathieu":
		fallthrough
	case "Matthew":
		fallthrough
	case "Maxim":
		fallthrough
	case "Mia":
		fallthrough
	case "Miguel":
		fallthrough
	case "Mizuki":
		fallthrough
	case "Naja":
		fallthrough
	case "Nicole":
		fallthrough
	case "Olivia":
		fallthrough
	case "Penelope":
		fallthrough
	case "Raveena":
		fallthrough
	case "Ricardo":
		fallthrough
	case "Ruben":
		fallthrough
	case "Russell":
		fallthrough
	case "Salli":
		fallthrough
	case "Seoyeon":
		fallthrough
	case "Takumi":
		fallthrough
	case "Tatyana":
		fallthrough
	case "Vicki":
		fallthrough
	case "Vitoria":
		fallthrough
	case "Zeina":
		fallthrough
	case "Zhiyu":
		fallthrough
	case "Aria":
		fallthrough
	case "Ayanda":
		fallthrough
	case "Arlet":
		fallthrough
	case "Hannah":
		fallthrough
	case "Arthur":
		fallthrough
	case "Daniel":
		fallthrough
	case "Liam":
		fallthrough
	case "Pedro":
		fallthrough
	case "Kajal":
		fallthrough
	case "Hiujin":
		fallthrough
	case "Laura":
		fallthrough
	case "Elin":
		fallthrough
	case "Ida":
		fallthrough
	case "Suvi":
		fallthrough
	case "Ola":
		fallthrough
	case "Hala":
		fallthrough
	case "Andres":
		fallthrough
	case "Sergio":
		fallthrough
	case "Remi":
		fallthrough
	case "Adriano":
		fallthrough
	case "Thiago":
		fallthrough
	case "Ruth":
		fallthrough
	case "Stephen":
		fallthrough
	case "Kazuha":
		fallthrough
	case "Tomoko":
		*e = SynthesizeSpeechRequestBodyVoiceIDEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SynthesizeSpeechRequestBodyVoiceIDEnum: %v", v)
	}
}

type SynthesizeSpeechRequestBody struct {
	// <p>Specifies the engine (<code>standard</code> or <code>neural</code>) for Amazon Polly to use when processing input text for speech synthesis. For information on Amazon Polly voices and which voices are available in standard-only, NTTS-only, and both standard and NTTS formats, see <a href="https://docs.aws.amazon.com/polly/latest/dg/voicelist.html">Available Voices</a>.</p> <p> <b>NTTS-only voices</b> </p> <p>When using NTTS-only voices such as Kevin (en-US), this parameter is required and must be set to <code>neural</code>. If the engine is not specified, or is set to <code>standard</code>, this will result in an error. </p> <p>Type: String</p> <p>Valid Values: <code>standard</code> | <code>neural</code> </p> <p>Required: Yes</p> <p> <b>Standard voices</b> </p> <p>For standard voices, this is not required; the engine parameter defaults to <code>standard</code>. If the engine is not specified, or is set to <code>standard</code> and an NTTS-only voice is selected, this will result in an error. </p>
	Engine *SynthesizeSpeechRequestBodyEngineEnum `json:"Engine,omitempty"`
	// <p>Optional language code for the Synthesize Speech request. This is only necessary if using a bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi (hi-IN). </p> <p>If a bilingual voice is used and no language code is specified, Amazon Polly uses the default language of the bilingual voice. The default language for any voice is the one returned by the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices</a> operation for the <code>LanguageCode</code> parameter. For example, if no language code is specified, Aditi will use Indian English rather than Hindi.</p>
	LanguageCode *SynthesizeSpeechRequestBodyLanguageCodeEnum `json:"LanguageCode,omitempty"`
	// List of one or more pronunciation lexicon names you want the service to apply during synthesis. Lexicons are applied only if the language of the lexicon is the same as the language of the voice. For information about storing lexicons, see <a href="https://docs.aws.amazon.com/polly/latest/dg/API_PutLexicon.html">PutLexicon</a>.
	LexiconNames []string `json:"LexiconNames,omitempty"`
	// <p> The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json. </p> <p>When pcm is used, the content returned is audio/pcm in a signed 16-bit, 1 channel (mono), little-endian format. </p>
	OutputFormat SynthesizeSpeechRequestBodyOutputFormatEnum `json:"OutputFormat"`
	// <p>The audio frequency specified in Hz.</p> <p>The valid values for mp3 and ogg_vorbis are "8000", "16000", "22050", and "24000". The default value for standard voices is "22050". The default value for neural voices is "24000".</p> <p>Valid values for pcm are "8000" and "16000" The default value is "16000". </p>
	SampleRate *string `json:"SampleRate,omitempty"`
	// The type of speech marks returned for the input text.
	SpeechMarkTypes []shared.SpeechMarkTypeEnum `json:"SpeechMarkTypes,omitempty"`
	//  Input text to synthesize. If you specify <code>ssml</code> as the <code>TextType</code>, follow the SSML format for the input text.
	Text string `json:"Text"`
	//  Specifies whether the input text is plain text or SSML. The default value is plain text. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/ssml.html">Using SSML</a>.
	TextType *SynthesizeSpeechRequestBodyTextTypeEnum `json:"TextType,omitempty"`
	//  Voice ID to use for the synthesis. You can get a list of available voice IDs by calling the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices</a> operation.
	VoiceID SynthesizeSpeechRequestBodyVoiceIDEnum `json:"VoiceId"`
}

type SynthesizeSpeechRequest struct {
	RequestBody       SynthesizeSpeechRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type SynthesizeSpeechResponse struct {
	ContentType string
	// EngineNotSupportedException
	EngineNotSupportedException interface{}
	// InvalidSampleRateException
	InvalidSampleRateException interface{}
	// InvalidSsmlException
	InvalidSsmlException interface{}
	// LanguageNotSupportedException
	LanguageNotSupportedException interface{}
	// LexiconNotFoundException
	LexiconNotFoundException interface{}
	// MarksNotSupportedForFormatException
	MarksNotSupportedForFormatException interface{}
	// ServiceFailureException
	ServiceFailureException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// SsmlMarksNotSupportedForTextTypeException
	SsmlMarksNotSupportedForTextTypeException interface{}
	// Success
	SynthesizeSpeechOutput *shared.SynthesizeSpeechOutput
	// TextLengthExceededException
	TextLengthExceededException interface{}
}
