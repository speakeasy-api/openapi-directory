/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BreakType - A defined break template that sets an expectation for possible `Break`
 * instances on a `Shift`.
 */
public class BreakType {
    /**
     * A human-readable name for this type of break. The name is displayed to
     * employees in Square products.
     */
    @JsonProperty("break_name")
    public String breakName;
    public BreakType withBreakName(String breakName) {
        this.breakName = breakName;
        return this;
    }
    
    /**
     * A read-only timestamp in RFC 3339 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;
    public BreakType withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
     * this break. Precision less than minutes is truncated.
     */
    @JsonProperty("expected_duration")
    public String expectedDuration;
    public BreakType withExpectedDuration(String expectedDuration) {
        this.expectedDuration = expectedDuration;
        return this;
    }
    
    /**
     * The UUID for this object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public BreakType withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Whether this break counts towards time worked for compensation
     * purposes.
     */
    @JsonProperty("is_paid")
    public Boolean isPaid;
    public BreakType withIsPaid(Boolean isPaid) {
        this.isPaid = isPaid;
        return this;
    }
    
    /**
     * The ID of the business location this type of break applies to.
     */
    @JsonProperty("location_id")
    public String locationId;
    public BreakType withLocationId(String locationId) {
        this.locationId = locationId;
        return this;
    }
    
    /**
     * A read-only timestamp in RFC 3339 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public String updatedAt;
    public BreakType withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Used for resolving concurrency issues. The request fails if the version
     * provided does not match the server version at the time of the request. If a value is not
     * provided, Square's servers execute a "blind" write; potentially
     * overwriting another writer's data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Long version;
    public BreakType withVersion(Long version) {
        this.version = version;
        return this;
    }
    
}
