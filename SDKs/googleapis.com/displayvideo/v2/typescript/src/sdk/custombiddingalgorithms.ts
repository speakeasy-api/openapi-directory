/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class CustomBiddingAlgorithms {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new custom bidding algorithm. Returns the newly created custom bidding algorithm if successful.
   */
  displayvideoCustomBiddingAlgorithmsCreate(
    req: operations.DisplayvideoCustomBiddingAlgorithmsCreateRequest,
    security: operations.DisplayvideoCustomBiddingAlgorithmsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoCustomBiddingAlgorithmsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoCustomBiddingAlgorithmsCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/customBiddingAlgorithms";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "customBiddingAlgorithmInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoCustomBiddingAlgorithmsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoCustomBiddingAlgorithmsCreateResponse =
        new operations.DisplayvideoCustomBiddingAlgorithmsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customBiddingAlgorithm = utils.objectToClass(
              httpRes?.data,
              shared.CustomBiddingAlgorithm
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a custom bidding algorithm.
   */
  displayvideoCustomBiddingAlgorithmsGet(
    req: operations.DisplayvideoCustomBiddingAlgorithmsGetRequest,
    security: operations.DisplayvideoCustomBiddingAlgorithmsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoCustomBiddingAlgorithmsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoCustomBiddingAlgorithmsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DisplayvideoCustomBiddingAlgorithmsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoCustomBiddingAlgorithmsGetResponse =
        new operations.DisplayvideoCustomBiddingAlgorithmsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customBiddingAlgorithm = utils.objectToClass(
              httpRes?.data,
              shared.CustomBiddingAlgorithm
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists custom bidding algorithms that are accessible to the current user and can be used in bidding stratgies. The order is defined by the order_by parameter.
   */
  displayvideoCustomBiddingAlgorithmsList(
    req: operations.DisplayvideoCustomBiddingAlgorithmsListRequest,
    security: operations.DisplayvideoCustomBiddingAlgorithmsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoCustomBiddingAlgorithmsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoCustomBiddingAlgorithmsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/customBiddingAlgorithms";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DisplayvideoCustomBiddingAlgorithmsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoCustomBiddingAlgorithmsListResponse =
        new operations.DisplayvideoCustomBiddingAlgorithmsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCustomBiddingAlgorithmsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListCustomBiddingAlgorithmsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing custom bidding algorithm. Returns the updated custom bidding algorithm if successful.
   */
  displayvideoCustomBiddingAlgorithmsPatch(
    req: operations.DisplayvideoCustomBiddingAlgorithmsPatchRequest,
    security: operations.DisplayvideoCustomBiddingAlgorithmsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoCustomBiddingAlgorithmsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoCustomBiddingAlgorithmsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "customBiddingAlgorithmInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoCustomBiddingAlgorithmsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoCustomBiddingAlgorithmsPatchResponse =
        new operations.DisplayvideoCustomBiddingAlgorithmsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customBiddingAlgorithm = utils.objectToClass(
              httpRes?.data,
              shared.CustomBiddingAlgorithm
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new custom bidding script. Returns the newly created script if successful.
   */
  displayvideoCustomBiddingAlgorithmsScriptsCreate(
    req: operations.DisplayvideoCustomBiddingAlgorithmsScriptsCreateRequest,
    security: operations.DisplayvideoCustomBiddingAlgorithmsScriptsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoCustomBiddingAlgorithmsScriptsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DisplayvideoCustomBiddingAlgorithmsScriptsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}/scripts",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "customBiddingScriptInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoCustomBiddingAlgorithmsScriptsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoCustomBiddingAlgorithmsScriptsCreateResponse =
        new operations.DisplayvideoCustomBiddingAlgorithmsScriptsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customBiddingScript = utils.objectToClass(
              httpRes?.data,
              shared.CustomBiddingScript
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a custom bidding script.
   */
  displayvideoCustomBiddingAlgorithmsScriptsGet(
    req: operations.DisplayvideoCustomBiddingAlgorithmsScriptsGetRequest,
    security: operations.DisplayvideoCustomBiddingAlgorithmsScriptsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoCustomBiddingAlgorithmsScriptsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoCustomBiddingAlgorithmsScriptsGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}/scripts/{customBiddingScriptId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoCustomBiddingAlgorithmsScriptsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoCustomBiddingAlgorithmsScriptsGetResponse =
        new operations.DisplayvideoCustomBiddingAlgorithmsScriptsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customBiddingScript = utils.objectToClass(
              httpRes?.data,
              shared.CustomBiddingScript
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists custom bidding scripts that belong to the given algorithm. The order is defined by the order_by parameter.
   */
  displayvideoCustomBiddingAlgorithmsScriptsList(
    req: operations.DisplayvideoCustomBiddingAlgorithmsScriptsListRequest,
    security: operations.DisplayvideoCustomBiddingAlgorithmsScriptsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoCustomBiddingAlgorithmsScriptsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DisplayvideoCustomBiddingAlgorithmsScriptsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}/scripts",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoCustomBiddingAlgorithmsScriptsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoCustomBiddingAlgorithmsScriptsListResponse =
        new operations.DisplayvideoCustomBiddingAlgorithmsScriptsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCustomBiddingScriptsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListCustomBiddingScriptsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a custom bidding script reference object for a script file. The resulting reference object provides a resource path to which the script file should be uploaded. This reference object should be included in when creating a new custom bidding script object.
   */
  displayvideoCustomBiddingAlgorithmsUploadScript(
    req: operations.DisplayvideoCustomBiddingAlgorithmsUploadScriptRequest,
    security: operations.DisplayvideoCustomBiddingAlgorithmsUploadScriptSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoCustomBiddingAlgorithmsUploadScriptResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DisplayvideoCustomBiddingAlgorithmsUploadScriptRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}:uploadScript",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoCustomBiddingAlgorithmsUploadScriptSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoCustomBiddingAlgorithmsUploadScriptResponse =
        new operations.DisplayvideoCustomBiddingAlgorithmsUploadScriptResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customBiddingScriptRef = utils.objectToClass(
              httpRes?.data,
              shared.CustomBiddingScriptRef
            );
          }
          break;
      }

      return res;
    });
  }
}
