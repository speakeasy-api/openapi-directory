"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class WeekDayOfMonthDayOfWeekEnum(str, Enum):
    r"""Required. A day of the week."""
    DAY_OF_WEEK_UNSPECIFIED = 'DAY_OF_WEEK_UNSPECIFIED'
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'
    SUNDAY = 'SUNDAY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WeekDayOfMonth:
    r"""Represents one week day in a month. An example is \\"the 4th Sunday\\"."""
    
    day_offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayOffset'), 'exclude': lambda f: f is None }})
    r"""Optional. Represents the number of days before or after the given week day of month that the patch deployment is scheduled for. For example if `week_ordinal` and `day_of_week` values point to the second day of the month and this `day_offset` value is set to `3`, the patch deployment takes place three days after the second Tuesday of the month. If this value is negative, for example -5, the patches are deployed five days before before the second Tuesday of the month. Allowed values are in range [-30, 30]."""  
    day_of_week: Optional[WeekDayOfMonthDayOfWeekEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayOfWeek'), 'exclude': lambda f: f is None }})
    r"""Required. A day of the week."""  
    week_ordinal: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weekOrdinal'), 'exclude': lambda f: f is None }})
    r"""Required. Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month."""  
    