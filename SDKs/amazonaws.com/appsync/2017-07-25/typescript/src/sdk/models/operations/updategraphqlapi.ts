/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The new authentication type for the <code>GraphqlApi</code> object.
 */
export enum UpdateGraphqlApiRequestBodyAuthenticationTypeEnum {
  ApiKey = "API_KEY",
  AwsIam = "AWS_IAM",
  AmazonCognitoUserPools = "AMAZON_COGNITO_USER_POOLS",
  OpenidConnect = "OPENID_CONNECT",
  AwsLambda = "AWS_LAMBDA",
}

/**
 * A <code>LambdaAuthorizerConfig</code> specifies how to authorize AppSync API access when using the <code>AWS_LAMBDA</code> authorizer mode. Be aware that an AppSync API can have only one Lambda authorizer configured at a time.
 */
export class UpdateGraphqlApiRequestBodyLambdaAuthorizerConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "authorizerResultTtlInSeconds" })
  authorizerResultTtlInSeconds?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "authorizerUri" })
  authorizerUri?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "identityValidationExpression" })
  identityValidationExpression?: string;
}

/**
 * The Amazon CloudWatch Logs configuration.
 */
export class UpdateGraphqlApiRequestBodyLogConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "cloudWatchLogsRoleArn" })
  cloudWatchLogsRoleArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "excludeVerboseContent" })
  excludeVerboseContent?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "fieldLogLevel" })
  fieldLogLevel?: shared.FieldLogLevelEnum;
}

/**
 * Describes an OpenID Connect (OIDC) configuration.
 */
export class UpdateGraphqlApiRequestBodyOpenIDConnectConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "authTTL" })
  authTTL?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "clientId" })
  clientId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "iatTTL" })
  iatTTL?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "issuer" })
  issuer?: string;
}

/**
 * Describes an Amazon Cognito user pool configuration.
 */
export class UpdateGraphqlApiRequestBodyUserPoolConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "appIdClientRegex" })
  appIdClientRegex?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "awsRegion" })
  awsRegion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "defaultAction" })
  defaultAction?: shared.DefaultActionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "userPoolId" })
  userPoolId?: string;
}

export class UpdateGraphqlApiRequestBody extends SpeakeasyBase {
  /**
   * A list of additional authentication providers for the <code>GraphqlApi</code> API.
   */
  @SpeakeasyMetadata({ elemType: shared.AdditionalAuthenticationProvider })
  @Expose({ name: "additionalAuthenticationProviders" })
  @Type(() => shared.AdditionalAuthenticationProvider)
  additionalAuthenticationProviders?: shared.AdditionalAuthenticationProvider[];

  /**
   * The new authentication type for the <code>GraphqlApi</code> object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authenticationType" })
  authenticationType?: UpdateGraphqlApiRequestBodyAuthenticationTypeEnum;

  /**
   * A <code>LambdaAuthorizerConfig</code> specifies how to authorize AppSync API access when using the <code>AWS_LAMBDA</code> authorizer mode. Be aware that an AppSync API can have only one Lambda authorizer configured at a time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lambdaAuthorizerConfig" })
  @Type(() => UpdateGraphqlApiRequestBodyLambdaAuthorizerConfig)
  lambdaAuthorizerConfig?: UpdateGraphqlApiRequestBodyLambdaAuthorizerConfig;

  /**
   * The Amazon CloudWatch Logs configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "logConfig" })
  @Type(() => UpdateGraphqlApiRequestBodyLogConfig)
  logConfig?: UpdateGraphqlApiRequestBodyLogConfig;

  /**
   * The new name for the <code>GraphqlApi</code> object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Describes an OpenID Connect (OIDC) configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "openIDConnectConfig" })
  @Type(() => UpdateGraphqlApiRequestBodyOpenIDConnectConfig)
  openIDConnectConfig?: UpdateGraphqlApiRequestBodyOpenIDConnectConfig;

  /**
   * Describes an Amazon Cognito user pool configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userPoolConfig" })
  @Type(() => UpdateGraphqlApiRequestBodyUserPoolConfig)
  userPoolConfig?: UpdateGraphqlApiRequestBodyUserPoolConfig;

  /**
   * A flag indicating whether to use X-Ray tracing for the <code>GraphqlApi</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "xrayEnabled" })
  xrayEnabled?: boolean;
}

export class UpdateGraphqlApiRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateGraphqlApiRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The API ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=apiId",
  })
  apiId: string;
}

export class UpdateGraphqlApiResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  /**
   * ConcurrentModificationException
   */
  @SpeakeasyMetadata()
  concurrentModificationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * UnauthorizedException
   */
  @SpeakeasyMetadata()
  unauthorizedException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateGraphqlApiResponse?: shared.UpdateGraphqlApiResponse;
}
