"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Downloads:
    r"""Access the list of download links associated with the repository."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_repositories_workspace_repo_slug_downloads_filename_(self, request: operations.DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameRequest, security: operations.DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameSecurity) -> operations.DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse:
        r"""Delete a download artifact
        Deletes the specified download artifact from the repository.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameRequest, base_url, '/repositories/{workspace}/{repo_slug}/downloads/{filename}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_downloads(self, request: operations.GetRepositoriesWorkspaceRepoSlugDownloadsRequest, security: operations.GetRepositoriesWorkspaceRepoSlugDownloadsSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugDownloadsResponse:
        r"""List download artifacts
        Returns a list of download links associated with the repository.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugDownloadsRequest, base_url, '/repositories/{workspace}/{repo_slug}/downloads', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugDownloadsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_downloads_filename_(self, request: operations.GetRepositoriesWorkspaceRepoSlugDownloadsFilenameRequest, security: operations.GetRepositoriesWorkspaceRepoSlugDownloadsFilenameSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse:
        r"""Get a download artifact link
        Return a redirect to the contents of a download artifact.
        
        This endpoint returns the actual file contents and not the artifact's
        metadata.
        
            $ curl -s -L https://api.bitbucket.org/2.0/repositories/evzijst/git-tests/downloads/hello.txt
            Hello World
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugDownloadsFilenameRequest, base_url, '/repositories/{workspace}/{repo_slug}/downloads/{filename}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 302:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def post_repositories_workspace_repo_slug_downloads(self, request: operations.PostRepositoriesWorkspaceRepoSlugDownloadsRequest, security: operations.PostRepositoriesWorkspaceRepoSlugDownloadsSecurity) -> operations.PostRepositoriesWorkspaceRepoSlugDownloadsResponse:
        r"""Upload a download artifact
        Upload new download artifacts.
        
        To upload files, perform a `multipart/form-data` POST containing one
        or more `files` fields:
        
            $ echo Hello World > hello.txt
            $ curl -s -u evzijst -X POST https://api.bitbucket.org/2.0/repositories/evzijst/git-tests/downloads -F files=@hello.txt
        
        When a file is uploaded with the same name as an existing artifact,
        then the existing file will be replaced.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRepositoriesWorkspaceRepoSlugDownloadsRequest, base_url, '/repositories/{workspace}/{repo_slug}/downloads', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRepositoriesWorkspaceRepoSlugDownloadsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            pass
        elif http_res.status_code in [400, 403, 406]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    