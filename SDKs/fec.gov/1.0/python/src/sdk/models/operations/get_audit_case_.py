"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import auditcasepage as shared_auditcasepage
from typing import Optional


@dataclasses.dataclass
class GetAuditCaseRequest:
    
    api_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""API key for https://api.data.gov. Get one at https://api.data.gov/signup."""  
    audit_case_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'audit_case_id', 'style': 'form', 'explode': True }})
    r"""Primary/foreign key for audit tables"""  
    audit_id: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'audit_id', 'style': 'form', 'explode': True }})
    r"""The audit issue. Each subcategory has an unique ID"""  
    candidate_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'candidate_id', 'style': 'form', 'explode': True }})
    r"""A unique identifier assigned to each candidate registered with the FEC.
    If a person runs for several offices, that person will have separate candidate IDs for each office.
    """  
    committee_designation: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'committee_designation', 'style': 'form', 'explode': True }})
    r"""Type of committee:
            - H or S - Congressional
            - P - Presidential
            - X or Y or Z - Party
            - N or Q - PAC
            - I - Independent expenditure
            - O - Super PAC
    """  
    committee_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'committee_id', 'style': 'form', 'explode': True }})
    r"""A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits."""  
    committee_type: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'committee_type', 'style': 'form', 'explode': True }})
    r"""The one-letter type code of the organization:
            - C communication cost
            - D delegate
            - E electioneering communication
            - H House
            - I independent expenditure filer (not a committee)
            - N PAC - nonqualified
            - O independent expenditure-only (super PACs)
            - P presidential
            - Q PAC - qualified
            - S Senate
            - U single candidate independent expenditure
            - V PAC with non-contribution account, nonqualified
            - W PAC with non-contribution account, qualified
            - X party, nonqualified
            - Y party, qualified
            - Z national party non-federal account
    """  
    cycle: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cycle', 'style': 'form', 'explode': True }})
    r"""Filter records to only those that are applicable to a given two-year
    period. This cycle follows the traditional House election cycle and
    subdivides the presidential and Senate elections into comparable
    two-year blocks. The cycle begins with an odd year and is named for its
    ending, even year.
    """  
    max_election_cycle: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_election_cycle', 'style': 'form', 'explode': True }})
    r"""Filter records to only those that are applicable to a given two-year
    period. This cycle follows the traditional House election cycle and
    subdivides the presidential and Senate elections into comparable
    two-year blocks. The cycle begins with an odd year and is named for its
    ending, even year.
    """  
    min_election_cycle: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_election_cycle', 'style': 'form', 'explode': True }})
    r"""Filter records to only those that are applicable to a given two-year
    period. This cycle follows the traditional House election cycle and
    subdivides the presidential and Senate elections into comparable
    two-year blocks. The cycle begins with an odd year and is named for its
    ending, even year.
    """  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""For paginating through results, starting at page 1"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results returned per page. Defaults to 20."""  
    primary_category_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'primary_category_id', 'style': 'form', 'explode': True }})
    r"""Audit category ID (table PK)"""  
    q: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records."""  
    qq: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'qq', 'style': 'form', 'explode': True }})
    r"""Name of candidate running for office"""  
    sort: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Provide a field to sort by. Use `-` for descending order. ex: `-case_no`"""  
    sort_hide_null: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_hide_null', 'style': 'form', 'explode': True }})
    r"""Hide null values on sorted column(s)."""  
    sort_null_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_null_only', 'style': 'form', 'explode': True }})
    r"""Toggle that filters out all rows having sort column that is non-null"""  
    sort_nulls_last: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_nulls_last', 'style': 'form', 'explode': True }})
    r"""Toggle that sorts null values last"""  
    sub_category_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sub_category_id', 'style': 'form', 'explode': True }})
    r"""The finding id of an audit. Finding are a category of broader issues. Each category has an unique ID."""  
    

@dataclasses.dataclass
class GetAuditCaseResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    audit_case_page: Optional[shared_auditcasepage.AuditCasePage] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    