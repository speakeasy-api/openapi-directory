// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PlusCommentsListSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type PlusCommentsListSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type PlusCommentsListSecurity struct {
	Option1 *PlusCommentsListSecurityOption1 `security:"option"`
	Option2 *PlusCommentsListSecurityOption2 `security:"option"`
}

// PlusCommentsListSortOrderEnum - The order in which to sort the list of comments.
type PlusCommentsListSortOrderEnum string

const (
	PlusCommentsListSortOrderEnumAscending  PlusCommentsListSortOrderEnum = "ascending"
	PlusCommentsListSortOrderEnumDescending PlusCommentsListSortOrderEnum = "descending"
)

func (e PlusCommentsListSortOrderEnum) ToPointer() *PlusCommentsListSortOrderEnum {
	return &e
}

func (e *PlusCommentsListSortOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ascending":
		fallthrough
	case "descending":
		*e = PlusCommentsListSortOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlusCommentsListSortOrderEnum: %v", v)
	}
}

type PlusCommentsListRequest struct {
	// The ID of the activity to get comments for.
	ActivityID string `pathParam:"style=simple,explode=false,name=activityId"`
	// Data format for the response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// The maximum number of comments to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// The order in which to sort the list of comments.
	SortOrder *PlusCommentsListSortOrderEnum `queryParam:"style=form,explode=true,name=sortOrder"`
	// Deprecated. Please use quotaUser instead.
	UserIP *string `queryParam:"style=form,explode=true,name=userIp"`
}

type PlusCommentsListResponse struct {
	// Successful response
	CommentFeed *shared.CommentFeed
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
