"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class ManageSuggestions:
    r"""Send or delete SKU suggestions from the seller to marketplace"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_suggestion(self, request: operations.DeleteSuggestionRequest) -> operations.DeleteSuggestionResponse:
        r"""Delete SKU Suggestion
        This endpoint deletes a chosen SKU suggestion. Only one SKU should be deleted per request. This request cannot be undone. A workaround to revert its action, is to send the suggestion again, through the Send Suggestion API.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSuggestionRequest, base_url, '/suggestions/{sellerId}/{sellerSkuId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.DeleteSuggestionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSuggestionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def save_suggestion(self, request: operations.SaveSuggestionRequest) -> operations.SaveSuggestionResponse:
        r"""Send SKU Suggestion
        This request is used by the seller when it wants to suggest that one of their SKUs is sold in the marketplace.
        
        Before using this request, the seller should always use the [Change Notification](https://developers.vtex.com/vtex-rest-api/reference/catalog-api-get-seller-sku-notification) request in order to check if the SKU already exists in the marketplace. If it doesn't, then this is the next call in the SKU integration flow.
        
        In the Send Suggestion request, the seller must send information about the SKU, such as the product and SKU name, the seller ID, and the image URL. All parameters are explained below.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SaveSuggestionRequest, base_url, '/suggestions/{sellerId}/{sellerSkuId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "save_suggestion_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.SaveSuggestionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SaveSuggestionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    