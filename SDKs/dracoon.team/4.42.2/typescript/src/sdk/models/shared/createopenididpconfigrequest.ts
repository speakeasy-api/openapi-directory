/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * &#128640; Since v4.11.0
 *
 * @remarks
 *
 * Flow, which is used at authentication
 */
export enum CreateOpenIdIdpConfigRequestFlowEnum {
  AuthorizationCode = "authorization_code",
  Hybrid = "hybrid",
}

/**
 * &#128640; Since v4.23.0
 *
 * @remarks
 *
 * Source, which is used to get user information at the import or update of a user.
 */
export enum CreateOpenIdIdpConfigRequestUserInfoSourceEnum {
  UserInfoEndpoint = "user_info_endpoint",
  IdToken = "id_token",
}

/**
 * Request model for creating an OpenID Connect IDP configuration
 */
export class CreateOpenIdIdpConfigRequest extends SpeakeasyBase {
  /**
   * URL of the authorization endpoint
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizationEndPointUrl" })
  authorizationEndPointUrl: string;

  /**
   * ID of the OpenID client
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientId" })
  clientId: string;

  /**
   * Secret, which client uses at authentication.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientSecret" })
  clientSecret: string;

  /**
   * Name of the claim which is used for the user mapping fallback.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fallbackMappingClaim" })
  fallbackMappingClaim?: string;

  /**
   * &#128640; Since v4.11.0
   *
   * @remarks
   *
   * Flow, which is used at authentication
   */
  @SpeakeasyMetadata()
  @Expose({ name: "flow" })
  flow?: CreateOpenIdIdpConfigRequestFlowEnum;

  /**
   * Issuer identifier of the IDP
   *
   * @remarks
   *
   * The value is a case sensitive URL.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "issuer" })
  issuer: string;

  /**
   * URL of the JWKS endpoint
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jwksEndPointUrl" })
  jwksEndPointUrl: string;

  /**
   * Name of the claim which is used for the user mapping.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mappingClaim" })
  mappingClaim: string;

  /**
   * Name of the IDP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * PKCE code challenge method.
   *
   * @remarks
   *
   * cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pkceChallengeMethod" })
  pkceChallengeMethod?: string;

  /**
   * Determines whether PKCE is enabled.
   *
   * @remarks
   *
   * cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pkceEnabled" })
  pkceEnabled?: boolean;

  /**
   * URIs, to which a user is redirected after authorization.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "redirectUris" })
  redirectUris: string[];

  /**
   * List of requested scopes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scopes" })
  scopes: string[];

  /**
   * URL of the token endpoint
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tokenEndPointUrl" })
  tokenEndPointUrl: string;

  /**
   * Determines if a DRACOON account is automatically created for a new user
   *
   * @remarks
   *
   * who successfully logs on with his / her AD / IDP account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userImportEnabled" })
  userImportEnabled?: boolean;

  /**
   * User group that is assigned to users who are created by automatic import.
   *
   * @remarks
   *
   * Reset with `0`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userImportGroup" })
  userImportGroup?: number;

  /**
   * URL of the user info endpoint
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userInfoEndPointUrl" })
  userInfoEndPointUrl: string;

  /**
   * &#128640; Since v4.23.0
   *
   * @remarks
   *
   * Source, which is used to get user information at the import or update of a user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userInfoSource" })
  userInfoSource?: CreateOpenIdIdpConfigRequestUserInfoSourceEnum;

  /**
   * URL of the user management UI.
   *
   * @remarks
   *
   * Use empty string to remove.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userManagementUrl" })
  userManagementUrl?: string;

  /**
   * Determines if the DRACOON account is updated with data from AD / IDP.
   *
   * @remarks
   *
   * For OpenID Connect, the scopes `email` and `profile` are needed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userUpdateEnabled" })
  userUpdateEnabled?: boolean;
}
