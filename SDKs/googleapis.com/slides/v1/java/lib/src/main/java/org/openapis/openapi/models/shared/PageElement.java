/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PageElement - A visual element rendered on a page.
 */
public class PageElement {
    /**
     * The description of the page element. Combined with title to display alt text. The field is not supported for Group elements.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public PageElement withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * A PageElement kind representing a joined collection of PageElements.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("elementGroup")
    public Group elementGroup;
    public PageElement withElementGroup(Group elementGroup) {
        this.elementGroup = elementGroup;
        return this;
    }
    
    /**
     * A PageElement kind representing an image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public Image image;
    public PageElement withImage(Image image) {
        this.image = image;
        return this;
    }
    
    /**
     * A PageElement kind representing a non-connector line, straight connector, curved connector, or bent connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line")
    public Line line;
    public PageElement withLine(Line line) {
        this.line = line;
        return this;
    }
    
    /**
     * The object ID for this page element. Object IDs used by google.apps.slides.v1.Page and google.apps.slides.v1.PageElement share the same namespace.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectId")
    public String objectId;
    public PageElement withObjectId(String objectId) {
        this.objectId = objectId;
        return this;
    }
    
    /**
     * A PageElement kind representing a generic shape that does not have a more specific classification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shape")
    public Shape shape;
    public PageElement withShape(Shape shape) {
        this.shape = shape;
        return this;
    }
    
    /**
     * A PageElement kind representing a linked chart embedded from Google Sheets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sheetsChart")
    public SheetsChart sheetsChart;
    public PageElement withSheetsChart(SheetsChart sheetsChart) {
        this.sheetsChart = sheetsChart;
        return this;
    }
    
    /**
     * A width and height.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Size size;
    public PageElement withSize(Size size) {
        this.size = size;
        return this;
    }
    
    /**
     * A PageElement kind representing a table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("table")
    public Table table;
    public PageElement withTable(Table table) {
        this.table = table;
        return this;
    }
    
    /**
     * The title of the page element. Combined with description to display alt text. The field is not supported for Group elements.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public PageElement withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ] to transform source coordinates (x,y) into destination coordinates (x', y') according to: x' x = shear_y scale_y translate_y 1 [ 1 ] After transformation, x' = scale_x * x + shear_x * y + translate_x; y' = scale_y * y + shear_y * x + translate_y; This message is therefore composed of these six matrix elements.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transform")
    public AffineTransform transform;
    public PageElement withTransform(AffineTransform transform) {
        this.transform = transform;
        return this;
    }
    
    /**
     * A PageElement kind representing a video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("video")
    public Video video;
    public PageElement withVideo(Video video) {
        this.video = video;
        return this;
    }
    
    /**
     * A PageElement kind representing word art.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wordArt")
    public WordArt wordArt;
    public PageElement withWordArt(WordArt wordArt) {
        this.wordArt = wordArt;
        return this;
    }
    
}
