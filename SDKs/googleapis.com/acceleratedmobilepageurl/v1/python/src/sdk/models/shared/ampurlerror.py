"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AmpURLErrorErrorCodeEnum(str, Enum):
    r"""The error code of an API call."""
    ERROR_CODE_UNSPECIFIED = 'ERROR_CODE_UNSPECIFIED'
    INPUT_URL_NOT_FOUND = 'INPUT_URL_NOT_FOUND'
    NO_AMP_URL = 'NO_AMP_URL'
    APPLICATION_ERROR = 'APPLICATION_ERROR'
    URL_IS_VALID_AMP = 'URL_IS_VALID_AMP'
    URL_IS_INVALID_AMP = 'URL_IS_INVALID_AMP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AmpURLError:
    r"""AMP URL Error resource for a requested URL that couldn't be found."""
    
    error_code: Optional[AmpURLErrorErrorCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCode'), 'exclude': lambda f: f is None }})
    r"""The error code of an API call."""  
    error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})
    r"""An optional descriptive error message."""  
    original_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originalUrl'), 'exclude': lambda f: f is None }})
    r"""The original non-AMP URL."""  
    