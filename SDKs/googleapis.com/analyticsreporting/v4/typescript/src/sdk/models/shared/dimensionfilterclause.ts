/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DimensionFilter } from "./dimensionfilter";
import { Expose, Type } from "class-transformer";

/**
 * The operator for combining multiple dimension filters. If unspecified, it is treated as an `OR`.
 */
export enum DimensionFilterClauseOperatorEnum {
  OperatorUnspecified = "OPERATOR_UNSPECIFIED",
  Or = "OR",
  And = "AND",
}

/**
 * A group of dimension filters. Set the operator value to specify how the filters are logically combined.
 */
export class DimensionFilterClause extends SpeakeasyBase {
  /**
   * The repeated set of filters. They are logically combined based on the operator specified.
   */
  @SpeakeasyMetadata({ elemType: DimensionFilter })
  @Expose({ name: "filters" })
  @Type(() => DimensionFilter)
  filters?: DimensionFilter[];

  /**
   * The operator for combining multiple dimension filters. If unspecified, it is treated as an `OR`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "operator" })
  operator?: DimensionFilterClauseOperatorEnum;
}
