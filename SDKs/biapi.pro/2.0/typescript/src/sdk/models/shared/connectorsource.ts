/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Successful GET on ConnectorSource resource
 */
export class ConnectorSource extends SpeakeasyBase {
  /**
   * Authentication mechanism to use
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auth_mechanism" })
  authMechanism?: string;

  /**
   * This source is not used to synchronize the connection
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disabled" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  disabled?: Date;

  /**
   * Comma separated list of capabilities disabled on this connector source
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disabled_capabilities" })
  disabledCapabilities?: string;

  /**
   * Name of the source this fallback is for
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fallback" })
  fallback?: string;

  /**
   * ID of the connector source
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * ID of the connector
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id_connector" })
  idConnector: number;

  @SpeakeasyMetadata()
  @Expose({ name: "id_weboob" })
  idWeboob: string;

  /**
   * Name of the source
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The source priority order for the synchronization
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priority" })
  priority?: number;

  /**
   * last known stability
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stability" })
  stability?: string;
}
