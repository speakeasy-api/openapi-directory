/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum UpdateTrailXAmzTargetEnum {
  ComAmazonawsCloudtrailV20131101CloudTrail20131101UpdateTrail = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.UpdateTrail",
}

export class UpdateTrailRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  updateTrailRequest: shared.UpdateTrailRequest;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: UpdateTrailXAmzTargetEnum;
}

export class UpdateTrailResponse extends SpeakeasyBase {
  /**
   * CloudTrailARNInvalidException
   */
  @SpeakeasyMetadata()
  cloudTrailARNInvalidException?: any;

  /**
   * CloudTrailAccessNotEnabledException
   */
  @SpeakeasyMetadata()
  cloudTrailAccessNotEnabledException?: any;

  /**
   * CloudTrailInvalidClientTokenIdException
   */
  @SpeakeasyMetadata()
  cloudTrailInvalidClientTokenIdException?: any;

  /**
   * CloudWatchLogsDeliveryUnavailableException
   */
  @SpeakeasyMetadata()
  cloudWatchLogsDeliveryUnavailableException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InsufficientDependencyServiceAccessPermissionException
   */
  @SpeakeasyMetadata()
  insufficientDependencyServiceAccessPermissionException?: any;

  /**
   * InsufficientEncryptionPolicyException
   */
  @SpeakeasyMetadata()
  insufficientEncryptionPolicyException?: any;

  /**
   * InsufficientS3BucketPolicyException
   */
  @SpeakeasyMetadata()
  insufficientS3BucketPolicyException?: any;

  /**
   * InsufficientSnsTopicPolicyException
   */
  @SpeakeasyMetadata()
  insufficientSnsTopicPolicyException?: any;

  /**
   * InvalidCloudWatchLogsLogGroupArnException
   */
  @SpeakeasyMetadata()
  invalidCloudWatchLogsLogGroupArnException?: any;

  /**
   * InvalidCloudWatchLogsRoleArnException
   */
  @SpeakeasyMetadata()
  invalidCloudWatchLogsRoleArnException?: any;

  /**
   * InvalidEventSelectorsException
   */
  @SpeakeasyMetadata()
  invalidEventSelectorsException?: any;

  /**
   * InvalidHomeRegionException
   */
  @SpeakeasyMetadata()
  invalidHomeRegionException?: any;

  /**
   * InvalidKmsKeyIdException
   */
  @SpeakeasyMetadata()
  invalidKmsKeyIdException?: any;

  /**
   * InvalidParameterCombinationException
   */
  @SpeakeasyMetadata()
  invalidParameterCombinationException?: any;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  /**
   * InvalidS3BucketNameException
   */
  @SpeakeasyMetadata()
  invalidS3BucketNameException?: any;

  /**
   * InvalidS3PrefixException
   */
  @SpeakeasyMetadata()
  invalidS3PrefixException?: any;

  /**
   * InvalidSnsTopicNameException
   */
  @SpeakeasyMetadata()
  invalidSnsTopicNameException?: any;

  /**
   * InvalidTrailNameException
   */
  @SpeakeasyMetadata()
  invalidTrailNameException?: any;

  /**
   * KmsException
   */
  @SpeakeasyMetadata()
  kmsException?: any;

  /**
   * KmsKeyDisabledException
   */
  @SpeakeasyMetadata()
  kmsKeyDisabledException?: any;

  /**
   * KmsKeyNotFoundException
   */
  @SpeakeasyMetadata()
  kmsKeyNotFoundException?: any;

  /**
   * NoManagementAccountSLRExistsException
   */
  @SpeakeasyMetadata()
  noManagementAccountSLRExistsException?: any;

  /**
   * NotOrganizationMasterAccountException
   */
  @SpeakeasyMetadata()
  notOrganizationMasterAccountException?: any;

  /**
   * OperationNotPermittedException
   */
  @SpeakeasyMetadata()
  operationNotPermittedException?: any;

  /**
   * OrganizationNotInAllFeaturesModeException
   */
  @SpeakeasyMetadata()
  organizationNotInAllFeaturesModeException?: any;

  /**
   * OrganizationsNotInUseException
   */
  @SpeakeasyMetadata()
  organizationsNotInUseException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * S3BucketDoesNotExistException
   */
  @SpeakeasyMetadata()
  s3BucketDoesNotExistException?: any;

  /**
   * TrailNotFoundException
   */
  @SpeakeasyMetadata()
  trailNotFoundException?: any;

  /**
   * TrailNotProvidedException
   */
  @SpeakeasyMetadata()
  trailNotProvidedException?: any;

  /**
   * UnsupportedOperationException
   */
  @SpeakeasyMetadata()
  unsupportedOperationException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateTrailResponse?: shared.UpdateTrailResponse;
}
