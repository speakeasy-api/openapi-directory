"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createpipelineinput as shared_createpipelineinput
from ..shared import createpipelineoutput as shared_createpipelineoutput
from enum import Enum
from typing import Any, Optional

class CreatePipelineXAmzTargetEnum(str, Enum):
    CODE_PIPELINE_20150709_CREATE_PIPELINE = 'CodePipeline_20150709.CreatePipeline'


@dataclasses.dataclass
class CreatePipelineRequest:
    
    create_pipeline_input: shared_createpipelineinput.CreatePipelineInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: CreatePipelineXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreatePipelineResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    concurrent_modification_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConcurrentModificationException"""  
    create_pipeline_output: Optional[shared_createpipelineoutput.CreatePipelineOutput] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_action_declaration_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidActionDeclarationException"""  
    invalid_blocker_declaration_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidBlockerDeclarationException"""  
    invalid_stage_declaration_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidStageDeclarationException"""  
    invalid_structure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidStructureException"""  
    invalid_tags_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidTagsException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    pipeline_name_in_use_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PipelineNameInUseException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    too_many_tags_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyTagsException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    