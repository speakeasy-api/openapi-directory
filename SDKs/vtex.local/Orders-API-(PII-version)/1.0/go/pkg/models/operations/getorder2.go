// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type GetOrder2Request struct {
	// HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
	Accept string `header:"style=simple,explode=false,name=Accept"`
	// Type of the content being sent.
	ContentType string `header:"style=simple,explode=false,name=Content-Type"`
	// ID of the order.
	OrderID string `pathParam:"style=simple,explode=false,name=orderId"`
	// Reason for requesting unmasked data.
	Reason *string `queryParam:"style=form,explode=true,name=reason"`
}

// GetOrder2200ApplicationJSONItemsAdditionalInfo - Additional information.
type GetOrder2200ApplicationJSONItemsAdditionalInfo struct {
	// Brand ID.
	BrandID *string `json:"brandId,omitempty"`
	// Brand name.
	BrandName *string `json:"brandName,omitempty"`
	// Dimension.
	Dimension *string `json:"dimension,omitempty"`
	// Offering information.
	OfferingInfo *string `json:"offeringInfo,omitempty"`
	// Offering type.
	OfferingType *string `json:"offeringType,omitempty"`
	// Offering type ID.
	OfferingTypeID *string `json:"offeringTypeId,omitempty"`
}

type GetOrder2200ApplicationJSONItemsBundleItems struct {
	// Service identifier.
	ID *int64 `json:"id,omitempty"`
	// Name.
	Name *string `json:"name,omitempty"`
	// Price in cents.
	Price *int64 `json:"price,omitempty"`
	// Type
	Type *string `json:"type,omitempty"`
}

type GetOrder2200ApplicationJSONItemsPriceDefinitionSellingPrices struct {
	// Quantity.
	Quantity *int64 `json:"quantity,omitempty"`
	// Value in cents.
	Value *int64 `json:"value,omitempty"`
}

// GetOrder2200ApplicationJSONItemsPriceDefinition - Price information.
type GetOrder2200ApplicationJSONItemsPriceDefinition struct {
	// Calculated selling price in cents.
	CalculatedSellingPrice *int64 `json:"calculatedSellingPrice,omitempty"`
	// Selling prices.
	SellingPrices []GetOrder2200ApplicationJSONItemsPriceDefinitionSellingPrices `json:"sellingPrices,omitempty"`
	// Total in cents.
	Total *int64 `json:"total,omitempty"`
}

type GetOrder2200ApplicationJSONItemsPriceTags struct {
	// Price tag identifier.
	Identifier *string `json:"identifier,omitempty"`
	// Indicates whether price tag value is applied through a percentage.
	IsPercentual *bool `json:"isPercentual,omitempty"`
	// Name.
	Name *string `json:"name,omitempty"`
	// Raw value.
	RawValue *int64 `json:"rawValue,omitempty"`
	// Value.
	Value *int64 `json:"value,omitempty"`
}

// GetOrder2200ApplicationJSONItemsProductCategories - Object, where each field is an ID from `productCategoryIds.
type GetOrder2200ApplicationJSONItemsProductCategories struct {
	// Product category corresponding to the ID in the field key.
	ID *string `json:"{ID},omitempty"`
}

type GetOrder2200ApplicationJSONItems struct {
	// Additional information.
	AdditionalInfo *GetOrder2200ApplicationJSONItemsAdditionalInfo `json:"additionalInfo,omitempty"`
	// Array containing information on attachments.
	Attachments []string `json:"attachments,omitempty"`
	// Availability
	Availability *string `json:"availability,omitempty"`
	// Information on services sold along with the SKU. Example: a gift package.
	BundleItems []GetOrder2200ApplicationJSONItemsBundleItems `json:"bundleItems,omitempty"`
	// Detail URL.
	DetailURL *string `json:"detailUrl,omitempty"`
	// European Article Number.
	Ean *string `json:"ean,omitempty"`
	// ID.
	ID *string `json:"id,omitempty"`
	// Image URL.
	ImageURL *string `json:"imageUrl,omitempty"`
	// Indicates whether item is a gift.
	IsGift *bool `json:"isGift,omitempty"`
	// List price in cents.
	ListPrice *int64 `json:"listPrice,omitempty"`
	// Manual price in cents.
	ManualPrice *int64 `json:"manualPrice,omitempty"`
	// User that applied the manual price, if that is the case.
	ManualPriceAppliedBy *string `json:"manualPriceAppliedBy,omitempty"`
	// Manufacturer code.
	ManufacturerCode *string `json:"manufacturerCode,omitempty"`
	// Measurement unit
	MeasurementUnit *string `json:"measurementUnit,omitempty"`
	// Modal type.
	ModalType *string `json:"modalType,omitempty"`
	// Name.
	Name *string `json:"name,omitempty"`
	// Parent assembly binding.
	ParentAssemblyBinding *string `json:"parentAssemblyBinding,omitempty"`
	// Parent item index.
	ParentItemIndex *int64 `json:"parentItemIndex,omitempty"`
	// Presale date.
	PreSaleDate *string `json:"preSaleDate,omitempty"`
	// Price in cents.
	Price *int64 `json:"price,omitempty"`
	// Price information.
	PriceDefinition *GetOrder2200ApplicationJSONItemsPriceDefinition `json:"priceDefinition,omitempty"`
	// Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
	PriceTags []GetOrder2200ApplicationJSONItemsPriceTags `json:"priceTags,omitempty"`
	// Price expiration date and time.
	PriceValidUntil *string `json:"priceValidUntil,omitempty"`
	// Object, where each field is an ID from `productCategoryIds.
	ProductCategories *GetOrder2200ApplicationJSONItemsProductCategories `json:"productCategories,omitempty"`
	// Product category IDs.
	ProductCategoryIds *string `json:"productCategoryIds,omitempty"`
	// Product ID.
	ProductID *string `json:"productId,omitempty"`
	// Product Ref ID.
	ProductRefID *string `json:"productRefId,omitempty"`
	// Quantity.
	Quantity *int64 `json:"quantity,omitempty"`
	// Ref ID.
	RefID *string `json:"refId,omitempty"`
	// Reward value in cents.
	RewardValue *int64 `json:"rewardValue,omitempty"`
	// Seller.
	Seller *string `json:"seller,omitempty"`
	// Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/pt/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
	SellerChain []string `json:"sellerChain,omitempty"`
	// Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
	SellingPrice *int64 `json:"sellingPrice,omitempty"`
	// SKU name.
	SkuName *string `json:"skuName,omitempty"`
	// Tax value in cents.
	Tax *int64 `json:"tax,omitempty"`
	// Order's item unique ID.
	UniqueID *string `json:"uniqueId,omitempty"`
	// Unit multiplier
	UnitMultiplier *int64 `json:"unitMultiplier,omitempty"`
}

type GetOrder2200ApplicationJSONPackageAttachmentPackagesItems struct {
	// Item description.
	Description *string `json:"description,omitempty"`
	// Item index in reference to the position of the item in the `items` array.
	ItemIndex *int64 `json:"itemIndex,omitempty"`
	// Item price in cents.
	Price *int64 `json:"price,omitempty"`
	// Item quantity.
	Quantity *int64 `json:"quantity,omitempty"`
	// Item unit multiplier.
	UnitMultiplier *float64 `json:"unitMultiplier,omitempty"`
}

type GetOrder2200ApplicationJSONPackageAttachmentPackagesRestitutionsRefundItems struct {
	// Item index corresponding to the position of the item in the main `items` array.
	ItemIndex *string `json:"itemIndex,omitempty"`
	// Quantity.
	Quantity *int64 `json:"quantity,omitempty"`
}

// GetOrder2200ApplicationJSONPackageAttachmentPackagesRestitutionsRefund - Information on refunds.
type GetOrder2200ApplicationJSONPackageAttachmentPackagesRestitutionsRefund struct {
	// Information on items.
	Items []GetOrder2200ApplicationJSONPackageAttachmentPackagesRestitutionsRefundItems `json:"items,omitempty"`
}

// GetOrder2200ApplicationJSONPackageAttachmentPackagesRestitutions - Information on how restitutions are to be made to the customer, in case of a return (invoice `type` is `input`).
type GetOrder2200ApplicationJSONPackageAttachmentPackagesRestitutions struct {
	// Information on refunds.
	Refund *GetOrder2200ApplicationJSONPackageAttachmentPackagesRestitutionsRefund `json:"refund,omitempty"`
}

type GetOrder2200ApplicationJSONPackageAttachmentPackages struct {
	// Fiscal operation code.
	Cfop *string `json:"cfop,omitempty"`
	// Courier.
	Courier *string `json:"courier,omitempty"`
	// Courier status.
	CourierStatus *string `json:"courierStatus,omitempty"`
	// Embedded voice in XML.
	EmbeddedInvoice *string `json:"embeddedInvoice,omitempty"`
	// Invoice key.
	InvoiceKey *string `json:"invoiceKey,omitempty"`
	// Invoice number.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`
	// Invoice URL.
	InvoiceURL *string `json:"invoiceUrl,omitempty"`
	// Invoice value in cents.
	InvoiceValue *int64 `json:"invoiceValue,omitempty"`
	// Issuance date.
	IssuanceDate *string `json:"issuanceDate,omitempty"`
	// Information on each item in the package.
	Items []GetOrder2200ApplicationJSONPackageAttachmentPackagesItems `json:"items,omitempty"`
	// Information on how restitutions are to be made to the customer, in case of a return (invoice `type` is `input`).
	Restitutions *GetOrder2200ApplicationJSONPackageAttachmentPackagesRestitutions `json:"restitutions,omitempty"`
	// Tracking number.
	TrackingNumber *string `json:"trackingNumber,omitempty"`
	// Tracking URL.
	TrackingURL *string `json:"trackingUrl,omitempty"`
	// Invoice type `Output` for sales and `Input` for returns.
	Type *string `json:"type,omitempty"`
	// Quantity of packages involved in the order.
	Volumes *int64 `json:"volumes,omitempty"`
}

// GetOrder2200ApplicationJSONPackageAttachment - Package attachment.
type GetOrder2200ApplicationJSONPackageAttachment struct {
	// Information on each package.
	Packages []GetOrder2200ApplicationJSONPackageAttachmentPackages `json:"packages,omitempty"`
}

type GetOrder2200ApplicationJSONTotals struct {
	// Order's total ID.
	ID *string `json:"id,omitempty"`
	// Order's total name.
	Name *string `json:"name,omitempty"`
	// Order's total value.
	Value *int `json:"value,omitempty"`
}

// GetOrder2200ApplicationJSON - OK
type GetOrder2200ApplicationJSON struct {
	// Three letter code identifying the marketplace where the order was placed.
	AffiliateID *string `json:"affiliateId,omitempty"`
	// Indicates whether cancelation is allowed for the order.
	AllowCancellation *bool `json:"allowCancellation,omitempty"`
	// Indicates whether edition is allowed for the order.
	AllowEdition *bool `json:"allowEdition,omitempty"`
	// User that approved the order, in case of manual approval.
	ApprovedBy *string `json:"approvedBy,omitempty"`
	// Date in which the order was authorized in UTC.
	AuthorizedDate *string `json:"authorizedDate,omitempty"`
	// Call center operator data.
	CallCenterOperatorData *string `json:"callCenterOperatorData,omitempty"`
	// Reason for cancelation.
	CancelReason *string `json:"cancelReason,omitempty"`
	// User that canceled the order.
	CancelledBy       *string                   `json:"cancelledBy,omitempty"`
	ChangesAttachment *shared.ChangesAttachment `json:"changesAttachment,omitempty"`
	ClientProfileData *shared.ClientProfileData `json:"clientProfileData,omitempty"`
	// Commercial condition data.
	CommercialConditionData *string `json:"commercialConditionData,omitempty"`
	// Creation date.
	CreationDate *string `json:"creationDate,omitempty"`
	// Custom data.
	CustomData *string `json:"customData,omitempty"`
	// Email tracked.
	EmailTracked *string `json:"emailTracked,omitempty"`
	// Follow up email.
	FollowUpEmail *string `json:"followUpEmail,omitempty"`
	// Gift registry data.
	GiftRegistryData *string `json:"giftRegistryData,omitempty"`
	// Host name.
	Hostname *string `json:"hostname,omitempty"`
	// Information pertinent to the order's invoice.
	InvoiceData map[string]interface{} `json:"invoiceData,omitempty"`
	// Date in which the order was invoiced in UTC.
	InvoicedDate *string `json:"invoicedDate,omitempty"`
	// Indicates whether client is checked in.
	IsCheckedIn *bool `json:"isCheckedIn,omitempty"`
	// Indicates whether order is completed.
	IsCompleted *bool `json:"isCompleted,omitempty"`
	// Information on each item in the order.
	Items []GetOrder2200ApplicationJSONItems `json:"items,omitempty"`
	// Date of last change.
	LastChange *string `json:"lastChange,omitempty"`
	// Last message.
	LastMessage *string `json:"lastMessage,omitempty"`
	// Marketing data.
	MarketingData *string             `json:"marketingData,omitempty"`
	Marketplace   *shared.Marketplace `json:"marketplace,omitempty"`
	// Marketplace items.
	MarketplaceItems []string `json:"marketplaceItems,omitempty"`
	// ID of the order in the marketplace.
	MarketplaceOrderID *string `json:"marketplaceOrderId,omitempty"`
	// Marketplace endpoint for post purchase communication.
	MarketplaceServicesEndpoint *string `json:"marketplaceServicesEndpoint,omitempty"`
	// Merchant name.
	MerchantName *string `json:"merchantName,omitempty"`
	// Open text field.
	OpenTextField *string `json:"openTextField,omitempty"`
	// ID of the shopping cart from which the order was created.
	OrderFormID *string `json:"orderFormId,omitempty"`
	// Order group.
	OrderGroup *string `json:"orderGroup,omitempty"`
	// Order ID.
	OrderID *string `json:"orderId,omitempty"`
	// Origin.
	Origin *string `json:"origin,omitempty"`
	// Package attachment.
	PackageAttachment    *GetOrder2200ApplicationJSONPackageAttachment `json:"packageAttachment,omitempty"`
	PaymentData          *shared.PaymentData                           `json:"paymentData,omitempty"`
	RatesAndBenefitsData *shared.RatesAndBenefitsData                  `json:"ratesAndBenefitsData,omitempty"`
	// Rounding error in cents.
	RoundingError *int `json:"roundingError,omitempty"`
	// Sales channel.
	SalesChannel *string `json:"salesChannel,omitempty"`
	// Seller order ID.
	SellerOrderID *string `json:"sellerOrderId,omitempty"`
	// Array with sellers information.
	Sellers []shared.Seller `json:"sellers,omitempty"`
	// Sequence number.
	Sequence     *string              `json:"sequence,omitempty"`
	ShippingData *shared.ShippingData `json:"shippingData,omitempty"`
	// Status in the order workflow.
	Status *string `json:"status,omitempty"`
	// Status description which is displayed on the Admin panel.
	StatusDescription    *string                      `json:"statusDescription,omitempty"`
	StorePreferencesData *shared.StorePreferencesData `json:"storePreferencesData,omitempty"`
	// Information on each of the order's totals.
	Totals []GetOrder2200ApplicationJSONTotals `json:"totals,omitempty"`
	// Value in cents.
	Value *int `json:"value,omitempty"`
}

type GetOrder2Response struct {
	ContentType string
	// OK
	GetOrder2200ApplicationJSONObject *GetOrder2200ApplicationJSON
	StatusCode                        int
	RawResponse                       *http.Response
}
