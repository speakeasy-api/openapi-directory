/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class CreatePlayerStreamerCreatePlayerStreamerRequest {
    /**
     * The maximum time, in seconds, that the PlayerStreamer is active (`created` or `started`) before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the PlayerStreamer, regardless of whether media is still streaming.
     */
    @SpeakeasyMetadata("form:name=MaxDuration")
    public Long maxDuration;

    public CreatePlayerStreamerCreatePlayerStreamerRequest withMaxDuration(Long maxDuration) {
        this.maxDuration = maxDuration;
        return this;
    }
    
    /**
     * The URL to which Twilio will send asynchronous webhook requests for every PlayerStreamer event. See [Status Callbacks](/docs/live/status-callbacks) for more details.
     */
    @SpeakeasyMetadata("form:name=StatusCallback")
    public String statusCallback;

    public CreatePlayerStreamerCreatePlayerStreamerRequest withStatusCallback(String statusCallback) {
        this.statusCallback = statusCallback;
        return this;
    }
    
    /**
     * The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.
     */
    @SpeakeasyMetadata("form:name=StatusCallbackMethod")
    public CreatePlayerStreamerCreatePlayerStreamerRequestStatusCallbackMethodEnum statusCallbackMethod;

    public CreatePlayerStreamerCreatePlayerStreamerRequest withStatusCallbackMethod(CreatePlayerStreamerCreatePlayerStreamerRequestStatusCallbackMethodEnum statusCallbackMethod) {
        this.statusCallbackMethod = statusCallbackMethod;
        return this;
    }
    
    /**
     * Specifies whether the PlayerStreamer is configured to stream video. Defaults to `true`.
     */
    @SpeakeasyMetadata("form:name=Video")
    public Boolean video;

    public CreatePlayerStreamerCreatePlayerStreamerRequest withVideo(Boolean video) {
        this.video = video;
        return this;
    }
    
    public CreatePlayerStreamerCreatePlayerStreamerRequest(){}
}
