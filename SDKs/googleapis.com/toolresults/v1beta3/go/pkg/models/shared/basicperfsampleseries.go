// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type BasicPerfSampleSeriesPerfMetricTypeEnum string

const (
	BasicPerfSampleSeriesPerfMetricTypeEnumPerfMetricTypeUnspecified BasicPerfSampleSeriesPerfMetricTypeEnum = "perfMetricTypeUnspecified"
	BasicPerfSampleSeriesPerfMetricTypeEnumMemory                    BasicPerfSampleSeriesPerfMetricTypeEnum = "memory"
	BasicPerfSampleSeriesPerfMetricTypeEnumCPU                       BasicPerfSampleSeriesPerfMetricTypeEnum = "cpu"
	BasicPerfSampleSeriesPerfMetricTypeEnumNetwork                   BasicPerfSampleSeriesPerfMetricTypeEnum = "network"
	BasicPerfSampleSeriesPerfMetricTypeEnumGraphics                  BasicPerfSampleSeriesPerfMetricTypeEnum = "graphics"
)

func (e *BasicPerfSampleSeriesPerfMetricTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "perfMetricTypeUnspecified":
		fallthrough
	case "memory":
		fallthrough
	case "cpu":
		fallthrough
	case "network":
		fallthrough
	case "graphics":
		*e = BasicPerfSampleSeriesPerfMetricTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BasicPerfSampleSeriesPerfMetricTypeEnum: %s", s)
	}
}

type BasicPerfSampleSeriesPerfUnitEnum string

const (
	BasicPerfSampleSeriesPerfUnitEnumPerfUnitUnspecified BasicPerfSampleSeriesPerfUnitEnum = "perfUnitUnspecified"
	BasicPerfSampleSeriesPerfUnitEnumKibibyte            BasicPerfSampleSeriesPerfUnitEnum = "kibibyte"
	BasicPerfSampleSeriesPerfUnitEnumPercent             BasicPerfSampleSeriesPerfUnitEnum = "percent"
	BasicPerfSampleSeriesPerfUnitEnumBytesPerSecond      BasicPerfSampleSeriesPerfUnitEnum = "bytesPerSecond"
	BasicPerfSampleSeriesPerfUnitEnumFramesPerSecond     BasicPerfSampleSeriesPerfUnitEnum = "framesPerSecond"
	BasicPerfSampleSeriesPerfUnitEnumByte                BasicPerfSampleSeriesPerfUnitEnum = "byte"
)

func (e *BasicPerfSampleSeriesPerfUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "perfUnitUnspecified":
		fallthrough
	case "kibibyte":
		fallthrough
	case "percent":
		fallthrough
	case "bytesPerSecond":
		fallthrough
	case "framesPerSecond":
		fallthrough
	case "byte":
		*e = BasicPerfSampleSeriesPerfUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BasicPerfSampleSeriesPerfUnitEnum: %s", s)
	}
}

type BasicPerfSampleSeriesSampleSeriesLabelEnum string

const (
	BasicPerfSampleSeriesSampleSeriesLabelEnumSampleSeriesTypeUnspecified BasicPerfSampleSeriesSampleSeriesLabelEnum = "sampleSeriesTypeUnspecified"
	BasicPerfSampleSeriesSampleSeriesLabelEnumMemoryRssPrivate            BasicPerfSampleSeriesSampleSeriesLabelEnum = "memoryRssPrivate"
	BasicPerfSampleSeriesSampleSeriesLabelEnumMemoryRssShared             BasicPerfSampleSeriesSampleSeriesLabelEnum = "memoryRssShared"
	BasicPerfSampleSeriesSampleSeriesLabelEnumMemoryRssTotal              BasicPerfSampleSeriesSampleSeriesLabelEnum = "memoryRssTotal"
	BasicPerfSampleSeriesSampleSeriesLabelEnumMemoryTotal                 BasicPerfSampleSeriesSampleSeriesLabelEnum = "memoryTotal"
	BasicPerfSampleSeriesSampleSeriesLabelEnumCPUUser                     BasicPerfSampleSeriesSampleSeriesLabelEnum = "cpuUser"
	BasicPerfSampleSeriesSampleSeriesLabelEnumCPUKernel                   BasicPerfSampleSeriesSampleSeriesLabelEnum = "cpuKernel"
	BasicPerfSampleSeriesSampleSeriesLabelEnumCPUTotal                    BasicPerfSampleSeriesSampleSeriesLabelEnum = "cpuTotal"
	BasicPerfSampleSeriesSampleSeriesLabelEnumNtBytesTransferred          BasicPerfSampleSeriesSampleSeriesLabelEnum = "ntBytesTransferred"
	BasicPerfSampleSeriesSampleSeriesLabelEnumNtBytesReceived             BasicPerfSampleSeriesSampleSeriesLabelEnum = "ntBytesReceived"
	BasicPerfSampleSeriesSampleSeriesLabelEnumNetworkSent                 BasicPerfSampleSeriesSampleSeriesLabelEnum = "networkSent"
	BasicPerfSampleSeriesSampleSeriesLabelEnumNetworkReceived             BasicPerfSampleSeriesSampleSeriesLabelEnum = "networkReceived"
	BasicPerfSampleSeriesSampleSeriesLabelEnumGraphicsFrameRate           BasicPerfSampleSeriesSampleSeriesLabelEnum = "graphicsFrameRate"
)

func (e *BasicPerfSampleSeriesSampleSeriesLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "sampleSeriesTypeUnspecified":
		fallthrough
	case "memoryRssPrivate":
		fallthrough
	case "memoryRssShared":
		fallthrough
	case "memoryRssTotal":
		fallthrough
	case "memoryTotal":
		fallthrough
	case "cpuUser":
		fallthrough
	case "cpuKernel":
		fallthrough
	case "cpuTotal":
		fallthrough
	case "ntBytesTransferred":
		fallthrough
	case "ntBytesReceived":
		fallthrough
	case "networkSent":
		fallthrough
	case "networkReceived":
		fallthrough
	case "graphicsFrameRate":
		*e = BasicPerfSampleSeriesSampleSeriesLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BasicPerfSampleSeriesSampleSeriesLabelEnum: %s", s)
	}
}

// BasicPerfSampleSeries - Encapsulates the metadata for basic sample series represented by a line chart
type BasicPerfSampleSeries struct {
	PerfMetricType    *BasicPerfSampleSeriesPerfMetricTypeEnum    `json:"perfMetricType,omitempty"`
	PerfUnit          *BasicPerfSampleSeriesPerfUnitEnum          `json:"perfUnit,omitempty"`
	SampleSeriesLabel *BasicPerfSampleSeriesSampleSeriesLabelEnum `json:"sampleSeriesLabel,omitempty"`
}
