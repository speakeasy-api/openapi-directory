/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The repository endpoints allow you to manage your repository's
 *
 * @remarks
 * configuration like description.
 *
 */
export class Repositories {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List repository tags
   */
  getV2NamespacesNamespaceRepositoriesRepositoryTags(
    req: operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/namespaces/{namespace}/repositories/{repository}/tags",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsResponse =
        new operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paginatedTags = utils.objectToClass(
              httpRes?.data,
              shared.PaginatedTags
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Read repository tag
   */
  getV2NamespacesNamespaceRepositoriesRepositoryTagsTag(
    req: operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsTagRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsTagRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/namespaces/{namespace}/repositories/{repository}/tags/{tag}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsTagResponse =
        new operations.GetV2NamespacesNamespaceRepositoriesRepositoryTagsTagResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tag = utils.objectToClass(httpRes?.data, shared.Tag);
          }
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Check repository tags
   */
  headV2NamespacesNamespaceRepositoriesRepositoryTags(
    req: operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/namespaces/{namespace}/repositories/{repository}/tags",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "head",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsResponse =
        new operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Check repository tag
   */
  headV2NamespacesNamespaceRepositoriesRepositoryTagsTag(
    req: operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsTagRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsTagRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/namespaces/{namespace}/repositories/{repository}/tags/{tag}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "head",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsTagResponse =
        new operations.HeadV2NamespacesNamespaceRepositoriesRepositoryTagsTagResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
