<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Devices 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requests against that device to succeed)
     * 
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requests against that device to succeed)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesResponse
     */
	public function claimNetworkDevices(
        \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/claim', \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClaimNetworkDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Cycle a set of switch ports
     * 
     * Cycle a set of switch ports
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CycleDeviceSwitchPortsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CycleDeviceSwitchPortsResponse
     */
	public function cycleDeviceSwitchPorts(
        \OpenAPI\OpenAPI\Models\Operations\CycleDeviceSwitchPortsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CycleDeviceSwitchPortsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/ports/cycle', \OpenAPI\OpenAPI\Models\Operations\CycleDeviceSwitchPortsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CycleDeviceSwitchPortsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cycleDeviceSwitchPorts200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a single device
     * 
     * Return a single device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceResponse
     */
	public function getNetworkDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/{serial}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the uplink loss percentage and latency in milliseconds for a wired network device.
     * 
     * Get the uplink loss percentage and latency in milliseconds for a wired network device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceLossAndLatencyHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceLossAndLatencyHistoryResponse
     */
	public function getNetworkDeviceLossAndLatencyHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceLossAndLatencyHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceLossAndLatencyHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/{serial}/lossAndLatencyHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceLossAndLatencyHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceLossAndLatencyHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceLossAndLatencyHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkDeviceLossAndLatencyHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the performance score for a single MX
     * 
     * Return the performance score for a single MX. Only primary MX devices supported. If no data is available, a 204 error code is returned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicePerformanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicePerformanceResponse
     */
	public function getNetworkDevicePerformance(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicePerformanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicePerformanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/{serial}/performance', \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicePerformanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicePerformanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkDevicePerformance200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the uplink information for a device.
     * 
     * Return the uplink information for a device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceUplinkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceUplinkResponse
     */
	public function getNetworkDeviceUplink(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceUplinkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceUplinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/{serial}/uplink', \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceUplinkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceUplinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkDeviceUplink200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the devices in a network
     * 
     * List the devices in a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesResponse
     */
	public function getNetworkDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices', \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkDevices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the devices in an organization
     * 
     * List the devices in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesResponse
     */
	public function getOrganizationDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/devices', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDevices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reboot a device
     * 
     * Reboot a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RebootNetworkDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RebootNetworkDeviceResponse
     */
	public function rebootNetworkDevice(
        \OpenAPI\OpenAPI\Models\Operations\RebootNetworkDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RebootNetworkDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/{serial}/reboot', \OpenAPI\OpenAPI\Models\Operations\RebootNetworkDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RebootNetworkDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rebootNetworkDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a single device
     * 
     * Remove a single device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDeviceResponse
     */
	public function removeNetworkDevice(
        \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/{serial}/remove', \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Update the attributes of a device
     * 
     * Update the attributes of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkDeviceResponse
     */
	public function updateNetworkDevice(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/{serial}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}