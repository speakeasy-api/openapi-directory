"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Searchanalytics:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def webmasters_searchanalytics_query(self, request: operations.WebmastersSearchanalyticsQueryRequest, security: operations.WebmastersSearchanalyticsQuerySecurity) -> operations.WebmastersSearchanalyticsQueryResponse:
        r"""Query your data with filters and parameters that you define. Returns zero or more rows grouped by the row keys that you define. You must define a date range of one or more days.
        
        When date is one of the group by values, any days without data are omitted from the result list. If you need to know which days have data, issue a broad date range query grouped by date for any metric, and see which day rows are returned.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebmastersSearchanalyticsQueryRequest, base_url, '/sites/{siteUrl}/searchAnalytics/query', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "search_analytics_query_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WebmastersSearchanalyticsQueryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebmastersSearchanalyticsQueryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchAnalyticsQueryResponse])
                res.search_analytics_query_response = out

        return res

    