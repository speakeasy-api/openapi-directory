/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Value - A message that can hold any of the supported value types and associated metadata.
 */
public class Value {
    /**
     * An array value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arrayValue")
    public ArrayValue arrayValue;

    public Value withArrayValue(ArrayValue arrayValue) {
        this.arrayValue = arrayValue;
        return this;
    }
    
    /**
     * A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blobValue")
    public String blobValue;

    public Value withBlobValue(String blobValue) {
        this.blobValue = blobValue;
        return this;
    }
    
    /**
     * A boolean value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("booleanValue")
    public Boolean booleanValue;

    public Value withBooleanValue(Boolean booleanValue) {
        this.booleanValue = booleanValue;
        return this;
    }
    
    /**
     * A double value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("doubleValue")
    public Double doubleValue;

    public Value withDoubleValue(Double doubleValue) {
        this.doubleValue = doubleValue;
        return this;
    }
    
    /**
     * A Datastore data object. An entity is limited to 1 megabyte when stored. That _roughly_ corresponds to a limit of 1 megabyte for the serialized form of this message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entityValue")
    public Entity entityValue;

    public Value withEntityValue(Entity entityValue) {
        this.entityValue = entityValue;
        return this;
    }
    
    /**
     * If the value should be excluded from all indexes including those defined explicitly.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("excludeFromIndexes")
    public Boolean excludeFromIndexes;

    public Value withExcludeFromIndexes(Boolean excludeFromIndexes) {
        this.excludeFromIndexes = excludeFromIndexes;
        return this;
    }
    
    /**
     * An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("geoPointValue")
    public LatLng geoPointValue;

    public Value withGeoPointValue(LatLng geoPointValue) {
        this.geoPointValue = geoPointValue;
        return this;
    }
    
    /**
     * An integer value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integerValue")
    public String integerValue;

    public Value withIntegerValue(String integerValue) {
        this.integerValue = integerValue;
        return this;
    }
    
    /**
     * A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keyValue")
    public Key keyValue;

    public Value withKeyValue(Key keyValue) {
        this.keyValue = keyValue;
        return this;
    }
    
    /**
     * The `meaning` field should only be populated for backwards compatibility.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meaning")
    public Integer meaning;

    public Value withMeaning(Integer meaning) {
        this.meaning = meaning;
        return this;
    }
    
    /**
     * A null value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nullValue")
    public ValueNullValueEnum nullValue;

    public Value withNullValue(ValueNullValueEnum nullValue) {
        this.nullValue = nullValue;
        return this;
    }
    
    /**
     * A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stringValue")
    public String stringValue;

    public Value withStringValue(String stringValue) {
        this.stringValue = stringValue;
        return this;
    }
    
    /**
     * A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestampValue")
    public String timestampValue;

    public Value withTimestampValue(String timestampValue) {
        this.timestampValue = timestampValue;
        return this;
    }
    
    public Value(){}
}
