"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DateTimeJSONResponse:
    r"""the current time for the timezone requested in JSON format"""
    
    abbreviation: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('abbreviation') }})
    r"""the abbreviated name of the timezone"""  
    client_ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ip') }})
    r"""the IP of the client making the request"""  
    datetime_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datetime') }})
    r"""an ISO8601-valid string representing the current, local date/time"""  
    day_of_week: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_of_week') }})
    r"""current day number of the week, where sunday is 0"""  
    day_of_year: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_of_year') }})
    r"""ordinal date of the current year"""  
    dst: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dst') }})
    r"""flag indicating whether the local time is in daylight savings"""  
    dst_offset: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dst_offset') }})
    r"""the difference in seconds between the current local time and daylight saving time for the location"""  
    timezone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone') }})
    r"""timezone in `Area/Location` or `Area/Location/Region` format"""  
    unixtime: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unixtime') }})
    r"""number of seconds since the Epoch"""  
    utc_datetime: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utc_datetime') }})
    r"""an ISO8601-valid string representing the current date/time in UTC"""  
    utc_offset: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utc_offset') }})
    r"""an ISO8601-valid string representing the offset from UTC"""  
    week_number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('week_number') }})
    r"""the current week number"""  
    dst_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dst_from'), 'exclude': lambda f: f is None }})
    r"""an ISO8601-valid string representing the datetime when daylight savings started for this timezone"""  
    dst_until: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dst_until'), 'exclude': lambda f: f is None }})
    r"""an ISO8601-valid string representing the datetime when daylight savings will end for this timezone"""  
    raw_offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('raw_offset'), 'exclude': lambda f: f is None }})
    r"""the difference in seconds between the current local time and the time in UTC, excluding any daylight saving difference (see dst_offset)"""  
    