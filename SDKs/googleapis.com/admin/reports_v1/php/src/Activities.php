<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Activities 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves a list of activities for a specific customer's account and application such as the Admin console application or the Google Drive application. For more information, see the guides for administrator and Google Drive activity reports. For more information about the activity report's parameters, see the activity parameters reference guides. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesListResponse
     */
	public function reportsActivitiesList(
        \OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/reports/v1/activity/users/{userKey}/applications/{applicationName}', \OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->activities = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Activities', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Start receiving notifications for account activities. For more information, see Receiving Push Notifications.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesWatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesWatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesWatchResponse
     */
	public function reportsActivitiesWatch(
        \OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesWatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesWatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesWatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/reports/v1/activity/users/{userKey}/applications/{applicationName}/watch', \OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesWatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channel", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesWatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReportsActivitiesWatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Channel', 'json');
            }
        }

        return $response;
    }
}