/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TransferRun - Represents a data transfer run.
 */
public class TransferRun {
    /**
     * Output only. Data source id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSourceId")
    public String dataSourceId;
    public TransferRun withDataSourceId(String dataSourceId) {
        this.dataSourceId = dataSourceId;
        return this;
    }
    
    /**
     * Output only. The BigQuery target dataset id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationDatasetId")
    public String destinationDatasetId;
    public TransferRun withDestinationDatasetId(String destinationDatasetId) {
        this.destinationDatasetId = destinationDatasetId;
        return this;
    }
    
    /**
     * Represents preferences for sending email notifications for transfer run events.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailPreferences")
    public EmailPreferences emailPreferences;
    public TransferRun withEmailPreferences(EmailPreferences emailPreferences) {
        this.emailPreferences = emailPreferences;
        return this;
    }
    
    /**
     * Output only. Time when transfer run ended. Parameter ignored by server for input requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTime")
    public String endTime;
    public TransferRun withEndTime(String endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorStatus")
    public Status errorStatus;
    public TransferRun withErrorStatus(Status errorStatus) {
        this.errorStatus = errorStatus;
        return this;
    }
    
    /**
     * The resource name of the transfer run. Transfer run names have the form `projects/{project_id}/locations/{location}/transferConfigs/{config_id}/runs/{run_id}`. The name is ignored when creating a transfer run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public TransferRun withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. Pub/Sub topic where a notification will be sent after this transfer run finishes. The format for specifying a pubsub topic is: `projects/{project}/topics/{topic}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notificationPubsubTopic")
    public String notificationPubsubTopic;
    public TransferRun withNotificationPubsubTopic(String notificationPubsubTopic) {
        this.notificationPubsubTopic = notificationPubsubTopic;
        return this;
    }
    
    /**
     * Output only. Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("params")
    public java.util.Map<String, Object> params;
    public TransferRun withParams(java.util.Map<String, Object> params) {
        this.params = params;
        return this;
    }
    
    /**
     * For batch transfer runs, specifies the date and time of the data should be ingested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runTime")
    public String runTime;
    public TransferRun withRunTime(String runTime) {
        this.runTime = runTime;
        return this;
    }
    
    /**
     * Output only. Describes the schedule of this transfer run if it was created as part of a regular schedule. For batch transfer runs that are scheduled manually, this is empty. NOTE: the system might choose to delay the schedule depending on the current load, so `schedule_time` doesn't always match this.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule")
    public String schedule;
    public TransferRun withSchedule(String schedule) {
        this.schedule = schedule;
        return this;
    }
    
    /**
     * Minimum time after which a transfer run can be started.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduleTime")
    public String scheduleTime;
    public TransferRun withScheduleTime(String scheduleTime) {
        this.scheduleTime = scheduleTime;
        return this;
    }
    
    /**
     * Output only. Time when transfer run was started. Parameter ignored by server for input requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    public String startTime;
    public TransferRun withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Data transfer run state. Ignored for input requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public TransferRunStateEnum state;
    public TransferRun withState(TransferRunStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. Last time the data transfer run state was updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public TransferRun withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * Deprecated. Unique ID of the user on whose behalf transfer is done.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userId")
    public String userId;
    public TransferRun withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
}
