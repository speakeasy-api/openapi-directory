// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ReaLiquidationStatusEnum - The liquidation status of the company.
type ReaLiquidationStatusEnum string

const (
	ReaLiquidationStatusEnumLn ReaLiquidationStatusEnum = "LN"
	ReaLiquidationStatusEnumLs ReaLiquidationStatusEnum = "LS"
)

func (e *ReaLiquidationStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LN":
		fallthrough
	case "LS":
		*e = ReaLiquidationStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReaLiquidationStatusEnum: %s", s)
	}
}

// ReaPartnersEnum - The number of partners.
type ReaPartnersEnum string

const (
	ReaPartnersEnumSu ReaPartnersEnum = "SU"
	ReaPartnersEnumSm ReaPartnersEnum = "SM"
)

func (e *ReaPartnersEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SU":
		fallthrough
	case "SM":
		*e = ReaPartnersEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReaPartnersEnum: %s", s)
	}
}

// ReaProvinceEnum - The provincia of the ufficio that issued the identifier.
type ReaProvinceEnum string

const (
	ReaProvinceEnumAg ReaProvinceEnum = "AG"
	ReaProvinceEnumAl ReaProvinceEnum = "AL"
	ReaProvinceEnumAn ReaProvinceEnum = "AN"
	ReaProvinceEnumAo ReaProvinceEnum = "AO"
	ReaProvinceEnumAq ReaProvinceEnum = "AQ"
	ReaProvinceEnumAr ReaProvinceEnum = "AR"
	ReaProvinceEnumAp ReaProvinceEnum = "AP"
	ReaProvinceEnumAt ReaProvinceEnum = "AT"
	ReaProvinceEnumAv ReaProvinceEnum = "AV"
	ReaProvinceEnumBa ReaProvinceEnum = "BA"
	ReaProvinceEnumBt ReaProvinceEnum = "BT"
	ReaProvinceEnumBl ReaProvinceEnum = "BL"
	ReaProvinceEnumBn ReaProvinceEnum = "BN"
	ReaProvinceEnumBg ReaProvinceEnum = "BG"
	ReaProvinceEnumBi ReaProvinceEnum = "BI"
	ReaProvinceEnumBo ReaProvinceEnum = "BO"
	ReaProvinceEnumBz ReaProvinceEnum = "BZ"
	ReaProvinceEnumBs ReaProvinceEnum = "BS"
	ReaProvinceEnumBr ReaProvinceEnum = "BR"
	ReaProvinceEnumCa ReaProvinceEnum = "CA"
	ReaProvinceEnumCl ReaProvinceEnum = "CL"
	ReaProvinceEnumCb ReaProvinceEnum = "CB"
	ReaProvinceEnumCi ReaProvinceEnum = "CI"
	ReaProvinceEnumCe ReaProvinceEnum = "CE"
	ReaProvinceEnumCt ReaProvinceEnum = "CT"
	ReaProvinceEnumCz ReaProvinceEnum = "CZ"
	ReaProvinceEnumCh ReaProvinceEnum = "CH"
	ReaProvinceEnumCo ReaProvinceEnum = "CO"
	ReaProvinceEnumCs ReaProvinceEnum = "CS"
	ReaProvinceEnumCr ReaProvinceEnum = "CR"
	ReaProvinceEnumKr ReaProvinceEnum = "KR"
	ReaProvinceEnumCn ReaProvinceEnum = "CN"
	ReaProvinceEnumEn ReaProvinceEnum = "EN"
	ReaProvinceEnumFm ReaProvinceEnum = "FM"
	ReaProvinceEnumFe ReaProvinceEnum = "FE"
	ReaProvinceEnumFi ReaProvinceEnum = "FI"
	ReaProvinceEnumFg ReaProvinceEnum = "FG"
	ReaProvinceEnumFc ReaProvinceEnum = "FC"
	ReaProvinceEnumFr ReaProvinceEnum = "FR"
	ReaProvinceEnumGe ReaProvinceEnum = "GE"
	ReaProvinceEnumGo ReaProvinceEnum = "GO"
	ReaProvinceEnumGr ReaProvinceEnum = "GR"
	ReaProvinceEnumIm ReaProvinceEnum = "IM"
	ReaProvinceEnumIs ReaProvinceEnum = "IS"
	ReaProvinceEnumSp ReaProvinceEnum = "SP"
	ReaProvinceEnumLt ReaProvinceEnum = "LT"
	ReaProvinceEnumLe ReaProvinceEnum = "LE"
	ReaProvinceEnumLc ReaProvinceEnum = "LC"
	ReaProvinceEnumLi ReaProvinceEnum = "LI"
	ReaProvinceEnumLo ReaProvinceEnum = "LO"
	ReaProvinceEnumLu ReaProvinceEnum = "LU"
	ReaProvinceEnumMc ReaProvinceEnum = "MC"
	ReaProvinceEnumMn ReaProvinceEnum = "MN"
	ReaProvinceEnumMs ReaProvinceEnum = "MS"
	ReaProvinceEnumMt ReaProvinceEnum = "MT"
	ReaProvinceEnumVs ReaProvinceEnum = "VS"
	ReaProvinceEnumMe ReaProvinceEnum = "ME"
	ReaProvinceEnumMi ReaProvinceEnum = "MI"
	ReaProvinceEnumMo ReaProvinceEnum = "MO"
	ReaProvinceEnumMb ReaProvinceEnum = "MB"
	ReaProvinceEnumNa ReaProvinceEnum = "NA"
	ReaProvinceEnumNo ReaProvinceEnum = "NO"
	ReaProvinceEnumNu ReaProvinceEnum = "NU"
	ReaProvinceEnumOg ReaProvinceEnum = "OG"
	ReaProvinceEnumOt ReaProvinceEnum = "OT"
	ReaProvinceEnumOr ReaProvinceEnum = "OR"
	ReaProvinceEnumPd ReaProvinceEnum = "PD"
	ReaProvinceEnumPa ReaProvinceEnum = "PA"
	ReaProvinceEnumPr ReaProvinceEnum = "PR"
	ReaProvinceEnumPv ReaProvinceEnum = "PV"
	ReaProvinceEnumPg ReaProvinceEnum = "PG"
	ReaProvinceEnumPu ReaProvinceEnum = "PU"
	ReaProvinceEnumPe ReaProvinceEnum = "PE"
	ReaProvinceEnumPc ReaProvinceEnum = "PC"
	ReaProvinceEnumPi ReaProvinceEnum = "PI"
	ReaProvinceEnumPt ReaProvinceEnum = "PT"
	ReaProvinceEnumPn ReaProvinceEnum = "PN"
	ReaProvinceEnumPz ReaProvinceEnum = "PZ"
	ReaProvinceEnumPo ReaProvinceEnum = "PO"
	ReaProvinceEnumRg ReaProvinceEnum = "RG"
	ReaProvinceEnumRa ReaProvinceEnum = "RA"
	ReaProvinceEnumRc ReaProvinceEnum = "RC"
	ReaProvinceEnumRe ReaProvinceEnum = "RE"
	ReaProvinceEnumRi ReaProvinceEnum = "RI"
	ReaProvinceEnumRn ReaProvinceEnum = "RN"
	ReaProvinceEnumRo ReaProvinceEnum = "RO"
	ReaProvinceEnumSa ReaProvinceEnum = "SA"
	ReaProvinceEnumSs ReaProvinceEnum = "SS"
	ReaProvinceEnumSv ReaProvinceEnum = "SV"
	ReaProvinceEnumSi ReaProvinceEnum = "SI"
	ReaProvinceEnumSr ReaProvinceEnum = "SR"
	ReaProvinceEnumSo ReaProvinceEnum = "SO"
	ReaProvinceEnumTa ReaProvinceEnum = "TA"
	ReaProvinceEnumTe ReaProvinceEnum = "TE"
	ReaProvinceEnumTr ReaProvinceEnum = "TR"
	ReaProvinceEnumTo ReaProvinceEnum = "TO"
	ReaProvinceEnumTp ReaProvinceEnum = "TP"
	ReaProvinceEnumTn ReaProvinceEnum = "TN"
	ReaProvinceEnumTv ReaProvinceEnum = "TV"
	ReaProvinceEnumTs ReaProvinceEnum = "TS"
	ReaProvinceEnumUd ReaProvinceEnum = "UD"
	ReaProvinceEnumVa ReaProvinceEnum = "VA"
	ReaProvinceEnumVe ReaProvinceEnum = "VE"
	ReaProvinceEnumVb ReaProvinceEnum = "VB"
	ReaProvinceEnumVc ReaProvinceEnum = "VC"
	ReaProvinceEnumVr ReaProvinceEnum = "VR"
	ReaProvinceEnumVv ReaProvinceEnum = "VV"
	ReaProvinceEnumVi ReaProvinceEnum = "VI"
	ReaProvinceEnumVt ReaProvinceEnum = "VT"
)

func (e *ReaProvinceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AG":
		fallthrough
	case "AL":
		fallthrough
	case "AN":
		fallthrough
	case "AO":
		fallthrough
	case "AQ":
		fallthrough
	case "AR":
		fallthrough
	case "AP":
		fallthrough
	case "AT":
		fallthrough
	case "AV":
		fallthrough
	case "BA":
		fallthrough
	case "BT":
		fallthrough
	case "BL":
		fallthrough
	case "BN":
		fallthrough
	case "BG":
		fallthrough
	case "BI":
		fallthrough
	case "BO":
		fallthrough
	case "BZ":
		fallthrough
	case "BS":
		fallthrough
	case "BR":
		fallthrough
	case "CA":
		fallthrough
	case "CL":
		fallthrough
	case "CB":
		fallthrough
	case "CI":
		fallthrough
	case "CE":
		fallthrough
	case "CT":
		fallthrough
	case "CZ":
		fallthrough
	case "CH":
		fallthrough
	case "CO":
		fallthrough
	case "CS":
		fallthrough
	case "CR":
		fallthrough
	case "KR":
		fallthrough
	case "CN":
		fallthrough
	case "EN":
		fallthrough
	case "FM":
		fallthrough
	case "FE":
		fallthrough
	case "FI":
		fallthrough
	case "FG":
		fallthrough
	case "FC":
		fallthrough
	case "FR":
		fallthrough
	case "GE":
		fallthrough
	case "GO":
		fallthrough
	case "GR":
		fallthrough
	case "IM":
		fallthrough
	case "IS":
		fallthrough
	case "SP":
		fallthrough
	case "LT":
		fallthrough
	case "LE":
		fallthrough
	case "LC":
		fallthrough
	case "LI":
		fallthrough
	case "LO":
		fallthrough
	case "LU":
		fallthrough
	case "MC":
		fallthrough
	case "MN":
		fallthrough
	case "MS":
		fallthrough
	case "MT":
		fallthrough
	case "VS":
		fallthrough
	case "ME":
		fallthrough
	case "MI":
		fallthrough
	case "MO":
		fallthrough
	case "MB":
		fallthrough
	case "NA":
		fallthrough
	case "NO":
		fallthrough
	case "NU":
		fallthrough
	case "OG":
		fallthrough
	case "OT":
		fallthrough
	case "OR":
		fallthrough
	case "PD":
		fallthrough
	case "PA":
		fallthrough
	case "PR":
		fallthrough
	case "PV":
		fallthrough
	case "PG":
		fallthrough
	case "PU":
		fallthrough
	case "PE":
		fallthrough
	case "PC":
		fallthrough
	case "PI":
		fallthrough
	case "PT":
		fallthrough
	case "PN":
		fallthrough
	case "PZ":
		fallthrough
	case "PO":
		fallthrough
	case "RG":
		fallthrough
	case "RA":
		fallthrough
	case "RC":
		fallthrough
	case "RE":
		fallthrough
	case "RI":
		fallthrough
	case "RN":
		fallthrough
	case "RO":
		fallthrough
	case "SA":
		fallthrough
	case "SS":
		fallthrough
	case "SV":
		fallthrough
	case "SI":
		fallthrough
	case "SR":
		fallthrough
	case "SO":
		fallthrough
	case "TA":
		fallthrough
	case "TE":
		fallthrough
	case "TR":
		fallthrough
	case "TO":
		fallthrough
	case "TP":
		fallthrough
	case "TN":
		fallthrough
	case "TV":
		fallthrough
	case "TS":
		fallthrough
	case "UD":
		fallthrough
	case "VA":
		fallthrough
	case "VE":
		fallthrough
	case "VB":
		fallthrough
	case "VC":
		fallthrough
	case "VR":
		fallthrough
	case "VV":
		fallthrough
	case "VI":
		fallthrough
	case "VT":
		*e = ReaProvinceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReaProvinceEnum: %s", s)
	}
}

type Rea struct {
	// The captial for the company.
	Capital *float64 `json:"capital,omitempty"`
	// The identifier.
	Identifier *string `json:"identifier,omitempty"`
	// The liquidation status of the company.
	LiquidationStatus *ReaLiquidationStatusEnum `json:"liquidation_status,omitempty"`
	// The number of partners.
	Partners *ReaPartnersEnum `json:"partners,omitempty"`
	// The provincia of the ufficio that issued the identifier.
	Province *ReaProvinceEnum `json:"province,omitempty"`
}
