/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PropertyPerformanceResult - Represents a result from querying for the property performance report for an account.
 */
public class PropertyPerformanceResult {
    /**
     * The total number of ad clicks that were recorded for this result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adsClickCount")
    public String adsClickCount;

    public PropertyPerformanceResult withAdsClickCount(String adsClickCount) {
        this.adsClickCount = adsClickCount;
        return this;
    }
    
    /**
     * Equal to `ads_click_count` divided by `ads_impression_count`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adsClickthroughRate")
    public Double adsClickthroughRate;

    public PropertyPerformanceResult withAdsClickthroughRate(Double adsClickthroughRate) {
        this.adsClickthroughRate = adsClickthroughRate;
        return this;
    }
    
    /**
     * The total number of ad impressions that were recorded for this result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adsImpressionCount")
    public String adsImpressionCount;

    public PropertyPerformanceResult withAdsImpressionCount(String adsImpressionCount) {
        this.adsImpressionCount = adsImpressionCount;
        return this;
    }
    
    /**
     * Difference in days between query date and check-in date in property's local timezone. Only present if `advanceBookingWindow` is specified in `aggregateBy` in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advanceBookingWindow")
    public PropertyPerformanceResultAdvanceBookingWindowEnum advanceBookingWindow;

    public PropertyPerformanceResult withAdvanceBookingWindow(PropertyPerformanceResultAdvanceBookingWindowEnum advanceBookingWindow) {
        this.advanceBookingWindow = advanceBookingWindow;
        return this;
    }
    
    /**
     * Partner-specified brand for the property. Only present if `brand` is specified in `aggregateBy` in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brand")
    public String brand;

    public PropertyPerformanceResult withBrand(String brand) {
        this.brand = brand;
        return this;
    }
    
    /**
     * The total number of free booking link clicks that were recorded for this result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clickCount")
    public String clickCount;

    public PropertyPerformanceResult withClickCount(String clickCount) {
        this.clickCount = clickCount;
        return this;
    }
    
    /**
     * Equal to `click_count` divided by `impression_count`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clickthroughRate")
    public Double clickthroughRate;

    public PropertyPerformanceResult withClickthroughRate(Double clickthroughRate) {
        this.clickthroughRate = clickthroughRate;
        return this;
    }
    
    /**
     * Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    public Date date;

    public PropertyPerformanceResult withDate(Date date) {
        this.date = date;
        return this;
    }
    
    /**
     * The user\u2019s device type. Only present if `deviceType` is specified in `aggregateBy` in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceType")
    public PropertyPerformanceResultDeviceTypeEnum deviceType;

    public PropertyPerformanceResult withDeviceType(PropertyPerformanceResultDeviceTypeEnum deviceType) {
        this.deviceType = deviceType;
        return this;
    }
    
    /**
     * Whether the user\u2019s query indicated a strong interest in booking. Only present if `highIntentUsers` is specified in `aggregateBy` in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("highIntentUsers")
    public Boolean highIntentUsers;

    public PropertyPerformanceResult withHighIntentUsers(Boolean highIntentUsers) {
        this.highIntentUsers = highIntentUsers;
        return this;
    }
    
    /**
     * The total number of free booking link impressions that were recorded for this result. This value is rounded to preserve user privacy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("impressionCount")
    public String impressionCount;

    public PropertyPerformanceResult withImpressionCount(String impressionCount) {
        this.impressionCount = impressionCount;
        return this;
    }
    
    /**
     * Number of nights between check-in and check-out dates specified by user. Only present if `lengthOfStay` is specified in `aggregateBy` in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lengthOfStay")
    public PropertyPerformanceResultLengthOfStayEnum lengthOfStay;

    public PropertyPerformanceResult withLengthOfStay(PropertyPerformanceResultLengthOfStayEnum lengthOfStay) {
        this.lengthOfStay = lengthOfStay;
        return this;
    }
    
    /**
     * Requested number of people staying at the property. Only present if `partnerPropertyId` is specified in `aggregateBy` in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("occupancy")
    public PropertyPerformanceResultOccupancyEnum occupancy;

    public PropertyPerformanceResult withOccupancy(PropertyPerformanceResultOccupancyEnum occupancy) {
        this.occupancy = occupancy;
        return this;
    }
    
    /**
     * Partner's property name. Only present if `partnerPropertyDisplayName` is specified in `aggregateBy` in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partnerPropertyDisplayName")
    public String partnerPropertyDisplayName;

    public PropertyPerformanceResult withPartnerPropertyDisplayName(String partnerPropertyDisplayName) {
        this.partnerPropertyDisplayName = partnerPropertyDisplayName;
        return this;
    }
    
    /**
     * Partner's property ID. Only present if `partnerPropertyId` is specified in `aggregateBy` in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partnerPropertyId")
    public String partnerPropertyId;

    public PropertyPerformanceResult withPartnerPropertyId(String partnerPropertyId) {
        this.partnerPropertyId = partnerPropertyId;
        return this;
    }
    
    /**
     * ISO 3116 region code of the country/region of the property. Only present if `propertyRegionCode` is specified in `aggregateBy` in the request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("propertyRegionCode")
    public String propertyRegionCode;

    public PropertyPerformanceResult withPropertyRegionCode(String propertyRegionCode) {
        this.propertyRegionCode = propertyRegionCode;
        return this;
    }
    
    /**
     * ISO 3116 region code of the country/region of the user. Only present if `userRegionCode` is specified in `aggregateBy` in the request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userRegionCode")
    public String userRegionCode;

    public PropertyPerformanceResult withUserRegionCode(String userRegionCode) {
        this.userRegionCode = userRegionCode;
        return this;
    }
    
    /**
     * The total number of clicks on the "Website" button on Google for vacation rentals.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vrWebsiteButtonClicks")
    public String vrWebsiteButtonClicks;

    public PropertyPerformanceResult withVrWebsiteButtonClicks(String vrWebsiteButtonClicks) {
        this.vrWebsiteButtonClicks = vrWebsiteButtonClicks;
        return this;
    }
    
    public PropertyPerformanceResult(){}
}
