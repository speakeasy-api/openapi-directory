/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Filter } from "./filter";
import { SourceTypeEnum } from "./sourcetypeenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * <p/>
 */
export class DescribeEventsMessage extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Duration" })
  duration?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "EndTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "EventCategories" })
  eventCategories?: string[];

  @SpeakeasyMetadata({ elemType: Filter })
  @Expose({ name: "Filters" })
  @Type(() => Filter)
  filters?: Filter[];

  @SpeakeasyMetadata()
  @Expose({ name: "Marker" })
  marker?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "MaxRecords" })
  maxRecords?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "SourceIdentifier" })
  sourceIdentifier?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SourceType" })
  sourceType?: SourceTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "StartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;
}
