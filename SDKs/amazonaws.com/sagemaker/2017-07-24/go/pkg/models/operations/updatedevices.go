// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateDevicesXAmzTargetEnum
type UpdateDevicesXAmzTargetEnum string

const (
	UpdateDevicesXAmzTargetEnumSageMakerUpdateDevices UpdateDevicesXAmzTargetEnum = "SageMaker.UpdateDevices"
)

func (e UpdateDevicesXAmzTargetEnum) ToPointer() *UpdateDevicesXAmzTargetEnum {
	return &e
}

func (e *UpdateDevicesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SageMaker.UpdateDevices":
		*e = UpdateDevicesXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDevicesXAmzTargetEnum: %v", v)
	}
}

type UpdateDevicesRequest struct {
	UpdateDevicesRequest shared.UpdateDevicesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm        *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget           UpdateDevicesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateDevicesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
