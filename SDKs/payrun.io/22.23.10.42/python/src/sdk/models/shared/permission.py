"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PermissionPermissionPolicyEnum(str, Enum):
    r"""The permissions' policy"""
    ALLOW = 'Allow'
    DENY = 'Deny'

class PermissionPermissionVerbsEnum(str, Enum):
    r"""The permissions' verbs"""
    READ = 'Read'
    WRITE = 'Write'
    DELETE = 'Delete'
    ALL = 'All'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PermissionPermission:
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    r"""The permissions' description"""  
    expression: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Expression'), 'exclude': lambda f: f is None }})
    r"""The permissions' expression"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The permissions' name"""  
    policy: Optional[PermissionPermissionPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Policy'), 'exclude': lambda f: f is None }})
    r"""The permissions' policy"""  
    verbs: Optional[PermissionPermissionVerbsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Verbs'), 'exclude': lambda f: f is None }})
    r"""The permissions' verbs"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Permission:
    r"""The permission object."""
    
    permission: Optional[PermissionPermission] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Permission'), 'exclude': lambda f: f is None }})  
    