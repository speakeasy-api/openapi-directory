"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import attestationoccurrence as shared_attestationoccurrence
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ValidateAttestationOccurrenceRequest:
    r"""Request message for ValidationHelperV1.ValidateAttestationOccurrence."""
    
    attestation: Optional[shared_attestationoccurrence.AttestationOccurrence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attestation'), 'exclude': lambda f: f is None }})
    r"""Occurrence that represents a single \\"attestation\\". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign."""  
    occurrence_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('occurrenceNote'), 'exclude': lambda f: f is None }})
    r"""Required. The resource name of the Note to which the containing Occurrence is associated."""  
    occurrence_resource_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('occurrenceResourceUri'), 'exclude': lambda f: f is None }})
    r"""Required. The URI of the artifact (e.g. container image) that is the subject of the containing Occurrence."""  
    