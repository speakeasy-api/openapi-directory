// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SheetsSpreadsheetsValuesBatchGetSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type SheetsSpreadsheetsValuesBatchGetSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type SheetsSpreadsheetsValuesBatchGetSecurityOption3 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type SheetsSpreadsheetsValuesBatchGetSecurityOption4 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type SheetsSpreadsheetsValuesBatchGetSecurityOption5 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type SheetsSpreadsheetsValuesBatchGetSecurity struct {
	Option1 *SheetsSpreadsheetsValuesBatchGetSecurityOption1 `security:"option"`
	Option2 *SheetsSpreadsheetsValuesBatchGetSecurityOption2 `security:"option"`
	Option3 *SheetsSpreadsheetsValuesBatchGetSecurityOption3 `security:"option"`
	Option4 *SheetsSpreadsheetsValuesBatchGetSecurityOption4 `security:"option"`
	Option5 *SheetsSpreadsheetsValuesBatchGetSecurityOption5 `security:"option"`
}

// SheetsSpreadsheetsValuesBatchGetDateTimeRenderOptionEnum - How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
type SheetsSpreadsheetsValuesBatchGetDateTimeRenderOptionEnum string

const (
	SheetsSpreadsheetsValuesBatchGetDateTimeRenderOptionEnumSerialNumber    SheetsSpreadsheetsValuesBatchGetDateTimeRenderOptionEnum = "SERIAL_NUMBER"
	SheetsSpreadsheetsValuesBatchGetDateTimeRenderOptionEnumFormattedString SheetsSpreadsheetsValuesBatchGetDateTimeRenderOptionEnum = "FORMATTED_STRING"
)

func (e *SheetsSpreadsheetsValuesBatchGetDateTimeRenderOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SERIAL_NUMBER":
		fallthrough
	case "FORMATTED_STRING":
		*e = SheetsSpreadsheetsValuesBatchGetDateTimeRenderOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SheetsSpreadsheetsValuesBatchGetDateTimeRenderOptionEnum: %s", s)
	}
}

// SheetsSpreadsheetsValuesBatchGetMajorDimensionEnum - The major dimension that results should use. For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `ranges=["A1:B2"],majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas requesting `ranges=["A1:B2"],majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.
type SheetsSpreadsheetsValuesBatchGetMajorDimensionEnum string

const (
	SheetsSpreadsheetsValuesBatchGetMajorDimensionEnumDimensionUnspecified SheetsSpreadsheetsValuesBatchGetMajorDimensionEnum = "DIMENSION_UNSPECIFIED"
	SheetsSpreadsheetsValuesBatchGetMajorDimensionEnumRows                 SheetsSpreadsheetsValuesBatchGetMajorDimensionEnum = "ROWS"
	SheetsSpreadsheetsValuesBatchGetMajorDimensionEnumColumns              SheetsSpreadsheetsValuesBatchGetMajorDimensionEnum = "COLUMNS"
)

func (e *SheetsSpreadsheetsValuesBatchGetMajorDimensionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DIMENSION_UNSPECIFIED":
		fallthrough
	case "ROWS":
		fallthrough
	case "COLUMNS":
		*e = SheetsSpreadsheetsValuesBatchGetMajorDimensionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SheetsSpreadsheetsValuesBatchGetMajorDimensionEnum: %s", s)
	}
}

// SheetsSpreadsheetsValuesBatchGetValueRenderOptionEnum - How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.
type SheetsSpreadsheetsValuesBatchGetValueRenderOptionEnum string

const (
	SheetsSpreadsheetsValuesBatchGetValueRenderOptionEnumFormattedValue   SheetsSpreadsheetsValuesBatchGetValueRenderOptionEnum = "FORMATTED_VALUE"
	SheetsSpreadsheetsValuesBatchGetValueRenderOptionEnumUnformattedValue SheetsSpreadsheetsValuesBatchGetValueRenderOptionEnum = "UNFORMATTED_VALUE"
	SheetsSpreadsheetsValuesBatchGetValueRenderOptionEnumFormula          SheetsSpreadsheetsValuesBatchGetValueRenderOptionEnum = "FORMULA"
)

func (e *SheetsSpreadsheetsValuesBatchGetValueRenderOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FORMATTED_VALUE":
		fallthrough
	case "UNFORMATTED_VALUE":
		fallthrough
	case "FORMULA":
		*e = SheetsSpreadsheetsValuesBatchGetValueRenderOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SheetsSpreadsheetsValuesBatchGetValueRenderOptionEnum: %s", s)
	}
}

type SheetsSpreadsheetsValuesBatchGetRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
	DateTimeRenderOption *SheetsSpreadsheetsValuesBatchGetDateTimeRenderOptionEnum `queryParam:"style=form,explode=true,name=dateTimeRenderOption"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// The major dimension that results should use. For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `ranges=["A1:B2"],majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas requesting `ranges=["A1:B2"],majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.
	MajorDimension *SheetsSpreadsheetsValuesBatchGetMajorDimensionEnum `queryParam:"style=form,explode=true,name=majorDimension"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the range to retrieve values from.
	Ranges []string `queryParam:"style=form,explode=true,name=ranges"`
	// The ID of the spreadsheet to retrieve data from.
	SpreadsheetID string `pathParam:"style=simple,explode=false,name=spreadsheetId"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.
	ValueRenderOption *SheetsSpreadsheetsValuesBatchGetValueRenderOptionEnum `queryParam:"style=form,explode=true,name=valueRenderOption"`
}

type SheetsSpreadsheetsValuesBatchGetResponse struct {
	// Successful response
	BatchGetValuesResponse *shared.BatchGetValuesResponse
	ContentType            string
	StatusCode             int
	RawResponse            *http.Response
}
