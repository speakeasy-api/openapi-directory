/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Data } from "./data";
import { TypeEnum } from "./typeenum";
import { Expose, Type } from "class-transformer";

/**
 * Status of responses from attendees
 */
export enum CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnum {
  NeedsAction = "needsAction",
  Declined = "declined",
  Tentative = "tentative",
  Accepted = "accepted",
}

export class CreateCalendarEventRequestDataAttributesAttendees extends SpeakeasyBase {
  /**
   * Status of responses from attendees
   */
  @SpeakeasyMetadata()
  @Expose({ name: "response_status" })
  responseStatus?: CreateCalendarEventRequestDataAttributesAttendeesResponseStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  user?: string;
}

/**
 * The type of calendar event. Immutable after event creation.
 */
export enum CreateCalendarEventRequestDataAttributesTypeEnum {
  PlanCheckIn = "plan-check-in",
  Reminder = "reminder",
  TelephoneCall = "telephone-call",
  OfficeVisit = "office-visit",
  VideoCall = "video-call",
}

export class CreateCalendarEventRequestDataAttributes extends SpeakeasyBase {
  /**
   * True if the calendar event is an all day event, false otherwise. Must be set to true for `plan-check-in` event type. If it is true, then `start_at` and `end_at` must also be set to beginning of day, except `plan-check-in` event type does not need an `end_at` date. If it is false, then `start_at` and `end_at` must be on the same day.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "all_day" })
  allDay?: boolean;

  /**
   * List of attendees for the calendar event
   */
  @SpeakeasyMetadata({
    elemType: CreateCalendarEventRequestDataAttributesAttendees,
  })
  @Expose({ name: "attendees" })
  @Type(() => CreateCalendarEventRequestDataAttributesAttendees)
  attendees: CreateCalendarEventRequestDataAttributesAttendees[];

  /**
   * The date and time when the calendar event is marked as completed. Only valid for `plan-check-in` event type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "completed_at" })
  completedAt?: string;

  /**
   * The coach who marked the calendar event as completed. Only valid for `plan-check-in` event type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "completed_by" })
  completedBy?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The date and time when the calendar event ends. Not valid for `plan-check-in` event type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_at" })
  endAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  /**
   * The date and time when the calendar event starts
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_at" })
  startAt: string;

  /**
   * The time zone in which the dates for the calendar event are specified
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time_zone" })
  timeZone?: string;

  /**
   * The title of the calendar event. Must not be empty or null
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: string;

  /**
   * The type of calendar event. Immutable after event creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: CreateCalendarEventRequestDataAttributesTypeEnum;
}

export class CreateCalendarEventRequestDataRelationshipsOwner extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => Data)
  data: Data;
}

export class CreateCalendarEventRequestDataRelationships extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "owner" })
  @Type(() => CreateCalendarEventRequestDataRelationshipsOwner)
  owner?: CreateCalendarEventRequestDataRelationshipsOwner;
}

export class CreateCalendarEventRequestData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => CreateCalendarEventRequestDataAttributes)
  attributes: CreateCalendarEventRequestDataAttributes;

  @SpeakeasyMetadata()
  @Expose({ name: "relationships" })
  @Type(() => CreateCalendarEventRequestDataRelationships)
  relationships: CreateCalendarEventRequestDataRelationships;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: TypeEnum;
}

export class CreateCalendarEventRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => CreateCalendarEventRequestData)
  data: CreateCalendarEventRequestData;
}
