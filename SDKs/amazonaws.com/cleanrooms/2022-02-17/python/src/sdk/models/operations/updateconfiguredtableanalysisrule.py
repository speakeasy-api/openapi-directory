"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import configuredtableanalysisrulepolicyv1 as shared_configuredtableanalysisrulepolicyv1
from ..shared import updateconfiguredtableanalysisruleoutput as shared_updateconfiguredtableanalysisruleoutput
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateConfiguredTableAnalysisRuleRequestBodyAnalysisRulePolicy:
    r"""Controls on the query specifications that can be run on a configured table."""
    
    v1: Optional[shared_configuredtableanalysisrulepolicyv1.ConfiguredTableAnalysisRulePolicyV1] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('v1'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateConfiguredTableAnalysisRuleRequestBody:
    
    analysis_rule_policy: UpdateConfiguredTableAnalysisRuleRequestBodyAnalysisRulePolicy = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analysisRulePolicy') }})
    r"""Controls on the query specifications that can be run on a configured table."""  
    
class UpdateConfiguredTableAnalysisRuleAnalysisRuleTypeEnum(str, Enum):
    r"""The analysis rule type to be updated. Configured table analysis rules are uniquely identified by their configured table identifier and analysis rule type."""
    AGGREGATION = 'AGGREGATION'
    LIST = 'LIST'


@dataclasses.dataclass
class UpdateConfiguredTableAnalysisRuleRequest:
    
    analysis_rule_type: UpdateConfiguredTableAnalysisRuleAnalysisRuleTypeEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'analysisRuleType', 'style': 'simple', 'explode': False }})
    r"""The analysis rule type to be updated. Configured table analysis rules are uniquely identified by their configured table identifier and analysis rule type."""  
    configured_table_identifier: str = dataclasses.field(metadata={'path_param': { 'field_name': 'configuredTableIdentifier', 'style': 'simple', 'explode': False }})
    r"""The unique identifier for the configured table that the analysis rule applies to. Currently accepts the configured table ID."""  
    request_body: UpdateConfiguredTableAnalysisRuleRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateConfiguredTableAnalysisRuleResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_configured_table_analysis_rule_output: Optional[shared_updateconfiguredtableanalysisruleoutput.UpdateConfiguredTableAnalysisRuleOutput] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    