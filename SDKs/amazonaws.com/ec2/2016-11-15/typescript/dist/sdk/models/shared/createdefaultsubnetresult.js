"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateDefaultSubnetResult = exports.CreateDefaultSubnetResultSubnet = exports.CreateDefaultSubnetResultSubnetTags = exports.CreateDefaultSubnetResultSubnetStateEnum = exports.CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunch = exports.CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum = exports.CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet = exports.CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState = exports.CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The state of a CIDR block.
 */
var CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum;
(function (CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum) {
    CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Associating"] = "associating";
    CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Associated"] = "associated";
    CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Disassociating"] = "disassociating";
    CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Disassociated"] = "disassociated";
    CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Failing"] = "failing";
    CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Failed"] = "failed";
})(CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = exports.CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum || (exports.CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = {}));
/**
 * The state of the CIDR block.
 */
var CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState = /** @class */ (function (_super) {
    __extends(CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState, _super);
    function CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState.prototype, "statusMessage", void 0);
    return CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState;
}(utils_1.SpeakeasyBase));
exports.CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState = CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState;
/**
 * Describes an association between a subnet and an IPv6 CIDR block.
 */
var CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet = /** @class */ (function (_super) {
    __extends(CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet, _super);
    function CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet.prototype, "associationId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet.prototype, "ipv6CidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState)
    ], CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet.prototype, "ipv6CidrBlockState", void 0);
    return CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet;
}(utils_1.SpeakeasyBase));
exports.CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet = CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet;
/**
 * The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID.
 */
var CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum;
(function (CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum) {
    CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum["IpName"] = "ip-name";
    CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum["ResourceName"] = "resource-name";
})(CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum = exports.CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum || (exports.CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum = {}));
/**
 * The type of hostnames to assign to instances in the subnet at launch. An instance hostname is based on the IPv4 address or ID of the instance.
 */
var CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunch = /** @class */ (function (_super) {
    __extends(CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunch, _super);
    function CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunch.prototype, "enableResourceNameDnsAAAARecord", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunch.prototype, "enableResourceNameDnsARecord", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunch.prototype, "hostnameType", void 0);
    return CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunch;
}(utils_1.SpeakeasyBase));
exports.CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunch = CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunch;
/**
 * The current state of the subnet.
 */
var CreateDefaultSubnetResultSubnetStateEnum;
(function (CreateDefaultSubnetResultSubnetStateEnum) {
    CreateDefaultSubnetResultSubnetStateEnum["Pending"] = "pending";
    CreateDefaultSubnetResultSubnetStateEnum["Available"] = "available";
})(CreateDefaultSubnetResultSubnetStateEnum = exports.CreateDefaultSubnetResultSubnetStateEnum || (exports.CreateDefaultSubnetResultSubnetStateEnum = {}));
/**
 * Describes a tag.
 */
var CreateDefaultSubnetResultSubnetTags = /** @class */ (function (_super) {
    __extends(CreateDefaultSubnetResultSubnetTags, _super);
    function CreateDefaultSubnetResultSubnetTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnetTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnetTags.prototype, "value", void 0);
    return CreateDefaultSubnetResultSubnetTags;
}(utils_1.SpeakeasyBase));
exports.CreateDefaultSubnetResultSubnetTags = CreateDefaultSubnetResultSubnetTags;
/**
 * Information about the subnet.
 */
var CreateDefaultSubnetResultSubnet = /** @class */ (function (_super) {
    __extends(CreateDefaultSubnetResultSubnet, _super);
    function CreateDefaultSubnetResultSubnet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateDefaultSubnetResultSubnet.prototype, "assignIpv6AddressOnCreation", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnet.prototype, "availabilityZone", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnet.prototype, "availabilityZoneId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateDefaultSubnetResultSubnet.prototype, "availableIpAddressCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnet.prototype, "cidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnet.prototype, "customerOwnedIpv4Pool", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateDefaultSubnetResultSubnet.prototype, "defaultForAz", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateDefaultSubnetResultSubnet.prototype, "enableDns64", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateDefaultSubnetResultSubnet.prototype, "enableLniAtDeviceIndex", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet,
        }),
        __metadata("design:type", Array)
    ], CreateDefaultSubnetResultSubnet.prototype, "ipv6CidrBlockAssociationSet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateDefaultSubnetResultSubnet.prototype, "ipv6Native", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateDefaultSubnetResultSubnet.prototype, "mapCustomerOwnedIpOnLaunch", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateDefaultSubnetResultSubnet.prototype, "mapPublicIpOnLaunch", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnet.prototype, "outpostArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnet.prototype, "ownerId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateDefaultSubnetResultSubnetPrivateDnsNameOptionsOnLaunch)
    ], CreateDefaultSubnetResultSubnet.prototype, "privateDnsNameOptionsOnLaunch", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnet.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnet.prototype, "subnetArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnet.prototype, "subnetId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: CreateDefaultSubnetResultSubnetTags }),
        __metadata("design:type", Array)
    ], CreateDefaultSubnetResultSubnet.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateDefaultSubnetResultSubnet.prototype, "vpcId", void 0);
    return CreateDefaultSubnetResultSubnet;
}(utils_1.SpeakeasyBase));
exports.CreateDefaultSubnetResultSubnet = CreateDefaultSubnetResultSubnet;
/**
 * Success
 */
var CreateDefaultSubnetResult = /** @class */ (function (_super) {
    __extends(CreateDefaultSubnetResult, _super);
    function CreateDefaultSubnetResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateDefaultSubnetResultSubnet)
    ], CreateDefaultSubnetResult.prototype, "subnet", void 0);
    return CreateDefaultSubnetResult;
}(utils_1.SpeakeasyBase));
exports.CreateDefaultSubnetResult = CreateDefaultSubnetResult;
