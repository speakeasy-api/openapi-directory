"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FlexV1InsightsAssessments:
    r"""Created"""
    
    account_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_sid'), 'exclude': lambda f: f is None }})
    r"""The unique SID identifier of the Account."""  
    agent_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agent_id'), 'exclude': lambda f: f is None }})
    r"""The id of the Agent"""  
    answer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answer_id'), 'exclude': lambda f: f is None }})
    r"""The id of the answer selected by user"""  
    answer_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answer_text'), 'exclude': lambda f: f is None }})
    r"""The answer text selected by user"""  
    assessment: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assessment'), 'exclude': lambda f: f is None }})
    r"""Assessment Details associated with an assessment"""  
    assessment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assessment_id'), 'exclude': lambda f: f is None }})
    r"""The unique id of the assessment"""  
    offset: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offset'), 'exclude': lambda f: f is None }})
    r"""Offset of the conversation"""  
    report: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report'), 'exclude': lambda f: f is None }})
    r"""The flag indicating if this assessment is part of report"""  
    segment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segment_id'), 'exclude': lambda f: f is None }})
    r"""Segment Id of conversation"""  
    timestamp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    user_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_email'), 'exclude': lambda f: f is None }})
    r"""The email id of the user."""  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_name'), 'exclude': lambda f: f is None }})
    r"""The name of the user."""  
    weight: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weight'), 'exclude': lambda f: f is None }})
    r"""The weightage given to this comment"""  
    