// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DimensionCompatibilityCompatibilityEnum - The compatibility of this dimension. If the compatibility is COMPATIBLE, this dimension can be successfully added to the report.
type DimensionCompatibilityCompatibilityEnum string

const (
	DimensionCompatibilityCompatibilityEnumCompatibilityUnspecified DimensionCompatibilityCompatibilityEnum = "COMPATIBILITY_UNSPECIFIED"
	DimensionCompatibilityCompatibilityEnumCompatible               DimensionCompatibilityCompatibilityEnum = "COMPATIBLE"
	DimensionCompatibilityCompatibilityEnumIncompatible             DimensionCompatibilityCompatibilityEnum = "INCOMPATIBLE"
)

func (e DimensionCompatibilityCompatibilityEnum) ToPointer() *DimensionCompatibilityCompatibilityEnum {
	return &e
}

func (e *DimensionCompatibilityCompatibilityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMPATIBILITY_UNSPECIFIED":
		fallthrough
	case "COMPATIBLE":
		fallthrough
	case "INCOMPATIBLE":
		*e = DimensionCompatibilityCompatibilityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DimensionCompatibilityCompatibilityEnum: %v", v)
	}
}

// DimensionCompatibility - The compatibility for a single dimension.
type DimensionCompatibility struct {
	// The compatibility of this dimension. If the compatibility is COMPATIBLE, this dimension can be successfully added to the report.
	Compatibility *DimensionCompatibilityCompatibilityEnum `json:"compatibility,omitempty"`
	// Explains a dimension.
	DimensionMetadata *DimensionMetadata `json:"dimensionMetadata,omitempty"`
}
