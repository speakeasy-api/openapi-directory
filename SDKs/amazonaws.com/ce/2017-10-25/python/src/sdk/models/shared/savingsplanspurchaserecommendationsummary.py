"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SavingsPlansPurchaseRecommendationSummary:
    r"""Summary metrics for your Savings Plans Purchase Recommendations."""
    
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrencyCode'), 'exclude': lambda f: f is None }})  
    current_on_demand_spend: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentOnDemandSpend'), 'exclude': lambda f: f is None }})  
    daily_commitment_to_purchase: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DailyCommitmentToPurchase'), 'exclude': lambda f: f is None }})  
    estimated_monthly_savings_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EstimatedMonthlySavingsAmount'), 'exclude': lambda f: f is None }})  
    estimated_on_demand_cost_with_current_commitment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EstimatedOnDemandCostWithCurrentCommitment'), 'exclude': lambda f: f is None }})  
    estimated_roi: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EstimatedROI'), 'exclude': lambda f: f is None }})  
    estimated_savings_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EstimatedSavingsAmount'), 'exclude': lambda f: f is None }})  
    estimated_savings_percentage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EstimatedSavingsPercentage'), 'exclude': lambda f: f is None }})  
    estimated_total_cost: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EstimatedTotalCost'), 'exclude': lambda f: f is None }})  
    hourly_commitment_to_purchase: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HourlyCommitmentToPurchase'), 'exclude': lambda f: f is None }})  
    total_recommendation_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalRecommendationCount'), 'exclude': lambda f: f is None }})  
    