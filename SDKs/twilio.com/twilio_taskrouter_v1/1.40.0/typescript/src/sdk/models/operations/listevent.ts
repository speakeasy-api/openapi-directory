/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";
export const ListEventServerList = ["https://taskrouter.twilio.com"] as const;

export class ListEventSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class ListEventRequest extends SpeakeasyBase {
  /**
   * Only include Events that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=EndDate;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  endDate?: Date;

  /**
   * The type of Events to read. Returns only Events of the type specified.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=EventType",
  })
  eventType?: string;

  /**
   * The period of events to read in minutes. Returns only Events that occurred since this many minutes in the past. The default is `15` minutes. Task Attributes for Events occuring more 43,200 minutes ago will be redacted.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Minutes",
  })
  minutes?: number;

  /**
   * The page index. This value is simply for client state.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=Page" })
  page?: number;

  /**
   * How many resources to return in each list page. The default is 50, and the maximum is 1000.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PageSize",
  })
  pageSize?: number;

  /**
   * The page token. This is provided by the API.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PageToken",
  })
  pageToken?: string;

  /**
   * The SID of the Reservation with the Events to read. Returns only Events that pertain to the specified Reservation.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ReservationSid",
  })
  reservationSid?: string;

  /**
   * The SID of the Event resource to read.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=Sid" })
  sid?: string;

  /**
   * Only include Events from on or after this date and time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Task Attributes for Events older than 30 days will be redacted.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=StartDate;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  startDate?: Date;

  /**
   * The TaskChannel with the Events to read. Returns only the Events that pertain to the specified TaskChannel.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=TaskChannel",
  })
  taskChannel?: string;

  /**
   * The SID of the TaskQueue with the Events to read. Returns only the Events that pertain to the specified TaskQueue.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=TaskQueueSid",
  })
  taskQueueSid?: string;

  /**
   * The SID of the Task with the Events to read. Returns only the Events that pertain to the specified Task.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=TaskSid",
  })
  taskSid?: string;

  /**
   * The SID of the Worker with the Events to read. Returns only the Events that pertain to the specified Worker.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=WorkerSid",
  })
  workerSid?: string;

  /**
   * The SID of the Workflow with the Events to read. Returns only the Events that pertain to the specified Workflow.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=WorkflowSid",
  })
  workflowSid?: string;

  /**
   * The SID of the Workspace with the Events to read. Returns only the Events that pertain to the specified Workspace.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=WorkspaceSid",
  })
  workspaceSid: string;
}

export class ListEventListEventResponseMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "first_page_url" })
  firstPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "next_page_url" })
  nextPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "previous_page_url" })
  previousPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * OK
 */
export class ListEventListEventResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.TaskrouterV1WorkspaceEvent })
  @Expose({ name: "events" })
  @Type(() => shared.TaskrouterV1WorkspaceEvent)
  events?: shared.TaskrouterV1WorkspaceEvent[];

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => ListEventListEventResponseMeta)
  meta?: ListEventListEventResponseMeta;
}

export class ListEventResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  listEventResponse?: ListEventListEventResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
