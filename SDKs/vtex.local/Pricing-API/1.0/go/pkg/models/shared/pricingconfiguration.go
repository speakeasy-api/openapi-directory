// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// PricingConfigurationPriceVariation - Price Variation object.
type PricingConfigurationPriceVariation struct {
	// Lower variation limit.
	LowerLimit *int64 `json:"lowerLimit,omitempty"`
	// Upper variation limit.
	UpperLimit *int64 `json:"upperLimit,omitempty"`
}

type PricingConfigurationTradePolicyConfigs struct {
	// Trade Policy Minimum Markup.
	MinimumMarkup *int64 `json:"minimumMarkup,omitempty"`
	// Defines if the Price Rule should affect the list price too.
	RulesShouldAffectListPrice *bool `json:"rulesShouldAffectListPrice,omitempty"`
	// Trade Policy ID.
	TradePolicyID *string `json:"tradePolicyId,omitempty"`
}

// PricingConfiguration - OK
type PricingConfiguration struct {
	// Defines if access to the Pricing APIs is blocked for external requests.
	BlockAccount *bool `json:"blockAccount,omitempty"`
	// Array with all blocked routes.
	BlockedRoutes []string `json:"blockedRoutes,omitempty"`
	// Account default markup.
	DefaultMarkup int `json:"defaultMarkup"`
	// Defines if the account has migrated to Pricing V2.
	HasMigrated bool `json:"hasMigrated"`
	// Defines if optional base price is allowed.
	HasOptionalBasePrice *bool `json:"hasOptionalBasePrice,omitempty"`
	// Deprecated. Use the `priceInheritance` field instead.
	HasPriceInheritance *bool `json:"hasPriceInheritance,omitempty"`
	// Pricing V2 migration status.
	MigrationStatus *string `json:"migrationStatus,omitempty"`
	// Account minimum markup.
	MinimumMarkups map[string]int `json:"minimumMarkups"`
	// Condition of price inheritance from its parent account. This field can have three possible values: `never` if the store should never inherit prices, `nonexistent` if the store should only inherit prices in case of nonexistent prices for a given product, or `always` if the store should always inherit prices, regardless of its own prices.
	PriceInheritance *string `json:"priceInheritance,omitempty"`
	// Price Table Limit.
	PriceTableLimit *int64 `json:"priceTableLimit,omitempty"`
	// The strategy used to get prices when there is more than one option. Possible values: `first`, `highest`, `lowest`. Default: `first`.
	PriceTableSelectionStrategy *string `json:"priceTableSelectionStrategy,omitempty"`
	// Price Variation object.
	PriceVariation *PricingConfigurationPriceVariation `json:"priceVariation,omitempty"`
	// Overrides prices from sellers.
	SellersToOverride []interface{} `json:"sellersToOverride,omitempty"`
	// Trade Policy Configurations array.
	TradePolicyConfigs []PricingConfigurationTradePolicyConfigs `json:"tradePolicyConfigs,omitempty"`
}
