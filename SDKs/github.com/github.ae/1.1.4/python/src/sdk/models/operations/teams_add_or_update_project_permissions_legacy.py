"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TeamsAddOrUpdateProjectPermissionsLegacyRequestBodyPermissionEnum(str, Enum):
    r"""The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#http-verbs).\\" """
    READ = 'read'
    WRITE = 'write'
    ADMIN = 'admin'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TeamsAddOrUpdateProjectPermissionsLegacyRequestBody:
    
    permission: Optional[TeamsAddOrUpdateProjectPermissionsLegacyRequestBodyPermissionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission'), 'exclude': lambda f: f is None }})
    r"""The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see \\"[HTTP verbs](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#http-verbs).\\" """  
    

@dataclasses.dataclass
class TeamsAddOrUpdateProjectPermissionsLegacyRequest:
    
    project_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'project_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the project."""  
    team_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'team_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the team."""  
    request_body: Optional[TeamsAddOrUpdateProjectPermissionsLegacyRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TeamsAddOrUpdateProjectPermissionsLegacy403ApplicationJSON:
    r"""Forbidden if the project is not owned by the organization"""
    
    documentation_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentation_url'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class TeamsAddOrUpdateProjectPermissionsLegacyResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Resource not found"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    teams_add_or_update_project_permissions_legacy_403_application_json_object: Optional[TeamsAddOrUpdateProjectPermissionsLegacy403ApplicationJSON] = dataclasses.field(default=None)
    r"""Forbidden if the project is not owned by the organization"""  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    