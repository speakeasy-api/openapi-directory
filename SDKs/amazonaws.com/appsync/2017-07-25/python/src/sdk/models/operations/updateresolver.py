"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import conflictdetectiontype_enum as shared_conflictdetectiontype_enum
from ..shared import conflicthandlertype_enum as shared_conflicthandlertype_enum
from ..shared import lambdaconflicthandlerconfig as shared_lambdaconflicthandlerconfig
from ..shared import runtimename_enum as shared_runtimename_enum
from ..shared import updateresolverresponse as shared_updateresolverresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateResolverRequestBodyCachingConfig:
    r"""The caching configuration for a resolver that has caching activated."""
    
    caching_keys: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cachingKeys'), 'exclude': lambda f: f is None }})  
    ttl: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ttl'), 'exclude': lambda f: f is None }})  
    
class UpdateResolverRequestBodyKindEnum(str, Enum):
    r"""<p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.</p> </li> </ul>"""
    UNIT = 'UNIT'
    PIPELINE = 'PIPELINE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateResolverRequestBodyPipelineConfig:
    r"""The pipeline configuration for a resolver of kind <code>PIPELINE</code>."""
    
    functions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('functions'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateResolverRequestBodyRuntime:
    r"""Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified."""
    
    name: Optional[shared_runtimename_enum.RuntimeNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    runtime_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runtimeVersion'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateResolverRequestBodySyncConfig:
    r"""<p>Describes a Sync configuration for a resolver.</p> <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.</p>"""
    
    conflict_detection: Optional[shared_conflictdetectiontype_enum.ConflictDetectionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conflictDetection'), 'exclude': lambda f: f is None }})  
    conflict_handler: Optional[shared_conflicthandlertype_enum.ConflictHandlerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conflictHandler'), 'exclude': lambda f: f is None }})  
    lambda_conflict_handler_config: Optional[shared_lambdaconflicthandlerconfig.LambdaConflictHandlerConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lambdaConflictHandlerConfig'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateResolverRequestBody:
    
    caching_config: Optional[UpdateResolverRequestBodyCachingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cachingConfig'), 'exclude': lambda f: f is None }})
    r"""The caching configuration for a resolver that has caching activated."""  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The <code>resolver</code> code that contains the request and response functions. When code is used, the <code>runtime</code> is required. The <code>runtime</code> value must be <code>APPSYNC_JS</code>."""  
    data_source_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSourceName'), 'exclude': lambda f: f is None }})
    r"""The new data source name."""  
    kind: Optional[UpdateResolverRequestBodyKindEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""<p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.</p> </li> </ul>"""  
    max_batch_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxBatchSize'), 'exclude': lambda f: f is None }})
    r"""The maximum batching size for a resolver."""  
    pipeline_config: Optional[UpdateResolverRequestBodyPipelineConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pipelineConfig'), 'exclude': lambda f: f is None }})
    r"""The pipeline configuration for a resolver of kind <code>PIPELINE</code>."""  
    request_mapping_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestMappingTemplate'), 'exclude': lambda f: f is None }})
    r"""<p>The new request mapping template.</p> <p>A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL).</p> <p>VTL request mapping templates are optional when using an Lambda data source. For all other data sources, VTL request and response mapping templates are required.</p>"""  
    response_mapping_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responseMappingTemplate'), 'exclude': lambda f: f is None }})
    r"""The new response mapping template."""  
    runtime: Optional[UpdateResolverRequestBodyRuntime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runtime'), 'exclude': lambda f: f is None }})
    r"""Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified."""  
    sync_config: Optional[UpdateResolverRequestBodySyncConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syncConfig'), 'exclude': lambda f: f is None }})
    r"""<p>Describes a Sync configuration for a resolver.</p> <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.</p>"""  
    

@dataclasses.dataclass
class UpdateResolverRequest:
    
    api_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'apiId', 'style': 'simple', 'explode': False }})
    r"""The API ID."""  
    field_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'fieldName', 'style': 'simple', 'explode': False }})
    r"""The new field name."""  
    request_body: UpdateResolverRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    type_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'typeName', 'style': 'simple', 'explode': False }})
    r"""The new type name."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateResolverResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    concurrent_modification_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConcurrentModificationException"""  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    unauthorized_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnauthorizedException"""  
    update_resolver_response: Optional[shared_updateresolverresponse.UpdateResolverResponse] = dataclasses.field(default=None)
    r"""Success"""  
    