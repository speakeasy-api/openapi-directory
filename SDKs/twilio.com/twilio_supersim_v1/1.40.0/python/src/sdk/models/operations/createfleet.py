"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import supersim_v1_fleet as shared_supersim_v1_fleet
from enum import Enum
from typing import Optional

CREATE_FLEET_SERVERS = [
	"https://supersim.twilio.com",
]


@dataclasses.dataclass
class CreateFleetSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class CreateFleetCreateFleetRequestIPCommandsMethodEnum(str, Enum):
    r"""A string representing the HTTP method to use when making a request to `ip_commands_url`. Can be one of `POST` or `GET`. Defaults to `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class CreateFleetCreateFleetRequestSmsCommandsMethodEnum(str, Enum):
    r"""A string representing the HTTP method to use when making a request to `sms_commands_url`. Can be one of `POST` or `GET`. Defaults to `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclasses.dataclass
class CreateFleetCreateFleetRequest:
    
    network_access_profile: str = dataclasses.field(metadata={'form': { 'field_name': 'NetworkAccessProfile' }})
    r"""The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet's SIMs can connect to."""  
    data_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'DataEnabled' }})
    r"""Defines whether SIMs in the Fleet are capable of using 2G/3G/4G/LTE/CAT-M data connectivity. Defaults to `true`."""  
    data_limit: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'DataLimit' }})
    r"""The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000)."""  
    ip_commands_method: Optional[CreateFleetCreateFleetRequestIPCommandsMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'IpCommandsMethod' }})
    r"""A string representing the HTTP method to use when making a request to `ip_commands_url`. Can be one of `POST` or `GET`. Defaults to `POST`."""  
    ip_commands_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'IpCommandsUrl' }})
    r"""The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored."""  
    sms_commands_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SmsCommandsEnabled' }})
    r"""Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands. Defaults to `true`."""  
    sms_commands_method: Optional[CreateFleetCreateFleetRequestSmsCommandsMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SmsCommandsMethod' }})
    r"""A string representing the HTTP method to use when making a request to `sms_commands_url`. Can be one of `POST` or `GET`. Defaults to `POST`."""  
    sms_commands_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SmsCommandsUrl' }})
    r"""The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored."""  
    unique_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'UniqueName' }})
    r"""An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource."""  
    

@dataclasses.dataclass
class CreateFleetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    supersim_v1_fleet: Optional[shared_supersim_v1_fleet.SupersimV1Fleet] = dataclasses.field(default=None)
    r"""Created"""  
    