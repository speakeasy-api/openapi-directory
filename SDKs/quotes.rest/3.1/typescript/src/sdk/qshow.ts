/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Access Qshow - quote collection service. Create curated quotes collection. You can group quotes by any way you want and access them as a single unit. You need an API key to access this service.
 */
export class Qshow {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a qshow.
   *
   */
  deleteQshow(
    req: operations.DeleteQshowRequest,
    security: operations.DeleteQshowSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteQshowResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteQshowRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/qshow";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteQshowSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteQshowResponse =
        new operations.DeleteQshowResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a details about a qshow.
   *
   */
  getQshow(
    req: operations.GetQshowRequest,
    security: operations.GetQshowSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQshowResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQshowRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/qshow";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQshowSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQshowResponse = new operations.GetQshowResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get the list of Qshows in They Said So platform.
   */
  getQshowList(
    req: operations.GetQshowListRequest,
    security: operations.GetQshowListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQshowListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQshowListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/qshow/list";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQshowListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQshowListResponse =
        new operations.GetQshowListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get the quotes in a given Qshow.
   */
  getQshowQuotes(
    req: operations.GetQshowQuotesRequest,
    security: operations.GetQshowQuotesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQshowQuotesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQshowQuotesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/qshow/quotes";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQshowQuotesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQshowQuotesResponse =
        new operations.GetQshowQuotesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update an existing qshow.
   */
  patchQshow(
    req: operations.PatchQshowRequest,
    security: operations.PatchQshowSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchQshowResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchQshowRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/qshow";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PatchQshowSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchQshowResponse =
        new operations.PatchQshowResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Add a quote to a given Qshow.
   */
  postQshowQuotesAdd(
    req: operations.PostQshowQuotesAddRequest,
    security: operations.PostQshowQuotesAddSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostQshowQuotesAddResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostQshowQuotesAddRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/qshow/quotes/add";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostQshowQuotesAddSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostQshowQuotesAddResponse =
        new operations.PostQshowQuotesAddResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Remove a quote to a given Qshow.
   */
  postQshowQuotesRemove(
    req: operations.PostQshowQuotesRemoveRequest,
    security: operations.PostQshowQuotesRemoveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostQshowQuotesRemoveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostQshowQuotesRemoveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/qshow/quotes/remove";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostQshowQuotesRemoveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostQshowQuotesRemoveResponse =
        new operations.PostQshowQuotesRemoveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create and add a new qshow to your private collection.
   */
  putQshow(
    req: operations.PutQshowRequest,
    security: operations.PutQshowSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutQshowResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutQshowRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/qshow";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PutQshowSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutQshowResponse = new operations.PutQshowResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
