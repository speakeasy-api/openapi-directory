"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlayStat:
    
    assisted_tackles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssistedTackles'), 'exclude': lambda f: f is None }})  
    blocked_kick_returns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockedKickReturns'), 'exclude': lambda f: f is None }})  
    blocked_kick_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockedKickReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    blocked_kick_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockedKickReturnYards'), 'exclude': lambda f: f is None }})  
    blocked_kicks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockedKicks'), 'exclude': lambda f: f is None }})  
    created: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Created'), 'exclude': lambda f: f is None }})  
    direction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Direction'), 'exclude': lambda f: f is None }})  
    extra_points_attempted: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraPointsAttempted'), 'exclude': lambda f: f is None }})  
    extra_points_had_blocked: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraPointsHadBlocked'), 'exclude': lambda f: f is None }})  
    extra_points_made: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraPointsMade'), 'exclude': lambda f: f is None }})  
    field_goal_returns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalReturns'), 'exclude': lambda f: f is None }})  
    field_goal_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    field_goal_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalReturnYards'), 'exclude': lambda f: f is None }})  
    field_goals_attempted: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalsAttempted'), 'exclude': lambda f: f is None }})  
    field_goals_had_blocked: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalsHadBlocked'), 'exclude': lambda f: f is None }})  
    field_goals_made: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalsMade'), 'exclude': lambda f: f is None }})  
    field_goals_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FieldGoalsYards'), 'exclude': lambda f: f is None }})  
    fumble_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumbleReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    fumble_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumbleReturnYards'), 'exclude': lambda f: f is None }})  
    fumbles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Fumbles'), 'exclude': lambda f: f is None }})  
    fumbles_forced: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumblesForced'), 'exclude': lambda f: f is None }})  
    fumbles_lost: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumblesLost'), 'exclude': lambda f: f is None }})  
    fumbles_recovered: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FumblesRecovered'), 'exclude': lambda f: f is None }})  
    home_or_away: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeOrAway'), 'exclude': lambda f: f is None }})  
    interception_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InterceptionReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    interception_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InterceptionReturnYards'), 'exclude': lambda f: f is None }})  
    interceptions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Interceptions'), 'exclude': lambda f: f is None }})  
    kickoffs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Kickoffs'), 'exclude': lambda f: f is None }})  
    kickoff_touchbacks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickoffTouchbacks'), 'exclude': lambda f: f is None }})  
    kickoff_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickoffYards'), 'exclude': lambda f: f is None }})  
    kick_returns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturns'), 'exclude': lambda f: f is None }})  
    kick_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    kick_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KickReturnYards'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    opponent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Opponent'), 'exclude': lambda f: f is None }})  
    passes_defended: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassesDefended'), 'exclude': lambda f: f is None }})  
    passing_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingAttempts'), 'exclude': lambda f: f is None }})  
    passing_completions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingCompletions'), 'exclude': lambda f: f is None }})  
    passing_interceptions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingInterceptions'), 'exclude': lambda f: f is None }})  
    passing_sacks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingSacks'), 'exclude': lambda f: f is None }})  
    passing_sack_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingSackYards'), 'exclude': lambda f: f is None }})  
    passing_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingTouchdowns'), 'exclude': lambda f: f is None }})  
    passing_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PassingYards'), 'exclude': lambda f: f is None }})  
    penalties: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Penalties'), 'exclude': lambda f: f is None }})  
    penalty_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PenaltyYards'), 'exclude': lambda f: f is None }})  
    player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayerID'), 'exclude': lambda f: f is None }})  
    play_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayID'), 'exclude': lambda f: f is None }})  
    play_stat_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayStatID'), 'exclude': lambda f: f is None }})  
    punt_returns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturns'), 'exclude': lambda f: f is None }})  
    punt_return_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturnTouchdowns'), 'exclude': lambda f: f is None }})  
    punt_return_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntReturnYards'), 'exclude': lambda f: f is None }})  
    punts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Punts'), 'exclude': lambda f: f is None }})  
    punts_had_blocked: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntsHadBlocked'), 'exclude': lambda f: f is None }})  
    punt_touchbacks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntTouchbacks'), 'exclude': lambda f: f is None }})  
    punt_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PuntYards'), 'exclude': lambda f: f is None }})  
    receiving_targets: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReceivingTargets'), 'exclude': lambda f: f is None }})  
    receiving_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReceivingTouchdowns'), 'exclude': lambda f: f is None }})  
    receiving_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReceivingYards'), 'exclude': lambda f: f is None }})  
    receptions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Receptions'), 'exclude': lambda f: f is None }})  
    rushing_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RushingAttempts'), 'exclude': lambda f: f is None }})  
    rushing_touchdowns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RushingTouchdowns'), 'exclude': lambda f: f is None }})  
    rushing_yards: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RushingYards'), 'exclude': lambda f: f is None }})  
    sacks: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Sacks'), 'exclude': lambda f: f is None }})  
    sack_yards: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SackYards'), 'exclude': lambda f: f is None }})  
    safeties: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Safeties'), 'exclude': lambda f: f is None }})  
    sequence: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Sequence'), 'exclude': lambda f: f is None }})  
    solo_tackles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SoloTackles'), 'exclude': lambda f: f is None }})  
    tackles_for_loss: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TacklesForLoss'), 'exclude': lambda f: f is None }})  
    team: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Team'), 'exclude': lambda f: f is None }})  
    two_point_conversion_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TwoPointConversionAttempts'), 'exclude': lambda f: f is None }})  
    two_point_conversion_passes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TwoPointConversionPasses'), 'exclude': lambda f: f is None }})  
    two_point_conversion_receptions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TwoPointConversionReceptions'), 'exclude': lambda f: f is None }})  
    two_point_conversion_returns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TwoPointConversionReturns'), 'exclude': lambda f: f is None }})  
    two_point_conversion_runs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TwoPointConversionRuns'), 'exclude': lambda f: f is None }})  
    updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Updated'), 'exclude': lambda f: f is None }})  
    