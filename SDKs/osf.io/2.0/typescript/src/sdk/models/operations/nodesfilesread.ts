/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class NodesFilesReadRequest extends SpeakeasyBase {
  /**
   * The unique identifier of the node.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=node_id",
  })
  nodeId: string;

  /**
   * The unique identifier of the file path.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=path",
  })
  path: string;

  /**
   * The unique identifier of the storage provider.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=provider",
  })
  provider: string;
}

/**
 * The properties of the file entity.
 */
export class NodesFilesReadFileAttributes extends SpeakeasyBase {
  /**
   * SOON TO BE DEPRECATED, see relationships checkout.
   */
  @SpeakeasyMetadata()
  checkout?: string;

  /**
   * Whether or not the current user is allowed to post comments.
   */
  @SpeakeasyMetadata()
  currentUserCanComment?: boolean;

  /**
   * Version number of the file.
   */
  @SpeakeasyMetadata()
  currentVersion?: number;

  /**
   * The time at which the file was created, as an iso8601 formatted timestamp.
   */
  @SpeakeasyMetadata()
  dateCreated?: Date;

  /**
   * The time at which the file was last modified, as an iso8601 formatted timestamp.
   */
  @SpeakeasyMetadata()
  dateModified?: Date;

  /**
   * Whether or not deletion of the file is allowed.
   */
  @SpeakeasyMetadata()
  deleteAllowed?: boolean;

  /**
   * Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count.
   */
  @SpeakeasyMetadata()
  extra?: Record<string, any>;

  /**
   * Global unique identifier (GUID) for this file (if one has been assigned).
   */
  @SpeakeasyMetadata()
  guid?: string;

  /**
   * The kind of files object it is (`file` or `folder`).
   */
  @SpeakeasyMetadata()
  kind?: string;

  /**
   * The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files).
   */
  @SpeakeasyMetadata()
  lastTouched?: Date;

  /**
   * Unix-style path to the file relative to the provider root.
   */
  @SpeakeasyMetadata()
  materializedPath?: string;

  /**
   * Name of the file
   */
  @SpeakeasyMetadata()
  name?: string;

  /**
   * The unique identifier for this file entity for this project and storage provider.
   */
  @SpeakeasyMetadata()
  path?: string;

  /**
   * The id of the file provider (e.g., `osfstorage`)
   */
  @SpeakeasyMetadata()
  provider?: string;

  /**
   * Size of the file in bytes.
   */
  @SpeakeasyMetadata()
  size?: number;

  /**
   * A list of strings that describe this file, as entered by project contributors.
   */
  @SpeakeasyMetadata()
  tags?: string[];
}

/**
 * Links to alternative representations of the file entity.
 */
export class NodesFilesReadFileLinks extends SpeakeasyBase {
  /**
   * The Waterbutler API route for file deletions.
   */
  @SpeakeasyMetadata()
  delete?: string;

  /**
   * The Waterbutler API route for file downloads.
   */
  @SpeakeasyMetadata()
  download?: string;

  /**
   * A link to the page to view a file's information or a folder's contents.
   */
  @SpeakeasyMetadata()
  info?: string;

  /**
   * The Waterbutler API route for file moves.
   */
  @SpeakeasyMetadata()
  move?: string;

  /**
   * The Waterbutler API route for creating a new subfolder (does not exist for files).
   */
  @SpeakeasyMetadata()
  newFolder?: string;

  /**
   * A link to the detail page for the file.
   */
  @SpeakeasyMetadata()
  self?: string;

  /**
   * The Waterbutler API route for file uploads.
   */
  @SpeakeasyMetadata()
  upload?: string;
}

/**
 * Links to other entities or entity collections that have a relationship to the file entity.
 */
export class NodesFilesReadFileRelationships extends SpeakeasyBase {
  /**
   * A link to the user who checked out the file.
   */
  @SpeakeasyMetadata()
  checkout?: string;

  /**
   * A link to the comments on the file.
   */
  @SpeakeasyMetadata()
  comments?: string;

  /**
   * A link to the node the file is on.
   */
  @SpeakeasyMetadata()
  node?: string;

  /**
   * A link to the versions of the file.
   */
  @SpeakeasyMetadata()
  versions?: string;
}

/**
 * OK
 */
export class NodesFilesReadFile extends SpeakeasyBase {
  /**
   * The properties of the file entity.
   */
  @SpeakeasyMetadata()
  attributes?: NodesFilesReadFileAttributes;

  /**
   * The identifier of the file entity.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * Links to alternative representations of the file entity.
   */
  @SpeakeasyMetadata()
  links?: NodesFilesReadFileLinks;

  /**
   * Links to other entities or entity collections that have a relationship to the file entity.
   */
  @SpeakeasyMetadata()
  relationships?: NodesFilesReadFileRelationships;

  /**
   * The type identifier of the file entity (`files`).
   */
  @SpeakeasyMetadata()
  type?: string;
}

export class NodesFilesReadResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
