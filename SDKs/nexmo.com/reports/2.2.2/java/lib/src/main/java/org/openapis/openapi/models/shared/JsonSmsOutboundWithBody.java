/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * JsonSmsOutboundWithBody - Outbound SMS
 */
public class JsonSmsOutboundWithBody {
    /**
     * The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    public String accountId;
    public JsonSmsOutboundWithBody withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * Search for messages with this `client_ref`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_ref")
    public String clientRef;
    public JsonSmsOutboundWithBody withClientRef(String clientRef) {
        this.clientRef = clientRef;
        return this;
    }
    
    /**
     * Whether the SMS was split up into multiple parts (due to its length).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("concatenated")
    public Boolean concatenated;
    public JsonSmsOutboundWithBody withConcatenated(Boolean concatenated) {
        this.concatenated = concatenated;
        return this;
    }
    
    /**
     * Country where the request was sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;
    public JsonSmsOutboundWithBody withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * Country name where the request was sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country_name")
    public String countryName;
    public JsonSmsOutboundWithBody withCountryName(String countryName) {
        this.countryName = countryName;
        return this;
    }
    
    /**
     * Currency of the price of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;
    public JsonSmsOutboundWithBody withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Date when the request was finalized.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("date_finalized")
    public LocalDate dateFinalized;
    public JsonSmsOutboundWithBody withDateFinalized(LocalDate dateFinalized) {
        this.dateFinalized = dateFinalized;
        return this;
    }
    
    /**
     * Date of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("date_received")
    public LocalDate dateReceived;
    public JsonSmsOutboundWithBody withDateReceived(LocalDate dateReceived) {
        this.dateReceived = dateReceived;
        return this;
    }
    
    /**
     * Direction of the communication, either `inbound` (received by our services), or `outbound` (originated from our services). Required for products `SMS` and `MESSAGES`. Optional for `VOICE-CALL`. Invalid for `IN-APP-VOICE`, `CONVERSATIONS`, `NUMBER-INSIGHT`, `VERIFY-API`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("direction")
    public DirectionEnum direction;
    public JsonSmsOutboundWithBody withDirection(DirectionEnum direction) {
        this.direction = direction;
        return this;
    }
    
    /**
     * Error code of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error_code")
    public String errorCode;
    public JsonSmsOutboundWithBody withErrorCode(String errorCode) {
        this.errorCode = errorCode;
        return this;
    }
    
    /**
     * Description of the error code of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error_code_description")
    public String errorCodeDescription;
    public JsonSmsOutboundWithBody withErrorCodeDescription(String errorCodeDescription) {
        this.errorCodeDescription = errorCodeDescription;
        return this;
    }
    
    /**
     * Request from this number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    public String from;
    public JsonSmsOutboundWithBody withFrom(String from) {
        this.from = from;
        return this;
    }
    
    /**
     * Latency of the request in ms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latency")
    public Long latency;
    public JsonSmsOutboundWithBody withLatency(Long latency) {
        this.latency = latency;
        return this;
    }
    
    /**
     * Body of the message sent. Only present if include_message parameter is set to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message_body")
    public String messageBody;
    public JsonSmsOutboundWithBody withMessageBody(String messageBody) {
        this.messageBody = messageBody;
        return this;
    }
    
    /**
     * Id of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message_id")
    public String messageId;
    public JsonSmsOutboundWithBody withMessageId(String messageId) {
        this.messageId = messageId;
        return this;
    }
    
    /**
     * Network used to send the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")
    public String network;
    public JsonSmsOutboundWithBody withNetwork(String network) {
        this.network = network;
        return this;
    }
    
    /**
     * Name of the network used to send the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network_name")
    public String networkName;
    public JsonSmsOutboundWithBody withNetworkName(String networkName) {
        this.networkName = networkName;
        return this;
    }
    
    /**
     * Search only for sms with the corresponding status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public SmsStatusEnum status;
    public JsonSmsOutboundWithBody withStatus(SmsStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Request to this number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("to")
    public String to;
    public JsonSmsOutboundWithBody withTo(String to) {
        this.to = to;
        return this;
    }
    
    /**
     * Price of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_price")
    public Double totalPrice;
    public JsonSmsOutboundWithBody withTotalPrice(Double totalPrice) {
        this.totalPrice = totalPrice;
        return this;
    }
    
}
