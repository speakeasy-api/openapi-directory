/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CommentReply } from "./commentreply";
import { User } from "./user";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The context of the file which is being commented on.
 */
export class CommentContext extends SpeakeasyBase {
  /**
   * The MIME type of the context snippet.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  /**
   * Data representation of the segment of the file being commented on. In the case of a text file for example, this would be the actual text that the comment is about.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * A comment on a file in Google Drive.
 */
export class Comment extends SpeakeasyBase {
  /**
   * A region of the document represented as a JSON string. For details on defining anchor properties, refer to  Add comments and replies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "anchor" })
  anchor?: string;

  /**
   * Information about a Drive user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "author" })
  @Type(() => User)
  author?: User;

  /**
   * The ID of the comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commentId" })
  commentId?: string;

  /**
   * The plain text content used to create this comment. This is not HTML safe and should only be used as a starting point to make edits to a comment's content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  content?: string;

  /**
   * The context of the file which is being commented on.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "context" })
  @Type(() => CommentContext)
  context?: CommentContext;

  /**
   * The date when this comment was first created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdDate?: Date;

  /**
   * Whether this comment has been deleted. If a comment has been deleted the content will be cleared and this will only represent a comment that once existed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleted" })
  deleted?: boolean;

  /**
   * The file which this comment is addressing.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileId" })
  fileId?: string;

  /**
   * The title of the file which this comment is addressing.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileTitle" })
  fileTitle?: string;

  /**
   * HTML formatted content for this comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "htmlContent" })
  htmlContent?: string;

  /**
   * This is always drive#comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * The date when this comment or any of its replies were last modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modifiedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  modifiedDate?: Date;

  /**
   * Replies to this post.
   */
  @SpeakeasyMetadata({ elemType: CommentReply })
  @Expose({ name: "replies" })
  @Type(() => CommentReply)
  replies?: CommentReply[];

  /**
   * A link back to this comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfLink" })
  selfLink?: string;

  /**
   * The status of this comment. Status can be changed by posting a reply to a comment with the desired status.
   *
   * @remarks
   * - "open" - The comment is still open.
   * - "resolved" - The comment has been resolved by one of its replies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;
}
