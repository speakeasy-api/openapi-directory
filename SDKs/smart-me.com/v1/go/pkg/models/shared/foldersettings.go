// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FolderSettingsFolderTypeEnum - The Type of the folder
type FolderSettingsFolderTypeEnum string

const (
	FolderSettingsFolderTypeEnumFolder                      FolderSettingsFolderTypeEnum = "Folder"
	FolderSettingsFolderTypeEnumLocation                    FolderSettingsFolderTypeEnum = "Location"
	FolderSettingsFolderTypeEnumFactory                     FolderSettingsFolderTypeEnum = "Factory"
	FolderSettingsFolderTypeEnumHouse                       FolderSettingsFolderTypeEnum = "House"
	FolderSettingsFolderTypeEnumOffice                      FolderSettingsFolderTypeEnum = "Office"
	FolderSettingsFolderTypeEnumMachine                     FolderSettingsFolderTypeEnum = "Machine"
	FolderSettingsFolderTypeEnumVirtualMeter                FolderSettingsFolderTypeEnum = "VirtualMeter"
	FolderSettingsFolderTypeEnumElecticityFolder            FolderSettingsFolderTypeEnum = "ElecticityFolder"
	FolderSettingsFolderTypeEnumWaterFolder                 FolderSettingsFolderTypeEnum = "WaterFolder"
	FolderSettingsFolderTypeEnumHeatFolder                  FolderSettingsFolderTypeEnum = "HeatFolder"
	FolderSettingsFolderTypeEnumGasFolder                   FolderSettingsFolderTypeEnum = "GasFolder"
	FolderSettingsFolderTypeEnumTemperatureFolder           FolderSettingsFolderTypeEnum = "TemperatureFolder"
	FolderSettingsFolderTypeEnumSun                         FolderSettingsFolderTypeEnum = "Sun"
	FolderSettingsFolderTypeEnumLight                       FolderSettingsFolderTypeEnum = "Light"
	FolderSettingsFolderTypeEnumIce                         FolderSettingsFolderTypeEnum = "Ice"
	FolderSettingsFolderTypeEnumSofa                        FolderSettingsFolderTypeEnum = "Sofa"
	FolderSettingsFolderTypeEnumFood                        FolderSettingsFolderTypeEnum = "Food"
	FolderSettingsFolderTypeEnumCoffee                      FolderSettingsFolderTypeEnum = "Coffee"
	FolderSettingsFolderTypeEnumCar                         FolderSettingsFolderTypeEnum = "Car"
	FolderSettingsFolderTypeEnumChargingStation             FolderSettingsFolderTypeEnum = "ChargingStation"
	FolderSettingsFolderTypeEnumMeter                       FolderSettingsFolderTypeEnum = "Meter"
	FolderSettingsFolderTypeEnumUser                        FolderSettingsFolderTypeEnum = "User"
	FolderSettingsFolderTypeEnumTrash                       FolderSettingsFolderTypeEnum = "Trash"
	FolderSettingsFolderTypeEnumGridPhotovoltaicPowerSystem FolderSettingsFolderTypeEnum = "GridPhotovoltaicPowerSystem"
)

func (e FolderSettingsFolderTypeEnum) ToPointer() *FolderSettingsFolderTypeEnum {
	return &e
}

func (e *FolderSettingsFolderTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Folder":
		fallthrough
	case "Location":
		fallthrough
	case "Factory":
		fallthrough
	case "House":
		fallthrough
	case "Office":
		fallthrough
	case "Machine":
		fallthrough
	case "VirtualMeter":
		fallthrough
	case "ElecticityFolder":
		fallthrough
	case "WaterFolder":
		fallthrough
	case "HeatFolder":
		fallthrough
	case "GasFolder":
		fallthrough
	case "TemperatureFolder":
		fallthrough
	case "Sun":
		fallthrough
	case "Light":
		fallthrough
	case "Ice":
		fallthrough
	case "Sofa":
		fallthrough
	case "Food":
		fallthrough
	case "Coffee":
		fallthrough
	case "Car":
		fallthrough
	case "ChargingStation":
		fallthrough
	case "Meter":
		fallthrough
	case "User":
		fallthrough
	case "Trash":
		fallthrough
	case "GridPhotovoltaicPowerSystem":
		*e = FolderSettingsFolderTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FolderSettingsFolderTypeEnum: %v", v)
	}
}

// FolderSettings - Container for the folder settings
type FolderSettings struct {
	// The Description of the folder or meter
	Description *string `json:"Description,omitempty" form:"name=Description"`
	// Flag if the meter is enabled (folder not supported yet)
	Enable *bool `json:"Enable,omitempty" form:"name=Enable"`
	// The Type of the folder
	FolderType *FolderSettingsFolderTypeEnum `json:"FolderType,omitempty" form:"name=FolderType"`
	// The Name of the folder or meter
	Name *string `json:"Name,omitempty" form:"name=Name"`
	// The parent folder ID of this item
	ParentFolderID *string `json:"ParentFolderId,omitempty" form:"name=ParentFolderId"`
	// The serial number (meter only)
	SerialNumber *int64 `json:"SerialNumber,omitempty" form:"name=SerialNumber"`
	// Flag if the meter is usable for virtual billing meters (e.g. washroom)
	UseableForVirtualBillingMeters *bool `json:"UseableForVirtualBillingMeters,omitempty" form:"name=UseableForVirtualBillingMeters"`
	// The value correction on this meter
	ValueCorrection *float64 `json:"ValueCorrection,omitempty" form:"name=ValueCorrection"`
	// The value correction on all parent folders. but not on the meter itself
	ValueCorrectionParentFolder *float64 `json:"ValueCorrectionParentFolder,omitempty" form:"name=ValueCorrectionParentFolder"`
	// The name of the visualization of the folder
	VisualizationName *string `json:"VisualizationName,omitempty" form:"name=VisualizationName"`
}
