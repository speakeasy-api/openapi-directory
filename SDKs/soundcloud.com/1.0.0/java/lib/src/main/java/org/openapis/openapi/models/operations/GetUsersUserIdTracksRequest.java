/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetUsersUserIdTracksRequest {
    /**
     * Filters content by level of access the user (logged in or anonymous) has to the track. The result list will include only tracks with the specified access. Include all options if you'd like to see all possible tracks. See `Track#access` schema for more details.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=access")
    public org.openapis.openapi.models.shared.AccessEnum[] access;

    public GetUsersUserIdTracksRequest withAccess(org.openapis.openapi.models.shared.AccessEnum[] access) {
        this.access = access;
        return this;
    }
    
    /**
     * Number of results to return in the collection.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Long limit;

    public GetUsersUserIdTracksRequest withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=linked_partitioning")
    public Boolean linkedPartitioning;

    public GetUsersUserIdTracksRequest withLinkedPartitioning(Boolean linkedPartitioning) {
        this.linkedPartitioning = linkedPartitioning;
        return this;
    }
    
    /**
     * SoundCloud User id
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")
    public Long userId;

    public GetUsersUserIdTracksRequest withUserId(Long userId) {
        this.userId = userId;
        return this;
    }
    
    public GetUsersUserIdTracksRequest(@JsonProperty("user_id") Long userId) {
        this.userId = userId;
  }
}
