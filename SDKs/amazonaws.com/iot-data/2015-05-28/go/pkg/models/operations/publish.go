// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PublishRequestBody struct {
	// <p>The message body. MQTT accepts text, binary, and empty (null) message payloads.</p> <p>Publishing an empty (null) payload with <b>retain</b> = <code>true</code> deletes the retained message identified by <b>topic</b> from Amazon Web Services IoT Core.</p>
	Payload *string `json:"payload,omitempty"`
}

// PublishXAmzMqtt5PayloadFormatIndicatorEnum - An <code>Enum</code> string value that indicates whether the payload is formatted as UTF-8. <code>payloadFormatIndicator</code> is an HTTP header value in the API.
type PublishXAmzMqtt5PayloadFormatIndicatorEnum string

const (
	PublishXAmzMqtt5PayloadFormatIndicatorEnumUnspecifiedBytes PublishXAmzMqtt5PayloadFormatIndicatorEnum = "UNSPECIFIED_BYTES"
	PublishXAmzMqtt5PayloadFormatIndicatorEnumUTF8Data         PublishXAmzMqtt5PayloadFormatIndicatorEnum = "UTF8_DATA"
)

func (e *PublishXAmzMqtt5PayloadFormatIndicatorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNSPECIFIED_BYTES":
		fallthrough
	case "UTF8_DATA":
		*e = PublishXAmzMqtt5PayloadFormatIndicatorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PublishXAmzMqtt5PayloadFormatIndicatorEnum: %s", s)
	}
}

type PublishRequest struct {
	RequestBody       PublishRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// A UTF-8 encoded string that describes the content of the publishing message.
	ContentType *string `queryParam:"style=form,explode=true,name=contentType"`
	// A user-defined integer value that represents the message expiry interval in seconds. If absent, the message doesn't expire. For more information about the limits of <code>messageExpiry</code>, see <a href="https://docs.aws.amazon.com/general/latest/gr/iot-core.html#message-broker-limits">Amazon Web Services IoT Core message broker and protocol limits and quotas </a> from the Amazon Web Services Reference Guide.
	MessageExpiry *int64 `queryParam:"style=form,explode=true,name=messageExpiry"`
	// The Quality of Service (QoS) level. The default QoS level is 0.
	Qos *int64 `queryParam:"style=form,explode=true,name=qos"`
	// A UTF-8 encoded string that's used as the topic name for a response message. The response topic is used to describe the topic which the receiver should publish to as part of the request-response flow. The topic must not contain wildcard characters.
	ResponseTopic *string `queryParam:"style=form,explode=true,name=responseTopic"`
	// <p>A Boolean value that determines whether to set the RETAIN flag when the message is published.</p> <p>Setting the RETAIN flag causes the message to be retained and sent to new subscribers to the topic.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default value: <code>false</code> </p>
	Retain *bool `queryParam:"style=form,explode=true,name=retain"`
	// The name of the MQTT topic.
	Topic string `pathParam:"style=simple,explode=false,name=topic"`
	// The base64-encoded binary data used by the sender of the request message to identify which request the response message is for when it's received. <code>correlationData</code> is an HTTP header value in the API.
	XAmzMqtt5CorrelationData *string `header:"style=simple,explode=false,name=x-amz-mqtt5-correlation-data"`
	// An <code>Enum</code> string value that indicates whether the payload is formatted as UTF-8. <code>payloadFormatIndicator</code> is an HTTP header value in the API.
	XAmzMqtt5PayloadFormatIndicator *PublishXAmzMqtt5PayloadFormatIndicatorEnum `header:"style=simple,explode=false,name=x-amz-mqtt5-payload-format-indicator"`
	// <p>A JSON string that contains an array of JSON objects. If you donâ€™t use Amazon Web Services SDK or CLI, you must encode the JSON string to base64 format before adding it to the HTTP header. <code>userProperties</code> is an HTTP header value in the API.</p> <p>The following example <code>userProperties</code> parameter is a JSON string which represents two User Properties. Note that it needs to be base64-encoded:</p> <p> <code>[{"deviceName": "alpha"}, {"deviceCnt": "45"}]</code> </p>
	XAmzMqtt5UserProperties *string `header:"style=simple,explode=false,name=x-amz-mqtt5-user-properties"`
}

type PublishResponse struct {
	ContentType string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// MethodNotAllowedException
	MethodNotAllowedException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// UnauthorizedException
	UnauthorizedException interface{}
}
