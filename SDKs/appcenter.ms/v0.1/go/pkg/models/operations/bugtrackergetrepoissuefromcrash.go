// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type BugTrackerGetRepoIssueFromCrashSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type BugTrackerGetRepoIssueFromCrashPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// CrashGroup Id
	CrashGroupID string `pathParam:"style=simple,explode=false,name=crash_group_id"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type BugTrackerGetRepoIssueFromCrashRequest struct {
	PathParams BugTrackerGetRepoIssueFromCrashPathParams
	Security   BugTrackerGetRepoIssueFromCrashSecurity
}

// BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONCodeEnum - The status code return by the API. It can be 400 or 404 or 409 or 500.
type BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONCodeEnum string

const (
	BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONCodeEnumFourHundred        BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONCodeEnum = "400"
	BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONCodeEnumFourHundredAndFour BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONCodeEnum = "404"
	BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONCodeEnumFourHundredAndNine BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONCodeEnum = "409"
	BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONCodeEnumFiveHundred        BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONCodeEnum = "500"
)

func (e *BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "400":
		fallthrough
	case "404":
		fallthrough
	case "409":
		fallthrough
	case "500":
		*e = BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONCodeEnum: %s", s)
	}
}

// BugTrackerGetRepoIssueFromCrashDefaultApplicationJSON - Generic result for any alerting API operation
type BugTrackerGetRepoIssueFromCrashDefaultApplicationJSON struct {
	// The status code return by the API. It can be 400 or 404 or 409 or 500.
	Code BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONCodeEnum `json:"code"`
	// The reason for the request failed
	Message *string `json:"message,omitempty"`
	// Unique request identifier for tracking
	RequestID string `json:"request_id"`
}

type BugTrackerGetRepoIssueFromCrash200ApplicationJSONBugTrackerTypeEnum string

const (
	BugTrackerGetRepoIssueFromCrash200ApplicationJSONBugTrackerTypeEnumGithub BugTrackerGetRepoIssueFromCrash200ApplicationJSONBugTrackerTypeEnum = "github"
	BugTrackerGetRepoIssueFromCrash200ApplicationJSONBugTrackerTypeEnumVsts   BugTrackerGetRepoIssueFromCrash200ApplicationJSONBugTrackerTypeEnum = "vsts"
	BugTrackerGetRepoIssueFromCrash200ApplicationJSONBugTrackerTypeEnumJira   BugTrackerGetRepoIssueFromCrash200ApplicationJSONBugTrackerTypeEnum = "jira"
)

func (e *BugTrackerGetRepoIssueFromCrash200ApplicationJSONBugTrackerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "github":
		fallthrough
	case "vsts":
		fallthrough
	case "jira":
		*e = BugTrackerGetRepoIssueFromCrash200ApplicationJSONBugTrackerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BugTrackerGetRepoIssueFromCrash200ApplicationJSONBugTrackerTypeEnum: %s", s)
	}
}

// BugTrackerGetRepoIssueFromCrash200ApplicationJSON - Object returned in response to getting a bug tracker issue related to a crash group id
type BugTrackerGetRepoIssueFromCrash200ApplicationJSON struct {
	BugTrackerType *BugTrackerGetRepoIssueFromCrash200ApplicationJSONBugTrackerTypeEnum `json:"bug_tracker_type,omitempty"`
	EventType      *string                                                              `json:"event_type,omitempty"`
	ID             *string                                                              `json:"id,omitempty"`
	MobileCenterID *string                                                              `json:"mobile_center_id,omitempty"`
	RepoName       *string                                                              `json:"repo_name,omitempty"`
	Title          *string                                                              `json:"title,omitempty"`
	URL            *string                                                              `json:"url,omitempty"`
}

type BugTrackerGetRepoIssueFromCrashResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	BugTrackerGetRepoIssueFromCrash200ApplicationJSONObject *BugTrackerGetRepoIssueFromCrash200ApplicationJSON
	// Error code with reason
	BugTrackerGetRepoIssueFromCrashDefaultApplicationJSONObject *BugTrackerGetRepoIssueFromCrashDefaultApplicationJSON
}
