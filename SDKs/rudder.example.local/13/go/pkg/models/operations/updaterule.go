// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateRulePathParams struct {
	// Id of the target rule
	RuleID string `pathParam:"style=simple,explode=false,name=ruleId"`
}

type UpdateRuleRequest struct {
	PathParams UpdateRulePathParams
	Request    shared.RuleWithCategory `request:"mediaType=application/json"`
}

// UpdateRule200ApplicationJSONActionEnum - The id of the action
type UpdateRule200ApplicationJSONActionEnum string

const (
	UpdateRule200ApplicationJSONActionEnumUpdateRule UpdateRule200ApplicationJSONActionEnum = "updateRule"
)

func (e *UpdateRule200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "updateRule":
		*e = UpdateRule200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateRule200ApplicationJSONActionEnum: %s", s)
	}
}

type UpdateRule200ApplicationJSONData struct {
	Rules []shared.RuleWithCategory `json:"rules"`
}

// UpdateRule200ApplicationJSONResultEnum - Result of the request
type UpdateRule200ApplicationJSONResultEnum string

const (
	UpdateRule200ApplicationJSONResultEnumSuccess UpdateRule200ApplicationJSONResultEnum = "success"
	UpdateRule200ApplicationJSONResultEnumError   UpdateRule200ApplicationJSONResultEnum = "error"
)

func (e *UpdateRule200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = UpdateRule200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateRule200ApplicationJSONResultEnum: %s", s)
	}
}

// UpdateRule200ApplicationJSON - Rules information
type UpdateRule200ApplicationJSON struct {
	// The id of the action
	Action UpdateRule200ApplicationJSONActionEnum `json:"action"`
	Data   UpdateRule200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result UpdateRule200ApplicationJSONResultEnum `json:"result"`
}

type UpdateRuleResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Rules information
	UpdateRule200ApplicationJSONObject *UpdateRule200ApplicationJSON
}
