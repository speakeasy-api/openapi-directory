<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AllFunctions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * findInteractionsFind interactions defined in WikiPathways pathways.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFindInteractionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFindInteractionsResponse
     */
	public function getFindInteractions(
        \OpenAPI\OpenAPI\Models\Operations\GetFindInteractionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFindInteractionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/findInteractions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFindInteractionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFindInteractionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * findPathwaysByLiterature
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByLiteratureRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByLiteratureResponse
     */
	public function getFindPathwaysByLiterature(
        \OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByLiteratureRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByLiteratureResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/findPathwaysByLiterature');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByLiteratureRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByLiteratureResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * findPathwaysByText
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByTextRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByTextResponse
     */
	public function getFindPathwaysByText(
        \OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByTextRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByTextResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/findPathwaysByText');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByTextRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByTextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * findPathwaysByXref
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByXrefRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByXrefResponse
     */
	public function getFindPathwaysByXref(
        \OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByXrefRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByXrefResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/findPathwaysByXref');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByXrefRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFindPathwaysByXrefResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * getColoredPathwayGet a colored image version of the pathway.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetColoredPathwayRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetColoredPathwayResponse
     */
	public function getGetColoredPathway(
        \OpenAPI\OpenAPI\Models\Operations\GetGetColoredPathwayRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetColoredPathwayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getColoredPathway');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetColoredPathwayRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetColoredPathwayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * getCurationTagHistory
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagHistoryResponse
     */
	public function getGetCurationTagHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getCurationTagHistory');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * getCurationTagsGet all curation tags for the given tag name. Use this method if you want to find all pathways that are tagged with a specific curation tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagsResponse
     */
	public function getGetCurationTags(
        \OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getCurationTags');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * getCurationTagsByNameGet all curation tags for the given tag name. Use this method if you want to find all pathways that are tagged with a specific curation tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagsByNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagsByNameResponse
     */
	public function getGetCurationTagsByName(
        \OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagsByNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagsByNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getCurationTagsByName');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagsByNameRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetCurationTagsByNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * getOntologyTermsByPathway
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetOntologyTermsByPathwayRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetOntologyTermsByPathwayResponse
     */
	public function getGetOntologyTermsByPathway(
        \OpenAPI\OpenAPI\Models\Operations\GetGetOntologyTermsByPathwayRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetOntologyTermsByPathwayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getOntologyTermsByPathway');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetOntologyTermsByPathwayRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetOntologyTermsByPathwayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * getPathway
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayResponse
     */
	public function getGetPathway(
        \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getPathway');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetPathwayRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * getPathwayAsDownload a pathway in the specified file format.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayAsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayAsResponse
     */
	public function getGetPathwayAs(
        \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayAsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayAsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getPathwayAs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetPathwayAsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayAsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * getPathwayHistoryGet the revision history of a pathway.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayHistoryResponse
     */
	public function getGetPathwayHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getPathwayHistory');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetPathwayHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * getPathwayInfoGet some general info about the pathway, such as the name, species, without downloading the GPML.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayInfoResponse
     */
	public function getGetPathwayInfo(
        \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getPathwayInfo');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetPathwayInfoRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetPathwayInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * getPathwaysByOntologyTerm
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetPathwaysByOntologyTermRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetPathwaysByOntologyTermResponse
     */
	public function getGetPathwaysByOntologyTerm(
        \OpenAPI\OpenAPI\Models\Operations\GetGetPathwaysByOntologyTermRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetPathwaysByOntologyTermResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getPathwaysByOntologyTerm');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetPathwaysByOntologyTermRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetPathwaysByOntologyTermResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * getPathwaysByParentOntologyTerm
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetPathwaysByParentOntologyTermRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetPathwaysByParentOntologyTermResponse
     */
	public function getGetPathwaysByParentOntologyTerm(
        \OpenAPI\OpenAPI\Models\Operations\GetGetPathwaysByParentOntologyTermRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetPathwaysByParentOntologyTermResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getPathwaysByParentOntologyTerm');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetPathwaysByParentOntologyTermRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetPathwaysByParentOntologyTermResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * getRecentChangesGet the recently changed pathways.<br>Note: the recent changes table only retains items for a limited time (2 months), so there is no guarantee that you will get all changes when the timestamp points to a date that is more than 2 months in the past.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetRecentChangesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetRecentChangesResponse
     */
	public function getGetRecentChanges(
        \OpenAPI\OpenAPI\Models\Operations\GetGetRecentChangesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetRecentChangesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getRecentChanges');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetRecentChangesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetRecentChangesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * getUserByOrcid
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetUserByOrcidRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetUserByOrcidResponse
     */
	public function getGetUserByOrcid(
        \OpenAPI\OpenAPI\Models\Operations\GetGetUserByOrcidRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetUserByOrcidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getUserByOrcid');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetUserByOrcidRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetUserByOrcidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * getXrefList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetXrefListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetXrefListResponse
     */
	public function getGetXrefList(
        \OpenAPI\OpenAPI\Models\Operations\GetGetXrefListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetXrefListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getXrefList');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetXrefListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetXrefListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * listOrganisms
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListOrganismsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListOrganismsResponse
     */
	public function getListOrganisms(
        \OpenAPI\OpenAPI\Models\Operations\GetListOrganismsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListOrganismsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listOrganisms');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListOrganismsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListOrganismsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * listPathways
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListPathwaysRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListPathwaysResponse
     */
	public function getListPathways(
        \OpenAPI\OpenAPI\Models\Operations\GetListPathwaysRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListPathwaysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listPathways');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListPathwaysRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListPathwaysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * loginStart a logged in session, using an existing WikiPathways account. This function will return an authentication code that can be used to excecute methods that need authentication (e.g. updatePathway).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLoginRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLoginResponse
     */
	public function getLogin(
        \OpenAPI\OpenAPI\Models\Operations\GetLoginRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLoginResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/login');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetLoginRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLoginResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * removeCurationTagRemove a curation tag from a pathway.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRemoveCurationTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRemoveCurationTagResponse
     */
	public function getRemoveCurationTag(
        \OpenAPI\OpenAPI\Models\Operations\GetRemoveCurationTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRemoveCurationTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/removeCurationTag');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRemoveCurationTagRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRemoveCurationTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * removeOntologyTag
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRemoveOntologyTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRemoveOntologyTagResponse
     */
	public function getRemoveOntologyTag(
        \OpenAPI\OpenAPI\Models\Operations\GetRemoveOntologyTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRemoveOntologyTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/removeOntologyTag');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRemoveOntologyTagRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRemoveOntologyTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * saveCurationTag
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSaveCurationTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSaveCurationTagResponse
     */
	public function getSaveCurationTag(
        \OpenAPI\OpenAPI\Models\Operations\GetSaveCurationTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSaveCurationTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/saveCurationTag');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSaveCurationTagRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSaveCurationTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * saveOntologyTag
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSaveOntologyTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSaveOntologyTagResponse
     */
	public function getSaveOntologyTag(
        \OpenAPI\OpenAPI\Models\Operations\GetSaveOntologyTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSaveOntologyTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/saveOntologyTag');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSaveOntologyTagRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSaveOntologyTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * updatePathwayUpdate a pathway on the wiki with the given GPML code.<br>Note: To create/modify pathways via the web service, you need to have an account with web service write permissions. Please contact us to request write access for the web service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUpdatePathwayRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUpdatePathwayResponse
     */
	public function getUpdatePathway(
        \OpenAPI\OpenAPI\Models\Operations\GetUpdatePathwayRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUpdatePathwayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/updatePathway');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUpdatePathwayRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUpdatePathwayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * createPathwayCreate a new pathway on the wiki with the given GPML code.<br>Note: To create/modify pathways via the web service, you need to have an account with web service write permissions. Please contact us to request write access for the web service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCreatePathwayRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCreatePathwayResponse
     */
	public function postCreatePathway(
        \OpenAPI\OpenAPI\Models\Operations\PostCreatePathwayRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCreatePathwayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/createPathway');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostCreatePathwayRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCreatePathwayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}