<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SDK
{
	public const SERVERS = [
		'http://azure-api.sportsdata.io/golf/v2',
		'https://azure-api.sportsdata.io/golf/v2',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Current Season
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonResponse
     */
	public function currentSeason(
        \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/CurrentSeason', \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CurrentSeasonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->season = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Season', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DFS Slates
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfsSlatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DfsSlatesResponse
     */
	public function dfsSlates(
        \OpenAPI\OpenAPI\Models\Operations\DfsSlatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DfsSlatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/DfsSlatesByTournament/{tournamentid}', \OpenAPI\OpenAPI\Models\Operations\DfsSlatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfsSlatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dfsSlates = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DfsSlate>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Injuries
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InjuriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InjuriesResponse
     */
	public function injuries(
        \OpenAPI\OpenAPI\Models\Operations\InjuriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InjuriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Injuries', \OpenAPI\OpenAPI\Models\Operations\InjuriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InjuriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->injuries = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Injury>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Injuries (Historical)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InjuriesHistoricalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InjuriesHistoricalResponse
     */
	public function injuriesHistorical(
        \OpenAPI\OpenAPI\Models\Operations\InjuriesHistoricalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InjuriesHistoricalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/InjuriesByHistorical', \OpenAPI\OpenAPI\Models\Operations\InjuriesHistoricalRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InjuriesHistoricalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->injuries = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Injury>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Leaderboard
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LeaderboardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LeaderboardResponse
     */
	public function leaderboard(
        \OpenAPI\OpenAPI\Models\Operations\LeaderboardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LeaderboardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Leaderboard/{tournamentid}', \OpenAPI\OpenAPI\Models\Operations\LeaderboardRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LeaderboardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->leaderboard = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Leaderboard', 'json');
            }
        }

        return $response;
    }
	
    /**
     * News
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NewsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NewsResponse
     */
	public function news(
        \OpenAPI\OpenAPI\Models\Operations\NewsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NewsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/News', \OpenAPI\OpenAPI\Models\Operations\NewsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NewsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->news = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\News>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * News by Date
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NewsByDateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NewsByDateResponse
     */
	public function newsByDate(
        \OpenAPI\OpenAPI\Models\Operations\NewsByDateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NewsByDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/NewsByDate/{date}', \OpenAPI\OpenAPI\Models\Operations\NewsByDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NewsByDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->news = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\News>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * News by Player
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerResponse
     */
	public function newsByPlayer(
        \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/NewsByPlayerID/{playerid}', \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->news = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\News>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerResponse
     */
	public function player(
        \OpenAPI\OpenAPI\Models\Operations\PlayerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Player/{playerid}', \OpenAPI\OpenAPI\Models\Operations\PlayerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->player = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Player', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Season Stats (w/ World Golf Rankings)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsWWorldGolfRankingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsWWorldGolfRankingsResponse
     */
	public function playerSeasonStatsWWorldGolfRankings(
        \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsWWorldGolfRankingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsWWorldGolfRankingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerSeasonStats/{season}', \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsWWorldGolfRankingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerSeasonStatsWWorldGolfRankingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerSeasons = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerSeason>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Tournament Projected Stats (w/ DraftKings Salaries)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerTournamentProjectedStatsWDraftkingsSalariesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerTournamentProjectedStatsWDraftkingsSalariesResponse
     */
	public function playerTournamentProjectedStatsWDraftkingsSalaries(
        \OpenAPI\OpenAPI\Models\Operations\PlayerTournamentProjectedStatsWDraftkingsSalariesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerTournamentProjectedStatsWDraftkingsSalariesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerTournamentProjectionStats/{tournamentid}', \OpenAPI\OpenAPI\Models\Operations\PlayerTournamentProjectedStatsWDraftkingsSalariesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerTournamentProjectedStatsWDraftkingsSalariesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerTournamentProjections = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerTournamentProjection>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Tournament Stats By Player
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerTournamentStatsByPlayerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerTournamentStatsByPlayerResponse
     */
	public function playerTournamentStatsByPlayer(
        \OpenAPI\OpenAPI\Models\Operations\PlayerTournamentStatsByPlayerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerTournamentStatsByPlayerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerTournamentStatsByPlayer/{tournamentid}/{playerid}', \OpenAPI\OpenAPI\Models\Operations\PlayerTournamentStatsByPlayerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerTournamentStatsByPlayerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerTournament = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlayerTournament', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Players
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayersResponse
     */
	public function players(
        \OpenAPI\OpenAPI\Models\Operations\PlayersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Players', \OpenAPI\OpenAPI\Models\Operations\PlayersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Schedule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ScheduleResponse
     */
	public function schedule(
        \OpenAPI\OpenAPI\Models\Operations\ScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Tournaments', \OpenAPI\OpenAPI\Models\Operations\ScheduleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tournaments = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Tournament>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Schedule by Season
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScheduleBySeasonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ScheduleBySeasonResponse
     */
	public function scheduleBySeason(
        \OpenAPI\OpenAPI\Models\Operations\ScheduleBySeasonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ScheduleBySeasonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Tournaments/{season}', \OpenAPI\OpenAPI\Models\Operations\ScheduleBySeasonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScheduleBySeasonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tournaments = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Tournament>', 'json');
            }
        }

        return $response;
    }
}