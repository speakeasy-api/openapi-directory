/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * EventSubscription - Webhooks are event notifications we send to you by HTTPS POST requests. Event Subscriptions are how you configure your application to listen for them. You can create an Event Subscription through your [developer dashboard](https://dashboard.increase.com/developers/webhooks) or the API. For more information, see our [webhooks guide](https://increase.com/documentation/webhooks).
 */
public class EventSubscription {
    /**
     * The time the event subscription was created.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public EventSubscription withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The event subscription identifier.
     */
    @JsonProperty("id")
    public String id;
    public EventSubscription withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * If specified, this subscription will only receive webhooks for Events with the specified `category`.
     */
    @JsonProperty("selected_event_category")
    public EventSubscriptionSelectedEventCategoryEnum selectedEventCategory;
    public EventSubscription withSelectedEventCategory(EventSubscriptionSelectedEventCategoryEnum selectedEventCategory) {
        this.selectedEventCategory = selectedEventCategory;
        return this;
    }
    
    /**
     * The key that will be used to sign webhooks.
     */
    @JsonProperty("shared_secret")
    public String sharedSecret;
    public EventSubscription withSharedSecret(String sharedSecret) {
        this.sharedSecret = sharedSecret;
        return this;
    }
    
    /**
     * This indicates if we'll send notifications to this subscription.
     */
    @JsonProperty("status")
    public EventSubscriptionStatusEnum status;
    public EventSubscription withStatus(EventSubscriptionStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * A constant representing the object's type. For this resource it will always be `event_subscription`.
     */
    @JsonProperty("type")
    public EventSubscriptionTypeEnum type;
    public EventSubscription withType(EventSubscriptionTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The webhook url where we'll send notifications.
     */
    @JsonProperty("url")
    public String url;
    public EventSubscription withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
