"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var advertisers_1 = require("./advertisers");
var combinedaudiences_1 = require("./combinedaudiences");
var custombiddingalgorithms_1 = require("./custombiddingalgorithms");
var customlists_1 = require("./customlists");
var firstandthirdpartyaudiences_1 = require("./firstandthirdpartyaudiences");
var floodlightgroups_1 = require("./floodlightgroups");
var googleaudiences_1 = require("./googleaudiences");
var guaranteedorders_1 = require("./guaranteedorders");
var inventorysourcegroups_1 = require("./inventorysourcegroups");
var inventorysources_1 = require("./inventorysources");
var media_1 = require("./media");
var partners_1 = require("./partners");
var sdfdownloadtasks_1 = require("./sdfdownloadtasks");
var targetingtypes_1 = require("./targetingtypes");
var users_1 = require("./users");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://displayvideo.googleapis.com/"];
/**
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * @see {@link https://developers.google.com/display-video/}
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.advertisers = new advertisers_1.Advertisers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.combinedAudiences = new combinedaudiences_1.CombinedAudiences(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customBiddingAlgorithms = new custombiddingalgorithms_1.CustomBiddingAlgorithms(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customLists = new customlists_1.CustomLists(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.firstAndThirdPartyAudiences = new firstandthirdpartyaudiences_1.FirstAndThirdPartyAudiences(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.floodlightGroups = new floodlightgroups_1.FloodlightGroups(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.googleAudiences = new googleaudiences_1.GoogleAudiences(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.guaranteedOrders = new guaranteedorders_1.GuaranteedOrders(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.inventorySourceGroups = new inventorysourcegroups_1.InventorySourceGroups(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.inventorySources = new inventorysources_1.InventorySources(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.media = new media_1.Media(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.partners = new partners_1.Partners(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.sdfdownloadtasks = new sdfdownloadtasks_1.Sdfdownloadtasks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.targetingTypes = new targetingtypes_1.TargetingTypes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.users = new users_1.Users(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
