/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class CreateChatTokenRequestBody extends SpeakeasyBase {
  /**
   * Application-provided attributes to encode into the token and attach to a chat session. Map keys and values can contain UTF-8 encoded text. The maximum length of this field is 1 KB total.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  attributes?: Record<string, string>;

  /**
   * Set of capabilities that the user is allowed to perform in the room. Default: None (the capability to view messages is implicitly included in all requests).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "capabilities" })
  capabilities?: shared.ChatTokenCapabilityEnum[];

  /**
   * Identifier of the room that the client is trying to access. Currently this must be an ARN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roomIdentifier" })
  roomIdentifier: string;

  /**
   * Session duration (in minutes), after which the session expires. Default: 60 (1 hour).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sessionDurationInMinutes" })
  sessionDurationInMinutes?: number;

  /**
   * Application-provided ID that uniquely identifies the user associated with this token. This can be any UTF-8 encoded text.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userId" })
  userId: string;
}

export class CreateChatTokenRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateChatTokenRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateChatTokenResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createChatTokenResponse?: shared.CreateChatTokenResponse;

  /**
   * PendingVerification
   */
  @SpeakeasyMetadata()
  pendingVerification?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
