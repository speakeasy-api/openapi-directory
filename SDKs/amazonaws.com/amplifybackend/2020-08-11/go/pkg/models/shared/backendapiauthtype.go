// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BackendAPIAuthTypeModeEnum - Describes the authentication mode.
type BackendAPIAuthTypeModeEnum string

const (
	BackendAPIAuthTypeModeEnumAPIKey                 BackendAPIAuthTypeModeEnum = "API_KEY"
	BackendAPIAuthTypeModeEnumAwsIam                 BackendAPIAuthTypeModeEnum = "AWS_IAM"
	BackendAPIAuthTypeModeEnumAmazonCognitoUserPools BackendAPIAuthTypeModeEnum = "AMAZON_COGNITO_USER_POOLS"
	BackendAPIAuthTypeModeEnumOpenidConnect          BackendAPIAuthTypeModeEnum = "OPENID_CONNECT"
)

func (e *BackendAPIAuthTypeModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "API_KEY":
		fallthrough
	case "AWS_IAM":
		fallthrough
	case "AMAZON_COGNITO_USER_POOLS":
		fallthrough
	case "OPENID_CONNECT":
		*e = BackendAPIAuthTypeModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BackendAPIAuthTypeModeEnum: %s", s)
	}
}

// BackendAPIAuthTypeSettings - Describes settings for the authentication mode.
type BackendAPIAuthTypeSettings struct {
	CognitoUserPoolID  *string  `json:"CognitoUserPoolId,omitempty"`
	Description        *string  `json:"Description,omitempty"`
	ExpirationTime     *float64 `json:"ExpirationTime,omitempty"`
	OpenIDAuthTTL      *string  `json:"OpenIDAuthTTL,omitempty"`
	OpenIDClientID     *string  `json:"OpenIDClientId,omitempty"`
	OpenIDIatTTL       *string  `json:"OpenIDIatTTL,omitempty"`
	OpenIDIssueURL     *string  `json:"OpenIDIssueURL,omitempty"`
	OpenIDProviderName *string  `json:"OpenIDProviderName,omitempty"`
}

// BackendAPIAuthType - Describes the auth types for your configured data models.
type BackendAPIAuthType struct {
	Mode     *BackendAPIAuthTypeModeEnum `json:"Mode,omitempty"`
	Settings *BackendAPIAuthTypeSettings `json:"Settings,omitempty"`
}
