<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GETEnableLoggingRequest
{
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Action')]
    public GETEnableLoggingActionEnum $action;
    
    /**
     * <p>The name of an existing S3 bucket where the log files are to be stored.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the same region as the cluster</p> </li> <li> <p>The cluster must have read bucket and put object permissions</p> </li> </ul>
     * 
     * @var ?string $bucketName
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=BucketName')]
    public ?string $bucketName = null;
    
    /**
     * <p>The identifier of the cluster on which logging is to be started.</p> <p>Example: <code>examplecluster</code> </p>
     * 
     * @var string $clusterIdentifier
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=ClusterIdentifier')]
    public string $clusterIdentifier;
    
    /**
     * The log destination type. An enum with possible values of <code>s3</code> and <code>cloudwatch</code>.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GETEnableLoggingLogDestinationTypeEnum $logDestinationType
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=LogDestinationType')]
    public ?GETEnableLoggingLogDestinationTypeEnum $logDestinationType = null;
    
    /**
     * The collection of exported log types. Possible values are <code>connectionlog</code>, <code>useractivitylog</code>, and <code>userlog</code>.
     * 
     * @var ?array<string> $logExports
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=LogExports')]
    public ?array $logExports = null;
    
    /**
     * <p>The prefix applied to the log file names.</p> <p>Constraints:</p> <ul> <li> <p>Cannot exceed 512 characters</p> </li> <li> <p>Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are: </p> <ul> <li> <p>x00 to x20</p> </li> <li> <p>x22</p> </li> <li> <p>x27</p> </li> <li> <p>x5c</p> </li> <li> <p>x7f or larger</p> </li> </ul> </li> </ul>
     * 
     * @var ?string $s3KeyPrefix
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=S3KeyPrefix')]
    public ?string $s3KeyPrefix = null;
    
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Version')]
    public GETEnableLoggingVersionEnum $version;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Algorithm')]
    public ?string $xAmzAlgorithm = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Content-Sha256')]
    public ?string $xAmzContentSha256 = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Credential')]
    public ?string $xAmzCredential = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Date')]
    public ?string $xAmzDate = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Security-Token')]
    public ?string $xAmzSecurityToken = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Signature')]
    public ?string $xAmzSignature = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-SignedHeaders')]
    public ?string $xAmzSignedHeaders = null;
    
	public function __construct()
	{
		$this->action = \OpenAPI\OpenAPI\Models\Operations\GETEnableLoggingActionEnum::ENABLE_LOGGING;
		$this->bucketName = null;
		$this->clusterIdentifier = "";
		$this->logDestinationType = null;
		$this->logExports = null;
		$this->s3KeyPrefix = null;
		$this->version = \OpenAPI\OpenAPI\Models\Operations\GETEnableLoggingVersionEnum::TWO_THOUSAND_AND_TWELVE1201;
		$this->xAmzAlgorithm = null;
		$this->xAmzContentSha256 = null;
		$this->xAmzCredential = null;
		$this->xAmzDate = null;
		$this->xAmzSecurityToken = null;
		$this->xAmzSignature = null;
		$this->xAmzSignedHeaders = null;
	}
}
