// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type NrcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type NrcerRequestBodyCertificateParameters struct {
	// Application Number
	Aplno string `json:"aplno"`
	// Certificate Number
	Certno string `json:"certno"`
	// Security Code
	Sccd string `json:"sccd"`
}

// NrcerRequestBodyFormatEnum - The format of the certificate in response.
type NrcerRequestBodyFormatEnum string

const (
	NrcerRequestBodyFormatEnumPdf NrcerRequestBodyFormatEnum = "pdf"
)

func (e *NrcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = NrcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NrcerRequestBodyFormatEnum: %s", s)
	}
}

// NrcerRequestBody - Request format
type NrcerRequestBody struct {
	CertificateParameters *NrcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format NrcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Nrcer504ApplicationJSONErrorEnum string

const (
	Nrcer504ApplicationJSONErrorEnumGatewayTimeout Nrcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Nrcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Nrcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nrcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Nrcer504ApplicationJSONErrorDescriptionEnum string

const (
	Nrcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Nrcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Nrcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Nrcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nrcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nrcer504ApplicationJSON - Gateway timeout
type Nrcer504ApplicationJSON struct {
	Error            *Nrcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nrcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nrcer503ApplicationJSONErrorEnum string

const (
	Nrcer503ApplicationJSONErrorEnumServiceUnavailable Nrcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Nrcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Nrcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nrcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Nrcer503ApplicationJSONErrorDescriptionEnum string

const (
	Nrcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Nrcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Nrcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Nrcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nrcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nrcer503ApplicationJSON - Service unavailable
type Nrcer503ApplicationJSON struct {
	Error            *Nrcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nrcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nrcer502ApplicationJSONErrorEnum string

const (
	Nrcer502ApplicationJSONErrorEnumBadGatewy Nrcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Nrcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Nrcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nrcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Nrcer502ApplicationJSONErrorDescriptionEnum string

const (
	Nrcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Nrcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Nrcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Nrcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nrcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nrcer502ApplicationJSON - Bad gateway
type Nrcer502ApplicationJSON struct {
	Error            *Nrcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nrcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nrcer500ApplicationJSONErrorEnum string

const (
	Nrcer500ApplicationJSONErrorEnumInternalServerError Nrcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Nrcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Nrcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nrcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Nrcer500ApplicationJSONErrorDescriptionEnum string

const (
	Nrcer500ApplicationJSONErrorDescriptionEnumInternalServerError Nrcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Nrcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Nrcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nrcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nrcer500ApplicationJSON - Internal server error
type Nrcer500ApplicationJSON struct {
	Error            *Nrcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nrcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nrcer404ApplicationJSONErrorEnum string

const (
	Nrcer404ApplicationJSONErrorEnumRecordNotFound Nrcer404ApplicationJSONErrorEnum = "record_not_found"
	Nrcer404ApplicationJSONErrorEnumURLNotFound    Nrcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Nrcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Nrcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nrcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Nrcer404ApplicationJSONErrorDescriptionEnum string

const (
	Nrcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Nrcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Nrcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Nrcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Nrcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Nrcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nrcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nrcer404ApplicationJSON - No record found
type Nrcer404ApplicationJSON struct {
	Error            *Nrcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nrcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nrcer401ApplicationJSONErrorEnum string

const (
	Nrcer401ApplicationJSONErrorEnumInvalidAuthentication Nrcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Nrcer401ApplicationJSONErrorEnumInvalidAuthorization  Nrcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Nrcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Nrcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nrcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Nrcer401ApplicationJSONErrorDescriptionEnum string

const (
	Nrcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Nrcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Nrcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Nrcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Nrcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Nrcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nrcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nrcer401ApplicationJSON - Unauthorized access
type Nrcer401ApplicationJSON struct {
	Error            *Nrcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nrcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nrcer400ApplicationJSONErrorEnum string

const (
	Nrcer400ApplicationJSONErrorEnumMissingParameter Nrcer400ApplicationJSONErrorEnum = "missing_parameter"
	Nrcer400ApplicationJSONErrorEnumInvalidParameter Nrcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Nrcer400ApplicationJSONErrorEnumInvalidFormat    Nrcer400ApplicationJSONErrorEnum = "invalid_format"
	Nrcer400ApplicationJSONErrorEnumInvalidTxnid     Nrcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Nrcer400ApplicationJSONErrorEnumInvalidConsentid Nrcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Nrcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Nrcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nrcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Nrcer400ApplicationJSONErrorDescriptionEnum string

const (
	Nrcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Nrcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Nrcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Nrcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Nrcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Nrcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Nrcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Nrcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Nrcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Nrcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Nrcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Nrcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Nrcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Nrcer400ApplicationJSON - Bad request
type Nrcer400ApplicationJSON struct {
	Error            *Nrcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nrcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type NrcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Nrcer400ApplicationJSONObject *Nrcer400ApplicationJSON
	// Unauthorized access
	Nrcer401ApplicationJSONObject *Nrcer401ApplicationJSON
	// No record found
	Nrcer404ApplicationJSONObject *Nrcer404ApplicationJSON
	// Internal server error
	Nrcer500ApplicationJSONObject *Nrcer500ApplicationJSON
	// Bad gateway
	Nrcer502ApplicationJSONObject *Nrcer502ApplicationJSON
	// Service unavailable
	Nrcer503ApplicationJSONObject *Nrcer503ApplicationJSON
	// Gateway timeout
	Nrcer504ApplicationJSONObject *Nrcer504ApplicationJSON
}
