"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import apprestrictionsschemachangeevent as shared_apprestrictionsschemachangeevent
from ..shared import appupdateevent as shared_appupdateevent
from ..shared import devicereportupdateevent as shared_devicereportupdateevent
from ..shared import installfailureevent as shared_installfailureevent
from ..shared import newdeviceevent as shared_newdeviceevent
from ..shared import newpermissionsevent as shared_newpermissionsevent
from ..shared import productapprovalevent as shared_productapprovalevent
from ..shared import productavailabilitychangeevent as shared_productavailabilitychangeevent
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NotificationNotificationTypeEnum(str, Enum):
    r"""Type of the notification."""
    UNKNOWN = 'unknown'
    TEST_NOTIFICATION = 'testNotification'
    PRODUCT_APPROVAL = 'productApproval'
    INSTALL_FAILURE = 'installFailure'
    APP_UPDATE = 'appUpdate'
    NEW_PERMISSIONS = 'newPermissions'
    APP_RESTRICIONS_SCHEMA_CHANGE = 'appRestricionsSchemaChange'
    PRODUCT_AVAILABILITY_CHANGE = 'productAvailabilityChange'
    NEW_DEVICE = 'newDevice'
    DEVICE_REPORT_UPDATE = 'deviceReportUpdate'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Notification:
    r"""A notification of one event relating to an enterprise."""
    
    app_restrictions_schema_change_event: Optional[shared_apprestrictionsschemachangeevent.AppRestrictionsSchemaChangeEvent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appRestrictionsSchemaChangeEvent'), 'exclude': lambda f: f is None }})
    r"""An event generated when a new app version is uploaded to Google Play and its app restrictions schema changed. To fetch the app restrictions schema for an app, use Products.getAppRestrictionsSchema on the EMM API."""  
    app_update_event: Optional[shared_appupdateevent.AppUpdateEvent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appUpdateEvent'), 'exclude': lambda f: f is None }})
    r"""An event generated when a new version of an app is uploaded to Google Play. Notifications are sent for new public versions only: alpha, beta, or canary versions do not generate this event. To fetch up-to-date version history for an app, use Products.Get on the EMM API."""  
    device_report_update_event: Optional[shared_devicereportupdateevent.DeviceReportUpdateEvent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceReportUpdateEvent'), 'exclude': lambda f: f is None }})
    r"""An event generated when an updated device report is available."""  
    enterprise_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enterpriseId'), 'exclude': lambda f: f is None }})
    r"""The ID of the enterprise for which the notification is sent. This will always be present."""  
    install_failure_event: Optional[shared_installfailureevent.InstallFailureEvent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installFailureEvent'), 'exclude': lambda f: f is None }})
    r"""An event generated when an app installation failed on a device"""  
    new_device_event: Optional[shared_newdeviceevent.NewDeviceEvent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newDeviceEvent'), 'exclude': lambda f: f is None }})
    r"""An event generated when a new device is ready to be managed."""  
    new_permissions_event: Optional[shared_newpermissionsevent.NewPermissionsEvent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newPermissionsEvent'), 'exclude': lambda f: f is None }})
    r"""An event generated when new permissions are added to an app."""  
    notification_type: Optional[NotificationNotificationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notificationType'), 'exclude': lambda f: f is None }})
    r"""Type of the notification."""  
    product_approval_event: Optional[shared_productapprovalevent.ProductApprovalEvent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productApprovalEvent'), 'exclude': lambda f: f is None }})
    r"""An event generated when a product's approval status is changed."""  
    product_availability_change_event: Optional[shared_productavailabilitychangeevent.ProductAvailabilityChangeEvent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productAvailabilityChangeEvent'), 'exclude': lambda f: f is None }})
    r"""An event generated whenever a product's availability changes."""  
    timestamp_millis: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestampMillis'), 'exclude': lambda f: f is None }})
    r"""The time when the notification was published in milliseconds since 1970-01-01T00:00:00Z. This will always be present."""  
    