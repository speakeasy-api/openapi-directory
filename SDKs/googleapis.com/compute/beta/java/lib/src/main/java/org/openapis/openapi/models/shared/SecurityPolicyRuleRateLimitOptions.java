/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class SecurityPolicyRuleRateLimitOptions {
    /**
     * Can only be specified if the action for the rule is "rate_based_ban". If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("banDurationSec")
    public Integer banDurationSec;
    public SecurityPolicyRuleRateLimitOptions withBanDurationSec(Integer banDurationSec) {
        this.banDurationSec = banDurationSec;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("banThreshold")
    public SecurityPolicyRuleRateLimitOptionsThreshold banThreshold;
    public SecurityPolicyRuleRateLimitOptions withBanThreshold(SecurityPolicyRuleRateLimitOptionsThreshold banThreshold) {
        this.banThreshold = banThreshold;
        return this;
    }
    
    /**
     * Action to take for requests that are under the configured rate limit threshold. Valid option is "allow" only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conformAction")
    public String conformAction;
    public SecurityPolicyRuleRateLimitOptions withConformAction(String conformAction) {
        this.conformAction = conformAction;
        return this;
    }
    
    /**
     * Determines the key to enforce the rate_limit_threshold on. Possible values are: - ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if "enforceOnKey" is not configured. - IP: The source IP address of the request is the key. Each IP has this limit enforced separately. - HTTP_HEADER: The value of the HTTP header whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL. - XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP. - HTTP_COOKIE: The value of the HTTP cookie whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL. - HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes. - SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session. - REGION_CODE: The country/region from which the request originates. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforceOnKey")
    public SecurityPolicyRuleRateLimitOptionsEnforceOnKeyEnum enforceOnKey;
    public SecurityPolicyRuleRateLimitOptions withEnforceOnKey(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyEnum enforceOnKey) {
        this.enforceOnKey = enforceOnKey;
        return this;
    }
    
    /**
     * If specified, any combination of values of enforce_on_key_type/enforce_on_key_name is treated as the key on which ratelimit threshold/action is enforced. You can specify up to 3 enforce_on_key_configs. If enforce_on_key_configs is specified, enforce_on_key must not be specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforceOnKeyConfigs")
    public SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig[] enforceOnKeyConfigs;
    public SecurityPolicyRuleRateLimitOptions withEnforceOnKeyConfigs(SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig[] enforceOnKeyConfigs) {
        this.enforceOnKeyConfigs = enforceOnKeyConfigs;
        return this;
    }
    
    /**
     * Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforceOnKeyName")
    public String enforceOnKeyName;
    public SecurityPolicyRuleRateLimitOptions withEnforceOnKeyName(String enforceOnKeyName) {
        this.enforceOnKeyName = enforceOnKeyName;
        return this;
    }
    
    /**
     * Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint. Valid options are `deny(STATUS)`, where valid values for `STATUS` are 403, 404, 429, and 502, and `redirect`, where the redirect parameters come from `exceedRedirectOptions` below.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exceedAction")
    public String exceedAction;
    public SecurityPolicyRuleRateLimitOptions withExceedAction(String exceedAction) {
        this.exceedAction = exceedAction;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exceedRedirectOptions")
    public SecurityPolicyRuleRedirectOptions exceedRedirectOptions;
    public SecurityPolicyRuleRateLimitOptions withExceedRedirectOptions(SecurityPolicyRuleRedirectOptions exceedRedirectOptions) {
        this.exceedRedirectOptions = exceedRedirectOptions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rateLimitThreshold")
    public SecurityPolicyRuleRateLimitOptionsThreshold rateLimitThreshold;
    public SecurityPolicyRuleRateLimitOptions withRateLimitThreshold(SecurityPolicyRuleRateLimitOptionsThreshold rateLimitThreshold) {
        this.rateLimitThreshold = rateLimitThreshold;
        return this;
    }
    
}
