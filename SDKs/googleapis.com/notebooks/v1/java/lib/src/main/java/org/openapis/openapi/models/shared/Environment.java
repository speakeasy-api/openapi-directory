/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Environment - Definition of a software environment that is used to start a notebook instance.
 */
public class Environment {
    /**
     * Definition of a container image for starting a notebook instance with the environment installed in a container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerImage")
    public ContainerImage containerImage;

    public Environment withContainerImage(ContainerImage containerImage) {
        this.containerImage = containerImage;
        return this;
    }
    
    /**
     * Output only. The time at which this environment was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public Environment withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * A brief description of this environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Environment withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Display name of this environment for the UI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public Environment withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Output only. Name of this environment. Format: `projects/{project_id}/locations/{location}/environments/{environment_id}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Environment withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path. Example: `"gs://path-to-file/file-name"`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postStartupScript")
    public String postStartupScript;

    public Environment withPostStartupScript(String postStartupScript) {
        this.postStartupScript = postStartupScript;
        return this;
    }
    
    /**
     * Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vmImage")
    public VmImage vmImage;

    public Environment withVmImage(VmImage vmImage) {
        this.vmImage = vmImage;
        return this;
    }
    
    public Environment(){}
}
