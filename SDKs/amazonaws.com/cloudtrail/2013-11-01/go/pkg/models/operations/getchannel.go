// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetChannelXAmzTargetEnum
type GetChannelXAmzTargetEnum string

const (
	GetChannelXAmzTargetEnumComAmazonawsCloudtrailV20131101CloudTrail20131101GetChannel GetChannelXAmzTargetEnum = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetChannel"
)

func (e *GetChannelXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetChannel":
		*e = GetChannelXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetChannelXAmzTargetEnum: %s", s)
	}
}

type GetChannelHeaders struct {
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetChannelXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetChannelRequest struct {
	Headers GetChannelHeaders
	Request shared.GetChannelRequest `request:"mediaType=application/json"`
}

type GetChannelResponse struct {
	// ChannelARNInvalidException
	ChannelARNInvalidException interface{}
	// ChannelNotFoundException
	ChannelNotFoundException interface{}
	ContentType              string
	// Success
	GetChannelResponse *shared.GetChannelResponse
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
