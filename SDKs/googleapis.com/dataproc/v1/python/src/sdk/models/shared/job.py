"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import driverschedulingconfig as shared_driverschedulingconfig
from ..shared import hadoopjob as shared_hadoopjob
from ..shared import hivejob as shared_hivejob
from ..shared import jobplacement as shared_jobplacement
from ..shared import jobreference as shared_jobreference
from ..shared import jobscheduling as shared_jobscheduling
from ..shared import jobstatus as shared_jobstatus
from ..shared import pigjob as shared_pigjob
from ..shared import prestojob as shared_prestojob
from ..shared import pysparkjob as shared_pysparkjob
from ..shared import sparkjob as shared_sparkjob
from ..shared import sparkrjob as shared_sparkrjob
from ..shared import sparksqljob as shared_sparksqljob
from ..shared import trinojob as shared_trinojob
from ..shared import yarnapplication as shared_yarnapplication
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobInput:
    r"""A Dataproc job resource."""
    
    driver_scheduling_config: Optional[shared_driverschedulingconfig.DriverSchedulingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('driverSchedulingConfig'), 'exclude': lambda f: f is None }})
    r"""Driver scheduling configuration."""  
    hadoop_job: Optional[shared_hadoopjob.HadoopJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hadoopJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Apache Hadoop MapReduce (https://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html) jobs on Apache Hadoop YARN (https://hadoop.apache.org/docs/r2.7.1/hadoop-yarn/hadoop-yarn-site/YARN.html)."""  
    hive_job: Optional[shared_hivejob.HiveJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hiveJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Apache Hive (https://hive.apache.org/) queries on YARN."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. The labels to associate with this job. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a job."""  
    pig_job: Optional[shared_pigjob.PigJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pigJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Apache Pig (https://pig.apache.org/) queries on YARN."""  
    placement: Optional[shared_jobplacement.JobPlacementInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placement'), 'exclude': lambda f: f is None }})
    r"""Dataproc job config."""  
    presto_job: Optional[shared_prestojob.PrestoJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prestoJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Presto (https://prestosql.io/) queries. IMPORTANT: The Dataproc Presto Optional Component (https://cloud.google.com/dataproc/docs/concepts/components/presto) must be enabled when the cluster is created to submit a Presto job to the cluster."""  
    pyspark_job: Optional[shared_pysparkjob.PySparkJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pysparkJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Apache PySpark (https://spark.apache.org/docs/0.9.0/python-programming-guide.html) applications on YARN."""  
    reference: Optional[shared_jobreference.JobReference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""Encapsulates the full scoping used to reference a job."""  
    scheduling: Optional[shared_jobscheduling.JobScheduling] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduling'), 'exclude': lambda f: f is None }})
    r"""Job scheduling options."""  
    spark_job: Optional[shared_sparkjob.SparkJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sparkJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Apache Spark (https://spark.apache.org/) applications on YARN."""  
    spark_r_job: Optional[shared_sparkrjob.SparkRJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sparkRJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Apache SparkR (https://spark.apache.org/docs/latest/sparkr.html) applications on YARN."""  
    spark_sql_job: Optional[shared_sparksqljob.SparkSQLJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sparkSqlJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Apache Spark SQL (https://spark.apache.org/sql/) queries."""  
    trino_job: Optional[shared_trinojob.TrinoJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trinoJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Trino (https://trino.io/) queries. IMPORTANT: The Dataproc Trino Optional Component (https://cloud.google.com/dataproc/docs/concepts/components/trino) must be enabled when the cluster is created to submit a Trino job to the cluster."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Job:
    r"""A Dataproc job resource."""
    
    done: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('done'), 'exclude': lambda f: f is None }})
    r"""Output only. Indicates whether the job is completed. If the value is false, the job is still in progress. If true, the job is completed, and status.state field will indicate if it was successful, failed, or cancelled."""  
    driver_control_files_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('driverControlFilesUri'), 'exclude': lambda f: f is None }})
    r"""Output only. If present, the location of miscellaneous control files which may be used as part of job setup and handling. If not present, control files may be placed in the same location as driver_output_uri."""  
    driver_output_resource_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('driverOutputResourceUri'), 'exclude': lambda f: f is None }})
    r"""Output only. A URI pointing to the location of the stdout of the job's driver program."""  
    driver_scheduling_config: Optional[shared_driverschedulingconfig.DriverSchedulingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('driverSchedulingConfig'), 'exclude': lambda f: f is None }})
    r"""Driver scheduling configuration."""  
    hadoop_job: Optional[shared_hadoopjob.HadoopJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hadoopJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Apache Hadoop MapReduce (https://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html) jobs on Apache Hadoop YARN (https://hadoop.apache.org/docs/r2.7.1/hadoop-yarn/hadoop-yarn-site/YARN.html)."""  
    hive_job: Optional[shared_hivejob.HiveJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hiveJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Apache Hive (https://hive.apache.org/) queries on YARN."""  
    job_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobUuid'), 'exclude': lambda f: f is None }})
    r"""Output only. A UUID that uniquely identifies a job within the project over time. This is in contrast to a user-settable reference.job_id that may be reused over time."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. The labels to associate with this job. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a job."""  
    pig_job: Optional[shared_pigjob.PigJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pigJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Apache Pig (https://pig.apache.org/) queries on YARN."""  
    placement: Optional[shared_jobplacement.JobPlacement] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placement'), 'exclude': lambda f: f is None }})
    r"""Dataproc job config."""  
    presto_job: Optional[shared_prestojob.PrestoJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prestoJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Presto (https://prestosql.io/) queries. IMPORTANT: The Dataproc Presto Optional Component (https://cloud.google.com/dataproc/docs/concepts/components/presto) must be enabled when the cluster is created to submit a Presto job to the cluster."""  
    pyspark_job: Optional[shared_pysparkjob.PySparkJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pysparkJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Apache PySpark (https://spark.apache.org/docs/0.9.0/python-programming-guide.html) applications on YARN."""  
    reference: Optional[shared_jobreference.JobReference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""Encapsulates the full scoping used to reference a job."""  
    scheduling: Optional[shared_jobscheduling.JobScheduling] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduling'), 'exclude': lambda f: f is None }})
    r"""Job scheduling options."""  
    spark_job: Optional[shared_sparkjob.SparkJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sparkJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Apache Spark (https://spark.apache.org/) applications on YARN."""  
    spark_r_job: Optional[shared_sparkrjob.SparkRJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sparkRJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Apache SparkR (https://spark.apache.org/docs/latest/sparkr.html) applications on YARN."""  
    spark_sql_job: Optional[shared_sparksqljob.SparkSQLJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sparkSqlJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Apache Spark SQL (https://spark.apache.org/sql/) queries."""  
    status: Optional[shared_jobstatus.JobStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Dataproc job status."""  
    status_history: Optional[list[shared_jobstatus.JobStatus]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusHistory'), 'exclude': lambda f: f is None }})
    r"""Output only. The previous job status."""  
    trino_job: Optional[shared_trinojob.TrinoJob] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trinoJob'), 'exclude': lambda f: f is None }})
    r"""A Dataproc job for running Trino (https://trino.io/) queries. IMPORTANT: The Dataproc Trino Optional Component (https://cloud.google.com/dataproc/docs/concepts/components/trino) must be enabled when the cluster is created to submit a Trino job to the cluster."""  
    yarn_applications: Optional[list[shared_yarnapplication.YarnApplication]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yarnApplications'), 'exclude': lambda f: f is None }})
    r"""Output only. The collection of YARN applications spun up by this job.Beta Feature: This report is available for testing purposes only. It may be changed before final release."""  
    