"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def speech_projects_locations_custom_classes_create(self, request: operations.SpeechProjectsLocationsCustomClassesCreateRequest, security: operations.SpeechProjectsLocationsCustomClassesCreateSecurity) -> operations.SpeechProjectsLocationsCustomClassesCreateResponse:
        r"""Create a custom class."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SpeechProjectsLocationsCustomClassesCreateRequest, base_url, '/v1/{parent}/customClasses', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_custom_class_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SpeechProjectsLocationsCustomClassesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SpeechProjectsLocationsCustomClassesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomClass])
                res.custom_class = out

        return res

    def speech_projects_locations_custom_classes_list(self, request: operations.SpeechProjectsLocationsCustomClassesListRequest, security: operations.SpeechProjectsLocationsCustomClassesListSecurity) -> operations.SpeechProjectsLocationsCustomClassesListResponse:
        r"""List custom classes."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SpeechProjectsLocationsCustomClassesListRequest, base_url, '/v1/{parent}/customClasses', request)
        
        query_params = utils.get_query_params(operations.SpeechProjectsLocationsCustomClassesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SpeechProjectsLocationsCustomClassesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCustomClassesResponse])
                res.list_custom_classes_response = out

        return res

    def speech_projects_locations_phrase_sets_create(self, request: operations.SpeechProjectsLocationsPhraseSetsCreateRequest, security: operations.SpeechProjectsLocationsPhraseSetsCreateSecurity) -> operations.SpeechProjectsLocationsPhraseSetsCreateResponse:
        r"""Create a set of phrase hints. Each item in the set can be a single word or a multi-word phrase. The items in the PhraseSet are favored by the recognition model when you send a call that includes the PhraseSet."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SpeechProjectsLocationsPhraseSetsCreateRequest, base_url, '/v1/{parent}/phraseSets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_phrase_set_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SpeechProjectsLocationsPhraseSetsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SpeechProjectsLocationsPhraseSetsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PhraseSet])
                res.phrase_set = out

        return res

    def speech_projects_locations_phrase_sets_delete(self, request: operations.SpeechProjectsLocationsPhraseSetsDeleteRequest, security: operations.SpeechProjectsLocationsPhraseSetsDeleteSecurity) -> operations.SpeechProjectsLocationsPhraseSetsDeleteResponse:
        r"""Delete a phrase set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SpeechProjectsLocationsPhraseSetsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.SpeechProjectsLocationsPhraseSetsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SpeechProjectsLocationsPhraseSetsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def speech_projects_locations_phrase_sets_get(self, request: operations.SpeechProjectsLocationsPhraseSetsGetRequest, security: operations.SpeechProjectsLocationsPhraseSetsGetSecurity) -> operations.SpeechProjectsLocationsPhraseSetsGetResponse:
        r"""Get a phrase set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SpeechProjectsLocationsPhraseSetsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.SpeechProjectsLocationsPhraseSetsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SpeechProjectsLocationsPhraseSetsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PhraseSet])
                res.phrase_set = out

        return res

    def speech_projects_locations_phrase_sets_list(self, request: operations.SpeechProjectsLocationsPhraseSetsListRequest, security: operations.SpeechProjectsLocationsPhraseSetsListSecurity) -> operations.SpeechProjectsLocationsPhraseSetsListResponse:
        r"""List phrase sets."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SpeechProjectsLocationsPhraseSetsListRequest, base_url, '/v1/{parent}/phraseSets', request)
        
        query_params = utils.get_query_params(operations.SpeechProjectsLocationsPhraseSetsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SpeechProjectsLocationsPhraseSetsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPhraseSetResponse])
                res.list_phrase_set_response = out

        return res

    def speech_projects_locations_phrase_sets_patch(self, request: operations.SpeechProjectsLocationsPhraseSetsPatchRequest, security: operations.SpeechProjectsLocationsPhraseSetsPatchSecurity) -> operations.SpeechProjectsLocationsPhraseSetsPatchResponse:
        r"""Update a phrase set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SpeechProjectsLocationsPhraseSetsPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "phrase_set", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SpeechProjectsLocationsPhraseSetsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SpeechProjectsLocationsPhraseSetsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PhraseSet])
                res.phrase_set = out

        return res

    