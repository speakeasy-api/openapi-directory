/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class SearchProducts200ApplicationJSONData {
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("admission")
    public String admission;
    public SearchProducts200ApplicationJSONData withAdmission(String admission) {
        this.admission = admission;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available")
    public Boolean available;
    public SearchProducts200ApplicationJSONData withAvailable(Boolean available) {
        this.available = available;
        return this;
    }
    
    /**
     * **booking type specifier** for *this* product that indicates whether the booking will be `CONFIRMED` immediately or if it will remain `PENDING` even after the booking has been made
     * 
     * *one of* the following:
     * - `"FreesaleBE"` \u2013 *this* product will be confirmed immediately and the supplier will be sent a notification
     * - `"UnconditionalBE"` - *this* product will be confirmed immediately and the supplier will not be notified
     * - `"DeferredCRMBE"` - *this* product is an on-request product and will not be confirmed immediately. *this* product will have a `PENDING` status after it is booked, to be confirmed by the supplier within the time specified in the `hoursConfirmed` field available in the booking response and post-booking services
     * - `"FreesaleOnRequestBE"` - *this* product is freesale up until a certain number of days before the travel date, referred to as the *on-request period*.
     * 
     * If a booking is made within the on-request period, *this* product will be an on-request product. Once the booking has been made, the `bookingEngineId` will change to either `"FreesaleOnRequestBE:OnRequest"` or `"FreesaleOnRequestBE:Freesold"` depending on the travel date and the on-request period                        
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bookingEngineId")
    public org.openapis.openapi.models.shared.BookingEngineIdEnum bookingEngineId;
    public SearchProducts200ApplicationJSONData withBookingEngineId(org.openapis.openapi.models.shared.BookingEngineIdEnum bookingEngineId) {
        this.bookingEngineId = bookingEngineId;
        return this;
    }
    
    /**
     * **list** of unique numeric category identifiers for *this* product
     * - the `categoryId` for the destination is available from the [/taxonomy/categories](#operation/taxonomyCategories) service
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catIds")
    public Long[] catIds;
    public SearchProducts200ApplicationJSONData withCatIds(Long[] catIds) {
        this.catIds = catIds;
        return this;
    }
    
    /**
     * **unique alphanumeric identifier** of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public String code;
    public SearchProducts200ApplicationJSONData withCode(String code) {
        this.code = code;
        return this;
    }
    
    /**
     * **indicator** of the currency in which *this* product's prices are displayed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyCode")
    public String currencyCode;
    public SearchProducts200ApplicationJSONData withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * **natural-language description** of the duration of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public String duration;
    public SearchProducts200ApplicationJSONData withDuration(String duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("essential")
    public String essential;
    public SearchProducts200ApplicationJSONData withEssential(String essential) {
        this.essential = essential;
        return this;
    }
    
    /**
     * ignore (Viator only)
     * 
     *     
     * For cancellation information regarding the booking, please refer to the `merchantTermsAndConditions` object
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantCancellable")
    public Boolean merchantCancellable;
    public SearchProducts200ApplicationJSONData withMerchantCancellable(Boolean merchantCancellable) {
        this.merchantCancellable = merchantCancellable;
        return this;
    }
    
    /**
     * Numeric 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee; i.e. the merchant net rate
     * 
     * For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantNetPriceFrom")
    public Double merchantNetPriceFrom;
    public SearchProducts200ApplicationJSONData withMerchantNetPriceFrom(Double merchantNetPriceFrom) {
        this.merchantNetPriceFrom = merchantNetPriceFrom;
        return this;
    }
    
    /**
     * Currency-formatted 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee (i.e. the merchant net rate)
     * 
     * For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantNetPriceFromFormatted")
    public String merchantNetPriceFromFormatted;
    public SearchProducts200ApplicationJSONData withMerchantNetPriceFromFormatted(String merchantNetPriceFromFormatted) {
        this.merchantNetPriceFromFormatted = merchantNetPriceFromFormatted;
        return this;
    }
    
    /**
     * **number** of hours before the travel date that *this* product will be 'on-request' for
     * - this field will contain a value if the `bookingEngineId` is `'FreesaleOnRequestBE'`
     * - an `onRequestPeriod` of 48 hours means that *this* product is freesale up until 48 hours before the travel date, and is on-request for 48 hours or less until the travel date
     * - **note**: 'hours in advance' (the number of hours a product is available for booking before the travel date) may also affect this; however, this value is not available in the API
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onRequestPeriod")
    public Long onRequestPeriod;
    public SearchProducts200ApplicationJSONData withOnRequestPeriod(Long onRequestPeriod) {
        this.onRequestPeriod = onRequestPeriod;
        return this;
    }
    
    /**
     * Ignore (Viator only)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onSale")
    public Boolean onSale;
    public SearchProducts200ApplicationJSONData withOnSale(Boolean onSale) {
        this.onSale = onSale;
        return this;
    }
    
    /**
     * **number** of panoramic images available for *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("panoramaCount")
    public Long panoramaCount;
    public SearchProducts200ApplicationJSONData withPanoramaCount(Long panoramaCount) {
        this.panoramaCount = panoramaCount;
        return this;
    }
    
    /**
     * **object** detailing product availability
     * - `pas` stands for Product Availability Schema
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pas")
    public java.util.Map<String, Object> pas;
    public SearchProducts200ApplicationJSONData withPas(java.util.Map<String, Object> pas) {
        this.pas = pas;
        return this;
    }
    
    /**
     * **number** of user photos published for *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photoCount")
    public Long photoCount;
    public SearchProducts200ApplicationJSONData withPhotoCount(Long photoCount) {
        this.photoCount = photoCount;
        return this;
    }
    
    /**
     * **suggested sell ('from') price** for this product in the currency set in the `currencyCode` parameter. This is the cheapest sell price, taking into consideration off-peak periods and discounts on larger groups.
     * 
     * 
     *   - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    public Double price;
    public SearchProducts200ApplicationJSONData withPrice(Double price) {
        this.price = price;
        return this;
    }
    
    /**
     * **currency-formatted suggested sell ('from') price** for this product in the currency set in the `currencyCode` parameter
     * 
     * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceFormatted")
    public String priceFormatted;
    public SearchProducts200ApplicationJSONData withPriceFormatted(String priceFormatted) {
        this.priceFormatted = priceFormatted;
        return this;
    }
    
    /**
     * **unique numeric identifier** of *this* product's primary destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryDestinationId")
    public Long primaryDestinationId;
    public SearchProducts200ApplicationJSONData withPrimaryDestinationId(Long primaryDestinationId) {
        this.primaryDestinationId = primaryDestinationId;
        return this;
    }
    
    /**
     * **natural-language name** of *this* product's primary destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryDestinationName")
    public String primaryDestinationName;
    public SearchProducts200ApplicationJSONData withPrimaryDestinationName(String primaryDestinationName) {
        this.primaryDestinationName = primaryDestinationName;
        return this;
    }
    
    /**
     * **URL-formatted name** of *this* product's primary destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryDestinationUrlName")
    public String primaryDestinationUrlName;
    public SearchProducts200ApplicationJSONData withPrimaryDestinationUrlName(String primaryDestinationUrlName) {
        this.primaryDestinationUrlName = primaryDestinationUrlName;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryGroupId")
    public Long primaryGroupId;
    public SearchProducts200ApplicationJSONData withPrimaryGroupId(Long primaryGroupId) {
        this.primaryGroupId = primaryGroupId;
        return this;
    }
    
    /**
     * **URL-formatted name** of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productUrlName")
    public String productUrlName;
    public SearchProducts200ApplicationJSONData withProductUrlName(String productUrlName) {
        this.productUrlName = productUrlName;
        return this;
    }
    
    /**
     * **average user rating** of *this* product
     * 
     * users rate products by assigning a star-rating from 1-5; this value shows the average of the star ratings provided by users;
     * 
     * the `ratingCounts` associative array in this response provides a breakdown of how many submissions for each star rating have been received
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rating")
    public Double rating;
    public SearchProducts200ApplicationJSONData withRating(Double rating) {
        this.rating = rating;
        return this;
    }
    
    /**
     * **number** of user reviews that have been submitted by users for *this* product
     * 
     * If your account has been configured to limit the number of reviews you can receive, this value will never be higher than that. Otherwise, this value will show the total number of reviews available for this product. If there are more than 24 reviews available, you will need to use the [/product/reviews](#operation/productReviews) service to retrieve the remainder of the reviews.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reviewCount")
    public Long reviewCount;
    public SearchProducts200ApplicationJSONData withReviewCount(Long reviewCount) {
        this.reviewCount = reviewCount;
        return this;
    }
    
    /**
     * **numeric original price** for this product if the product is on special / a discount has been applied. `0` if there is no discount on this product. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rrp")
    public Long rrp;
    public SearchProducts200ApplicationJSONData withRrp(Long rrp) {
        this.rrp = rrp;
        return this;
    }
    
    /**
     * **currency-formatted original price** for this product if the product is on special / a discount has been applied. Empty string if there is no discount on this product. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rrpformatted")
    public String rrpformatted;
    public SearchProducts200ApplicationJSONData withRrpformatted(String rrpformatted) {
        this.rrpformatted = rrpformatted;
        return this;
    }
    
    /**
     * Ignore (Viator only)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("savingAmount")
    public String savingAmount;
    public SearchProducts200ApplicationJSONData withSavingAmount(String savingAmount) {
        this.savingAmount = savingAmount;
        return this;
    }
    
    /**
     * Ignore (Viator only)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("savingAmountFormated")
    public String savingAmountFormated;
    public SearchProducts200ApplicationJSONData withSavingAmountFormated(String savingAmountFormated) {
        this.savingAmountFormated = savingAmountFormated;
        return this;
    }
    
    /**
     * **HTML-formatted natural-language description** of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortDescription")
    public String shortDescription;
    public SearchProducts200ApplicationJSONData withShortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
        return this;
    }
    
    /**
     * **short natural-language title** of *this* product (for use when there is a need to conserve space)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortTitle")
    public String shortTitle;
    public SearchProducts200ApplicationJSONData withShortTitle(String shortTitle) {
        this.shortTitle = shortTitle;
        return this;
    }
    
    /**
     * **sort order** for *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortOrder")
    public Long sortOrder;
    public SearchProducts200ApplicationJSONData withSortOrder(Long sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specialOfferAvailable")
    public Boolean specialOfferAvailable;
    public SearchProducts200ApplicationJSONData withSpecialOfferAvailable(Boolean specialOfferAvailable) {
        this.specialOfferAvailable = specialOfferAvailable;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specialReservation")
    public Boolean specialReservation;
    public SearchProducts200ApplicationJSONData withSpecialReservation(Boolean specialReservation) {
        this.specialReservation = specialReservation;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specialReservationDetails")
    public String specialReservationDetails;
    public SearchProducts200ApplicationJSONData withSpecialReservationDetails(String specialReservationDetails) {
        this.specialReservationDetails = specialReservationDetails;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslSupported")
    public Object sslSupported;
    public SearchProducts200ApplicationJSONData withSslSupported(Object sslSupported) {
        this.sslSupported = sslSupported;
        return this;
    }
    
    /**
     * **list** of unique numeric subcategory identifiers for *this* product
     * - the `subcategoryId` for the destination is available from the [/taxonomy/categories](#operation/taxonomyCategories) service
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subCatIds")
    public Long[] subCatIds;
    public SearchProducts200ApplicationJSONData withSubCatIds(Long[] subCatIds) {
        this.subCatIds = subCatIds;
        return this;
    }
    
    /**
     * **unique identifier** of *this* product's supplier in text string format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplierCode")
    public String supplierCode;
    public SearchProducts200ApplicationJSONData withSupplierCode(String supplierCode) {
        this.supplierCode = supplierCode;
        return this;
    }
    
    /**
     * **natural-language name** of *this* product's supplier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplierName")
    public String supplierName;
    public SearchProducts200ApplicationJSONData withSupplierName(String supplierName) {
        this.supplierName = supplierName;
        return this;
    }
    
    /**
     * **URL** for the high resolution thumbnail for *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailHiResURL")
    public String thumbnailHiResURL;
    public SearchProducts200ApplicationJSONData withThumbnailHiResURL(String thumbnailHiResURL) {
        this.thumbnailHiResURL = thumbnailHiResURL;
        return this;
    }
    
    /**
     * **URL** for *this* product's thumbnail image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailURL")
    public String thumbnailURL;
    public SearchProducts200ApplicationJSONData withThumbnailURL(String thumbnailURL) {
        this.thumbnailURL = thumbnailURL;
        return this;
    }
    
    /**
     * **natural-language title** of *this* product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public SearchProducts200ApplicationJSONData withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * **numeric indicator** of the language translation level for *this* product that is one of:
     * - `0`: no translation (English only)
     * - `80`: full machine translation
     * - `100`: full human translation
     * 
     * See: [Working with human and machine translations](#section/Appendices/Working-with-human-and-machine-translations) for more information
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("translationLevel")
    public org.openapis.openapi.models.shared.TranslationLevelEnum translationLevel;
    public SearchProducts200ApplicationJSONData withTranslationLevel(org.openapis.openapi.models.shared.TranslationLevelEnum translationLevel) {
        this.translationLevel = translationLevel;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uniqueShortDescription")
    public String uniqueShortDescription;
    public SearchProducts200ApplicationJSONData withUniqueShortDescription(String uniqueShortDescription) {
        this.uniqueShortDescription = uniqueShortDescription;
        return this;
    }
    
    /**
     * ignore (Viator only) \u2013 videos are not available to partners
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoCount")
    public Long videoCount;
    public SearchProducts200ApplicationJSONData withVideoCount(Long videoCount) {
        this.videoCount = videoCount;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webURL")
    public String webURL;
    public SearchProducts200ApplicationJSONData withWebURL(String webURL) {
        this.webURL = webURL;
        return this;
    }
    
}
