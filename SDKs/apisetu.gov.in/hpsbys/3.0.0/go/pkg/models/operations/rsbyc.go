// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RsbycSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type RsbycRequestBodyCertificateParameters struct {
	// Aadhaar number
	UID string `json:"UID"`
}

// RsbycRequestBodyFormatEnum - The format of the certificate in response.
type RsbycRequestBodyFormatEnum string

const (
	RsbycRequestBodyFormatEnumPdf RsbycRequestBodyFormatEnum = "pdf"
)

func (e RsbycRequestBodyFormatEnum) ToPointer() *RsbycRequestBodyFormatEnum {
	return &e
}

func (e *RsbycRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = RsbycRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RsbycRequestBodyFormatEnum: %v", v)
	}
}

// RsbycRequestBody - Request format
type RsbycRequestBody struct {
	CertificateParameters *RsbycRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format RsbycRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Rsbyc504ApplicationJSONErrorEnum string

const (
	Rsbyc504ApplicationJSONErrorEnumGatewayTimeout Rsbyc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Rsbyc504ApplicationJSONErrorEnum) ToPointer() *Rsbyc504ApplicationJSONErrorEnum {
	return &e
}

func (e *Rsbyc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Rsbyc504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rsbyc504ApplicationJSONErrorEnum: %v", v)
	}
}

type Rsbyc504ApplicationJSONErrorDescriptionEnum string

const (
	Rsbyc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Rsbyc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Rsbyc504ApplicationJSONErrorDescriptionEnum) ToPointer() *Rsbyc504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rsbyc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Rsbyc504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rsbyc504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rsbyc504ApplicationJSON - Gateway timeout
type Rsbyc504ApplicationJSON struct {
	Error            *Rsbyc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rsbyc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rsbyc503ApplicationJSONErrorEnum string

const (
	Rsbyc503ApplicationJSONErrorEnumServiceUnavailable Rsbyc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Rsbyc503ApplicationJSONErrorEnum) ToPointer() *Rsbyc503ApplicationJSONErrorEnum {
	return &e
}

func (e *Rsbyc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Rsbyc503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rsbyc503ApplicationJSONErrorEnum: %v", v)
	}
}

type Rsbyc503ApplicationJSONErrorDescriptionEnum string

const (
	Rsbyc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Rsbyc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Rsbyc503ApplicationJSONErrorDescriptionEnum) ToPointer() *Rsbyc503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rsbyc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Rsbyc503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rsbyc503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rsbyc503ApplicationJSON - Service unavailable
type Rsbyc503ApplicationJSON struct {
	Error            *Rsbyc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rsbyc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rsbyc502ApplicationJSONErrorEnum string

const (
	Rsbyc502ApplicationJSONErrorEnumBadGatewy Rsbyc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Rsbyc502ApplicationJSONErrorEnum) ToPointer() *Rsbyc502ApplicationJSONErrorEnum {
	return &e
}

func (e *Rsbyc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Rsbyc502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rsbyc502ApplicationJSONErrorEnum: %v", v)
	}
}

type Rsbyc502ApplicationJSONErrorDescriptionEnum string

const (
	Rsbyc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Rsbyc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Rsbyc502ApplicationJSONErrorDescriptionEnum) ToPointer() *Rsbyc502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rsbyc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Rsbyc502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rsbyc502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rsbyc502ApplicationJSON - Bad gateway
type Rsbyc502ApplicationJSON struct {
	Error            *Rsbyc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rsbyc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rsbyc500ApplicationJSONErrorEnum string

const (
	Rsbyc500ApplicationJSONErrorEnumInternalServerError Rsbyc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Rsbyc500ApplicationJSONErrorEnum) ToPointer() *Rsbyc500ApplicationJSONErrorEnum {
	return &e
}

func (e *Rsbyc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Rsbyc500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rsbyc500ApplicationJSONErrorEnum: %v", v)
	}
}

type Rsbyc500ApplicationJSONErrorDescriptionEnum string

const (
	Rsbyc500ApplicationJSONErrorDescriptionEnumInternalServerError Rsbyc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Rsbyc500ApplicationJSONErrorDescriptionEnum) ToPointer() *Rsbyc500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rsbyc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Rsbyc500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rsbyc500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rsbyc500ApplicationJSON - Internal server error
type Rsbyc500ApplicationJSON struct {
	Error            *Rsbyc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rsbyc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rsbyc404ApplicationJSONErrorEnum string

const (
	Rsbyc404ApplicationJSONErrorEnumRecordNotFound Rsbyc404ApplicationJSONErrorEnum = "record_not_found"
	Rsbyc404ApplicationJSONErrorEnumURLNotFound    Rsbyc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Rsbyc404ApplicationJSONErrorEnum) ToPointer() *Rsbyc404ApplicationJSONErrorEnum {
	return &e
}

func (e *Rsbyc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Rsbyc404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rsbyc404ApplicationJSONErrorEnum: %v", v)
	}
}

type Rsbyc404ApplicationJSONErrorDescriptionEnum string

const (
	Rsbyc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Rsbyc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Rsbyc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Rsbyc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Rsbyc404ApplicationJSONErrorDescriptionEnum) ToPointer() *Rsbyc404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rsbyc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Rsbyc404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rsbyc404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rsbyc404ApplicationJSON - No record found
type Rsbyc404ApplicationJSON struct {
	Error            *Rsbyc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rsbyc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rsbyc401ApplicationJSONErrorEnum string

const (
	Rsbyc401ApplicationJSONErrorEnumInvalidAuthentication Rsbyc401ApplicationJSONErrorEnum = "invalid_authentication"
	Rsbyc401ApplicationJSONErrorEnumInvalidAuthorization  Rsbyc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Rsbyc401ApplicationJSONErrorEnum) ToPointer() *Rsbyc401ApplicationJSONErrorEnum {
	return &e
}

func (e *Rsbyc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Rsbyc401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rsbyc401ApplicationJSONErrorEnum: %v", v)
	}
}

type Rsbyc401ApplicationJSONErrorDescriptionEnum string

const (
	Rsbyc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Rsbyc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Rsbyc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Rsbyc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Rsbyc401ApplicationJSONErrorDescriptionEnum) ToPointer() *Rsbyc401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rsbyc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Rsbyc401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rsbyc401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rsbyc401ApplicationJSON - Unauthorized access
type Rsbyc401ApplicationJSON struct {
	Error            *Rsbyc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rsbyc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rsbyc400ApplicationJSONErrorEnum string

const (
	Rsbyc400ApplicationJSONErrorEnumMissingParameter Rsbyc400ApplicationJSONErrorEnum = "missing_parameter"
	Rsbyc400ApplicationJSONErrorEnumInvalidParameter Rsbyc400ApplicationJSONErrorEnum = "invalid_parameter"
	Rsbyc400ApplicationJSONErrorEnumInvalidFormat    Rsbyc400ApplicationJSONErrorEnum = "invalid_format"
	Rsbyc400ApplicationJSONErrorEnumInvalidTxnid     Rsbyc400ApplicationJSONErrorEnum = "invalid_txnid"
	Rsbyc400ApplicationJSONErrorEnumInvalidConsentid Rsbyc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Rsbyc400ApplicationJSONErrorEnum) ToPointer() *Rsbyc400ApplicationJSONErrorEnum {
	return &e
}

func (e *Rsbyc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Rsbyc400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rsbyc400ApplicationJSONErrorEnum: %v", v)
	}
}

type Rsbyc400ApplicationJSONErrorDescriptionEnum string

const (
	Rsbyc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Rsbyc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Rsbyc400ApplicationJSONErrorDescriptionEnumBadRequest                              Rsbyc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Rsbyc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Rsbyc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Rsbyc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Rsbyc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Rsbyc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Rsbyc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Rsbyc400ApplicationJSONErrorDescriptionEnum) ToPointer() *Rsbyc400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rsbyc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Rsbyc400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rsbyc400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rsbyc400ApplicationJSON - Bad request
type Rsbyc400ApplicationJSON struct {
	Error            *Rsbyc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rsbyc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type RsbycResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Rsbyc400ApplicationJSONObject *Rsbyc400ApplicationJSON
	// Unauthorized access
	Rsbyc401ApplicationJSONObject *Rsbyc401ApplicationJSON
	// No record found
	Rsbyc404ApplicationJSONObject *Rsbyc404ApplicationJSON
	// Internal server error
	Rsbyc500ApplicationJSONObject *Rsbyc500ApplicationJSON
	// Bad gateway
	Rsbyc502ApplicationJSONObject *Rsbyc502ApplicationJSON
	// Service unavailable
	Rsbyc503ApplicationJSONObject *Rsbyc503ApplicationJSON
	// Gateway timeout
	Rsbyc504ApplicationJSONObject *Rsbyc504ApplicationJSON
}
