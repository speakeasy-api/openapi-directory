// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListDeploymentsQueryParams struct {
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

// ListDeploymentsXAmzTargetEnum
type ListDeploymentsXAmzTargetEnum string

const (
	ListDeploymentsXAmzTargetEnumCodeDeploy20141006ListDeployments ListDeploymentsXAmzTargetEnum = "CodeDeploy_20141006.ListDeployments"
)

func (e *ListDeploymentsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.ListDeployments":
		*e = ListDeploymentsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDeploymentsXAmzTargetEnum: %s", s)
	}
}

type ListDeploymentsHeaders struct {
	XAmzAlgorithm     *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListDeploymentsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListDeploymentsRequest struct {
	QueryParams ListDeploymentsQueryParams
	Headers     ListDeploymentsHeaders
	Request     shared.ListDeploymentsInput `request:"mediaType=application/json"`
}

type ListDeploymentsResponse struct {
	// ApplicationDoesNotExistException
	ApplicationDoesNotExistException interface{}
	// ApplicationNameRequiredException
	ApplicationNameRequiredException interface{}
	ContentType                      string
	// DeploymentGroupDoesNotExistException
	DeploymentGroupDoesNotExistException interface{}
	// DeploymentGroupNameRequiredException
	DeploymentGroupNameRequiredException interface{}
	// InvalidApplicationNameException
	InvalidApplicationNameException interface{}
	// InvalidDeploymentGroupNameException
	InvalidDeploymentGroupNameException interface{}
	// InvalidDeploymentStatusException
	InvalidDeploymentStatusException interface{}
	// InvalidExternalIdException
	InvalidExternalIDException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// InvalidTimeRangeException
	InvalidTimeRangeException interface{}
	// Success
	ListDeploymentsOutput *shared.ListDeploymentsOutput
	StatusCode            int
	RawResponse           *http.Response
}
