"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class SchemaResponses:
    r"""Schema Responses contain user supplied responses to a Registration Schema. A Schema Response aggregates all of the the responses for a given version of a Registration's Registration Schema. Schema Responses are created when a Registration is completed. Once a Registration is completed the Schema Responses for a Registration can be revisied and updated by using it's associated action endpoints.
    
    There are a few states for Schema Responses:
    
      - `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you
      must create a Schema Response Action that triggers a new submission.
    
      - `in_progess` is the state of a Schema Response where the response is editable and still private, Schema
      Responses are editted via a PATCH request as specified below.
    
      - `unapproved` is the state of a Schema Response where edits have been made and \"locked-in\", now contributors
      have the ability to reject the changes, however if they are not rejected changes are automatically approved
      after 48 hours. If `unapproved` Schema Responses are rejected, they are returned to the `in_progress` state. If
      `unapproved` Schema Responses are approved they either enter an `approved` state or go into a
      `pending_moderation` to be accepted or denied by a moderator.
    
      - `pending_moderation` is the state of a Schema Response where moderators have an opportunity to reject or
      approve a Schema Response that has been approved by it's contributors. This state is only reachable for Schema
      Responses that are associated with a Registration that has Registration Provider a moderated workflow.
    
      - `approved` is the state of a Schema Response where it is public and immutable, in order to update an approved
      Schema Response a new one must be created.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def schema_response_delete(self, request: operations.SchemaResponseDeleteRequest) -> operations.SchemaResponseDeleteResponse:
        r"""Delete a Incomplete Schema Response
        This endpoint deletes a new Schema Response. Schema Responses can only be deleted in the `in_progress` state. Once a Schema Response is transitioned to an `approved` it is immutable and another Schema Response must be created to update the Schema Response for that registration.
        #### Returns
        Returns a JSON object with a `data` key containing an updated representation of the requested Schema Response, if the request is successful.
        #### Errors
        If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SchemaResponseDeleteRequest, base_url, '/schema_responses/{schema_response_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SchemaResponseDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def schema_response_patch(self, request: operations.SchemaResponsePatchRequest) -> operations.SchemaResponsePatchResponse:
        r"""Update a Registration's Schema Response
        Patching to this endpoint allows one to directly edit the revision responses on the Schema Response of a Registration if that Schema Response is in an `in_progress` state.
        #### Returns
        Returns a JSON object with a `data` key containing an updated representation of the requested Schema Response, if the request is successful.
        #### Errors
        If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SchemaResponsePatchRequest, base_url, '/schema_responses/{schema_response_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SchemaResponsePatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def schema_response_ppost(self, request: operations.SchemaResponsePpostSchemaResponsesInput) -> operations.SchemaResponsePpostResponse:
        r"""Create a new Schema Response
        This endpoint creates a new Schema Response with an `in_progress` state. A new response can only be created if the current schema response is in an `approved` state.
        #### Returns
        Returns a JSON object with a `data` key containing an updated representation of the requested Schema Response, if the request is successful.
        #### Errors
        If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/schema_responses/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SchemaResponsePpostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def schema_responses_list(self) -> operations.SchemaResponsesListResponse:
        r"""List all Schema Responses
        This retrieves a paginated list of all active Schema Responses that are public.
        #### Returns
        Returns a JSON object containing `data` and `links` keys. The `data` key contains an array of 10 Schema Responses. Each resource in the array is a separate Registration Schemas object. The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
        #### Errors
        This request should never return an error.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/schema_responses/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SchemaResponsesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def schema_responses_read(self, request: operations.SchemaResponsesReadRequest) -> operations.SchemaResponsesReadResponse:
        r"""Retrieve a Schema Response
        This retrieves a single Schema response using it's id.
        #### Returns
        Returns a JSON object with a `data` key containing the representation of the requested Schema Response, if the request is successful.
        #### Errors
        If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SchemaResponsesReadRequest, base_url, '/schema_responses/{schema_response_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SchemaResponsesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    