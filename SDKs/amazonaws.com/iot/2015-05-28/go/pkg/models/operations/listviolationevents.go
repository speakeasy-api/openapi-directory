// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// ListViolationEventsBehaviorCriteriaTypeEnum -  The criteria for a behavior.
type ListViolationEventsBehaviorCriteriaTypeEnum string

const (
	ListViolationEventsBehaviorCriteriaTypeEnumStatic          ListViolationEventsBehaviorCriteriaTypeEnum = "STATIC"
	ListViolationEventsBehaviorCriteriaTypeEnumStatistical     ListViolationEventsBehaviorCriteriaTypeEnum = "STATISTICAL"
	ListViolationEventsBehaviorCriteriaTypeEnumMachineLearning ListViolationEventsBehaviorCriteriaTypeEnum = "MACHINE_LEARNING"
)

func (e *ListViolationEventsBehaviorCriteriaTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATIC":
		fallthrough
	case "STATISTICAL":
		fallthrough
	case "MACHINE_LEARNING":
		*e = ListViolationEventsBehaviorCriteriaTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListViolationEventsBehaviorCriteriaTypeEnum: %s", s)
	}
}

// ListViolationEventsVerificationStateEnum - The verification state of the violation (detect alarm).
type ListViolationEventsVerificationStateEnum string

const (
	ListViolationEventsVerificationStateEnumFalsePositive  ListViolationEventsVerificationStateEnum = "FALSE_POSITIVE"
	ListViolationEventsVerificationStateEnumBenignPositive ListViolationEventsVerificationStateEnum = "BENIGN_POSITIVE"
	ListViolationEventsVerificationStateEnumTruePositive   ListViolationEventsVerificationStateEnum = "TRUE_POSITIVE"
	ListViolationEventsVerificationStateEnumUnknown        ListViolationEventsVerificationStateEnum = "UNKNOWN"
)

func (e *ListViolationEventsVerificationStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FALSE_POSITIVE":
		fallthrough
	case "BENIGN_POSITIVE":
		fallthrough
	case "TRUE_POSITIVE":
		fallthrough
	case "UNKNOWN":
		*e = ListViolationEventsVerificationStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListViolationEventsVerificationStateEnum: %s", s)
	}
}

type ListViolationEventsRequest struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	//  The criteria for a behavior.
	BehaviorCriteriaType *ListViolationEventsBehaviorCriteriaTypeEnum `queryParam:"style=form,explode=true,name=behaviorCriteriaType"`
	// The end time for the alerts to be listed.
	EndTime time.Time `queryParam:"style=form,explode=true,name=endTime"`
	//  A list of all suppressed alerts.
	ListSuppressedAlerts *bool `queryParam:"style=form,explode=true,name=listSuppressedAlerts"`
	// The maximum number of results to return at one time.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// The token for the next set of results.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
	// A filter to limit results to those alerts generated by the specified security profile.
	SecurityProfileName *string `queryParam:"style=form,explode=true,name=securityProfileName"`
	// The start time for the alerts to be listed.
	StartTime time.Time `queryParam:"style=form,explode=true,name=startTime"`
	// A filter to limit results to those alerts caused by the specified thing.
	ThingName *string `queryParam:"style=form,explode=true,name=thingName"`
	// The verification state of the violation (detect alarm).
	VerificationState *ListViolationEventsVerificationStateEnum `queryParam:"style=form,explode=true,name=verificationState"`
}

type ListViolationEventsResponse struct {
	ContentType string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListViolationEventsResponse *shared.ListViolationEventsResponse
	StatusCode                  int
	RawResponse                 *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
