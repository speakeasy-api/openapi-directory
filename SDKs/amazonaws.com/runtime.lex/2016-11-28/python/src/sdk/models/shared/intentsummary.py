"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import confirmationstatus_enum as shared_confirmationstatus_enum
from ..shared import dialogactiontype_enum as shared_dialogactiontype_enum
from ..shared import fulfillmentstate_enum as shared_fulfillmentstate_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IntentSummary:
    r"""Provides information about the state of an intent. You can use this information to get the current state of an intent so that you can process the intent, or so that you can return the intent to its previous state."""
    
    dialog_action_type: shared_dialogactiontype_enum.DialogActionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dialogActionType') }})  
    checkpoint_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkpointLabel'), 'exclude': lambda f: f is None }})  
    confirmation_status: Optional[shared_confirmationstatus_enum.ConfirmationStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmationStatus'), 'exclude': lambda f: f is None }})  
    fulfillment_state: Optional[shared_fulfillmentstate_enum.FulfillmentStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fulfillmentState'), 'exclude': lambda f: f is None }})  
    intent_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intentName'), 'exclude': lambda f: f is None }})  
    slots: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slots'), 'exclude': lambda f: f is None }})  
    slot_to_elicit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slotToElicit'), 'exclude': lambda f: f is None }})  
    