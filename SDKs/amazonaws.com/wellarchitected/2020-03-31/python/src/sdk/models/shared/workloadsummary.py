"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import workloadimprovementstatus_enum as shared_workloadimprovementstatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkloadSummary:
    r"""A workload summary return object."""
    
    improvement_status: Optional[shared_workloadimprovementstatus_enum.WorkloadImprovementStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImprovementStatus'), 'exclude': lambda f: f is None }})
    r"""The improvement status for a workload."""  
    lenses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Lenses'), 'exclude': lambda f: f is None }})
    r"""The list of lenses associated with the workload. Each lens is identified by its <a>LensSummary$LensAlias</a>."""  
    owner: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Owner'), 'exclude': lambda f: f is None }})
    r"""An Amazon Web Services account ID."""  
    risk_counts: Optional[dict[str, int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RiskCounts'), 'exclude': lambda f: f is None }})
    r"""A map from risk names to the count of how questions have that rating."""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time recorded."""  
    workload_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkloadArn'), 'exclude': lambda f: f is None }})
    r"""The ARN for the workload."""  
    workload_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkloadId'), 'exclude': lambda f: f is None }})
    r"""The ID assigned to the workload. This ID is unique within an Amazon Web Services Region."""  
    workload_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkloadName'), 'exclude': lambda f: f is None }})
    r"""<p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>"""  
    