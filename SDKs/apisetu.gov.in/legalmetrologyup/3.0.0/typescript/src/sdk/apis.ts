/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class APIs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Dealer License
   *
   * @remarks
   * API to verify Dealer License.
   */
  delcs(
    req: operations.DelcsRequestBody,
    security: operations.DelcsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DelcsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DelcsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/delcs/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DelcsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DelcsResponse = new operations.DelcsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.delcs400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Delcs400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.delcs401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Delcs401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.delcs404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Delcs404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.delcs500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Delcs500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.delcs502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Delcs502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.delcs503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Delcs503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.delcs504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Delcs504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Manufacturer License
   *
   * @remarks
   * API to verify Manufacturer License.
   */
  malcs(
    req: operations.MalcsRequestBody,
    security: operations.MalcsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MalcsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MalcsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/malcs/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MalcsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MalcsResponse = new operations.MalcsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.malcs400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Malcs400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.malcs401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Malcs401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.malcs404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Malcs404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.malcs500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Malcs500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.malcs502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Malcs502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.malcs503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Malcs503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.malcs504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Malcs504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Packers License
   *
   * @remarks
   * API to verify Packers License.
   */
  palcs(
    req: operations.PalcsRequestBody,
    security: operations.PalcsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PalcsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PalcsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/palcs/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PalcsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PalcsResponse = new operations.PalcsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.palcs400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Palcs400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.palcs401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Palcs401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.palcs404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Palcs404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.palcs500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Palcs500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.palcs502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Palcs502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.palcs503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Palcs503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.palcs504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Palcs504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Repairer License
   *
   * @remarks
   * API to verify Repairer License.
   */
  relcs(
    req: operations.RelcsRequestBody,
    security: operations.RelcsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RelcsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RelcsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/relcs/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RelcsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RelcsResponse = new operations.RelcsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.relcs400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Relcs400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.relcs401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Relcs401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.relcs404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Relcs404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.relcs500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Relcs500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.relcs502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Relcs502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.relcs503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Relcs503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.relcs504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Relcs504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
