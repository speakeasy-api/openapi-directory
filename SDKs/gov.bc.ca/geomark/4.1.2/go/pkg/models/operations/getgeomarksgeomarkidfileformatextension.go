// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnum - The file format name extension used to represent the geomark download.
type GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnum string

const (
	GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnumJSON    GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnum = "json"
	GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnumXML     GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnum = "xml"
	GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnumKml     GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnum = "kml"
	GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnumKmz     GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnum = "kmz"
	GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnumShp     GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnum = "shp"
	GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnumShpz    GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnum = "shpz"
	GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnumGeojson GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnum = "geojson"
	GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnumGml     GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnum = "gml"
	GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnumWkt     GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnum = "wkt"
)

func (e *GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "kml":
		fallthrough
	case "kmz":
		fallthrough
	case "shp":
		fallthrough
	case "shpz":
		fallthrough
	case "geojson":
		fallthrough
	case "gml":
		fallthrough
	case "wkt":
		*e = GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnum: %s", s)
	}
}

type GetGeomarksGeomarkIDFileFormatExtensionPathParams struct {
	// The file format name extension used to represent the geomark download.
	FileFormatExtension GetGeomarksGeomarkIDFileFormatExtensionFileFormatExtensionEnum `pathParam:"style=simple,explode=false,name=fileFormatExtension"`
	// The unique identifier for the geomark.
	GeomarkID string `pathParam:"style=simple,explode=false,name=geomarkId"`
}

// GetGeomarksGeomarkIDFileFormatExtensionSridEnum - The srid of the coordinate system the geometry should be converted to.
type GetGeomarksGeomarkIDFileFormatExtensionSridEnum string

const (
	GetGeomarksGeomarkIDFileFormatExtensionSridEnumFourThousandThreeHundredAndTwentySix   GetGeomarksGeomarkIDFileFormatExtensionSridEnum = "4326"
	GetGeomarksGeomarkIDFileFormatExtensionSridEnumThreeThousandAndFive                   GetGeomarksGeomarkIDFileFormatExtensionSridEnum = "3005"
	GetGeomarksGeomarkIDFileFormatExtensionSridEnumThreeThousandEightHundredAndFiftySeven GetGeomarksGeomarkIDFileFormatExtensionSridEnum = "3857"
	GetGeomarksGeomarkIDFileFormatExtensionSridEnumTwentySixThousandNineHundredAndSeven   GetGeomarksGeomarkIDFileFormatExtensionSridEnum = "26907"
	GetGeomarksGeomarkIDFileFormatExtensionSridEnumTwentySixThousandNineHundredAndEight   GetGeomarksGeomarkIDFileFormatExtensionSridEnum = "26908"
	GetGeomarksGeomarkIDFileFormatExtensionSridEnumTwentySixThousandNineHundredAndNine    GetGeomarksGeomarkIDFileFormatExtensionSridEnum = "26909"
	GetGeomarksGeomarkIDFileFormatExtensionSridEnumTwentySixThousandNineHundredAndTen     GetGeomarksGeomarkIDFileFormatExtensionSridEnum = "26910"
	GetGeomarksGeomarkIDFileFormatExtensionSridEnumTwentySixThousandNineHundredAndEleven  GetGeomarksGeomarkIDFileFormatExtensionSridEnum = "26911"
)

func (e *GetGeomarksGeomarkIDFileFormatExtensionSridEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4326":
		fallthrough
	case "3005":
		fallthrough
	case "3857":
		fallthrough
	case "26907":
		fallthrough
	case "26908":
		fallthrough
	case "26909":
		fallthrough
	case "26910":
		fallthrough
	case "26911":
		*e = GetGeomarksGeomarkIDFileFormatExtensionSridEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGeomarksGeomarkIDFileFormatExtensionSridEnum: %s", s)
	}
}

type GetGeomarksGeomarkIDFileFormatExtensionQueryParams struct {
	// The srid of the coordinate system the geometry should be converted to.
	Srid *GetGeomarksGeomarkIDFileFormatExtensionSridEnum `queryParam:"style=form,explode=true,name=srid"`
}

type GetGeomarksGeomarkIDFileFormatExtensionRequest struct {
	PathParams  GetGeomarksGeomarkIDFileFormatExtensionPathParams
	QueryParams GetGeomarksGeomarkIDFileFormatExtensionQueryParams
}

type GetGeomarksGeomarkIDFileFormatExtensionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
