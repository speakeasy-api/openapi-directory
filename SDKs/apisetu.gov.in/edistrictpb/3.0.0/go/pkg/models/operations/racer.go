// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RacerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type RacerRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// DSN Number
	Dsn string `json:"DSN"`
}

// RacerRequestBodyFormatEnum - The format of the certificate in response.
type RacerRequestBodyFormatEnum string

const (
	RacerRequestBodyFormatEnumPdf RacerRequestBodyFormatEnum = "pdf"
)

func (e RacerRequestBodyFormatEnum) ToPointer() *RacerRequestBodyFormatEnum {
	return &e
}

func (e *RacerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = RacerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RacerRequestBodyFormatEnum: %v", v)
	}
}

// RacerRequestBody - Request format
type RacerRequestBody struct {
	CertificateParameters *RacerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format RacerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Racer504ApplicationJSONErrorEnum string

const (
	Racer504ApplicationJSONErrorEnumGatewayTimeout Racer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Racer504ApplicationJSONErrorEnum) ToPointer() *Racer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Racer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Racer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Racer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Racer504ApplicationJSONErrorDescriptionEnum string

const (
	Racer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Racer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Racer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Racer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Racer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Racer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Racer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Racer504ApplicationJSON - Gateway timeout
type Racer504ApplicationJSON struct {
	Error            *Racer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Racer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Racer503ApplicationJSONErrorEnum string

const (
	Racer503ApplicationJSONErrorEnumServiceUnavailable Racer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Racer503ApplicationJSONErrorEnum) ToPointer() *Racer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Racer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Racer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Racer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Racer503ApplicationJSONErrorDescriptionEnum string

const (
	Racer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Racer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Racer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Racer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Racer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Racer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Racer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Racer503ApplicationJSON - Service unavailable
type Racer503ApplicationJSON struct {
	Error            *Racer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Racer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Racer502ApplicationJSONErrorEnum string

const (
	Racer502ApplicationJSONErrorEnumBadGatewy Racer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Racer502ApplicationJSONErrorEnum) ToPointer() *Racer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Racer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Racer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Racer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Racer502ApplicationJSONErrorDescriptionEnum string

const (
	Racer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Racer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Racer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Racer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Racer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Racer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Racer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Racer502ApplicationJSON - Bad gateway
type Racer502ApplicationJSON struct {
	Error            *Racer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Racer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Racer500ApplicationJSONErrorEnum string

const (
	Racer500ApplicationJSONErrorEnumInternalServerError Racer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Racer500ApplicationJSONErrorEnum) ToPointer() *Racer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Racer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Racer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Racer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Racer500ApplicationJSONErrorDescriptionEnum string

const (
	Racer500ApplicationJSONErrorDescriptionEnumInternalServerError Racer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Racer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Racer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Racer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Racer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Racer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Racer500ApplicationJSON - Internal server error
type Racer500ApplicationJSON struct {
	Error            *Racer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Racer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Racer404ApplicationJSONErrorEnum string

const (
	Racer404ApplicationJSONErrorEnumRecordNotFound Racer404ApplicationJSONErrorEnum = "record_not_found"
	Racer404ApplicationJSONErrorEnumURLNotFound    Racer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Racer404ApplicationJSONErrorEnum) ToPointer() *Racer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Racer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Racer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Racer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Racer404ApplicationJSONErrorDescriptionEnum string

const (
	Racer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Racer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Racer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Racer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Racer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Racer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Racer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Racer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Racer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Racer404ApplicationJSON - No record found
type Racer404ApplicationJSON struct {
	Error            *Racer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Racer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Racer401ApplicationJSONErrorEnum string

const (
	Racer401ApplicationJSONErrorEnumInvalidAuthentication Racer401ApplicationJSONErrorEnum = "invalid_authentication"
	Racer401ApplicationJSONErrorEnumInvalidAuthorization  Racer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Racer401ApplicationJSONErrorEnum) ToPointer() *Racer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Racer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Racer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Racer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Racer401ApplicationJSONErrorDescriptionEnum string

const (
	Racer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Racer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Racer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Racer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Racer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Racer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Racer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Racer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Racer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Racer401ApplicationJSON - Unauthorized access
type Racer401ApplicationJSON struct {
	Error            *Racer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Racer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Racer400ApplicationJSONErrorEnum string

const (
	Racer400ApplicationJSONErrorEnumMissingParameter Racer400ApplicationJSONErrorEnum = "missing_parameter"
	Racer400ApplicationJSONErrorEnumInvalidParameter Racer400ApplicationJSONErrorEnum = "invalid_parameter"
	Racer400ApplicationJSONErrorEnumInvalidFormat    Racer400ApplicationJSONErrorEnum = "invalid_format"
	Racer400ApplicationJSONErrorEnumInvalidTxnid     Racer400ApplicationJSONErrorEnum = "invalid_txnid"
	Racer400ApplicationJSONErrorEnumInvalidConsentid Racer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Racer400ApplicationJSONErrorEnum) ToPointer() *Racer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Racer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Racer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Racer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Racer400ApplicationJSONErrorDescriptionEnum string

const (
	Racer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Racer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Racer400ApplicationJSONErrorDescriptionEnumBadRequest                              Racer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Racer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Racer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Racer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Racer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Racer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Racer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Racer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Racer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Racer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Racer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Racer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Racer400ApplicationJSON - Bad request
type Racer400ApplicationJSON struct {
	Error            *Racer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Racer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type RacerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Racer400ApplicationJSONObject *Racer400ApplicationJSON
	// Unauthorized access
	Racer401ApplicationJSONObject *Racer401ApplicationJSON
	// No record found
	Racer404ApplicationJSONObject *Racer404ApplicationJSON
	// Internal server error
	Racer500ApplicationJSONObject *Racer500ApplicationJSON
	// Bad gateway
	Racer502ApplicationJSONObject *Racer502ApplicationJSON
	// Service unavailable
	Racer503ApplicationJSONObject *Racer503ApplicationJSON
	// Gateway timeout
	Racer504ApplicationJSONObject *Racer504ApplicationJSON
}
