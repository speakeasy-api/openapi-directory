/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateContainerRecipeRequestBody {
    /**
     * The client token used to make this request idempotent.
     */
    @JsonProperty("clientToken")
    public String clientToken;
    public CreateContainerRecipeRequestBody withClientToken(String clientToken) {
        this.clientToken = clientToken;
        return this;
    }
    
    /**
     * Components for build and test that are included in the container recipe. Recipes require a minimum of one build component, and can have a maximum of 20 build and test components in any combination.
     */
    @JsonProperty("components")
    public org.openapis.openapi.models.shared.ComponentConfiguration[] components;
    public CreateContainerRecipeRequestBody withComponents(org.openapis.openapi.models.shared.ComponentConfiguration[] components) {
        this.components = components;
        return this;
    }
    
    /**
     * The type of container to create.
     */
    @JsonProperty("containerType")
    public CreateContainerRecipeRequestBodyContainerTypeEnum containerType;
    public CreateContainerRecipeRequestBody withContainerType(CreateContainerRecipeRequestBodyContainerTypeEnum containerType) {
        this.containerType = containerType;
        return this;
    }
    
    /**
     * The description of the container recipe.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public CreateContainerRecipeRequestBody withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The Dockerfile template used to build your image as an inline data blob.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dockerfileTemplateData")
    public String dockerfileTemplateData;
    public CreateContainerRecipeRequestBody withDockerfileTemplateData(String dockerfileTemplateData) {
        this.dockerfileTemplateData = dockerfileTemplateData;
        return this;
    }
    
    /**
     * The Amazon S3 URI for the Dockerfile that will be used to build your container image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dockerfileTemplateUri")
    public String dockerfileTemplateUri;
    public CreateContainerRecipeRequestBody withDockerfileTemplateUri(String dockerfileTemplateUri) {
        this.dockerfileTemplateUri = dockerfileTemplateUri;
        return this;
    }
    
    /**
     * Specifies the operating system version for the base image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageOsVersionOverride")
    public String imageOsVersionOverride;
    public CreateContainerRecipeRequestBody withImageOsVersionOverride(String imageOsVersionOverride) {
        this.imageOsVersionOverride = imageOsVersionOverride;
        return this;
    }
    
    /**
     * Defines a custom base AMI and block device mapping configurations of an instance used for building and testing container images.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceConfiguration")
    public CreateContainerRecipeRequestBodyInstanceConfiguration instanceConfiguration;
    public CreateContainerRecipeRequestBody withInstanceConfiguration(CreateContainerRecipeRequestBodyInstanceConfiguration instanceConfiguration) {
        this.instanceConfiguration = instanceConfiguration;
        return this;
    }
    
    /**
     * Identifies which KMS key is used to encrypt the container image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kmsKeyId")
    public String kmsKeyId;
    public CreateContainerRecipeRequestBody withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }
    
    /**
     * The name of the container recipe.
     */
    @JsonProperty("name")
    public String name;
    public CreateContainerRecipeRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The base image for the container recipe.
     */
    @JsonProperty("parentImage")
    public String parentImage;
    public CreateContainerRecipeRequestBody withParentImage(String parentImage) {
        this.parentImage = parentImage;
        return this;
    }
    
    /**
     * Specifies the operating system platform when you use a custom base image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platformOverride")
    public CreateContainerRecipeRequestBodyPlatformOverrideEnum platformOverride;
    public CreateContainerRecipeRequestBody withPlatformOverride(CreateContainerRecipeRequestBodyPlatformOverrideEnum platformOverride) {
        this.platformOverride = platformOverride;
        return this;
    }
    
    /**
     * &lt;p&gt;The semantic version of the container recipe. This version follows the semantic version syntax.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The semantic version has four nodes: &amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.&amp;lt;patch&amp;gt;/&amp;lt;build&amp;gt;. You can assign values for the first three, and can filter on all of them.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Assignment:&lt;/b&gt; For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Patterns:&lt;/b&gt; You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.&lt;/p&gt; &lt;/note&gt;
     */
    @JsonProperty("semanticVersion")
    public String semanticVersion;
    public CreateContainerRecipeRequestBody withSemanticVersion(String semanticVersion) {
        this.semanticVersion = semanticVersion;
        return this;
    }
    
    /**
     * Tags that are attached to the container recipe.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public java.util.Map<String, String> tags;
    public CreateContainerRecipeRequestBody withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * The container repository where the output container image is stored.
     */
    @JsonProperty("targetRepository")
    public CreateContainerRecipeRequestBodyTargetRepository targetRepository;
    public CreateContainerRecipeRequestBody withTargetRepository(CreateContainerRecipeRequestBodyTargetRepository targetRepository) {
        this.targetRepository = targetRepository;
        return this;
    }
    
    /**
     * The working directory for use during build and test workflows.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workingDirectory")
    public String workingDirectory;
    public CreateContainerRecipeRequestBody withWorkingDirectory(String workingDirectory) {
        this.workingDirectory = workingDirectory;
        return this;
    }
    
}
