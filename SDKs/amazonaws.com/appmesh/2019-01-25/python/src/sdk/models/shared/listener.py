"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import healthcheckpolicy as shared_healthcheckpolicy
from ..shared import listenertimeout as shared_listenertimeout
from ..shared import listenertls as shared_listenertls
from ..shared import outlierdetection as shared_outlierdetection
from ..shared import portmapping as shared_portmapping
from ..shared import virtualnodeconnectionpool as shared_virtualnodeconnectionpool
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Listener:
    r"""An object that represents a listener for a virtual node."""
    
    port_mapping: shared_portmapping.PortMapping = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portMapping') }})  
    connection_pool: Optional[shared_virtualnodeconnectionpool.VirtualNodeConnectionPool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectionPool'), 'exclude': lambda f: f is None }})  
    health_check: Optional[shared_healthcheckpolicy.HealthCheckPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('healthCheck'), 'exclude': lambda f: f is None }})  
    outlier_detection: Optional[shared_outlierdetection.OutlierDetection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outlierDetection'), 'exclude': lambda f: f is None }})  
    timeout: Optional[shared_listenertimeout.ListenerTimeout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeout'), 'exclude': lambda f: f is None }})  
    tls: Optional[shared_listenertls.ListenerTLS] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tls'), 'exclude': lambda f: f is None }})  
    