/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class CertificateActions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get all Actions for a Certificate
   *
   * @remarks
   * Returns all Action objects for a Certificate. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.
   *
   * Only type `managed` Certificates can have Actions. For type `uploaded` Certificates the `actions` key will always contain an empty array.
   *
   */
  getCertificatesIdActions(
    req: operations.GetCertificatesIdActionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCertificatesIdActionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCertificatesIdActionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/certificates/{id}/actions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCertificatesIdActionsResponse =
        new operations.GetCertificatesIdActionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionsResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetCertificatesIdActionsActionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get an Action for a Certificate
   *
   * @remarks
   * Returns a specific Action for a Certificate. Only type `managed` Certificates have Actions.
   */
  getCertificatesIdActionsActionId(
    req: operations.GetCertificatesIdActionsActionIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCertificatesIdActionsActionIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCertificatesIdActionsActionIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/certificates/{id}/actions/{action_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCertificatesIdActionsActionIdResponse =
        new operations.GetCertificatesIdActionsActionIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetCertificatesIdActionsActionIdActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retry Issuance or Renewal
   *
   * @remarks
   * Retry a failed Certificate issuance or renewal.
   *
   * Only applicable if the type of the Certificate is `managed` and the issuance or renewal status is `failed`.
   *
   * #### Call specific error codes
   *
   * | Code                                                    | Description                                                               |
   * |---------------------------------------------------------|---------------------------------------------------------------------------|
   * | `caa_record_does_not_allow_ca`                          | CAA record does not allow certificate authority                           |
   * | `ca_dns_validation_failed`                              | Certificate Authority: DNS validation failed                              |
   * | `ca_too_many_authorizations_failed_recently`            | Certificate Authority: Too many authorizations failed recently            |
   * | `ca_too_many_certificates_issued_for_registered_domain` | Certificate Authority: Too many certificates issued for registered domain |
   * | `ca_too_many_duplicate_certificates`                    | Certificate Authority: Too many duplicate certificates                    |
   * | `could_not_verify_domain_delegated_to_zone`             | Could not verify domain delegated to zone                                 |
   * | `dns_zone_not_found`                                    | DNS zone not found                                                        |
   * | `dns_zone_is_secondary_zone`                            | DNS zone is a secondary zone                                              |
   *
   */
  postCertificatesIdActionsRetry(
    req: operations.PostCertificatesIdActionsRetryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostCertificatesIdActionsRetryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostCertificatesIdActionsRetryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/certificates/{id}/actions/retry",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostCertificatesIdActionsRetryResponse =
        new operations.PostCertificatesIdActionsRetryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostCertificatesIdActionsRetryActionResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
