"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import timeseriesfilter as shared_timeseriesfilter
from ..shared import timeseriesfilterratio as shared_timeseriesfilterratio
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TimeSeriesQuery:
    r"""TimeSeriesQuery collects the set of supported methods for querying time series data from the Stackdriver metrics API."""
    
    prometheus_query: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prometheusQuery'), 'exclude': lambda f: f is None }})
    r"""A query used to fetch time series with PromQL."""  
    time_series_filter: Optional[shared_timeseriesfilter.TimeSeriesFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeSeriesFilter'), 'exclude': lambda f: f is None }})
    r"""A filter that defines a subset of time series data that is displayed in a widget. Time series data is fetched using the ListTimeSeries (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) method."""  
    time_series_filter_ratio: Optional[shared_timeseriesfilterratio.TimeSeriesFilterRatio] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeSeriesFilterRatio'), 'exclude': lambda f: f is None }})
    r"""A pair of time series filters that define a ratio computation. The output time series is the pair-wise division of each aligned element from the numerator and denominator time series."""  
    time_series_query_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeSeriesQueryLanguage'), 'exclude': lambda f: f is None }})
    r"""A query used to fetch time series with MQL."""  
    unit_override: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitOverride'), 'exclude': lambda f: f is None }})
    r"""The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the unit (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in MetricDescriptor."""  
    