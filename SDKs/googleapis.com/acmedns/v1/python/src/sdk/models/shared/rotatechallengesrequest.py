"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import acmetxtrecord as shared_acmetxtrecord
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RotateChallengesRequestInput:
    r"""The request message for the RotateChallenges RPC. Requires an access token, a root domain, and either records_to_add or records_to_remove to be populated. Records may be set for multiple subdomains at once to support SAN requests for multiple subdomains in a single domain. By default, ACME TXT record challenges that are older than 30 days will be removed. Set `keep_expired_records` to false if this behavior is undesired. There is a record maximum of 100 records per domain including expired records. Any request sent that would exceed this maximum will result in a FAILED_PRECONDITION error. NEXT ID: 6"""
    
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessToken'), 'exclude': lambda f: f is None }})
    r"""Required. ACME DNS access token. This is a base64 token secret that is procured from the Google Domains website. It authorizes ACME TXT record updates for a domain."""  
    keep_expired_records: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keepExpiredRecords'), 'exclude': lambda f: f is None }})
    r"""Keep records older than 30 days that were used for previous requests."""  
    records_to_add: Optional[list[shared_acmetxtrecord.AcmeTxtRecordInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recordsToAdd'), 'exclude': lambda f: f is None }})
    r"""ACME TXT record challenges to add. Supports multiple challenges on the same FQDN."""  
    records_to_remove: Optional[list[shared_acmetxtrecord.AcmeTxtRecordInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recordsToRemove'), 'exclude': lambda f: f is None }})
    r"""ACME TXT record challenges to remove."""  
    