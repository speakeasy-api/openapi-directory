/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The property by which to sort the results.
 */
export enum CodeScanningListAlertsForEnterpriseSortEnum {
  Created = "created",
  Updated = "updated",
}

export class CodeScanningListAlertsForEnterpriseRequest extends SpeakeasyBase {
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/enterprise-cloud@latest//rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=after" })
  after?: string;

  /**
   * A cursor, as given in the [Link header](https://docs.github.com/enterprise-cloud@latest//rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=before",
  })
  before?: string;

  /**
   * The direction to sort the results by.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=direction",
  })
  direction?: shared.DirectionEnum;

  /**
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=enterprise",
  })
  enterprise: string;

  /**
   * Page number of the results to fetch.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of results per page (max 100).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * The property by which to sort the results.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: CodeScanningListAlertsForEnterpriseSortEnum;

  /**
   * If specified, only code scanning alerts with this state will be returned.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=state" })
  state?: shared.CodeScanningAlertStateEnum;

  /**
   * The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=tool_guid",
  })
  toolGuid?: string;

  /**
   * The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=tool_name",
  })
  toolName?: string;
}

/**
 * Service unavailable
 */
export class CodeScanningListAlertsForEnterprise503ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "documentation_url" })
  documentationUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;
}

export class CodeScanningListAlertsForEnterpriseResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Resource not found
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata({ elemType: shared.CodeScanningOrganizationAlertItems })
  codeScanningOrganizationAlertItems?: shared.CodeScanningOrganizationAlertItems[];

  /**
   * Service unavailable
   */
  @SpeakeasyMetadata()
  codeScanningListAlertsForEnterprise503ApplicationJSONObject?: CodeScanningListAlertsForEnterprise503ApplicationJSON;
}
