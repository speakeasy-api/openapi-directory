/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class MessageFlag {
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("approved_at")
    public OffsetDateTime approvedAt;
    public MessageFlag withApprovedAt(OffsetDateTime approvedAt) {
        this.approvedAt = approvedAt;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public MessageFlag withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonProperty("created_by_automod")
    public Boolean createdByAutomod;
    public MessageFlag withCreatedByAutomod(Boolean createdByAutomod) {
        this.createdByAutomod = createdByAutomod;
        return this;
    }
    
    /**
     * Represents any chat message
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    public java.util.Map<String, Object> message;
    public MessageFlag withMessage(java.util.Map<String, Object> message) {
        this.message = message;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("moderation_result")
    public MessageModerationResult moderationResult;
    public MessageFlag withModerationResult(MessageModerationResult moderationResult) {
        this.moderationResult = moderationResult;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("rejected_at")
    public OffsetDateTime rejectedAt;
    public MessageFlag withRejectedAt(OffsetDateTime rejectedAt) {
        this.rejectedAt = rejectedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("reviewed_at")
    public OffsetDateTime reviewedAt;
    public MessageFlag withReviewedAt(OffsetDateTime reviewedAt) {
        this.reviewedAt = reviewedAt;
        return this;
    }
    
    /**
     * Represents chat user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reviewed_by")
    public java.util.Map<String, Object> reviewedBy;
    public MessageFlag withReviewedBy(java.util.Map<String, Object> reviewedBy) {
        this.reviewedBy = reviewedBy;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public MessageFlag withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Represents chat user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public java.util.Map<String, Object> user;
    public MessageFlag withUser(java.util.Map<String, Object> user) {
        this.user = user;
        return this;
    }
    
}
