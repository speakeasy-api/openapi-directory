"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Purchases:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def purchases_delete(self, request: operations.PurchasesDeleteRequest) -> operations.PurchasesDeleteResponse:
        r"""Removes an existing Purchase."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PurchasesDeleteRequest, base_url, '/v1/purchases/{id}', request)
        
        query_params = utils.get_query_params(operations.PurchasesDeleteRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PurchasesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.purchases_delete_200_application_json_object = out

        return res

    def purchases_get(self) -> operations.PurchasesGetResponse:
        r"""Returns a list of company's Purchases. Supports OData querying protocol.
        Filtering is allowed by \\"entryDate\\" field.
        Ordering is allowed by \\"id\\" field.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/purchases'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PurchasesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PageResultPurchaseQueryDto])
                res.page_result_purchase_query_dto = out

        return res

    def purchases_post(self, request: shared.PurchaseDto) -> operations.PurchasesPostResponse:
        r"""Creates a new Purchase."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/purchases'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PurchasesPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.purchases_post_200_application_json_object = out

        return res

    def purchases_process_batch(self, request: list[shared.BatchItemPurchaseDto]) -> operations.PurchasesProcessBatchResponse:
        r"""Processes a batch of Purchases."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/purchases/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PurchasesProcessBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.purchases_process_batch_200_application_json_object = out

        return res

    def purchases_put(self, request: operations.PurchasesPutRequest) -> operations.PurchasesPutResponse:
        r"""Updates an existing Purchase."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PurchasesPutRequest, base_url, '/v1/purchases/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "purchase_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PurchasesPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.purchases_put_200_application_json_object = out

        return res

    def get_v1_purchases_id_(self, request: operations.GetV1PurchasesIDRequest) -> operations.GetV1PurchasesIDResponse:
        r"""Returns information about a single Purchases."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV1PurchasesIDRequest, base_url, '/v1/purchases/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV1PurchasesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PurchaseDto])
                res.purchase_dto = out

        return res

    