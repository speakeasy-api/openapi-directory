/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AutomaticTerminationModeEnum } from "./automaticterminationmodeenum";
import { SessionBackupModeEnum } from "./sessionbackupmodeenum";
import { SessionPersistenceModeEnum } from "./sessionpersistencemodeenum";
import { StreamingSessionStateEnum } from "./streamingsessionstateenum";
import { StreamingSessionStatusCodeEnum } from "./streamingsessionstatuscodeenum";
import { VolumeConfiguration } from "./volumeconfiguration";
import { VolumeRetentionModeEnum } from "./volumeretentionmodeenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A streaming session is a virtual workstation created using a particular launch profile.
 */
export class StreamingSession extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "automaticTerminationMode" })
  automaticTerminationMode?: AutomaticTerminationModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "backupMode" })
  backupMode?: SessionBackupModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  createdBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ec2InstanceType" })
  ec2InstanceType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "launchProfileId" })
  launchProfileId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "maxBackupsToRetain" })
  maxBackupsToRetain?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ownedBy" })
  ownedBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sessionId" })
  sessionId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sessionPersistenceMode" })
  sessionPersistenceMode?: SessionPersistenceModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "startedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "startedBy" })
  startedBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "startedFromBackupId" })
  startedFromBackupId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: StreamingSessionStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "statusCode" })
  statusCode?: StreamingSessionStatusCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "statusMessage" })
  statusMessage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "stopAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  stopAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "stoppedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  stoppedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "stoppedBy" })
  stoppedBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "streamingImageId" })
  streamingImageId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "terminateAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  terminateAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "updatedBy" })
  updatedBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "volumeConfiguration" })
  @Type(() => VolumeConfiguration)
  volumeConfiguration?: VolumeConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "volumeRetentionMode" })
  volumeRetentionMode?: VolumeRetentionModeEnum;
}
