// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LeaderboardConfigurationScoreOrderEnum string

const (
	LeaderboardConfigurationScoreOrderEnumScoreOrderUnspecified LeaderboardConfigurationScoreOrderEnum = "SCORE_ORDER_UNSPECIFIED"
	LeaderboardConfigurationScoreOrderEnumLargerIsBetter        LeaderboardConfigurationScoreOrderEnum = "LARGER_IS_BETTER"
	LeaderboardConfigurationScoreOrderEnumSmallerIsBetter       LeaderboardConfigurationScoreOrderEnum = "SMALLER_IS_BETTER"
)

func (e *LeaderboardConfigurationScoreOrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SCORE_ORDER_UNSPECIFIED":
		fallthrough
	case "LARGER_IS_BETTER":
		fallthrough
	case "SMALLER_IS_BETTER":
		*e = LeaderboardConfigurationScoreOrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LeaderboardConfigurationScoreOrderEnum: %s", s)
	}
}

// LeaderboardConfiguration - An leaderboard configuration resource.
type LeaderboardConfiguration struct {
	// A leaderboard configuration detail.
	Draft *LeaderboardConfigurationDetail `json:"draft,omitempty"`
	// The ID of the leaderboard.
	ID *string `json:"id,omitempty"`
	// Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#leaderboardConfiguration`.
	Kind *string `json:"kind,omitempty"`
	// A leaderboard configuration detail.
	Published *LeaderboardConfigurationDetail `json:"published,omitempty"`
	// Maximum score that can be posted to this leaderboard.
	ScoreMax *string `json:"scoreMax,omitempty"`
	// Minimum score that can be posted to this leaderboard.
	ScoreMin   *string                                 `json:"scoreMin,omitempty"`
	ScoreOrder *LeaderboardConfigurationScoreOrderEnum `json:"scoreOrder,omitempty"`
	// The token for this resource.
	Token *string `json:"token,omitempty"`
}
