// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

var CreateCommandServerList = []string{
	"https://wireless.twilio.com",
}

type CreateCommandSecurity struct {
	AccountSidAuthToken shared.SchemeAccountSidAuthToken `security:"scheme,type=http,subtype=basic"`
}

// CreateCommandCreateCommandRequestCallbackMethodEnum - The HTTP method we use to call `callback_url`. Can be: `POST` or `GET`, and the default is `POST`.
type CreateCommandCreateCommandRequestCallbackMethodEnum string

const (
	CreateCommandCreateCommandRequestCallbackMethodEnumHead   CreateCommandCreateCommandRequestCallbackMethodEnum = "HEAD"
	CreateCommandCreateCommandRequestCallbackMethodEnumGet    CreateCommandCreateCommandRequestCallbackMethodEnum = "GET"
	CreateCommandCreateCommandRequestCallbackMethodEnumPost   CreateCommandCreateCommandRequestCallbackMethodEnum = "POST"
	CreateCommandCreateCommandRequestCallbackMethodEnumPatch  CreateCommandCreateCommandRequestCallbackMethodEnum = "PATCH"
	CreateCommandCreateCommandRequestCallbackMethodEnumPut    CreateCommandCreateCommandRequestCallbackMethodEnum = "PUT"
	CreateCommandCreateCommandRequestCallbackMethodEnumDelete CreateCommandCreateCommandRequestCallbackMethodEnum = "DELETE"
)

func (e *CreateCommandCreateCommandRequestCallbackMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = CreateCommandCreateCommandRequestCallbackMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCommandCreateCommandRequestCallbackMethodEnum: %s", s)
	}
}

type CreateCommandCreateCommandRequest struct {
	// The HTTP method we use to call `callback_url`. Can be: `POST` or `GET`, and the default is `POST`.
	CallbackMethod *CreateCommandCreateCommandRequestCallbackMethodEnum `form:"name=CallbackMethod"`
	// The URL we call using the `callback_url` when the Command has finished sending, whether the command was delivered or it failed.
	CallbackURL *string `form:"name=CallbackUrl"`
	// The message body of the Command. Can be plain text in text mode or a Base64 encoded byte string in binary mode.
	Command     string                             `form:"name=Command"`
	CommandMode *shared.CommandEnumCommandModeEnum `form:"name=CommandMode"`
	// Whether to request delivery receipt from the recipient. For Commands that request delivery receipt, the Command state transitions to 'delivered' once the server has received a delivery receipt from the device. The default value is `true`.
	DeliveryReceiptRequested *bool `form:"name=DeliveryReceiptRequested"`
	// Whether to include the SID of the command in the message body. Can be: `none`, `start`, or `end`, and the default behavior is `none`. When sending a Command to a SIM in text mode, we can automatically include the SID of the Command in the message body, which could be used to ensure that the device does not process the same Command more than once.  A value of `start` will prepend the message with the Command SID, and `end` will append it to the end, separating the Command SID from the message body with a space. The length of the Command SID is included in the 160 character limit so the SMS body must be 128 characters or less before the Command SID is included.
	IncludeSid *string `form:"name=IncludeSid"`
	// The `sid` or `unique_name` of the [SIM](https://www.twilio.com/docs/wireless/api/sim-resource) to send the Command to.
	Sim *string `form:"name=Sim"`
}

type CreateCommandRequest struct {
	Request   *CreateCommandCreateCommandRequest `request:"mediaType=application/x-www-form-urlencoded"`
	Security  CreateCommandSecurity
	ServerURL *string
}

type CreateCommandResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Created
	WirelessV1Command *shared.WirelessV1Command
}
