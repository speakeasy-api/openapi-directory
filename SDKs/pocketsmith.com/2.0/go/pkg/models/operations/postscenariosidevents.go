// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PostScenariosIDEventsRequestBodyRepeatTypeEnum - The repeat type of the event.
type PostScenariosIDEventsRequestBodyRepeatTypeEnum string

const (
	PostScenariosIDEventsRequestBodyRepeatTypeEnumOnce        PostScenariosIDEventsRequestBodyRepeatTypeEnum = "once"
	PostScenariosIDEventsRequestBodyRepeatTypeEnumDaily       PostScenariosIDEventsRequestBodyRepeatTypeEnum = "daily"
	PostScenariosIDEventsRequestBodyRepeatTypeEnumWeekly      PostScenariosIDEventsRequestBodyRepeatTypeEnum = "weekly"
	PostScenariosIDEventsRequestBodyRepeatTypeEnumFortnightly PostScenariosIDEventsRequestBodyRepeatTypeEnum = "fortnightly"
	PostScenariosIDEventsRequestBodyRepeatTypeEnumMonthly     PostScenariosIDEventsRequestBodyRepeatTypeEnum = "monthly"
	PostScenariosIDEventsRequestBodyRepeatTypeEnumYearly      PostScenariosIDEventsRequestBodyRepeatTypeEnum = "yearly"
	PostScenariosIDEventsRequestBodyRepeatTypeEnumEachWeekday PostScenariosIDEventsRequestBodyRepeatTypeEnum = "each weekday"
)

func (e *PostScenariosIDEventsRequestBodyRepeatTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "once":
		fallthrough
	case "daily":
		fallthrough
	case "weekly":
		fallthrough
	case "fortnightly":
		fallthrough
	case "monthly":
		fallthrough
	case "yearly":
		fallthrough
	case "each weekday":
		*e = PostScenariosIDEventsRequestBodyRepeatTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostScenariosIDEventsRequestBodyRepeatTypeEnum: %s", s)
	}
}

type PostScenariosIDEventsRequestBody struct {
	// The amount of the event. A positive amount is a credit, and a negative amount is a debit.
	Amount float64 `json:"amount"`
	// The unique identifier of the category for the event.
	CategoryID int64 `json:"category_id"`
	// The starting date of the event.
	Date string `json:"date"`
	// A note for the event.
	Note *string `json:"note,omitempty"`
	// The repeat interval of the event.
	RepeatInterval *int64 `json:"repeat_interval,omitempty"`
	// The repeat type of the event.
	RepeatType PostScenariosIDEventsRequestBodyRepeatTypeEnum `json:"repeat_type"`
}

type PostScenariosIDEventsRequest struct {
	RequestBody *PostScenariosIDEventsRequestBody `request:"mediaType=application/json"`
	// The unique identifier of the scenario.
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

type PostScenariosIDEventsResponse struct {
	ContentType string
	// Not Allowed
	Error *shared.Error
	// Success
	Event       *shared.Event
	StatusCode  int
	RawResponse *http.Response
}
