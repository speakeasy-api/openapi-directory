// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

type RackOuterUnitLabelEnum string

const (
	RackOuterUnitLabelEnumMillimeters RackOuterUnitLabelEnum = "Millimeters"
	RackOuterUnitLabelEnumInches      RackOuterUnitLabelEnum = "Inches"
)

func (e *RackOuterUnitLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Millimeters":
		fallthrough
	case "Inches":
		*e = RackOuterUnitLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RackOuterUnitLabelEnum: %s", s)
	}
}

type RackOuterUnitValueEnum string

const (
	RackOuterUnitValueEnumMm RackOuterUnitValueEnum = "mm"
	RackOuterUnitValueEnumIn RackOuterUnitValueEnum = "in"
)

func (e *RackOuterUnitValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "mm":
		fallthrough
	case "in":
		*e = RackOuterUnitValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RackOuterUnitValueEnum: %s", s)
	}
}

type RackOuterUnit struct {
	Label RackOuterUnitLabelEnum `json:"label"`
	Value RackOuterUnitValueEnum `json:"value"`
}

type RackStatusLabelEnum string

const (
	RackStatusLabelEnumReserved   RackStatusLabelEnum = "Reserved"
	RackStatusLabelEnumAvailable  RackStatusLabelEnum = "Available"
	RackStatusLabelEnumPlanned    RackStatusLabelEnum = "Planned"
	RackStatusLabelEnumActive     RackStatusLabelEnum = "Active"
	RackStatusLabelEnumDeprecated RackStatusLabelEnum = "Deprecated"
)

func (e *RackStatusLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Reserved":
		fallthrough
	case "Available":
		fallthrough
	case "Planned":
		fallthrough
	case "Active":
		fallthrough
	case "Deprecated":
		*e = RackStatusLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RackStatusLabelEnum: %s", s)
	}
}

type RackStatusValueEnum string

const (
	RackStatusValueEnumReserved   RackStatusValueEnum = "reserved"
	RackStatusValueEnumAvailable  RackStatusValueEnum = "available"
	RackStatusValueEnumPlanned    RackStatusValueEnum = "planned"
	RackStatusValueEnumActive     RackStatusValueEnum = "active"
	RackStatusValueEnumDeprecated RackStatusValueEnum = "deprecated"
)

func (e *RackStatusValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "reserved":
		fallthrough
	case "available":
		fallthrough
	case "planned":
		fallthrough
	case "active":
		fallthrough
	case "deprecated":
		*e = RackStatusValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RackStatusValueEnum: %s", s)
	}
}

type RackStatus struct {
	Label RackStatusLabelEnum `json:"label"`
	Value RackStatusValueEnum `json:"value"`
}

type RackTypeLabelEnum string

const (
	RackTypeLabelEnumTwoPostFrame       RackTypeLabelEnum = "2-post frame"
	RackTypeLabelEnumFourPostFrame      RackTypeLabelEnum = "4-post frame"
	RackTypeLabelEnumFourPostCabinet    RackTypeLabelEnum = "4-post cabinet"
	RackTypeLabelEnumWallMountedFrame   RackTypeLabelEnum = "Wall-mounted frame"
	RackTypeLabelEnumWallMountedCabinet RackTypeLabelEnum = "Wall-mounted cabinet"
)

func (e *RackTypeLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2-post frame":
		fallthrough
	case "4-post frame":
		fallthrough
	case "4-post cabinet":
		fallthrough
	case "Wall-mounted frame":
		fallthrough
	case "Wall-mounted cabinet":
		*e = RackTypeLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RackTypeLabelEnum: %s", s)
	}
}

type RackTypeValueEnum string

const (
	RackTypeValueEnumTwoPostFrame    RackTypeValueEnum = "2-post-frame"
	RackTypeValueEnumFourPostFrame   RackTypeValueEnum = "4-post-frame"
	RackTypeValueEnumFourPostCabinet RackTypeValueEnum = "4-post-cabinet"
	RackTypeValueEnumWallFrame       RackTypeValueEnum = "wall-frame"
	RackTypeValueEnumWallCabinet     RackTypeValueEnum = "wall-cabinet"
)

func (e *RackTypeValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2-post-frame":
		fallthrough
	case "4-post-frame":
		fallthrough
	case "4-post-cabinet":
		fallthrough
	case "wall-frame":
		fallthrough
	case "wall-cabinet":
		*e = RackTypeValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RackTypeValueEnum: %s", s)
	}
}

type RackType struct {
	Label RackTypeLabelEnum `json:"label"`
	Value RackTypeValueEnum `json:"value"`
}

type RackWidthLabelEnum string

const (
	RackWidthLabelEnumTenInches         RackWidthLabelEnum = "10 inches"
	RackWidthLabelEnumNineteenInches    RackWidthLabelEnum = "19 inches"
	RackWidthLabelEnumTwentyOneInches   RackWidthLabelEnum = "21 inches"
	RackWidthLabelEnumTwentyThreeInches RackWidthLabelEnum = "23 inches"
)

func (e *RackWidthLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "10 inches":
		fallthrough
	case "19 inches":
		fallthrough
	case "21 inches":
		fallthrough
	case "23 inches":
		*e = RackWidthLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RackWidthLabelEnum: %s", s)
	}
}

type RackWidthValueEnum string

const (
	RackWidthValueEnumTen         RackWidthValueEnum = "10"
	RackWidthValueEnumNineteen    RackWidthValueEnum = "19"
	RackWidthValueEnumTwentyOne   RackWidthValueEnum = "21"
	RackWidthValueEnumTwentyThree RackWidthValueEnum = "23"
)

func (e *RackWidthValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "10":
		fallthrough
	case "19":
		fallthrough
	case "21":
		fallthrough
	case "23":
		*e = RackWidthValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RackWidthValueEnum: %s", s)
	}
}

type RackWidth struct {
	Label RackWidthLabelEnum `json:"label"`
	Value RackWidthValueEnum `json:"value"`
}

type Rack struct {
	// A unique tag used to identify this rack
	AssetTag     *string                `json:"asset_tag,omitempty"`
	Comments     *string                `json:"comments,omitempty"`
	Created      *types.Date            `json:"created,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	// Units are numbered top-to-bottom
	DescUnits   *bool   `json:"desc_units,omitempty"`
	DeviceCount *int64  `json:"device_count,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
	// Locally-assigned identifier
	FacilityID  *string          `json:"facility_id,omitempty"`
	Group       *NestedRackGroup `json:"group,omitempty"`
	ID          *int64           `json:"id,omitempty"`
	LastUpdated *time.Time       `json:"last_updated,omitempty"`
	Name        string           `json:"name"`
	// Outer dimension of rack (depth)
	OuterDepth *int64         `json:"outer_depth,omitempty"`
	OuterUnit  *RackOuterUnit `json:"outer_unit,omitempty"`
	// Outer dimension of rack (width)
	OuterWidth     *int64          `json:"outer_width,omitempty"`
	PowerfeedCount *int64          `json:"powerfeed_count,omitempty"`
	Role           *NestedRackRole `json:"role,omitempty"`
	Serial         *string         `json:"serial,omitempty"`
	Site           NestedSite      `json:"site"`
	Status         *RackStatus     `json:"status,omitempty"`
	Tags           []string        `json:"tags,omitempty"`
	Tenant         *NestedTenant   `json:"tenant,omitempty"`
	Type           *RackType       `json:"type,omitempty"`
	// Height in rack units
	UHeight *int64     `json:"u_height,omitempty"`
	Width   *RackWidth `json:"width,omitempty"`
}
