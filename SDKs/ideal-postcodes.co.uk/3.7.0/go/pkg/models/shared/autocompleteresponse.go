// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type AutocompleteResponseCodeEnum string

const (
	AutocompleteResponseCodeEnumTwoThousand AutocompleteResponseCodeEnum = "2000"
)

func (e *AutocompleteResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = AutocompleteResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AutocompleteResponseCodeEnum: %s", s)
	}
}

type AutocompleteResponseMessageEnum string

const (
	AutocompleteResponseMessageEnumSuccess AutocompleteResponseMessageEnum = "Success"
)

func (e *AutocompleteResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = AutocompleteResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AutocompleteResponseMessageEnum: %s", s)
	}
}

type AutocompleteResponseResultHitsType string

const (
	AutocompleteResponseResultHitsTypeAddressSuggestion   AutocompleteResponseResultHitsType = "AddressSuggestion"
	AutocompleteResponseResultHitsTypeUkAddressSuggestion AutocompleteResponseResultHitsType = "UkAddressSuggestion"
)

type AutocompleteResponseResultHits struct {
	AddressSuggestion   *AddressSuggestion
	UkAddressSuggestion *UkAddressSuggestion

	Type AutocompleteResponseResultHitsType
}

func CreateAutocompleteResponseResultHitsAddressSuggestion(addressSuggestion AddressSuggestion) AutocompleteResponseResultHits {
	typ := AutocompleteResponseResultHitsTypeAddressSuggestion

	return AutocompleteResponseResultHits{
		AddressSuggestion: &addressSuggestion,
		Type:              typ,
	}
}

func CreateAutocompleteResponseResultHitsUkAddressSuggestion(ukAddressSuggestion UkAddressSuggestion) AutocompleteResponseResultHits {
	typ := AutocompleteResponseResultHitsTypeUkAddressSuggestion

	return AutocompleteResponseResultHits{
		UkAddressSuggestion: &ukAddressSuggestion,
		Type:                typ,
	}
}

func (u *AutocompleteResponseResultHits) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	addressSuggestion := new(AddressSuggestion)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&addressSuggestion); err == nil {
		u.AddressSuggestion = addressSuggestion
		u.Type = AutocompleteResponseResultHitsTypeAddressSuggestion
		return nil
	}

	ukAddressSuggestion := new(UkAddressSuggestion)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&ukAddressSuggestion); err == nil {
		u.UkAddressSuggestion = ukAddressSuggestion
		u.Type = AutocompleteResponseResultHitsTypeUkAddressSuggestion
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AutocompleteResponseResultHits) MarshalJSON() ([]byte, error) {
	if u.AddressSuggestion != nil {
		return json.Marshal(u.AddressSuggestion)
	}

	if u.UkAddressSuggestion != nil {
		return json.Marshal(u.UkAddressSuggestion)
	}

	return nil, nil
}

type AutocompleteResponseResult struct {
	Hits []AutocompleteResponseResultHits `json:"hits"`
}

// AutocompleteResponse - Success
type AutocompleteResponse struct {
	Code    AutocompleteResponseCodeEnum    `json:"code"`
	Message AutocompleteResponseMessageEnum `json:"message"`
	Result  AutocompleteResponseResult      `json:"result"`
}
