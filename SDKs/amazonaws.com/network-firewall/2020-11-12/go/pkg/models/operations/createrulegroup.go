// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateRuleGroupXAmzTargetEnum
type CreateRuleGroupXAmzTargetEnum string

const (
	CreateRuleGroupXAmzTargetEnumNetworkFirewall20201112CreateRuleGroup CreateRuleGroupXAmzTargetEnum = "NetworkFirewall_20201112.CreateRuleGroup"
)

func (e *CreateRuleGroupXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NetworkFirewall_20201112.CreateRuleGroup":
		*e = CreateRuleGroupXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRuleGroupXAmzTargetEnum: %s", s)
	}
}

type CreateRuleGroupHeaders struct {
	XAmzAlgorithm     *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateRuleGroupXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateRuleGroupRequest struct {
	Headers CreateRuleGroupHeaders
	Request shared.CreateRuleGroupRequest `request:"mediaType=application/json"`
}

type CreateRuleGroupResponse struct {
	ContentType string
	// Success
	CreateRuleGroupResponse *shared.CreateRuleGroupResponse
	// InsufficientCapacityException
	InsufficientCapacityException interface{}
	// InternalServerError
	InternalServerError interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
