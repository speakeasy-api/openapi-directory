// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type AnalyticsCrashCountsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AnalyticsCrashCountsRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// Last date time in data in ISO 8601 date time format.
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// Start date time in data in ISO 8601 date time format.
	Start time.Time `queryParam:"style=form,explode=true,name=start"`
	// To select specific application versions
	Versions []string `queryParam:"style=pipeDelimited,explode=true,name=versions"`
}

// AnalyticsCrashCountsDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type AnalyticsCrashCountsDefaultApplicationJSONErrorCodeEnum int64

const (
	AnalyticsCrashCountsDefaultApplicationJSONErrorCodeEnumFourHundred         AnalyticsCrashCountsDefaultApplicationJSONErrorCodeEnum = 400
	AnalyticsCrashCountsDefaultApplicationJSONErrorCodeEnumFourHundredAndThree AnalyticsCrashCountsDefaultApplicationJSONErrorCodeEnum = 403
	AnalyticsCrashCountsDefaultApplicationJSONErrorCodeEnumFiveHundred         AnalyticsCrashCountsDefaultApplicationJSONErrorCodeEnum = 500
)

func (e AnalyticsCrashCountsDefaultApplicationJSONErrorCodeEnum) ToPointer() *AnalyticsCrashCountsDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AnalyticsCrashCountsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 403:
		fallthrough
	case 500:
		*e = AnalyticsCrashCountsDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsCrashCountsDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AnalyticsCrashCountsDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *AnalyticsCrashCountsDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed.
	Message *string `json:"message,omitempty"`
}

// AnalyticsCrashCountsDefaultApplicationJSON - Error
type AnalyticsCrashCountsDefaultApplicationJSON struct {
	Error *AnalyticsCrashCountsDefaultApplicationJSONError `json:"error,omitempty"`
}

type AnalyticsCrashCounts200ApplicationJSONCrashes struct {
	// Count of the object.
	Count *int64 `json:"count,omitempty"`
	// The ISO 8601 datetime.
	Datetime *string `json:"datetime,omitempty"`
}

// AnalyticsCrashCounts200ApplicationJSON - Count of crashes by day in the time range and total crashes over the time range.
type AnalyticsCrashCounts200ApplicationJSON struct {
	// Total crash count.
	Count *int64 `json:"count,omitempty"`
	// The total crash count for day.
	Crashes []AnalyticsCrashCounts200ApplicationJSONCrashes `json:"crashes,omitempty"`
}

type AnalyticsCrashCountsResponse struct {
	// Count of crashes by day in the time range and total crashes over the time range.
	AnalyticsCrashCounts200ApplicationJSONObject *AnalyticsCrashCounts200ApplicationJSON
	// Error code with reason.
	AnalyticsCrashCountsDefaultApplicationJSONObject *AnalyticsCrashCountsDefaultApplicationJSON
	ContentType                                      string
	StatusCode                                       int
	RawResponse                                      *http.Response
}
