// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// ListAuditTasksTaskStatusEnum - A filter to limit the output to audits with the specified completion status: can be one of "IN_PROGRESS", "COMPLETED", "FAILED", or "CANCELED".
type ListAuditTasksTaskStatusEnum string

const (
	ListAuditTasksTaskStatusEnumInProgress ListAuditTasksTaskStatusEnum = "IN_PROGRESS"
	ListAuditTasksTaskStatusEnumCompleted  ListAuditTasksTaskStatusEnum = "COMPLETED"
	ListAuditTasksTaskStatusEnumFailed     ListAuditTasksTaskStatusEnum = "FAILED"
	ListAuditTasksTaskStatusEnumCanceled   ListAuditTasksTaskStatusEnum = "CANCELED"
)

func (e ListAuditTasksTaskStatusEnum) ToPointer() *ListAuditTasksTaskStatusEnum {
	return &e
}

func (e *ListAuditTasksTaskStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IN_PROGRESS":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "FAILED":
		fallthrough
	case "CANCELED":
		*e = ListAuditTasksTaskStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAuditTasksTaskStatusEnum: %v", v)
	}
}

// ListAuditTasksTaskTypeEnum - A filter to limit the output to the specified type of audit: can be one of "ON_DEMAND_AUDIT_TASK" or "SCHEDULED__AUDIT_TASK".
type ListAuditTasksTaskTypeEnum string

const (
	ListAuditTasksTaskTypeEnumOnDemandAuditTask  ListAuditTasksTaskTypeEnum = "ON_DEMAND_AUDIT_TASK"
	ListAuditTasksTaskTypeEnumScheduledAuditTask ListAuditTasksTaskTypeEnum = "SCHEDULED_AUDIT_TASK"
)

func (e ListAuditTasksTaskTypeEnum) ToPointer() *ListAuditTasksTaskTypeEnum {
	return &e
}

func (e *ListAuditTasksTaskTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ON_DEMAND_AUDIT_TASK":
		fallthrough
	case "SCHEDULED_AUDIT_TASK":
		*e = ListAuditTasksTaskTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAuditTasksTaskTypeEnum: %v", v)
	}
}

type ListAuditTasksRequest struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The end of the time period.
	EndTime time.Time `queryParam:"style=form,explode=true,name=endTime"`
	// The maximum number of results to return at one time. The default is 25.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// The token for the next set of results.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
	// The beginning of the time period. Audit information is retained for a limited time (90 days). Requesting a start time prior to what is retained results in an "InvalidRequestException".
	StartTime time.Time `queryParam:"style=form,explode=true,name=startTime"`
	// A filter to limit the output to audits with the specified completion status: can be one of "IN_PROGRESS", "COMPLETED", "FAILED", or "CANCELED".
	TaskStatus *ListAuditTasksTaskStatusEnum `queryParam:"style=form,explode=true,name=taskStatus"`
	// A filter to limit the output to the specified type of audit: can be one of "ON_DEMAND_AUDIT_TASK" or "SCHEDULED__AUDIT_TASK".
	TaskType *ListAuditTasksTaskTypeEnum `queryParam:"style=form,explode=true,name=taskType"`
}

type ListAuditTasksResponse struct {
	ContentType string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListAuditTasksResponse *shared.ListAuditTasksResponse
	StatusCode             int
	RawResponse            *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
