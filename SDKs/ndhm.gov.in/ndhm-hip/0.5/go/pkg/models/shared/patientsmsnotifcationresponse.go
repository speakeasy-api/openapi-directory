// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type PatientSMSNotifcationResponseStatusEnum string

const (
	PatientSMSNotifcationResponseStatusEnumAcknowledged PatientSMSNotifcationResponseStatusEnum = "ACKNOWLEDGED"
	PatientSMSNotifcationResponseStatusEnumErrored      PatientSMSNotifcationResponseStatusEnum = "ERRORED"
)

func (e PatientSMSNotifcationResponseStatusEnum) ToPointer() *PatientSMSNotifcationResponseStatusEnum {
	return &e
}

func (e *PatientSMSNotifcationResponseStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACKNOWLEDGED":
		fallthrough
	case "ERRORED":
		*e = PatientSMSNotifcationResponseStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientSMSNotifcationResponseStatusEnum: %v", v)
	}
}

type PatientSMSNotifcationResponse struct {
	Error *Error `json:"error,omitempty"`
	// a nonce, unique for each HTTP request
	RequestID string                                   `json:"requestId"`
	Resp      RequestReference                         `json:"resp"`
	Status    *PatientSMSNotifcationResponseStatusEnum `json:"status,omitempty"`
	// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
	Timestamp time.Time `json:"timestamp"`
}
