"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import filekey as shared_filekey
from ..shared import userfilekeylist as shared_userfilekeylist
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CompleteUploadRequestResolutionStrategyEnum(str, Enum):
    r"""Node conflict resolution strategy:
    
    * `autorename`
    
    * `overwrite`
    
    * `fail`
    """
    AUTORENAME = 'autorename'
    OVERWRITE = 'overwrite'
    FAIL = 'fail'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CompleteUploadRequest:
    r"""The body must be empty if public upload token is used.
    
    The `resolutionStrategy` in that case will be always `autorename`
    """
    
    file_key: Optional[shared_filekey.FileKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileKey'), 'exclude': lambda f: f is None }})
    r"""File key information"""  
    file_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileName'), 'exclude': lambda f: f is None }})
    r"""New file name to store with"""  
    keep_share_links: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keepShareLinks'), 'exclude': lambda f: f is None }})
    r"""Preserve Download Share Links and point them to the new node."""  
    resolution_strategy: Optional[CompleteUploadRequestResolutionStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resolutionStrategy'), 'exclude': lambda f: f is None }})
    r"""Node conflict resolution strategy:
    
    * `autorename`
    
    * `overwrite`
    
    * `fail`
    """  
    user_file_key_list: Optional[shared_userfilekeylist.UserFileKeyList] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userFileKeyList'), 'exclude': lambda f: f is None }})
    r"""Mandatory for encrypted shares"""  
    