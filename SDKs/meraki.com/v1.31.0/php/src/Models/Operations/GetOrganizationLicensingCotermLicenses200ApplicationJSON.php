<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class GetOrganizationLicensingCotermLicenses200ApplicationJSON
{
    /**
     * When the license was claimed into the organization
     * 
     * @var ?\DateTime $claimedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('claimedAt')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $claimedAt = null;
    
    /**
     * The counts of the license by model type
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensingCotermLicenses200ApplicationJSONCounts> $counts
     */
	#[\JMS\Serializer\Annotation\SerializedName('counts')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensingCotermLicenses200ApplicationJSONCounts>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $counts = null;
    
    /**
     * The duration (term length) of the license, measured in days
     * 
     * @var ?int $duration
     */
	#[\JMS\Serializer\Annotation\SerializedName('duration')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $duration = null;
    
    /**
     * The editions of the license for each relevant product type
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensingCotermLicenses200ApplicationJSONEditions> $editions
     */
	#[\JMS\Serializer\Annotation\SerializedName('editions')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensingCotermLicenses200ApplicationJSONEditions>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $editions = null;
    
    /**
     * Flag to indicate if the license is expired
     * 
     * @var ?bool $expired
     */
	#[\JMS\Serializer\Annotation\SerializedName('expired')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $expired = null;
    
    /**
     * Flag to indicated that the license is invalidated
     * 
     * @var ?bool $invalidated
     */
	#[\JMS\Serializer\Annotation\SerializedName('invalidated')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $invalidated = null;
    
    /**
     * When the license was invalidated. Will be null for active licenses
     * 
     * @var ?\DateTime $invalidatedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('invalidatedAt')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $invalidatedAt = null;
    
    /**
     * The key of the license
     * 
     * @var ?string $key
     */
	#[\JMS\Serializer\Annotation\SerializedName('key')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $key = null;
    
    /**
     * The operation mode of the license when it was claimed
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensingCotermLicenses200ApplicationJSONModeEnum $mode
     */
	#[\JMS\Serializer\Annotation\SerializedName('mode')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\GetOrganizationLicensingCotermLicenses200ApplicationJSONModeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GetOrganizationLicensingCotermLicenses200ApplicationJSONModeEnum $mode = null;
    
    /**
     * The ID of the organization that the license is claimed in
     * 
     * @var ?string $organizationId
     */
	#[\JMS\Serializer\Annotation\SerializedName('organizationId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $organizationId = null;
    
    /**
     * When the license's term began (approximately the date when the license was created)
     * 
     * @var ?\DateTime $startedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('startedAt')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $startedAt = null;
    
	public function __construct()
	{
		$this->claimedAt = null;
		$this->counts = null;
		$this->duration = null;
		$this->editions = null;
		$this->expired = null;
		$this->invalidated = null;
		$this->invalidatedAt = null;
		$this->key = null;
		$this->mode = null;
		$this->organizationId = null;
		$this->startedAt = null;
	}
}
