"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import documentresponse as shared_documentresponse
from typing import Optional


@dataclasses.dataclass
class CreateorupdatepartialdocumentRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    data_entity_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'dataEntityName', 'style': 'simple', 'explode': False }})
    r"""Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses."""  
    request_body: dict[str, str] = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""JSON with the fields to be updated."""  
    schema: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_schema', 'style': 'form', 'explode': True }})
    r"""Name of the schema the document to be created needs to be compliant with."""  
    

@dataclasses.dataclass
class CreateorupdatepartialdocumentResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    document_response: Optional[shared_documentresponse.DocumentResponse] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    