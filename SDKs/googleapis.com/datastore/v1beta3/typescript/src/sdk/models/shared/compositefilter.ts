/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Filter } from "./filter";
import { Expose, Type } from "class-transformer";

/**
 * The operator for combining multiple filters.
 */
export enum CompositeFilterOpEnum {
  OperatorUnspecified = "OPERATOR_UNSPECIFIED",
  And = "AND",
  Or = "OR",
}

/**
 * A filter that merges multiple other filters using the given operator.
 */
export class CompositeFilter extends SpeakeasyBase {
  /**
   * The list of filters to combine. Requires: * At least one filter is present.
   */
  @SpeakeasyMetadata({ elemType: Filter })
  @Expose({ name: "filters" })
  @Type(() => Filter)
  filters?: Filter[];

  /**
   * The operator for combining multiple filters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "op" })
  op?: CompositeFilterOpEnum;
}
