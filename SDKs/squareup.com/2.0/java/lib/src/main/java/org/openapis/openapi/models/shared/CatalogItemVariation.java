/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CatalogItemVariation - An item variation (i.e., product) in the Catalog object model. Each item
 * may have a maximum of 250 item variations.
 */
public class CatalogItemVariation {
    /**
     * If the `CatalogItem` that owns this item variation is of type
     * `APPOINTMENTS_SERVICE`, a bool representing whether this service is available for booking.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_for_booking")
    public Boolean availableForBooking;
    public CatalogItemVariation withAvailableForBooking(Boolean availableForBooking) {
        this.availableForBooking = availableForBooking;
        return this;
    }
    
    /**
     * If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
     * is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
     * 
     * This value is always an integer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inventory_alert_threshold")
    public Long inventoryAlertThreshold;
    public CatalogItemVariation withInventoryAlertThreshold(Long inventoryAlertThreshold) {
        this.inventoryAlertThreshold = inventoryAlertThreshold;
        return this;
    }
    
    /**
     * Indicates whether the item variation displays an alert when its inventory quantity is less than or equal
     * to its `inventory_alert_threshold`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inventory_alert_type")
    public String inventoryAlertType;
    public CatalogItemVariation withInventoryAlertType(String inventoryAlertType) {
        this.inventoryAlertType = inventoryAlertType;
        return this;
    }
    
    /**
     * The ID of the `CatalogItem` associated with this item variation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_id")
    public String itemId;
    public CatalogItemVariation withItemId(String itemId) {
        this.itemId = itemId;
        return this;
    }
    
    /**
     * List of item option values associated with this item variation. Listed
     * in the same order as the item options of the parent item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_option_values")
    public CatalogItemOptionValueForItemVariation[] itemOptionValues;
    public CatalogItemVariation withItemOptionValues(CatalogItemOptionValueForItemVariation[] itemOptionValues) {
        this.itemOptionValues = itemOptionValues;
        return this;
    }
    
    /**
     * Per-location price and inventory overrides.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_overrides")
    public ItemVariationLocationOverrides[] locationOverrides;
    public CatalogItemVariation withLocationOverrides(ItemVariationLocationOverrides[] locationOverrides) {
        this.locationOverrides = locationOverrides;
        return this;
    }
    
    /**
     * ID of the \u2018CatalogMeasurementUnit\u2019 that is used to measure the quantity
     * sold of this item variation. If left unset, the item will be sold in
     * whole quantities.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("measurement_unit_id")
    public String measurementUnitId;
    public CatalogItemVariation withMeasurementUnitId(String measurementUnitId) {
        this.measurementUnitId = measurementUnitId;
        return this;
    }
    
    /**
     * The item variation's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public CatalogItemVariation withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal
     * for each item variation within a parent `CatalogItem` is set according to the item variations's
     * position. On reads, the value is not guaranteed to be sequential or unique.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ordinal")
    public Long ordinal;
    public CatalogItemVariation withOrdinal(Long ordinal) {
        this.ordinal = ordinal;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_money")
    public Money priceMoney;
    public CatalogItemVariation withPriceMoney(Money priceMoney) {
        this.priceMoney = priceMoney;
        return this;
    }
    
    /**
     * Indicates whether the item variation's price is fixed or determined at the time
     * of sale.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricing_type")
    public String pricingType;
    public CatalogItemVariation withPricingType(String pricingType) {
        this.pricingType = pricingType;
        return this;
    }
    
    /**
     * If the `CatalogItem` that owns this item variation is of type
     * `APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For
     * example, a 30 minute appointment would have the value `1800000`, which is equal to
     * 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_duration")
    public Long serviceDuration;
    public CatalogItemVariation withServiceDuration(Long serviceDuration) {
        this.serviceDuration = serviceDuration;
        return this;
    }
    
    /**
     * The item variation's SKU, if any. This is a searchable attribute for use in applicable query filters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    public String sku;
    public CatalogItemVariation withSku(String sku) {
        this.sku = sku;
        return this;
    }
    
    /**
     * Whether stock is counted directly on this variation (TRUE) or only on its components (FALSE).
     * For backward compatibility missing values will be interpreted as TRUE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stockable")
    public Boolean stockable;
    public CatalogItemVariation withStockable(Boolean stockable) {
        this.stockable = stockable;
        return this;
    }
    
    /**
     * Represents the rule of conversion between a stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
     * and a non-stockable sell-by or receive-by `CatalogItemVariation` that
     * share the same underlying stock.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stockable_conversion")
    public CatalogStockConversion stockableConversion;
    public CatalogItemVariation withStockableConversion(CatalogStockConversion stockableConversion) {
        this.stockableConversion = stockableConversion;
        return this;
    }
    
    /**
     * Tokens of employees that can perform the service represented by this variation. Only valid for
     * variations of type `APPOINTMENTS_SERVICE`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("team_member_ids")
    public String[] teamMemberIds;
    public CatalogItemVariation withTeamMemberIds(String[] teamMemberIds) {
        this.teamMemberIds = teamMemberIds;
        return this;
    }
    
    /**
     * If `true`, inventory tracking is active for the variation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("track_inventory")
    public Boolean trackInventory;
    public CatalogItemVariation withTrackInventory(Boolean trackInventory) {
        this.trackInventory = trackInventory;
        return this;
    }
    
    /**
     * The universal product code (UPC) of the item variation, if any. This is a searchable attribute for use in applicable query filters.
     * 
     * The value of this attribute should be a number of 12-14 digits long.  This restriction is enforced on the Square Seller Dashboard,
     * Square Point of Sale or Retail Point of Sale apps, where this attribute shows in the GTIN field. If a non-compliant UPC value is assigned
     * to this attribute using the API, the value is not editable on the Seller Dashboard, Square Point of Sale or Retail Point of Sale apps
     * unless it is updated to fit the expected format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upc")
    public String upc;
    public CatalogItemVariation withUpc(String upc) {
        this.upc = upc;
        return this;
    }
    
    /**
     * Arbitrary user metadata to associate with the item variation. This attribute value length is of Unicode code points.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_data")
    public String userData;
    public CatalogItemVariation withUserData(String userData) {
        this.userData = userData;
        return this;
    }
    
}
