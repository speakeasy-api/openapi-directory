// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ParameterDetailsPathParams struct {
	// Id of the parameter to manage
	ParameterID string `pathParam:"style=simple,explode=false,name=parameterId"`
}

type ParameterDetailsRequest struct {
	PathParams ParameterDetailsPathParams
}

// ParameterDetails200ApplicationJSONActionEnum - The id of the action
type ParameterDetails200ApplicationJSONActionEnum string

const (
	ParameterDetails200ApplicationJSONActionEnumParameterDetails ParameterDetails200ApplicationJSONActionEnum = "parameterDetails"
)

func (e *ParameterDetails200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "parameterDetails":
		*e = ParameterDetails200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ParameterDetails200ApplicationJSONActionEnum: %s", s)
	}
}

// ParameterDetails200ApplicationJSONData - Parameters
type ParameterDetails200ApplicationJSONData struct {
	Parameters []shared.Parameter `json:"parameters"`
}

// ParameterDetails200ApplicationJSONResultEnum - Result of the request
type ParameterDetails200ApplicationJSONResultEnum string

const (
	ParameterDetails200ApplicationJSONResultEnumSuccess ParameterDetails200ApplicationJSONResultEnum = "success"
	ParameterDetails200ApplicationJSONResultEnumError   ParameterDetails200ApplicationJSONResultEnum = "error"
)

func (e *ParameterDetails200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = ParameterDetails200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ParameterDetails200ApplicationJSONResultEnum: %s", s)
	}
}

// ParameterDetails200ApplicationJSON - Settings
type ParameterDetails200ApplicationJSON struct {
	// The id of the action
	Action ParameterDetails200ApplicationJSONActionEnum `json:"action"`
	// Parameters
	Data ParameterDetails200ApplicationJSONData `json:"data"`
	// Id of the parameter
	ID string `json:"id"`
	// Result of the request
	Result ParameterDetails200ApplicationJSONResultEnum `json:"result"`
}

type ParameterDetailsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Settings
	ParameterDetails200ApplicationJSONObject *ParameterDetails200ApplicationJSON
}
