/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Tasklists {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes the authenticated user's specified task list.
   */
  tasksTasklistsDelete(
    req: operations.TasksTasklistsDeleteRequest,
    security: operations.TasksTasklistsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TasksTasklistsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TasksTasklistsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tasks/v1/users/@me/lists/{tasklist}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TasksTasklistsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TasksTasklistsDeleteResponse =
        new operations.TasksTasklistsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Returns the authenticated user's specified task list.
   */
  tasksTasklistsGet(
    req: operations.TasksTasklistsGetRequest,
    security: operations.TasksTasklistsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TasksTasklistsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TasksTasklistsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tasks/v1/users/@me/lists/{tasklist}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TasksTasklistsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TasksTasklistsGetResponse =
        new operations.TasksTasklistsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.taskList = utils.objectToClass(httpRes?.data, shared.TaskList);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new task list and adds it to the authenticated user's task lists.
   */
  tasksTasklistsInsert(
    req: operations.TasksTasklistsInsertRequest,
    security: operations.TasksTasklistsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TasksTasklistsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TasksTasklistsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/tasks/v1/users/@me/lists";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "taskList",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TasksTasklistsInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TasksTasklistsInsertResponse =
        new operations.TasksTasklistsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.taskList = utils.objectToClass(httpRes?.data, shared.TaskList);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns all the authenticated user's task lists.
   */
  tasksTasklistsList(
    req: operations.TasksTasklistsListRequest,
    security: operations.TasksTasklistsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TasksTasklistsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TasksTasklistsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/tasks/v1/users/@me/lists";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TasksTasklistsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TasksTasklistsListResponse =
        new operations.TasksTasklistsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.taskLists = utils.objectToClass(
              httpRes?.data,
              shared.TaskLists
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the authenticated user's specified task list. This method supports patch semantics.
   */
  tasksTasklistsPatch(
    req: operations.TasksTasklistsPatchRequest,
    security: operations.TasksTasklistsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TasksTasklistsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TasksTasklistsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tasks/v1/users/@me/lists/{tasklist}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "taskList",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TasksTasklistsPatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TasksTasklistsPatchResponse =
        new operations.TasksTasklistsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.taskList = utils.objectToClass(httpRes?.data, shared.TaskList);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the authenticated user's specified task list.
   */
  tasksTasklistsUpdate(
    req: operations.TasksTasklistsUpdateRequest,
    security: operations.TasksTasklistsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TasksTasklistsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TasksTasklistsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tasks/v1/users/@me/lists/{tasklist}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "taskList",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TasksTasklistsUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TasksTasklistsUpdateResponse =
        new operations.TasksTasklistsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.taskList = utils.objectToClass(httpRes?.data, shared.TaskList);
          }
          break;
      }

      return res;
    });
  }
}
