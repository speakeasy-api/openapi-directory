"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import paginated_repositories as shared_paginated_repositories
from ..shared import security as shared_security
from enum import Enum
from typing import Any, Optional


@dataclasses.dataclass
class GetRepositoriesWorkspaceSecurity:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Authorization' }})  
    basic: Optional[shared_security.SchemeBasic] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    oauth2: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class GetRepositoriesWorkspaceRoleEnum(str, Enum):
    r"""Filters the result based on the authenticated user's role on each repository.
    
    * **member**: returns repositories to which the user has explicit read access
    * **contributor**: returns repositories to which the user has explicit write access
    * **admin**: returns repositories to which the user has explicit administrator access
    * **owner**: returns all repositories owned by the current user
    """
    ADMIN = 'admin'
    CONTRIBUTOR = 'contributor'
    MEMBER = 'member'
    OWNER = 'owner'


@dataclasses.dataclass
class GetRepositoriesWorkspaceRequest:
    
    workspace: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workspace', 'style': 'simple', 'explode': False }})
    r"""This can either be the workspace ID (slug) or the workspace UUID
    surrounded by curly-braces, for example: `{workspace UUID}`.
    """  
    q: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering)."""  
    role: Optional[GetRepositoriesWorkspaceRoleEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'role', 'style': 'form', 'explode': True }})
    r"""Filters the result based on the authenticated user's role on each repository.
    
    * **member**: returns repositories to which the user has explicit read access
    * **contributor**: returns repositories to which the user has explicit write access
    * **admin**: returns repositories to which the user has explicit administrator access
    * **owner**: returns all repositories owned by the current user
    """  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering)."""  
    

@dataclasses.dataclass
class GetRepositoriesWorkspaceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""If the specified account does not exist."""  
    paginated_repositories: Optional[shared_paginated_repositories.PaginatedRepositories] = dataclasses.field(default=None)
    r"""The repositories owned by the specified account."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    