/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Transaction - Details of all financial transactions recorded in the commerce or point of sale system are added to the Transactions data type. For example, payments, service charges, and fees.
 * 
 * You can use data from the Transactions endpoints to calculate key metrics, such as:  
 * - Transaction volumes  
 * - Average transaction volume  
 * - Average transaction value  
 * - Returns  
 * - Payouts
 * 
 * Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&amp;dataType=commerce-transactions) for this data type.
 */
public class Transaction {
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdDate")
    public String createdDate;

    public Transaction withCreatedDate(String createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;

    public Transaction withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * A unique, persistent identifier for this record
     */
    @JsonProperty("id")
    public String id;

    public Transaction withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    public String modifiedDate;

    public Transaction withModifiedDate(String modifiedDate) {
        this.modifiedDate = modifiedDate;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceCreatedDate")
    public String sourceCreatedDate;

    public Transaction withSourceCreatedDate(String sourceCreatedDate) {
        this.sourceCreatedDate = sourceCreatedDate;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    public String sourceModifiedDate;

    public Transaction withSourceModifiedDate(String sourceModifiedDate) {
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }
    
    /**
     * Non-standardised transaction type data from the commerce platform
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subType")
    public String subType;

    public Transaction withSubType(String subType) {
        this.subType = subType;
        return this;
    }
    
    /**
     * The total transaction amount
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    public Double totalAmount;

    public Transaction withTotalAmount(Double totalAmount) {
        this.totalAmount = totalAmount;
        return this;
    }
    
    /**
     * Link to the source event which triggered this transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionSourceRef")
    public TransactionSourceRef transactionSourceRef;

    public Transaction withTransactionSourceRef(TransactionSourceRef transactionSourceRef) {
        this.transactionSourceRef = transactionSourceRef;
        return this;
    }
    
    /**
     * The type of the platform transaction:  
     * - `Unknown`  
     * - `FailedPayout` \u2014 Failed transfer of funds from the seller's merchant account to their bank account.  
     * - `Payment` \u2014 Credit and debit card payments.  
     * - `PaymentFee` \u2014 Payment provider's fee on each card payment.  
     * - `PaymentFeeRefund` \u2014 Payment provider's fee that has been refunded to the seller.  
     * - `Payout` \u2014 Transfer of funds from the seller's merchant account to their bank account.  
     * - `Refund` \u2014 Refunds to a customer's credit or debit card.  
     * - `Transfer` \u2014 Secure transfer of funds to the seller's bank account.  
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public TransactionTypeEnum type;

    public Transaction withType(TransactionTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public Transaction(@JsonProperty("id") String id) {
        this.id = id;
  }
}
