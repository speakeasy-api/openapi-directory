"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DescribeVpnConnectionsResult = exports.DescribeVpnConnectionsResultVpnConnections = exports.DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry = exports.DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnum = exports.DescribeVpnConnectionsResultVpnConnectionsTypeEnum = exports.DescribeVpnConnectionsResultVpnConnectionsTags = exports.DescribeVpnConnectionsResultVpnConnectionsStateEnum = exports.DescribeVpnConnectionsResultVpnConnectionsRoutes = exports.DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum = exports.DescribeVpnConnectionsResultVpnConnectionsRoutesSourceEnum = exports.DescribeVpnConnectionsResultVpnConnectionsOptions = exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions = exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2IntegrityAlgorithms = exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2EncryptionAlgorithms = exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2DHGroupNumbers = exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1IntegrityAlgorithms = exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1EncryptionAlgorithms = exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1DHGroupNumbers = exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptions = exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptionsCloudWatchLogOptions = exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsIkeVersions = exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIpVersionEnum = exports.DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The current state of the gateway association.
 */
var DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum;
(function (DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum) {
    DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum["Associated"] = "associated";
    DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum["NotAssociated"] = "not-associated";
    DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum["Associating"] = "associating";
    DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum["Disassociating"] = "disassociating";
})(DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum = exports.DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum || (exports.DescribeVpnConnectionsResultVpnConnectionsGatewayAssociationStateEnum = {}));
/**
 * Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
 */
var DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIpVersionEnum;
(function (DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIpVersionEnum) {
    DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIpVersionEnum["Ipv4"] = "ipv4";
    DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIpVersionEnum["Ipv6"] = "ipv6";
})(DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIpVersionEnum = exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIpVersionEnum || (exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelInsideIpVersionEnum = {}));
/**
 * The internet key exchange (IKE) version permitted for the VPN tunnel.
 */
var DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsIkeVersions = /** @class */ (function (_super) {
    __extends(DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsIkeVersions, _super);
    function DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsIkeVersions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsIkeVersions.prototype, "value", void 0);
    return DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsIkeVersions;
}(utils_1.SpeakeasyBase));
exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsIkeVersions = DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsIkeVersions;
/**
 * Options for sending VPN tunnel logs to CloudWatch.
 */
var DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptionsCloudWatchLogOptions = /** @class */ (function (_super) {
    __extends(DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptionsCloudWatchLogOptions, _super);
    function DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptionsCloudWatchLogOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptionsCloudWatchLogOptions.prototype, "logEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptionsCloudWatchLogOptions.prototype, "logGroupArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptionsCloudWatchLogOptions.prototype, "logOutputFormat", void 0);
    return DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptionsCloudWatchLogOptions;
}(utils_1.SpeakeasyBase));
exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptionsCloudWatchLogOptions = DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptionsCloudWatchLogOptions;
/**
 * Options for logging VPN tunnel activity.
 */
var DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptions = /** @class */ (function (_super) {
    __extends(DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptions, _super);
    function DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptionsCloudWatchLogOptions)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptions.prototype, "cloudWatchLogOptions", void 0);
    return DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptions;
}(utils_1.SpeakeasyBase));
exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptions = DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptions;
/**
 * The Diffie-Hellmann group number for phase 1 IKE negotiations.
 */
var DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1DHGroupNumbers = /** @class */ (function (_super) {
    __extends(DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1DHGroupNumbers, _super);
    function DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1DHGroupNumbers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1DHGroupNumbers.prototype, "value", void 0);
    return DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1DHGroupNumbers;
}(utils_1.SpeakeasyBase));
exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1DHGroupNumbers = DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1DHGroupNumbers;
/**
 * The encryption algorithm for phase 1 IKE negotiations.
 */
var DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1EncryptionAlgorithms = /** @class */ (function (_super) {
    __extends(DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1EncryptionAlgorithms, _super);
    function DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1EncryptionAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1EncryptionAlgorithms.prototype, "value", void 0);
    return DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1EncryptionAlgorithms;
}(utils_1.SpeakeasyBase));
exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1EncryptionAlgorithms = DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1EncryptionAlgorithms;
/**
 * The integrity algorithm for phase 1 IKE negotiations.
 */
var DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1IntegrityAlgorithms = /** @class */ (function (_super) {
    __extends(DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1IntegrityAlgorithms, _super);
    function DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1IntegrityAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1IntegrityAlgorithms.prototype, "value", void 0);
    return DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1IntegrityAlgorithms;
}(utils_1.SpeakeasyBase));
exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1IntegrityAlgorithms = DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1IntegrityAlgorithms;
/**
 * The Diffie-Hellmann group number for phase 2 IKE negotiations.
 */
var DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2DHGroupNumbers = /** @class */ (function (_super) {
    __extends(DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2DHGroupNumbers, _super);
    function DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2DHGroupNumbers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2DHGroupNumbers.prototype, "value", void 0);
    return DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2DHGroupNumbers;
}(utils_1.SpeakeasyBase));
exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2DHGroupNumbers = DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2DHGroupNumbers;
/**
 * The encryption algorithm for phase 2 IKE negotiations.
 */
var DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2EncryptionAlgorithms = /** @class */ (function (_super) {
    __extends(DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2EncryptionAlgorithms, _super);
    function DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2EncryptionAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2EncryptionAlgorithms.prototype, "value", void 0);
    return DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2EncryptionAlgorithms;
}(utils_1.SpeakeasyBase));
exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2EncryptionAlgorithms = DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2EncryptionAlgorithms;
/**
 * The integrity algorithm for phase 2 IKE negotiations.
 */
var DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2IntegrityAlgorithms = /** @class */ (function (_super) {
    __extends(DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2IntegrityAlgorithms, _super);
    function DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2IntegrityAlgorithms() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2IntegrityAlgorithms.prototype, "value", void 0);
    return DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2IntegrityAlgorithms;
}(utils_1.SpeakeasyBase));
exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2IntegrityAlgorithms = DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2IntegrityAlgorithms;
/**
 * The VPN tunnel options.
 */
var DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions = /** @class */ (function (_super) {
    __extends(DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions, _super);
    function DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "dpdTimeoutAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "dpdTimeoutSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsIkeVersions,
        }),
        __metadata("design:type", Array)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "ikeVersions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsLogOptions)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "logOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "outsideIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1DHGroupNumbers,
        }),
        __metadata("design:type", Array)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "phase1DHGroupNumbers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1EncryptionAlgorithms,
        }),
        __metadata("design:type", Array)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "phase1EncryptionAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase1IntegrityAlgorithms,
        }),
        __metadata("design:type", Array)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "phase1IntegrityAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "phase1LifetimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2DHGroupNumbers,
        }),
        __metadata("design:type", Array)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "phase2DHGroupNumbers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2EncryptionAlgorithms,
        }),
        __metadata("design:type", Array)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "phase2EncryptionAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptionsPhase2IntegrityAlgorithms,
        }),
        __metadata("design:type", Array)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "phase2IntegrityAlgorithms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "phase2LifetimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "preSharedKey", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "rekeyFuzzPercentage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "rekeyMarginTimeSeconds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "replayWindowSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "startupAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "tunnelInsideCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions.prototype, "tunnelInsideIpv6Cidr", void 0);
    return DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions;
}(utils_1.SpeakeasyBase));
exports.DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions = DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions;
/**
 * The VPN connection options.
 */
var DescribeVpnConnectionsResultVpnConnectionsOptions = /** @class */ (function (_super) {
    __extends(DescribeVpnConnectionsResultVpnConnectionsOptions, _super);
    function DescribeVpnConnectionsResultVpnConnectionsOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeVpnConnectionsResultVpnConnectionsOptions.prototype, "enableAcceleration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptions.prototype, "localIpv4NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptions.prototype, "localIpv6NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptions.prototype, "outsideIpAddressType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptions.prototype, "remoteIpv4NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptions.prototype, "remoteIpv6NetworkCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeVpnConnectionsResultVpnConnectionsOptions.prototype, "staticRoutesOnly", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptions.prototype, "transportTransitGatewayAttachmentId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsOptions.prototype, "tunnelInsideIpVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpnConnectionsResultVpnConnectionsOptionsTunnelOptions,
        }),
        __metadata("design:type", Array)
    ], DescribeVpnConnectionsResultVpnConnectionsOptions.prototype, "tunnelOptions", void 0);
    return DescribeVpnConnectionsResultVpnConnectionsOptions;
}(utils_1.SpeakeasyBase));
exports.DescribeVpnConnectionsResultVpnConnectionsOptions = DescribeVpnConnectionsResultVpnConnectionsOptions;
/**
 * Indicates how the routes were provided.
 */
var DescribeVpnConnectionsResultVpnConnectionsRoutesSourceEnum;
(function (DescribeVpnConnectionsResultVpnConnectionsRoutesSourceEnum) {
    DescribeVpnConnectionsResultVpnConnectionsRoutesSourceEnum["Static"] = "Static";
})(DescribeVpnConnectionsResultVpnConnectionsRoutesSourceEnum = exports.DescribeVpnConnectionsResultVpnConnectionsRoutesSourceEnum || (exports.DescribeVpnConnectionsResultVpnConnectionsRoutesSourceEnum = {}));
/**
 * The current state of the static route.
 */
var DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum;
(function (DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum) {
    DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum["Pending"] = "pending";
    DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum["Available"] = "available";
    DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum["Deleting"] = "deleting";
    DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum["Deleted"] = "deleted";
})(DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum = exports.DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum || (exports.DescribeVpnConnectionsResultVpnConnectionsRoutesStateEnum = {}));
/**
 * Describes a static route for a VPN connection.
 */
var DescribeVpnConnectionsResultVpnConnectionsRoutes = /** @class */ (function (_super) {
    __extends(DescribeVpnConnectionsResultVpnConnectionsRoutes, _super);
    function DescribeVpnConnectionsResultVpnConnectionsRoutes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsRoutes.prototype, "destinationCidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsRoutes.prototype, "source", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsRoutes.prototype, "state", void 0);
    return DescribeVpnConnectionsResultVpnConnectionsRoutes;
}(utils_1.SpeakeasyBase));
exports.DescribeVpnConnectionsResultVpnConnectionsRoutes = DescribeVpnConnectionsResultVpnConnectionsRoutes;
/**
 * The current state of the VPN connection.
 */
var DescribeVpnConnectionsResultVpnConnectionsStateEnum;
(function (DescribeVpnConnectionsResultVpnConnectionsStateEnum) {
    DescribeVpnConnectionsResultVpnConnectionsStateEnum["Pending"] = "pending";
    DescribeVpnConnectionsResultVpnConnectionsStateEnum["Available"] = "available";
    DescribeVpnConnectionsResultVpnConnectionsStateEnum["Deleting"] = "deleting";
    DescribeVpnConnectionsResultVpnConnectionsStateEnum["Deleted"] = "deleted";
})(DescribeVpnConnectionsResultVpnConnectionsStateEnum = exports.DescribeVpnConnectionsResultVpnConnectionsStateEnum || (exports.DescribeVpnConnectionsResultVpnConnectionsStateEnum = {}));
/**
 * Describes a tag.
 */
var DescribeVpnConnectionsResultVpnConnectionsTags = /** @class */ (function (_super) {
    __extends(DescribeVpnConnectionsResultVpnConnectionsTags, _super);
    function DescribeVpnConnectionsResultVpnConnectionsTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsTags.prototype, "value", void 0);
    return DescribeVpnConnectionsResultVpnConnectionsTags;
}(utils_1.SpeakeasyBase));
exports.DescribeVpnConnectionsResultVpnConnectionsTags = DescribeVpnConnectionsResultVpnConnectionsTags;
/**
 * The type of VPN connection.
 */
var DescribeVpnConnectionsResultVpnConnectionsTypeEnum;
(function (DescribeVpnConnectionsResultVpnConnectionsTypeEnum) {
    DescribeVpnConnectionsResultVpnConnectionsTypeEnum["Ipsec1"] = "ipsec.1";
})(DescribeVpnConnectionsResultVpnConnectionsTypeEnum = exports.DescribeVpnConnectionsResultVpnConnectionsTypeEnum || (exports.DescribeVpnConnectionsResultVpnConnectionsTypeEnum = {}));
/**
 * The status of the VPN tunnel.
 */
var DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnum;
(function (DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnum) {
    DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnum["Up"] = "UP";
    DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnum["Down"] = "DOWN";
})(DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnum = exports.DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnum || (exports.DescribeVpnConnectionsResultVpnConnectionsVgwTelemetryStatusEnum = {}));
/**
 * Describes telemetry for a VPN tunnel.
 */
var DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry = /** @class */ (function (_super) {
    __extends(DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry, _super);
    function DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry.prototype, "acceptedRouteCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry.prototype, "certificateArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry.prototype, "lastStatusChange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry.prototype, "outsideIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry.prototype, "statusMessage", void 0);
    return DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry;
}(utils_1.SpeakeasyBase));
exports.DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry = DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry;
/**
 * Describes a VPN connection.
 */
var DescribeVpnConnectionsResultVpnConnections = /** @class */ (function (_super) {
    __extends(DescribeVpnConnectionsResultVpnConnections, _super);
    function DescribeVpnConnectionsResultVpnConnections() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnections.prototype, "category", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnections.prototype, "coreNetworkArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnections.prototype, "coreNetworkAttachmentArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnections.prototype, "customerGatewayConfiguration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnections.prototype, "customerGatewayId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnections.prototype, "gatewayAssociationState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeVpnConnectionsResultVpnConnectionsOptions)
    ], DescribeVpnConnectionsResultVpnConnections.prototype, "options", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpnConnectionsResultVpnConnectionsRoutes,
        }),
        __metadata("design:type", Array)
    ], DescribeVpnConnectionsResultVpnConnections.prototype, "routes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnections.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpnConnectionsResultVpnConnectionsTags,
        }),
        __metadata("design:type", Array)
    ], DescribeVpnConnectionsResultVpnConnections.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnections.prototype, "transitGatewayId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnections.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeVpnConnectionsResultVpnConnectionsVgwTelemetry,
        }),
        __metadata("design:type", Array)
    ], DescribeVpnConnectionsResultVpnConnections.prototype, "vgwTelemetry", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnections.prototype, "vpnConnectionId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeVpnConnectionsResultVpnConnections.prototype, "vpnGatewayId", void 0);
    return DescribeVpnConnectionsResultVpnConnections;
}(utils_1.SpeakeasyBase));
exports.DescribeVpnConnectionsResultVpnConnections = DescribeVpnConnectionsResultVpnConnections;
/**
 * Contains the output of DescribeVpnConnections.
 */
var DescribeVpnConnectionsResult = /** @class */ (function (_super) {
    __extends(DescribeVpnConnectionsResult, _super);
    function DescribeVpnConnectionsResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: DescribeVpnConnectionsResultVpnConnections }),
        __metadata("design:type", Array)
    ], DescribeVpnConnectionsResult.prototype, "vpnConnections", void 0);
    return DescribeVpnConnectionsResult;
}(utils_1.SpeakeasyBase));
exports.DescribeVpnConnectionsResult = DescribeVpnConnectionsResult;
