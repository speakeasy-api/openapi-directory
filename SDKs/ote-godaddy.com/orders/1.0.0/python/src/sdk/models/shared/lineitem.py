"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import lineitempricing as shared_lineitempricing
from ..shared import lineitemtaxcollector as shared_lineitemtaxcollector
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LineItemPeriodUnitEnum(str, Enum):
    r"""The unit of time that periodCount is measured in"""
    MONTH = 'MONTH'
    QUARTER = 'QUARTER'
    SEMI_ANNUAL = 'SEMI_ANNUAL'
    YEAR = 'YEAR'
    ONE_TIME = 'ONE_TIME'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LineItem:
    
    label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})
    r"""Human readable description of the current product"""  
    pricing: shared_lineitempricing.LineItemPricing = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricing') }})  
    quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity') }})
    r"""Number of the current product included in the specified order"""  
    domains: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domains'), 'exclude': lambda f: f is None }})
    r"""A collection of domain names purchased if the current product is domain"""  
    period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})  
    period_unit: Optional[LineItemPeriodUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periodUnit'), 'exclude': lambda f: f is None }})
    r"""The unit of time that periodCount is measured in"""  
    pfid: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pfid'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the current product"""  
    tax_collector: Optional[shared_lineitemtaxcollector.LineItemTaxCollector] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCollector'), 'exclude': lambda f: f is None }})  
    