"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoscalerStatusDetails = exports.AutoscalerStatusDetailsTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The type of error, warning, or notice returned. Current set of possible values: - ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state). - BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group. - CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas. - CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling. - CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels. - MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group. - MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling. - MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer. - MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved. - MODE_ONLY_UP (WARNING): Autoscaling is in the "Autoscale only out" mode. The autoscaler can add instances but not remove any. - MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it. - NOT_ENOUGH_QUOTA_AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances. - REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region. - SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist. - UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate. - ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout. New values might be added in the future. Some of the values might not be available in all API versions.
 */
var AutoscalerStatusDetailsTypeEnum;
(function (AutoscalerStatusDetailsTypeEnum) {
    AutoscalerStatusDetailsTypeEnum["AllInstancesUnhealthy"] = "ALL_INSTANCES_UNHEALTHY";
    AutoscalerStatusDetailsTypeEnum["BackendServiceDoesNotExist"] = "BACKEND_SERVICE_DOES_NOT_EXIST";
    AutoscalerStatusDetailsTypeEnum["CappedAtMaxNumReplicas"] = "CAPPED_AT_MAX_NUM_REPLICAS";
    AutoscalerStatusDetailsTypeEnum["CustomMetricDataPointsTooSparse"] = "CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE";
    AutoscalerStatusDetailsTypeEnum["CustomMetricInvalid"] = "CUSTOM_METRIC_INVALID";
    AutoscalerStatusDetailsTypeEnum["MinEqualsMax"] = "MIN_EQUALS_MAX";
    AutoscalerStatusDetailsTypeEnum["MissingCustomMetricDataPoints"] = "MISSING_CUSTOM_METRIC_DATA_POINTS";
    AutoscalerStatusDetailsTypeEnum["MissingLoadBalancingDataPoints"] = "MISSING_LOAD_BALANCING_DATA_POINTS";
    AutoscalerStatusDetailsTypeEnum["ModeOff"] = "MODE_OFF";
    AutoscalerStatusDetailsTypeEnum["ModeOnlyScaleOut"] = "MODE_ONLY_SCALE_OUT";
    AutoscalerStatusDetailsTypeEnum["ModeOnlyUp"] = "MODE_ONLY_UP";
    AutoscalerStatusDetailsTypeEnum["MoreThanOneBackendService"] = "MORE_THAN_ONE_BACKEND_SERVICE";
    AutoscalerStatusDetailsTypeEnum["NotEnoughQuotaAvailable"] = "NOT_ENOUGH_QUOTA_AVAILABLE";
    AutoscalerStatusDetailsTypeEnum["RegionResourceStockout"] = "REGION_RESOURCE_STOCKOUT";
    AutoscalerStatusDetailsTypeEnum["ScalingTargetDoesNotExist"] = "SCALING_TARGET_DOES_NOT_EXIST";
    AutoscalerStatusDetailsTypeEnum["ScheduledInstancesGreaterThanAutoscalerMax"] = "SCHEDULED_INSTANCES_GREATER_THAN_AUTOSCALER_MAX";
    AutoscalerStatusDetailsTypeEnum["ScheduledInstancesLessThanAutoscalerMin"] = "SCHEDULED_INSTANCES_LESS_THAN_AUTOSCALER_MIN";
    AutoscalerStatusDetailsTypeEnum["Unknown"] = "UNKNOWN";
    AutoscalerStatusDetailsTypeEnum["UnsupportedMaxRateLoadBalancingConfiguration"] = "UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION";
    AutoscalerStatusDetailsTypeEnum["ZoneResourceStockout"] = "ZONE_RESOURCE_STOCKOUT";
})(AutoscalerStatusDetailsTypeEnum = exports.AutoscalerStatusDetailsTypeEnum || (exports.AutoscalerStatusDetailsTypeEnum = {}));
var AutoscalerStatusDetails = /** @class */ (function (_super) {
    __extends(AutoscalerStatusDetails, _super);
    function AutoscalerStatusDetails() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "message" }),
        __metadata("design:type", String)
    ], AutoscalerStatusDetails.prototype, "message", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], AutoscalerStatusDetails.prototype, "type", void 0);
    return AutoscalerStatusDetails;
}(utils_1.SpeakeasyBase));
exports.AutoscalerStatusDetails = AutoscalerStatusDetails;
