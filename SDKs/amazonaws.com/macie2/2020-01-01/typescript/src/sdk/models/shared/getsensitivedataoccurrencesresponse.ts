/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { DetectedDataDetails } from "./detecteddatadetails";
import { RevealRequestStatusEnum } from "./revealrequeststatusenum";
import { Expose, Transform } from "class-transformer";

/**
 * Success
 */
export class GetSensitiveDataOccurrencesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: string;

  @SpeakeasyMetadata({ elemType: DetectedDataDetails, elemDepth: 2 })
  @Expose({ name: "sensitiveDataOccurrences" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, DetectedDataDetails[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], DetectedDataDetails);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  sensitiveDataOccurrences?: Record<string, DetectedDataDetails[]>;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: RevealRequestStatusEnum;
}
