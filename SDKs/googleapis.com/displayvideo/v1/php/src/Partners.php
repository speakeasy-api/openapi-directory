<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Partners 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Bulk edits targeting options under a single partner. The operation will delete the assigned targeting options provided in BulkEditPartnerAssignedTargetingOptionsRequest.deleteRequests and then create the assigned targeting options provided in BulkEditPartnerAssignedTargetingOptionsRequest.createRequests .
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersBulkEditPartnerAssignedTargetingOptionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersBulkEditPartnerAssignedTargetingOptionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersBulkEditPartnerAssignedTargetingOptionsResponse
     */
	public function displayvideoPartnersBulkEditPartnerAssignedTargetingOptions(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersBulkEditPartnerAssignedTargetingOptionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersBulkEditPartnerAssignedTargetingOptionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersBulkEditPartnerAssignedTargetingOptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}:bulkEditPartnerAssignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersBulkEditPartnerAssignedTargetingOptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bulkEditPartnerAssignedTargetingOptionsRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersBulkEditPartnerAssignedTargetingOptionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersBulkEditPartnerAssignedTargetingOptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkEditPartnerAssignedTargetingOptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkEditPartnerAssignedTargetingOptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new channel. Returns the newly created channel if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsCreateResponse
     */
	public function displayvideoPartnersChannelsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/channels', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Channel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists channels for a partner or advertiser.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsListResponse
     */
	public function displayvideoPartnersChannelsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/channels', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listChannelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListChannelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a channel. Returns the updated channel if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsPatchResponse
     */
	public function displayvideoPartnersChannelsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/channels/{channelId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Channel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bulk edits sites under a single channel. The operation will delete the sites provided in BulkEditSitesRequest.deleted_sites and then create the sites provided in BulkEditSitesRequest.created_sites.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesBulkEditRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesBulkEditSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesBulkEditResponse
     */
	public function displayvideoPartnersChannelsSitesBulkEdit(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesBulkEditRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesBulkEditSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesBulkEditResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/channels/{channelId}/sites:bulkEdit', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesBulkEditRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bulkEditSitesRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesBulkEditRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesBulkEditResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkEditSitesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkEditSitesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a site from a channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesDeleteResponse
     */
	public function displayvideoPartnersChannelsSitesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/channels/{channelId}/sites/{urlOrAppId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists sites in a channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesListResponse
     */
	public function displayvideoPartnersChannelsSitesList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/channels/{channelId}/sites', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSitesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSitesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replaces all of the sites under a single channel. The operation will replace the sites under a channel with the sites provided in ReplaceSitesRequest.new_sites.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesReplaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesReplaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesReplaceResponse
     */
	public function displayvideoPartnersChannelsSitesReplace(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesReplaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesReplaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesReplaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/channels/{channelId}/sites:replace', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesReplaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "replaceSitesRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesReplaceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersChannelsSitesReplaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->replaceSitesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReplaceSitesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a partner.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersGetResponse
     */
	public function displayvideoPartnersGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->partner = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Partner', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists partners that are accessible to the current user. The order is defined by the order_by parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersListResponse
     */
	public function displayvideoPartnersList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPartnersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPartnersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Assigns a targeting option to a partner. Returns the assigned targeting option if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateResponse
     */
	public function displayvideoPartnersTargetingTypesAssignedTargetingOptionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/targetingTypes/{targetingType}/assignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assignedTargetingOptionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignedTargetingOption = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignedTargetingOption', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an assigned targeting option from a partner.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteResponse
     */
	public function displayvideoPartnersTargetingTypesAssignedTargetingOptionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a single targeting option assigned to a partner.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetResponse
     */
	public function displayvideoPartnersTargetingTypesAssignedTargetingOptionsGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignedTargetingOption = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignedTargetingOption', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the targeting options assigned to a partner.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListResponse
     */
	public function displayvideoPartnersTargetingTypesAssignedTargetingOptionsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/targetingTypes/{targetingType}/assignedTargetingOptions', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPartnerAssignedTargetingOptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPartnerAssignedTargetingOptionsResponse', 'json');
            }
        }

        return $response;
    }
}