// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GETListsNamesFormatSecurity struct {
	APIKey shared.SchemeAPIKey `security:"scheme,type=apiKey,subtype=query"`
}

// GETListsNamesFormatFormatEnum
type GETListsNamesFormatFormatEnum string

const (
	GETListsNamesFormatFormatEnumJSON  GETListsNamesFormatFormatEnum = "json"
	GETListsNamesFormatFormatEnumJsonp GETListsNamesFormatFormatEnum = "jsonp"
)

func (e *GETListsNamesFormatFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "jsonp":
		*e = GETListsNamesFormatFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListsNamesFormatFormatEnum: %s", s)
	}
}

type GETListsNamesFormatPathParams struct {
	Format GETListsNamesFormatFormatEnum `pathParam:"style=simple,explode=false,name=format"`
}

type GETListsNamesFormatQueryParams struct {
	APIKey *string `queryParam:"style=form,explode=true,name=api-key"`
}

type GETListsNamesFormatRequest struct {
	PathParams  GETListsNamesFormatPathParams
	QueryParams GETListsNamesFormatQueryParams
	Security    GETListsNamesFormatSecurity
}

type GETListsNamesFormat200ApplicationJSONResults struct {
	DisplayName         *string `json:"display_name,omitempty"`
	ListName            *string `json:"list_name,omitempty"`
	ListNameEncoded     *string `json:"list_name_encoded,omitempty"`
	NewestPublishedDate *string `json:"newest_published_date,omitempty"`
	OldestPublishedDate *string `json:"oldest_published_date,omitempty"`
	Updated             *string `json:"updated,omitempty"`
}

type GETListsNamesFormat200ApplicationJSON struct {
	Copyright  *string                                        `json:"copyright,omitempty"`
	NumResults *int64                                         `json:"num_results,omitempty"`
	Results    []GETListsNamesFormat200ApplicationJSONResults `json:"results,omitempty"`
	Status     *string                                        `json:"status,omitempty"`
}

type GETListsNamesFormatResponse struct {
	ContentType                                 string
	GETListsNamesFormat200ApplicationJSONObject *GETListsNamesFormat200ApplicationJSON
	StatusCode                                  int
	RawResponse                                 *http.Response
}
