"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import amendment as shared_amendment
from ..shared import electronicpaymentoptions as shared_electronicpaymentoptions
from ..shared import externalpaymentoptions as shared_externalpaymentoptions
from ..shared import invoiceprocessingoptions as shared_invoiceprocessingoptions
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AmendRequestAmendOptions:
    r"""Use the `AmendOptions` container to specify billing options, such as invoice generation and when to process payments."""
    
    application_order: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationOrder'), 'exclude': lambda f: f is None }})
    r"""The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.
    
    **Note:**
      - This field is only available if you have the Invoice Settlement feature enabled and set the `X-Zuora-WSDL-Version` request header to `107` or later.
      - This field is valid only if the `applyCredit` field is set to `true`.
      - If no value is specified for this field, the default priority order is used, [\"CreditMemo\", \"UnappliedPayment\"], to apply credit memos first and then apply unapplied payments.
      - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `[\"CreditMemo\"]`, only credit memos are used to apply to invoices.
    """  
    apply_credit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplyCredit'), 'exclude': lambda f: f is None }})
    r"""Whether to automatically apply credit memos or unapplied payments, or both to an invoice.
    
    If the value is `true`, the credit memo or unapplied payment, or both will be automatically applied to the invoice. If no value is specified or the value is `false`, no action is taken.
    
    **Note**: This field is only available if you have the Invoice Settlement feature enabled and set the `X-Zuora-WSDL-Version` request header to `107` or later.
    """  
    apply_credit_balance: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplyCreditBalance'), 'exclude': lambda f: f is None }})  
    electronic_payment_options: Optional[shared_electronicpaymentoptions.ElectronicPaymentOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ElectronicPaymentOptions'), 'exclude': lambda f: f is None }})  
    external_payment_options: Optional[shared_externalpaymentoptions.ExternalPaymentOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExternalPaymentOptions'), 'exclude': lambda f: f is None }})  
    generate_invoice: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GenerateInvoice'), 'exclude': lambda f: f is None }})
    r"""Determines whether to generate an invoice to immediately bill the customer for a new product or changes of Terms And Conditions. As a best practice, set this value to true to prevent any errors that might occur if the account has a balance.
    
    **Note:** 
    * Even if you do not include this field in the amend action, Zuora still parses this field with the default value - `true`, when processing the amend action. If you do not want to generate the invoice after creating the New Product or Term And Condition amendment, set the value of this field to `false` in the request.
    * If `EnablePreviewMode=true` is specified in the PreviewOptions container, then preview mode will be enabled and an invoice will not be generated, regardless of whether `GenerateInvoice` is specified as `true` or `false`.
    """  
    invoice_processing_options: Optional[shared_invoiceprocessingoptions.InvoiceProcessingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceProcessingOptions'), 'exclude': lambda f: f is None }})  
    process_payments: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProcessPayments'), 'exclude': lambda f: f is None }})
    r"""Determines whether to collect payment against the invoice generated by the amend() call.
    
    **Note:** 
    * Even if you do not include this field in the amend action, Zuora still parses this field with the default value, true, when processing the amend action. If you do not want to collect payment against the generated invoice after creating the New Product or Term And Condition amendment, set the value of this field to `false` in the request. 
    * If you have the [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) feature enabled, Zuora does not support using this field to collect payments against invoices.
    
    If a temporary error that Zuora cannot create or submit a payment to the gateway is seen, Zuora will automatically retry the action to collect the payment.
    
    You can contact [Zuora Global Support](https://support.zuora.com/) to set the maximum number of retries that Zuora can perform. The number can range from 0 to 2 with a default value of 0. However, retrying the request can make the API call take longer than expected. Zuora does not guarantee the retry could be completed within the timeout limit. 
    
    **Note**: The retry mechanism does not support the preview mode of the amend() call.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AmendRequestPreviewOptions:
    r"""Use the `PreviewOptions` container to preview an amendment before committing its changes to a subscription.
    You can use a preview to provide a quote of the new charges to a customer before the customer commits to the amended subscription. 
    For example, make an Amend call with an Amendment object that removes an existing rate plan, 
    another Amendment object that adds a new rate plan, and turn on the preview options.
    """
    
    enable_preview_mode: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnablePreviewMode'), 'exclude': lambda f: f is None }})
    r"""Determines whether to create an amendment or display a preview of the change."""  
    include_existing_draft_invoice_items: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncludeExistingDraftInvoiceItems'), 'exclude': lambda f: f is None }})
    r"""Specifies whether to include draft invoice items in amendment previews."""  
    number_of_periods: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfPeriods'), 'exclude': lambda f: f is None }})
    r"""Indicates the number of invoice periods to show in a preview."""  
    preview_through_term_end: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreviewThroughTermEnd'), 'exclude': lambda f: f is None }})
    r"""Request to preview the charge through the end of the subscription term."""  
    preview_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreviewType'), 'exclude': lambda f: f is None }})
    r"""The type of preview you will receive from a preview request."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AmendRequest:
    
    amendments: list[shared_amendment.Amendment] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amendments') }})
    r"""The `Amendment` object holds the changes that you want to make to the Subscription specified by the `SubscriptionId`,
    including its `RatePlan`, `RatePlanCharge`, and `RatePlanChargeTier`.
    """  
    amend_options: Optional[AmendRequestAmendOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AmendOptions'), 'exclude': lambda f: f is None }})
    r"""Use the `AmendOptions` container to specify billing options, such as invoice generation and when to process payments."""  
    preview_options: Optional[AmendRequestPreviewOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreviewOptions'), 'exclude': lambda f: f is None }})
    r"""Use the `PreviewOptions` container to preview an amendment before committing its changes to a subscription.
    You can use a preview to provide a quote of the new charges to a customer before the customer commits to the amended subscription. 
    For example, make an Amend call with an Amendment object that removes an existing rate plan, 
    another Amendment object that adds a new rate plan, and turn on the preview options.
    """  
    