"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateOrganizationAlertsProfileRequestBodyAlertConditionInterfaceEnum(str, Enum):
    r"""The uplink observed for the alert.  interface must be one of the following: wan1, wan2, cellular"""
    CELLULAR = 'cellular'
    WAN1 = 'wan1'
    WAN2 = 'wan2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationAlertsProfileRequestBodyAlertCondition:
    r"""The conditions that determine if the alert triggers"""
    
    bit_rate_bps: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bit_rate_bps'), 'exclude': lambda f: f is None }})
    r"""The threshold the metric must cross to be valid for alerting. Used only for WAN Utilization alerts."""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""The total duration in seconds that the threshold should be crossed before alerting"""  
    interface: Optional[UpdateOrganizationAlertsProfileRequestBodyAlertConditionInterfaceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interface'), 'exclude': lambda f: f is None }})
    r"""The uplink observed for the alert.  interface must be one of the following: wan1, wan2, cellular"""  
    jitter_ms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jitter_ms'), 'exclude': lambda f: f is None }})
    r"""The threshold the metric must cross to be valid for alerting. Used only for VoIP Jitter alerts."""  
    latency_ms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latency_ms'), 'exclude': lambda f: f is None }})
    r"""The threshold the metric must cross to be valid for alerting. Used only for WAN Latency alerts."""  
    loss_ratio: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loss_ratio'), 'exclude': lambda f: f is None }})
    r"""The threshold the metric must cross to be valid for alerting. Used only for Packet Loss alerts."""  
    mos: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mos'), 'exclude': lambda f: f is None }})
    r"""The threshold the metric must drop below to be valid for alerting. Used only for VoIP MOS alerts."""  
    window: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('window'), 'exclude': lambda f: f is None }})
    r"""The look back period in seconds for sensing the alert"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationAlertsProfileRequestBodyRecipients:
    r"""List of recipients that will recieve the alert."""
    
    emails: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emails'), 'exclude': lambda f: f is None }})
    r"""A list of emails that will receive information about the alert"""  
    http_server_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpServerIds'), 'exclude': lambda f: f is None }})
    r"""A list base64 encoded urls of webhook endpoints that will receive information about the alert"""  
    
class UpdateOrganizationAlertsProfileRequestBodyTypeEnum(str, Enum):
    r"""The alert type"""
    APP_OUTAGE = 'appOutage'
    VOIP_JITTER = 'voipJitter'
    VOIP_MOS = 'voipMos'
    VOIP_PACKET_LOSS = 'voipPacketLoss'
    WAN_LATENCY = 'wanLatency'
    WAN_PACKET_LOSS = 'wanPacketLoss'
    WAN_STATUS = 'wanStatus'
    WAN_UTILIZATION = 'wanUtilization'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationAlertsProfileRequestBody:
    
    alert_condition: Optional[UpdateOrganizationAlertsProfileRequestBodyAlertCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alertCondition'), 'exclude': lambda f: f is None }})
    r"""The conditions that determine if the alert triggers"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""User supplied description of the alert"""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Is the alert config enabled"""  
    network_tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkTags'), 'exclude': lambda f: f is None }})
    r"""Networks with these tags will be monitored for the alert"""  
    recipients: Optional[UpdateOrganizationAlertsProfileRequestBodyRecipients] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipients'), 'exclude': lambda f: f is None }})
    r"""List of recipients that will recieve the alert."""  
    type: Optional[UpdateOrganizationAlertsProfileRequestBodyTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The alert type"""  
    

@dataclasses.dataclass
class UpdateOrganizationAlertsProfileRequest:
    
    alert_config_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'alertConfigId', 'style': 'simple', 'explode': False }})  
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateOrganizationAlertsProfileRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateOrganizationAlertsProfileResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_organization_alerts_profile_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    