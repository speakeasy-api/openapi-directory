"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetMultiNodeInventoryForAllSkuAndAllShipNodesRequest:
    
    wm_qos_correlation_id: str = dataclasses.field(metadata={'header': { 'field_name': 'WM_QOS.CORRELATION_ID', 'style': 'simple', 'explode': False }})
    r"""A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID"""  
    wm_sec_access_token: str = dataclasses.field(metadata={'header': { 'field_name': 'WM_SEC.ACCESS_TOKEN', 'style': 'simple', 'explode': False }})
    r"""The access token retrieved in the Token API call"""  
    wm_svc_name: str = dataclasses.field(metadata={'header': { 'field_name': 'WM_SVC.NAME', 'style': 'simple', 'explode': False }})
    r"""Walmart Service Name"""  
    limit: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""The number of items returned. Cannot be more than 50."""  
    next_cursor: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextCursor', 'style': 'form', 'explode': True }})
    r"""String returned from initial API call to indicate pagination. Specify nextCursor value to retrieve the next 50 items."""  
    wm_consumer_channel_type: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'WM_CONSUMER.CHANNEL.TYPE', 'style': 'simple', 'explode': False }})
    r"""A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding"""  
    
class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQtyUnitEnum(str, Enum):
    r"""The unit of measurement. Example: 'EACH'"""
    EACH = 'EACH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQty:
    r"""Quantity of an item that is available to be allocated to orders"""
    
    amount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""Inventory Count"""  
    unit: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQtyUnitEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit') }})
    r"""The unit of measurement. Example: 'EACH'"""  
    
class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQtyUnitEnum(str, Enum):
    r"""The unit of measurement. Example: 'EACH'"""
    EACH = 'EACH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQty:
    r"""Quantity of an item that is input by the seller"""
    
    amount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""Inventory Count"""  
    unit: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQtyUnitEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit') }})
    r"""The unit of measurement. Example: 'EACH'"""  
    
class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQtyUnitEnum(str, Enum):
    r"""The unit of measurement. Example: 'EACH'"""
    EACH = 'EACH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQty:
    r"""Quantity that has been ordered by the customers but not yet shipped"""
    
    amount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""Inventory Count"""  
    unit: GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQtyUnitEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit') }})
    r"""The unit of measurement. Example: 'EACH'"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodes:
    
    avail_to_sell_qty: Optional[GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availToSellQty'), 'exclude': lambda f: f is None }})
    r"""Quantity of an item that is available to be allocated to orders"""  
    input_qty: Optional[GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputQty'), 'exclude': lambda f: f is None }})
    r"""Quantity of an item that is input by the seller"""  
    reserved_qty: Optional[GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservedQty'), 'exclude': lambda f: f is None }})
    r"""Quantity that has been ordered by the customers but not yet shipped"""  
    ship_node: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipNode'), 'exclude': lambda f: f is None }})
    r"""ShipNode Id of the ship node for which the inventory is requested"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventories:
    
    nodes: Optional[list[GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodes'), 'exclude': lambda f: f is None }})  
    sku: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku'), 'exclude': lambda f: f is None }})
    r"""An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElements:
    
    inventories: Optional[list[GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventories]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventories'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONMeta:
    
    next_cursor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextCursor'), 'exclude': lambda f: f is None }})
    r"""Used for pagination to fetch the next set of items."""  
    total_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCount'), 'exclude': lambda f: f is None }})
    r"""Total number of Skus of the Seller. Example: '235'"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSON:
    r"""Successful Operation"""
    
    elements: Optional[GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElements] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elements'), 'exclude': lambda f: f is None }})  
    meta: Optional[GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetMultiNodeInventoryForAllSkuAndAllShipNodesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_multi_node_inventory_for_all_sku_and_all_ship_nodes_200_application_json_object: Optional[GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful Operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    