/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ContainerDefinition - Container definitions are used in task definitions to describe the different containers that are launched as part of a task.
 */
public class ContainerDefinition {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("command")
    public String[] command;
    public ContainerDefinition withCommand(String[] command) {
        this.command = command;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpu")
    public Long cpu;
    public ContainerDefinition withCpu(Long cpu) {
        this.cpu = cpu;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dependsOn")
    public ContainerDependency[] dependsOn;
    public ContainerDefinition withDependsOn(ContainerDependency[] dependsOn) {
        this.dependsOn = dependsOn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disableNetworking")
    public Boolean disableNetworking;
    public ContainerDefinition withDisableNetworking(Boolean disableNetworking) {
        this.disableNetworking = disableNetworking;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dnsSearchDomains")
    public String[] dnsSearchDomains;
    public ContainerDefinition withDnsSearchDomains(String[] dnsSearchDomains) {
        this.dnsSearchDomains = dnsSearchDomains;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dnsServers")
    public String[] dnsServers;
    public ContainerDefinition withDnsServers(String[] dnsServers) {
        this.dnsServers = dnsServers;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dockerLabels")
    public java.util.Map<String, String> dockerLabels;
    public ContainerDefinition withDockerLabels(java.util.Map<String, String> dockerLabels) {
        this.dockerLabels = dockerLabels;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dockerSecurityOptions")
    public String[] dockerSecurityOptions;
    public ContainerDefinition withDockerSecurityOptions(String[] dockerSecurityOptions) {
        this.dockerSecurityOptions = dockerSecurityOptions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entryPoint")
    public String[] entryPoint;
    public ContainerDefinition withEntryPoint(String[] entryPoint) {
        this.entryPoint = entryPoint;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environment")
    public KeyValuePair[] environment;
    public ContainerDefinition withEnvironment(KeyValuePair[] environment) {
        this.environment = environment;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environmentFiles")
    public EnvironmentFile[] environmentFiles;
    public ContainerDefinition withEnvironmentFiles(EnvironmentFile[] environmentFiles) {
        this.environmentFiles = environmentFiles;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("essential")
    public Boolean essential;
    public ContainerDefinition withEssential(Boolean essential) {
        this.essential = essential;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extraHosts")
    public HostEntry[] extraHosts;
    public ContainerDefinition withExtraHosts(HostEntry[] extraHosts) {
        this.extraHosts = extraHosts;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firelensConfiguration")
    public FirelensConfiguration firelensConfiguration;
    public ContainerDefinition withFirelensConfiguration(FirelensConfiguration firelensConfiguration) {
        this.firelensConfiguration = firelensConfiguration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("healthCheck")
    public HealthCheck healthCheck;
    public ContainerDefinition withHealthCheck(HealthCheck healthCheck) {
        this.healthCheck = healthCheck;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostname")
    public String hostname;
    public ContainerDefinition withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public String image;
    public ContainerDefinition withImage(String image) {
        this.image = image;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interactive")
    public Boolean interactive;
    public ContainerDefinition withInteractive(Boolean interactive) {
        this.interactive = interactive;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    public String[] links;
    public ContainerDefinition withLinks(String[] links) {
        this.links = links;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linuxParameters")
    public LinuxParameters linuxParameters;
    public ContainerDefinition withLinuxParameters(LinuxParameters linuxParameters) {
        this.linuxParameters = linuxParameters;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logConfiguration")
    public LogConfiguration logConfiguration;
    public ContainerDefinition withLogConfiguration(LogConfiguration logConfiguration) {
        this.logConfiguration = logConfiguration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memory")
    public Long memory;
    public ContainerDefinition withMemory(Long memory) {
        this.memory = memory;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memoryReservation")
    public Long memoryReservation;
    public ContainerDefinition withMemoryReservation(Long memoryReservation) {
        this.memoryReservation = memoryReservation;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mountPoints")
    public MountPoint[] mountPoints;
    public ContainerDefinition withMountPoints(MountPoint[] mountPoints) {
        this.mountPoints = mountPoints;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public ContainerDefinition withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("portMappings")
    public PortMapping[] portMappings;
    public ContainerDefinition withPortMappings(PortMapping[] portMappings) {
        this.portMappings = portMappings;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privileged")
    public Boolean privileged;
    public ContainerDefinition withPrivileged(Boolean privileged) {
        this.privileged = privileged;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pseudoTerminal")
    public Boolean pseudoTerminal;
    public ContainerDefinition withPseudoTerminal(Boolean pseudoTerminal) {
        this.pseudoTerminal = pseudoTerminal;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readonlyRootFilesystem")
    public Boolean readonlyRootFilesystem;
    public ContainerDefinition withReadonlyRootFilesystem(Boolean readonlyRootFilesystem) {
        this.readonlyRootFilesystem = readonlyRootFilesystem;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repositoryCredentials")
    public RepositoryCredentials repositoryCredentials;
    public ContainerDefinition withRepositoryCredentials(RepositoryCredentials repositoryCredentials) {
        this.repositoryCredentials = repositoryCredentials;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceRequirements")
    public ResourceRequirement[] resourceRequirements;
    public ContainerDefinition withResourceRequirements(ResourceRequirement[] resourceRequirements) {
        this.resourceRequirements = resourceRequirements;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secrets")
    public Secret[] secrets;
    public ContainerDefinition withSecrets(Secret[] secrets) {
        this.secrets = secrets;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTimeout")
    public Long startTimeout;
    public ContainerDefinition withStartTimeout(Long startTimeout) {
        this.startTimeout = startTimeout;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stopTimeout")
    public Long stopTimeout;
    public ContainerDefinition withStopTimeout(Long stopTimeout) {
        this.stopTimeout = stopTimeout;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("systemControls")
    public SystemControl[] systemControls;
    public ContainerDefinition withSystemControls(SystemControl[] systemControls) {
        this.systemControls = systemControls;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ulimits")
    public Ulimit[] ulimits;
    public ContainerDefinition withUlimits(Ulimit[] ulimits) {
        this.ulimits = ulimits;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public String user;
    public ContainerDefinition withUser(String user) {
        this.user = user;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumesFrom")
    public VolumeFrom[] volumesFrom;
    public ContainerDefinition withVolumesFrom(VolumeFrom[] volumesFrom) {
        this.volumesFrom = volumesFrom;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workingDirectory")
    public String workingDirectory;
    public ContainerDefinition withWorkingDirectory(String workingDirectory) {
        this.workingDirectory = workingDirectory;
        return this;
    }
    
}
