/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * V1Order - V1Order
 */
public class V1Order {
    /**
     * For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("btc_price_satoshi")
    public Double btcPriceSatoshi;

    public V1Order withBtcPriceSatoshi(Double btcPriceSatoshi) {
        this.btcPriceSatoshi = btcPriceSatoshi;
        return this;
    }
    
    /**
     * For Bitcoin transactions, the address that the buyer sent Bitcoin to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("btc_receive_address")
    public String btcReceiveAddress;

    public V1Order withBtcReceiveAddress(String btcReceiveAddress) {
        this.btcReceiveAddress = btcReceiveAddress;
        return this;
    }
    
    /**
     * The email address of the order's buyer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer_email")
    public String buyerEmail;

    public V1Order withBuyerEmail(String buyerEmail) {
        this.buyerEmail = buyerEmail;
        return this;
    }
    
    /**
     * A note provided by the buyer when the order was created, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer_note")
    public String buyerNote;

    public V1Order withBuyerNote(String buyerNote) {
        this.buyerNote = buyerNote;
        return this;
    }
    
    /**
     * A note provided by the merchant when the order's state was set to CANCELED, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canceled_note")
    public String canceledNote;

    public V1Order withCanceledNote(String canceledNote) {
        this.canceledNote = canceledNote;
        return this;
    }
    
    /**
     * A note provided by the merchant when the order's state was set to COMPLETED, if any
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completed_note")
    public String completedNote;

    public V1Order withCompletedNote(String completedNote) {
        this.completedNote = completedNote;
        return this;
    }
    
    /**
     * The time when the order was created, in ISO 8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;

    public V1Order withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Any errors that occurred during the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    public Error[] errors;

    public V1Order withErrors(Error[] errors) {
        this.errors = errors;
        return this;
    }
    
    /**
     * The time when the order expires if no action is taken, in ISO 8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_at")
    public String expiresAt;

    public V1Order withExpiresAt(String expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }
    
    /**
     * The order's unique identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public V1Order withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The history of actions associated with the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_history")
    public V1OrderHistoryEntry[] orderHistory;

    public V1Order withOrderHistory(V1OrderHistoryEntry[] orderHistory) {
        this.orderHistory = orderHistory;
        return this;
    }
    
    /**
     * The unique identifier of the payment associated with the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_id")
    public String paymentId;

    public V1Order withPaymentId(String paymentId) {
        this.paymentId = paymentId;
        return this;
    }
    
    /**
     * The promo code provided by the buyer, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("promo_code")
    public String promoCode;

    public V1Order withPromoCode(String promoCode) {
        this.promoCode = promoCode;
        return this;
    }
    
    /**
     * The name of the order's buyer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient_name")
    public String recipientName;

    public V1Order withRecipientName(String recipientName) {
        this.recipientName = recipientName;
        return this;
    }
    
    /**
     * The phone number to use for the order's delivery.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient_phone_number")
    public String recipientPhoneNumber;

    public V1Order withRecipientPhoneNumber(String recipientPhoneNumber) {
        this.recipientPhoneNumber = recipientPhoneNumber;
        return this;
    }
    
    /**
     * A note provided by the merchant when the order's state was set to REFUNDED, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunded_note")
    public String refundedNote;

    public V1Order withRefundedNote(String refundedNote) {
        this.refundedNote = refundedNote;
        return this;
    }
    
    /**
     * Represents a postal address in a country. The address format is based 
     * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
     * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
     * This format has dedicated fields for four address components: postal code, 
     * locality (city), administrative district (state, prefecture, or province), and 
     * sublocality (town or village). These components have dedicated fields in the 
     * `Address` object because software sometimes behaves differently based on them. 
     * For example, sales tax software may charge different amounts of sales tax 
     * based on the postal code, and some software is only available in 
     * certain states due to compliance reasons.
     * 
     * For the remaining address components, the `Address` type provides the 
     * `address_line_1` and `address_line_2` fields for free-form data entry. 
     * These fields are free-form because the remaining address components have 
     * too many variations around the world and typical software does not parse 
     * these components. These fields enable users to enter anything they want. 
     * 
     * Note that, in the current implementation, all other `Address` type fields are blank. 
     * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
     * `administrative_district_level_2`, `administrative_district_level_3`, 
     * `first_name`, `last_name`, and `organization`. 
     * 
     * When it comes to localization, the seller's language preferences 
     * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
     * are ignored for addresses. Even though Square products (such as Square Point of Sale 
     * and the Seller Dashboard) mostly use a seller's language preference in 
     * communication, when it comes to addresses, they will use English for a US address, 
     * Japanese for an address in Japan, and so on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_address")
    public Address shippingAddress;

    public V1Order withShippingAddress(Address shippingAddress) {
        this.shippingAddress = shippingAddress;
        return this;
    }
    
    /**
     * Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;

    public V1Order withState(String state) {
        this.state = state;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtotal_money")
    public V1Money subtotalMoney;

    public V1Order withSubtotalMoney(V1Money subtotalMoney) {
        this.subtotalMoney = subtotalMoney;
        return this;
    }
    
    /**
     * A tender represents a discrete monetary exchange. Square represents this
     * exchange as a money object with a specific currency and amount, where the
     * amount is given in the smallest denomination of the given currency.
     * 
     * Square POS can accept more than one form of tender for a single payment (such
     * as by splitting a bill between a credit card and a gift card). The `tender`
     * field of the Payment object lists all forms of tender used for the payment.
     * 
     * Split tender payments behave slightly differently from single tender payments:
     * 
     * The receipt_url for a split tender corresponds only to the first tender listed
     * in the tender field. To get the receipt URLs for the remaining tenders, use
     * the receipt_url fields of the corresponding Tender objects.
     * 
     * *A note on gift cards**: when a customer purchases a Square gift card from a
     * merchant, the merchant receives the full amount of the gift card in the
     * associated payment.
     * 
     * When that gift card is used as a tender, the balance of the gift card is
     * reduced and the merchant receives no funds. A `Tender` object with a type of
     * `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the
     * associated payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tender")
    public V1Tender tender;

    public V1Order withTender(V1Tender tender) {
        this.tender = tender;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_discount_money")
    public V1Money totalDiscountMoney;

    public V1Order withTotalDiscountMoney(V1Money totalDiscountMoney) {
        this.totalDiscountMoney = totalDiscountMoney;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_price_money")
    public V1Money totalPriceMoney;

    public V1Order withTotalPriceMoney(V1Money totalPriceMoney) {
        this.totalPriceMoney = totalPriceMoney;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_shipping_money")
    public V1Money totalShippingMoney;

    public V1Order withTotalShippingMoney(V1Money totalShippingMoney) {
        this.totalShippingMoney = totalShippingMoney;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax_money")
    public V1Money totalTaxMoney;

    public V1Order withTotalTaxMoney(V1Money totalTaxMoney) {
        this.totalTaxMoney = totalTaxMoney;
        return this;
    }
    
    /**
     * The time when the order was last modified, in ISO 8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public String updatedAt;

    public V1Order withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    public V1Order(){}
}
