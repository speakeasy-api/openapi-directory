/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["http://api.nytimes.com/svc/community/v3"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * Get access to comments from registered users on New York Times articles.  NOTE: This API is deprecated.
 *
 * @see {@link http://developer.nytimes.com/}
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * Comments by Date
   */
  getUserContentByDateJson(
    req: operations.GETUserContentByDateJsonRequest,
    security: operations.GETUserContentByDateJsonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GETUserContentByDateJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETUserContentByDateJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/user-content/by-date.json";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GETUserContentByDateJsonSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETUserContentByDateJsonResponse =
        new operations.GETUserContentByDateJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getUserContentByDateJSON200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETUserContentByDateJson200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Recent User Comments
   */
  getUserContentRecentJson(
    config?: AxiosRequestConfig
  ): Promise<operations.GETUserContentRecentJsonResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/user-content/recent.json";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETUserContentRecentJsonResponse =
        new operations.GETUserContentRecentJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getUserContentRecentJSON200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETUserContentRecentJson200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Comments by URL
   */
  getUserContentUrlJson(
    req: operations.GETUserContentUrlJsonRequest,
    security: operations.GETUserContentUrlJsonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GETUserContentUrlJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETUserContentUrlJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/user-content/url.json";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GETUserContentUrlJsonSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETUserContentUrlJsonResponse =
        new operations.GETUserContentUrlJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getUserContentUrlJSON200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETUserContentUrlJson200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Comments by User
   */
  getUserContentUserJson(
    req: operations.GETUserContentUserJsonRequest,
    security: operations.GETUserContentUserJsonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GETUserContentUserJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETUserContentUserJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/user-content/user.json";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GETUserContentUserJsonSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETUserContentUserJsonResponse =
        new operations.GETUserContentUserJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getUserContentUserJSON200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETUserContentUserJson200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
