// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetProductsXAmzTargetEnum
type GetProductsXAmzTargetEnum string

const (
	GetProductsXAmzTargetEnumAwsPriceListServiceGetProducts GetProductsXAmzTargetEnum = "AWSPriceListService.GetProducts"
)

func (e GetProductsXAmzTargetEnum) ToPointer() *GetProductsXAmzTargetEnum {
	return &e
}

func (e *GetProductsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSPriceListService.GetProducts":
		*e = GetProductsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProductsXAmzTargetEnum: %v", v)
	}
}

type GetProductsRequest struct {
	GetProductsRequest shared.GetProductsRequest `request:"mediaType=application/json"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken         *string                   `queryParam:"style=form,explode=true,name=NextToken"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetProductsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetProductsResponse struct {
	ContentType string
	// ExpiredNextTokenException
	ExpiredNextTokenException interface{}
	// Success
	GetProductsResponse *shared.GetProductsResponse
	// InternalErrorException
	InternalErrorException interface{}
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
}
