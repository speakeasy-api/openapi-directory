"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ECommerce:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def bin_list_download(self, request: operations.BINListDownloadRequest) -> operations.BINListDownloadResponse:
        r"""BIN List Download
        Download our entire BIN database for direct use on your own systems
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/bin-list-download'
        
        query_params = utils.get_query_params(operations.BINListDownloadRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BINListDownloadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bytes])
                res.bin_list_download_200_application_json_binary_string = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out

        return res

    def bin_lookup(self, request: operations.BINLookupRequest) -> operations.BINLookupResponse:
        r"""BIN Lookup
        Perform a BIN (Bank Identification Number) or IIN (Issuer Identification Number) lookup
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/bin-lookup'
        
        query_params = utils.get_query_params(operations.BINLookupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BINLookupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BINLookupResponse])
                res.bin_lookup_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out

        return res

    def convert(self, request: operations.ConvertRequest) -> operations.ConvertResponse:
        r"""Convert
        A currency and unit conversion tool
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/convert'
        
        query_params = utils.get_query_params(operations.ConvertRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConvertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConvertResponse])
                res.convert_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out

        return res

    