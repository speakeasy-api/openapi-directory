/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TextSentimentEvaluationMetrics - Model evaluation metrics for text sentiment problems.
 */
public class TextSentimentEvaluationMetrics {
    /**
     * Output only. The annotation spec ids used for this evaluation. Deprecated .
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annotationSpecId")
    public String[] annotationSpecId;

    public TextSentimentEvaluationMetrics withAnnotationSpecId(String[] annotationSpecId) {
        this.annotationSpecId = annotationSpecId;
        return this;
    }
    
    /**
     * Confusion matrix of the model running the classification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confusionMatrix")
    public ConfusionMatrix confusionMatrix;

    public TextSentimentEvaluationMetrics withConfusionMatrix(ConfusionMatrix confusionMatrix) {
        this.confusionMatrix = confusionMatrix;
        return this;
    }
    
    /**
     * Output only. The harmonic mean of recall and precision.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("f1Score")
    public Float f1Score;

    public TextSentimentEvaluationMetrics withF1Score(Float f1Score) {
        this.f1Score = f1Score;
        return this;
    }
    
    /**
     * Output only. Linear weighted kappa. Only set for the overall model evaluation, not for evaluation of a single annotation spec.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linearKappa")
    public Float linearKappa;

    public TextSentimentEvaluationMetrics withLinearKappa(Float linearKappa) {
        this.linearKappa = linearKappa;
        return this;
    }
    
    /**
     * Output only. Mean absolute error. Only set for the overall model evaluation, not for evaluation of a single annotation spec.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meanAbsoluteError")
    public Float meanAbsoluteError;

    public TextSentimentEvaluationMetrics withMeanAbsoluteError(Float meanAbsoluteError) {
        this.meanAbsoluteError = meanAbsoluteError;
        return this;
    }
    
    /**
     * Output only. Mean squared error. Only set for the overall model evaluation, not for evaluation of a single annotation spec.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meanSquaredError")
    public Float meanSquaredError;

    public TextSentimentEvaluationMetrics withMeanSquaredError(Float meanSquaredError) {
        this.meanSquaredError = meanSquaredError;
        return this;
    }
    
    /**
     * Output only. Precision.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("precision")
    public Float precision;

    public TextSentimentEvaluationMetrics withPrecision(Float precision) {
        this.precision = precision;
        return this;
    }
    
    /**
     * Output only. Quadratic weighted kappa. Only set for the overall model evaluation, not for evaluation of a single annotation spec.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quadraticKappa")
    public Float quadraticKappa;

    public TextSentimentEvaluationMetrics withQuadraticKappa(Float quadraticKappa) {
        this.quadraticKappa = quadraticKappa;
        return this;
    }
    
    /**
     * Output only. Recall.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recall")
    public Float recall;

    public TextSentimentEvaluationMetrics withRecall(Float recall) {
        this.recall = recall;
        return this;
    }
    
    public TextSentimentEvaluationMetrics(){}
}
