/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PlaceOrderRequestBodyClientProfileData - Customer's profile information. The `email` functions as a customer's ID.
 * 
 * For customers already in your database, sending only the email address is enough to register the order to the shopper\u2019s existing account.
 * 
 * &gt; If the shopper exists in you database but is not logged in, sending other profile information along with the email will cause the platform to fail placing the order. This happens because this action is interpreted as an attempt to edit profile data, which is not possible unless the customer is logged in to the store.
 */
public class PlaceOrderRequestBodyClientProfileData {
    /**
     * Corporate document, if the customer is a legal entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("corporateDocument")
    public String corporateDocument;
    public PlaceOrderRequestBodyClientProfileData withCorporateDocument(String corporateDocument) {
        this.corporateDocument = corporateDocument;
        return this;
    }
    
    /**
     * Company name, if the customer is a legal entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("corporateName")
    public String corporateName;
    public PlaceOrderRequestBodyClientProfileData withCorporateName(String corporateName) {
        this.corporateName = corporateName;
        return this;
    }
    
    /**
     * Corporate phone number, if the customer is a legal entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("corporatePhone")
    public String corporatePhone;
    public PlaceOrderRequestBodyClientProfileData withCorporatePhone(String corporatePhone) {
        this.corporatePhone = corporatePhone;
        return this;
    }
    
    /**
     * Document number informed by the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document")
    public String document;
    public PlaceOrderRequestBodyClientProfileData withDocument(String document) {
        this.document = document;
        return this;
    }
    
    /**
     * Type of the document informed by the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentType")
    public String documentType;
    public PlaceOrderRequestBodyClientProfileData withDocumentType(String documentType) {
        this.documentType = documentType;
        return this;
    }
    
    /**
     * Customer's email address.
     */
    @JsonProperty("email")
    public String email;
    public PlaceOrderRequestBodyClientProfileData withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Customer's first name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstName")
    public String firstName;
    public PlaceOrderRequestBodyClientProfileData withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * `true` if the customer is a legal entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isCorporate")
    public Boolean isCorporate;
    public PlaceOrderRequestBodyClientProfileData withIsCorporate(Boolean isCorporate) {
        this.isCorporate = isCorporate;
        return this;
    }
    
    /**
     * Customer's last name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastName")
    public String lastName;
    public PlaceOrderRequestBodyClientProfileData withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * Customer's phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    public String phone;
    public PlaceOrderRequestBodyClientProfileData withPhone(String phone) {
        this.phone = phone;
        return this;
    }
    
    /**
     * State inscription, if the customer is a legal entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stateInscription")
    public String stateInscription;
    public PlaceOrderRequestBodyClientProfileData withStateInscription(String stateInscription) {
        this.stateInscription = stateInscription;
        return this;
    }
    
    /**
     * Trade name, if the customer is a legal entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tradeName")
    public String tradeName;
    public PlaceOrderRequestBodyClientProfileData withTradeName(String tradeName) {
        this.tradeName = tradeName;
        return this;
    }
    
}
