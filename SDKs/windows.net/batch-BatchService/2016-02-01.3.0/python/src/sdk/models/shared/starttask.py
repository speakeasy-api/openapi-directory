"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import environmentsetting as shared_environmentsetting
from ..shared import resourcefile as shared_resourcefile
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartTask:
    r"""A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged."""
    
    command_line: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commandLine'), 'exclude': lambda f: f is None }})
    r"""The command line of the start task."""  
    environment_settings: Optional[list[shared_environmentsetting.EnvironmentSetting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentSettings'), 'exclude': lambda f: f is None }})
    r"""A list of environment variable settings for the start task."""  
    max_task_retry_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxTaskRetryCount'), 'exclude': lambda f: f is None }})
    r"""The maximum number of times the task may be retried."""  
    resource_files: Optional[list[shared_resourcefile.ResourceFile]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceFiles'), 'exclude': lambda f: f is None }})
    r"""A list of files that the Batch service will download to the compute node before running the command line."""  
    run_elevated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runElevated'), 'exclude': lambda f: f is None }})
    r"""Whether to run the start task in elevated mode. The default value is false."""  
    wait_for_success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waitForSuccess'), 'exclude': lambda f: f is None }})
    r"""Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node."""  
    