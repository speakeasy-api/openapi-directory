"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import oneorders_get_responses_404_content_application_1json_schema as shared_oneorders_get_responses_404_content_application_1json_schema
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetInventorySecurity:
    
    fdc_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetInventoryRequest:
    
    external_sku_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'externalSkuNames', 'style': 'form', 'explode': False }})
    r"""A CSV of sku reference names, 'skuName1' or 'skuName1,skuName2,skuName3'"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""The numbers of items to return"""  
    merchant_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'merchantIds', 'style': 'form', 'explode': False }})
    r"""A CSV of merchant id, '123' or '1,2,3'"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""A multiplier of the number of items (limit parameter) to skip before returning results"""  
    warehouse_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'warehouseIds', 'style': 'form', 'explode': False }})
    r"""A CSV of warehouse id, '123' or '1,2,3'"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInventoryItemInventoryArrayV2ItemInventoryV2Item:
    r"""Item this inventory data is based on"""
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""FDC ID for this Item"""  
    sku_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skuReference'), 'exclude': lambda f: f is None }})
    r"""Sku reference name for this item"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInventoryItemInventoryArrayV2ItemInventoryV2Merchant:
    r"""Merchant that owns this item"""
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Merchants name for this item"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInventoryItemInventoryArrayV2ItemInventoryV2QuantityTotal:
    
    available_to_promise: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableToPromise'), 'exclude': lambda f: f is None }})
    r"""Number of items that are available to be used in an order"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInventoryItemInventoryArrayV2ItemInventoryV2Quantity:
    
    total: Optional[GetInventoryItemInventoryArrayV2ItemInventoryV2QuantityTotal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInventoryItemInventoryArrayV2ItemInventoryV2:
    
    item: Optional[GetInventoryItemInventoryArrayV2ItemInventoryV2Item] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item'), 'exclude': lambda f: f is None }})
    r"""Item this inventory data is based on"""  
    merchant: Optional[GetInventoryItemInventoryArrayV2ItemInventoryV2Merchant] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchant'), 'exclude': lambda f: f is None }})
    r"""Merchant that owns this item"""  
    quantity: Optional[GetInventoryItemInventoryArrayV2ItemInventoryV2Quantity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInventoryItemInventoryArrayV2MetaPaginationV2:
    
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""Count of records returned in response, this will be equal to or less then the limit parameter"""  
    current_page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentPage'), 'exclude': lambda f: f is None }})
    r"""Current page of the response, this will match the page parameter"""  
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""Total number of records available to request"""  
    total_pages: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalPages'), 'exclude': lambda f: f is None }})
    r"""Total number of pages available to request"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInventoryItemInventoryArrayV2Meta:
    
    pagination: Optional[GetInventoryItemInventoryArrayV2MetaPaginationV2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pagination'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInventoryItemInventoryArrayV2:
    r"""Found Inventory"""
    
    data: Optional[list[GetInventoryItemInventoryArrayV2ItemInventoryV2]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    meta: Optional[GetInventoryItemInventoryArrayV2Meta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetInventoryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    oneorders_get_responses_404_content_application_1json_schema: Optional[shared_oneorders_get_responses_404_content_application_1json_schema.OneordersGetResponses404ContentApplication1jsonSchema] = dataclasses.field(default=None)
    r"""Bad Request"""  
    item_inventory_array_v2: Optional[GetInventoryItemInventoryArrayV2] = dataclasses.field(default=None)
    r"""Found Inventory"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    