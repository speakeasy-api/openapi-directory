// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"time"
)

type IssueLabels2 struct {
	Color       *string `json:"color,omitempty"`
	Default     *bool   `json:"default,omitempty"`
	Description *string `json:"description,omitempty"`
	ID          *int64  `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	NodeID      *string `json:"node_id,omitempty"`
	URL         *string `json:"url,omitempty"`
}

type IssueLabelsType string

const (
	IssueLabelsTypeStr          IssueLabelsType = "str"
	IssueLabelsTypeIssueLabels2 IssueLabelsType = "issue_labels_2"
)

type IssueLabels struct {
	Str          *string
	IssueLabels2 *IssueLabels2

	Type IssueLabelsType
}

func CreateIssueLabelsStr(str string) IssueLabels {
	typ := IssueLabelsTypeStr

	return IssueLabels{
		Str:  &str,
		Type: typ,
	}
}

func CreateIssueLabelsIssueLabels2(issueLabels2 IssueLabels2) IssueLabels {
	typ := IssueLabelsTypeIssueLabels2

	return IssueLabels{
		IssueLabels2: &issueLabels2,
		Type:         typ,
	}
}

func (u *IssueLabels) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = IssueLabelsTypeStr
		return nil
	}

	issueLabels2 := new(IssueLabels2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&issueLabels2); err == nil {
		u.IssueLabels2 = issueLabels2
		u.Type = IssueLabelsTypeIssueLabels2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IssueLabels) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.IssueLabels2 != nil {
		return json.Marshal(u.IssueLabels2)
	}

	return nil, nil
}

type IssuePullRequest struct {
	DiffURL  string     `json:"diff_url"`
	HTMLURL  string     `json:"html_url"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL string     `json:"patch_url"`
	URL      string     `json:"url"`
}

// Issue - Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
type Issue struct {
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`
	// Simple User
	Assignee  NullableSimpleUser `json:"assignee"`
	Assignees []SimpleUser       `json:"assignees,omitempty"`
	// How the author is associated with the repository.
	AuthorAssociation AuthorAssociationEnum `json:"author_association"`
	// Contents of the issue
	Body     *string   `json:"body,omitempty"`
	BodyHTML *string   `json:"body_html,omitempty"`
	BodyText *string   `json:"body_text,omitempty"`
	ClosedAt time.Time `json:"closed_at"`
	// Simple User
	ClosedBy    *NullableSimpleUser `json:"closed_by,omitempty"`
	Comments    int64               `json:"comments"`
	CommentsURL string              `json:"comments_url"`
	CreatedAt   time.Time           `json:"created_at"`
	EventsURL   string              `json:"events_url"`
	HTMLURL     string              `json:"html_url"`
	ID          int64               `json:"id"`
	// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
	Labels    []IssueLabels `json:"labels"`
	LabelsURL string        `json:"labels_url"`
	Locked    bool          `json:"locked"`
	// A collection of related issues and pull requests.
	Milestone NullableMilestone `json:"milestone"`
	NodeID    string            `json:"node_id"`
	// Number uniquely identifying the issue within its repository
	Number int64 `json:"number"`
	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`
	PullRequest           *IssuePullRequest    `json:"pull_request,omitempty"`
	Reactions             *ReactionRollup      `json:"reactions,omitempty"`
	// A git repository
	Repository    *Repository `json:"repository,omitempty"`
	RepositoryURL string      `json:"repository_url"`
	// State of the issue; either 'open' or 'closed'
	State       string  `json:"state"`
	TimelineURL *string `json:"timeline_url,omitempty"`
	// Title of the issue
	Title     string    `json:"title"`
	UpdatedAt time.Time `json:"updated_at"`
	// URL for the issue
	URL string `json:"url"`
	// Simple User
	User NullableSimpleUser `json:"user"`
}
