<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * SubscriptionTransferInfo - Read-only transfer related information for the subscription. For more information, see retrieve transferable subscriptions for a customer.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class SubscriptionTransferInfo
{
    /**
     * The `skuId` of the current resold subscription. This is populated only when the customer has a subscription with a legacy SKU and the subscription resource is populated with the `skuId` of the SKU recommended for the transfer.
     * 
     * @var ?string $currentLegacySkuId
     */
	#[\JMS\Serializer\Annotation\SerializedName('currentLegacySkuId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $currentLegacySkuId = null;
    
    /**
     * When inserting a subscription, this is the minimum number of seats listed in the transfer order for this product. For example, if the customer has 20 users, the reseller cannot place a transfer order of 15 seats. The minimum is 20 seats.
     * 
     * @var ?int $minimumTransferableSeats
     */
	#[\JMS\Serializer\Annotation\SerializedName('minimumTransferableSeats')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $minimumTransferableSeats = null;
    
    /**
     * The time when transfer token or intent to transfer will expire. The time is in milliseconds using UNIX Epoch format.
     * 
     * @var ?string $transferabilityExpirationTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('transferabilityExpirationTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $transferabilityExpirationTime = null;
    
	public function __construct()
	{
		$this->currentLegacySkuId = null;
		$this->minimumTransferableSeats = null;
		$this->transferabilityExpirationTime = null;
	}
}
