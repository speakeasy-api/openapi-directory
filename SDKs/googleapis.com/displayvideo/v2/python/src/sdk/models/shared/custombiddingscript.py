"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import custombiddingscriptref as shared_custombiddingscriptref
from ..shared import scripterror as shared_scripterror
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CustomBiddingScriptStateEnum(str, Enum):
    r"""Output only. The state of the custom bidding script."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACCEPTED = 'ACCEPTED'
    REJECTED = 'REJECTED'
    PENDING = 'PENDING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomBiddingScript:
    r"""A single custom bidding script."""
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Output only. Whether the script is currently being used for scoring by the parent algorithm."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time when the script was created."""  
    custom_bidding_algorithm_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customBiddingAlgorithmId'), 'exclude': lambda f: f is None }})
    r"""Output only. The unique ID of the custom bidding algorithm the script belongs to."""  
    custom_bidding_script_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customBiddingScriptId'), 'exclude': lambda f: f is None }})
    r"""Output only. The unique ID of the custom bidding script."""  
    errors: Optional[list[shared_scripterror.ScriptError]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""Output only. Error details of a rejected custom bidding script. This field will only be populated when Script.state is REJECTED."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of the custom bidding script."""  
    script: Optional[shared_custombiddingscriptref.CustomBiddingScriptRef] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('script'), 'exclude': lambda f: f is None }})
    r"""The reference to the uploaded custom bidding script file."""  
    state: Optional[CustomBiddingScriptStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The state of the custom bidding script."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomBiddingScriptInput:
    r"""A single custom bidding script."""
    
    script: Optional[shared_custombiddingscriptref.CustomBiddingScriptRef] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('script'), 'exclude': lambda f: f is None }})
    r"""The reference to the uploaded custom bidding script file."""  
    