/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * The quality of the asset property value. You can use this parameter as a filter to choose only the asset property values that have a specific quality.
 */
export enum GetInterpolatedAssetPropertyValuesQualityEnum {
  Good = "GOOD",
  Bad = "BAD",
  Uncertain = "UNCERTAIN",
}

export class GetInterpolatedAssetPropertyValuesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The ID of the asset.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=assetId",
  })
  assetId?: string;

  /**
   * The inclusive end of the range from which to interpolate data, expressed in seconds in Unix epoch time.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=endTimeInSeconds",
  })
  endTimeInSeconds: number;

  /**
   * The nanosecond offset converted from <code>endTimeInSeconds</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=endTimeOffsetInNanos",
  })
  endTimeOffsetInNanos?: number;

  /**
   * The time interval in seconds over which to interpolate data. Each interval starts when the previous one ends.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=intervalInSeconds",
  })
  intervalInSeconds: number;

  /**
   * <p>The query interval for the window, in seconds. IoT SiteWise computes each interpolated value by using data points from the timestamp of each interval, minus the window to the timestamp of each interval plus the window. If not specified, the window ranges between the start time minus the interval and the end time plus the interval.</p> <note> <ul> <li> <p>If you specify a value for the <code>intervalWindowInSeconds</code> parameter, the value for the <code>type</code> parameter must be <code>LINEAR_INTERPOLATION</code>.</p> </li> <li> <p>If a data point isn't found during the specified query window, IoT SiteWise won't return an interpolated value for the interval. This indicates that there's a gap in the ingested data points.</p> </li> </ul> </note> <p>For example, you can get the interpolated temperature values for a wind turbine every 24 hours over a duration of 7 days. If the interpolation starts on July 1, 2021, at 9 AM with a window of 2 hours, IoT SiteWise uses the data points from 7 AM (9 AM minus 2 hours) to 11 AM (9 AM plus 2 hours) on July 2, 2021 to compute the first interpolated value. Next, IoT SiteWise uses the data points from 7 AM (9 AM minus 2 hours) to 11 AM (9 AM plus 2 hours) on July 3, 2021 to compute the second interpolated value, and so on. </p>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=intervalWindowInSeconds",
  })
  intervalWindowInSeconds?: number;

  /**
   * The maximum number of results to return for each paginated request. If not specified, the default value is 10.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: number;

  /**
   * The token to be used for the next set of paginated results.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;

  /**
   * The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=propertyAlias",
  })
  propertyAlias?: string;

  /**
   * The ID of the asset property.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=propertyId",
  })
  propertyId?: string;

  /**
   * The quality of the asset property value. You can use this parameter as a filter to choose only the asset property values that have a specific quality.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quality",
  })
  quality: GetInterpolatedAssetPropertyValuesQualityEnum;

  /**
   * The exclusive start of the range from which to interpolate data, expressed in seconds in Unix epoch time.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=startTimeInSeconds",
  })
  startTimeInSeconds: number;

  /**
   * The nanosecond offset converted from <code>startTimeInSeconds</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=startTimeOffsetInNanos",
  })
  startTimeOffsetInNanos?: number;

  /**
   * <p>The interpolation type.</p> <p>Valid values: <code>LINEAR_INTERPOLATION | LOCF_INTERPOLATION</code> </p> <ul> <li> <p> <code>LINEAR_INTERPOLATION</code> – Estimates missing data using <a href="https://en.wikipedia.org/wiki/Linear_interpolation">linear interpolation</a>.</p> <p>For example, you can use this operation to return the interpolated temperature values for a wind turbine every 24 hours over a duration of 7 days. If the interpolation starts July 1, 2021, at 9 AM, IoT SiteWise returns the first interpolated value on July 2, 2021, at 9 AM, the second interpolated value on July 3, 2021, at 9 AM, and so on.</p> </li> <li> <p> <code>LOCF_INTERPOLATION</code> – Estimates missing data using last observation carried forward interpolation</p> <p>If no data point is found for an interval, IoT SiteWise returns the last observed data point for the previous interval and carries forward this interpolated value until a new data point is found.</p> <p>For example, you can get the state of an on-off valve every 24 hours over a duration of 7 days. If the interpolation starts July 1, 2021, at 9 AM, IoT SiteWise returns the last observed data point between July 1, 2021, at 9 AM and July 2, 2021, at 9 AM as the first interpolated value. If a data point isn't found after 9 AM on July 2, 2021, IoT SiteWise uses the same interpolated value for the rest of the days.</p> </li> </ul>
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type: string;
}

export class GetInterpolatedAssetPropertyValuesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  getInterpolatedAssetPropertyValuesResponse?: shared.GetInterpolatedAssetPropertyValuesResponse;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
