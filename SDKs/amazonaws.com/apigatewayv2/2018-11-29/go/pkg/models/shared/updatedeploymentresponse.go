// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// UpdateDeploymentResponseDeploymentStatusEnum - The status of the deployment: PENDING, FAILED, or SUCCEEDED.
type UpdateDeploymentResponseDeploymentStatusEnum string

const (
	UpdateDeploymentResponseDeploymentStatusEnumPending  UpdateDeploymentResponseDeploymentStatusEnum = "PENDING"
	UpdateDeploymentResponseDeploymentStatusEnumFailed   UpdateDeploymentResponseDeploymentStatusEnum = "FAILED"
	UpdateDeploymentResponseDeploymentStatusEnumDeployed UpdateDeploymentResponseDeploymentStatusEnum = "DEPLOYED"
)

func (e UpdateDeploymentResponseDeploymentStatusEnum) ToPointer() *UpdateDeploymentResponseDeploymentStatusEnum {
	return &e
}

func (e *UpdateDeploymentResponseDeploymentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "FAILED":
		fallthrough
	case "DEPLOYED":
		*e = UpdateDeploymentResponseDeploymentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeploymentResponseDeploymentStatusEnum: %v", v)
	}
}

// UpdateDeploymentResponse - Success
type UpdateDeploymentResponse struct {
	AutoDeployed            *bool                                         `json:"AutoDeployed,omitempty"`
	CreatedDate             *time.Time                                    `json:"CreatedDate,omitempty"`
	DeploymentID            *string                                       `json:"DeploymentId,omitempty"`
	DeploymentStatus        *UpdateDeploymentResponseDeploymentStatusEnum `json:"DeploymentStatus,omitempty"`
	DeploymentStatusMessage *string                                       `json:"DeploymentStatusMessage,omitempty"`
	Description             *string                                       `json:"Description,omitempty"`
}
