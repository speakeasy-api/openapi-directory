"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkAppliancePortRequestBody:
    
    access_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessPolicy'), 'exclude': lambda f: f is None }})
    r"""The name of the policy. Only applicable to Access ports. Valid values are: 'open', '8021x-radius', 'mac-radius', 'hybris-radius' for MX64 or Z3 or any MX supporting the per port authentication feature. Otherwise, 'open' is the only valid value and 'open' is the default value if the field is missing."""  
    allowed_vlans: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedVlans'), 'exclude': lambda f: f is None }})
    r"""Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port."""  
    drop_untagged_traffic: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dropUntaggedTraffic'), 'exclude': lambda f: f is None }})
    r"""Trunk port can Drop all Untagged traffic. When true, no VLAN is required. Access ports cannot have dropUntaggedTraffic set to true."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""The status of the port"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the port: 'access' or 'trunk'."""  
    vlan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlan'), 'exclude': lambda f: f is None }})
    r"""Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode."""  
    

@dataclasses.dataclass
class UpdateNetworkAppliancePortRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    port_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'portId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkAppliancePortRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkAppliancePort200ApplicationJSON:
    r"""Successful operation"""
    
    access_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessPolicy'), 'exclude': lambda f: f is None }})
    r"""The name of the policy. Only applicable to Access ports."""  
    allowed_vlans: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedVlans'), 'exclude': lambda f: f is None }})
    r"""Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port."""  
    drop_untagged_traffic: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dropUntaggedTraffic'), 'exclude': lambda f: f is None }})
    r"""Whether the trunk port can drop all untagged traffic."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""The status of the port"""  
    number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""Number of the port"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the port: 'access' or 'trunk'."""  
    vlan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlan'), 'exclude': lambda f: f is None }})
    r"""Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode."""  
    

@dataclasses.dataclass
class UpdateNetworkAppliancePortResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_appliance_port_200_application_json_object: Optional[UpdateNetworkAppliancePort200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    