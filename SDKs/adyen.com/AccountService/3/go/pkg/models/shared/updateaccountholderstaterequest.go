// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UpdateAccountHolderStateRequestStateTypeEnum - The state to be updated.
// >Permitted values are: `Processing`, `Payout`
type UpdateAccountHolderStateRequestStateTypeEnum string

const (
	UpdateAccountHolderStateRequestStateTypeEnumLimitedPayout       UpdateAccountHolderStateRequestStateTypeEnum = "LimitedPayout"
	UpdateAccountHolderStateRequestStateTypeEnumLimitedProcessing   UpdateAccountHolderStateRequestStateTypeEnum = "LimitedProcessing"
	UpdateAccountHolderStateRequestStateTypeEnumLimitlessPayout     UpdateAccountHolderStateRequestStateTypeEnum = "LimitlessPayout"
	UpdateAccountHolderStateRequestStateTypeEnumLimitlessProcessing UpdateAccountHolderStateRequestStateTypeEnum = "LimitlessProcessing"
	UpdateAccountHolderStateRequestStateTypeEnumPayout              UpdateAccountHolderStateRequestStateTypeEnum = "Payout"
	UpdateAccountHolderStateRequestStateTypeEnumProcessing          UpdateAccountHolderStateRequestStateTypeEnum = "Processing"
)

func (e UpdateAccountHolderStateRequestStateTypeEnum) ToPointer() *UpdateAccountHolderStateRequestStateTypeEnum {
	return &e
}

func (e *UpdateAccountHolderStateRequestStateTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LimitedPayout":
		fallthrough
	case "LimitedProcessing":
		fallthrough
	case "LimitlessPayout":
		fallthrough
	case "LimitlessProcessing":
		fallthrough
	case "Payout":
		fallthrough
	case "Processing":
		*e = UpdateAccountHolderStateRequestStateTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAccountHolderStateRequestStateTypeEnum: %v", v)
	}
}

type UpdateAccountHolderStateRequest struct {
	// The code of the Account Holder on which to update the state.
	AccountHolderCode string `json:"accountHolderCode"`
	// If true, disable the requested state.  If false, enable the requested state.
	Disable bool `json:"disable"`
	// The reason that the state is being updated.
	// >Required if the state is being disabled.
	Reason *string `json:"reason,omitempty"`
	// The state to be updated.
	// >Permitted values are: `Processing`, `Payout`
	StateType UpdateAccountHolderStateRequestStateTypeEnum `json:"stateType"`
}
