"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainVerificationSummary = exports.DomainVerificationSummaryUsageEnum = exports.DomainVerificationSummaryTypeEnum = exports.DomainVerificationSummaryStatusEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Domain verification status:
 *
 * @remarks
 *   * `AWAITING` - Verification pending customer input
 *   * `INVALID` - SAN connected to a cancelled request
 *   * `COMPLETED` - Verification completed
 *   * `FAILED_VERIFICATION` - Verification failed
 *   * `PENDING_POSSIBLE_FRAUD` - Flagged for a system level fraud review
 *   * `VERIFIED_POSSIBLE_FRAUD` - Fraud detection reviewed but verified
 *   * `DROPPED` - SAN dropped from request
 *   * `REVOKED_CERT` - Certificate revoked
 *   * `DROPPED_GOOGLE_SAFE_BROWSING` - SAN dropped from request due to Google Safe Browsing check
 *   * `DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION` - SAN dropped from request due to Certificate Authorization Authority DNS record check
 *
 */
var DomainVerificationSummaryStatusEnum;
(function (DomainVerificationSummaryStatusEnum) {
    DomainVerificationSummaryStatusEnum["Completed"] = "COMPLETED";
    DomainVerificationSummaryStatusEnum["FailedVerification"] = "FAILED_VERIFICATION";
    DomainVerificationSummaryStatusEnum["VerifiedPossibleFraud"] = "VERIFIED_POSSIBLE_FRAUD";
    DomainVerificationSummaryStatusEnum["Dropped"] = "DROPPED";
    DomainVerificationSummaryStatusEnum["DroppedCertificateAuthorityAuthorization"] = "DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION";
    DomainVerificationSummaryStatusEnum["DroppedGoogleSafeBrowsing"] = "DROPPED_GOOGLE_SAFE_BROWSING";
    DomainVerificationSummaryStatusEnum["Invalid"] = "INVALID";
    DomainVerificationSummaryStatusEnum["Awaiting"] = "AWAITING";
    DomainVerificationSummaryStatusEnum["PendingPossibleFraud"] = "PENDING_POSSIBLE_FRAUD";
    DomainVerificationSummaryStatusEnum["RevokedCertificate"] = "REVOKED_CERTIFICATE";
})(DomainVerificationSummaryStatusEnum = exports.DomainVerificationSummaryStatusEnum || (exports.DomainVerificationSummaryStatusEnum = {}));
/**
 * Domain verification type:
 *
 * @remarks
 *   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN` - Domain verified using domain control verification email sent to admin@<your.domain.com>
 *   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR` - Domain verified using domain control verification email sent to administrator@<your.domain.com>
 *   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER` - Domain verified using domain control verification email sent to hostmaster@<your.domain.com>
 *   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER` - Domain verified using domain control verification email sent to postmaster@<your.domain.com>
 *   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER` - Domain verified using domain control verification email sent to webmaster@<your.domain.com>
 *   * `DOMAIN_ACCESS_EMAIL` - Domain verified using a domain access email
 *   * `DOMAIN_ACCESS_LETTER` - Customer completed a domain access letter which was used for domain verification
 *   * `DOMAIN_CONTROL_EMAIL` - Domain verified using HTML file or DNS zone file text value
 *   * `DOMAIN_ZONE_CONTROL` - DNS zone file containing a pre-generated text value used for domain verification
 *   * `MANUAL_DOMAIN_ACCESS_EMAIL` - DAE sent to an email address manually entered by a rep
 *   * `PREVIOUS_DOMAIN_ACCESS_EMAIL` - Customers domain access email for a prior certificate request was used for domain verification
 *   * `REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER` - Representative reviewed a customer provided domain access letter and verified domain
 *   * `REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL` - Representative verified domain using a manual domain zone control check
 *   * `REGISTRATION_AUTHORITY_OVERRIDE` - Representative verified domain using alternative methods
 *   * `REGISTRATION_AUTHORITY_WEBSITE_CONTROL` - Representative verified domain using a manual website control check
 *   * `CUSTOMER_OWNED` - Validated customer account information used for domain control verification
 *   * `WEBSITE_CONTROL` - HTML file in root website directory containing pre-generated value used for domain control verification
 *
 */
var DomainVerificationSummaryTypeEnum;
(function (DomainVerificationSummaryTypeEnum) {
    DomainVerificationSummaryTypeEnum["DomainControlEmail"] = "DOMAIN_CONTROL_EMAIL";
    DomainVerificationSummaryTypeEnum["AutoGeneratedDomainAccessEmailAdmin"] = "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN";
    DomainVerificationSummaryTypeEnum["AutoGeneratedDomainAccessEmailAdminstrator"] = "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR";
    DomainVerificationSummaryTypeEnum["AutoGeneratedDomainAccessEmailHostMaster"] = "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER";
    DomainVerificationSummaryTypeEnum["AutoGeneratedDomainAccessEmailPostMaster"] = "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER";
    DomainVerificationSummaryTypeEnum["AutoGeneratedDomainAccessEmailWebMaster"] = "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER";
    DomainVerificationSummaryTypeEnum["DomainAccessEmail"] = "DOMAIN_ACCESS_EMAIL";
    DomainVerificationSummaryTypeEnum["DomainAccessLetter"] = "DOMAIN_ACCESS_LETTER";
    DomainVerificationSummaryTypeEnum["DomainZoneControl"] = "DOMAIN_ZONE_CONTROL";
    DomainVerificationSummaryTypeEnum["ManualDomainAccessEmail"] = "MANUAL_DOMAIN_ACCESS_EMAIL";
    DomainVerificationSummaryTypeEnum["PreviousDomainAccessEmail"] = "PREVIOUS_DOMAIN_ACCESS_EMAIL";
    DomainVerificationSummaryTypeEnum["RegistrationAuthorityDomainAccessLetter"] = "REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER";
    DomainVerificationSummaryTypeEnum["RegistrationAuthorityDomainZoneControl"] = "REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL";
    DomainVerificationSummaryTypeEnum["RegistrationAuthorityOverride"] = "REGISTRATION_AUTHORITY_OVERRIDE";
    DomainVerificationSummaryTypeEnum["RegistrationAuthorityWebsiteControl"] = "REGISTRATION_AUTHORITY_WEBSITE_CONTROL";
    DomainVerificationSummaryTypeEnum["CustomerOwned"] = "CUSTOMER_OWNED";
    DomainVerificationSummaryTypeEnum["WebsiteControl"] = "WEBSITE_CONTROL";
})(DomainVerificationSummaryTypeEnum = exports.DomainVerificationSummaryTypeEnum || (exports.DomainVerificationSummaryTypeEnum = {}));
/**
 * Type of domain name used for domain verification
 */
var DomainVerificationSummaryUsageEnum;
(function (DomainVerificationSummaryUsageEnum) {
    DomainVerificationSummaryUsageEnum["CommonName"] = "COMMON_NAME";
    DomainVerificationSummaryUsageEnum["SubjectAlternativeName"] = "SUBJECT_ALTERNATIVE_NAME";
})(DomainVerificationSummaryUsageEnum = exports.DomainVerificationSummaryUsageEnum || (exports.DomainVerificationSummaryUsageEnum = {}));
var DomainVerificationSummary = /** @class */ (function (_super) {
    __extends(DomainVerificationSummary, _super);
    function DomainVerificationSummary() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createdAt" }),
        __metadata("design:type", String)
    ], DomainVerificationSummary.prototype, "createdAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dceToken" }),
        __metadata("design:type", String)
    ], DomainVerificationSummary.prototype, "dceToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "domain" }),
        __metadata("design:type", String)
    ], DomainVerificationSummary.prototype, "domain", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "domainEntityId" }),
        __metadata("design:type", Number)
    ], DomainVerificationSummary.prototype, "domainEntityId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "modifiedAt" }),
        __metadata("design:type", String)
    ], DomainVerificationSummary.prototype, "modifiedAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], DomainVerificationSummary.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], DomainVerificationSummary.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "usage" }),
        __metadata("design:type", String)
    ], DomainVerificationSummary.prototype, "usage", void 0);
    return DomainVerificationSummary;
}(utils_1.SpeakeasyBase));
exports.DomainVerificationSummary = DomainVerificationSummary;
