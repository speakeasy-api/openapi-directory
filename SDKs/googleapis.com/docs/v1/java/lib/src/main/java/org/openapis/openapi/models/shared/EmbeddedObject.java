/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * EmbeddedObject - An embedded object in the document.
 */
public class EmbeddedObject {
    /**
     * The description of the embedded object. The `title` and `description` are both combined to display alt text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public EmbeddedObject withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The properties of an embedded drawing and used to differentiate the object type. An embedded drawing is one that's created and edited within a document. Note that extensive details are not supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("embeddedDrawingProperties")
    public java.util.Map<String, Object> embeddedDrawingProperties;
    public EmbeddedObject withEmbeddedDrawingProperties(java.util.Map<String, Object> embeddedDrawingProperties) {
        this.embeddedDrawingProperties = embeddedDrawingProperties;
        return this;
    }
    
    /**
     * A border around an EmbeddedObject.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("embeddedObjectBorder")
    public EmbeddedObjectBorder embeddedObjectBorder;
    public EmbeddedObject withEmbeddedObjectBorder(EmbeddedObjectBorder embeddedObjectBorder) {
        this.embeddedObjectBorder = embeddedObjectBorder;
        return this;
    }
    
    /**
     * The properties of an image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageProperties")
    public ImageProperties imageProperties;
    public EmbeddedObject withImageProperties(ImageProperties imageProperties) {
        this.imageProperties = imageProperties;
        return this;
    }
    
    /**
     * A reference to the external linked source content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linkedContentReference")
    public LinkedContentReference linkedContentReference;
    public EmbeddedObject withLinkedContentReference(LinkedContentReference linkedContentReference) {
        this.linkedContentReference = linkedContentReference;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marginBottom")
    public Dimension marginBottom;
    public EmbeddedObject withMarginBottom(Dimension marginBottom) {
        this.marginBottom = marginBottom;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marginLeft")
    public Dimension marginLeft;
    public EmbeddedObject withMarginLeft(Dimension marginLeft) {
        this.marginLeft = marginLeft;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marginRight")
    public Dimension marginRight;
    public EmbeddedObject withMarginRight(Dimension marginRight) {
        this.marginRight = marginRight;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marginTop")
    public Dimension marginTop;
    public EmbeddedObject withMarginTop(Dimension marginTop) {
        this.marginTop = marginTop;
        return this;
    }
    
    /**
     * A width and height.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Size size;
    public EmbeddedObject withSize(Size size) {
        this.size = size;
        return this;
    }
    
    /**
     * The title of the embedded object. The `title` and `description` are both combined to display alt text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public EmbeddedObject withTitle(String title) {
        this.title = title;
        return this;
    }
    
}
