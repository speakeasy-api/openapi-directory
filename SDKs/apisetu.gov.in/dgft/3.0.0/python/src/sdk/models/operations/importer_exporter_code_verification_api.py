"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ImporterExporterCodeVerificationAPISecurity:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-APISETU-APIKEY' }})  
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-APISETU-CLIENTID' }})  
    

@dataclasses.dataclass
class ImporterExporterCodeVerificationAPIRequest:
    
    iec: str = dataclasses.field(metadata={'path_param': { 'field_name': 'iec', 'style': 'simple', 'explode': False }})
    r"""Importer-Exporter code"""  
    
class ImporterExporterCodeVerificationAPI504ApplicationJSONErrorEnum(str, Enum):
    GATEWAY_TIMEOUT = 'gateway_timeout'

class ImporterExporterCodeVerificationAPI504ApplicationJSONErrorDescriptionEnum(str, Enum):
    PUBLISHER_SERVICE_DID_NOT_RESPOND_IN_TIME = 'Publisher service did not respond in time'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImporterExporterCodeVerificationAPI504ApplicationJSON:
    r"""Gateway Timeout"""
    
    error: Optional[ImporterExporterCodeVerificationAPI504ApplicationJSONErrorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})  
    error_description: Optional[ImporterExporterCodeVerificationAPI504ApplicationJSONErrorDescriptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorDescription'), 'exclude': lambda f: f is None }})  
    
class ImporterExporterCodeVerificationAPI503ApplicationJSONErrorEnum(str, Enum):
    SERVICE_UNAVAILABLE = 'service_unavailable'

class ImporterExporterCodeVerificationAPI503ApplicationJSONErrorDescriptionEnum(str, Enum):
    PUBLISHER_SERVICE_IS_TEMPORARILY_UNAVAILABLE = 'Publisher service is temporarily unavailable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImporterExporterCodeVerificationAPI503ApplicationJSON:
    r"""Service Unavailable"""
    
    error: Optional[ImporterExporterCodeVerificationAPI503ApplicationJSONErrorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})  
    error_description: Optional[ImporterExporterCodeVerificationAPI503ApplicationJSONErrorDescriptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorDescription'), 'exclude': lambda f: f is None }})  
    
class ImporterExporterCodeVerificationAPI502ApplicationJSONErrorEnum(str, Enum):
    BAD_GATEWAY = 'bad gateway'

class ImporterExporterCodeVerificationAPI502ApplicationJSONErrorDescriptionEnum(str, Enum):
    PUBLISHER_SERVICE_RETURNED_AN_INVALID_RESPONSE_ = 'Publisher service returned an invalid response.'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImporterExporterCodeVerificationAPI502ApplicationJSON:
    r"""Bad Gateway"""
    
    error: Optional[ImporterExporterCodeVerificationAPI502ApplicationJSONErrorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})  
    error_description: Optional[ImporterExporterCodeVerificationAPI502ApplicationJSONErrorDescriptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorDescription'), 'exclude': lambda f: f is None }})  
    
class ImporterExporterCodeVerificationAPI500ApplicationJSONErrorEnum(str, Enum):
    INTERNAL_SERVER_ERROR = 'internal_server_error'

class ImporterExporterCodeVerificationAPI500ApplicationJSONErrorDescriptionEnum(str, Enum):
    INTERNAL_SERVER_ERROR = 'Internal server error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImporterExporterCodeVerificationAPI500ApplicationJSON:
    r"""Internal Server Error"""
    
    error: Optional[ImporterExporterCodeVerificationAPI500ApplicationJSONErrorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})  
    error_description: Optional[ImporterExporterCodeVerificationAPI500ApplicationJSONErrorDescriptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorDescription'), 'exclude': lambda f: f is None }})  
    
class ImporterExporterCodeVerificationAPI404ApplicationJSONErrorEnum(str, Enum):
    RECORD_NOT_FOUND = 'record_not_found'
    URL_NOT_FOUND = 'Url not found'

class ImporterExporterCodeVerificationAPI404ApplicationJSONErrorDescriptionEnum(str, Enum):
    NO_RECORD_FOUND = 'No record found'
    YOUR_API_URL_OR_PATH_IS_INCORRECT_ = 'Your API url or path is incorrect.'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImporterExporterCodeVerificationAPI404ApplicationJSON:
    r"""Not Found"""
    
    error: Optional[ImporterExporterCodeVerificationAPI404ApplicationJSONErrorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})  
    error_description: Optional[ImporterExporterCodeVerificationAPI404ApplicationJSONErrorDescriptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorDescription'), 'exclude': lambda f: f is None }})  
    
class ImporterExporterCodeVerificationAPI401ApplicationJSONErrorEnum(str, Enum):
    INVALID_AUTHENTICATION = 'invalid_authentication'
    INVALID_AUTHORIZATION = 'invalid_authorization'

class ImporterExporterCodeVerificationAPI401ApplicationJSONErrorDescriptionEnum(str, Enum):
    AUTHENTICATION_FAILED = 'Authentication failed'
    YOU_ARE_NOT_AUTHORIZED_TO_USE_THIS_API = 'You are not authorized to use this API'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImporterExporterCodeVerificationAPI401ApplicationJSON:
    r"""Authentication failed"""
    
    error: Optional[ImporterExporterCodeVerificationAPI401ApplicationJSONErrorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})  
    error_description: Optional[ImporterExporterCodeVerificationAPI401ApplicationJSONErrorDescriptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorDescription'), 'exclude': lambda f: f is None }})  
    
class ImporterExporterCodeVerificationAPI400ApplicationJSONErrorEnum(str, Enum):
    INVALID_PARAMETER = 'invalid parameter'
    MISSING_PARAMETER = 'missing parameter'

class ImporterExporterCodeVerificationAPI400ApplicationJSONErrorDescriptionEnum(str, Enum):
    BAD_REQUEST = 'Bad request'
    PLEASE_PROVIDE_ALL_MANDATORY_PARAMETERS_ = 'Please provide all mandatory parameters.'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImporterExporterCodeVerificationAPI400ApplicationJSON:
    r"""Bad Request"""
    
    error: Optional[ImporterExporterCodeVerificationAPI400ApplicationJSONErrorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})  
    error_description: Optional[ImporterExporterCodeVerificationAPI400ApplicationJSONErrorDescriptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorDescription'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImporterExporterCodeVerificationAPI200ApplicationJSONBranch:
    
    badd1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badd1') }})  
    badd2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badd2') }})  
    branch_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branchCode') }})  
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})  
    pin: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pin') }})  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImporterExporterCodeVerificationAPI200ApplicationJSONDirectors:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImporterExporterCodeVerificationAPI200ApplicationJSON:
    r"""successful operation"""
    
    address_line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressLine1') }})  
    address_line2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressLine2') }})  
    branch: list[ImporterExporterCodeVerificationAPI200ApplicationJSONBranch] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branch') }})  
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})  
    data_as_on: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataAsOn'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    directors: list[ImporterExporterCodeVerificationAPI200ApplicationJSONDirectors] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directors') }})  
    entity_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityName') }})  
    exporter_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exporterType') }})  
    iec: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iec') }})  
    iec_issue_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iecIssueDate') }})  
    iec_modification_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iecModificationDate') }})  
    iec_status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iecStatus') }})  
    nature_of_concern: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('natureOfConcern') }})  
    pan: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pan') }})  
    pin: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pin') }})  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})  
    

@dataclasses.dataclass
class ImporterExporterCodeVerificationAPIResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    importer_exporter_code_verification_api_200_application_json_object: Optional[ImporterExporterCodeVerificationAPI200ApplicationJSON] = dataclasses.field(default=None)
    r"""successful operation"""  
    importer_exporter_code_verification_api_400_application_json_object: Optional[ImporterExporterCodeVerificationAPI400ApplicationJSON] = dataclasses.field(default=None)
    r"""Bad Request"""  
    importer_exporter_code_verification_api_401_application_json_object: Optional[ImporterExporterCodeVerificationAPI401ApplicationJSON] = dataclasses.field(default=None)
    r"""Authentication failed"""  
    importer_exporter_code_verification_api_404_application_json_object: Optional[ImporterExporterCodeVerificationAPI404ApplicationJSON] = dataclasses.field(default=None)
    r"""Not Found"""  
    importer_exporter_code_verification_api_500_application_json_object: Optional[ImporterExporterCodeVerificationAPI500ApplicationJSON] = dataclasses.field(default=None)
    r"""Internal Server Error"""  
    importer_exporter_code_verification_api_502_application_json_object: Optional[ImporterExporterCodeVerificationAPI502ApplicationJSON] = dataclasses.field(default=None)
    r"""Bad Gateway"""  
    importer_exporter_code_verification_api_503_application_json_object: Optional[ImporterExporterCodeVerificationAPI503ApplicationJSON] = dataclasses.field(default=None)
    r"""Service Unavailable"""  
    importer_exporter_code_verification_api_504_application_json_object: Optional[ImporterExporterCodeVerificationAPI504ApplicationJSON] = dataclasses.field(default=None)
    r"""Gateway Timeout"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    