/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SettingMetadata } from "./settingmetadata";
import { Expose, Type } from "class-transformer";

/**
 * What fields to match in the filter
 */
export enum ReceiverJurisdictionalFiltersMatchFieldsEnum {
  FacilityOrPatientAddress = "FACILITY_OR_PATIENT_ADDRESS",
  FacilityAddress = "FACILITY_ADDRESS",
  FacilityName = "FACILITY_NAME",
  AbnormalValue = "ABNORMAL_VALUE",
}

/**
 * A single filter
 */
export class ReceiverJurisdictionalFilters extends SpeakeasyBase {
  /**
   * Ensure that the result does not match
   */
  @SpeakeasyMetadata()
  @Expose({ name: "doesNotMatch" })
  doesNotMatch?: boolean;

  /**
   * What fields to match in the filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "matchFields" })
  matchFields?: ReceiverJurisdictionalFiltersMatchFieldsEnum;

  /**
   * What is the value to match against
   */
  @SpeakeasyMetadata()
  @Expose({ name: "matchValues" })
  matchValues?: string[];
}

/**
 * How often send a report
 */
export enum ReceiverTimingFrequencyEnum {
  RealTime = "REAL_TIME",
  Hourly = "HOURLY",
  Daily = "DAILY",
}

/**
 * When the report is sent if not immediately
 */
export class ReceiverTiming extends SpeakeasyBase {
  /**
   * The UTC hour to send a daily batch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dailyAt" })
  dailyAt?: number;

  /**
   * How often send a report
   */
  @SpeakeasyMetadata()
  @Expose({ name: "frequency" })
  frequency: ReceiverTimingFrequencyEnum;
}

/**
 * A receiver of reports from the data hub
 */
export class ReceiverInput extends SpeakeasyBase {
  /**
   * Display ready description of the receiver
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * What items to include in the report.
   */
  @SpeakeasyMetadata({ elemType: ReceiverJurisdictionalFilters })
  @Expose({ name: "jurisdictionalFilters" })
  @Type(() => ReceiverJurisdictionalFilters)
  jurisdictionalFilters?: ReceiverJurisdictionalFilters[];

  /**
   * The unique name for the receiver. Should include the organization name as a prefix.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * When the report is sent if not immediately
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timing" })
  @Type(() => ReceiverTiming)
  timing: ReceiverTiming;

  /**
   * The topic of for this receiver. Must match the supported topics.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "topic" })
  topic: string;

  /**
   * How the report is translated from the sender. A report can be sent in multiple ways.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "translations" })
  translations?: any[];
}

/**
 * A receiver of reports from the data hub
 */
export class Receiver extends SpeakeasyBase {
  /**
   * Display ready description of the receiver
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * What items to include in the report.
   */
  @SpeakeasyMetadata({ elemType: ReceiverJurisdictionalFilters })
  @Expose({ name: "jurisdictionalFilters" })
  @Type(() => ReceiverJurisdictionalFilters)
  jurisdictionalFilters?: ReceiverJurisdictionalFilters[];

  /**
   * The metadata associated with an setting
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => SettingMetadata)
  meta?: SettingMetadata;

  /**
   * The unique name for the receiver. Should include the organization name as a prefix.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The name of the organization that this receiver belongs to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organizationName" })
  organizationName?: string;

  /**
   * When the report is sent if not immediately
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timing" })
  @Type(() => ReceiverTiming)
  timing: ReceiverTiming;

  /**
   * The topic of for this receiver. Must match the supported topics.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "topic" })
  topic: string;

  /**
   * How the report is translated from the sender. A report can be sent in multiple ways.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "translations" })
  translations?: any[];
}
