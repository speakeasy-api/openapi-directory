/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EncryptionInfo } from "./encryptioninfo";
import { NodePermissions } from "./nodepermissions";
import { UserInfo } from "./userinfo";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Classification ID:
 *
 * @remarks
 *
 * * `1` - public
 *
 * * `2` - internal
 *
 * * `3` - confidential
 *
 * * `4` - strictly confidential
 */
export enum NodeClassificationEnum {
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
}

/**
 * Node type
 */
export enum NodeTypeEnum {
  Room = "room",
  Folder = "folder",
  File = "file",
}

/**
 * Node information (Node can be a room, folder or file)
 */
export class Node extends SpeakeasyBase {
  /**
   * &#128640; Since v4.15.0
   *
   * @remarks
   *
   * Auth parent room ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authParentId" })
  authParentId?: number;

  /**
   * Version of last change in this node or a node further down the tree.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "branchVersion" })
  branchVersion?: number;

  /**
   * &#128679; Deprecated since v4.10.0
   *
   * @remarks
   *
   * Child nodes list (if requested)
   *
   * (for rooms / folders only)
   */
  @SpeakeasyMetadata({ elemType: Node })
  @Expose({ name: "children" })
  @Type(() => Node)
  children?: Node[];

  /**
   * Classification ID:
   *
   * @remarks
   *
   * * `1` - public
   *
   * * `2` - internal
   *
   * * `3` - confidential
   *
   * * `4` - strictly confidential
   */
  @SpeakeasyMetadata()
  @Expose({ name: "classification" })
  classification?: NodeClassificationEnum;

  /**
   * &#128679; Deprecated since v4.11.0
   *
   * @remarks
   *
   * Number of direct children
   *
   * (no recursion; for rooms / folders only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cntChildren" })
  cntChildren?: number;

  /**
   * Returns the number of comments of this node.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cntComments" })
  cntComments?: number;

  /**
   * Number of deleted versions of this file / folder
   *
   * @remarks
   *
   * (for rooms / folders only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cntDeletedVersions" })
  cntDeletedVersions?: number;

  /**
   * Returns the number of Download Shares of this node.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cntDownloadShares" })
  cntDownloadShares?: number;

  /**
   * &#128640; Since v4.11.0
   *
   * @remarks
   *
   * Amount of direct child files where this node is the parent node
   *
   * (no recursion; for rooms / folders only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cntFiles" })
  cntFiles?: number;

  /**
   * &#128640; Since v4.11.0
   *
   * @remarks
   *
   * Amount of direct child folders where this node is the parent node
   *
   * (no recursion; for rooms / folders only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cntFolders" })
  cntFolders?: number;

  /**
   * &#128640; Since v4.11.0
   *
   * @remarks
   *
   * Amount of direct child rooms where this node is the parent node
   *
   * (no recursion; for rooms only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cntRooms" })
  cntRooms?: number;

  /**
   * Returns the number of Upload Shares of this node.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cntUploadShares" })
  cntUploadShares?: number;

  /**
   * Creation date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  @Type(() => UserInfo)
  createdBy?: UserInfo;

  /**
   * Encryption states
   */
  @SpeakeasyMetadata()
  @Expose({ name: "encryptionInfo" })
  @Type(() => EncryptionInfo)
  encryptionInfo?: EncryptionInfo;

  /**
   * Expiration date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expireAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expireAt?: Date;

  /**
   * File type / extension (for files only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileType" })
  fileType?: string;

  /**
   * Is activities log active (for rooms only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasActivitiesLog" })
  hasActivitiesLog?: boolean;

  /**
   * MD5 hash of file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hash" })
  hash?: string;

  /**
   * Node ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Inherit permissions from parent room
   *
   * @remarks
   *
   * (default: `false` if `parentId` is `0`; otherwise: `true`)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inheritPermissions" })
  inheritPermissions?: boolean;

  /**
   * &#128640; Since v4.11.0
   *
   * @remarks
   *
   * Determines whether node is browsable by client (for rooms only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isBrowsable" })
  isBrowsable?: boolean;

  /**
   * Encryption state
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isEncrypted" })
  isEncrypted?: boolean;

  /**
   * Node is marked as favorite (for rooms / folders only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isFavorite" })
  isFavorite?: boolean;

  /**
   * Media server media token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mediaToken" })
  mediaToken?: string;

  /**
   * File media type (for files only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mediaType" })
  mediaType?: string;

  /**
   * Name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * User notes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;

  /**
   * Parent node ID (room or folder)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentId" })
  parentId?: number;

  /**
   * Parent node path
   *
   * @remarks
   *
   * `/` if node is a root node (room)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentPath" })
  parentPath?: string;

  /**
   * Node permissions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "permissions" })
  @Type(() => NodePermissions)
  permissions?: NodePermissions;

  /**
   * Quota in byte
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quota" })
  quota?: number;

  /**
   * Retention period for deleted nodes in days
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recycleBinRetentionPeriod" })
  recycleBinRetentionPeriod?: number;

  /**
   * &#128640; Since v4.37.0
   *
   * @remarks
   *
   * Reference ID. Identical across all versions of a file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "referenceId" })
  referenceId?: number;

  /**
   * Node size in byte
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: number;

  /**
   * &#128640; Since v4.22.0
   *
   * @remarks
   *
   * Time the node was created on external file system
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestampCreation" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestampCreation?: Date;

  /**
   * &#128640; Since v4.22.0
   *
   * @remarks
   *
   * Time the content of a node was last modified on external file system
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestampModification" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestampModification?: Date;

  /**
   * Node type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: NodeTypeEnum;

  /**
   * Modification date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedBy" })
  @Type(() => UserInfo)
  updatedBy?: UserInfo;
}
