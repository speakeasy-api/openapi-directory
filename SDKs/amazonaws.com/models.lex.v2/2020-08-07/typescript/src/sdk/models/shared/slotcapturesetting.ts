/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConditionalSpecification } from "./conditionalspecification";
import { DialogCodeHookInvocationSetting } from "./dialogcodehookinvocationsetting";
import { DialogState } from "./dialogstate";
import { ElicitationCodeHookInvocationSetting } from "./elicitationcodehookinvocationsetting";
import { ResponseSpecification } from "./responsespecification";
import { Expose, Type } from "class-transformer";

/**
 * Settings used when Amazon Lex successfully captures a slot value from a user.
 */
export class SlotCaptureSetting extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "captureConditional" })
  @Type(() => ConditionalSpecification)
  captureConditional?: ConditionalSpecification;

  @SpeakeasyMetadata()
  @Expose({ name: "captureNextStep" })
  @Type(() => DialogState)
  captureNextStep?: DialogState;

  /**
   * Specifies a list of message groups that Amazon Lex uses to respond the user input.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "captureResponse" })
  @Type(() => ResponseSpecification)
  captureResponse?: ResponseSpecification;

  @SpeakeasyMetadata()
  @Expose({ name: "codeHook" })
  @Type(() => DialogCodeHookInvocationSetting)
  codeHook?: DialogCodeHookInvocationSetting;

  @SpeakeasyMetadata()
  @Expose({ name: "elicitationCodeHook" })
  @Type(() => ElicitationCodeHookInvocationSetting)
  elicitationCodeHook?: ElicitationCodeHookInvocationSetting;

  @SpeakeasyMetadata()
  @Expose({ name: "failureConditional" })
  @Type(() => ConditionalSpecification)
  failureConditional?: ConditionalSpecification;

  @SpeakeasyMetadata()
  @Expose({ name: "failureNextStep" })
  @Type(() => DialogState)
  failureNextStep?: DialogState;

  /**
   * Specifies a list of message groups that Amazon Lex uses to respond the user input.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failureResponse" })
  @Type(() => ResponseSpecification)
  failureResponse?: ResponseSpecification;
}
