/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Defines a logical resource identifier.
 */
export class CreateAppVersionResourceRequestBodyLogicalResourceId extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "eksSourceName" })
  eksSourceName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "identifier" })
  identifier?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "logicalStackName" })
  logicalStackName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "resourceGroupName" })
  resourceGroupName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "terraformSourceName" })
  terraformSourceName?: string;
}

export class CreateAppVersionResourceRequestBody extends SpeakeasyBase {
  /**
   * Currently, there is no supported additional information for resources.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "additionalInfo" })
  additionalInfo?: Record<string, string[]>;

  /**
   * The Amazon Resource Name (ARN) of the AWS Resilience Hub application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i> guide.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appArn" })
  appArn: string;

  /**
   * The list of Application Components that this resource belongs to. If an Application Component is not part of the AWS Resilience Hub application, it will be added.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appComponents" })
  appComponents: string[];

  /**
   * The Amazon Web Services account that owns the physical resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "awsAccountId" })
  awsAccountId?: string;

  /**
   * The Amazon Web Services region that owns the physical resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "awsRegion" })
  awsRegion?: string;

  /**
   * Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken?: string;

  /**
   * Defines a logical resource identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "logicalResourceId" })
  @Type(() => CreateAppVersionResourceRequestBodyLogicalResourceId)
  logicalResourceId: CreateAppVersionResourceRequestBodyLogicalResourceId;

  /**
   * The physical identifier of the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "physicalResourceId" })
  physicalResourceId: string;

  /**
   * The name of the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourceName" })
  resourceName: string;

  /**
   * The type of resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourceType" })
  resourceType: string;
}

export class CreateAppVersionResourceRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateAppVersionResourceRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateAppVersionResourceResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createAppVersionResourceResponse?: shared.CreateAppVersionResourceResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
