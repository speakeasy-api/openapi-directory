/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RepricingRule - Represents a repricing rule. A repricing rule is used by shopping serving to adjust transactable offer prices if conditions are met.
 */
public class RepricingRule {
    /**
     * A repricing rule that changes the sale price based on cost of goods sale.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cogsBasedRule")
    public RepricingRuleCostOfGoodsSaleRule cogsBasedRule;
    public RepricingRule withCogsBasedRule(RepricingRuleCostOfGoodsSaleRule cogsBasedRule) {
        this.cogsBasedRule = cogsBasedRule;
        return this;
    }
    
    /**
     * Required. Immutable. [CLDR country code](http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml) (e.g. "US").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countryCode")
    public String countryCode;
    public RepricingRule withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveTimePeriod")
    public RepricingRuleEffectiveTime effectiveTimePeriod;
    public RepricingRule withEffectiveTimePeriod(RepricingRuleEffectiveTime effectiveTimePeriod) {
        this.effectiveTimePeriod = effectiveTimePeriod;
        return this;
    }
    
    /**
     * Matcher that specifies eligible offers. When the USE_FEED_ATTRIBUTE option is selected, only the repricing_rule_id attribute on the product feed is used to specify offer-rule mapping. When the CUSTOM_FILTER option is selected, only the *_matcher fields are used to filter the offers for offer-rule mapping. If the CUSTOM_FILTER option is selected, an offer needs to satisfy each custom filter matcher to be eligible for a rule. Size limit: the sum of the number of entries in all the matchers should not exceed 20. For example, there can be 15 product ids and 5 brands, but not 10 product ids and 11 brands.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eligibleOfferMatcher")
    public RepricingRuleEligibleOfferMatcher eligibleOfferMatcher;
    public RepricingRule withEligibleOfferMatcher(RepricingRuleEligibleOfferMatcher eligibleOfferMatcher) {
        this.eligibleOfferMatcher = eligibleOfferMatcher;
        return this;
    }
    
    /**
     * Required. Immutable. The two-letter ISO 639-1 language code associated with the repricing rule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languageCode")
    public String languageCode;
    public RepricingRule withLanguageCode(String languageCode) {
        this.languageCode = languageCode;
        return this;
    }
    
    /**
     * Output only. Immutable. Merchant that owns the repricing rule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantId")
    public String merchantId;
    public RepricingRule withMerchantId(String merchantId) {
        this.merchantId = merchantId;
        return this;
    }
    
    /**
     * Represents whether a rule is paused. A paused rule will behave like a non-paused rule within CRUD operations, with the major difference that a paused rule will not be evaluated and will have no effect on offers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paused")
    public Boolean paused;
    public RepricingRule withPaused(Boolean paused) {
        this.paused = paused;
        return this;
    }
    
    /**
     * Definition of a rule restriction. At least one of the following needs to be true: (1) use_auto_pricing_min_price is true (2) floor.price_delta exists (3) floor.percentage_delta exists If floor.price_delta and floor.percentage_delta are both set on a rule, the highest value will be chosen by the Repricer. In other words, for a product with a price of $50, if the `floor.percentage_delta` is "-10" and the floor.price_delta is "-12", the offer price will only be lowered $5 (10% lower than the original offer price).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("restriction")
    public RepricingRuleRestriction restriction;
    public RepricingRule withRestriction(RepricingRuleRestriction restriction) {
        this.restriction = restriction;
        return this;
    }
    
    /**
     * Output only. Immutable. The ID to uniquely identify each repricing rule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ruleId")
    public String ruleId;
    public RepricingRule withRuleId(String ruleId) {
        this.ruleId = ruleId;
        return this;
    }
    
    /**
     * Definition of stats based rule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statsBasedRule")
    public RepricingRuleStatsBasedRule statsBasedRule;
    public RepricingRule withStatsBasedRule(RepricingRuleStatsBasedRule statsBasedRule) {
        this.statsBasedRule = statsBasedRule;
        return this;
    }
    
    /**
     * The title for the rule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public RepricingRule withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * Required. Immutable. The type of the rule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public RepricingRuleTypeEnum type;
    public RepricingRule withType(RepricingRuleTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
