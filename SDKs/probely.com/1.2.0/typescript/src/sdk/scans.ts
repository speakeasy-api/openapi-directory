/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Start and manage scans against the target.
 *
 * @remarks
 * You can also produce reports and access the list of scanned endpoints.
 *
 */
export class Scans {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List scans for all targets
   */
  getTargetsAllScans(
    req: operations.GetTargetsAllScansRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsAllScansResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsAllScansRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/targets/all/scans/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsAllScansResponse =
        new operations.GetTargetsAllScansResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsAllScans200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsAllScans200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsAllScans401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsAllScans401ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List scans
   */
  getTargetsTargetIdScans(
    req: operations.GetTargetsTargetIdScansRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdScansResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdScansRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scans/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdScansResponse =
        new operations.GetTargetsTargetIdScansResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScans200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScans200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScans401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScans401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScans404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScans404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Dates where scans have ocurred
   */
  getTargetsTargetIdScansDates(
    req: operations.GetTargetsTargetIdScansDatesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdScansDatesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdScansDatesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scans/dates/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdScansDatesResponse =
        new operations.GetTargetsTargetIdScansDatesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansDates200ApplicationJSONDateStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansDates401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansDates401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansDates404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansDates404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Scan page
   *
   * @remarks
   * Given a date return the page number
   */
  getTargetsTargetIdScansRetrievePage(
    req: operations.GetTargetsTargetIdScansRetrievePageRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdScansRetrievePageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdScansRetrievePageRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scans/retrieve_page/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdScansRetrievePageResponse =
        new operations.GetTargetsTargetIdScansRetrievePageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansRetrievePage200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansRetrievePage200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansRetrievePage400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansRetrievePage400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansRetrievePage401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansRetrievePage401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansRetrievePage404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansRetrievePage404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve scan
   */
  getTargetsTargetIdScansId(
    req: operations.GetTargetsTargetIdScansIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdScansIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdScansIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scans/{id}/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdScansIdResponse =
        new operations.GetTargetsTargetIdScansIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scan = utils.objectToClass(httpRes?.data, shared.Scan);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansId401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansId401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansId404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansId404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Scan endpoints file
   */
  getTargetsTargetIdScansIdEndpoints(
    req: operations.GetTargetsTargetIdScansIdEndpointsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdScansIdEndpointsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdScansIdEndpointsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scans/{id}/endpoints/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdScansIdEndpointsResponse =
        new operations.GetTargetsTargetIdScansIdEndpointsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/csv`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.getTargetsTargetIdScansIdEndpoints200ApplicationCsvBinaryString =
              out;
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansIdEndpoints401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansIdEndpoints401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansIdEndpoints404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansIdEndpoints404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Scan report PDF, using the report type specified for the target
   */
  getTargetsTargetIdScansIdReport(
    req: operations.GetTargetsTargetIdScansIdReportRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdScansIdReportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdScansIdReportRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scans/{id}/report/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdScansIdReportResponse =
        new operations.GetTargetsTargetIdScansIdReportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.getTargetsTargetIdScansIdReport200ApplicationPdfBinaryString =
              out;
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansIdReport401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansIdReport401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansIdReport404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansIdReport404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Scan report PDF, using the default report type
   */
  getTargetsTargetIdScansIdReportDefault(
    req: operations.GetTargetsTargetIdScansIdReportDefaultRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdScansIdReportDefaultResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdScansIdReportDefaultRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scans/{id}/report/default/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdScansIdReportDefaultResponse =
        new operations.GetTargetsTargetIdScansIdReportDefaultResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.getTargetsTargetIdScansIdReportDefault200ApplicationPdfBinaryString =
              out;
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansIdReportDefault401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansIdReportDefault401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansIdReportDefault404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansIdReportDefault404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Scan report PDF, using the OWASP report type
   */
  getTargetsTargetIdScansIdReportOwasp(
    req: operations.GetTargetsTargetIdScansIdReportOwaspRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdScansIdReportOwaspResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdScansIdReportOwaspRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scans/{id}/report/owasp/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdScansIdReportOwaspResponse =
        new operations.GetTargetsTargetIdScansIdReportOwaspResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.getTargetsTargetIdScansIdReportOwasp200ApplicationPdfBinaryString =
              out;
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansIdReportOwasp401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansIdReportOwasp401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansIdReportOwasp404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansIdReportOwasp404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Scan report PDF, using the PCI report type
   */
  getTargetsTargetIdScansIdReportPci(
    req: operations.GetTargetsTargetIdScansIdReportPciRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdScansIdReportPciResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdScansIdReportPciRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scans/{id}/report/pci/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdScansIdReportPciResponse =
        new operations.GetTargetsTargetIdScansIdReportPciResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.getTargetsTargetIdScansIdReportPci200ApplicationPdfBinaryString =
              out;
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansIdReportPci401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansIdReportPci401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScansIdReportPci404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScansIdReportPci404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Start a scan on the target
   */
  postTargetsTargetIdScanNow(
    req: operations.PostTargetsTargetIdScanNowRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostTargetsTargetIdScanNowResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostTargetsTargetIdScanNowRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scan_now/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostTargetsTargetIdScanNowResponse =
        new operations.PostTargetsTargetIdScanNowResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scan = utils.objectToClass(httpRes?.data, shared.Scan);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsTargetIdScanNow400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsTargetIdScanNow400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsTargetIdScanNow401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsTargetIdScanNow401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsTargetIdScanNow403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsTargetIdScanNow403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsTargetIdScanNow404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsTargetIdScanNow404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Cancel running scan
   */
  postTargetsTargetIdScansIdCancel(
    req: operations.PostTargetsTargetIdScansIdCancelRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostTargetsTargetIdScansIdCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostTargetsTargetIdScansIdCancelRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scans/{id}/cancel/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostTargetsTargetIdScansIdCancelResponse =
        new operations.PostTargetsTargetIdScansIdCancelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scan = utils.objectToClass(httpRes?.data, shared.Scan);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsTargetIdScansIdCancel401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsTargetIdScansIdCancel401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsTargetIdScansIdCancel403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsTargetIdScansIdCancel403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsTargetIdScansIdCancel404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsTargetIdScansIdCancel404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
