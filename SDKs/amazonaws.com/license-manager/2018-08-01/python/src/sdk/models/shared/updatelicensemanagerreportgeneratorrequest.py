"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import reportcontext as shared_reportcontext
from ..shared import reportfrequency as shared_reportfrequency
from ..shared import reporttype_enum as shared_reporttype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateLicenseManagerReportGeneratorRequest:
    
    client_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientToken') }})  
    license_manager_report_generator_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LicenseManagerReportGeneratorArn') }})  
    report_context: shared_reportcontext.ReportContext = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReportContext') }})  
    report_frequency: shared_reportfrequency.ReportFrequency = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReportFrequency') }})  
    report_generator_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReportGeneratorName') }})  
    type: list[shared_reporttype_enum.ReportTypeEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    