"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import association as shared_association
from ..shared import compactassociationset as shared_compactassociationset
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssociationResults:
    r"""Success"""
    
    associations: Optional[list[shared_association.Association]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associations'), 'exclude': lambda f: f is None }})
    r"""Complete representation of full association object, plus evidence"""  
    compact_associations: Optional[list[shared_compactassociationset.CompactAssociationSet]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compact_associations'), 'exclude': lambda f: f is None }})
    r"""Compact representation in which objects (e.g. phenotypes) are collected for subject-predicate pairs"""  
    docs: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('docs'), 'exclude': lambda f: f is None }})
    r"""solr docs"""  
    facet_counts: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('facet_counts'), 'exclude': lambda f: f is None }})
    r"""Mapping between field names and association counts"""  
    highlighting: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highlighting'), 'exclude': lambda f: f is None }})
    r"""Mapping between id and solr highlight"""  
    num_found: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numFound'), 'exclude': lambda f: f is None }})
    r"""total number of associations matching query"""  
    objects: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objects'), 'exclude': lambda f: f is None }})
    r"""List of distinct objects used"""  
    