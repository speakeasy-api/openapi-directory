"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import contact_details as shared_contact_details
from ..shared import error as shared_error
from ..shared import pickup_windows as shared_pickup_windows
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class SchedulePickupResponseBodyPartialAddressAddressResidentialIndicatorEnum(str, Enum):
    r"""Indicates whether an address is residential."""
    UNKNOWN = 'unknown'
    YES = 'yes'
    NO = 'no'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchedulePickupResponseBodyPartialAddress:
    r"""A complete or partial mailing address."""
    
    address_line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_line1') }})
    r"""The first line of the street address.  For some addresses, this may be the only line.  Other addresses may require 2 or 3 lines."""  
    address_residential_indicator: SchedulePickupResponseBodyPartialAddressAddressResidentialIndicatorEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_residential_indicator') }})
    r"""Indicates whether this is a residential address."""  
    city_locality: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city_locality') }})
    r"""The name of the city or locality"""  
    country_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country_code') }})
    r"""The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of a contact person at this address.  This field may be set instead of - or in addition to - the `company_name` field."""  
    phone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone') }})
    r"""The phone number of a contact person at this address.  The format of this phone number varies depending on the country."""  
    postal_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postal_code') }})  
    state_province: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state_province') }})
    r"""The state or province.  For some countries (including the U.S.) only abbreviations are allowed.  Other countries allow the full name or abbreviation."""  
    address_line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_line2'), 'exclude': lambda f: f is None }})
    r"""The second line of the street address.  For some addresses, this line may not be needed."""  
    address_line3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_line3'), 'exclude': lambda f: f is None }})
    r"""The third line of the street address.  For some addresses, this line may not be needed."""  
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_name'), 'exclude': lambda f: f is None }})
    r"""If this is a business address, then the company name should be specified here."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email for the address owner."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchedulePickupResponseBodyOutput:
    r"""An error response body"""
    
    errors: list[shared_error.Error] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors') }})
    r"""The errors associated with the failed API call"""  
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id') }})
    r"""A UUID that uniquely identifies the request id.
    This can be given to the support team to help debug non-trivial issues that may occur
    """  
    cancelled_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancelled_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time that the pickup was cancelled in ShipEngine."""  
    carrier_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier_id'), 'exclude': lambda f: f is None }})
    r"""The carrier_id associated with the pickup"""  
    confirmation_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmation_number'), 'exclude': lambda f: f is None }})
    r"""The carrier confirmation number for the scheduled pickup."""  
    contact_details: Optional[shared_contact_details.ContactDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact_details'), 'exclude': lambda f: f is None }})  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time that the pickup was created in ShipEngine."""  
    label_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_ids'), 'exclude': lambda f: f is None }})
    r"""Label IDs that will be included in the pickup request"""  
    pickup_address: Optional[SchedulePickupResponseBodyPartialAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickup_address'), 'exclude': lambda f: f is None }})  
    pickup_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickup_id'), 'exclude': lambda f: f is None }})  
    pickup_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickup_notes'), 'exclude': lambda f: f is None }})
    r"""Used by some carriers to give special instructions for a package pickup"""  
    pickup_windows: Optional[list[shared_pickup_windows.PickupWindows]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickup_windows'), 'exclude': lambda f: f is None }})
    r"""An array of available pickup windows. Carriers can return multiple times that they will pickup packages."""  
    warehouse_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warehouse_id'), 'exclude': lambda f: f is None }})
    r"""The warehouse_id associated with the pickup"""  
    