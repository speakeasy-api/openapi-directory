"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customdimension as shared_customdimension
from ..shared import custommetric as shared_custommetric
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Conversion:
    r"""A conversion containing data relevant to DoubleClick Search."""
    
    ad_group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adGroupId'), 'exclude': lambda f: f is None }})
    r"""DS ad group ID."""  
    ad_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adId'), 'exclude': lambda f: f is None }})
    r"""DS ad ID."""  
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""DS advertiser ID."""  
    agency_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agencyId'), 'exclude': lambda f: f is None }})
    r"""DS agency ID."""  
    attribution_model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributionModel'), 'exclude': lambda f: f is None }})
    r"""Available to advertisers only after contacting DoubleClick Search customer support."""  
    campaign_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaignId'), 'exclude': lambda f: f is None }})
    r"""DS campaign ID."""  
    channel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel'), 'exclude': lambda f: f is None }})
    r"""Sales channel for the product. Acceptable values are: - \\"`local`\\": a physical store - \\"`online`\\": an online store"""  
    click_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickId'), 'exclude': lambda f: f is None }})
    r"""DS click ID for the conversion."""  
    conversion_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversionId'), 'exclude': lambda f: f is None }})
    r"""For offline conversions, advertisers provide this ID. Advertisers can specify any ID that is meaningful to them. Each conversion in a request must specify a unique ID, and the combination of ID and timestamp must be unique amongst all conversions within the advertiser. For online conversions, DS copies the `dsConversionId` or `floodlightOrderId` into this property depending on the advertiser's Floodlight instructions."""  
    conversion_modified_timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversionModifiedTimestamp'), 'exclude': lambda f: f is None }})
    r"""The time at which the conversion was last modified, in epoch millis UTC."""  
    conversion_timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversionTimestamp'), 'exclude': lambda f: f is None }})
    r"""The time at which the conversion took place, in epoch millis UTC."""  
    count_millis: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countMillis'), 'exclude': lambda f: f is None }})
    r"""Available to advertisers only after contacting DoubleClick Search customer support."""  
    criterion_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('criterionId'), 'exclude': lambda f: f is None }})
    r"""DS criterion (keyword) ID."""  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""The currency code for the conversion's revenue. Should be in ISO 4217 alphabetic (3-char) format."""  
    custom_dimension: Optional[list[shared_customdimension.CustomDimension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customDimension'), 'exclude': lambda f: f is None }})
    r"""Custom dimensions for the conversion, which can be used to filter data in a report."""  
    customer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerId'), 'exclude': lambda f: f is None }})
    r"""Customer ID of a client account in the new Search Ads 360 experience."""  
    custom_metric: Optional[list[shared_custommetric.CustomMetric]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customMetric'), 'exclude': lambda f: f is None }})
    r"""Custom metrics for the conversion."""  
    device_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceType'), 'exclude': lambda f: f is None }})
    r"""The type of device on which the conversion occurred."""  
    ds_conversion_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dsConversionId'), 'exclude': lambda f: f is None }})
    r"""ID that DoubleClick Search generates for each conversion."""  
    engine_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('engineAccountId'), 'exclude': lambda f: f is None }})
    r"""DS engine account ID."""  
    floodlight_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floodlightOrderId'), 'exclude': lambda f: f is None }})
    r"""The Floodlight order ID provided by the advertiser for the conversion."""  
    inventory_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventoryAccountId'), 'exclude': lambda f: f is None }})
    r"""ID that DS generates and uses to uniquely identify the inventory account that contains the product."""  
    product_country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productCountry'), 'exclude': lambda f: f is None }})
    r"""The country registered for the Merchant Center feed that contains the product. Use an ISO 3166 code to specify a country."""  
    product_group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productGroupId'), 'exclude': lambda f: f is None }})
    r"""DS product group ID."""  
    product_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productId'), 'exclude': lambda f: f is None }})
    r"""The product ID (SKU)."""  
    product_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productLanguage'), 'exclude': lambda f: f is None }})
    r"""The language registered for the Merchant Center feed that contains the product. Use an ISO 639 code to specify a language."""  
    quantity_millis: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantityMillis'), 'exclude': lambda f: f is None }})
    r"""The quantity of this conversion, in millis."""  
    revenue_micros: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueMicros'), 'exclude': lambda f: f is None }})
    r"""The revenue amount of this `TRANSACTION` conversion, in micros (value multiplied by 1000000, no decimal). For example, to specify a revenue value of \\"10\\" enter \\"10000000\\" (10 million) in your request."""  
    segmentation_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segmentationId'), 'exclude': lambda f: f is None }})
    r"""The numeric segmentation identifier (for example, DoubleClick Search Floodlight activity ID)."""  
    segmentation_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segmentationName'), 'exclude': lambda f: f is None }})
    r"""The friendly segmentation identifier (for example, DoubleClick Search Floodlight activity name)."""  
    segmentation_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segmentationType'), 'exclude': lambda f: f is None }})
    r"""The segmentation type of this conversion (for example, `FLOODLIGHT`)."""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The state of the conversion, that is, either `ACTIVE` or `REMOVED`. Note: state DELETED is deprecated."""  
    store_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storeId'), 'exclude': lambda f: f is None }})
    r"""The ID of the local store for which the product was advertised. Applicable only when the channel is \\"`local`\\"."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the conversion, that is, either `ACTION` or `TRANSACTION`. An `ACTION` conversion is an action by the user that has no monetarily quantifiable value, while a `TRANSACTION` conversion is an action that does have a monetarily quantifiable value. Examples are email list signups (`ACTION`) versus ecommerce purchases (`TRANSACTION`)."""  
    