"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import automloverridestrategy_enum as shared_automloverridestrategy_enum
from ..shared import encryptionconfig as shared_encryptionconfig
from ..shared import evaluationparameters as shared_evaluationparameters
from ..shared import featurizationconfig as shared_featurizationconfig
from ..shared import hyperparametertuningjobconfig as shared_hyperparametertuningjobconfig
from ..shared import inputdataconfig as shared_inputdataconfig
from ..shared import optimizationmetric_enum as shared_optimizationmetric_enum
from ..shared import predictorexecutiondetails as shared_predictorexecutiondetails
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribePredictorResponse:
    r"""Success"""
    
    algorithm_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlgorithmArn'), 'exclude': lambda f: f is None }})  
    auto_ml_algorithm_arns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMLAlgorithmArns'), 'exclude': lambda f: f is None }})  
    auto_ml_override_strategy: Optional[shared_automloverridestrategy_enum.AutoMLOverrideStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMLOverrideStrategy'), 'exclude': lambda f: f is None }})  
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    dataset_import_job_arns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatasetImportJobArns'), 'exclude': lambda f: f is None }})  
    encryption_config: Optional[shared_encryptionconfig.EncryptionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionConfig'), 'exclude': lambda f: f is None }})  
    estimated_time_remaining_in_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EstimatedTimeRemainingInMinutes'), 'exclude': lambda f: f is None }})  
    evaluation_parameters: Optional[shared_evaluationparameters.EvaluationParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EvaluationParameters'), 'exclude': lambda f: f is None }})  
    featurization_config: Optional[shared_featurizationconfig.FeaturizationConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeaturizationConfig'), 'exclude': lambda f: f is None }})  
    forecast_horizon: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastHorizon'), 'exclude': lambda f: f is None }})  
    forecast_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastTypes'), 'exclude': lambda f: f is None }})  
    hpo_config: Optional[shared_hyperparametertuningjobconfig.HyperParameterTuningJobConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HPOConfig'), 'exclude': lambda f: f is None }})  
    input_data_config: Optional[shared_inputdataconfig.InputDataConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputDataConfig'), 'exclude': lambda f: f is None }})  
    is_auto_predictor: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsAutoPredictor'), 'exclude': lambda f: f is None }})  
    last_modification_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModificationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Message'), 'exclude': lambda f: f is None }})  
    optimization_metric: Optional[shared_optimizationmetric_enum.OptimizationMetricEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OptimizationMetric'), 'exclude': lambda f: f is None }})  
    perform_auto_ml: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PerformAutoML'), 'exclude': lambda f: f is None }})  
    perform_hpo: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PerformHPO'), 'exclude': lambda f: f is None }})  
    predictor_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PredictorArn'), 'exclude': lambda f: f is None }})  
    predictor_execution_details: Optional[shared_predictorexecutiondetails.PredictorExecutionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PredictorExecutionDetails'), 'exclude': lambda f: f is None }})  
    predictor_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PredictorName'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    training_parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingParameters'), 'exclude': lambda f: f is None }})  
    