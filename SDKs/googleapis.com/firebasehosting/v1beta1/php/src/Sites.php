<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Sites 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new channel in the specified site.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsCreateResponse
     */
	public function firebasehostingSitesChannelsCreate(
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/channels', \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Channel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the channels for the specified site. All sites have a default `live` channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsListResponse
     */
	public function firebasehostingSitesChannelsList(
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/channels', \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesChannelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listChannelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListChannelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a domain mapping on the specified site.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsCreateResponse
     */
	public function firebasehostingSitesDomainsCreate(
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/domains', \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "domain", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->domain = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Domain', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the domains for the specified site.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsListResponse
     */
	public function firebasehostingSitesDomainsList(
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/domains', \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDomainsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDomainsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified domain mapping, creating the mapping as if it does not exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsUpdateResponse
     */
	public function firebasehostingSitesDomainsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "domain", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesDomainsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->domain = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Domain', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesCreateResponse
     */
	public function firebasehostingSitesReleasesCreate(
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/releases', \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "release", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->release = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Release', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default `live` channel and any active preview channels for the specified site.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesListResponse
     */
	public function firebasehostingSitesReleasesList(
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/releases', \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesReleasesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listReleasesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListReleasesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new version on the specified target site using the content of the specified version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCloneRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCloneSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCloneResponse
     */
	public function firebasehostingSitesVersionsClone(
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCloneRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCloneSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCloneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/versions:clone', \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCloneRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cloneVersionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCloneRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCloneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new version for the specified site.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCreateResponse
     */
	public function firebasehostingSitesVersionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "version", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->version = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Version', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsDeleteResponse
     */
	public function firebasehostingSitesVersionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the remaining files to be uploaded for the specified version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsFilesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsFilesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsFilesListResponse
     */
	public function firebasehostingSitesVersionsFilesList(
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsFilesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsFilesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsFilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/files', \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsFilesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsFilesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsFilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVersionFilesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVersionFilesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the specified version that has been created for the specified site. This can include versions that were created for the default `live` channel or for any active preview channels for the specified site.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsGetResponse
     */
	public function firebasehostingSitesVersionsGet(
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->version = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Version', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the versions that have been created for the specified site. This list includes versions for both the default `live` channel and any active preview channels for the specified site.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsListResponse
     */
	public function firebasehostingSitesVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     *  Updates the specified metadata for the specified version. This method will fail with `FAILED_PRECONDITION` in the event of an invalid state transition. The supported [state](../sites.versions#versionstatus) transitions for a version are from `CREATED` to `FINALIZED`. Use [`DeleteVersion`](delete) to set the status of a version to `DELETED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPatchResponse
     */
	public function firebasehostingSitesVersionsPatch(
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "version", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->version = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Version', 'json');
            }
        }

        return $response;
    }
	
    /**
     *  Adds content files to the specified version. Each file must be under 2 GB.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPopulateFilesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPopulateFilesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPopulateFilesResponse
     */
	public function firebasehostingSitesVersionsPopulateFiles(
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPopulateFilesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPopulateFilesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPopulateFilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}:populateFiles', \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPopulateFilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "populateVersionFilesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPopulateFilesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebasehostingSitesVersionsPopulateFilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->populateVersionFilesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PopulateVersionFilesResponse', 'json');
            }
        }

        return $response;
    }
}