"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Any, Optional

class TagsCountTypeEnum(str, Enum):
    r"""Type of entity related to the tag"""
    TP = 'tp'
    TL = 'tl'
    DP = 'dp'
    GR = 'gr'


@dataclasses.dataclass
class TagsCountRequest:
    
    datapoints: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'datapoints', 'style': 'form', 'explode': True }})
    r"""Comma separated list of datapoints id to filter by"""  
    groups: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'groups', 'style': 'form', 'explode': True }})
    r"""Comma separated list of groups id to filter by"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Name of the tag"""  
    type: Optional[TagsCountTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Type of entity related to the tag"""  
    

@dataclasses.dataclass
class TagsCountResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    system_object: Optional[dict[str, Any]] = dataclasses.field(default=None)  
    