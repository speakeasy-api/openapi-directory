<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Databases 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes a database from a Cloud SQL instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesDeleteResponse
     */
	public function sqlDatabasesDelete(
        \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{project}/instances/{instance}/databases/{database}', \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlDatabasesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a resource containing information about a database inside a Cloud SQL instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesGetResponse
     */
	public function sqlDatabasesGet(
        \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{project}/instances/{instance}/databases/{database}', \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlDatabasesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->database = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Database', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a resource containing information about a database inside a Cloud SQL instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesInsertResponse
     */
	public function sqlDatabasesInsert(
        \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{project}/instances/{instance}/databases', \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "database", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlDatabasesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists databases in the specified Cloud SQL instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesListResponse
     */
	public function sqlDatabasesList(
        \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{project}/instances/{instance}/databases', \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlDatabasesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->databasesListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DatabasesListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Partially updates a resource containing information about a database inside a Cloud SQL instance. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesPatchResponse
     */
	public function sqlDatabasesPatch(
        \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{project}/instances/{instance}/databases/{database}', \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "database1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlDatabasesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a resource containing information about a database inside a Cloud SQL instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesUpdateResponse
     */
	public function sqlDatabasesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{project}/instances/{instance}/databases/{database}', \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "database1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlDatabasesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlDatabasesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}