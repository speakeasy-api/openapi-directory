/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import java.time.OffsetDateTime;

/**
 * DestinyEntitiesCharactersDestinyCharacterComponent - This component contains base properties of the character. You'll probably want to always request this component, but hey you do you.
 */
public class DestinyEntitiesCharactersDestinyCharacterComponent {
    /**
     * The "base" level of your character, not accounting for any light level.
     */
    
    public Integer baseCharacterLevel;

    public DestinyEntitiesCharactersDestinyCharacterComponent withBaseCharacterLevel(Integer baseCharacterLevel) {
        this.baseCharacterLevel = baseCharacterLevel;
        return this;
    }
    
    /**
     * The unique identifier for the character.
     */
    
    public Long characterId;

    public DestinyEntitiesCharactersDestinyCharacterComponent withCharacterId(Long characterId) {
        this.characterId = characterId;
        return this;
    }
    
    /**
     * Use this hash to look up the character's DestinyClassDefinition.
     */
    
    public Long classHash;

    public DestinyEntitiesCharactersDestinyCharacterComponent withClassHash(Long classHash) {
        this.classHash = classHash;
        return this;
    }
    
    /**
     * Mostly for historical purposes at this point, this is an enumeration for the character's class.
     * It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.
     */
    
    public Integer classType;

    public DestinyEntitiesCharactersDestinyCharacterComponent withClassType(Integer classType) {
        this.classType = classType;
        return this;
    }
    
    /**
     * The last date that the user played Destiny.
     */
    
    public OffsetDateTime dateLastPlayed;

    public DestinyEntitiesCharactersDestinyCharacterComponent withDateLastPlayed(OffsetDateTime dateLastPlayed) {
        this.dateLastPlayed = dateLastPlayed;
        return this;
    }
    
    /**
     * A shortcut path to the user's currently equipped emblem background image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.
     */
    
    public String emblemBackgroundPath;

    public DestinyEntitiesCharactersDestinyCharacterComponent withEmblemBackgroundPath(String emblemBackgroundPath) {
        this.emblemBackgroundPath = emblemBackgroundPath;
        return this;
    }
    
    /**
     * A shortcut for getting the background color of the user's currently equipped emblem without having to do a DestinyInventoryItemDefinition lookup.
     */
    
    public DestinyEntitiesCharactersDestinyCharacterComponentEmblemColor emblemColor;

    public DestinyEntitiesCharactersDestinyCharacterComponent withEmblemColor(DestinyEntitiesCharactersDestinyCharacterComponentEmblemColor emblemColor) {
        this.emblemColor = emblemColor;
        return this;
    }
    
    /**
     * The hash of the currently equipped emblem for the user. Can be used to look up the DestinyInventoryItemDefinition.
     */
    
    public Long emblemHash;

    public DestinyEntitiesCharactersDestinyCharacterComponent withEmblemHash(Long emblemHash) {
        this.emblemHash = emblemHash;
        return this;
    }
    
    /**
     * A shortcut path to the user's currently equipped emblem image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.
     */
    
    public String emblemPath;

    public DestinyEntitiesCharactersDestinyCharacterComponent withEmblemPath(String emblemPath) {
        this.emblemPath = emblemPath;
        return this;
    }
    
    /**
     * Use this hash to look up the character's DestinyGenderDefinition.
     */
    
    public Long genderHash;

    public DestinyEntitiesCharactersDestinyCharacterComponent withGenderHash(Long genderHash) {
        this.genderHash = genderHash;
        return this;
    }
    
    /**
     * Mostly for historical purposes at this point, this is an enumeration for the character's Gender.
     * It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove. And yeah, it's an enumeration and not a boolean. Fight me.
     */
    
    public Integer genderType;

    public DestinyEntitiesCharactersDestinyCharacterComponent withGenderType(Integer genderType) {
        this.genderType = genderType;
        return this;
    }
    
    /**
     * The progression that indicates your character's level. Not their light level, but their character level: you know, the thing you max out a couple hours in and then ignore for the sake of light level.
     */
    
    public DestinyEntitiesCharactersDestinyCharacterComponentLevelProgression levelProgression;

    public DestinyEntitiesCharactersDestinyCharacterComponent withLevelProgression(DestinyEntitiesCharactersDestinyCharacterComponentLevelProgression levelProgression) {
        this.levelProgression = levelProgression;
        return this;
    }
    
    /**
     * The user's calculated "Light Level". Light level is an indicator of your power that mostly matters in the end game, once you've reached the maximum character level: it's a level that's dependent on the average Attack/Defense power of your items.
     */
    
    public Integer light;

    public DestinyEntitiesCharactersDestinyCharacterComponent withLight(Integer light) {
        this.light = light;
        return this;
    }
    
    /**
     * Every Destiny Profile has a membershipId. This is provided on the character as well for convenience.
     */
    
    public Long membershipId;

    public DestinyEntitiesCharactersDestinyCharacterComponent withMembershipId(Long membershipId) {
        this.membershipId = membershipId;
        return this;
    }
    
    /**
     * membershipType tells you the platform on which the character plays. Examine the BungieMembershipType enumeration for possible values.
     */
    
    public Integer membershipType;

    public DestinyEntitiesCharactersDestinyCharacterComponent withMembershipType(Integer membershipType) {
        this.membershipType = membershipType;
        return this;
    }
    
    /**
     * If the user is currently playing, this is how long they've been playing.
     */
    
    public Long minutesPlayedThisSession;

    public DestinyEntitiesCharactersDestinyCharacterComponent withMinutesPlayedThisSession(Long minutesPlayedThisSession) {
        this.minutesPlayedThisSession = minutesPlayedThisSession;
        return this;
    }
    
    /**
     * If this value is 525,600, then they played Destiny for a year. Or they're a very dedicated Rent fan. Note that this includes idle time, not just time spent actually in activities shooting things.
     */
    
    public Long minutesPlayedTotal;

    public DestinyEntitiesCharactersDestinyCharacterComponent withMinutesPlayedTotal(Long minutesPlayedTotal) {
        this.minutesPlayedTotal = minutesPlayedTotal;
        return this;
    }
    
    /**
     * A number between 0 and 100, indicating the whole and fractional % remaining to get to the next character level.
     */
    
    public Float percentToNextLevel;

    public DestinyEntitiesCharactersDestinyCharacterComponent withPercentToNextLevel(Float percentToNextLevel) {
        this.percentToNextLevel = percentToNextLevel;
        return this;
    }
    
    /**
     * Use this hash to look up the character's DestinyRaceDefinition.
     */
    
    public Long raceHash;

    public DestinyEntitiesCharactersDestinyCharacterComponent withRaceHash(Long raceHash) {
        this.raceHash = raceHash;
        return this;
    }
    
    /**
     * Mostly for historical purposes at this point, this is an enumeration for the character's race.
     * It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.
     */
    
    public Integer raceType;

    public DestinyEntitiesCharactersDestinyCharacterComponent withRaceType(Integer raceType) {
        this.raceType = raceType;
        return this;
    }
    
    /**
     * Your character's stats, such as Agility, Resilience, etc... *not* historical stats.
     * You'll have to call a different endpoint for those.
     */
    
    public java.util.Map<String, Integer> stats;

    public DestinyEntitiesCharactersDestinyCharacterComponent withStats(java.util.Map<String, Integer> stats) {
        this.stats = stats;
        return this;
    }
    
    /**
     * If this Character has a title assigned to it, this is the identifier of the DestinyRecordDefinition that has that title information.
     */
    
    public Long titleRecordHash;

    public DestinyEntitiesCharactersDestinyCharacterComponent withTitleRecordHash(Long titleRecordHash) {
        this.titleRecordHash = titleRecordHash;
        return this;
    }
    
    public DestinyEntitiesCharactersDestinyCharacterComponent(){}
}
