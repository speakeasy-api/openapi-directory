"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import four_hundred_and_five as shared_four_hundred_and_five
from ..shared import four_hundred_and_twelve as shared_four_hundred_and_twelve
from ..shared import nodata as shared_nodata
from ..shared import success as shared_success
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class KkidApnsPostSecurity:
    
    auth_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-Auth' }})  
    
class KkidApnsPostPriorityEnum(str, Enum):
    r"""Notification section name (optional for send, default is active)"""
    PASSIVE = 'passive'
    ACTIVE = 'active'
    TIME_SENSITIVE = 'time-sensitive'
    CRITICAL = 'critical'

class KkidApnsPostSectionEnum(str, Enum):
    r"""Notification section name (required for send/subscribe/unsubscribe)"""
    CHORES = 'Chores'
    CHORES_NEW = 'Chores-New'
    CHORES_REMINDERS = 'Chores-Reminders'
    ALLOWANCE = 'Allowance'
    ALLOWANCE_NEW = 'Allowance-New'
    WISH_LIST = 'WishList'

class KkidApnsPostToolEnum(str, Enum):
    r"""tool you wish to talk to"""
    REGISTER = 'register'
    SUBSCRIBE = 'subscribe'
    UNSUBSCRIBE = 'unsubscribe'
    SEND = 'send'


@dataclasses.dataclass
class KkidApnsPostRequest:
    
    kid_user_id: int = dataclasses.field(metadata={'query_param': { 'field_name': 'kidUserId', 'style': 'form', 'explode': True }})
    r"""userID of the kid"""  
    tool: KkidApnsPostToolEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'tool', 'style': 'form', 'explode': True }})
    r"""tool you wish to talk to"""  
    badge: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'badge', 'style': 'form', 'explode': True }})
    r"""Number for badge icon (optional for send)"""  
    devicename: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'devicename', 'style': 'form', 'explode': True }})
    r"""Name of device to associate to token (required for register)"""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'message', 'style': 'form', 'explode': True }})
    r"""APNS message body (required for send)"""  
    priority: Optional[KkidApnsPostPriorityEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'priority', 'style': 'form', 'explode': True }})
    r"""Notification section name (optional for send, default is active)"""  
    section: Optional[KkidApnsPostSectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'section', 'style': 'form', 'explode': True }})
    r"""Notification section name (required for send/subscribe/unsubscribe)"""  
    sound: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sound', 'style': 'form', 'explode': True }})
    r"""Name of sound file to play for send notification (optional for send)"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'title', 'style': 'form', 'explode': True }})
    r"""title of APNS message (required for send)"""  
    token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'token', 'style': 'form', 'explode': True }})
    r"""device APNS token (required for register)"""  
    

@dataclasses.dataclass
class KkidApnsPostResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    four_hundred_and_five: Optional[shared_four_hundred_and_five.FourHundredAndFive] = dataclasses.field(default=None)
    r"""Method Not Allowed- API user does not have access to use this method"""  
    four_hundred_and_twelve: Optional[shared_four_hundred_and_twelve.FourHundredAndTwelve] = dataclasses.field(default=None)
    r"""API Access Denied! Your API key is invalid, expired, or not supplied!"""  
    nodata: Optional[shared_nodata.Nodata] = dataclasses.field(default=None)
    r"""No Data Returned"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    success: Optional[shared_success.Success] = dataclasses.field(default=None)
    r"""search results matching criteria"""  
    