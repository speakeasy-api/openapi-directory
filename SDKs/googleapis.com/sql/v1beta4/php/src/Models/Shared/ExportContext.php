<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ExportContext - Database instance export context.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ExportContext
{
    /**
     * Options for exporting BAK files (SQL Server-only)
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ExportContextBakExportOptions $bakExportOptions
     */
	#[\JMS\Serializer\Annotation\SerializedName('bakExportOptions')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ExportContextBakExportOptions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExportContextBakExportOptions $bakExportOptions = null;
    
    /**
     * Options for exporting data as CSV. `MySQL` and `PostgreSQL` instances only.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ExportContextCsvExportOptions $csvExportOptions
     */
	#[\JMS\Serializer\Annotation\SerializedName('csvExportOptions')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ExportContextCsvExportOptions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExportContextCsvExportOptions $csvExportOptions = null;
    
    /**
     * Databases to be exported. `MySQL instances:` If `fileType` is `SQL` and no database is specified, all databases are exported, except for the `mysql` system database. If `fileType` is `CSV`, you can specify one database, either by using this property or by using the `csvExportOptions.selectQuery` property, which takes precedence over this property. `PostgreSQL instances:` You must specify one database to be exported. If `fileType` is `CSV`, this database must match the one specified in the `csvExportOptions.selectQuery` property. `SQL Server instances:` You must specify one database to be exported, and the `fileType` must be `BAK`.
     * 
     * @var ?array<string> $databases
     */
	#[\JMS\Serializer\Annotation\SerializedName('databases')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $databases = null;
    
    /**
     * The file type for the specified uri.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ExportContextFileTypeEnum $fileType
     */
	#[\JMS\Serializer\Annotation\SerializedName('fileType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ExportContextFileTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExportContextFileTypeEnum $fileType = null;
    
    /**
     * This is always `sql#exportContext`.
     * 
     * @var ?string $kind
     */
	#[\JMS\Serializer\Annotation\SerializedName('kind')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $kind = null;
    
    /**
     * Option for export offload.
     * 
     * @var ?bool $offload
     */
	#[\JMS\Serializer\Annotation\SerializedName('offload')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $offload = null;
    
    /**
     * Options for exporting data as SQL statements.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ExportContextSqlExportOptions $sqlExportOptions
     */
	#[\JMS\Serializer\Annotation\SerializedName('sqlExportOptions')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ExportContextSqlExportOptions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExportContextSqlExportOptions $sqlExportOptions = null;
    
    /**
     * The path to the file in Google Cloud Storage where the export will be stored. The URI is in the form `gs://bucketName/fileName`. If the file already exists, the request succeeds, but the operation fails. If `fileType` is `SQL` and the filename ends with .gz, the contents are compressed.
     * 
     * @var ?string $uri
     */
	#[\JMS\Serializer\Annotation\SerializedName('uri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $uri = null;
    
	public function __construct()
	{
		$this->bakExportOptions = null;
		$this->csvExportOptions = null;
		$this->databases = null;
		$this->fileType = null;
		$this->kind = null;
		$this->offload = null;
		$this->sqlExportOptions = null;
		$this->uri = null;
	}
}
