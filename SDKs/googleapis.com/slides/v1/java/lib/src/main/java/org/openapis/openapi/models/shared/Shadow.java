/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Shadow - The shadow properties of a page element. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.
 */
public class Shadow {
    /**
     * The alignment point of the shadow, that sets the origin for translate, scale and skew of the shadow. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alignment")
    public ShadowAlignmentEnum alignment;
    public Shadow withAlignment(ShadowAlignmentEnum alignment) {
        this.alignment = alignment;
        return this;
    }
    
    /**
     * The alpha of the shadow's color, from 0.0 to 1.0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alpha")
    public Float alpha;
    public Shadow withAlpha(Float alpha) {
        this.alpha = alpha;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blurRadius")
    public Dimension blurRadius;
    public Shadow withBlurRadius(Dimension blurRadius) {
        this.blurRadius = blurRadius;
        return this;
    }
    
    /**
     * A themeable solid color value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color")
    public OpaqueColor color;
    public Shadow withColor(OpaqueColor color) {
        this.color = color;
        return this;
    }
    
    /**
     * The shadow property state. Updating the shadow on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no shadow on a page element, set this field to `NOT_RENDERED`. In this case, any other shadow fields set in the same request will be ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("propertyState")
    public ShadowPropertyStateEnum propertyState;
    public Shadow withPropertyState(ShadowPropertyStateEnum propertyState) {
        this.propertyState = propertyState;
        return this;
    }
    
    /**
     * Whether the shadow should rotate with the shape. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rotateWithShape")
    public Boolean rotateWithShape;
    public Shadow withRotateWithShape(Boolean rotateWithShape) {
        this.rotateWithShape = rotateWithShape;
        return this;
    }
    
    /**
     * AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ] to transform source coordinates (x,y) into destination coordinates (x', y') according to: x' x = shear_y scale_y translate_y 1 [ 1 ] After transformation, x' = scale_x * x + shear_x * y + translate_x; y' = scale_y * y + shear_y * x + translate_y; This message is therefore composed of these six matrix elements.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transform")
    public AffineTransform transform;
    public Shadow withTransform(AffineTransform transform) {
        this.transform = transform;
        return this;
    }
    
    /**
     * The type of the shadow. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public ShadowTypeEnum type;
    public Shadow withType(ShadowTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
