/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AppEngineHttpQueue } from "./appenginehttpqueue";
import { HttpTarget } from "./httptarget";
import { QueueStats } from "./queuestats";
import { RateLimits } from "./ratelimits";
import { RetryConfig } from "./retryconfig";
import { StackdriverLoggingConfig } from "./stackdriverloggingconfig";
import { Expose, Type } from "class-transformer";

/**
 * Output only. The state of the queue. `state` can only be changed by called PauseQueue, ResumeQueue, or uploading [queue.yaml/xml](https://cloud.google.com/appengine/docs/python/config/queueref). UpdateQueue cannot be used to change `state`.
 */
export enum QueueStateEnum {
  StateUnspecified = "STATE_UNSPECIFIED",
  Running = "RUNNING",
  Paused = "PAUSED",
  Disabled = "DISABLED",
}

/**
 * Immutable. The type of a queue (push or pull). `Queue.type` is an immutable property of the queue that is set at the queue creation time. When left unspecified, the default value of `PUSH` is selected.
 */
export enum QueueTypeEnum {
  TypeUnspecified = "TYPE_UNSPECIFIED",
  Pull = "PULL",
  Push = "PUSH",
}

/**
 * A queue is a container of related tasks. Queues are configured to manage how those tasks are dispatched. Configurable properties include rate limits, retry options, queue types, and others.
 */
export class Queue extends SpeakeasyBase {
  /**
   * App Engine HTTP queue. The task will be delivered to the App Engine application hostname specified by its AppEngineHttpQueue and AppEngineHttpRequest. The documentation for AppEngineHttpRequest explains how the task's host URL is constructed. Using AppEngineHttpQueue requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appEngineHttpQueue" })
  @Type(() => AppEngineHttpQueue)
  appEngineHttpQueue?: AppEngineHttpQueue;

  /**
   * HTTP target. When specified as a Queue, all the tasks with [HttpRequest] will be overridden according to the target.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "httpTarget" })
  @Type(() => HttpTarget)
  httpTarget?: HttpTarget;

  /**
   * Caller-specified and required in CreateQueue, after which it becomes output only. The queue name. The queue name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the queue's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Output only. The last time this queue was purged. All tasks that were created before this time were purged. A queue can be purged using PurgeQueue, the [App Engine Task Queue SDK, or the Cloud Console](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/deleting-tasks-and-queues#purging_all_tasks_from_a_queue). Purge time will be truncated to the nearest microsecond. Purge time will be unset if the queue has never been purged.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "purgeTime" })
  purgeTime?: string;

  /**
   * Rate limits. This message determines the maximum rate that tasks can be dispatched by a queue, regardless of whether the dispatch is a first task attempt or a retry. Note: The debugging command, RunTask, will run a task even if the queue has reached its RateLimits.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rateLimits" })
  @Type(() => RateLimits)
  rateLimits?: RateLimits;

  /**
   * Retry config. These settings determine when a failed task attempt is retried.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retryConfig" })
  @Type(() => RetryConfig)
  retryConfig?: RetryConfig;

  /**
   * Configuration options for writing logs to [Stackdriver Logging](https://cloud.google.com/logging/docs/).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stackdriverLoggingConfig" })
  @Type(() => StackdriverLoggingConfig)
  stackdriverLoggingConfig?: StackdriverLoggingConfig;

  /**
   * Output only. The state of the queue. `state` can only be changed by called PauseQueue, ResumeQueue, or uploading [queue.yaml/xml](https://cloud.google.com/appengine/docs/python/config/queueref). UpdateQueue cannot be used to change `state`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: QueueStateEnum;

  /**
   * Statistics for a queue.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stats" })
  @Type(() => QueueStats)
  stats?: QueueStats;

  /**
   * The maximum amount of time that a task will be retained in this queue. Queues created by Cloud Tasks have a default `task_ttl` of 31 days. After a task has lived for `task_ttl`, the task will be deleted regardless of whether it was dispatched or not. The `task_ttl` for queues created via queue.yaml/xml is equal to the maximum duration because there is a [storage quota](https://cloud.google.com/appengine/quotas#Task_Queue) for these queues. To view the maximum valid duration, see the documentation for Duration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taskTtl" })
  taskTtl?: string;

  /**
   * The task tombstone time to live (TTL). After a task is deleted or executed, the task's tombstone is retained for the length of time specified by `tombstone_ttl`. The tombstone is used by task de-duplication; another task with the same name can't be created until the tombstone has expired. For more information about task de-duplication, see the documentation for CreateTaskRequest. Queues created by Cloud Tasks have a default `tombstone_ttl` of 1 hour.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tombstoneTtl" })
  tombstoneTtl?: string;

  /**
   * Immutable. The type of a queue (push or pull). `Queue.type` is an immutable property of the queue that is set at the queue creation time. When left unspecified, the default value of `PUSH` is selected.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: QueueTypeEnum;
}

/**
 * A queue is a container of related tasks. Queues are configured to manage how those tasks are dispatched. Configurable properties include rate limits, retry options, queue types, and others.
 */
export class QueueInput extends SpeakeasyBase {
  /**
   * App Engine HTTP queue. The task will be delivered to the App Engine application hostname specified by its AppEngineHttpQueue and AppEngineHttpRequest. The documentation for AppEngineHttpRequest explains how the task's host URL is constructed. Using AppEngineHttpQueue requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appEngineHttpQueue" })
  @Type(() => AppEngineHttpQueue)
  appEngineHttpQueue?: AppEngineHttpQueue;

  /**
   * HTTP target. When specified as a Queue, all the tasks with [HttpRequest] will be overridden according to the target.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "httpTarget" })
  @Type(() => HttpTarget)
  httpTarget?: HttpTarget;

  /**
   * Caller-specified and required in CreateQueue, after which it becomes output only. The queue name. The queue name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the queue's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Output only. The last time this queue was purged. All tasks that were created before this time were purged. A queue can be purged using PurgeQueue, the [App Engine Task Queue SDK, or the Cloud Console](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/deleting-tasks-and-queues#purging_all_tasks_from_a_queue). Purge time will be truncated to the nearest microsecond. Purge time will be unset if the queue has never been purged.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "purgeTime" })
  purgeTime?: string;

  /**
   * Rate limits. This message determines the maximum rate that tasks can be dispatched by a queue, regardless of whether the dispatch is a first task attempt or a retry. Note: The debugging command, RunTask, will run a task even if the queue has reached its RateLimits.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rateLimits" })
  @Type(() => RateLimits)
  rateLimits?: RateLimits;

  /**
   * Retry config. These settings determine when a failed task attempt is retried.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retryConfig" })
  @Type(() => RetryConfig)
  retryConfig?: RetryConfig;

  /**
   * Configuration options for writing logs to [Stackdriver Logging](https://cloud.google.com/logging/docs/).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stackdriverLoggingConfig" })
  @Type(() => StackdriverLoggingConfig)
  stackdriverLoggingConfig?: StackdriverLoggingConfig;

  /**
   * Output only. The state of the queue. `state` can only be changed by called PauseQueue, ResumeQueue, or uploading [queue.yaml/xml](https://cloud.google.com/appengine/docs/python/config/queueref). UpdateQueue cannot be used to change `state`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: QueueStateEnum;

  /**
   * The maximum amount of time that a task will be retained in this queue. Queues created by Cloud Tasks have a default `task_ttl` of 31 days. After a task has lived for `task_ttl`, the task will be deleted regardless of whether it was dispatched or not. The `task_ttl` for queues created via queue.yaml/xml is equal to the maximum duration because there is a [storage quota](https://cloud.google.com/appengine/quotas#Task_Queue) for these queues. To view the maximum valid duration, see the documentation for Duration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taskTtl" })
  taskTtl?: string;

  /**
   * The task tombstone time to live (TTL). After a task is deleted or executed, the task's tombstone is retained for the length of time specified by `tombstone_ttl`. The tombstone is used by task de-duplication; another task with the same name can't be created until the tombstone has expired. For more information about task de-duplication, see the documentation for CreateTaskRequest. Queues created by Cloud Tasks have a default `tombstone_ttl` of 1 hour.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tombstoneTtl" })
  tombstoneTtl?: string;

  /**
   * Immutable. The type of a queue (push or pull). `Queue.type` is an immutable property of the queue that is set at the queue creation time. When left unspecified, the default value of `PUSH` is selected.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: QueueTypeEnum;
}
