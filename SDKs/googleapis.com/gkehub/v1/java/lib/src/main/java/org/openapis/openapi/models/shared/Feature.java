/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Feature - Feature represents the settings and status of any Hub Feature.
 */
public class Feature {
    /**
     * Output only. When the Feature resource was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Feature withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. When the Feature resource was deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteTime")
    public String deleteTime;
    public Feature withDeleteTime(String deleteTime) {
        this.deleteTime = deleteTime;
        return this;
    }
    
    /**
     * CommonFleetDefaultMemberConfigSpec contains default configuration information for memberships of a fleet
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fleetDefaultMemberConfig")
    public java.util.Map<String, Object> fleetDefaultMemberConfig;
    public Feature withFleetDefaultMemberConfig(java.util.Map<String, Object> fleetDefaultMemberConfig) {
        this.fleetDefaultMemberConfig = fleetDefaultMemberConfig;
        return this;
    }
    
    /**
     * GCP labels for this Feature.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Feature withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Membership is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("membershipSpecs")
    public java.util.Map<String, MembershipFeatureSpec> membershipSpecs;
    public Feature withMembershipSpecs(java.util.Map<String, MembershipFeatureSpec> membershipSpecs) {
        this.membershipSpecs = membershipSpecs;
        return this;
    }
    
    /**
     * Output only. Membership-specific Feature status. If this Feature does report any per-Membership status, this field may be unused. The keys indicate which Membership the state is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("membershipStates")
    public java.util.Map<String, MembershipFeatureState> membershipStates;
    public Feature withMembershipStates(java.util.Map<String, MembershipFeatureState> membershipStates) {
        this.membershipStates = membershipStates;
        return this;
    }
    
    /**
     * Output only. The full, unique name of this Feature resource in the format `projects/* /locations/* /features/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Feature withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the Feature in the Hub and across Memberships.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceState")
    public FeatureResourceState resourceState;
    public Feature withResourceState(FeatureResourceState resourceState) {
        this.resourceState = resourceState;
        return this;
    }
    
    /**
     * Optional. Scope-specific configuration for this Feature. If this Feature does not support any per-Scope configuration, this field may be unused. The keys indicate which Scope the configuration is for, in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Scope is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopeSpecs")
    public java.util.Map<String, java.util.Map<String, Object>> scopeSpecs;
    public Feature withScopeSpecs(java.util.Map<String, java.util.Map<String, Object>> scopeSpecs) {
        this.scopeSpecs = scopeSpecs;
        return this;
    }
    
    /**
     * Output only. Scope-specific Feature status. If this Feature does report any per-Scope status, this field may be unused. The keys indicate which Scope the state is for, in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopeStates")
    public java.util.Map<String, ScopeFeatureState> scopeStates;
    public Feature withScopeStates(java.util.Map<String, ScopeFeatureState> scopeStates) {
        this.scopeStates = scopeStates;
        return this;
    }
    
    /**
     * CommonFeatureSpec contains Hub-wide configuration information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spec")
    public CommonFeatureSpec spec;
    public Feature withSpec(CommonFeatureSpec spec) {
        this.spec = spec;
        return this;
    }
    
    /**
     * CommonFeatureState contains Hub-wide Feature status information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public CommonFeatureState state;
    public Feature withState(CommonFeatureState state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. When the Feature resource was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Feature withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
