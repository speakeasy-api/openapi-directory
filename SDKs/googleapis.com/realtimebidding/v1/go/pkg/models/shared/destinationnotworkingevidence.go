// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DestinationNotWorkingEvidenceDNSErrorEnum - DNS lookup errors.
type DestinationNotWorkingEvidenceDNSErrorEnum string

const (
	DestinationNotWorkingEvidenceDNSErrorEnumDNSErrorUnspecified   DestinationNotWorkingEvidenceDNSErrorEnum = "DNS_ERROR_UNSPECIFIED"
	DestinationNotWorkingEvidenceDNSErrorEnumErrorDNS              DestinationNotWorkingEvidenceDNSErrorEnum = "ERROR_DNS"
	DestinationNotWorkingEvidenceDNSErrorEnumGoogleCrawlerDNSIssue DestinationNotWorkingEvidenceDNSErrorEnum = "GOOGLE_CRAWLER_DNS_ISSUE"
)

func (e *DestinationNotWorkingEvidenceDNSErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DNS_ERROR_UNSPECIFIED":
		fallthrough
	case "ERROR_DNS":
		fallthrough
	case "GOOGLE_CRAWLER_DNS_ISSUE":
		*e = DestinationNotWorkingEvidenceDNSErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationNotWorkingEvidenceDNSErrorEnum: %s", s)
	}
}

// DestinationNotWorkingEvidenceInvalidPageEnum - Page was crawled successfully, but was detected as either a page with no content or an error page.
type DestinationNotWorkingEvidenceInvalidPageEnum string

const (
	DestinationNotWorkingEvidenceInvalidPageEnumInvalidPageUnspecified DestinationNotWorkingEvidenceInvalidPageEnum = "INVALID_PAGE_UNSPECIFIED"
	DestinationNotWorkingEvidenceInvalidPageEnumEmptyOrErrorPage       DestinationNotWorkingEvidenceInvalidPageEnum = "EMPTY_OR_ERROR_PAGE"
)

func (e *DestinationNotWorkingEvidenceInvalidPageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INVALID_PAGE_UNSPECIFIED":
		fallthrough
	case "EMPTY_OR_ERROR_PAGE":
		*e = DestinationNotWorkingEvidenceInvalidPageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationNotWorkingEvidenceInvalidPageEnum: %s", s)
	}
}

// DestinationNotWorkingEvidencePlatformEnum - Platform of the non-working URL.
type DestinationNotWorkingEvidencePlatformEnum string

const (
	DestinationNotWorkingEvidencePlatformEnumPlatformUnspecified DestinationNotWorkingEvidencePlatformEnum = "PLATFORM_UNSPECIFIED"
	DestinationNotWorkingEvidencePlatformEnumPersonalComputer    DestinationNotWorkingEvidencePlatformEnum = "PERSONAL_COMPUTER"
	DestinationNotWorkingEvidencePlatformEnumAndroid             DestinationNotWorkingEvidencePlatformEnum = "ANDROID"
	DestinationNotWorkingEvidencePlatformEnumIos                 DestinationNotWorkingEvidencePlatformEnum = "IOS"
)

func (e *DestinationNotWorkingEvidencePlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PLATFORM_UNSPECIFIED":
		fallthrough
	case "PERSONAL_COMPUTER":
		fallthrough
	case "ANDROID":
		fallthrough
	case "IOS":
		*e = DestinationNotWorkingEvidencePlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationNotWorkingEvidencePlatformEnum: %s", s)
	}
}

// DestinationNotWorkingEvidenceRedirectionErrorEnum - HTTP redirect chain error.
type DestinationNotWorkingEvidenceRedirectionErrorEnum string

const (
	DestinationNotWorkingEvidenceRedirectionErrorEnumRedirectionErrorUnspecified DestinationNotWorkingEvidenceRedirectionErrorEnum = "REDIRECTION_ERROR_UNSPECIFIED"
	DestinationNotWorkingEvidenceRedirectionErrorEnumTooManyRedirects            DestinationNotWorkingEvidenceRedirectionErrorEnum = "TOO_MANY_REDIRECTS"
	DestinationNotWorkingEvidenceRedirectionErrorEnumInvalidRedirect             DestinationNotWorkingEvidenceRedirectionErrorEnum = "INVALID_REDIRECT"
	DestinationNotWorkingEvidenceRedirectionErrorEnumEmptyRedirect               DestinationNotWorkingEvidenceRedirectionErrorEnum = "EMPTY_REDIRECT"
	DestinationNotWorkingEvidenceRedirectionErrorEnumRedirectErrorUnknown        DestinationNotWorkingEvidenceRedirectionErrorEnum = "REDIRECT_ERROR_UNKNOWN"
)

func (e *DestinationNotWorkingEvidenceRedirectionErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "REDIRECTION_ERROR_UNSPECIFIED":
		fallthrough
	case "TOO_MANY_REDIRECTS":
		fallthrough
	case "INVALID_REDIRECT":
		fallthrough
	case "EMPTY_REDIRECT":
		fallthrough
	case "REDIRECT_ERROR_UNKNOWN":
		*e = DestinationNotWorkingEvidenceRedirectionErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationNotWorkingEvidenceRedirectionErrorEnum: %s", s)
	}
}

// DestinationNotWorkingEvidenceURLRejectedEnum - Rejected because of malformed URLs or invalid requests.
type DestinationNotWorkingEvidenceURLRejectedEnum string

const (
	DestinationNotWorkingEvidenceURLRejectedEnumURLRejectedUnspecified DestinationNotWorkingEvidenceURLRejectedEnum = "URL_REJECTED_UNSPECIFIED"
	DestinationNotWorkingEvidenceURLRejectedEnumBadRequest             DestinationNotWorkingEvidenceURLRejectedEnum = "BAD_REQUEST"
	DestinationNotWorkingEvidenceURLRejectedEnumMalformedURL           DestinationNotWorkingEvidenceURLRejectedEnum = "MALFORMED_URL"
	DestinationNotWorkingEvidenceURLRejectedEnumURLRejectedUnknown     DestinationNotWorkingEvidenceURLRejectedEnum = "URL_REJECTED_UNKNOWN"
)

func (e *DestinationNotWorkingEvidenceURLRejectedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "URL_REJECTED_UNSPECIFIED":
		fallthrough
	case "BAD_REQUEST":
		fallthrough
	case "MALFORMED_URL":
		fallthrough
	case "URL_REJECTED_UNKNOWN":
		*e = DestinationNotWorkingEvidenceURLRejectedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationNotWorkingEvidenceURLRejectedEnum: %s", s)
	}
}

// DestinationNotWorkingEvidence - Evidence of the creative's destination URL not functioning properly or having been incorrectly set up.
type DestinationNotWorkingEvidence struct {
	// DNS lookup errors.
	DNSError *DestinationNotWorkingEvidenceDNSErrorEnum `json:"dnsError,omitempty"`
	// The full non-working URL.
	ExpandedURL *string `json:"expandedUrl,omitempty"`
	// HTTP error code (for example, 404 or 5xx)
	HTTPError *int `json:"httpError,omitempty"`
	// Page was crawled successfully, but was detected as either a page with no content or an error page.
	InvalidPage *DestinationNotWorkingEvidenceInvalidPageEnum `json:"invalidPage,omitempty"`
	// Approximate time when the ad destination was last checked.
	LastCheckTime *string `json:"lastCheckTime,omitempty"`
	// Platform of the non-working URL.
	Platform *DestinationNotWorkingEvidencePlatformEnum `json:"platform,omitempty"`
	// HTTP redirect chain error.
	RedirectionError *DestinationNotWorkingEvidenceRedirectionErrorEnum `json:"redirectionError,omitempty"`
	// Rejected because of malformed URLs or invalid requests.
	URLRejected *DestinationNotWorkingEvidenceURLRejectedEnum `json:"urlRejected,omitempty"`
}
