"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import auxiliaryversionconfig as shared_auxiliaryversionconfig
from ..shared import kerberosconfig as shared_kerberosconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class HiveMetastoreConfigEndpointProtocolEnum(str, Enum):
    r"""The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT."""
    ENDPOINT_PROTOCOL_UNSPECIFIED = 'ENDPOINT_PROTOCOL_UNSPECIFIED'
    THRIFT = 'THRIFT'
    GRPC = 'GRPC'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HiveMetastoreConfig:
    r"""Specifies configuration information specific to running Hive metastore software as the metastore service."""
    
    auxiliary_versions: Optional[dict[str, shared_auxiliaryversionconfig.AuxiliaryVersionConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auxiliaryVersions'), 'exclude': lambda f: f is None }})
    r"""A mapping of Hive metastore version to the auxiliary version configuration. When specified, a secondary Hive metastore service is created along with the primary service. All auxiliary versions must be less than the service's primary version. The key is the auxiliary service name and it must match the regular expression a-z?. This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen."""  
    config_overrides: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configOverrides'), 'exclude': lambda f: f is None }})
    r"""A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version's AuxiliaryVersionConfig."""  
    endpoint_protocol: Optional[HiveMetastoreConfigEndpointProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpointProtocol'), 'exclude': lambda f: f is None }})
    r"""The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT."""  
    kerberos_config: Optional[shared_kerberosconfig.KerberosConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kerberosConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration information for a Kerberos principal."""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Immutable. The Hive metastore schema version."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HiveMetastoreConfigInput:
    r"""Specifies configuration information specific to running Hive metastore software as the metastore service."""
    
    auxiliary_versions: Optional[dict[str, shared_auxiliaryversionconfig.AuxiliaryVersionConfigInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auxiliaryVersions'), 'exclude': lambda f: f is None }})
    r"""A mapping of Hive metastore version to the auxiliary version configuration. When specified, a secondary Hive metastore service is created along with the primary service. All auxiliary versions must be less than the service's primary version. The key is the auxiliary service name and it must match the regular expression a-z?. This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen."""  
    config_overrides: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configOverrides'), 'exclude': lambda f: f is None }})
    r"""A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version's AuxiliaryVersionConfig."""  
    endpoint_protocol: Optional[HiveMetastoreConfigEndpointProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpointProtocol'), 'exclude': lambda f: f is None }})
    r"""The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT."""  
    kerberos_config: Optional[shared_kerberosconfig.KerberosConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kerberosConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration information for a Kerberos principal."""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Immutable. The Hive metastore schema version."""  
    