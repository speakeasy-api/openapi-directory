"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import repository_invitation as shared_repository_invitation
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ReposAddCollaboratorRequestBodyPermissionEnum(str, Enum):
    r"""The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:
    \* `pull` - can pull, but not push to or administer this repository.  
    \* `push` - can pull and push, but not administer this repository.  
    \* `admin` - can pull, push and administer this repository.  
    \* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.  
    \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
    """
    PULL = 'pull'
    PUSH = 'push'
    ADMIN = 'admin'
    MAINTAIN = 'maintain'
    TRIAGE = 'triage'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposAddCollaboratorRequestBody:
    
    permission: Optional[ReposAddCollaboratorRequestBodyPermissionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission'), 'exclude': lambda f: f is None }})
    r"""The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:
    \* `pull` - can pull, but not push to or administer this repository.  
    \* `push` - can pull and push, but not administer this repository.  
    \* `admin` - can pull, push and administer this repository.  
    \* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.  
    \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
    """  
    permissions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ReposAddCollaboratorRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})  
    username: str = dataclasses.field(metadata={'path_param': { 'field_name': 'username', 'style': 'simple', 'explode': False }})  
    request_body: Optional[ReposAddCollaboratorRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class ReposAddCollaboratorResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Forbidden"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    repository_invitation: Optional[shared_repository_invitation.RepositoryInvitation] = dataclasses.field(default=None)
    r"""Response when a new invitation is created"""  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed"""  
    