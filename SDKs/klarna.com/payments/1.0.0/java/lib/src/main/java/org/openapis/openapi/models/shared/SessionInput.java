/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SessionInput - session_request
 */
public class SessionInput {
    /**
     * The acquiring channel in which the session takes place. Ecommerce is default unless specified. Any other values should be defined in the agreement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acquiring_channel")
    public SessionAcquiringChannelEnum acquiringChannel;

    public SessionInput withAcquiringChannel(SessionAcquiringChannelEnum acquiringChannel) {
        this.acquiringChannel = acquiringChannel;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachment")
    public Attachment attachment;

    public SessionInput withAttachment(Attachment attachment) {
        this.attachment = attachment;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address")
    public Address billingAddress;

    public SessionInput withBillingAddress(Address billingAddress) {
        this.billingAddress = billingAddress;
        return this;
    }
    
    /**
     * Promo codes - The array could be used to define which of the configured payment options within a payment category (pay_later, pay_over_time, etc.) should be shown for this purchase. Discuss with the delivery manager to know about the promo codes that will be configured for your account. The feature could also be used to provide promotional offers to specific customers (eg: 0% financing). Please be informed that the usage of this feature can have commercial implications. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_payment_method_ids")
    public String[] customPaymentMethodIds;

    public SessionInput withCustomPaymentMethodIds(String[] customPaymentMethodIds) {
        this.customPaymentMethodIds = customPaymentMethodIds;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    public Customer customer;

    public SessionInput withCustomer(Customer customer) {
        this.customer = customer;
        return this;
    }
    
    /**
     * Design package to use in the session. This can only by used if a custom design has been implemented for Klarna Payments and agreed upon in the agreement. It might have a financial impact. Delivery manager will provide the value for the parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("design")
    public String design;

    public SessionInput withDesign(String design) {
        this.design = design;
        return this;
    }
    
    /**
     * Intent for the session. The field is designed to let partners inform Klarna of the purpose of the customer\u2019s session.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("intent")
    public SessionIntentEnum intent;

    public SessionInput withIntent(SessionIntentEnum intent) {
        this.intent = intent;
        return this;
    }
    
    /**
     * Used to define the language and region of the customer. The locale follows the format of (RFC 1766)[https://datatracker.ietf.org/doc/rfc1766/], meaning its value consists of language-country.
     * The following values are applicable:
     * 
     * AT: "de-AT", "de-DE", "en-DE"
     * BE: "be-BE", "nl-BE", "fr-BE", "en-BE"
     * CH: "it-CH", "de-CH", "fr-CH", "en-CH"
     * DE: "de-DE", "de-AT", "en-DE"
     * DK: "da-DK", "en-DK"
     * ES: "es-ES", "ca-ES", "en-ES"
     * FI: "fi-FI", "sv-FI", "en-FI"
     * GB: "en-GB"
     * IT: "it-IT", "en-IT"
     * NL: "nl-NL", "en-NL"
     * NO: "nb-NO", "en-NO"
     * PL: "pl-PL", "en-PL"
     * SE: "sv-SE", "en-SE"
     * US: "en-US".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locale")
    public String locale;

    public SessionInput withLocale(String locale) {
        this.locale = locale;
        return this;
    }
    
    /**
     * Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_data")
    public String merchantData;

    public SessionInput withMerchantData(String merchantData) {
        this.merchantData = merchantData;
        return this;
    }
    
    /**
     * Used for storing merchant's internal order number or other reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_reference1")
    public String merchantReference1;

    public SessionInput withMerchantReference1(String merchantReference1) {
        this.merchantReference1 = merchantReference1;
        return this;
    }
    
    /**
     * Used for storing merchant's internal order number or other reference. The value is available in the settlement files. (max 255 characters).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_reference2")
    public String merchantReference2;

    public SessionInput withMerchantReference2(String merchantReference2) {
        this.merchantReference2 = merchantReference2;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchant_urls")
    public MerchantUrls merchantUrls;

    public SessionInput withMerchantUrls(MerchantUrls merchantUrls) {
        this.merchantUrls = merchantUrls;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    public Options options;

    public SessionInput withOptions(Options options) {
        this.options = options;
        return this;
    }
    
    /**
     * Total amount of the order including tax and any available discounts. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_amount")
    public Long orderAmount;

    public SessionInput withOrderAmount(Long orderAmount) {
        this.orderAmount = orderAmount;
        return this;
    }
    
    /**
     * The array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_lines")
    public OrderLine[] orderLines;

    public SessionInput withOrderLines(OrderLine[] orderLines) {
        this.orderLines = orderLines;
        return this;
    }
    
    /**
     * Total tax amount of the order. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_tax_amount")
    public Long orderTaxAmount;

    public SessionInput withOrderTaxAmount(Long orderTaxAmount) {
        this.orderTaxAmount = orderTaxAmount;
        return this;
    }
    
    /**
     * The purchase country of the customer. The billing country always overrides purchase country if the values are different. Formatted according to ISO 3166 alpha-2 standard, e.g. GB, SE, DE, US, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purchase_country")
    public String purchaseCountry;

    public SessionInput withPurchaseCountry(String purchaseCountry) {
        this.purchaseCountry = purchaseCountry;
        return this;
    }
    
    /**
     * The purchase currency of the order. Formatted according to ISO 4217 standard, e.g. USD, EUR, SEK, GBP, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purchase_currency")
    public String purchaseCurrency;

    public SessionInput withPurchaseCurrency(String purchaseCurrency) {
        this.purchaseCurrency = purchaseCurrency;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_address")
    public Address shippingAddress;

    public SessionInput withShippingAddress(Address shippingAddress) {
        this.shippingAddress = shippingAddress;
        return this;
    }
    
    public SessionInput(){}
}
