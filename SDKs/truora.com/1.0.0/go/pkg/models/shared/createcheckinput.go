// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// CreateCheckInputCountryEnum - Document country
type CreateCheckInputCountryEnum string

const (
	CreateCheckInputCountryEnumAll CreateCheckInputCountryEnum = "ALL"
	CreateCheckInputCountryEnumBr  CreateCheckInputCountryEnum = "BR"
	CreateCheckInputCountryEnumCl  CreateCheckInputCountryEnum = "CL"
	CreateCheckInputCountryEnumCo  CreateCheckInputCountryEnum = "CO"
	CreateCheckInputCountryEnumCr  CreateCheckInputCountryEnum = "CR"
	CreateCheckInputCountryEnumEc  CreateCheckInputCountryEnum = "EC"
	CreateCheckInputCountryEnumMx  CreateCheckInputCountryEnum = "MX"
	CreateCheckInputCountryEnumPe  CreateCheckInputCountryEnum = "PE"
	CreateCheckInputCountryEnumAr  CreateCheckInputCountryEnum = "AR"
)

func (e *CreateCheckInputCountryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ALL":
		fallthrough
	case "BR":
		fallthrough
	case "CL":
		fallthrough
	case "CO":
		fallthrough
	case "CR":
		fallthrough
	case "EC":
		fallthrough
	case "MX":
		fallthrough
	case "PE":
		fallthrough
	case "AR":
		*e = CreateCheckInputCountryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheckInputCountryEnum: %s", s)
	}
}

// CreateCheckInputRegionEnum - Region where the background is to be checked in addition to the region where the person is from. By default, background checks in Brazil are performed in the region where the person is from. Required for Brazil only. Allowed values are: DF: Distrito Federal, AC: Acre, AL: Alagoas, AP: Amapá, AM: Amazonas, BA: Bahía, CE: Ceará, ES: Espírito Santo, GO: Goiás, MA: Maranhão, MT: Mato Grosso, MS: Mato Grosso do Sul, MG: Minas Gerais, PA: Pará, PB: Paraíba, PR: Paraná, PE: Pernambuco, PI: Piauí, RJ: Río de Janeiro, RN: Río Grande do Norte, RS: Río Grande do Sul, RO: Rondônia, RR: Roraima, SC: Santa Catarina, SP: São Paulo, SE: Sergipe, TO : Tocantins.
type CreateCheckInputRegionEnum string

const (
	CreateCheckInputRegionEnumDf CreateCheckInputRegionEnum = "DF"
	CreateCheckInputRegionEnumAc CreateCheckInputRegionEnum = "AC"
	CreateCheckInputRegionEnumAl CreateCheckInputRegionEnum = "AL"
	CreateCheckInputRegionEnumAp CreateCheckInputRegionEnum = "AP"
	CreateCheckInputRegionEnumAm CreateCheckInputRegionEnum = "AM"
	CreateCheckInputRegionEnumBa CreateCheckInputRegionEnum = "BA"
	CreateCheckInputRegionEnumCe CreateCheckInputRegionEnum = "CE"
	CreateCheckInputRegionEnumEs CreateCheckInputRegionEnum = "ES"
	CreateCheckInputRegionEnumGo CreateCheckInputRegionEnum = "GO"
	CreateCheckInputRegionEnumMa CreateCheckInputRegionEnum = "MA"
	CreateCheckInputRegionEnumMt CreateCheckInputRegionEnum = "MT"
	CreateCheckInputRegionEnumMs CreateCheckInputRegionEnum = "MS"
	CreateCheckInputRegionEnumMg CreateCheckInputRegionEnum = "MG"
	CreateCheckInputRegionEnumPa CreateCheckInputRegionEnum = "PA"
	CreateCheckInputRegionEnumPb CreateCheckInputRegionEnum = "PB"
	CreateCheckInputRegionEnumPr CreateCheckInputRegionEnum = "PR"
	CreateCheckInputRegionEnumPe CreateCheckInputRegionEnum = "PE"
	CreateCheckInputRegionEnumPi CreateCheckInputRegionEnum = "PI"
	CreateCheckInputRegionEnumRj CreateCheckInputRegionEnum = "RJ"
	CreateCheckInputRegionEnumRn CreateCheckInputRegionEnum = "RN"
	CreateCheckInputRegionEnumRs CreateCheckInputRegionEnum = "RS"
	CreateCheckInputRegionEnumRo CreateCheckInputRegionEnum = "RO"
	CreateCheckInputRegionEnumRr CreateCheckInputRegionEnum = "RR"
	CreateCheckInputRegionEnumSc CreateCheckInputRegionEnum = "SC"
	CreateCheckInputRegionEnumSp CreateCheckInputRegionEnum = "SP"
	CreateCheckInputRegionEnumSe CreateCheckInputRegionEnum = "SE"
	CreateCheckInputRegionEnumTo CreateCheckInputRegionEnum = "TO"
)

func (e *CreateCheckInputRegionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DF":
		fallthrough
	case "AC":
		fallthrough
	case "AL":
		fallthrough
	case "AP":
		fallthrough
	case "AM":
		fallthrough
	case "BA":
		fallthrough
	case "CE":
		fallthrough
	case "ES":
		fallthrough
	case "GO":
		fallthrough
	case "MA":
		fallthrough
	case "MT":
		fallthrough
	case "MS":
		fallthrough
	case "MG":
		fallthrough
	case "PA":
		fallthrough
	case "PB":
		fallthrough
	case "PR":
		fallthrough
	case "PE":
		fallthrough
	case "PI":
		fallthrough
	case "RJ":
		fallthrough
	case "RN":
		fallthrough
	case "RS":
		fallthrough
	case "RO":
		fallthrough
	case "RR":
		fallthrough
	case "SC":
		fallthrough
	case "SP":
		fallthrough
	case "SE":
		fallthrough
	case "TO":
		*e = CreateCheckInputRegionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheckInputRegionEnum: %s", s)
	}
}

// CreateCheckInputTypeEnum - Background check type
type CreateCheckInputTypeEnum string

const (
	CreateCheckInputTypeEnumPerson         CreateCheckInputTypeEnum = "person"
	CreateCheckInputTypeEnumVehicle        CreateCheckInputTypeEnum = "vehicle"
	CreateCheckInputTypeEnumCompany        CreateCheckInputTypeEnum = "company"
	CreateCheckInputTypeEnumCustomTypeName CreateCheckInputTypeEnum = "custom_type_name"
)

func (e *CreateCheckInputTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "person":
		fallthrough
	case "vehicle":
		fallthrough
	case "company":
		fallthrough
	case "custom_type_name":
		*e = CreateCheckInputTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheckInputTypeEnum: %s", s)
	}
}

// CreateCheckInput - Represents paramaters required to create a background check
type CreateCheckInput struct {
	// Person birth certificate
	BirthCertificate *string `form:"name=birth_certificate"`
	// Company name "Don't forget this required field to complete background checks in Brazil"
	CompanyName *string `form:"name=company_name"`
	// Document country
	Country CreateCheckInputCountryEnum `form:"name=country"`
	// Person birthdate. This date is used to get some additional information about a person and to filter homonyms in some cases. YYYY-MM-DD format, Required for complete background checks in Brazil
	DateOfBirth *types.Date `form:"name=date_of_birth"`
	// Diplomatic ID
	DiplomaticID *string `form:"name=diplomatic_id"`
	// Driver's license number
	DriverLicense *string `form:"name=driver_license"`
	// Colombian escrow
	Escrow *string `form:"name=escrow"`
	// Person or entity first name. If the document type and number are not provided, the report might include homonyms. Required when searching by first name, Required in order to get complete background checks in Brazil
	FirstName *string `form:"name=first_name"`
	// Forces a new background check creation when true. Reuses recently created background checks otherwise
	ForceCreation *bool `form:"name=force_creation"`
	// Person foreign ID
	ForeignID *string `form:"name=foreign_id"`
	// Person document issue date in "YYYY-mm-dd" format (e.g. 2008-12-31) . This date is used to get some additional information about a person in some cases
	IssueDate *types.Date `form:"name=issue_date"`
	// Person or entity last name. If the document type and number are not provided, the report might include homonyms. Required when searching by last name. Required in order to get complete background checks in Brazil
	LastName *string `form:"name=last_name"`
	// Vehicle license plate
	LicensePlate *string `form:"name=license_plate"`
	// National ID
	NationalID *string `form:"name=national_id"`
	// Country of birth
	NativeCountry *string `form:"name=native_country"`
	// National ID of the vehicle owner
	OwnerDocumentID *string `form:"name=owner_document_id"`
	// National ID, foreign ID, or tax ID
	OwnerDocumentType *string `form:"name=owner_document_type"`
	// Person passport
	Passport *string `form:"name=passport"`
	// Payment day of a vehicle circulation permit (Chile only)
	PaymentDate *types.Date `form:"name=payment_date"`
	// ID for Venezuelans working in Colombia
	Pep *string `form:"name=pep"`
	// Person phone number. Required by law to notify the person their background is being checked
	PhoneNumber *string `form:"name=phone_number"`
	// Professional ID card
	ProfessionalCard *string `form:"name=professional_card"`
	// ID for Venezuelans working in Peru
	Ptp *string `form:"name=ptp"`
	// Region where the background is to be checked in addition to the region where the person is from. By default, background checks in Brazil are performed in the region where the person is from. Required for Brazil only. Allowed values are: DF: Distrito Federal, AC: Acre, AL: Alagoas, AP: Amapá, AM: Amazonas, BA: Bahía, CE: Ceará, ES: Espírito Santo, GO: Goiás, MA: Maranhão, MT: Mato Grosso, MS: Mato Grosso do Sul, MG: Minas Gerais, PA: Pará, PB: Paraíba, PR: Paraná, PE: Pernambuco, PI: Piauí, RJ: Río de Janeiro, RN: Río Grande do Norte, RS: Río Grande do Sul, RO: Rondônia, RR: Roraima, SC: Santa Catarina, SP: São Paulo, SE: Sergipe, TO : Tocantins.
	Region *CreateCheckInputRegionEnum `form:"name=region"`
	// Report ID the background check will be inserted into
	ReportID *string `form:"name=report_id"`
	//  Used for the RG (Registro Geral) identification in Brazil. This identification has different formats according to the state that issues the document. It can have numbers and letters but other characters (- * , . ) are omitted, Required in order to get complete background checks in Brazil
	StateID *string `form:"name=state_id"`
	// Company ID used for tax payments
	TaxID *string `form:"name=tax_id"`
	// Background check type
	Type CreateCheckInputTypeEnum `form:"name=type"`
	// Indicates whether the person subject to the validation authorized the validation. Must be true in order to proceed [Required for API key V1 or later]
	UserAuthorized *bool `form:"name=user_authorized"`
	// Vehicle license plate
	VehicleID *string `form:"name=vehicle_id"`
	// Verification code registered for criminal records in Peru only
	VerificationCode *string `form:"name=verification_code"`
	// Indicates whether the check score is to be periodically revised and its frequency. It can be daily, weekly, monthly, yearly or have a custom frequency written as a number accompanied by d: day, w: week, m: month, y: year for instance: 3d: every three days, 2w: every two weeks. Ignore this field if the check is only to be performed once
	Watch *string `form:"name=watch"`
}
