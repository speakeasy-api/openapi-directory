// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GooglePrivacyDlpV2ExpressionsLogicalOperatorEnum - The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
type GooglePrivacyDlpV2ExpressionsLogicalOperatorEnum string

const (
	GooglePrivacyDlpV2ExpressionsLogicalOperatorEnumLogicalOperatorUnspecified GooglePrivacyDlpV2ExpressionsLogicalOperatorEnum = "LOGICAL_OPERATOR_UNSPECIFIED"
	GooglePrivacyDlpV2ExpressionsLogicalOperatorEnumAnd                        GooglePrivacyDlpV2ExpressionsLogicalOperatorEnum = "AND"
)

func (e GooglePrivacyDlpV2ExpressionsLogicalOperatorEnum) ToPointer() *GooglePrivacyDlpV2ExpressionsLogicalOperatorEnum {
	return &e
}

func (e *GooglePrivacyDlpV2ExpressionsLogicalOperatorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LOGICAL_OPERATOR_UNSPECIFIED":
		fallthrough
	case "AND":
		*e = GooglePrivacyDlpV2ExpressionsLogicalOperatorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GooglePrivacyDlpV2ExpressionsLogicalOperatorEnum: %v", v)
	}
}

// GooglePrivacyDlpV2Expressions - An expression, consisting of an operator and conditions.
type GooglePrivacyDlpV2Expressions struct {
	// A collection of conditions.
	Conditions *GooglePrivacyDlpV2Conditions `json:"conditions,omitempty"`
	// The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
	LogicalOperator *GooglePrivacyDlpV2ExpressionsLogicalOperatorEnum `json:"logicalOperator,omitempty"`
}
