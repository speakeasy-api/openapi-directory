"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POSTPaymentMethodDecryption = exports.POSTPaymentMethodDecryptionMitProfileTypeEnum = exports.POSTPaymentMethodDecryptionMitProfileActionEnum = exports.POSTPaymentMethodDecryptionMitConsentAgreementSrcEnum = exports.POSTPaymentMethodDecryptionCardHolderInfo = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Container for cardholder information. If provided, Zuora will only use this information for this card. If not provided, Zuora will use the account's existing bill-to contact information for this card.
 */
var POSTPaymentMethodDecryptionCardHolderInfo = /** @class */ (function (_super) {
    __extends(POSTPaymentMethodDecryptionCardHolderInfo, _super);
    function POSTPaymentMethodDecryptionCardHolderInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "addressLine1" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryptionCardHolderInfo.prototype, "addressLine1", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "addressLine2" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryptionCardHolderInfo.prototype, "addressLine2", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cardHolderName" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryptionCardHolderInfo.prototype, "cardHolderName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "city" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryptionCardHolderInfo.prototype, "city", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "country" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryptionCardHolderInfo.prototype, "country", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "email" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryptionCardHolderInfo.prototype, "email", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "phone" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryptionCardHolderInfo.prototype, "phone", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "state" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryptionCardHolderInfo.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "zipCode" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryptionCardHolderInfo.prototype, "zipCode", void 0);
    return POSTPaymentMethodDecryptionCardHolderInfo;
}(utils_1.SpeakeasyBase));
exports.POSTPaymentMethodDecryptionCardHolderInfo = POSTPaymentMethodDecryptionCardHolderInfo;
/**
 * Required if you set the `mitProfileAction` field.
 *
 * @remarks
 *
 */
var POSTPaymentMethodDecryptionMitConsentAgreementSrcEnum;
(function (POSTPaymentMethodDecryptionMitConsentAgreementSrcEnum) {
    POSTPaymentMethodDecryptionMitConsentAgreementSrcEnum["External"] = "External";
})(POSTPaymentMethodDecryptionMitConsentAgreementSrcEnum = exports.POSTPaymentMethodDecryptionMitConsentAgreementSrcEnum || (exports.POSTPaymentMethodDecryptionMitConsentAgreementSrcEnum = {}));
/**
 * If you specify this field, Zuora creates a stored credential profile within the payment method.
 *
 * @remarks
 *
 * **Note:** This feature is in the **Early Adopters** phase. We are actively soliciting feedback from a small set of early adopters before releasing as generally available.
 *
 * * `Activate` - Use this value if you are creating the stored credential profile after receiving the customer's consent. Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile. If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
 *
 * * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
 *
 *
 */
var POSTPaymentMethodDecryptionMitProfileActionEnum;
(function (POSTPaymentMethodDecryptionMitProfileActionEnum) {
    POSTPaymentMethodDecryptionMitProfileActionEnum["Activate"] = "Activate";
    POSTPaymentMethodDecryptionMitProfileActionEnum["Persist"] = "Persist";
})(POSTPaymentMethodDecryptionMitProfileActionEnum = exports.POSTPaymentMethodDecryptionMitProfileActionEnum || (exports.POSTPaymentMethodDecryptionMitProfileActionEnum = {}));
/**
 * Required if you set the `mitProfileAction` field.
 *
 * @remarks
 *
 */
var POSTPaymentMethodDecryptionMitProfileTypeEnum;
(function (POSTPaymentMethodDecryptionMitProfileTypeEnum) {
    POSTPaymentMethodDecryptionMitProfileTypeEnum["Recurring"] = "Recurring";
})(POSTPaymentMethodDecryptionMitProfileTypeEnum = exports.POSTPaymentMethodDecryptionMitProfileTypeEnum || (exports.POSTPaymentMethodDecryptionMitProfileTypeEnum = {}));
var POSTPaymentMethodDecryption = /** @class */ (function (_super) {
    __extends(POSTPaymentMethodDecryption, _super);
    function POSTPaymentMethodDecryption() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "accountID" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryption.prototype, "accountID", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cardHolderInfo" }),
        (0, class_transformer_1.Type)(function () { return POSTPaymentMethodDecryptionCardHolderInfo; }),
        __metadata("design:type", POSTPaymentMethodDecryptionCardHolderInfo)
    ], POSTPaymentMethodDecryption.prototype, "cardHolderInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "integrationType" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryption.prototype, "integrationType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "invoiceId" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryption.prototype, "invoiceId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "merchantID" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryption.prototype, "merchantID", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mitConsentAgreementSrc" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryption.prototype, "mitConsentAgreementSrc", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mitProfileAction" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryption.prototype, "mitProfileAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mitProfileType" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryption.prototype, "mitProfileType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "paymentGateway" }),
        __metadata("design:type", String)
    ], POSTPaymentMethodDecryption.prototype, "paymentGateway", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "paymentToken" }),
        __metadata("design:type", Object)
    ], POSTPaymentMethodDecryption.prototype, "paymentToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "processPayment" }),
        __metadata("design:type", Boolean)
    ], POSTPaymentMethodDecryption.prototype, "processPayment", void 0);
    return POSTPaymentMethodDecryption;
}(utils_1.SpeakeasyBase));
exports.POSTPaymentMethodDecryption = POSTPaymentMethodDecryption;
