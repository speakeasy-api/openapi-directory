"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Posts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def blogger_posts_delete(self, request: operations.BloggerPostsDeleteRequest, security: operations.BloggerPostsDeleteSecurity) -> operations.BloggerPostsDeleteResponse:
        r"""Deletes a post by blog id and post id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPostsDeleteRequest, base_url, '/v3/blogs/{blogId}/posts/{postId}', request)
        
        query_params = utils.get_query_params(operations.BloggerPostsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPostsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def blogger_posts_get(self, request: operations.BloggerPostsGetRequest, security: operations.BloggerPostsGetSecurity) -> operations.BloggerPostsGetResponse:
        r"""Gets a post by blog id and post id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPostsGetRequest, base_url, '/v3/blogs/{blogId}/posts/{postId}', request)
        
        query_params = utils.get_query_params(operations.BloggerPostsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPostsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Post])
                res.post = out

        return res

    def blogger_posts_get_by_path(self, request: operations.BloggerPostsGetByPathRequest, security: operations.BloggerPostsGetByPathSecurity) -> operations.BloggerPostsGetByPathResponse:
        r"""Gets a post by path."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPostsGetByPathRequest, base_url, '/v3/blogs/{blogId}/posts/bypath', request)
        
        query_params = utils.get_query_params(operations.BloggerPostsGetByPathRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPostsGetByPathResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Post])
                res.post = out

        return res

    def blogger_posts_insert(self, request: operations.BloggerPostsInsertRequest, security: operations.BloggerPostsInsertSecurity) -> operations.BloggerPostsInsertResponse:
        r"""Inserts a post."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPostsInsertRequest, base_url, '/v3/blogs/{blogId}/posts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "post", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BloggerPostsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPostsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Post])
                res.post = out

        return res

    def blogger_posts_list(self, request: operations.BloggerPostsListRequest, security: operations.BloggerPostsListSecurity) -> operations.BloggerPostsListResponse:
        r"""Lists posts."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPostsListRequest, base_url, '/v3/blogs/{blogId}/posts', request)
        
        query_params = utils.get_query_params(operations.BloggerPostsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPostsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PostList])
                res.post_list = out

        return res

    def blogger_posts_patch(self, request: operations.BloggerPostsPatchRequest, security: operations.BloggerPostsPatchSecurity) -> operations.BloggerPostsPatchResponse:
        r"""Patches a post."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPostsPatchRequest, base_url, '/v3/blogs/{blogId}/posts/{postId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "post", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BloggerPostsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPostsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Post])
                res.post = out

        return res

    def blogger_posts_publish(self, request: operations.BloggerPostsPublishRequest, security: operations.BloggerPostsPublishSecurity) -> operations.BloggerPostsPublishResponse:
        r"""Publishes a post."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPostsPublishRequest, base_url, '/v3/blogs/{blogId}/posts/{postId}/publish', request)
        
        query_params = utils.get_query_params(operations.BloggerPostsPublishRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPostsPublishResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Post])
                res.post = out

        return res

    def blogger_posts_revert(self, request: operations.BloggerPostsRevertRequest, security: operations.BloggerPostsRevertSecurity) -> operations.BloggerPostsRevertResponse:
        r"""Reverts a published or scheduled post to draft state."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPostsRevertRequest, base_url, '/v3/blogs/{blogId}/posts/{postId}/revert', request)
        
        query_params = utils.get_query_params(operations.BloggerPostsRevertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPostsRevertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Post])
                res.post = out

        return res

    def blogger_posts_search(self, request: operations.BloggerPostsSearchRequest, security: operations.BloggerPostsSearchSecurity) -> operations.BloggerPostsSearchResponse:
        r"""Searches for posts matching given query terms in the specified blog."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPostsSearchRequest, base_url, '/v3/blogs/{blogId}/posts/search', request)
        
        query_params = utils.get_query_params(operations.BloggerPostsSearchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPostsSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PostList])
                res.post_list = out

        return res

    def blogger_posts_update(self, request: operations.BloggerPostsUpdateRequest, security: operations.BloggerPostsUpdateSecurity) -> operations.BloggerPostsUpdateResponse:
        r"""Updates a post by blog id and post id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BloggerPostsUpdateRequest, base_url, '/v3/blogs/{blogId}/posts/{postId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "post", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BloggerPostsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BloggerPostsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Post])
                res.post = out

        return res

    