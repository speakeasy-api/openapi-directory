<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://video.twilio.com',
	];
	
	public const CREATE_COMPOSITION_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const CREATE_COMPOSITION_HOOK_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const CREATE_COMPOSITION_SETTINGS_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const CREATE_RECORDING_SETTINGS_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const CREATE_ROOM_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const DELETE_COMPOSITION_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const DELETE_COMPOSITION_HOOK_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const DELETE_RECORDING_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const DELETE_ROOM_RECORDING_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const FETCH_COMPOSITION_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const FETCH_COMPOSITION_HOOK_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const FETCH_COMPOSITION_SETTINGS_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const FETCH_RECORDING_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const FETCH_RECORDING_SETTINGS_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const FETCH_ROOM_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const FETCH_ROOM_PARTICIPANT_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const FETCH_ROOM_PARTICIPANT_PUBLISHED_TRACK_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const FETCH_ROOM_PARTICIPANT_SUBSCRIBE_RULE_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const FETCH_ROOM_PARTICIPANT_SUBSCRIBED_TRACK_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const FETCH_ROOM_RECORDING_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const FETCH_ROOM_RECORDING_RULE_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const LIST_COMPOSITION_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const LIST_COMPOSITION_HOOK_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const LIST_RECORDING_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const LIST_ROOM_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const LIST_ROOM_PARTICIPANT_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const LIST_ROOM_PARTICIPANT_PUBLISHED_TRACK_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const LIST_ROOM_PARTICIPANT_SUBSCRIBED_TRACK_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const LIST_ROOM_RECORDING_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const UPDATE_COMPOSITION_HOOK_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const UPDATE_ROOM_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const UPDATE_ROOM_PARTICIPANT_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const UPDATE_ROOM_PARTICIPANT_ANONYMIZE_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const UPDATE_ROOM_PARTICIPANT_SUBSCRIBE_RULE_SERVERS = [
		'https://video.twilio.com',
	];
	
	public const UPDATE_ROOM_RECORDING_RULE_SERVERS = [
		'https://video.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * createComposition
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCompositionCreateCompositionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCompositionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCompositionResponse
     */
	public function createComposition(
        \OpenAPI\OpenAPI\Models\Operations\CreateCompositionCreateCompositionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCompositionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCompositionResponse
    {
        $baseUrl = SDK::CREATE_COMPOSITION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Compositions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCompositionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1Composition = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1Composition', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createCompositionHook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCompositionHookCreateCompositionHookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCompositionHookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCompositionHookResponse
     */
	public function createCompositionHook(
        \OpenAPI\OpenAPI\Models\Operations\CreateCompositionHookCreateCompositionHookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCompositionHookSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCompositionHookResponse
    {
        $baseUrl = SDK::CREATE_COMPOSITION_HOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CompositionHooks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCompositionHookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1CompositionHook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1CompositionHook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createCompositionSettings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCompositionSettingsCreateCompositionSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCompositionSettingsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCompositionSettingsResponse
     */
	public function createCompositionSettings(
        \OpenAPI\OpenAPI\Models\Operations\CreateCompositionSettingsCreateCompositionSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCompositionSettingsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCompositionSettingsResponse
    {
        $baseUrl = SDK::CREATE_COMPOSITION_SETTINGS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CompositionSettings/Default');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCompositionSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1CompositionSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1CompositionSettings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createRecordingSettings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateRecordingSettingsCreateRecordingSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateRecordingSettingsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateRecordingSettingsResponse
     */
	public function createRecordingSettings(
        \OpenAPI\OpenAPI\Models\Operations\CreateRecordingSettingsCreateRecordingSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateRecordingSettingsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateRecordingSettingsResponse
    {
        $baseUrl = SDK::CREATE_RECORDING_SETTINGS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/RecordingSettings/Default');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateRecordingSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1RecordingSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1RecordingSettings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createRoom
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateRoomCreateRoomRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateRoomSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateRoomResponse
     */
	public function createRoom(
        \OpenAPI\OpenAPI\Models\Operations\CreateRoomCreateRoomRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateRoomSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateRoomResponse
    {
        $baseUrl = SDK::CREATE_ROOM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateRoomResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1Room = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1Room', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a Recording Composition resource identified by a Composition SID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCompositionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCompositionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCompositionResponse
     */
	public function deleteComposition(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCompositionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCompositionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCompositionResponse
    {
        $baseUrl = SDK::DELETE_COMPOSITION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Compositions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteCompositionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCompositionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a Recording CompositionHook resource identified by a `CompositionHook SID`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCompositionHookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCompositionHookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCompositionHookResponse
     */
	public function deleteCompositionHook(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCompositionHookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCompositionHookSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCompositionHookResponse
    {
        $baseUrl = SDK::DELETE_COMPOSITION_HOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CompositionHooks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteCompositionHookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCompositionHookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a Recording resource identified by a Recording SID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingResponse
     */
	public function deleteRecording(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingResponse
    {
        $baseUrl = SDK::DELETE_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Recordings/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteRoomRecording
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRoomRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRoomRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRoomRecordingResponse
     */
	public function deleteRoomRecording(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRoomRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteRoomRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRoomRecordingResponse
    {
        $baseUrl = SDK::DELETE_ROOM_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{RoomSid}/Recordings/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteRoomRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRoomRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Returns a single Composition resource identified by a Composition SID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCompositionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCompositionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCompositionResponse
     */
	public function fetchComposition(
        \OpenAPI\OpenAPI\Models\Operations\FetchCompositionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCompositionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCompositionResponse
    {
        $baseUrl = SDK::FETCH_COMPOSITION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Compositions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchCompositionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCompositionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1Composition = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1Composition', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a single CompositionHook resource identified by a CompositionHook SID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCompositionHookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCompositionHookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCompositionHookResponse
     */
	public function fetchCompositionHook(
        \OpenAPI\OpenAPI\Models\Operations\FetchCompositionHookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCompositionHookSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCompositionHookResponse
    {
        $baseUrl = SDK::FETCH_COMPOSITION_HOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CompositionHooks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchCompositionHookRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCompositionHookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1CompositionHook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1CompositionHook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchCompositionSettings
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCompositionSettingsResponse
     */
	public function fetchCompositionSettings(
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCompositionSettingsResponse
    {
        $baseUrl = SDK::FETCH_COMPOSITION_SETTINGS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CompositionSettings/Default');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCompositionSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1CompositionSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1CompositionSettings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a single Recording resource identified by a Recording SID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRecordingResponse
     */
	public function fetchRecording(
        \OpenAPI\OpenAPI\Models\Operations\FetchRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRecordingResponse
    {
        $baseUrl = SDK::FETCH_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Recordings/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1Recording = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1Recording', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchRecordingSettings
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRecordingSettingsResponse
     */
	public function fetchRecordingSettings(
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRecordingSettingsResponse
    {
        $baseUrl = SDK::FETCH_RECORDING_SETTINGS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/RecordingSettings/Default');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRecordingSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1RecordingSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1RecordingSettings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchRoom
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoomRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoomSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRoomResponse
     */
	public function fetchRoom(
        \OpenAPI\OpenAPI\Models\Operations\FetchRoomRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRoomSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRoomResponse
    {
        $baseUrl = SDK::FETCH_ROOM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchRoomRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRoomResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1Room = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1Room', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchRoomParticipant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantResponse
     */
	public function fetchRoomParticipant(
        \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantResponse
    {
        $baseUrl = SDK::FETCH_ROOM_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{RoomSid}/Participants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1RoomRoomParticipant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1RoomRoomParticipant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a single Track resource represented by TrackName or SID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantPublishedTrackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantPublishedTrackSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantPublishedTrackResponse
     */
	public function fetchRoomParticipantPublishedTrack(
        \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantPublishedTrackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantPublishedTrackSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantPublishedTrackResponse
    {
        $baseUrl = SDK::FETCH_ROOM_PARTICIPANT_PUBLISHED_TRACK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/PublishedTracks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantPublishedTrackRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantPublishedTrackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1RoomRoomParticipantRoomParticipantPublishedTrack = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1RoomRoomParticipantRoomParticipantPublishedTrack', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of Subscribe Rules for the Participant.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSubscribeRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSubscribeRuleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSubscribeRuleResponse
     */
	public function fetchRoomParticipantSubscribeRule(
        \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSubscribeRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSubscribeRuleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSubscribeRuleResponse
    {
        $baseUrl = SDK::FETCH_ROOM_PARTICIPANT_SUBSCRIBE_RULE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribeRules', \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSubscribeRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSubscribeRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1RoomRoomParticipantRoomParticipantSubscribeRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1RoomRoomParticipantRoomParticipantSubscribeRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a single Track resource represented by `track_sid`.  Note: This is one resource with the Video API that requires a SID, be Track Name on the subscriber side is not guaranteed to be unique.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSubscribedTrackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSubscribedTrackSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSubscribedTrackResponse
     */
	public function fetchRoomParticipantSubscribedTrack(
        \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSubscribedTrackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSubscribedTrackSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSubscribedTrackResponse
    {
        $baseUrl = SDK::FETCH_ROOM_PARTICIPANT_SUBSCRIBED_TRACK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribedTracks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSubscribedTrackRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRoomParticipantSubscribedTrackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1RoomRoomParticipantRoomParticipantSubscribedTrack = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchRoomRecording
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoomRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoomRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRoomRecordingResponse
     */
	public function fetchRoomRecording(
        \OpenAPI\OpenAPI\Models\Operations\FetchRoomRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRoomRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRoomRecordingResponse
    {
        $baseUrl = SDK::FETCH_ROOM_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{RoomSid}/Recordings/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchRoomRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRoomRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1RoomRoomRecording = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1RoomRoomRecording', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of Recording Rules for the Room.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoomRecordingRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoomRecordingRuleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRoomRecordingRuleResponse
     */
	public function fetchRoomRecordingRule(
        \OpenAPI\OpenAPI\Models\Operations\FetchRoomRecordingRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRoomRecordingRuleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRoomRecordingRuleResponse
    {
        $baseUrl = SDK::FETCH_ROOM_RECORDING_RULE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{RoomSid}/RecordingRules', \OpenAPI\OpenAPI\Models\Operations\FetchRoomRecordingRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRoomRecordingRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1RoomRoomRecordingRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1RoomRoomRecordingRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List of all Recording compositions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCompositionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCompositionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCompositionResponse
     */
	public function listComposition(
        \OpenAPI\OpenAPI\Models\Operations\ListCompositionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCompositionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCompositionResponse
    {
        $baseUrl = SDK::LIST_COMPOSITION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Compositions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCompositionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCompositionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCompositionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCompositionListCompositionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List of all Recording CompositionHook resources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCompositionHookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCompositionHookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCompositionHookResponse
     */
	public function listCompositionHook(
        \OpenAPI\OpenAPI\Models\Operations\ListCompositionHookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCompositionHookSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCompositionHookResponse
    {
        $baseUrl = SDK::LIST_COMPOSITION_HOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CompositionHooks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCompositionHookRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCompositionHookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCompositionHookResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCompositionHookListCompositionHookResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List of all Track recordings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListRecordingResponse
     */
	public function listRecording(
        \OpenAPI\OpenAPI\Models\Operations\ListRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListRecordingResponse
    {
        $baseUrl = SDK::LIST_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Recordings');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListRecordingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRecordingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListRecordingListRecordingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listRoom
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRoomRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRoomSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListRoomResponse
     */
	public function listRoom(
        \OpenAPI\OpenAPI\Models\Operations\ListRoomRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListRoomSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListRoomResponse
    {
        $baseUrl = SDK::LIST_ROOM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListRoomRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListRoomResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRoomResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListRoomListRoomResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listRoomParticipant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantResponse
     */
	public function listRoomParticipant(
        \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantResponse
    {
        $baseUrl = SDK::LIST_ROOM_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{RoomSid}/Participants', \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRoomParticipantResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantListRoomParticipantResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of tracks associated with a given Participant. Only `currently` Published Tracks are in the list resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantPublishedTrackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantPublishedTrackSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantPublishedTrackResponse
     */
	public function listRoomParticipantPublishedTrack(
        \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantPublishedTrackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantPublishedTrackSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantPublishedTrackResponse
    {
        $baseUrl = SDK::LIST_ROOM_PARTICIPANT_PUBLISHED_TRACK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/PublishedTracks', \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantPublishedTrackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantPublishedTrackRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantPublishedTrackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRoomParticipantPublishedTrackResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantPublishedTrackListRoomParticipantPublishedTrackResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of tracks that are subscribed for the participant.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantSubscribedTrackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantSubscribedTrackSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantSubscribedTrackResponse
     */
	public function listRoomParticipantSubscribedTrack(
        \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantSubscribedTrackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantSubscribedTrackSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantSubscribedTrackResponse
    {
        $baseUrl = SDK::LIST_ROOM_PARTICIPANT_SUBSCRIBED_TRACK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribedTracks', \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantSubscribedTrackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantSubscribedTrackRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantSubscribedTrackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRoomParticipantSubscribedTrackResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListRoomParticipantSubscribedTrackListRoomParticipantSubscribedTrackResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listRoomRecording
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRoomRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRoomRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListRoomRecordingResponse
     */
	public function listRoomRecording(
        \OpenAPI\OpenAPI\Models\Operations\ListRoomRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListRoomRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListRoomRecordingResponse
    {
        $baseUrl = SDK::LIST_ROOM_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{RoomSid}/Recordings', \OpenAPI\OpenAPI\Models\Operations\ListRoomRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListRoomRecordingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListRoomRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRoomRecordingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListRoomRecordingListRoomRecordingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateCompositionHook
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCompositionHookRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCompositionHookSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCompositionHookResponse
     */
	public function updateCompositionHook(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCompositionHookRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCompositionHookSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCompositionHookResponse
    {
        $baseUrl = SDK::UPDATE_COMPOSITION_HOOK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CompositionHooks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateCompositionHookRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCompositionHookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1CompositionHook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1CompositionHook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateRoom
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRoomRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRoomSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateRoomResponse
     */
	public function updateRoom(
        \OpenAPI\OpenAPI\Models\Operations\UpdateRoomRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateRoomSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateRoomResponse
    {
        $baseUrl = SDK::UPDATE_ROOM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateRoomRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateRoomResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1Room = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1Room', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateRoomParticipant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantResponse
     */
	public function updateRoomParticipant(
        \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantResponse
    {
        $baseUrl = SDK::UPDATE_ROOM_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{RoomSid}/Participants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1RoomRoomParticipant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1RoomRoomParticipant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateRoomParticipantAnonymize
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantAnonymizeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantAnonymizeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantAnonymizeResponse
     */
	public function updateRoomParticipantAnonymize(
        \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantAnonymizeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantAnonymizeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantAnonymizeResponse
    {
        $baseUrl = SDK::UPDATE_ROOM_PARTICIPANT_ANONYMIZE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{RoomSid}/Participants/{Sid}/Anonymize', \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantAnonymizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantAnonymizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1RoomRoomParticipantRoomParticipantAnonymize = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1RoomRoomParticipantRoomParticipantAnonymize', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the Subscribe Rules for the Participant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantSubscribeRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantSubscribeRuleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantSubscribeRuleResponse
     */
	public function updateRoomParticipantSubscribeRule(
        \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantSubscribeRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantSubscribeRuleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantSubscribeRuleResponse
    {
        $baseUrl = SDK::UPDATE_ROOM_PARTICIPANT_SUBSCRIBE_RULE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribeRules', \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantSubscribeRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateRoomParticipantSubscribeRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1RoomRoomParticipantRoomParticipantSubscribeRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1RoomRoomParticipantRoomParticipantSubscribeRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the Recording Rules for the Room
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRoomRecordingRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRoomRecordingRuleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateRoomRecordingRuleResponse
     */
	public function updateRoomRecordingRule(
        \OpenAPI\OpenAPI\Models\Operations\UpdateRoomRecordingRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateRoomRecordingRuleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateRoomRecordingRuleResponse
    {
        $baseUrl = SDK::UPDATE_ROOM_RECORDING_RULE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Rooms/{RoomSid}/RecordingRules', \OpenAPI\OpenAPI\Models\Operations\UpdateRoomRecordingRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateRoomRecordingRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoV1RoomRoomRecordingRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoV1RoomRoomRecordingRule', 'json');
            }
        }

        return $response;
    }
}