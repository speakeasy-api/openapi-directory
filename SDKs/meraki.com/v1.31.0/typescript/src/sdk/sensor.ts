/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Sensor {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a sensor alert profile for a network.
   *
   * @remarks
   * Creates a sensor alert profile for a network.
   */
  createNetworkSensorAlertsProfile(
    req: operations.CreateNetworkSensorAlertsProfileRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateNetworkSensorAlertsProfileResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateNetworkSensorAlertsProfileRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/sensor/alerts/profiles",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateNetworkSensorAlertsProfileResponse =
        new operations.CreateNetworkSensorAlertsProfileResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createNetworkSensorAlertsProfile200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateNetworkSensorAlertsProfile200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a sensor alert profile from a network.
   *
   * @remarks
   * Deletes a sensor alert profile from a network.
   */
  deleteNetworkSensorAlertsProfile(
    req: operations.DeleteNetworkSensorAlertsProfileRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteNetworkSensorAlertsProfileResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteNetworkSensorAlertsProfileRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/sensor/alerts/profiles/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteNetworkSensorAlertsProfileResponse =
        new operations.DeleteNetworkSensorAlertsProfileResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * List the sensor roles for a given sensor or camera device.
   *
   * @remarks
   * List the sensor roles for a given sensor or camera device.
   */
  getDeviceSensorRelationships(
    req: operations.GetDeviceSensorRelationshipsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDeviceSensorRelationshipsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDeviceSensorRelationshipsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/devices/{serial}/sensor/relationships",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDeviceSensorRelationshipsResponse =
        new operations.GetDeviceSensorRelationshipsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getDeviceSensorRelationships200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getDeviceSensorRelationships200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.GetDeviceSensorRelationships200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Return an overview of currently alerting sensors by metric
   *
   * @remarks
   * Return an overview of currently alerting sensors by metric
   */
  getNetworkSensorAlertsCurrentOverviewByMetric(
    req: operations.GetNetworkSensorAlertsCurrentOverviewByMetricRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNetworkSensorAlertsCurrentOverviewByMetricResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNetworkSensorAlertsCurrentOverviewByMetricRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/sensor/alerts/current/overview/byMetric",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNetworkSensorAlertsCurrentOverviewByMetricResponse =
        new operations.GetNetworkSensorAlertsCurrentOverviewByMetricResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Return an overview of alert occurrences over a timespan, by metric
   *
   * @remarks
   * Return an overview of alert occurrences over a timespan, by metric
   */
  getNetworkSensorAlertsOverviewByMetric(
    req: operations.GetNetworkSensorAlertsOverviewByMetricRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNetworkSensorAlertsOverviewByMetricResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNetworkSensorAlertsOverviewByMetricRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/sensor/alerts/overview/byMetric",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNetworkSensorAlertsOverviewByMetricResponse =
        new operations.GetNetworkSensorAlertsOverviewByMetricResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getNetworkSensorAlertsOverviewByMetric200ApplicationJSONObjects =
              [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getNetworkSensorAlertsOverviewByMetric200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.GetNetworkSensorAlertsOverviewByMetric200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Show details of a sensor alert profile for a network.
   *
   * @remarks
   * Show details of a sensor alert profile for a network.
   */
  getNetworkSensorAlertsProfile(
    req: operations.GetNetworkSensorAlertsProfileRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNetworkSensorAlertsProfileResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNetworkSensorAlertsProfileRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/sensor/alerts/profiles/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNetworkSensorAlertsProfileResponse =
        new operations.GetNetworkSensorAlertsProfileResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getNetworkSensorAlertsProfile200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetNetworkSensorAlertsProfile200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all sensor alert profiles for a network.
   *
   * @remarks
   * Lists all sensor alert profiles for a network.
   */
  getNetworkSensorAlertsProfiles(
    req: operations.GetNetworkSensorAlertsProfilesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNetworkSensorAlertsProfilesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNetworkSensorAlertsProfilesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/sensor/alerts/profiles",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNetworkSensorAlertsProfilesResponse =
        new operations.GetNetworkSensorAlertsProfilesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getNetworkSensorAlertsProfiles200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getNetworkSensorAlertsProfiles200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.GetNetworkSensorAlertsProfiles200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the sensor roles for devices in a given network
   *
   * @remarks
   * List the sensor roles for devices in a given network
   */
  getNetworkSensorRelationships(
    req: operations.GetNetworkSensorRelationshipsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNetworkSensorRelationshipsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNetworkSensorRelationshipsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/sensor/relationships",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNetworkSensorRelationshipsResponse =
        new operations.GetNetworkSensorRelationshipsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getNetworkSensorRelationships200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getNetworkSensorRelationships200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.GetNetworkSensorRelationships200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Return all reported readings from sensors in a given timespan, sorted by timestamp
   *
   * @remarks
   * Return all reported readings from sensors in a given timespan, sorted by timestamp
   */
  getOrganizationSensorReadingsHistory(
    req: operations.GetOrganizationSensorReadingsHistoryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrganizationSensorReadingsHistoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrganizationSensorReadingsHistoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organizations/{organizationId}/sensor/readings/history",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrganizationSensorReadingsHistoryResponse =
        new operations.GetOrganizationSensorReadingsHistoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getOrganizationSensorReadingsHistory200ApplicationJSONObjects =
              [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getOrganizationSensorReadingsHistory200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.GetOrganizationSensorReadingsHistory200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Return the latest available reading for each metric from each sensor, sorted by sensor serial
   *
   * @remarks
   * Return the latest available reading for each metric from each sensor, sorted by sensor serial
   */
  getOrganizationSensorReadingsLatest(
    req: operations.GetOrganizationSensorReadingsLatestRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrganizationSensorReadingsLatestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrganizationSensorReadingsLatestRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organizations/{organizationId}/sensor/readings/latest",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrganizationSensorReadingsLatestResponse =
        new operations.GetOrganizationSensorReadingsLatestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getOrganizationSensorReadingsLatest200ApplicationJSONObjects =
              [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getOrganizationSensorReadingsLatest200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.GetOrganizationSensorReadingsLatest200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Assign one or more sensor roles to a given sensor or camera device.
   *
   * @remarks
   * Assign one or more sensor roles to a given sensor or camera device.
   */
  updateDeviceSensorRelationships(
    req: operations.UpdateDeviceSensorRelationshipsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateDeviceSensorRelationshipsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateDeviceSensorRelationshipsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/devices/{serial}/sensor/relationships",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateDeviceSensorRelationshipsResponse =
        new operations.UpdateDeviceSensorRelationshipsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateDeviceSensorRelationships200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.UpdateDeviceSensorRelationships200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a sensor alert profile for a network.
   *
   * @remarks
   * Updates a sensor alert profile for a network.
   */
  updateNetworkSensorAlertsProfile(
    req: operations.UpdateNetworkSensorAlertsProfileRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateNetworkSensorAlertsProfileResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateNetworkSensorAlertsProfileRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/networks/{networkId}/sensor/alerts/profiles/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateNetworkSensorAlertsProfileResponse =
        new operations.UpdateNetworkSensorAlertsProfileResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateNetworkSensorAlertsProfile200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.UpdateNetworkSensorAlertsProfile200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
