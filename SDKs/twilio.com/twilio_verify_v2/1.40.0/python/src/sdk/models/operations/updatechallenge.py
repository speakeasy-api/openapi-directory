"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import verify_v2_service_entity_challenge as shared_verify_v2_service_entity_challenge
from typing import Any, Optional

UPDATE_CHALLENGE_SERVERS = [
	"https://verify.twilio.com",
]


@dataclasses.dataclass
class UpdateChallengeSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class UpdateChallengeUpdateChallengeRequest:
    
    auth_payload: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AuthPayload' }})
    r"""The optional payload needed to verify the Challenge. E.g., a TOTP would use the numeric code. For `TOTP` this value must be between 3 and 8 characters long. For `Push` this value can be up to 5456 characters in length"""  
    metadata: Optional[Any] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Metadata' }})
    r"""Custom metadata associated with the challenge. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. `{\\"os\\": \\"Android\\"}`. Can be up to 1024 characters in length."""  
    

@dataclasses.dataclass
class UpdateChallengeRequest:
    
    identity: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Identity', 'style': 'simple', 'explode': False }})
    r"""Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters."""  
    service_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'ServiceSid', 'style': 'simple', 'explode': False }})
    r"""The unique SID identifier of the Service."""  
    sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Sid', 'style': 'simple', 'explode': False }})
    r"""A 34 character string that uniquely identifies this Challenge."""  
    request_body: Optional[UpdateChallengeUpdateChallengeRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateChallengeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    verify_v2_service_entity_challenge: Optional[shared_verify_v2_service_entity_challenge.VerifyV2ServiceEntityChallenge] = dataclasses.field(default=None)
    r"""OK"""  
    