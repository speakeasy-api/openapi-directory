<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class CreateFilterRequestBody
{
    /**
     * Defines the action that is to be applied to the findings that match the filter.
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\CreateFilterRequestBodyActionEnum $action
     */
	#[\JMS\Serializer\Annotation\SerializedName('action')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\CreateFilterRequestBodyActionEnum>')]
    public CreateFilterRequestBodyActionEnum $action;
    
    /**
     * A description of the filter.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * Details on the criteria used to define the filter.
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\CreateFilterRequestBodyFilterCriteria $filterCriteria
     */
	#[\JMS\Serializer\Annotation\SerializedName('filterCriteria')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\CreateFilterRequestBodyFilterCriteria')]
    public CreateFilterRequestBodyFilterCriteria $filterCriteria;
    
    /**
     * The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not allowed.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * The reason for creating the filter.
     * 
     * @var ?string $reason
     */
	#[\JMS\Serializer\Annotation\SerializedName('reason')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $reason = null;
    
    /**
     * A list of tags for the filter.
     * 
     * @var ?array<string, string> $tags
     */
	#[\JMS\Serializer\Annotation\SerializedName('tags')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tags = null;
    
	public function __construct()
	{
		$this->action = \OpenAPI\OpenAPI\Models\Operations\CreateFilterRequestBodyActionEnum::NONE;
		$this->description = null;
		$this->filterCriteria = new \OpenAPI\OpenAPI\Models\Operations\CreateFilterRequestBodyFilterCriteria();
		$this->name = "";
		$this->reason = null;
		$this->tags = null;
	}
}
