// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PointPointGetSecurity struct {
	APIKeyHeader string `security:"scheme,type=apiKey,subtype=header,name=X-API-Key"`
}

// PointPointGetLanguageLanguageEnum - An enumeration.
type PointPointGetLanguageLanguageEnum string

const (
	PointPointGetLanguageLanguageEnumCs PointPointGetLanguageLanguageEnum = "cs"
	PointPointGetLanguageLanguageEnumEn PointPointGetLanguageLanguageEnum = "en"
	PointPointGetLanguageLanguageEnumDe PointPointGetLanguageLanguageEnum = "de"
	PointPointGetLanguageLanguageEnumEs PointPointGetLanguageLanguageEnum = "es"
	PointPointGetLanguageLanguageEnumFr PointPointGetLanguageLanguageEnum = "fr"
	PointPointGetLanguageLanguageEnumPl PointPointGetLanguageLanguageEnum = "pl"
	PointPointGetLanguageLanguageEnumPt PointPointGetLanguageLanguageEnum = "pt"
)

func (e *PointPointGetLanguageLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cs":
		fallthrough
	case "en":
		fallthrough
	case "de":
		fallthrough
	case "es":
		fallthrough
	case "fr":
		fallthrough
	case "pl":
		fallthrough
	case "pt":
		*e = PointPointGetLanguageLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PointPointGetLanguageLanguageEnum: %s", s)
	}
}

// PointPointGetUnitsUnitsEnum - An enumeration.
type PointPointGetUnitsUnitsEnum string

const (
	PointPointGetUnitsUnitsEnumAuto   PointPointGetUnitsUnitsEnum = "auto"
	PointPointGetUnitsUnitsEnumMetric PointPointGetUnitsUnitsEnum = "metric"
	PointPointGetUnitsUnitsEnumUs     PointPointGetUnitsUnitsEnum = "us"
	PointPointGetUnitsUnitsEnumUk     PointPointGetUnitsUnitsEnum = "uk"
	PointPointGetUnitsUnitsEnumCa     PointPointGetUnitsUnitsEnum = "ca"
)

func (e *PointPointGetUnitsUnitsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "auto":
		fallthrough
	case "metric":
		fallthrough
	case "us":
		fallthrough
	case "uk":
		fallthrough
	case "ca":
		*e = PointPointGetUnitsUnitsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PointPointGetUnitsUnitsEnum: %s", s)
	}
}

type PointPointGetRequest struct {
	// Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// The language of text summaries and place names (variable names are never translated). Available languages are:
	//
	//    * ``en``: English
	//    * ``es``: Spanish
	//    * ``fr``: French
	//    * ``de``: German
	//    * ``pl``: Polish
	//    * ``pt``: Portuguese
	//    * ``cs``: Czech
	//
	Language *PointPointGetLanguageLanguageEnum `queryParam:"style=form,explode=true,name=language"`
	// Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4
	Lat *string `queryParam:"style=form,explode=true,name=lat"`
	// Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4
	Lon *string `queryParam:"style=form,explode=true,name=lon"`
	// Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
	PlaceID *string `queryParam:"style=form,explode=true,name=place_id"`
	// Sections to be included in the response. You can specify more section by separating the values with a comma. The available values are:
	//
	// * ``current``: Current weather situation
	// * ``daily``: Forecasts for each whole day, without the daily parts
	// * ``daily-parts``: Forecasts for each whole day, morning, afternoon and evening
	//     * Important: forecast for the morning, afternoon and evening is available only for the first
	//       7 days in the forecast
	// * ``hourly``: Forecasts with hourly resolution
	// * ``minutely``: Precipitation forecast with 1 minute resolution
	// * ``alerts``: The weather alerts
	// * ``all``: All sections
	//
	Sections *string `queryParam:"style=form,explode=true,name=sections"`
	// Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used.
	// The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used.
	// Alternatively you may use the value ``auto`` in which case the local timezone of the location is used.
	// The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
	//
	Timezone *string `queryParam:"style=form,explode=true,name=timezone"`
	// Unit system to be used. The available values are:
	//
	// * `auto`: Select the system automatically, based on the forecast location.
	// * `metric`: Metric (SI) units (`°C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`).
	// * `us`: Imperial units (`°F`, `in/h`, `mph`, `in`, `mi`, `Hg`).
	// * `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`.
	// * `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`.
	//
	Units *PointPointGetUnitsUnitsEnum `queryParam:"style=form,explode=true,name=units"`
}

type PointPointGetResponse struct {
	ContentType string
	// Error in passed parameter.
	GeneralRequestError *shared.GeneralRequestError
	// Validation Error
	HTTPValidationError *shared.HTTPValidationError
	// Successful Response
	PointPointData *shared.PointPointData
	StatusCode     int
	RawResponse    *http.Response
}
