"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Scripts:
    r"""Scripts Restv 2 Controller"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def export_zip_using_get(self, request: operations.ExportZipUsingGETRequest) -> operations.ExportZipUsingGETResponse:
        r"""exportZip"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ExportZipUsingGETRequest, base_url, '/restv2/game/{apiKey}/admin/scripts/export', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportZipUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 403, 404]:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_script_differences_using_get(self, request: operations.GETScriptDifferencesUsingGETRequest) -> operations.GETScriptDifferencesUsingGETResponse:
        r"""getScriptDifferences"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETScriptDifferencesUsingGETRequest, base_url, '/restv2/game/{apiKey}/admin/scripts/differences/{snapshotId1}/{snapshotId2}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETScriptDifferencesUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_script_versions_using_get(self, request: operations.GETScriptVersionsUsingGETRequest) -> operations.GETScriptVersionsUsingGETResponse:
        r"""getScriptVersions"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETScriptVersionsUsingGETRequest, base_url, '/restv2/game/{apiKey}/admin/scripts/versions/{page}', request)
        
        query_params = utils.get_query_params(operations.GETScriptVersionsUsingGETRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETScriptVersionsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_script_versions_using_get_1(self, request: operations.GETScriptVersionsUsingGET1Request) -> operations.GETScriptVersionsUsingGET1Response:
        r"""getScriptVersions"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETScriptVersionsUsingGET1Request, base_url, '/restv2/game/{apiKey}/admin/scripts/versions', request)
        
        query_params = utils.get_query_params(operations.GETScriptVersionsUsingGET1Request, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETScriptVersionsUsingGET1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def import_accept_using_post(self, request: operations.ImportAcceptUsingPOSTRequest) -> operations.ImportAcceptUsingPOSTResponse:
        r"""importAccept"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportAcceptUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/admin/scripts/import/accept', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ImportAcceptUsingPOSTRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportAcceptUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def import_zip_using_post(self, request: operations.ImportZipUsingPOSTRequest) -> operations.ImportZipUsingPOSTResponse:
        r"""importZip"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportZipUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/admin/scripts/import/preview', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportZipUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScriptsDifferenceListModel])
                res.scripts_difference_list_model = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    