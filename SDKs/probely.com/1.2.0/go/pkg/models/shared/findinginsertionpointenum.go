// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FindingInsertionPointEnum - An insertion point is the place in the HTTP request where the
// malicious payload is injected to exploit the vulnerability.
//   - cookie - Payload injected into the value of an HTTP cookie
//   - header - Payload injected into the header of an HTTP request
//   - parameter - Payload injected into the value of a query string
//     parameter
//   - arbitrary_url_param - Payload injected into the value of an
//     arbitrarily added query string parameter
//   - url_filename - Payload injected into the URL filename part
//   - url_folder - Payload injected into the URL folder part
//   - multipart_parameter - Payload is inserted into the value of a
//     parameter attribute within a multi-part message body (such as
//     the name of an uploaded file).
//   - <empty> - No payload to inject.
type FindingInsertionPointEnum string

const (
	FindingInsertionPointEnumCookie                FindingInsertionPointEnum = "cookie"
	FindingInsertionPointEnumHeader                FindingInsertionPointEnum = "header"
	FindingInsertionPointEnumParameter             FindingInsertionPointEnum = "parameter"
	FindingInsertionPointEnumArbitraryURLParamName FindingInsertionPointEnum = "arbitrary_url_param_name"
	FindingInsertionPointEnumURLPathFolder         FindingInsertionPointEnum = "url_path_folder"
	FindingInsertionPointEnumUnknown               FindingInsertionPointEnum = ""
)

func (e *FindingInsertionPointEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cookie":
		fallthrough
	case "header":
		fallthrough
	case "parameter":
		fallthrough
	case "arbitrary_url_param_name":
		fallthrough
	case "url_path_folder":
		fallthrough
	case "":
		*e = FindingInsertionPointEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FindingInsertionPointEnum: %s", s)
	}
}
