// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AdjustmentConditionsRulesBookableDateRange - The date range the adjustment applies to, inclusive.
type AdjustmentConditionsRulesBookableDateRange struct {
	End   string `json:"end"`
	Start string `json:"start"`
}

// AdjustmentConditionsRulesNightsRange - The number of nights the adjustment applies to, inclusive.
type AdjustmentConditionsRulesNightsRange struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type AdjustmentConditionsRules struct {
	// The date range the adjustment applies to, inclusive.
	BookableDateRange AdjustmentConditionsRulesBookableDateRange `json:"bookableDateRange"`
	// The number of nights the adjustment applies to, inclusive.
	NightsRange AdjustmentConditionsRulesNightsRange `json:"nightsRange"`
}

// AdjustmentConditionsTypeEnum - The type of the condition. Currently we only support conditions based on length of stay.
type AdjustmentConditionsTypeEnum string

const (
	AdjustmentConditionsTypeEnumLengthOfStay AdjustmentConditionsTypeEnum = "LENGTH_OF_STAY"
)

func (e *AdjustmentConditionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LENGTH_OF_STAY":
		*e = AdjustmentConditionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AdjustmentConditionsTypeEnum: %s", s)
	}
}

type AdjustmentConditions struct {
	Rules AdjustmentConditionsRules `json:"rules"`
	// The type of the condition. Currently we only support conditions based on length of stay.
	Type AdjustmentConditionsTypeEnum `json:"type"`
}
