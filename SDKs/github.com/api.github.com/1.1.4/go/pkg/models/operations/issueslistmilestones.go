// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// IssuesListMilestonesDirectionEnum - The direction of the sort. Either `asc` or `desc`.
type IssuesListMilestonesDirectionEnum string

const (
	IssuesListMilestonesDirectionEnumAsc  IssuesListMilestonesDirectionEnum = "asc"
	IssuesListMilestonesDirectionEnumDesc IssuesListMilestonesDirectionEnum = "desc"
)

func (e *IssuesListMilestonesDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asc":
		fallthrough
	case "desc":
		*e = IssuesListMilestonesDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IssuesListMilestonesDirectionEnum: %s", s)
	}
}

// IssuesListMilestonesSortEnum - What to sort results by. Either `due_on` or `completeness`.
type IssuesListMilestonesSortEnum string

const (
	IssuesListMilestonesSortEnumDueOn        IssuesListMilestonesSortEnum = "due_on"
	IssuesListMilestonesSortEnumCompleteness IssuesListMilestonesSortEnum = "completeness"
)

func (e *IssuesListMilestonesSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "due_on":
		fallthrough
	case "completeness":
		*e = IssuesListMilestonesSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IssuesListMilestonesSortEnum: %s", s)
	}
}

// IssuesListMilestonesStateEnum - The state of the milestone. Either `open`, `closed`, or `all`.
type IssuesListMilestonesStateEnum string

const (
	IssuesListMilestonesStateEnumOpen   IssuesListMilestonesStateEnum = "open"
	IssuesListMilestonesStateEnumClosed IssuesListMilestonesStateEnum = "closed"
	IssuesListMilestonesStateEnumAll    IssuesListMilestonesStateEnum = "all"
)

func (e *IssuesListMilestonesStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "open":
		fallthrough
	case "closed":
		fallthrough
	case "all":
		*e = IssuesListMilestonesStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IssuesListMilestonesStateEnum: %s", s)
	}
}

type IssuesListMilestonesRequest struct {
	// The direction of the sort. Either `asc` or `desc`.
	Direction *IssuesListMilestonesDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of results per page (max 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
	// What to sort results by. Either `due_on` or `completeness`.
	Sort *IssuesListMilestonesSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// The state of the milestone. Either `open`, `closed`, or `all`.
	State *IssuesListMilestonesStateEnum `queryParam:"style=form,explode=true,name=state"`
}

type IssuesListMilestonesResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Resource not found
	BasicError *shared.BasicError
	// Response
	Milestones []shared.Milestone
}
