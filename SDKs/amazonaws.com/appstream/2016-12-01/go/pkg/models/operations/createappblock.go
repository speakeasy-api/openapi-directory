// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateAppBlockXAmzTargetEnum
type CreateAppBlockXAmzTargetEnum string

const (
	CreateAppBlockXAmzTargetEnumPhotonAdminProxyServiceCreateAppBlock CreateAppBlockXAmzTargetEnum = "PhotonAdminProxyService.CreateAppBlock"
)

func (e CreateAppBlockXAmzTargetEnum) ToPointer() *CreateAppBlockXAmzTargetEnum {
	return &e
}

func (e *CreateAppBlockXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PhotonAdminProxyService.CreateAppBlock":
		*e = CreateAppBlockXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAppBlockXAmzTargetEnum: %v", v)
	}
}

type CreateAppBlockRequest struct {
	CreateAppBlockRequest shared.CreateAppBlockRequest `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            CreateAppBlockXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateAppBlockResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// Success
	CreateAppBlockResult *shared.CreateAppBlockResult
	// LimitExceededException
	LimitExceededException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
}
