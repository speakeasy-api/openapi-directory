// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AccountHolderCapabilityAllowedLevelEnum - The capability level that is allowed for the account holder.
//
// Possible values: **notApplicable**, **low**, **medium**, **high**.
type AccountHolderCapabilityAllowedLevelEnum string

const (
	AccountHolderCapabilityAllowedLevelEnumHigh          AccountHolderCapabilityAllowedLevelEnum = "high"
	AccountHolderCapabilityAllowedLevelEnumLow           AccountHolderCapabilityAllowedLevelEnum = "low"
	AccountHolderCapabilityAllowedLevelEnumMedium        AccountHolderCapabilityAllowedLevelEnum = "medium"
	AccountHolderCapabilityAllowedLevelEnumNotApplicable AccountHolderCapabilityAllowedLevelEnum = "notApplicable"
)

func (e *AccountHolderCapabilityAllowedLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "high":
		fallthrough
	case "low":
		fallthrough
	case "medium":
		fallthrough
	case "notApplicable":
		*e = AccountHolderCapabilityAllowedLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountHolderCapabilityAllowedLevelEnum: %s", s)
	}
}

// AccountHolderCapabilityRequestedLevelEnum - The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
//
// Possible values: **notApplicable**, **low**, **medium**, **high**.
type AccountHolderCapabilityRequestedLevelEnum string

const (
	AccountHolderCapabilityRequestedLevelEnumHigh          AccountHolderCapabilityRequestedLevelEnum = "high"
	AccountHolderCapabilityRequestedLevelEnumLow           AccountHolderCapabilityRequestedLevelEnum = "low"
	AccountHolderCapabilityRequestedLevelEnumMedium        AccountHolderCapabilityRequestedLevelEnum = "medium"
	AccountHolderCapabilityRequestedLevelEnumNotApplicable AccountHolderCapabilityRequestedLevelEnum = "notApplicable"
)

func (e *AccountHolderCapabilityRequestedLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "high":
		fallthrough
	case "low":
		fallthrough
	case "medium":
		fallthrough
	case "notApplicable":
		*e = AccountHolderCapabilityRequestedLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountHolderCapabilityRequestedLevelEnum: %s", s)
	}
}

// AccountHolderCapabilityVerificationStatusEnum - The status of the verification checks for the capability.
//
// Possible values:
//
// * **pending**: Adyen is running the verification.
//
// * **invalid**: The verification failed. Check if the `errors` array contains more information.
//
// * **valid**: The verification has been successfully completed.
//
// * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
type AccountHolderCapabilityVerificationStatusEnum string

const (
	AccountHolderCapabilityVerificationStatusEnumInvalid  AccountHolderCapabilityVerificationStatusEnum = "invalid"
	AccountHolderCapabilityVerificationStatusEnumPending  AccountHolderCapabilityVerificationStatusEnum = "pending"
	AccountHolderCapabilityVerificationStatusEnumRejected AccountHolderCapabilityVerificationStatusEnum = "rejected"
	AccountHolderCapabilityVerificationStatusEnumValid    AccountHolderCapabilityVerificationStatusEnum = "valid"
)

func (e *AccountHolderCapabilityVerificationStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid":
		fallthrough
	case "pending":
		fallthrough
	case "rejected":
		fallthrough
	case "valid":
		*e = AccountHolderCapabilityVerificationStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountHolderCapabilityVerificationStatusEnum: %s", s)
	}
}

type AccountHolderCapability struct {
	// Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
	Allowed *bool `json:"allowed,omitempty"`
	// The capability level that is allowed for the account holder.
	//
	// Possible values: **notApplicable**, **low**, **medium**, **high**.
	AllowedLevel    *AccountHolderCapabilityAllowedLevelEnum `json:"allowedLevel,omitempty"`
	AllowedSettings *JSONObject                              `json:"allowedSettings,omitempty"`
	// Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
	Enabled *bool `json:"enabled,omitempty"`
	// Contains verification errors and the actions that you can take to resolve them.
	Problems []map[string]interface{} `json:"problems,omitempty"`
	// Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
	Requested *bool `json:"requested,omitempty"`
	// The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
	//
	// Possible values: **notApplicable**, **low**, **medium**, **high**.
	RequestedLevel    *AccountHolderCapabilityRequestedLevelEnum `json:"requestedLevel,omitempty"`
	RequestedSettings *JSONObject                                `json:"requestedSettings,omitempty"`
	// Contains the status of the transfer instruments associated with this capability.
	TransferInstruments []AccountSupportingEntityCapability `json:"transferInstruments,omitempty"`
	// The status of the verification checks for the capability.
	//
	// Possible values:
	//
	// * **pending**: Adyen is running the verification.
	//
	// * **invalid**: The verification failed. Check if the `errors` array contains more information.
	//
	// * **valid**: The verification has been successfully completed.
	//
	// * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
	//
	VerificationStatus *AccountHolderCapabilityVerificationStatusEnum `json:"verificationStatus,omitempty"`
}

type AccountHolderCapabilityInput struct {
	AllowedSettings *JSONObject `json:"allowedSettings,omitempty"`
	// Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
	Enabled *bool `json:"enabled,omitempty"`
	// Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
	Requested *bool `json:"requested,omitempty"`
	// The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
	//
	// Possible values: **notApplicable**, **low**, **medium**, **high**.
	RequestedLevel    *AccountHolderCapabilityRequestedLevelEnum `json:"requestedLevel,omitempty"`
	RequestedSettings *JSONObject                                `json:"requestedSettings,omitempty"`
	// Contains the status of the transfer instruments associated with this capability.
	TransferInstruments []AccountSupportingEntityCapabilityInput `json:"transferInstruments,omitempty"`
}
