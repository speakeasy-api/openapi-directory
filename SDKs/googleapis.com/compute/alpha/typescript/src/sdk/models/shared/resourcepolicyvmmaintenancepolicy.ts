/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ResourcePolicyVmMaintenancePolicyConcurrencyControl } from "./resourcepolicyvmmaintenancepolicyconcurrencycontrol";
import { ResourcePolicyVmMaintenancePolicyMaintenanceWindow } from "./resourcepolicyvmmaintenancepolicymaintenancewindow";
import { Expose, Type } from "class-transformer";

export class ResourcePolicyVmMaintenancePolicy extends SpeakeasyBase {
  /**
   * A concurrency control configuration. Defines a group config that, when attached to an instance, recognizes that instance as part of a group of instances where only up the concurrency_limit of instances in that group can undergo simultaneous maintenance. For more information: go/concurrency-control-design-doc
   */
  @SpeakeasyMetadata()
  @Expose({ name: "concurrencyControlGroup" })
  @Type(() => ResourcePolicyVmMaintenancePolicyConcurrencyControl)
  concurrencyControlGroup?: ResourcePolicyVmMaintenancePolicyConcurrencyControl;

  /**
   * A maintenance window for VMs. When set, we restrict our maintenance operations to this window.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maintenanceWindow" })
  @Type(() => ResourcePolicyVmMaintenancePolicyMaintenanceWindow)
  maintenanceWindow?: ResourcePolicyVmMaintenancePolicyMaintenanceWindow;
}
