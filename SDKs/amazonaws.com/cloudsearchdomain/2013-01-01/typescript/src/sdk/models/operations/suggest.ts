/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum SuggestFormatEnum {
  SDK = "sdk",
}

export enum SuggestPrettyEnum {
  True = "true",
}

export class SuggestRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=format",
  })
  format: SuggestFormatEnum;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pretty",
  })
  pretty: SuggestPrettyEnum;

  /**
   * Specifies the string for which you want to get suggestions.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=q" })
  q: string;

  /**
   * Specifies the maximum number of suggestions to return.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=size" })
  size?: number;

  /**
   * Specifies the name of the suggester to use to find suggested matches.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=suggester",
  })
  suggester: string;
}

export class SuggestResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * SearchException
   */
  @SpeakeasyMetadata()
  searchException?: shared.SearchException;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  suggestResponse?: shared.SuggestResponse;
}
