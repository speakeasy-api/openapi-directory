/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.net.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;

/**
 * GeoJSON response for matching incidents
 */
public class Locations {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Locations(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Unpaginated geojson response
     * &lt;p&gt;&lt;strong&gt;This endpoint behaves exactly like&lt;/strong&gt; &lt;code&gt;incidents&lt;/code&gt;, but returns a valid geojson &lt;code&gt;FeatureCollection&lt;/code&gt; that looks like this:&lt;/p&gt;
     * 
     * &lt;pre&gt;&lt;code&gt;{
     *   type: "FeatureCollection",
     *   features: [
     *     {
     *       type: "Feature",
     *       properties: {
     *       id: 4474199,
     *       type: "Theft",
     *       occurred_at: 1428536937
     *     },
     *       geometry: {
     *       type: "Point",
     *       coordinates: [ -122.6244177, 45.5164386 ]
     *     }
     *   }
     * }
     * &lt;/code&gt;&lt;/pre&gt;
     * 
     * &lt;p&gt;It doesn\u2019t paginate. If you pass the &lt;code&gt;all&lt;/code&gt; parameter it returns all matches (which can be big, &amp;gt; 4mb), otherwise it returns the 100 most recent.&lt;/p&gt;
     * 
     * &lt;p&gt;&lt;strong&gt;Go forth and make maps!&lt;/strong&gt;&lt;/p&gt;
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GETVersionLocationsFormatResponse getVersionLocationsFormat(org.openapis.openapi.models.operations.GETVersionLocationsFormatRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/locations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GETVersionLocationsFormatQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GETVersionLocationsFormatResponse res = new org.openapis.openapi.models.operations.GETVersionLocationsFormatResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Unpaginated geojson response with simplestyled markers
     * &lt;p&gt;This behaves exactly like the root &lt;code&gt;locations&lt;/code&gt; endpoint, but returns &lt;a href="https://github.com/mapbox/simplestyle-spec"&gt;simplestyled markers&lt;/a&gt; (&lt;a href="https://www.mapbox.com/guides/markers/#simple-style"&gt;mapbox styled markers&lt;/a&gt;)&lt;/p&gt;
     * 
     * &lt;p&gt;&lt;strong&gt;Go forth and make maps!&lt;/strong&gt;&lt;/p&gt;
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GETVersionLocationsMarkersFormatResponse getVersionLocationsMarkersFormat(org.openapis.openapi.models.operations.GETVersionLocationsMarkersFormatRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/locations/markers");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GETVersionLocationsMarkersFormatQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GETVersionLocationsMarkersFormatResponse res = new org.openapis.openapi.models.operations.GETVersionLocationsMarkersFormatResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }
}