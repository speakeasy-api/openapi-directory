"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class BackendAPIAuthTypeModeEnum(str, Enum):
    r"""Describes the authentication mode."""
    API_KEY = 'API_KEY'
    AWS_IAM = 'AWS_IAM'
    AMAZON_COGNITO_USER_POOLS = 'AMAZON_COGNITO_USER_POOLS'
    OPENID_CONNECT = 'OPENID_CONNECT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BackendAPIAuthTypeSettings:
    r"""Describes settings for the authentication mode."""
    
    cognito_user_pool_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CognitoUserPoolId'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    expiration_time: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpirationTime'), 'exclude': lambda f: f is None }})  
    open_id_auth_ttl: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenIDAuthTTL'), 'exclude': lambda f: f is None }})  
    open_id_client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenIDClientId'), 'exclude': lambda f: f is None }})  
    open_id_iat_ttl: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenIDIatTTL'), 'exclude': lambda f: f is None }})  
    open_id_issue_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenIDIssueURL'), 'exclude': lambda f: f is None }})  
    open_id_provider_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenIDProviderName'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BackendAPIAuthType:
    r"""Describes the auth types for your configured data models."""
    
    mode: Optional[BackendAPIAuthTypeModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mode'), 'exclude': lambda f: f is None }})  
    settings: Optional[BackendAPIAuthTypeSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Settings'), 'exclude': lambda f: f is None }})  
    