"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Customers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def searchads360_customers_custom_columns_list(self, request: operations.Searchads360CustomersCustomColumnsListRequest, security: operations.Searchads360CustomersCustomColumnsListSecurity) -> operations.Searchads360CustomersCustomColumnsListResponse:
        r"""Returns all the custom columns associated with the customer in full detail."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Searchads360CustomersCustomColumnsListRequest, base_url, '/v0/customers/{customerId}/customColumns', request)
        
        query_params = utils.get_query_params(operations.Searchads360CustomersCustomColumnsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Searchads360CustomersCustomColumnsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleAdsSearchads360V0ServicesListCustomColumnsResponse])
                res.google_ads_searchads360_v0_services_list_custom_columns_response = out

        return res

    def searchads360_customers_search_ads360_search(self, request: operations.Searchads360CustomersSearchAds360SearchRequest, security: operations.Searchads360CustomersSearchAds360SearchSecurity) -> operations.Searchads360CustomersSearchAds360SearchResponse:
        r"""Returns all rows that match the search query. List of thrown errors: [AuthenticationError]() [AuthorizationError]() [HeaderError]() [InternalError]() [QueryError]() [QuotaError]() [RequestError]()"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Searchads360CustomersSearchAds360SearchRequest, base_url, '/v0/customers/{customerId}/searchAds360:search', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_ads_searchads360_v0_services_search_search_ads360_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.Searchads360CustomersSearchAds360SearchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Searchads360CustomersSearchAds360SearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleAdsSearchads360V0ServicesSearchSearchAds360Response])
                res.google_ads_searchads360_v0_services_search_search_ads360_response = out

        return res

    def searchads360_customers_search_ads360_search_stream(self, request: operations.Searchads360CustomersSearchAds360SearchStreamRequest, security: operations.Searchads360CustomersSearchAds360SearchStreamSecurity) -> operations.Searchads360CustomersSearchAds360SearchStreamResponse:
        r"""Returns all rows that match the search stream query. List of thrown errors: [AuthenticationError]() [AuthorizationError]() [HeaderError]() [InternalError]() [QueryError]() [QuotaError]() [RequestError]()"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Searchads360CustomersSearchAds360SearchStreamRequest, base_url, '/v0/customers/{customerId}/searchAds360:searchStream', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_ads_searchads360_v0_services_search_search_ads360_stream_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.Searchads360CustomersSearchAds360SearchStreamRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Searchads360CustomersSearchAds360SearchStreamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleAdsSearchads360V0ServicesSearchSearchAds360StreamResponse])
                res.google_ads_searchads360_v0_services_search_search_ads360_stream_response = out

        return res

    