"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticationTypeEnum = void 0;
/**
 * Type of the authentication method.
 *
 * @remarks
 *
 * More authentication types might be added during implementation projects and documented in the ASPSP documentation.
 *
 *   - 'SMS_OTP': An SCA method, where an OTP linked to the transaction to be authorised is sent to the PSU through a SMS channel.
 *   - 'CHIP_OTP': An SCA method, where an OTP is generated by a chip card, e.g. a TOP derived from an EMV cryptogram.
 *     To contact the card, the PSU normally needs a (handheld) device.
 *     With this device, the PSU either reads the challenging data through a visual interface like flickering or
 *     the PSU types in the challenge through the device key pad.
 *     The device then derives an OTP from the challenge data and displays the OTP to the PSU.
 *   - 'PHOTO_OTP': An SCA method, where the challenge is a QR code or similar encoded visual data
 *     which can be read in by a consumer device or specific mobile app.
 *     The device resp. the specific app than derives an OTP from the visual challenge data and displays
 *     the OTP to the PSU.
 *   - 'PUSH_OTP': An OTP is pushed to a dedicated authentication APP and displayed to the PSU.
 *   - 'SMTP_OTP': An OTP is sent via email to the PSU.
 *
 */
var AuthenticationTypeEnum;
(function (AuthenticationTypeEnum) {
    AuthenticationTypeEnum["SmsOtp"] = "SMS_OTP";
    AuthenticationTypeEnum["ChipOtp"] = "CHIP_OTP";
    AuthenticationTypeEnum["PhotoOtp"] = "PHOTO_OTP";
    AuthenticationTypeEnum["PushOtp"] = "PUSH_OTP";
    AuthenticationTypeEnum["SmtpOtp"] = "SMTP_OTP";
})(AuthenticationTypeEnum = exports.AuthenticationTypeEnum || (exports.AuthenticationTypeEnum = {}));
