// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetQueryResultsXAmzTargetEnum
type GetQueryResultsXAmzTargetEnum string

const (
	GetQueryResultsXAmzTargetEnumComAmazonawsCloudtrailV20131101CloudTrail20131101GetQueryResults GetQueryResultsXAmzTargetEnum = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetQueryResults"
)

func (e *GetQueryResultsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetQueryResults":
		*e = GetQueryResultsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetQueryResultsXAmzTargetEnum: %s", s)
	}
}

type GetQueryResultsRequest struct {
	GetQueryResultsRequest shared.GetQueryResultsRequest `request:"mediaType=application/json"`
	// Pagination token
	NextToken         *string                       `queryParam:"style=form,explode=true,name=NextToken"`
	XAmzAlgorithm     *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetQueryResultsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetQueryResultsResponse struct {
	ContentType string
	// EventDataStoreARNInvalidException
	EventDataStoreARNInvalidException interface{}
	// EventDataStoreNotFoundException
	EventDataStoreNotFoundException interface{}
	// Success
	GetQueryResultsResponse *shared.GetQueryResultsResponse
	// InactiveEventDataStoreException
	InactiveEventDataStoreException interface{}
	// InsufficientEncryptionPolicyException
	InsufficientEncryptionPolicyException interface{}
	// InvalidMaxResultsException
	InvalidMaxResultsException interface{}
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// NoManagementAccountSLRExistsException
	NoManagementAccountSLRExistsException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	// QueryIdNotFoundException
	QueryIDNotFoundException interface{}
	StatusCode               int
	RawResponse              *http.Response
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
