// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeleteIpamActionEnum
type GETDeleteIpamActionEnum string

const (
	GETDeleteIpamActionEnumDeleteIpam GETDeleteIpamActionEnum = "DeleteIpam"
)

func (e *GETDeleteIpamActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeleteIpam":
		*e = GETDeleteIpamActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteIpamActionEnum: %s", s)
	}
}

// GETDeleteIpamVersionEnum
type GETDeleteIpamVersionEnum string

const (
	GETDeleteIpamVersionEnumTwoThousandAndSixteen1115 GETDeleteIpamVersionEnum = "2016-11-15"
)

func (e *GETDeleteIpamVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETDeleteIpamVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteIpamVersionEnum: %s", s)
	}
}

type GETDeleteIpamQueryParams struct {
	Action GETDeleteIpamActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>Enables you to quickly delete an IPAM, private scopes, pools in private scopes, and any allocations in the pools in private scopes. You cannot delete the IPAM with this option if there is a pool in your public scope. If you use this option, IPAM does the following:</p> <ul> <li> <p>Deallocates any CIDRs allocated to VPC resources (such as VPCs) in pools in private scopes.</p> <note> <p>No VPC resources are deleted as a result of enabling this option. The CIDR associated with the resource will no longer be allocated from an IPAM pool, but the CIDR itself will remain unchanged.</p> </note> </li> <li> <p>Deprovisions all IPv4 CIDRs provisioned to IPAM pools in private scopes.</p> </li> <li> <p>Deletes all IPAM pools in private scopes.</p> </li> <li> <p>Deletes all non-default private scopes in the IPAM.</p> </li> <li> <p>Deletes the default public and private scopes and the IPAM.</p> </li> </ul>
	Cascade *bool `queryParam:"style=form,explode=true,name=Cascade"`
	// A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the IPAM to delete.
	IpamID  string                   `queryParam:"style=form,explode=true,name=IpamId"`
	Version GETDeleteIpamVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDeleteIpamHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeleteIpamRequest struct {
	QueryParams GETDeleteIpamQueryParams
	Headers     GETDeleteIpamHeaders
}

type GETDeleteIpamResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
