/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * DiaryAppointmentModel - Represents a single diary appointment for a staff member.
 */
public class DiaryAppointmentModel {
    /**
     * The diary appointment type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AppointmentType")
    public String appointmentType;

    public DiaryAppointmentModel withAppointmentType(String appointmentType) {
        this.appointmentType = appointmentType;
        return this;
    }
    
    /**
     * Whether the appointment has been cancelled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Cancelled")
    public Boolean cancelled;

    public DiaryAppointmentModel withCancelled(Boolean cancelled) {
        this.cancelled = cancelled;
        return this;
    }
    
    /**
     * The appointment comments text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Comment")
    public String comment;

    public DiaryAppointmentModel withComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    /**
     * The date/time this appointment was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreatedAt")
    public OffsetDateTime createdAt;

    public DiaryAppointmentModel withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The staff member that created this appointment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreatedBy")
    public String createdBy;

    public DiaryAppointmentModel withCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }
    
    /**
     * A unique identifier defining the object and change revision.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ETag")
    public String eTag;

    public DiaryAppointmentModel withETag(String eTag) {
        this.eTag = eTag;
        return this;
    }
    
    /**
     * The end date/time of this appointment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("End")
    public OffsetDateTime end;

    public DiaryAppointmentModel withEnd(OffsetDateTime end) {
        this.end = end;
        return this;
    }
    
    /**
     * Linked Guest Model:-
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LinkedGuest")
    public LinkedGuestModel[] linkedGuest;

    public DiaryAppointmentModel withLinkedGuest(LinkedGuestModel[] linkedGuest) {
        this.linkedGuest = linkedGuest;
        return this;
    }
    
    /**
     * A collection of properties linked to the appointment:-
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LinkedProperties")
    public LinkedPropertiesModel[] linkedProperties;

    public DiaryAppointmentModel withLinkedProperties(LinkedPropertiesModel[] linkedProperties) {
        this.linkedProperties = linkedProperties;
        return this;
    }
    
    /**
     * Date appointment next repeats:-
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("NextRecurringDate")
    public OffsetDateTime nextRecurringDate;

    public DiaryAppointmentModel withNextRecurringDate(OffsetDateTime nextRecurringDate) {
        this.nextRecurringDate = nextRecurringDate;
        return this;
    }
    
    /**
     * The unique Object ID (OID).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OID")
    public String oid;

    public DiaryAppointmentModel withOid(String oid) {
        this.oid = oid;
        return this;
    }
    
    /**
     * The reccurrence interval for the appointment:-
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Recurrence")
    public Integer recurrence;

    public DiaryAppointmentModel withRecurrence(Integer recurrence) {
        this.recurrence = recurrence;
        return this;
    }
    
    /**
     * The type of recurrence:-
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RecurrenceType")
    public String recurrenceType;

    public DiaryAppointmentModel withRecurrenceType(String recurrenceType) {
        this.recurrenceType = recurrenceType;
        return this;
    }
    
    /**
     * The date/time to remind the staff member of this appointment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("RemindAt")
    public OffsetDateTime remindAt;

    public DiaryAppointmentModel withRemindAt(OffsetDateTime remindAt) {
        this.remindAt = remindAt;
        return this;
    }
    
    /**
     * The number of minutes before the appointment start date/time to remind the staff member. -1 means don't remind.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RemindBefore")
    public DiaryAppointmentModelRemindBeforeEnum remindBefore;

    public DiaryAppointmentModel withRemindBefore(DiaryAppointmentModelRemindBeforeEnum remindBefore) {
        this.remindBefore = remindBefore;
        return this;
    }
    
    /**
     * The staff member holding this appointment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Staff")
    public String staff;

    public DiaryAppointmentModel withStaff(String staff) {
        this.staff = staff;
        return this;
    }
    
    /**
     * The start date/time of this appointment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("Start")
    public OffsetDateTime start;

    public DiaryAppointmentModel withStart(OffsetDateTime start) {
        this.start = start;
        return this;
    }
    
    /**
     * The appointment subject text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Subject")
    public String subject;

    public DiaryAppointmentModel withSubject(String subject) {
        this.subject = subject;
        return this;
    }
    
    public DiaryAppointmentModel(){}
}
