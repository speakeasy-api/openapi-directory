<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Topics 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Bookmark topic
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BookmarkTopicRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BookmarkTopicResponse
     */
	public function bookmarkTopic(
        \OpenAPI\OpenAPI\Models\Operations\BookmarkTopicRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BookmarkTopicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/t/{id}/bookmark.json', \OpenAPI\OpenAPI\Models\Operations\BookmarkTopicRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BookmarkTopicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Creates a new topic, a new post, or a private message
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTopicPostPMRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTopicPostPMResponse
     */
	public function createTopicPostPM(
        \OpenAPI\OpenAPI\Models\Operations\CreateTopicPostPMRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTopicPostPMResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/posts.json');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTopicPostPMResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createTopicPostPM200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateTopicPostPM200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create topic timer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTopicTimerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTopicTimerResponse
     */
	public function createTopicTimer(
        \OpenAPI\OpenAPI\Models\Operations\CreateTopicTimerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTopicTimerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/t/{id}/timer.json', \OpenAPI\OpenAPI\Models\Operations\CreateTopicTimerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTopicTimerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createTopicTimer200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateTopicTimer200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get specific posts from a topic
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpecificPostsFromTopicRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpecificPostsFromTopicResponse
     */
	public function getSpecificPostsFromTopic(
        \OpenAPI\OpenAPI\Models\Operations\GetSpecificPostsFromTopicRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpecificPostsFromTopicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/t/{id}/posts.json', \OpenAPI\OpenAPI\Models\Operations\GetSpecificPostsFromTopicRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpecificPostsFromTopicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpecificPostsFromTopic200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpecificPostsFromTopic200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a single topic
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTopicRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTopicResponse
     */
	public function getTopic(
        \OpenAPI\OpenAPI\Models\Operations\GetTopicRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTopicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/t/{id}.json', \OpenAPI\OpenAPI\Models\Operations\GetTopicRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTopicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTopic200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTopic200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get topic by external_id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTopicByExternalIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTopicByExternalIdResponse
     */
	public function getTopicByExternalId(
        \OpenAPI\OpenAPI\Models\Operations\GetTopicByExternalIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTopicByExternalIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/t/external_id/{external_id}.json', \OpenAPI\OpenAPI\Models\Operations\GetTopicByExternalIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTopicByExternalIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 301) {
        }

        return $response;
    }
	
    /**
     * Invite to topic
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InviteToTopicRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InviteToTopicResponse
     */
	public function inviteToTopic(
        \OpenAPI\OpenAPI\Models\Operations\InviteToTopicRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InviteToTopicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/t/{id}/invite.json', \OpenAPI\OpenAPI\Models\Operations\InviteToTopicRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InviteToTopicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inviteToTopic200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\InviteToTopic200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the latest topics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListLatestTopicsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListLatestTopicsResponse
     */
	public function listLatestTopics(
        \OpenAPI\OpenAPI\Models\Operations\ListLatestTopicsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListLatestTopicsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/latest.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListLatestTopicsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListLatestTopicsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLatestTopics200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListLatestTopics200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the top topics filtered by period
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTopTopicsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTopTopicsResponse
     */
	public function listTopTopics(
        \OpenAPI\OpenAPI\Models\Operations\ListTopTopicsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTopTopicsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/top.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTopTopicsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTopTopicsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTopTopics200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListTopTopics200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a topic
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveTopicRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveTopicResponse
     */
	public function removeTopic(
        \OpenAPI\OpenAPI\Models\Operations\RemoveTopicRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveTopicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/t/{id}.json', \OpenAPI\OpenAPI\Models\Operations\RemoveTopicRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveTopicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Set notification level
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetNotificationLevelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetNotificationLevelResponse
     */
	public function setNotificationLevel(
        \OpenAPI\OpenAPI\Models\Operations\SetNotificationLevelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetNotificationLevelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/t/{id}/notifications.json', \OpenAPI\OpenAPI\Models\Operations\SetNotificationLevelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetNotificationLevelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->setNotificationLevel200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SetNotificationLevel200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a topic
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTopicRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTopicResponse
     */
	public function updateTopic(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTopicRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTopicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/t/-/{id}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateTopicRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTopicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateTopic200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateTopic200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the status of a topic
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTopicStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTopicStatusResponse
     */
	public function updateTopicStatus(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTopicStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTopicStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/t/{id}/status.json', \OpenAPI\OpenAPI\Models\Operations\UpdateTopicStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTopicStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateTopicStatus200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateTopicStatus200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update topic timestamp
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTopicTimestampRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTopicTimestampResponse
     */
	public function updateTopicTimestamp(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTopicTimestampRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTopicTimestampResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/t/{id}/change-timestamp.json', \OpenAPI\OpenAPI\Models\Operations\UpdateTopicTimestampRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTopicTimestampResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateTopicTimestamp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateTopicTimestamp200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}