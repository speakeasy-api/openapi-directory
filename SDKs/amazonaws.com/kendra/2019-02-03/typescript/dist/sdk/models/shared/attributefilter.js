"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributeFilter = void 0;
var utils_1 = require("../../../internal/utils");
var documentattribute_1 = require("./documentattribute");
var class_transformer_1 = require("class-transformer");
/**
 * <p>Provides filtering the query results based on document attributes or metadata fields.</p> <p>When you use the <code>AndAllFilters</code> or <code>OrAllFilters</code>, filters you can use 2 layers under the first attribute filter. For example, you can use:</p> <p> <code>&lt;AndAllFilters&gt;</code> </p> <ol> <li> <p> <code> &lt;OrAllFilters&gt;</code> </p> </li> <li> <p> <code> &lt;EqualsTo&gt;</code> </p> </li> </ol> <p>If you use more than 2 layers, you receive a <code>ValidationException</code> exception with the message "<code>AttributeFilter</code> cannot have a depth of more than 2."</p> <p>If you use more than 10 attribute filters in a given list for <code>AndAllFilters</code> or <code>OrAllFilters</code>, you receive a <code>ValidationException</code> with the message "<code>AttributeFilter</code> cannot have a length of more than 10".</p>
 */
var AttributeFilter = /** @class */ (function (_super) {
    __extends(AttributeFilter, _super);
    function AttributeFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: AttributeFilter }),
        (0, class_transformer_1.Expose)({ name: "AndAllFilters" }),
        (0, class_transformer_1.Type)(function () { return AttributeFilter; }),
        __metadata("design:type", Array)
    ], AttributeFilter.prototype, "andAllFilters", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ContainsAll" }),
        (0, class_transformer_1.Type)(function () { return documentattribute_1.DocumentAttribute; }),
        __metadata("design:type", documentattribute_1.DocumentAttribute)
    ], AttributeFilter.prototype, "containsAll", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ContainsAny" }),
        (0, class_transformer_1.Type)(function () { return documentattribute_1.DocumentAttribute; }),
        __metadata("design:type", documentattribute_1.DocumentAttribute)
    ], AttributeFilter.prototype, "containsAny", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "EqualsTo" }),
        (0, class_transformer_1.Type)(function () { return documentattribute_1.DocumentAttribute; }),
        __metadata("design:type", documentattribute_1.DocumentAttribute)
    ], AttributeFilter.prototype, "equalsTo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "GreaterThan" }),
        (0, class_transformer_1.Type)(function () { return documentattribute_1.DocumentAttribute; }),
        __metadata("design:type", documentattribute_1.DocumentAttribute)
    ], AttributeFilter.prototype, "greaterThan", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "GreaterThanOrEquals" }),
        (0, class_transformer_1.Type)(function () { return documentattribute_1.DocumentAttribute; }),
        __metadata("design:type", documentattribute_1.DocumentAttribute)
    ], AttributeFilter.prototype, "greaterThanOrEquals", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "LessThan" }),
        (0, class_transformer_1.Type)(function () { return documentattribute_1.DocumentAttribute; }),
        __metadata("design:type", documentattribute_1.DocumentAttribute)
    ], AttributeFilter.prototype, "lessThan", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "LessThanOrEquals" }),
        (0, class_transformer_1.Type)(function () { return documentattribute_1.DocumentAttribute; }),
        __metadata("design:type", documentattribute_1.DocumentAttribute)
    ], AttributeFilter.prototype, "lessThanOrEquals", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "NotFilter" }),
        (0, class_transformer_1.Type)(function () { return AttributeFilter; }),
        __metadata("design:type", AttributeFilter)
    ], AttributeFilter.prototype, "notFilter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: AttributeFilter }),
        (0, class_transformer_1.Expose)({ name: "OrAllFilters" }),
        (0, class_transformer_1.Type)(function () { return AttributeFilter; }),
        __metadata("design:type", Array)
    ], AttributeFilter.prototype, "orAllFilters", void 0);
    return AttributeFilter;
}(utils_1.SpeakeasyBase));
exports.AttributeFilter = AttributeFilter;
