/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetMeTracksSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
  })
  authHeader: string;
}

export class GetMeTracksRequest extends SpeakeasyBase {
  /**
   * Number of results to return in the collection.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=linked_partitioning",
  })
  linkedPartitioning?: boolean;
}

export class GetMeTracksResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  getMeTracks200ApplicationJSONOneOf?: any;
}
