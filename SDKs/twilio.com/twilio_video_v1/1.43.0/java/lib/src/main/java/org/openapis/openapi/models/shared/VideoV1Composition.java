/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * VideoV1Composition - Created
 */
public class VideoV1Composition {
    /**
     * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Composition resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_sid")
    public String accountSid;

    public VideoV1Composition withAccountSid(String accountSid) {
        this.accountSid = accountSid;
        return this;
    }
    
    /**
     * The array of track names to include in the composition. The composition includes all audio sources specified in `audio_sources` except those specified in `audio_sources_excluded`. The track names in this property can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` includes tracks named `student` as well as `studentTeam`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio_sources")
    public String[] audioSources;

    public VideoV1Composition withAudioSources(String[] audioSources) {
        this.audioSources = audioSources;
        return this;
    }
    
    /**
     * The array of track names to exclude from the composition. The composition includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this property can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio_sources_excluded")
    public String[] audioSourcesExcluded;

    public VideoV1Composition withAudioSourcesExcluded(String[] audioSourcesExcluded) {
        this.audioSourcesExcluded = audioSourcesExcluded;
        return this;
    }
    
    /**
     * The average bit rate of the composition's media.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bitrate")
    public Long bitrate;

    public VideoV1Composition withBitrate(Long bitrate) {
        this.bitrate = bitrate;
        return this;
    }
    
    /**
     * The date and time in GMT when the composition's media processing task finished, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_completed")
    public OffsetDateTime dateCompleted;

    public VideoV1Composition withDateCompleted(OffsetDateTime dateCompleted) {
        this.dateCompleted = dateCompleted;
        return this;
    }
    
    /**
     * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_created")
    public OffsetDateTime dateCreated;

    public VideoV1Composition withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * The date and time in GMT when the composition generated media was deleted, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_deleted")
    public OffsetDateTime dateDeleted;

    public VideoV1Composition withDateDeleted(OffsetDateTime dateDeleted) {
        this.dateDeleted = dateDeleted;
        return this;
    }
    
    /**
     * The duration of the composition's media file in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Long duration;

    public VideoV1Composition withDuration(Long duration) {
        this.duration = duration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    public CompositionEnumFormatEnum format;

    public VideoV1Composition withFormat(CompositionEnumFormatEnum format) {
        this.format = format;
        return this;
    }
    
    /**
     * The URL of the media file associated with the composition.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    public java.util.Map<String, Object> links;

    public VideoV1Composition withLinks(java.util.Map<String, Object> links) {
        this.links = links;
        return this;
    }
    
    /**
     * The URL of the media file associated with the composition when stored externally. See [External S3 Compositions](/docs/video/api/external-s3-compositions) for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("media_external_location")
    public String mediaExternalLocation;

    public VideoV1Composition withMediaExternalLocation(String mediaExternalLocation) {
        this.mediaExternalLocation = mediaExternalLocation;
        return this;
    }
    
    /**
     * The dimensions of the video image in pixels expressed as columns (width) and rows (height). The string's format is `{width}x{height}`, such as `640x480`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resolution")
    public String resolution;

    public VideoV1Composition withResolution(String resolution) {
        this.resolution = resolution;
        return this;
    }
    
    /**
     * The SID of the Group Room that generated the audio and video tracks used in the composition. All media sources included in a composition must belong to the same Group Room.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("room_sid")
    public String roomSid;

    public VideoV1Composition withRoomSid(String roomSid) {
        this.roomSid = roomSid;
        return this;
    }
    
    /**
     * The unique string that we created to identify the Composition resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sid")
    public String sid;

    public VideoV1Composition withSid(String sid) {
        this.sid = sid;
        return this;
    }
    
    /**
     * The size of the composed media file in bytes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Long size;

    public VideoV1Composition withSize(Long size) {
        this.size = size;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public CompositionEnumStatusEnum status;

    public VideoV1Composition withStatus(CompositionEnumStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The URL called using the `status_callback_method` to send status information on every composition event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status_callback")
    public String statusCallback;

    public VideoV1Composition withStatusCallback(String statusCallback) {
        this.statusCallback = statusCallback;
        return this;
    }
    
    /**
     * The HTTP method used to call `status_callback`. Can be: `POST` or `GET`, defaults to `POST`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status_callback_method")
    public VideoV1CompositionStatusCallbackMethodEnum statusCallbackMethod;

    public VideoV1Composition withStatusCallbackMethod(VideoV1CompositionStatusCallbackMethodEnum statusCallbackMethod) {
        this.statusCallbackMethod = statusCallbackMethod;
        return this;
    }
    
    /**
     * Whether to remove intervals with no media, as specified in the POST request that created the composition. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trim")
    public Boolean trim;

    public VideoV1Composition withTrim(Boolean trim) {
        this.trim = trim;
        return this;
    }
    
    /**
     * The absolute URL of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public VideoV1Composition withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * An object that describes the video layout of the composition in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("video_layout")
    public Object videoLayout;

    public VideoV1Composition withVideoLayout(Object videoLayout) {
        this.videoLayout = videoLayout;
        return this;
    }
    
    public VideoV1Composition(){}
}
