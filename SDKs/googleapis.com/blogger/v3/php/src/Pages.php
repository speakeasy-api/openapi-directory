<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Pages 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes a page by blog id and page id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerPagesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerPagesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BloggerPagesDeleteResponse
     */
	public function bloggerPagesDelete(
        \OpenAPI\OpenAPI\Models\Operations\BloggerPagesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BloggerPagesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BloggerPagesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/blogs/{blogId}/pages/{pageId}', \OpenAPI\OpenAPI\Models\Operations\BloggerPagesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BloggerPagesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BloggerPagesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a page by blog id and page id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerPagesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerPagesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BloggerPagesGetResponse
     */
	public function bloggerPagesGet(
        \OpenAPI\OpenAPI\Models\Operations\BloggerPagesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BloggerPagesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BloggerPagesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/blogs/{blogId}/pages/{pageId}', \OpenAPI\OpenAPI\Models\Operations\BloggerPagesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BloggerPagesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BloggerPagesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->page = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Page', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a page.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerPagesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerPagesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BloggerPagesInsertResponse
     */
	public function bloggerPagesInsert(
        \OpenAPI\OpenAPI\Models\Operations\BloggerPagesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BloggerPagesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BloggerPagesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/blogs/{blogId}/pages', \OpenAPI\OpenAPI\Models\Operations\BloggerPagesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "page", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BloggerPagesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BloggerPagesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->page = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Page', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists pages.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerPagesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerPagesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BloggerPagesListResponse
     */
	public function bloggerPagesList(
        \OpenAPI\OpenAPI\Models\Operations\BloggerPagesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BloggerPagesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BloggerPagesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/blogs/{blogId}/pages', \OpenAPI\OpenAPI\Models\Operations\BloggerPagesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BloggerPagesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BloggerPagesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pageList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PageList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches a page.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerPagesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerPagesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BloggerPagesPatchResponse
     */
	public function bloggerPagesPatch(
        \OpenAPI\OpenAPI\Models\Operations\BloggerPagesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BloggerPagesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BloggerPagesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/blogs/{blogId}/pages/{pageId}', \OpenAPI\OpenAPI\Models\Operations\BloggerPagesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "page", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BloggerPagesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BloggerPagesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->page = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Page', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Publishes a page.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerPagesPublishRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerPagesPublishSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BloggerPagesPublishResponse
     */
	public function bloggerPagesPublish(
        \OpenAPI\OpenAPI\Models\Operations\BloggerPagesPublishRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BloggerPagesPublishSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BloggerPagesPublishResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/blogs/{blogId}/pages/{pageId}/publish', \OpenAPI\OpenAPI\Models\Operations\BloggerPagesPublishRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BloggerPagesPublishRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BloggerPagesPublishResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->page = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Page', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reverts a published or scheduled page to draft state.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerPagesRevertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerPagesRevertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BloggerPagesRevertResponse
     */
	public function bloggerPagesRevert(
        \OpenAPI\OpenAPI\Models\Operations\BloggerPagesRevertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BloggerPagesRevertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BloggerPagesRevertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/blogs/{blogId}/pages/{pageId}/revert', \OpenAPI\OpenAPI\Models\Operations\BloggerPagesRevertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BloggerPagesRevertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BloggerPagesRevertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->page = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Page', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a page by blog id and page id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerPagesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BloggerPagesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BloggerPagesUpdateResponse
     */
	public function bloggerPagesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\BloggerPagesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BloggerPagesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BloggerPagesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/blogs/{blogId}/pages/{pageId}', \OpenAPI\OpenAPI\Models\Operations\BloggerPagesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "page", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BloggerPagesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BloggerPagesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->page = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Page', 'json');
            }
        }

        return $response;
    }
}