/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Metadata for global schema behavior.
 */
export class GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata extends SpeakeasyBase {
  /**
   * If true, on a given page, there can be multiple `document` annotations covering it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "documentAllowMultipleLabels" })
  documentAllowMultipleLabels?: boolean;

  /**
   * If true, a `document` entity type can be applied to subdocument ( splitting). Otherwise, it can only be applied to the entire document (classification).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "documentSplitter" })
  documentSplitter?: boolean;

  /**
   * If set, all the nested entities must be prefixed with the parents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "prefixedNamingOnProperties" })
  prefixedNamingOnProperties?: boolean;

  /**
   * If set, we will skip the naming format validation in the schema. So the string values in `DocumentSchema.EntityType.name` and `DocumentSchema.EntityType.Property.name` will not be checked.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "skipNamingValidation" })
  skipNamingValidation?: boolean;
}
