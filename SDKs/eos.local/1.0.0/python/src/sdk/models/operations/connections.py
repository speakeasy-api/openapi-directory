"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Connections200ApplicationJSONLastHandshake:
    r"""Structure holding detailed information about the connection"""
    
    agent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agent'), 'exclude': lambda f: f is None }})
    r"""Agent name"""  
    chain_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chain_id'), 'exclude': lambda f: f is None }})  
    generation: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generation'), 'exclude': lambda f: f is None }})
    r"""Generation number"""  
    head_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('head_id'), 'exclude': lambda f: f is None }})  
    head_num: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('head_num'), 'exclude': lambda f: f is None }})
    r"""Head number"""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""Base58 encoded EOSIO public key"""  
    last_irreversible_block_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_irreversible_block_id'), 'exclude': lambda f: f is None }})  
    last_irreversible_block_num: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_irreversible_block_num'), 'exclude': lambda f: f is None }})
    r"""Last irreversible block number"""  
    network_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network_version'), 'exclude': lambda f: f is None }})
    r"""Incremental value above a computed base"""  
    node_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id'), 'exclude': lambda f: f is None }})  
    os: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os'), 'exclude': lambda f: f is None }})
    r"""Operating system name"""  
    p2p_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('p2p_address'), 'exclude': lambda f: f is None }})
    r"""IP address or URL of the peer"""  
    sig: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sig'), 'exclude': lambda f: f is None }})
    r"""Base58 encoded EOSIO cryptographic signature"""  
    time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""Date/time string in the format YYYY-MM-DDTHH:MM:SS.sss"""  
    token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Connections200ApplicationJSON:
    
    connecting: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connecting'), 'exclude': lambda f: f is None }})
    r"""True if the peer is connecting, otherwise false"""  
    last_handshake: Optional[Connections200ApplicationJSONLastHandshake] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_handshake'), 'exclude': lambda f: f is None }})
    r"""Structure holding detailed information about the connection"""  
    peer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('peer'), 'exclude': lambda f: f is None }})
    r"""The IP address or URL of the peer"""  
    syncing: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syncing'), 'exclude': lambda f: f is None }})
    r"""True if the peer is syncing, otherwise false"""  
    

@dataclasses.dataclass
class ConnectionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    connections_200_application_json_objects: Optional[list[Connections200ApplicationJSON]] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    