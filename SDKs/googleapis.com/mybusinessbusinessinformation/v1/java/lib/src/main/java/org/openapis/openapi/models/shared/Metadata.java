/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Metadata - Additional non-user-editable information about the location.
 */
public class Metadata {
    /**
     * Output only. Indicates whether the location can be deleted using the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canDelete")
    public Boolean canDelete;

    public Metadata withCanDelete(Boolean canDelete) {
        this.canDelete = canDelete;
        return this;
    }
    
    /**
     * Output only. Indicates if the listing is eligible for business calls.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canHaveBusinessCalls")
    public Boolean canHaveBusinessCalls;

    public Metadata withCanHaveBusinessCalls(Boolean canHaveBusinessCalls) {
        this.canHaveBusinessCalls = canHaveBusinessCalls;
        return this;
    }
    
    /**
     * Output only. Indicates if the listing is eligible for food menu.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canHaveFoodMenus")
    public Boolean canHaveFoodMenus;

    public Metadata withCanHaveFoodMenus(Boolean canHaveFoodMenus) {
        this.canHaveFoodMenus = canHaveFoodMenus;
        return this;
    }
    
    /**
     * Output only. Indicates if the listing can modify the service list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canModifyServiceList")
    public Boolean canModifyServiceList;

    public Metadata withCanModifyServiceList(Boolean canModifyServiceList) {
        this.canModifyServiceList = canModifyServiceList;
        return this;
    }
    
    /**
     * Output only. Indicates whether the location can operate on Health data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canOperateHealthData")
    public Boolean canOperateHealthData;

    public Metadata withCanOperateHealthData(Boolean canOperateHealthData) {
        this.canOperateHealthData = canOperateHealthData;
        return this;
    }
    
    /**
     * Output only. Indicates if the listing can manage local posts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canOperateLocalPost")
    public Boolean canOperateLocalPost;

    public Metadata withCanOperateLocalPost(Boolean canOperateLocalPost) {
        this.canOperateLocalPost = canOperateLocalPost;
        return this;
    }
    
    /**
     * Output only. Indicates whether the location can operate on Lodging data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canOperateLodgingData")
    public Boolean canOperateLodgingData;

    public Metadata withCanOperateLodgingData(Boolean canOperateLodgingData) {
        this.canOperateLodgingData = canOperateLodgingData;
        return this;
    }
    
    /**
     * Output only. The location resource that this location duplicates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duplicateLocation")
    public String duplicateLocation;

    public Metadata withDuplicateLocation(String duplicateLocation) {
        this.duplicateLocation = duplicateLocation;
        return this;
    }
    
    /**
     * Output only. Indicates whether the place ID associated with this location has updates that need to be updated or rejected by the client. If this boolean is set, you should call the `getGoogleUpdated` method to lookup information that's needs to be verified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasGoogleUpdated")
    public Boolean hasGoogleUpdated;

    public Metadata withHasGoogleUpdated(Boolean hasGoogleUpdated) {
        this.hasGoogleUpdated = hasGoogleUpdated;
        return this;
    }
    
    /**
     * Output only. Indicates whether any of this Location's properties are in the edit pending state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasPendingEdits")
    public Boolean hasPendingEdits;

    public Metadata withHasPendingEdits(Boolean hasPendingEdits) {
        this.hasPendingEdits = hasPendingEdits;
        return this;
    }
    
    /**
     * Output only. Indicates if the listing has Voice of Merchant. If this boolean is false, you should call the locations.getVoiceOfMerchantState API to get details as to why they do not have Voice of Merchant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasVoiceOfMerchant")
    public Boolean hasVoiceOfMerchant;

    public Metadata withHasVoiceOfMerchant(Boolean hasVoiceOfMerchant) {
        this.hasVoiceOfMerchant = hasVoiceOfMerchant;
        return this;
    }
    
    /**
     * Output only. A link to the location on Maps.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mapsUri")
    public String mapsUri;

    public Metadata withMapsUri(String mapsUri) {
        this.mapsUri = mapsUri;
        return this;
    }
    
    /**
     * Output only. A link to the page on Google Search where a customer can leave a review for the location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newReviewUri")
    public String newReviewUri;

    public Metadata withNewReviewUri(String newReviewUri) {
        this.newReviewUri = newReviewUri;
        return this;
    }
    
    /**
     * Output only. If this locationappears on Google Maps, this field is populated with the place ID for the location. This ID can be used in various Places APIs. This field can be set during Create calls, but not for Update.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("placeId")
    public String placeId;

    public Metadata withPlaceId(String placeId) {
        this.placeId = placeId;
        return this;
    }
    
    public Metadata(){}
}
