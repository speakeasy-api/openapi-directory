// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AddTagsToCertificateXAmzTargetEnum
type AddTagsToCertificateXAmzTargetEnum string

const (
	AddTagsToCertificateXAmzTargetEnumCertificateManagerAddTagsToCertificate AddTagsToCertificateXAmzTargetEnum = "CertificateManager.AddTagsToCertificate"
)

func (e *AddTagsToCertificateXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CertificateManager.AddTagsToCertificate":
		*e = AddTagsToCertificateXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddTagsToCertificateXAmzTargetEnum: %s", s)
	}
}

type AddTagsToCertificateRequest struct {
	AddTagsToCertificateRequest shared.AddTagsToCertificateRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  AddTagsToCertificateXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AddTagsToCertificateResponse struct {
	ContentType string
	// InvalidArnException
	InvalidArnException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidTagException
	InvalidTagException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// TagPolicyException
	TagPolicyException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// TooManyTagsException
	TooManyTagsException interface{}
}
