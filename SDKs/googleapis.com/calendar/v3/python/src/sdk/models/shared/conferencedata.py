"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import conferenceparameters as shared_conferenceparameters
from ..shared import conferencesolution as shared_conferencesolution
from ..shared import createconferencerequest as shared_createconferencerequest
from ..shared import entrypoint as shared_entrypoint
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConferenceData:
    
    conference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conferenceId'), 'exclude': lambda f: f is None }})
    r"""The ID of the conference.
    Can be used by developers to keep track of conferences, should not be displayed to users.
    The ID value is formed differently for each conference solution type:  
    - eventHangout: ID is not set. (This conference type is deprecated.)
    - eventNamedHangout: ID is the name of the Hangout. (This conference type is deprecated.)
    - hangoutsMeet: ID is the 10-letter meeting code, for example aaa-bbbb-ccc.
    - addOn: ID is defined by the third-party provider.  Optional.
    """  
    conference_solution: Optional[shared_conferencesolution.ConferenceSolution] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conferenceSolution'), 'exclude': lambda f: f is None }})  
    create_request: Optional[shared_createconferencerequest.CreateConferenceRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createRequest'), 'exclude': lambda f: f is None }})  
    entry_points: Optional[list[shared_entrypoint.EntryPoint]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entryPoints'), 'exclude': lambda f: f is None }})
    r"""Information about individual conference entry points, such as URLs or phone numbers.
    All of them must belong to the same conference.
    Either conferenceSolution and at least one entryPoint, or createRequest is required.
    """  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Additional notes (such as instructions from the domain administrator, legal notices) to display to the user. Can contain HTML. The maximum length is 2048 characters. Optional."""  
    parameters: Optional[shared_conferenceparameters.ConferenceParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})  
    signature: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signature'), 'exclude': lambda f: f is None }})
    r"""The signature of the conference data.
    Generated on server side.
    Unset for a conference with a failed create request.
    Optional for a conference with a pending create request.
    """  
    