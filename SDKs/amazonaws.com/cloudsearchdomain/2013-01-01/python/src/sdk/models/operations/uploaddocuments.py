"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import documentserviceexception as shared_documentserviceexception
from ..shared import uploaddocumentsresponse as shared_uploaddocumentsresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UploadDocumentsContentTypeEnum(str, Enum):
    r"""<p>The format of the batch you are uploading. Amazon CloudSearch supports two document batch formats:</p> <ul> <li>application/json</li> <li>application/xml</li> </ul>"""
    APPLICATION_JSON = 'application/json'
    APPLICATION_XML = 'application/xml'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UploadDocumentsRequestBody:
    
    documents: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documents') }})
    r"""A batch of documents formatted in JSON or HTML."""  
    
class UploadDocumentsFormatEnum(str, Enum):
    SDK = 'sdk'


@dataclasses.dataclass
class UploadDocumentsRequest:
    
    content_type: UploadDocumentsContentTypeEnum = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""<p>The format of the batch you are uploading. Amazon CloudSearch supports two document batch formats:</p> <ul> <li>application/json</li> <li>application/xml</li> </ul>"""  
    format: UploadDocumentsFormatEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'format', 'style': 'form', 'explode': True }})  
    request_body: UploadDocumentsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UploadDocumentsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    document_service_exception: Optional[shared_documentserviceexception.DocumentServiceException] = dataclasses.field(default=None)
    r"""DocumentServiceException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    upload_documents_response: Optional[shared_uploaddocumentsresponse.UploadDocumentsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    