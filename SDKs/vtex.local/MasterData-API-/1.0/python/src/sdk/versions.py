"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Versions:
    r"""Master Data documents are versioned. This means that for each change a new version is generated. The `versions` APIs allows to query the versions and also apply the state of a document to the most current version."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def getversion(self, request: operations.GetversionRequest) -> operations.GetversionResponse:
        r"""Get version
        Returns the version of a document.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetversionRequest, base_url, '/api/dataentities/{acronym}/documents/{id}/versions/{versionId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetversionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Getversion])
                res.getversion = out

        return res

    def listversions(self, request: operations.ListversionsRequest) -> operations.ListversionsResponse:
        r"""List versions
        Allows to list the versions of a document.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListversionsRequest, base_url, '/api/dataentities/{acronym}/documents/{id}/versions', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListversionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Listversion]])
                res.listversions = out

        return res

    def putversion(self, request: operations.PutversionRequest) -> operations.PutversionResponse:
        r"""Put version
        Updates document with version values.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutversionRequest, base_url, '/api/dataentities/{acronym}/documents/{id}/versions/{versionId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutversionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Putversion])
                res.putversion = out

        return res

    