"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SubjectKindEnum(str, Enum):
    r"""Authentication type for subject."""
    AUTH_TYPE_UNSPECIFIED = 'AUTH_TYPE_UNSPECIFIED'
    USER = 'USER'
    SERVICEACCOUNT = 'SERVICEACCOUNT'
    GROUP = 'GROUP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Subject:
    r"""Represents a Kubernetes Subject."""
    
    kind: Optional[SubjectKindEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Authentication type for subject."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name for subject."""  
    ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ns'), 'exclude': lambda f: f is None }})
    r"""Namespace for subject."""  
    