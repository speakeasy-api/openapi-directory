/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Stats Web Service
 */
export class Statistics {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Count of active objects by type, for specified species and date
   */
  getActiveObjectCountUsingGET(
    req: operations.GETActiveObjectCountUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETActiveObjectCountUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETActiveObjectCountUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/count/activeObject/{speciesTypeKey}/{dateYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETActiveObjectCountUsingGETResponse =
        new operations.GETActiveObjectCountUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count difference of active objects, by type, for specified species and date range
   */
  getActiveObjectDiffUsingGET(
    req: operations.GETActiveObjectDiffUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETActiveObjectDiffUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETActiveObjectDiffUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/diff/activeObject/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETActiveObjectDiffUsingGETResponse =
        new operations.GETActiveObjectDiffUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count of gene types, for specified species and date
   */
  getGeneTypeCountUsingGET(
    req: operations.GETGeneTypeCountUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETGeneTypeCountUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETGeneTypeCountUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/count/geneType/{speciesTypeKey}/{dateYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETGeneTypeCountUsingGETResponse =
        new operations.GETGeneTypeCountUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count difference of gene types, for specified species and date range
   */
  getGeneTypeDiffUsingGET(
    req: operations.GETGeneTypeDiffUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETGeneTypeDiffUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETGeneTypeDiffUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/diff/geneType/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETGeneTypeDiffUsingGETResponse =
        new operations.GETGeneTypeDiffUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count of objects with given status, for specified species and date
   */
  getObjectStatusCountUsingGET(
    req: operations.GETObjectStatusCountUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETObjectStatusCountUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETObjectStatusCountUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/count/objectStatus/{speciesTypeKey}/{dateYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETObjectStatusCountUsingGETResponse =
        new operations.GETObjectStatusCountUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count difference of objects with given status, for specified species and date range
   */
  getObjectStatusDiffUsingGET(
    req: operations.GETObjectStatusDiffUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETObjectStatusDiffUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETObjectStatusDiffUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/diff/objectStatus/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETObjectStatusDiffUsingGETResponse =
        new operations.GETObjectStatusDiffUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count of objects with reference sequence(s), by object type, for specified species and date
   */
  getObjectsWithRefSeqCountUsingGET(
    req: operations.GETObjectsWithRefSeqCountUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETObjectsWithRefSeqCountUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETObjectsWithRefSeqCountUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/count/objectWithRefSeq/{speciesTypeKey}/{dateYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETObjectsWithRefSeqCountUsingGETResponse =
        new operations.GETObjectsWithRefSeqCountUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count difference of objects with reference sequence(s), by object type, for specified species and date range
   */
  getObjectsWithRefSeqDiffUsingGET(
    req: operations.GETObjectsWithRefSeqDiffUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETObjectsWithRefSeqDiffUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETObjectsWithRefSeqDiffUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/diff/objectWithRefSeq/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETObjectsWithRefSeqDiffUsingGETResponse =
        new operations.GETObjectsWithRefSeqDiffUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count of objects with reference, by object type, for specified species and date
   */
  getObjectsWithReferenceCountUsingGET(
    req: operations.GETObjectsWithReferenceCountUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETObjectsWithReferenceCountUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETObjectsWithReferenceCountUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/count/objectWithReference/{speciesTypeKey}/{dateYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETObjectsWithReferenceCountUsingGETResponse =
        new operations.GETObjectsWithReferenceCountUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count difference of objects with reference, by object type, for specified species and date range
   */
  getObjectsWithReferenceDiffUsingGET(
    req: operations.GETObjectsWithReferenceDiffUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETObjectsWithReferenceDiffUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETObjectsWithReferenceDiffUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/diff/objectWithReference/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETObjectsWithReferenceDiffUsingGETResponse =
        new operations.GETObjectsWithReferenceDiffUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count of objects with external database ids, by database id, for specified species, object type and date
   */
  getObjectsWithXDBsCountUsingGET(
    req: operations.GETObjectsWithXDBsCountUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETObjectsWithXDBsCountUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETObjectsWithXDBsCountUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/count/objectWithXdb/{speciesTypeKey}/{objectKey}/{dateYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETObjectsWithXDBsCountUsingGETResponse =
        new operations.GETObjectsWithXDBsCountUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count difference of objects with external database ids, by database id, for specified species, object type and date range
   */
  getObjectsWithXDBsDiffUsingGET(
    req: operations.GETObjectsWithXDBsDiffUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETObjectsWithXDBsDiffUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETObjectsWithXDBsDiffUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/diff/objectWithXdb/{speciesTypeKey}/{objectKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETObjectsWithXDBsDiffUsingGETResponse =
        new operations.GETObjectsWithXDBsDiffUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count of protein interactions, for specified species and date
   */
  getProteinInteractionCountUsingGET(
    req: operations.GETProteinInteractionCountUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETProteinInteractionCountUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETProteinInteractionCountUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/count/proteinInteraction/{speciesTypeKey}/{dateYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETProteinInteractionCountUsingGETResponse =
        new operations.GETProteinInteractionCountUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count difference of protein interactions, for specified species and date range
   */
  getProteinInteractionDiffUsingGET(
    req: operations.GETProteinInteractionDiffUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETProteinInteractionDiffUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETProteinInteractionDiffUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/diff/proteinInteraction/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETProteinInteractionDiffUsingGETResponse =
        new operations.GETProteinInteractionDiffUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count of strains, by qtl inheritance type, for specified species and date
   */
  getQtlInheritanceTypeCountUsingGET(
    req: operations.GETQtlInheritanceTypeCountUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETQtlInheritanceTypeCountUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETQtlInheritanceTypeCountUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/count/qtlInheritanceType/{speciesTypeKey}/{dateYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETQtlInheritanceTypeCountUsingGETResponse =
        new operations.GETQtlInheritanceTypeCountUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count difference of strains, by qtl inheritance type, for specified species and date range
   */
  getQtlInheritanceTypeDiffUsingGET(
    req: operations.GETQtlInheritanceTypeDiffUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETQtlInheritanceTypeDiffUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETQtlInheritanceTypeDiffUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/diff/qtlInheritanceType/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETQtlInheritanceTypeDiffUsingGETResponse =
        new operations.GETQtlInheritanceTypeDiffUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count of retired objects by type, for specified species and date
   */
  getRetiredObjectCountUsingGET(
    req: operations.GETRetiredObjectCountUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETRetiredObjectCountUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETRetiredObjectCountUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/count/retiredObject/{speciesTypeKey}/{dateYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETRetiredObjectCountUsingGETResponse =
        new operations.GETRetiredObjectCountUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count difference of retired objects, by type, for specified species and date range
   */
  getRetiredObjectDiffUsingGET(
    req: operations.GETRetiredObjectDiffUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETRetiredObjectDiffUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETRetiredObjectDiffUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/diff/retiredObject/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETRetiredObjectDiffUsingGETResponse =
        new operations.GETRetiredObjectDiffUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count of strain types, for specified species and date
   */
  getStrainTypeCountUsingGET(
    req: operations.GETStrainTypeCountUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETStrainTypeCountUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETStrainTypeCountUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/count/strainType/{speciesTypeKey}/{dateYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETStrainTypeCountUsingGETResponse =
        new operations.GETStrainTypeCountUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count difference of strain types, for specified species and date range
   */
  getStrainTypeDiffUsingGET(
    req: operations.GETStrainTypeDiffUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETStrainTypeDiffUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETStrainTypeDiffUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/diff/strainType/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETStrainTypeDiffUsingGETResponse =
        new operations.GETStrainTypeDiffUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * getTermStats
   */
  getTermStatsUsingGET(
    req: operations.GETTermStatsUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETTermStatsUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETTermStatsUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/term/{accId}/{filterAccId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETTermStatsUsingGETResponse =
        new operations.GETTermStatsUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count of withdrawn objects by type, for specified species and date
   */
  getWithdrawnObjectCountUsingGET(
    req: operations.GETWithdrawnObjectCountUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETWithdrawnObjectCountUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETWithdrawnObjectCountUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/count/withdrawnObject/{speciesTypeKey}/{dateYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETWithdrawnObjectCountUsingGETResponse =
        new operations.GETWithdrawnObjectCountUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count difference of withdrawn objects, by type, for specified species and date range
   */
  getWithdrawnObjectDiffUsingGET(
    req: operations.GETWithdrawnObjectDiffUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETWithdrawnObjectDiffUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETWithdrawnObjectDiffUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/diff/withdrawnObject/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETWithdrawnObjectDiffUsingGETResponse =
        new operations.GETWithdrawnObjectDiffUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count of external database ids, for specied species and date
   */
  getXdbsCountUsingGET(
    req: operations.GETXdbsCountUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETXdbsCountUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETXdbsCountUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/count/xdb/{speciesTypeKey}/{dateYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETXdbsCountUsingGETResponse =
        new operations.GETXdbsCountUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count difference of external database ids, for specified species and date range
   */
  getXdbsDiffUsingGET(
    req: operations.GETXdbsDiffUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETXdbsDiffUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETXdbsDiffUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/stats/diff/xdb/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETXdbsDiffUsingGETResponse =
        new operations.GETXdbsDiffUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
