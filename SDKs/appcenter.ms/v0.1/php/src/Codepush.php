<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Codepush 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns the acquisition service status to the caller
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionGetAcquisitionStatusResponse
     */
	public function codePushAcquisitionGetAcquisitionStatus(
    ): \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionGetAcquisitionStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/public/codepush/status');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionGetAcquisitionStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushAcquisitionGetAcquisitionStatus200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionGetAcquisitionStatus200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushAcquisitionGetAcquisitionStatusDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionGetAcquisitionStatusDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check for updates
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateCheckRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateCheckResponse
     */
	public function codePushAcquisitionUpdateCheck(
        \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateCheckRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateCheckResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/public/codepush/update_check');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateCheckRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateCheckResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushAcquisitionUpdateCheck200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateCheck200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushAcquisitionUpdateCheckDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateCheckDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Report Deployment status metric
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateDeployStatusRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateDeployStatusResponse
     */
	public function codePushAcquisitionUpdateDeployStatus(
        \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateDeployStatusRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateDeployStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/public/codepush/report_status/deploy');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateDeployStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushAcquisitionUpdateDeployStatusDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateDeployStatusDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Report download of specified release
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateDownloadStatusRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateDownloadStatusResponse
     */
	public function codePushAcquisitionUpdateDownloadStatus(
        \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateDownloadStatusRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateDownloadStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/public/codepush/report_status/download');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateDownloadStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushAcquisitionUpdateDownloadStatusDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushAcquisitionUpdateDownloadStatusDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets all releases metrics for specified Deployment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentMetricsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentMetricsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentMetricsGetResponse
     */
	public function codePushDeploymentMetricsGet(
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentMetricsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentMetricsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentMetricsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/metrics', \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentMetricsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentMetricsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentMetricsGet200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentMetricsGet200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentMetricsGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentMetricsGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rollback the latest or a specific release for an app deployment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleaseRollbackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleaseRollbackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleaseRollbackResponse
     */
	public function codePushDeploymentReleaseRollback(
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleaseRollbackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleaseRollbackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleaseRollbackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/rollback_release', \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleaseRollbackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleaseRollbackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentReleaseRollback201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleaseRollback201ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentReleaseRollbackDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleaseRollbackDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new CodePush release for the specified deployment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesCreateResponse
     */
	public function codePushDeploymentReleasesCreate(
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases', \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentReleasesCreate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesCreate201ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentReleasesCreateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesCreateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Clears a Deployment of releases
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesDeleteResponse
     */
	public function codePushDeploymentReleasesDelete(
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases', \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentReleasesDeleteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesDeleteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the history of releases on a Deployment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesGetResponse
     */
	public function codePushDeploymentReleasesGet(
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases', \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentReleasesGet200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesGet200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentReleasesGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentReleasesGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new CodePush release upload for the specified deployment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentUploadCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentUploadCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentUploadCreateResponse
     */
	public function codePushDeploymentUploadCreate(
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentUploadCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentUploadCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentUploadCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/uploads', \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentUploadCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentUploadCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentUploadCreate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentUploadCreate200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentUploadCreateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentUploadCreateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a CodePush Deployment for the given app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsCreateResponse
     */
	public function codePushDeploymentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/deployments', \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentsCreate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsCreate201ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentsCreateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsCreateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a CodePush Deployment for the given app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsDeleteResponse
     */
	public function codePushDeploymentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}', \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentsDeleteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsDeleteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a CodePush Deployment for the given app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsGetResponse
     */
	public function codePushDeploymentsGet(
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}', \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentsGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsGet200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentsGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of CodePush deployments for the given app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsListResponse
     */
	public function codePushDeploymentsList(
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/deployments', \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentsList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsList200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentsListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Promote one release (default latest one) from one deployment to another
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsPromoteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsPromoteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsPromoteResponse
     */
	public function codePushDeploymentsPromote(
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsPromoteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsPromoteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsPromoteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}', \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsPromoteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsPromoteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentsPromote200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsPromote200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentsPromoteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsPromoteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modifies a CodePush Deployment for the given app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsUpdateResponse
     */
	public function codePushDeploymentsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}', \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->codePushDeploymentsUpdateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CodePushDeploymentsUpdateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modifies a CodePush release metadata under the given Deployment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentReleasesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeploymentReleasesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeploymentReleasesUpdateResponse
     */
	public function deploymentReleasesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DeploymentReleasesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeploymentReleasesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeploymentReleasesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}', \OpenAPI\OpenAPI\Models\Operations\DeploymentReleasesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeploymentReleasesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deploymentReleasesUpdate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeploymentReleasesUpdate200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deploymentReleasesUpdateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeploymentReleasesUpdateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check for updates
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateCheckRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateCheckSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateCheckResponse
     */
	public function legacyCodePushAcquisitionUpdateCheck(
        \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateCheckRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateCheckSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateCheckResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/legacy/updateCheck');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateCheckRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateCheckResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyCodePushAcquisitionUpdateCheck200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateCheck200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyCodePushAcquisitionUpdateCheckDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateCheckDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Report download of specified release
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateDownloadStatusRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateDownloadStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateDownloadStatusResponse
     */
	public function legacyCodePushAcquisitionUpdateDownloadStatus(
        \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateDownloadStatusRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateDownloadStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateDownloadStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/legacy/reportStatus/download');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateDownloadStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyCodePushAcquisitionUpdateDownloadStatusDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateDownloadStatusDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Report deploy of specified release
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateInstallsStatusRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateInstallsStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateInstallsStatusResponse
     */
	public function legacyCodePushAcquisitionUpdateInstallsStatus(
        \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateInstallsStatusRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateInstallsStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateInstallsStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/legacy/reportStatus/deploy');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateInstallsStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyCodePushAcquisitionUpdateInstallsStatusDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\LegacyCodePushAcquisitionUpdateInstallsStatusDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
}