"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import evidencefinderbackfillstatus_enum as shared_evidencefinderbackfillstatus_enum
from ..shared import evidencefinderenablementstatus_enum as shared_evidencefinderenablementstatus_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EvidenceFinderEnablement:
    r"""The settings object that specifies whether evidence finder is enabled. This object also describes the related event data store, and the backfill status for populating the event data store with evidence data."""
    
    backfill_status: Optional[shared_evidencefinderbackfillstatus_enum.EvidenceFinderBackfillStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backfillStatus'), 'exclude': lambda f: f is None }})  
    enablement_status: Optional[shared_evidencefinderenablementstatus_enum.EvidenceFinderEnablementStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enablementStatus'), 'exclude': lambda f: f is None }})  
    error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})  
    event_data_store_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventDataStoreArn'), 'exclude': lambda f: f is None }})  
    