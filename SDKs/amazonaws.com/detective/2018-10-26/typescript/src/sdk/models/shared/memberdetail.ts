/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { DatasourcePackageIngestStateEnum } from "./datasourcepackageingeststateenum";
import { DatasourcePackageUsageInfo } from "./datasourcepackageusageinfo";
import { InvitationTypeEnum } from "./invitationtypeenum";
import { MemberDisabledReasonEnum } from "./memberdisabledreasonenum";
import { MemberStatusEnum } from "./memberstatusenum";
import { Expose, Transform } from "class-transformer";

/**
 * Details about a member account in a behavior graph.
 */
export class MemberDetail extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AccountId" })
  accountId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AdministratorId" })
  administratorId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DatasourcePackageIngestStates" })
  datasourcePackageIngestStates?: Record<
    string,
    DatasourcePackageIngestStateEnum
  >;

  @SpeakeasyMetadata()
  @Expose({ name: "DisabledReason" })
  disabledReason?: MemberDisabledReasonEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "EmailAddress" })
  emailAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "GraphArn" })
  graphArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "InvitationType" })
  invitationType?: InvitationTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "InvitedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  invitedTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "MasterId" })
  masterId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "PercentOfGraphUtilization" })
  percentOfGraphUtilization?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "PercentOfGraphUtilizationUpdatedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  percentOfGraphUtilizationUpdatedTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: MemberStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "UpdatedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedTime?: Date;

  @SpeakeasyMetadata({ elemType: DatasourcePackageUsageInfo })
  @Expose({ name: "VolumeUsageByDatasourcePackage" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, DatasourcePackageUsageInfo> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], DatasourcePackageUsageInfo);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  volumeUsageByDatasourcePackage?: Record<string, DatasourcePackageUsageInfo>;

  @SpeakeasyMetadata()
  @Expose({ name: "VolumeUsageInBytes" })
  volumeUsageInBytes?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "VolumeUsageUpdatedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  volumeUsageUpdatedTime?: Date;
}
