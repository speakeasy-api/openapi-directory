<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * DomainProvisioning - The current certificate provisioning status information for a domain.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class DomainProvisioning
{
    /**
     * The TXT records (for the certificate challenge) that were found at the last DNS fetch.
     * 
     * @var ?array<string> $certChallengeDiscoveredTxt
     */
	#[\JMS\Serializer\Annotation\SerializedName('certChallengeDiscoveredTxt')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $certChallengeDiscoveredTxt = null;
    
    /**
     * Represents a DNS certificate challenge.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CertDnsChallenge $certChallengeDns
     */
	#[\JMS\Serializer\Annotation\SerializedName('certChallengeDns')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CertDnsChallenge')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CertDnsChallenge $certChallengeDns = null;
    
    /**
     * Represents an HTTP certificate challenge.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CertHttpChallenge $certChallengeHttp
     */
	#[\JMS\Serializer\Annotation\SerializedName('certChallengeHttp')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CertHttpChallenge')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CertHttpChallenge $certChallengeHttp = null;
    
    /**
     * The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DomainProvisioningCertStatusEnum $certStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('certStatus')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DomainProvisioningCertStatusEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DomainProvisioningCertStatusEnum $certStatus = null;
    
    /**
     * The IPs found at the last DNS fetch.
     * 
     * @var ?array<string> $discoveredIps
     */
	#[\JMS\Serializer\Annotation\SerializedName('discoveredIps')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $discoveredIps = null;
    
    /**
     * The time at which the last DNS fetch occurred.
     * 
     * @var ?string $dnsFetchTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('dnsFetchTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $dnsFetchTime = null;
    
    /**
     * The DNS record match status as of the last DNS fetch.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DomainProvisioningDnsStatusEnum $dnsStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('dnsStatus')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DomainProvisioningDnsStatusEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DomainProvisioningDnsStatusEnum $dnsStatus = null;
    
    /**
     * The list of IPs to which the domain is expected to resolve.
     * 
     * @var ?array<string> $expectedIps
     */
	#[\JMS\Serializer\Annotation\SerializedName('expectedIps')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $expectedIps = null;
    
	public function __construct()
	{
		$this->certChallengeDiscoveredTxt = null;
		$this->certChallengeDns = null;
		$this->certChallengeHttp = null;
		$this->certStatus = null;
		$this->discoveredIps = null;
		$this->dnsFetchTime = null;
		$this->dnsStatus = null;
		$this->expectedIps = null;
	}
}
