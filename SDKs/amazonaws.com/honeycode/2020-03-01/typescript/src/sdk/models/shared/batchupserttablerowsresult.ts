/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { FailedBatchItem } from "./failedbatchitem";
import { UpsertRowsResult } from "./upsertrowsresult";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class BatchUpsertTableRowsResult extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: FailedBatchItem })
  @Expose({ name: "failedBatchItems" })
  @Type(() => FailedBatchItem)
  failedBatchItems?: FailedBatchItem[];

  @SpeakeasyMetadata({ elemType: UpsertRowsResult })
  @Expose({ name: "rows" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, UpsertRowsResult> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], UpsertRowsResult);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  rows: Record<string, UpsertRowsResult>;

  @SpeakeasyMetadata()
  @Expose({ name: "workbookCursor" })
  workbookCursor: number;
}
