"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Contacts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def mirror_contacts_delete(self, request: operations.MirrorContactsDeleteRequest, security: operations.MirrorContactsDeleteSecurity) -> operations.MirrorContactsDeleteResponse:
        r"""Deletes a contact."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MirrorContactsDeleteRequest, base_url, '/contacts/{id}', request)
        
        query_params = utils.get_query_params(operations.MirrorContactsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MirrorContactsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def mirror_contacts_get(self, request: operations.MirrorContactsGetRequest, security: operations.MirrorContactsGetSecurity) -> operations.MirrorContactsGetResponse:
        r"""Gets a single contact by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MirrorContactsGetRequest, base_url, '/contacts/{id}', request)
        
        query_params = utils.get_query_params(operations.MirrorContactsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MirrorContactsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def mirror_contacts_insert(self, request: operations.MirrorContactsInsertRequest, security: operations.MirrorContactsInsertSecurity) -> operations.MirrorContactsInsertResponse:
        r"""Inserts a new contact."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/contacts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "contact", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MirrorContactsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MirrorContactsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def mirror_contacts_list(self, request: operations.MirrorContactsListRequest, security: operations.MirrorContactsListSecurity) -> operations.MirrorContactsListResponse:
        r"""Retrieves a list of contacts for the authenticated user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/contacts'
        
        query_params = utils.get_query_params(operations.MirrorContactsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MirrorContactsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def mirror_contacts_patch(self, request: operations.MirrorContactsPatchRequest, security: operations.MirrorContactsPatchSecurity) -> operations.MirrorContactsPatchResponse:
        r"""Updates a contact in place. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MirrorContactsPatchRequest, base_url, '/contacts/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "contact", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MirrorContactsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MirrorContactsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def mirror_contacts_update(self, request: operations.MirrorContactsUpdateRequest, security: operations.MirrorContactsUpdateSecurity) -> operations.MirrorContactsUpdateResponse:
        r"""Updates a contact in place."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MirrorContactsUpdateRequest, base_url, '/contacts/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "contact", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MirrorContactsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MirrorContactsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    