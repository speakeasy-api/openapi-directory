"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Users:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def displayvideo_users_bulk_edit_assigned_user_roles(self, request: operations.DisplayvideoUsersBulkEditAssignedUserRolesRequest, security: operations.DisplayvideoUsersBulkEditAssignedUserRolesSecurity) -> operations.DisplayvideoUsersBulkEditAssignedUserRolesResponse:
        r"""Bulk edits user roles for a user. The operation will delete the assigned user roles provided in BulkEditAssignedUserRolesRequest.deletedAssignedUserRoles and then assign the user roles provided in BulkEditAssignedUserRolesRequest.createdAssignedUserRoles."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoUsersBulkEditAssignedUserRolesRequest, base_url, '/v1/users/{userId}:bulkEditAssignedUserRoles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bulk_edit_assigned_user_roles_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoUsersBulkEditAssignedUserRolesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoUsersBulkEditAssignedUserRolesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkEditAssignedUserRolesResponse])
                res.bulk_edit_assigned_user_roles_response = out

        return res

    def displayvideo_users_create(self, request: operations.DisplayvideoUsersCreateRequest, security: operations.DisplayvideoUsersCreateSecurity) -> operations.DisplayvideoUsersCreateResponse:
        r"""Creates a new user. Returns the newly created user if successful."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/users'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoUsersCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoUsersCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    def displayvideo_users_delete(self, request: operations.DisplayvideoUsersDeleteRequest, security: operations.DisplayvideoUsersDeleteSecurity) -> operations.DisplayvideoUsersDeleteResponse:
        r"""Deletes a user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoUsersDeleteRequest, base_url, '/v1/users/{userId}', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoUsersDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoUsersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def displayvideo_users_get(self, request: operations.DisplayvideoUsersGetRequest, security: operations.DisplayvideoUsersGetSecurity) -> operations.DisplayvideoUsersGetResponse:
        r"""Gets a user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoUsersGetRequest, base_url, '/v1/users/{userId}', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoUsersGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoUsersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    def displayvideo_users_list(self, request: operations.DisplayvideoUsersListRequest, security: operations.DisplayvideoUsersListSecurity) -> operations.DisplayvideoUsersListResponse:
        r"""Lists users that are accessible to the current user. If two users have user roles on the same partner or advertiser, they can access each other."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/users'
        
        query_params = utils.get_query_params(operations.DisplayvideoUsersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoUsersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListUsersResponse])
                res.list_users_response = out

        return res

    def displayvideo_users_patch(self, request: operations.DisplayvideoUsersPatchRequest, security: operations.DisplayvideoUsersPatchSecurity) -> operations.DisplayvideoUsersPatchResponse:
        r"""Updates an existing user. Returns the updated user if successful."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoUsersPatchRequest, base_url, '/v1/users/{userId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoUsersPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoUsersPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    