"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import updatesubnetgrouprequest as shared_updatesubnetgrouprequest
from ..shared import updatesubnetgroupresponse as shared_updatesubnetgroupresponse
from enum import Enum
from typing import Any, Optional

class UpdateSubnetGroupXAmzTargetEnum(str, Enum):
    AMAZON_MEMORY_DB_UPDATE_SUBNET_GROUP = 'AmazonMemoryDB.UpdateSubnetGroup'


@dataclasses.dataclass
class UpdateSubnetGroupRequest:
    
    update_subnet_group_request: shared_updatesubnetgrouprequest.UpdateSubnetGroupRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: UpdateSubnetGroupXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateSubnetGroupResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    invalid_subnet: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidSubnet"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_linked_role_not_found_fault: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceLinkedRoleNotFoundFault"""  
    subnet_group_not_found_fault: Optional[Any] = dataclasses.field(default=None)
    r"""SubnetGroupNotFoundFault"""  
    subnet_in_use: Optional[Any] = dataclasses.field(default=None)
    r"""SubnetInUse"""  
    subnet_not_allowed_fault: Optional[Any] = dataclasses.field(default=None)
    r"""SubnetNotAllowedFault"""  
    subnet_quota_exceeded_fault: Optional[Any] = dataclasses.field(default=None)
    r"""SubnetQuotaExceededFault"""  
    update_subnet_group_response: Optional[shared_updatesubnetgroupresponse.UpdateSubnetGroupResponse] = dataclasses.field(default=None)
    r"""Success"""  
    