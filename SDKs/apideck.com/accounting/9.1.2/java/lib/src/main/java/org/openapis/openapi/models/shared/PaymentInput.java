/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class PaymentInput {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account")
    public LinkedLedgerAccountInput account;
    public PaymentInput withAccount(LinkedLedgerAccountInput account) {
        this.account = account;
        return this;
    }
    
    /**
     * Unique identifier for the account to allocate payment to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounts_receivable_account_id")
    public String accountsReceivableAccountId;
    public PaymentInput withAccountsReceivableAccountId(String accountsReceivableAccountId) {
        this.accountsReceivableAccountId = accountsReceivableAccountId;
        return this;
    }
    
    /**
     * Type of accounts receivable account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounts_receivable_account_type")
    public String accountsReceivableAccountType;
    public PaymentInput withAccountsReceivableAccountType(String accountsReceivableAccountType) {
        this.accountsReceivableAccountType = accountsReceivableAccountType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allocations")
    public PaymentAllocationsInput[] allocations;
    public PaymentInput withAllocations(PaymentAllocationsInput[] allocations) {
        this.allocations = allocations;
        return this;
    }
    
    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public CurrencyEnum currency;
    public PaymentInput withCurrency(CurrencyEnum currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    public Double currencyRate;
    public PaymentInput withCurrencyRate(Double currencyRate) {
        this.currencyRate = currencyRate;
        return this;
    }
    
    /**
     * The customer this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    public LinkedCustomerInput customer;
    public PaymentInput withCustomer(LinkedCustomerInput customer) {
        this.customer = customer;
        return this;
    }
    
    /**
     * Payment id to be displayed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_id")
    public String displayId;
    public PaymentInput withDisplayId(String displayId) {
        this.displayId = displayId;
        return this;
    }
    
    /**
     * Optional note to be associated with the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    public String note;
    public PaymentInput withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * Payment method
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    public String paymentMethod;
    public PaymentInput withPaymentMethod(String paymentMethod) {
        this.paymentMethod = paymentMethod;
        return this;
    }
    
    /**
     * Optional reference message returned by payment method on processing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method_reference")
    public String paymentMethodReference;
    public PaymentInput withPaymentMethodReference(String paymentMethodReference) {
        this.paymentMethodReference = paymentMethodReference;
        return this;
    }
    
    /**
     * Payment has been reconciled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reconciled")
    public Boolean reconciled;
    public PaymentInput withReconciled(Boolean reconciled) {
        this.reconciled = reconciled;
        return this;
    }
    
    /**
     * Optional payment reference message ie: Debit remittance detail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    public String reference;
    public PaymentInput withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    public String rowVersion;
    public PaymentInput withRowVersion(String rowVersion) {
        this.rowVersion = rowVersion;
        return this;
    }
    
    /**
     * Status of payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public PaymentPaymentStatusEnum status;
    public PaymentInput withStatus(PaymentPaymentStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The supplier this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplier")
    public LinkedSupplierInput supplier;
    public PaymentInput withSupplier(LinkedSupplierInput supplier) {
        this.supplier = supplier;
        return this;
    }
    
    /**
     * Amount of payment
     */
    @JsonProperty("total_amount")
    public Double totalAmount;
    public PaymentInput withTotalAmount(Double totalAmount) {
        this.totalAmount = totalAmount;
        return this;
    }
    
    /**
     * Date transaction was entered - YYYY:MM::DDThh:mm:ss.sTZD
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("transaction_date")
    public OffsetDateTime transactionDate;
    public PaymentInput withTransactionDate(OffsetDateTime transactionDate) {
        this.transactionDate = transactionDate;
        return this;
    }
    
    /**
     * Type of payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public PaymentPaymentTypeEnum type;
    public PaymentInput withType(PaymentPaymentTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
