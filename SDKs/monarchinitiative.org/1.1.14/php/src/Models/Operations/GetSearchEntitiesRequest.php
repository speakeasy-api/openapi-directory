<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GetSearchEntitiesRequest
{
    /**
     * boost function e.g. pow(edges,0.334)
     * 
     * @var ?array<string> $boostFx
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=boost_fx')]
    public ?array $boostFx = null;
    
    /**
     * boost query e.g. category:genotype^-10
     * 
     * @var ?array<string> $boostQ
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=boost_q')]
    public ?array $boostQ = null;
    
    /**
     * e.g. gene, disease
     * 
     * @var ?array<string> $category
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=category')]
    public ?array $category = null;
    
    /**
     * Exclude grouping classes (classes with subclasses)
     * 
     * @var ?bool $excludeGroups
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=exclude_groups')]
    public ?bool $excludeGroups = null;
    
    /**
     * fq string passed directly to solr, note that multiple filters will be combined with an AND operator. Combining fq_string with other parameters may result in unexpected behavior.
     * 
     * @var ?array<string> $fq
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=fq')]
    public ?array $fq = null;
    
    /**
     * highlight class
     * 
     * @var ?string $highlightClass
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=highlight_class')]
    public ?string $highlightClass = null;
    
    /**
     * Include equivalent ids in prefix filter
     * 
     * @var ?bool $includeEqs
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=include_eqs')]
    public ?bool $includeEqs = null;
    
    /**
     * minimum should match parameter, see solr docs for details
     * 
     * @var ?string $minMatch
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=min_match')]
    public ?string $minMatch = null;
    
    /**
     * set to true to use the minimal tokenizer, good for variants and genotypes
     * 
     * @var ?bool $minimalTokenizer
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=minimal_tokenizer')]
    public ?bool $minimalTokenizer = null;
    
    /**
     * ontology prefix: HP, -MONDO
     * 
     * @var ?array<string> $prefix
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=prefix')]
    public ?array $prefix = null;
    
    /**
     * number of rows
     * 
     * @var ?int $rows
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=rows')]
    public ?int $rows = null;
    
    /**
     * row number to start from
     * 
     * @var ?string $start
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=start')]
    public ?string $start = null;
    
    /**
     * taxon filter, eg NCBITaxon:9606, includes inferred taxa
     * 
     * @var ?array<string> $taxon
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=taxon')]
    public ?array $taxon = null;
    
    /**
     * search string, e.g. shh, parkinson, femur
     * 
     * @var string $term
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=term')]
    public string $term;
    
	public function __construct()
	{
		$this->boostFx = null;
		$this->boostQ = null;
		$this->category = null;
		$this->excludeGroups = null;
		$this->fq = null;
		$this->highlightClass = null;
		$this->includeEqs = null;
		$this->minMatch = null;
		$this->minimalTokenizer = null;
		$this->prefix = null;
		$this->rows = null;
		$this->start = null;
		$this->taxon = null;
		$this->term = "";
	}
}
