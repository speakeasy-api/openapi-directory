// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RdcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type RdcerRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Aadhaar number
	UID string `json:"UID"`
	// Registration No.
	FinalDocRegNo string `json:"final_doc_reg_no"`
}

// RdcerRequestBodyFormatEnum - The format of the certificate in response.
type RdcerRequestBodyFormatEnum string

const (
	RdcerRequestBodyFormatEnumPdf RdcerRequestBodyFormatEnum = "pdf"
)

func (e *RdcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = RdcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RdcerRequestBodyFormatEnum: %s", s)
	}
}

// RdcerRequestBody - Request format
type RdcerRequestBody struct {
	CertificateParameters *RdcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format RdcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Rdcer504ApplicationJSONErrorEnum string

const (
	Rdcer504ApplicationJSONErrorEnumGatewayTimeout Rdcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Rdcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Rdcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rdcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Rdcer504ApplicationJSONErrorDescriptionEnum string

const (
	Rdcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Rdcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Rdcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Rdcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rdcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rdcer504ApplicationJSON - Gateway timeout
type Rdcer504ApplicationJSON struct {
	Error            *Rdcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rdcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rdcer503ApplicationJSONErrorEnum string

const (
	Rdcer503ApplicationJSONErrorEnumServiceUnavailable Rdcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Rdcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Rdcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rdcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Rdcer503ApplicationJSONErrorDescriptionEnum string

const (
	Rdcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Rdcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Rdcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Rdcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rdcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rdcer503ApplicationJSON - Service unavailable
type Rdcer503ApplicationJSON struct {
	Error            *Rdcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rdcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rdcer502ApplicationJSONErrorEnum string

const (
	Rdcer502ApplicationJSONErrorEnumBadGatewy Rdcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Rdcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Rdcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rdcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Rdcer502ApplicationJSONErrorDescriptionEnum string

const (
	Rdcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Rdcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Rdcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Rdcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rdcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rdcer502ApplicationJSON - Bad gateway
type Rdcer502ApplicationJSON struct {
	Error            *Rdcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rdcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rdcer500ApplicationJSONErrorEnum string

const (
	Rdcer500ApplicationJSONErrorEnumInternalServerError Rdcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Rdcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Rdcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rdcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Rdcer500ApplicationJSONErrorDescriptionEnum string

const (
	Rdcer500ApplicationJSONErrorDescriptionEnumInternalServerError Rdcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Rdcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Rdcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rdcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rdcer500ApplicationJSON - Internal server error
type Rdcer500ApplicationJSON struct {
	Error            *Rdcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rdcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rdcer404ApplicationJSONErrorEnum string

const (
	Rdcer404ApplicationJSONErrorEnumRecordNotFound Rdcer404ApplicationJSONErrorEnum = "record_not_found"
	Rdcer404ApplicationJSONErrorEnumURLNotFound    Rdcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Rdcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Rdcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rdcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Rdcer404ApplicationJSONErrorDescriptionEnum string

const (
	Rdcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Rdcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Rdcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Rdcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Rdcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Rdcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rdcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rdcer404ApplicationJSON - No record found
type Rdcer404ApplicationJSON struct {
	Error            *Rdcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rdcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rdcer401ApplicationJSONErrorEnum string

const (
	Rdcer401ApplicationJSONErrorEnumInvalidAuthentication Rdcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Rdcer401ApplicationJSONErrorEnumInvalidAuthorization  Rdcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Rdcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Rdcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rdcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Rdcer401ApplicationJSONErrorDescriptionEnum string

const (
	Rdcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Rdcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Rdcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Rdcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Rdcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Rdcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rdcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rdcer401ApplicationJSON - Unauthorized access
type Rdcer401ApplicationJSON struct {
	Error            *Rdcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rdcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rdcer400ApplicationJSONErrorEnum string

const (
	Rdcer400ApplicationJSONErrorEnumMissingParameter Rdcer400ApplicationJSONErrorEnum = "missing_parameter"
	Rdcer400ApplicationJSONErrorEnumInvalidParameter Rdcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Rdcer400ApplicationJSONErrorEnumInvalidFormat    Rdcer400ApplicationJSONErrorEnum = "invalid_format"
	Rdcer400ApplicationJSONErrorEnumInvalidTxnid     Rdcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Rdcer400ApplicationJSONErrorEnumInvalidConsentid Rdcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Rdcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Rdcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rdcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Rdcer400ApplicationJSONErrorDescriptionEnum string

const (
	Rdcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Rdcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Rdcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Rdcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Rdcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Rdcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Rdcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Rdcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Rdcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Rdcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Rdcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Rdcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rdcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rdcer400ApplicationJSON - Bad request
type Rdcer400ApplicationJSON struct {
	Error            *Rdcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rdcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type RdcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Rdcer400ApplicationJSONObject *Rdcer400ApplicationJSON
	// Unauthorized access
	Rdcer401ApplicationJSONObject *Rdcer401ApplicationJSON
	// No record found
	Rdcer404ApplicationJSONObject *Rdcer404ApplicationJSON
	// Internal server error
	Rdcer500ApplicationJSONObject *Rdcer500ApplicationJSON
	// Bad gateway
	Rdcer502ApplicationJSONObject *Rdcer502ApplicationJSON
	// Service unavailable
	Rdcer503ApplicationJSONObject *Rdcer503ApplicationJSON
	// Gateway timeout
	Rdcer504ApplicationJSONObject *Rdcer504ApplicationJSON
}
