// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PullsMergeRequestBodyMergeMethodEnum - Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
type PullsMergeRequestBodyMergeMethodEnum string

const (
	PullsMergeRequestBodyMergeMethodEnumMerge  PullsMergeRequestBodyMergeMethodEnum = "merge"
	PullsMergeRequestBodyMergeMethodEnumSquash PullsMergeRequestBodyMergeMethodEnum = "squash"
	PullsMergeRequestBodyMergeMethodEnumRebase PullsMergeRequestBodyMergeMethodEnum = "rebase"
)

func (e PullsMergeRequestBodyMergeMethodEnum) ToPointer() *PullsMergeRequestBodyMergeMethodEnum {
	return &e
}

func (e *PullsMergeRequestBodyMergeMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "merge":
		fallthrough
	case "squash":
		fallthrough
	case "rebase":
		*e = PullsMergeRequestBodyMergeMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PullsMergeRequestBodyMergeMethodEnum: %v", v)
	}
}

type PullsMergeRequestBody struct {
	// Extra detail to append to automatic commit message.
	CommitMessage *string `json:"commit_message,omitempty"`
	// Title for the automatic commit message.
	CommitTitle *string `json:"commit_title,omitempty"`
	// Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
	MergeMethod *PullsMergeRequestBodyMergeMethodEnum `json:"merge_method,omitempty"`
	// SHA that pull request head must match to allow merge.
	Sha *string `json:"sha,omitempty"`
}

type PullsMergeRequest struct {
	RequestBody *PullsMergeRequestBody `request:"mediaType=application/json"`
	Owner       string                 `pathParam:"style=simple,explode=false,name=owner"`
	PullNumber  int64                  `pathParam:"style=simple,explode=false,name=pull_number"`
	Repo        string                 `pathParam:"style=simple,explode=false,name=repo"`
}

// PullsMerge409ApplicationJSON - Conflict if sha was provided and pull request head did not match
type PullsMerge409ApplicationJSON struct {
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message          *string `json:"message,omitempty"`
}

// PullsMerge405ApplicationJSON - Method Not Allowed if merge cannot be performed
type PullsMerge405ApplicationJSON struct {
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message          *string `json:"message,omitempty"`
}

type PullsMergeResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// if merge was successful
	PullRequestMergeResult *shared.PullRequestMergeResult
	// Method Not Allowed if merge cannot be performed
	PullsMerge405ApplicationJSONObject *PullsMerge405ApplicationJSON
	// Conflict if sha was provided and pull request head did not match
	PullsMerge409ApplicationJSONObject *PullsMerge409ApplicationJSON
	// Validation failed
	ValidationError *shared.ValidationError
}
