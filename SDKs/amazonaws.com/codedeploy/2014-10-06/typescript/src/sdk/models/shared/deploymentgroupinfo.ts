/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AlarmConfiguration } from "./alarmconfiguration";
import { AutoRollbackConfiguration } from "./autorollbackconfiguration";
import { AutoScalingGroup } from "./autoscalinggroup";
import { BlueGreenDeploymentConfiguration } from "./bluegreendeploymentconfiguration";
import { ComputePlatformEnum } from "./computeplatformenum";
import { DeploymentStyle } from "./deploymentstyle";
import { Ec2TagFilter } from "./ec2tagfilter";
import { Ec2TagSet } from "./ec2tagset";
import { ECSService } from "./ecsservice";
import { LastDeploymentInfo } from "./lastdeploymentinfo";
import { LoadBalancerInfo } from "./loadbalancerinfo";
import { OnPremisesTagSet } from "./onpremisestagset";
import { OutdatedInstancesStrategyEnum } from "./outdatedinstancesstrategyenum";
import { RevisionLocation } from "./revisionlocation";
import { TagFilter } from "./tagfilter";
import { TriggerConfig } from "./triggerconfig";
import { Expose, Type } from "class-transformer";

/**
 * Information about a deployment group.
 */
export class DeploymentGroupInfo extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "alarmConfiguration" })
  @Type(() => AlarmConfiguration)
  alarmConfiguration?: AlarmConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "applicationName" })
  applicationName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "autoRollbackConfiguration" })
  @Type(() => AutoRollbackConfiguration)
  autoRollbackConfiguration?: AutoRollbackConfiguration;

  @SpeakeasyMetadata({ elemType: AutoScalingGroup })
  @Expose({ name: "autoScalingGroups" })
  @Type(() => AutoScalingGroup)
  autoScalingGroups?: AutoScalingGroup[];

  @SpeakeasyMetadata()
  @Expose({ name: "blueGreenDeploymentConfiguration" })
  @Type(() => BlueGreenDeploymentConfiguration)
  blueGreenDeploymentConfiguration?: BlueGreenDeploymentConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "computePlatform" })
  computePlatform?: ComputePlatformEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "deploymentConfigName" })
  deploymentConfigName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deploymentGroupId" })
  deploymentGroupId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deploymentGroupName" })
  deploymentGroupName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deploymentStyle" })
  @Type(() => DeploymentStyle)
  deploymentStyle?: DeploymentStyle;

  @SpeakeasyMetadata({ elemType: Ec2TagFilter })
  @Expose({ name: "ec2TagFilters" })
  @Type(() => Ec2TagFilter)
  ec2TagFilters?: Ec2TagFilter[];

  @SpeakeasyMetadata()
  @Expose({ name: "ec2TagSet" })
  @Type(() => Ec2TagSet)
  ec2TagSet?: Ec2TagSet;

  @SpeakeasyMetadata({ elemType: ECSService })
  @Expose({ name: "ecsServices" })
  @Type(() => ECSService)
  ecsServices?: ECSService[];

  @SpeakeasyMetadata()
  @Expose({ name: "lastAttemptedDeployment" })
  @Type(() => LastDeploymentInfo)
  lastAttemptedDeployment?: LastDeploymentInfo;

  @SpeakeasyMetadata()
  @Expose({ name: "lastSuccessfulDeployment" })
  @Type(() => LastDeploymentInfo)
  lastSuccessfulDeployment?: LastDeploymentInfo;

  @SpeakeasyMetadata()
  @Expose({ name: "loadBalancerInfo" })
  @Type(() => LoadBalancerInfo)
  loadBalancerInfo?: LoadBalancerInfo;

  @SpeakeasyMetadata({ elemType: TagFilter })
  @Expose({ name: "onPremisesInstanceTagFilters" })
  @Type(() => TagFilter)
  onPremisesInstanceTagFilters?: TagFilter[];

  @SpeakeasyMetadata()
  @Expose({ name: "onPremisesTagSet" })
  @Type(() => OnPremisesTagSet)
  onPremisesTagSet?: OnPremisesTagSet;

  @SpeakeasyMetadata()
  @Expose({ name: "outdatedInstancesStrategy" })
  outdatedInstancesStrategy?: OutdatedInstancesStrategyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "serviceRoleArn" })
  serviceRoleArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "targetRevision" })
  @Type(() => RevisionLocation)
  targetRevision?: RevisionLocation;

  @SpeakeasyMetadata({ elemType: TriggerConfig })
  @Expose({ name: "triggerConfigurations" })
  @Type(() => TriggerConfig)
  triggerConfigurations?: TriggerConfig[];
}
