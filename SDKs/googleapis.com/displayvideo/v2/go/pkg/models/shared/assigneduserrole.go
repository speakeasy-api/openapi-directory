// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AssignedUserRoleUserRoleEnum - Required. The user role to assign to a user for the entity.
type AssignedUserRoleUserRoleEnum string

const (
	AssignedUserRoleUserRoleEnumUserRoleUnspecified    AssignedUserRoleUserRoleEnum = "USER_ROLE_UNSPECIFIED"
	AssignedUserRoleUserRoleEnumAdmin                  AssignedUserRoleUserRoleEnum = "ADMIN"
	AssignedUserRoleUserRoleEnumAdminPartnerClient     AssignedUserRoleUserRoleEnum = "ADMIN_PARTNER_CLIENT"
	AssignedUserRoleUserRoleEnumStandard               AssignedUserRoleUserRoleEnum = "STANDARD"
	AssignedUserRoleUserRoleEnumStandardPlanner        AssignedUserRoleUserRoleEnum = "STANDARD_PLANNER"
	AssignedUserRoleUserRoleEnumStandardPlannerLimited AssignedUserRoleUserRoleEnum = "STANDARD_PLANNER_LIMITED"
	AssignedUserRoleUserRoleEnumStandardPartnerClient  AssignedUserRoleUserRoleEnum = "STANDARD_PARTNER_CLIENT"
	AssignedUserRoleUserRoleEnumReadOnly               AssignedUserRoleUserRoleEnum = "READ_ONLY"
	AssignedUserRoleUserRoleEnumReportingOnly          AssignedUserRoleUserRoleEnum = "REPORTING_ONLY"
	AssignedUserRoleUserRoleEnumLimitedReportingOnly   AssignedUserRoleUserRoleEnum = "LIMITED_REPORTING_ONLY"
	AssignedUserRoleUserRoleEnumCreative               AssignedUserRoleUserRoleEnum = "CREATIVE"
	AssignedUserRoleUserRoleEnumCreativeAdmin          AssignedUserRoleUserRoleEnum = "CREATIVE_ADMIN"
)

func (e AssignedUserRoleUserRoleEnum) ToPointer() *AssignedUserRoleUserRoleEnum {
	return &e
}

func (e *AssignedUserRoleUserRoleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "USER_ROLE_UNSPECIFIED":
		fallthrough
	case "ADMIN":
		fallthrough
	case "ADMIN_PARTNER_CLIENT":
		fallthrough
	case "STANDARD":
		fallthrough
	case "STANDARD_PLANNER":
		fallthrough
	case "STANDARD_PLANNER_LIMITED":
		fallthrough
	case "STANDARD_PARTNER_CLIENT":
		fallthrough
	case "READ_ONLY":
		fallthrough
	case "REPORTING_ONLY":
		fallthrough
	case "LIMITED_REPORTING_ONLY":
		fallthrough
	case "CREATIVE":
		fallthrough
	case "CREATIVE_ADMIN":
		*e = AssignedUserRoleUserRoleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssignedUserRoleUserRoleEnum: %v", v)
	}
}

// AssignedUserRoleInput - A single assigned user role, which defines a user's authorized interaction with a specified partner or advertiser.
type AssignedUserRoleInput struct {
	// The ID of the advertiser that the assigend user role applies to.
	AdvertiserID *string `json:"advertiserId,omitempty"`
	// The ID of the partner that the assigned user role applies to.
	PartnerID *string `json:"partnerId,omitempty"`
	// Required. The user role to assign to a user for the entity.
	UserRole *AssignedUserRoleUserRoleEnum `json:"userRole,omitempty"`
}

// AssignedUserRole - A single assigned user role, which defines a user's authorized interaction with a specified partner or advertiser.
type AssignedUserRole struct {
	// The ID of the advertiser that the assigend user role applies to.
	AdvertiserID *string `json:"advertiserId,omitempty"`
	// Output only. The ID of the assigned user role.
	AssignedUserRoleID *string `json:"assignedUserRoleId,omitempty"`
	// The ID of the partner that the assigned user role applies to.
	PartnerID *string `json:"partnerId,omitempty"`
	// Required. The user role to assign to a user for the entity.
	UserRole *AssignedUserRoleUserRoleEnum `json:"userRole,omitempty"`
}
