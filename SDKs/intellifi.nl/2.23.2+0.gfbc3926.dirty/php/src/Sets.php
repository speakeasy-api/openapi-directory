<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Sets 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add items to an existing list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddItemIdsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddItemIdsListResponse
     */
	public function addItemIdsList(
        \OpenAPI\OpenAPI\Models\Operations\AddItemIdsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddItemIdsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sets/itemlists/{id}/ids', \OpenAPI\OpenAPI\Models\Operations\AddItemIdsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddItemIdsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseListResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseListResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add spots to an existing list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddItemIdsSpotListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddItemIdsSpotListResponse
     */
	public function addItemIdsSpotList(
        \OpenAPI\OpenAPI\Models\Operations\AddItemIdsSpotListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddItemIdsSpotListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sets/spotlists/{id}/ids', \OpenAPI\OpenAPI\Models\Operations\AddItemIdsSpotListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddItemIdsSpotListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseListResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseListResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create item list
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ItemListInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddItemListResponse
     */
	public function addItemList(
        \OpenAPI\OpenAPI\Models\Shared\ItemListInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddItemListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sets/itemlists');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddItemListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseDefaultResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseDefaultResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create spot list
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ItemListInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddSpotListResponse
     */
	public function addSpotList(
        \OpenAPI\OpenAPI\Models\Shared\ItemListInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddSpotListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sets/spotlists');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddSpotListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseDefaultResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseDefaultResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete item from list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteItemIdFromItemListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteItemIdFromItemListResponse
     */
	public function deleteItemIdFromItemList(
        \OpenAPI\OpenAPI\Models\Operations\DeleteItemIdFromItemListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteItemIdFromItemListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sets/itemlists/{id}/ids/{itemId}', \OpenAPI\OpenAPI\Models\Operations\DeleteItemIdFromItemListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteItemIdFromItemListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseListResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseListResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete spot from list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteItemIdFromSpotListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteItemIdFromSpotListResponse
     */
	public function deleteItemIdFromSpotList(
        \OpenAPI\OpenAPI\Models\Operations\DeleteItemIdFromSpotListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteItemIdFromSpotListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sets/spotlists/{id}/ids/{itemId}', \OpenAPI\OpenAPI\Models\Operations\DeleteItemIdFromSpotListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteItemIdFromSpotListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseListResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseListResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete item list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteItemSetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteItemSetResponse
     */
	public function deleteItemSet(
        \OpenAPI\OpenAPI\Models\Operations\DeleteItemSetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteItemSetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sets/itemlists/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteItemSetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteItemSetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseDefaultResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseDefaultResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete spot list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSpotListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSpotListResponse
     */
	public function deleteSpotList(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSpotListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSpotListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sets/spotlists/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteSpotListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSpotListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseDefaultResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseDefaultResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get item list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetItemListByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetItemListByIdResponse
     */
	public function getItemListById(
        \OpenAPI\OpenAPI\Models\Operations\GetItemListByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetItemListByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sets/itemlists/{id}', \OpenAPI\OpenAPI\Models\Operations\GetItemListByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetItemListByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itemList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItemList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get item ids for this list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetItemListIdsByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetItemListIdsByIdResponse
     */
	public function getItemListIdsById(
        \OpenAPI\OpenAPI\Models\Operations\GetItemListIdsByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetItemListIdsByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sets/itemlists/{id}/ids', \OpenAPI\OpenAPI\Models\Operations\GetItemListIdsByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetItemListIdsByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOfItemIds = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all item lists
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetItemListsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetItemListsResponse
     */
	public function getItemLists(
        \OpenAPI\OpenAPI\Models\Operations\GetItemListsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetItemListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sets/itemlists');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetItemListsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetItemListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getItemLists200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetItemLists200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Info for a specific spot list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpotListByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpotListByIdResponse
     */
	public function getSpotListById(
        \OpenAPI\OpenAPI\Models\Operations\GetSpotListByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpotListByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sets/spotlists/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSpotListByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpotListByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->spotList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SpotList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get spot ids for this list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpotListIdsByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpotListIdsByIdResponse
     */
	public function getSpotListIdsById(
        \OpenAPI\OpenAPI\Models\Operations\GetSpotListIdsByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpotListIdsByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sets/spotlists/{id}/ids', \OpenAPI\OpenAPI\Models\Operations\GetSpotListIdsByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpotListIdsByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOfItemIds = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all spot lists
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpotListsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpotListsResponse
     */
	public function getSpotLists(
        \OpenAPI\OpenAPI\Models\Operations\GetSpotListsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpotListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sets/spotlists');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpotListsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpotListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpotLists200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpotLists200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update existing item list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateItemListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateItemListResponse
     */
	public function updateItemList(
        \OpenAPI\OpenAPI\Models\Operations\UpdateItemListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateItemListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sets/itemlists/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateItemListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itemListInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateItemListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseDefaultResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseDefaultResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update existing spot list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSpotListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSpotListResponse
     */
	public function updateSpotList(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSpotListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSpotListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sets/spotlists/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateSpotListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "spotListInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSpotListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseDefaultResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseDefaultResource', 'json');
            }
        }

        return $response;
    }
}