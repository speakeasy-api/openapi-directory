<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class PostEventTriggerRequest
{
    /**
     * The status of the event trigger.
     * 
     * @var bool $active
     */
	#[\JMS\Serializer\Annotation\SerializedName('active')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $active;
    
    /**
     * The base object that the trigger rule is defined upon. Should be specified in the pattern: ^[A-Z][\\w\\-]*$
     * 
     * @var string $baseObject
     */
	#[\JMS\Serializer\Annotation\SerializedName('baseObject')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $baseObject;
    
    /**
     * The JEXL expression to be evaluated against object changes. See above for more information and an example.
     * 
     * @var string $condition
     */
	#[\JMS\Serializer\Annotation\SerializedName('condition')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $condition;
    
    /**
     * The description of the event trigger.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('eventType')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\EventType')]
    public EventType $eventType;
    
	public function __construct()
	{
		$this->active = false;
		$this->baseObject = "";
		$this->condition = "";
		$this->description = null;
		$this->eventType = new \OpenAPI\OpenAPI\Models\Shared\EventType();
	}
}
