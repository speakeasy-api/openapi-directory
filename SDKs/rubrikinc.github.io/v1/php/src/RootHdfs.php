<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootHdfs 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Lists all files and directories in a given path
     * 
     * Lists all files and directories in a given path.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BrowseHdfsSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BrowseHdfsSnapshotResponse
     */
	public function browseHdfsSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\BrowseHdfsSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BrowseHdfsSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs/snapshot/{id}/browse', \OpenAPI\OpenAPI\Models\Operations\BrowseHdfsSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BrowseHdfsSnapshotRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BrowseHdfsSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->browseResponseListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BrowseResponseListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create one HDFS directory for a host
     * 
     * Create a HDFS directory for a network host. A HDFS directory is a HDFS directory template applied to a host.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\HdfsCreate $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateHdfsResponse
     */
	public function createHdfs(
        \OpenAPI\OpenAPI\Models\Shared\HdfsCreate $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateHdfsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateHdfsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hdfsDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HdfsDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiate an on-demand backup for a HDFS directory
     * 
     * Create on-demand backup request for HDFS directory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateHdfsBackupJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateHdfsBackupJobResponse
     */
	public function createHdfsBackupJob(
        \OpenAPI\OpenAPI\Models\Operations\CreateHdfsBackupJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateHdfsBackupJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs/{id}/snapshot', \OpenAPI\OpenAPI\Models\Operations\CreateHdfsBackupJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "baseOnDemandSnapshotConfig", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateHdfsBackupJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create export job
     * 
     * Initiate a job to copy a file or folder from a hdfs backup to a destination host other than the source host. Returns the job instance ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateHdfsExportFileJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateHdfsExportFileJobResponse
     */
	public function createHdfsExportFileJob(
        \OpenAPI\OpenAPI\Models\Operations\CreateHdfsExportFileJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateHdfsExportFileJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs/snapshot/{id}/export_file', \OpenAPI\OpenAPI\Models\Operations\CreateHdfsExportFileJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "hdfsExportFileJobConfig", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateHdfsExportFileJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create restore job
     * 
     * Initiate a job to copy a file or folder from a HDFS directory backup to the source host. Returns the job instance ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateHdfsRestoreFileJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateHdfsRestoreFileJobResponse
     */
	public function createHdfsRestoreFileJob(
        \OpenAPI\OpenAPI\Models\Operations\CreateHdfsRestoreFileJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateHdfsRestoreFileJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs/snapshot/{id}/restore_file', \OpenAPI\OpenAPI\Models\Operations\CreateHdfsRestoreFileJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "hdfsRestoreFileJobConfig", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateHdfsRestoreFileJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a HDFS directory
     * 
     * Delete a HDFS directory by specifying the HDFS directory ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsResponse
     */
	public function deleteHdfs(
        \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteHdfsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a HDFS directory snapshot
     * 
     * Delete a HDFS directory snapshot. A snapshot is deleted only if it is an on-demand snapshot, or a snapshot of an unprotected HDFS directory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsSnapshotResponse
     */
	public function deleteHdfsSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs/snapshot/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete all snapshots of a HDFS directory
     * 
     * Delete all snapshots that were created based on a hdfs by providing the HDFS directory ID.
     * Requires an unprotected HDFS directory. Remove the HDFS directory from all SLA Domains.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsSnapshotsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsSnapshotsResponse
     */
	public function deleteHdfsSnapshots(
        \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsSnapshotsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsSnapshotsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs/{id}/snapshot', \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsSnapshotsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsSnapshotsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get information for a single HDFS directory
     * 
     * Retrieve summary information for a HDFS directory by specifying the HDFS directory ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHdfsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHdfsResponse
     */
	public function getHdfs(
        \OpenAPI\OpenAPI\Models\Operations\GetHdfsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHdfsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs/{id}', \OpenAPI\OpenAPI\Models\Operations\GetHdfsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHdfsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hdfsDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HdfsDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get details about an asynchronous request
     * 
     * Get details about a hdfs related asynchronous request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHdfsAsyncRequestStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHdfsAsyncRequestStatusResponse
     */
	public function getHdfsAsyncRequestStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetHdfsAsyncRequestStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHdfsAsyncRequestStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs/request/{id}', \OpenAPI\OpenAPI\Models\Operations\GetHdfsAsyncRequestStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHdfsAsyncRequestStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get information for a HDFS directory snapshot
     * 
     * Retrieve summary information for a HDFS directory snapshot by specifying the snapshot ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHdfsSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHdfsSnapshotResponse
     */
	public function getHdfsSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\GetHdfsSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHdfsSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs/snapshot/{id}', \OpenAPI\OpenAPI\Models\Operations\GetHdfsSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHdfsSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hdfsSnapshotDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HdfsSnapshotDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get missed snapshots for a HDFS directory
     * 
     * Retrieve summary information about all missed snapshots for a HDFS directory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMissedHdfsSnapshotsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMissedHdfsSnapshotsResponse
     */
	public function getMissedHdfsSnapshots(
        \OpenAPI\OpenAPI\Models\Operations\GetMissedHdfsSnapshotsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMissedHdfsSnapshotsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs/{id}/missed_snapshot', \OpenAPI\OpenAPI\Models\Operations\GetMissedHdfsSnapshotsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMissedHdfsSnapshotsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->missedSnapshotListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MissedSnapshotListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get summary information for all HDFS directories
     * 
     * Retrieve summary information for each HDFS directory. Optionally, filter the retrieved information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryHdfsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryHdfsResponse
     */
	public function queryHdfs(
        \OpenAPI\OpenAPI\Models\Operations\QueryHdfsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryHdfsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryHdfsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryHdfsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hdfsSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HdfsSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Search for a file within the HDFS directory
     * 
     * Search for a file within the HDFS directory. Search using full path prefix or filename prefix.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchHdfsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchHdfsResponse
     */
	public function searchHdfs(
        \OpenAPI\OpenAPI\Models\Operations\SearchHdfsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchHdfsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs/{id}/search', \OpenAPI\OpenAPI\Models\Operations\SearchHdfsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchHdfsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchHdfsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchResponseListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchResponseListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a HDFS directory
     * 
     * Update a HDFS directory with the specified properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateHdfsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateHdfsResponse
     */
	public function updateHdfs(
        \OpenAPI\OpenAPI\Models\Operations\UpdateHdfsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateHdfsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateHdfsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "hdfsUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateHdfsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hdfsDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HdfsDetail', 'json');
            }
        }

        return $response;
    }
}