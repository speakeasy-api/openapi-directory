"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ProductModule:
    r"""Product Module operations
    https://netlicensing.io/wiki/product-module-services - Product Module Services
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_product_module(self, request: operations.CreateProductModuleRequestBody, security: operations.CreateProductModuleSecurity) -> operations.CreateProductModuleResponse:
        r"""Create Product Module
        Creates a new Product Module
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/productmodule'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateProductModuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Netlicensing])
                res.netlicensing = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [400, 402, 403, 404, 500]:
            pass

        return res

    def delete_product_module(self, request: operations.DeleteProductModuleRequest, security: operations.DeleteProductModuleSecurity) -> operations.DeleteProductModuleResponse:
        r"""Delete Product Module
        Delete a Product Module by 'number'
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteProductModuleRequest, base_url, '/productmodule/{productModuleNumber}', request)
        
        query_params = utils.get_query_params(operations.DeleteProductModuleRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteProductModuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Netlicensing])
                res.netlicensing = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [400, 403, 404, 500]:
            pass

        return res

    def get_product_module(self, request: operations.GetProductModuleRequest, security: operations.GetProductModuleSecurity) -> operations.GetProductModuleResponse:
        r"""Get Product Module
        Return a Product Module by 'productModuleNumber'
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProductModuleRequest, base_url, '/productmodule/{productModuleNumber}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductModuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Netlicensing])
                res.netlicensing = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [400, 403, 404, 500]:
            pass

        return res

    def list_product_modules(self) -> operations.ListProductModulesResponse:
        r"""List Product Modules
        Return a list of all Product Modules for the current Vendor
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/productmodule'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListProductModulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Netlicensing]])
                res.netlicensings = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [400, 403, 404, 500]:
            pass

        return res

    def update_product_module(self, request: operations.UpdateProductModuleRequest, security: operations.UpdateProductModuleSecurity) -> operations.UpdateProductModuleResponse:
        r"""Update Product Module
        Sets the provided properties to a Product Module. Return an updated Product Module
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateProductModuleRequest, base_url, '/productmodule/{productModuleNumber}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateProductModuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Netlicensing])
                res.netlicensing = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [400, 402, 403, 404, 500]:
            pass

        return res

    