"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetCertificatesSortEnum(str, Enum):
    r"""Can be used multiple times."""
    ID = 'id'
    ID_ASC = 'id:asc'
    ID_DESC = 'id:desc'
    NAME = 'name'
    NAME_ASC = 'name:asc'
    NAME_DESC = 'name:desc'
    CREATED = 'created'
    CREATED_ASC = 'created:asc'
    CREATED_DESC = 'created:desc'

class GetCertificatesTypeParameterTypeEnum(str, Enum):
    r"""Can be used multiple times. The response will only contain Certificates matching the type."""
    UPLOADED = 'uploaded'
    MANAGED = 'managed'


@dataclasses.dataclass
class GetCertificatesRequest:
    
    label_selector: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'label_selector', 'style': 'form', 'explode': True }})
    r"""Can be used to filter resources by labels. The response will only contain resources matching the label selector."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Can be used to filter resources by their name. The response will only contain the resources matching the specified name"""  
    sort: Optional[GetCertificatesSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Can be used multiple times."""  
    type: Optional[GetCertificatesTypeParameterTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Can be used multiple times. The response will only contain Certificates matching the type."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCertificatesCertificatesResponseCertificateStatusError:
    r"""If issuance or renewal reports `failed`, this property contains information about what happened"""
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    
class GetCertificatesCertificatesResponseCertificateStatusIssuanceEnum(str, Enum):
    r"""Status of the issuance process of the Certificate"""
    PENDING = 'pending'
    COMPLETED = 'completed'
    FAILED = 'failed'

class GetCertificatesCertificatesResponseCertificateStatusRenewalEnum(str, Enum):
    r"""Status of the renewal process of the Certificate."""
    SCHEDULED = 'scheduled'
    PENDING = 'pending'
    FAILED = 'failed'
    UNAVAILABLE = 'unavailable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCertificatesCertificatesResponseCertificateStatus:
    r"""Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates"""
    
    error: Optional[GetCertificatesCertificatesResponseCertificateStatusError] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""If issuance or renewal reports `failed`, this property contains information about what happened"""  
    issuance: Optional[GetCertificatesCertificatesResponseCertificateStatusIssuanceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuance'), 'exclude': lambda f: f is None }})
    r"""Status of the issuance process of the Certificate"""  
    renewal: Optional[GetCertificatesCertificatesResponseCertificateStatusRenewalEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewal'), 'exclude': lambda f: f is None }})
    r"""Status of the renewal process of the Certificate."""  
    
class GetCertificatesCertificatesResponseCertificateTypeEnum(str, Enum):
    r"""Type of the Certificate"""
    UPLOADED = 'uploaded'
    MANAGED = 'managed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCertificatesCertificatesResponseCertificateUsedBy:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of resource referenced"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of resource referenced"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCertificatesCertificatesResponseCertificate:
    
    certificate: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificate') }})
    r"""Certificate and chain in PEM format, in order so that each record directly certifies the one preceding"""  
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Resource was created (in ISO-8601 format)"""  
    domain_names: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain_names') }})
    r"""Domains and subdomains covered by the Certificate"""  
    fingerprint: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fingerprint') }})
    r"""SHA256 fingerprint of the Certificate"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    labels: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""User-defined labels (key-value pairs)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Resource. Must be unique per Project."""  
    not_valid_after: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('not_valid_after') }})
    r"""Point in time when the Certificate stops being valid (in ISO-8601 format)"""  
    not_valid_before: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('not_valid_before') }})
    r"""Point in time when the Certificate becomes valid (in ISO-8601 format)"""  
    used_by: list[GetCertificatesCertificatesResponseCertificateUsedBy] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used_by') }})
    r"""Resources currently using the Certificate"""  
    status: Optional[GetCertificatesCertificatesResponseCertificateStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates"""  
    type: Optional[GetCertificatesCertificatesResponseCertificateTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the Certificate"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCertificatesCertificatesResponseMetaPagination:
    
    last_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_page') }})
    r"""ID of the last page available. Can be null if the current page is the last one."""  
    next_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page') }})
    r"""ID of the next page. Can be null if the current page is the last one."""  
    page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page') }})
    r"""Current page number"""  
    per_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per_page') }})
    r"""Maximum number of items shown per page in the response"""  
    previous_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_page') }})
    r"""ID of the previous page. Can be null if the current page is the first one."""  
    total_entries: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_entries') }})
    r"""The total number of entries that exist in the database for this query. Nullable if unknown."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCertificatesCertificatesResponseMeta:
    
    pagination: GetCertificatesCertificatesResponseMetaPagination = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pagination') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCertificatesCertificatesResponse:
    r"""The `certificates` key contains an array of Certificate objects"""
    
    certificates: list[GetCertificatesCertificatesResponseCertificate] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificates') }})  
    meta: Optional[GetCertificatesCertificatesResponseMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetCertificatesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    certificates_response: Optional[GetCertificatesCertificatesResponse] = dataclasses.field(default=None)
    r"""The `certificates` key contains an array of Certificate objects"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    