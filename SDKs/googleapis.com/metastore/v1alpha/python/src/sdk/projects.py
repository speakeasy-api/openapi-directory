"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def metastore_projects_locations_federations_create(self, request: operations.MetastoreProjectsLocationsFederationsCreateRequest, security: operations.MetastoreProjectsLocationsFederationsCreateSecurity) -> operations.MetastoreProjectsLocationsFederationsCreateResponse:
        r"""Creates a metastore federation in a project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsFederationsCreateRequest, base_url, '/v1alpha/{parent}/federations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "federation_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsFederationsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsFederationsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def metastore_projects_locations_federations_list(self, request: operations.MetastoreProjectsLocationsFederationsListRequest, security: operations.MetastoreProjectsLocationsFederationsListSecurity) -> operations.MetastoreProjectsLocationsFederationsListResponse:
        r"""Lists federations in a project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsFederationsListRequest, base_url, '/v1alpha/{parent}/federations', request)
        
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsFederationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsFederationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListFederationsResponse])
                res.list_federations_response = out

        return res

    def metastore_projects_locations_list(self, request: operations.MetastoreProjectsLocationsListRequest, security: operations.MetastoreProjectsLocationsListSecurity) -> operations.MetastoreProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsListRequest, base_url, '/v1alpha/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def metastore_projects_locations_operations_cancel(self, request: operations.MetastoreProjectsLocationsOperationsCancelRequest, security: operations.MetastoreProjectsLocationsOperationsCancelSecurity) -> operations.MetastoreProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsOperationsCancelRequest, base_url, '/v1alpha/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def metastore_projects_locations_operations_list(self, request: operations.MetastoreProjectsLocationsOperationsListRequest, security: operations.MetastoreProjectsLocationsOperationsListSecurity) -> operations.MetastoreProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsOperationsListRequest, base_url, '/v1alpha/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    def metastore_projects_locations_services_alter_location(self, request: operations.MetastoreProjectsLocationsServicesAlterLocationRequest, security: operations.MetastoreProjectsLocationsServicesAlterLocationSecurity) -> operations.MetastoreProjectsLocationsServicesAlterLocationResponse:
        r"""Alter metadata resource location. The metadata resource can be a database, table, or partition. This functionality only updates the parent directory for the respective metadata resource and does not transfer any existing data to the new location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesAlterLocationRequest, base_url, '/v1alpha/{service}:alterLocation', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "alter_metadata_resource_location_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesAlterLocationRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesAlterLocationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def metastore_projects_locations_services_backups_create(self, request: operations.MetastoreProjectsLocationsServicesBackupsCreateRequest, security: operations.MetastoreProjectsLocationsServicesBackupsCreateSecurity) -> operations.MetastoreProjectsLocationsServicesBackupsCreateResponse:
        r"""Creates a new backup in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesBackupsCreateRequest, base_url, '/v1alpha/{parent}/backups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "backup_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesBackupsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesBackupsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def metastore_projects_locations_services_backups_delete(self, request: operations.MetastoreProjectsLocationsServicesBackupsDeleteRequest, security: operations.MetastoreProjectsLocationsServicesBackupsDeleteSecurity) -> operations.MetastoreProjectsLocationsServicesBackupsDeleteResponse:
        r"""Deletes a single backup."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesBackupsDeleteRequest, base_url, '/v1alpha/{name}', request)
        
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesBackupsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesBackupsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def metastore_projects_locations_services_backups_list(self, request: operations.MetastoreProjectsLocationsServicesBackupsListRequest, security: operations.MetastoreProjectsLocationsServicesBackupsListSecurity) -> operations.MetastoreProjectsLocationsServicesBackupsListResponse:
        r"""Lists backups in a service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesBackupsListRequest, base_url, '/v1alpha/{parent}/backups', request)
        
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesBackupsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesBackupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListBackupsResponse])
                res.list_backups_response = out

        return res

    def metastore_projects_locations_services_create(self, request: operations.MetastoreProjectsLocationsServicesCreateRequest, security: operations.MetastoreProjectsLocationsServicesCreateSecurity) -> operations.MetastoreProjectsLocationsServicesCreateResponse:
        r"""Creates a metastore service in a project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesCreateRequest, base_url, '/v1alpha/{parent}/services', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "service_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def metastore_projects_locations_services_databases_tables_get_iam_policy(self, request: operations.MetastoreProjectsLocationsServicesDatabasesTablesGetIamPolicyRequest, security: operations.MetastoreProjectsLocationsServicesDatabasesTablesGetIamPolicySecurity) -> operations.MetastoreProjectsLocationsServicesDatabasesTablesGetIamPolicyResponse:
        r"""Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesDatabasesTablesGetIamPolicyRequest, base_url, '/v1alpha/{resource}:getIamPolicy', request)
        
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesDatabasesTablesGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesDatabasesTablesGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def metastore_projects_locations_services_databases_tables_set_iam_policy(self, request: operations.MetastoreProjectsLocationsServicesDatabasesTablesSetIamPolicyRequest, security: operations.MetastoreProjectsLocationsServicesDatabasesTablesSetIamPolicySecurity) -> operations.MetastoreProjectsLocationsServicesDatabasesTablesSetIamPolicyResponse:
        r"""Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesDatabasesTablesSetIamPolicyRequest, base_url, '/v1alpha/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesDatabasesTablesSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesDatabasesTablesSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def metastore_projects_locations_services_databases_tables_test_iam_permissions(self, request: operations.MetastoreProjectsLocationsServicesDatabasesTablesTestIamPermissionsRequest, security: operations.MetastoreProjectsLocationsServicesDatabasesTablesTestIamPermissionsSecurity) -> operations.MetastoreProjectsLocationsServicesDatabasesTablesTestIamPermissionsResponse:
        r"""Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \\"fail open\\" without warning."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesDatabasesTablesTestIamPermissionsRequest, base_url, '/v1alpha/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesDatabasesTablesTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesDatabasesTablesTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestIamPermissionsResponse])
                res.test_iam_permissions_response = out

        return res

    def metastore_projects_locations_services_export_metadata(self, request: operations.MetastoreProjectsLocationsServicesExportMetadataRequest, security: operations.MetastoreProjectsLocationsServicesExportMetadataSecurity) -> operations.MetastoreProjectsLocationsServicesExportMetadataResponse:
        r"""Exports metadata from a service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesExportMetadataRequest, base_url, '/v1alpha/{service}:exportMetadata', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "export_metadata_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesExportMetadataRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesExportMetadataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def metastore_projects_locations_services_list(self, request: operations.MetastoreProjectsLocationsServicesListRequest, security: operations.MetastoreProjectsLocationsServicesListSecurity) -> operations.MetastoreProjectsLocationsServicesListResponse:
        r"""Lists services in a project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesListRequest, base_url, '/v1alpha/{parent}/services', request)
        
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListServicesResponse])
                res.list_services_response = out

        return res

    def metastore_projects_locations_services_metadata_imports_create(self, request: operations.MetastoreProjectsLocationsServicesMetadataImportsCreateRequest, security: operations.MetastoreProjectsLocationsServicesMetadataImportsCreateSecurity) -> operations.MetastoreProjectsLocationsServicesMetadataImportsCreateResponse:
        r"""Creates a new MetadataImport in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesMetadataImportsCreateRequest, base_url, '/v1alpha/{parent}/metadataImports', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "metadata_import_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesMetadataImportsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesMetadataImportsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def metastore_projects_locations_services_metadata_imports_get(self, request: operations.MetastoreProjectsLocationsServicesMetadataImportsGetRequest, security: operations.MetastoreProjectsLocationsServicesMetadataImportsGetSecurity) -> operations.MetastoreProjectsLocationsServicesMetadataImportsGetResponse:
        r"""Gets details of a single import."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesMetadataImportsGetRequest, base_url, '/v1alpha/{name}', request)
        
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesMetadataImportsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesMetadataImportsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MetadataImport])
                res.metadata_import = out

        return res

    def metastore_projects_locations_services_metadata_imports_list(self, request: operations.MetastoreProjectsLocationsServicesMetadataImportsListRequest, security: operations.MetastoreProjectsLocationsServicesMetadataImportsListSecurity) -> operations.MetastoreProjectsLocationsServicesMetadataImportsListResponse:
        r"""Lists imports in a service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesMetadataImportsListRequest, base_url, '/v1alpha/{parent}/metadataImports', request)
        
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesMetadataImportsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesMetadataImportsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListMetadataImportsResponse])
                res.list_metadata_imports_response = out

        return res

    def metastore_projects_locations_services_metadata_imports_patch(self, request: operations.MetastoreProjectsLocationsServicesMetadataImportsPatchRequest, security: operations.MetastoreProjectsLocationsServicesMetadataImportsPatchSecurity) -> operations.MetastoreProjectsLocationsServicesMetadataImportsPatchResponse:
        r"""Updates a single import. Only the description field of MetadataImport is supported to be updated."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesMetadataImportsPatchRequest, base_url, '/v1alpha/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "metadata_import_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesMetadataImportsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesMetadataImportsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def metastore_projects_locations_services_move_table_to_database(self, request: operations.MetastoreProjectsLocationsServicesMoveTableToDatabaseRequest, security: operations.MetastoreProjectsLocationsServicesMoveTableToDatabaseSecurity) -> operations.MetastoreProjectsLocationsServicesMoveTableToDatabaseResponse:
        r"""Move a table to another database."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesMoveTableToDatabaseRequest, base_url, '/v1alpha/{service}:moveTableToDatabase', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "move_table_to_database_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesMoveTableToDatabaseRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesMoveTableToDatabaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def metastore_projects_locations_services_query_metadata(self, request: operations.MetastoreProjectsLocationsServicesQueryMetadataRequest, security: operations.MetastoreProjectsLocationsServicesQueryMetadataSecurity) -> operations.MetastoreProjectsLocationsServicesQueryMetadataResponse:
        r"""Query DPMS metadata."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesQueryMetadataRequest, base_url, '/v1alpha/{service}:queryMetadata', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "query_metadata_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesQueryMetadataRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesQueryMetadataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def metastore_projects_locations_services_remove_iam_policy(self, request: operations.MetastoreProjectsLocationsServicesRemoveIamPolicyRequest, security: operations.MetastoreProjectsLocationsServicesRemoveIamPolicySecurity) -> operations.MetastoreProjectsLocationsServicesRemoveIamPolicyResponse:
        r"""Removes the attached IAM policies for a resource"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesRemoveIamPolicyRequest, base_url, '/v1alpha/{resource}:removeIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "remove_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesRemoveIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesRemoveIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RemoveIamPolicyResponse])
                res.remove_iam_policy_response = out

        return res

    def metastore_projects_locations_services_restore(self, request: operations.MetastoreProjectsLocationsServicesRestoreRequest, security: operations.MetastoreProjectsLocationsServicesRestoreSecurity) -> operations.MetastoreProjectsLocationsServicesRestoreResponse:
        r"""Restores a service from a backup."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MetastoreProjectsLocationsServicesRestoreRequest, base_url, '/v1alpha/{service}:restore', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "restore_service_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MetastoreProjectsLocationsServicesRestoreRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MetastoreProjectsLocationsServicesRestoreResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    