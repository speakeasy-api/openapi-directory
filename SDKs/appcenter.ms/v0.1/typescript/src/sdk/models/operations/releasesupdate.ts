/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class ReleasesUpdateSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

/**
 * Contains metadata about the build that produced the release being uploaded
 */
export class ReleasesUpdateRequestBodyBuild extends SpeakeasyBase {
  /**
   * The branch name of the build producing the release
   */
  @SpeakeasyMetadata()
  branchName?: string;

  /**
   * The commit hash of the build producing the release
   */
  @SpeakeasyMetadata()
  commitHash?: string;

  /**
   * The commit message of the build producing the release
   */
  @SpeakeasyMetadata()
  commitMessage?: string;
}

/**
 * A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.
 */
export class ReleasesUpdateRequestBodyDestinations extends SpeakeasyBase {
  /**
   * Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.
   */
  @SpeakeasyMetadata()
  name?: string;
}

/**
 * An object containing all the release metadata.
 */
export class ReleasesUpdateRequestBodyMetadata extends SpeakeasyBase {
  /**
   * dsa signature of the release for the sparkle feed.
   */
  @SpeakeasyMetadata()
  dsaSignature?: string;

  /**
   * edDSA signature of the release for the sparkle feed.
   */
  @SpeakeasyMetadata()
  edSignature?: string;
}

/**
 * A request containing information for updating a release.
 */
export class ReleasesUpdateRequestBody extends SpeakeasyBase {
  /**
   * Contains metadata about the build that produced the release being uploaded
   */
  @SpeakeasyMetadata()
  build?: ReleasesUpdateRequestBodyBuild;

  /**
   * OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both destination name and id are passed, the id is taking precedence.
   */
  @SpeakeasyMetadata()
  destinationId?: string;

  /**
   * OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
   */
  @SpeakeasyMetadata()
  destinationName?: string;

  /**
   * Not used anymore.
   */
  @SpeakeasyMetadata()
  destinationType?: string;

  /**
   * Distribute this release under the following list of destinations (store groups or distribution groups).
   */
  @SpeakeasyMetadata({ elemType: ReleasesUpdateRequestBodyDestinations })
  destinations?: ReleasesUpdateRequestBodyDestinations[];

  /**
   * OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
   */
  @SpeakeasyMetadata()
  distributionGroupId?: string;

  /**
   * OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
   */
  @SpeakeasyMetadata()
  distributionGroupName?: string;

  /**
   * A boolean which determines whether this version should be a mandatory update or not.
   */
  @SpeakeasyMetadata()
  mandatoryUpdate?: boolean;

  /**
   * An object containing all the release metadata.
   */
  @SpeakeasyMetadata()
  metadata?: ReleasesUpdateRequestBodyMetadata;

  /**
   * A boolean which determines whether to notify testers of a new release, default to true.
   */
  @SpeakeasyMetadata()
  notifyTesters?: boolean;

  /**
   * Release notes for this release.
   */
  @SpeakeasyMetadata()
  releaseNotes?: string;
}

export class ReleasesUpdateRequest extends SpeakeasyBase {
  /**
   * The release information.
   */
  @SpeakeasyMetadata({ data: "request, media_type=text/plain" })
  requestBody: Uint8Array;

  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;

  /**
   * The ID of the release
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=release_id",
  })
  releaseId: number;
}

export enum ReleasesUpdate404ApplicationJSONCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

/**
 * Release not found
 */
export class ReleasesUpdate404ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: ReleasesUpdate404ApplicationJSONCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export enum ReleasesUpdate400ApplicationJSONCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

export class ReleasesUpdate400ApplicationJSONDestinations extends SpeakeasyBase {
  /**
   * Error Codes:<br>
   *
   * @remarks
   * <b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>
   * <b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>
   * <b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>
   * <b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>
   * <b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>
   * <b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>
   * <b>store_release_not_found</b>: App with the given package name is not found in the store.<br>
   * <b>store_release_not_available</b>: The release is not available.<br>
   * <b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Failure
 */
export class ReleasesUpdate400ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: ReleasesUpdate400ApplicationJSONCodeEnum;

  @SpeakeasyMetadata({ elemType: ReleasesUpdate400ApplicationJSONDestinations })
  @Expose({ name: "destinations" })
  @Type(() => ReleasesUpdate400ApplicationJSONDestinations)
  destinations?: ReleasesUpdate400ApplicationJSONDestinations[];

  @SpeakeasyMetadata()
  @Expose({ name: "mandatory_update" })
  mandatoryUpdate?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;

  @SpeakeasyMetadata()
  @Expose({ name: "release_notes" })
  releaseNotes?: string;
}

/**
 * Response for updating release details
 */
export class ReleasesUpdate200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "release_notes" })
  releaseNotes?: string;
}

export class ReleasesUpdateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  releasesUpdate200ApplicationJSONObject?: ReleasesUpdate200ApplicationJSON;

  /**
   * Failure
   */
  @SpeakeasyMetadata()
  releasesUpdate400ApplicationJSONObject?: ReleasesUpdate400ApplicationJSON;

  /**
   * Release not found
   */
  @SpeakeasyMetadata()
  releasesUpdate404ApplicationJSONObject?: ReleasesUpdate404ApplicationJSON;
}
