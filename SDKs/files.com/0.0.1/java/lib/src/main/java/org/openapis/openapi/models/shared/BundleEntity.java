/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * BundleEntity - Create Bundle
 */
public class BundleEntity {
    /**
     * Legal text that must be agreed to prior to accessing Bundle.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clickwrap_body")
    public String clickwrapBody;
    public BundleEntity withClickwrapBody(String clickwrapBody) {
        this.clickwrapBody = clickwrapBody;
        return this;
    }
    
    /**
     * ID of the clickwrap to use with this bundle.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clickwrap_id")
    public Integer clickwrapId;
    public BundleEntity withClickwrapId(Integer clickwrapId) {
        this.clickwrapId = clickwrapId;
        return this;
    }
    
    /**
     * Bundle code.  This code forms the end part of the Public URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public String code;
    public BundleEntity withCode(String code) {
        this.code = code;
        return this;
    }
    
    /**
     * Bundle created at date/time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public BundleEntity withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Public description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public BundleEntity withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dont_separate_submissions_by_folder")
    public Boolean dontSeparateSubmissionsByFolder;
    public BundleEntity withDontSeparateSubmissionsByFolder(Boolean dontSeparateSubmissionsByFolder) {
        this.dontSeparateSubmissionsByFolder = dontSeparateSubmissionsByFolder;
        return this;
    }
    
    /**
     * Bundle expiration date/time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expires_at")
    public OffsetDateTime expiresAt;
    public BundleEntity withExpiresAt(OffsetDateTime expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }
    
    /**
     * List Form Field Sets
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("form_field_set")
    public FormFieldSetEntity formFieldSet;
    public BundleEntity withFormFieldSet(FormFieldSetEntity formFieldSet) {
        this.formFieldSet = formFieldSet;
        return this;
    }
    
    /**
     * Does this bundle have an associated inbox?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_inbox")
    public Boolean hasInbox;
    public BundleEntity withHasInbox(Boolean hasInbox) {
        this.hasInbox = hasInbox;
        return this;
    }
    
    /**
     * Bundle ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;
    public BundleEntity withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * ID of the associated inbox, if available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inbox_id")
    public Integer inboxId;
    public BundleEntity withInboxId(Integer inboxId) {
        this.inboxId = inboxId;
        return this;
    }
    
    /**
     * Maximum number of times bundle can be accessed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_uses")
    public Integer maxUses;
    public BundleEntity withMaxUses(Integer maxUses) {
        this.maxUses = maxUses;
        return this;
    }
    
    /**
     * Bundle internal note
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    public String note;
    public BundleEntity withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * Is this bundle password protected?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_protected")
    public Boolean passwordProtected;
    public BundleEntity withPasswordProtected(Boolean passwordProtected) {
        this.passwordProtected = passwordProtected;
        return this;
    }
    
    /**
     * Template for creating submission subfolders. Can use the uploader's name, email address, ip, company, and any custom form data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path_template")
    public String pathTemplate;
    public BundleEntity withPathTemplate(String pathTemplate) {
        this.pathTemplate = pathTemplate;
        return this;
    }
    
    /**
     * A list of paths in this bundle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paths")
    public String[] paths;
    public BundleEntity withPaths(String[] paths) {
        this.paths = paths;
        return this;
    }
    
    /**
     * Permissions that apply to Folders in this Share Link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    public BundleEntityPermissionsEnum permissions;
    public BundleEntity withPermissions(BundleEntityPermissionsEnum permissions) {
        this.permissions = permissions;
        return this;
    }
    
    /**
     * Restrict users to previewing files only?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preview_only")
    public Boolean previewOnly;
    public BundleEntity withPreviewOnly(Boolean previewOnly) {
        this.previewOnly = previewOnly;
        return this;
    }
    
    /**
     * Show a registration page that captures the downloader's name and email address?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_registration")
    public Boolean requireRegistration;
    public BundleEntity withRequireRegistration(Boolean requireRegistration) {
        this.requireRegistration = requireRegistration;
        return this;
    }
    
    /**
     * Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_share_recipient")
    public Boolean requireShareRecipient;
    public BundleEntity withRequireShareRecipient(Boolean requireShareRecipient) {
        this.requireShareRecipient = requireShareRecipient;
        return this;
    }
    
    /**
     * Send delivery receipt to the uploader. Note: For writable share only
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("send_email_receipt_to_uploader")
    public Boolean sendEmailReceiptToUploader;
    public BundleEntity withSendEmailReceiptToUploader(Boolean sendEmailReceiptToUploader) {
        this.sendEmailReceiptToUploader = sendEmailReceiptToUploader;
        return this;
    }
    
    /**
     * BundleRegistrations can be saved without providing company?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip_company")
    public Boolean skipCompany;
    public BundleEntity withSkipCompany(Boolean skipCompany) {
        this.skipCompany = skipCompany;
        return this;
    }
    
    /**
     * BundleRegistrations can be saved without providing email?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip_email")
    public Boolean skipEmail;
    public BundleEntity withSkipEmail(Boolean skipEmail) {
        this.skipEmail = skipEmail;
        return this;
    }
    
    /**
     * BundleRegistrations can be saved without providing name?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip_name")
    public Boolean skipName;
    public BundleEntity withSkipName(Boolean skipName) {
        this.skipName = skipName;
        return this;
    }
    
    /**
     * Public URL of Share Link
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public BundleEntity withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Bundle creator user ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public Integer userId;
    public BundleEntity withUserId(Integer userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * Bundle creator username
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;
    public BundleEntity withUsername(String username) {
        this.username = username;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("watermark_attachment")
    public ImageEntity watermarkAttachment;
    public BundleEntity withWatermarkAttachment(ImageEntity watermarkAttachment) {
        this.watermarkAttachment = watermarkAttachment;
        return this;
    }
    
    /**
     * Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("watermark_value")
    public java.util.Map<String, Object> watermarkValue;
    public BundleEntity withWatermarkValue(java.util.Map<String, Object> watermarkValue) {
        this.watermarkValue = watermarkValue;
        return this;
    }
    
}
