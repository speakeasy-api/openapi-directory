"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import contactsettings as shared_contactsettings
from ..shared import dnssettings as shared_dnssettings
from ..shared import managementsettings as shared_managementsettings
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RegistrationInput:
    r"""The `Registration` resource facilitates managing and configuring domain name registrations. There are several ways to create a new `Registration` resource: To create a new `Registration` resource, find a suitable domain name by calling the `SearchDomains` method with a query to see available domain name options. After choosing a name, call `RetrieveRegisterParameters` to ensure availability and obtain information like pricing, which is needed to build a call to `RegisterDomain`. Another way to create a new `Registration` is to transfer an existing domain from another registrar. First, go to the current registrar to unlock the domain for transfer and retrieve the domain's transfer authorization code. Then call `RetrieveTransferParameters` to confirm that the domain is unlocked and to get values needed to build a call to `TransferDomain`. Finally, you can create a new `Registration` by importing an existing domain managed with [Google Domains](https://domains.google/). First, call `RetrieveImportableDomains` to list domains to which the calling user has sufficient access. Then call `ImportDomain` on any domain names you want to use with Cloud Domains."""
    
    contact_settings: Optional[shared_contactsettings.ContactSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contactSettings'), 'exclude': lambda f: f is None }})
    r"""Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical."""  
    dns_settings: Optional[shared_dnssettings.DNSSettingsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dnsSettings'), 'exclude': lambda f: f is None }})
    r"""Defines the DNS configuration of a `Registration`, including name servers, DNSSEC, and glue records."""  
    domain_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainName'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The domain name. Unicode domain names must be expressed in Punycode format."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Set of labels associated with the `Registration`."""  
    management_settings: Optional[shared_managementsettings.ManagementSettingsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managementSettings'), 'exclude': lambda f: f is None }})
    r"""Defines renewal, billing, and transfer settings for a `Registration`."""  
    pending_contact_settings: Optional[shared_contactsettings.ContactSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pendingContactSettings'), 'exclude': lambda f: f is None }})
    r"""Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical."""  
    
class RegistrationIssuesEnum(str, Enum):
    ISSUE_UNSPECIFIED = 'ISSUE_UNSPECIFIED'
    CONTACT_SUPPORT = 'CONTACT_SUPPORT'
    UNVERIFIED_EMAIL = 'UNVERIFIED_EMAIL'

class RegistrationRegisterFailureReasonEnum(str, Enum):
    r"""Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state."""
    REGISTER_FAILURE_REASON_UNSPECIFIED = 'REGISTER_FAILURE_REASON_UNSPECIFIED'
    REGISTER_FAILURE_REASON_UNKNOWN = 'REGISTER_FAILURE_REASON_UNKNOWN'
    DOMAIN_NOT_AVAILABLE = 'DOMAIN_NOT_AVAILABLE'
    INVALID_CONTACTS = 'INVALID_CONTACTS'

class RegistrationStateEnum(str, Enum):
    r"""Output only. The state of the `Registration`"""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    REGISTRATION_PENDING = 'REGISTRATION_PENDING'
    REGISTRATION_FAILED = 'REGISTRATION_FAILED'
    TRANSFER_PENDING = 'TRANSFER_PENDING'
    TRANSFER_FAILED = 'TRANSFER_FAILED'
    IMPORT_PENDING = 'IMPORT_PENDING'
    ACTIVE = 'ACTIVE'
    SUSPENDED = 'SUSPENDED'
    EXPORTED = 'EXPORTED'

class RegistrationSupportedPrivacyEnum(str, Enum):
    CONTACT_PRIVACY_UNSPECIFIED = 'CONTACT_PRIVACY_UNSPECIFIED'
    PUBLIC_CONTACT_DATA = 'PUBLIC_CONTACT_DATA'
    PRIVATE_CONTACT_DATA = 'PRIVATE_CONTACT_DATA'
    REDACTED_CONTACT_DATA = 'REDACTED_CONTACT_DATA'

class RegistrationTransferFailureReasonEnum(str, Enum):
    r"""Output only. The reason the domain transfer failed. Only set for domains in TRANSFER_FAILED state."""
    TRANSFER_FAILURE_REASON_UNSPECIFIED = 'TRANSFER_FAILURE_REASON_UNSPECIFIED'
    TRANSFER_FAILURE_REASON_UNKNOWN = 'TRANSFER_FAILURE_REASON_UNKNOWN'
    EMAIL_CONFIRMATION_FAILURE = 'EMAIL_CONFIRMATION_FAILURE'
    DOMAIN_NOT_REGISTERED = 'DOMAIN_NOT_REGISTERED'
    DOMAIN_HAS_TRANSFER_LOCK = 'DOMAIN_HAS_TRANSFER_LOCK'
    INVALID_AUTHORIZATION_CODE = 'INVALID_AUTHORIZATION_CODE'
    TRANSFER_CANCELLED = 'TRANSFER_CANCELLED'
    TRANSFER_REJECTED = 'TRANSFER_REJECTED'
    INVALID_REGISTRANT_EMAIL_ADDRESS = 'INVALID_REGISTRANT_EMAIL_ADDRESS'
    DOMAIN_NOT_ELIGIBLE_FOR_TRANSFER = 'DOMAIN_NOT_ELIGIBLE_FOR_TRANSFER'
    TRANSFER_ALREADY_PENDING = 'TRANSFER_ALREADY_PENDING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Registration:
    r"""The `Registration` resource facilitates managing and configuring domain name registrations. There are several ways to create a new `Registration` resource: To create a new `Registration` resource, find a suitable domain name by calling the `SearchDomains` method with a query to see available domain name options. After choosing a name, call `RetrieveRegisterParameters` to ensure availability and obtain information like pricing, which is needed to build a call to `RegisterDomain`. Another way to create a new `Registration` is to transfer an existing domain from another registrar. First, go to the current registrar to unlock the domain for transfer and retrieve the domain's transfer authorization code. Then call `RetrieveTransferParameters` to confirm that the domain is unlocked and to get values needed to build a call to `TransferDomain`. Finally, you can create a new `Registration` by importing an existing domain managed with [Google Domains](https://domains.google/). First, call `RetrieveImportableDomains` to list domains to which the calling user has sufficient access. Then call `ImportDomain` on any domain names you want to use with Cloud Domains."""
    
    contact_settings: Optional[shared_contactsettings.ContactSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contactSettings'), 'exclude': lambda f: f is None }})
    r"""Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The creation timestamp of the `Registration` resource."""  
    dns_settings: Optional[shared_dnssettings.DNSSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dnsSettings'), 'exclude': lambda f: f is None }})
    r"""Defines the DNS configuration of a `Registration`, including name servers, DNSSEC, and glue records."""  
    domain_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainName'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The domain name. Unicode domain names must be expressed in Punycode format."""  
    expire_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expireTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The expiration timestamp of the `Registration`."""  
    issues: Optional[list[RegistrationIssuesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issues'), 'exclude': lambda f: f is None }})
    r"""Output only. The set of issues with the `Registration` that require attention."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Set of labels associated with the `Registration`."""  
    management_settings: Optional[shared_managementsettings.ManagementSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managementSettings'), 'exclude': lambda f: f is None }})
    r"""Defines renewal, billing, and transfer settings for a `Registration`."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Name of the `Registration` resource, in the format `projects/*/locations/*/registrations/`."""  
    pending_contact_settings: Optional[shared_contactsettings.ContactSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pendingContactSettings'), 'exclude': lambda f: f is None }})
    r"""Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical."""  
    register_failure_reason: Optional[RegistrationRegisterFailureReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registerFailureReason'), 'exclude': lambda f: f is None }})
    r"""Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state."""  
    state: Optional[RegistrationStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The state of the `Registration`"""  
    supported_privacy: Optional[list[RegistrationSupportedPrivacyEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedPrivacy'), 'exclude': lambda f: f is None }})
    r"""Output only. Set of options for the `contact_settings.privacy` field that this `Registration` supports."""  
    transfer_failure_reason: Optional[RegistrationTransferFailureReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transferFailureReason'), 'exclude': lambda f: f is None }})
    r"""Output only. The reason the domain transfer failed. Only set for domains in TRANSFER_FAILED state."""  
    