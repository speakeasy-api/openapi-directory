// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NameAndKindKindEnum - Counter aggregation kind.
type NameAndKindKindEnum string

const (
	NameAndKindKindEnumInvalid      NameAndKindKindEnum = "INVALID"
	NameAndKindKindEnumSum          NameAndKindKindEnum = "SUM"
	NameAndKindKindEnumMax          NameAndKindKindEnum = "MAX"
	NameAndKindKindEnumMin          NameAndKindKindEnum = "MIN"
	NameAndKindKindEnumMean         NameAndKindKindEnum = "MEAN"
	NameAndKindKindEnumOr           NameAndKindKindEnum = "OR"
	NameAndKindKindEnumAnd          NameAndKindKindEnum = "AND"
	NameAndKindKindEnumSet          NameAndKindKindEnum = "SET"
	NameAndKindKindEnumDistribution NameAndKindKindEnum = "DISTRIBUTION"
	NameAndKindKindEnumLatestValue  NameAndKindKindEnum = "LATEST_VALUE"
)

func (e NameAndKindKindEnum) ToPointer() *NameAndKindKindEnum {
	return &e
}

func (e *NameAndKindKindEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INVALID":
		fallthrough
	case "SUM":
		fallthrough
	case "MAX":
		fallthrough
	case "MIN":
		fallthrough
	case "MEAN":
		fallthrough
	case "OR":
		fallthrough
	case "AND":
		fallthrough
	case "SET":
		fallthrough
	case "DISTRIBUTION":
		fallthrough
	case "LATEST_VALUE":
		*e = NameAndKindKindEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameAndKindKindEnum: %v", v)
	}
}

// NameAndKind - Basic metadata about a counter.
type NameAndKind struct {
	// Counter aggregation kind.
	Kind *NameAndKindKindEnum `json:"kind,omitempty"`
	// Name of the counter.
	Name *string `json:"name,omitempty"`
}
