// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeEnvironmentManagedActionsActionEnum
type GETDescribeEnvironmentManagedActionsActionEnum string

const (
	GETDescribeEnvironmentManagedActionsActionEnumDescribeEnvironmentManagedActions GETDescribeEnvironmentManagedActionsActionEnum = "DescribeEnvironmentManagedActions"
)

func (e *GETDescribeEnvironmentManagedActionsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeEnvironmentManagedActions":
		*e = GETDescribeEnvironmentManagedActionsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeEnvironmentManagedActionsActionEnum: %s", s)
	}
}

// GETDescribeEnvironmentManagedActionsStatusEnum - To show only actions with a particular status, specify a status.
type GETDescribeEnvironmentManagedActionsStatusEnum string

const (
	GETDescribeEnvironmentManagedActionsStatusEnumScheduled GETDescribeEnvironmentManagedActionsStatusEnum = "Scheduled"
	GETDescribeEnvironmentManagedActionsStatusEnumPending   GETDescribeEnvironmentManagedActionsStatusEnum = "Pending"
	GETDescribeEnvironmentManagedActionsStatusEnumRunning   GETDescribeEnvironmentManagedActionsStatusEnum = "Running"
	GETDescribeEnvironmentManagedActionsStatusEnumUnknown   GETDescribeEnvironmentManagedActionsStatusEnum = "Unknown"
)

func (e *GETDescribeEnvironmentManagedActionsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Scheduled":
		fallthrough
	case "Pending":
		fallthrough
	case "Running":
		fallthrough
	case "Unknown":
		*e = GETDescribeEnvironmentManagedActionsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeEnvironmentManagedActionsStatusEnum: %s", s)
	}
}

// GETDescribeEnvironmentManagedActionsVersionEnum
type GETDescribeEnvironmentManagedActionsVersionEnum string

const (
	GETDescribeEnvironmentManagedActionsVersionEnumTwoThousandAndTen1201 GETDescribeEnvironmentManagedActionsVersionEnum = "2010-12-01"
)

func (e *GETDescribeEnvironmentManagedActionsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-12-01":
		*e = GETDescribeEnvironmentManagedActionsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeEnvironmentManagedActionsVersionEnum: %s", s)
	}
}

type GETDescribeEnvironmentManagedActionsRequest struct {
	Action GETDescribeEnvironmentManagedActionsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The environment ID of the target environment.
	EnvironmentID *string `queryParam:"style=form,explode=true,name=EnvironmentId"`
	// The name of the target environment.
	EnvironmentName *string `queryParam:"style=form,explode=true,name=EnvironmentName"`
	// To show only actions with a particular status, specify a status.
	Status            *GETDescribeEnvironmentManagedActionsStatusEnum `queryParam:"style=form,explode=true,name=Status"`
	Version           GETDescribeEnvironmentManagedActionsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeEnvironmentManagedActionsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
