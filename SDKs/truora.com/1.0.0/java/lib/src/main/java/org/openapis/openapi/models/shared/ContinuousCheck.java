/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * ContinuousCheck - Continuous check allows for background checks to be performed on the same people or vehicles periodically and notifies if new information is found. Allowing companies to keep an eye on their workforce or vehicle fleet for any recent wrongdoing they might be involved in.
 */
public class ContinuousCheck {
    /**
     * Continuous check ID [partition key and sort key]
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ContinuousCheckID")
    public String continuousCheckID;

    public ContinuousCheck withContinuousCheckID(String continuousCheckID) {
        this.continuousCheckID = continuousCheckID;
        return this;
    }
    
    /**
     * Shows whether the background check score rose, fell, stood the same or was just created
     */
    @JsonProperty("ContinuousCheckStatus")
    public ContinuousCheckContinuousCheckStatusEnum continuousCheckStatus;

    public ContinuousCheck withContinuousCheckStatus(ContinuousCheckContinuousCheckStatusEnum continuousCheckStatus) {
        this.continuousCheckStatus = continuousCheckStatus;
        return this;
    }
    
    /**
     * Continuous check creation date in RFC3339 format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("CreationDate")
    public LocalDate creationDate;

    public ContinuousCheck withCreationDate(LocalDate creationDate) {
        this.creationDate = creationDate;
        return this;
    }
    
    /**
     * Indicates whether continuous check is enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Enabled")
    public Boolean enabled;

    public ContinuousCheck withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * Time between background checks. It can be daily, weekly, monthly, yearly or have a custom frequency written as a number accompanied by d: day, w: week, m: month, y: year for instance: 3d: every three days, 2w: every two weeks
     */
    @JsonProperty("Frequency")
    public String frequency;

    public ContinuousCheck withFrequency(String frequency) {
        this.frequency = frequency;
        return this;
    }
    
    /**
     * Represents to changelog entry of a continuous check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("History")
    public ContinuousCheckEntry history;

    public ContinuousCheck withHistory(ContinuousCheckEntry history) {
        this.history = history;
        return this;
    }
    
    /**
     * Last check ID
     */
    @JsonProperty("LastCheckID")
    public String lastCheckID;

    public ContinuousCheck withLastCheckID(String lastCheckID) {
        this.lastCheckID = lastCheckID;
        return this;
    }
    
    /**
     * Next background check date, in RFC3339 format (without time)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("NextRunDate")
    public LocalDate nextRunDate;

    public ContinuousCheck withNextRunDate(LocalDate nextRunDate) {
        this.nextRunDate = nextRunDate;
        return this;
    }
    
    /**
     * Represents a background check
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OriginalCheck")
    public Check originalCheck;

    public ContinuousCheck withOriginalCheck(Check originalCheck) {
        this.originalCheck = originalCheck;
        return this;
    }
    
    /**
     * Continuous check update date in RFC3339 format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("UpdateDate")
    public LocalDate updateDate;

    public ContinuousCheck withUpdateDate(LocalDate updateDate) {
        this.updateDate = updateDate;
        return this;
    }
    
    public ContinuousCheck(@JsonProperty("ContinuousCheckStatus") ContinuousCheckContinuousCheckStatusEnum continuousCheckStatus, @JsonProperty("Frequency") String frequency, @JsonProperty("LastCheckID") String lastCheckID) {
        this.continuousCheckStatus = continuousCheckStatus;
        this.frequency = frequency;
        this.lastCheckID = lastCheckID;
  }
}
