<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class DirectDebits 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Activate a direct debit mandate
     * 
     * This endpoint can only be used to activate a direct debit mandate when it is in the status REJECT_REQUESTED (even if the account has direct debits disabled). This action will also enable the account for direct debits if it was previously set to be disabled.
     * The permision needed to access this endpoint is PERM_BUSINESS_POST_MANDATE_ACTIVATE
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivateMandateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivateMandateResponse
     */
	public function activateMandate(
        \OpenAPI\OpenAPI\Models\Operations\ActivateMandateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivateMandateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/mandates/{mandateUuid}/activate', \OpenAPI\OpenAPI\Models\Operations\ActivateMandateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivateMandateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Cancel a direct debit mandate
     * 
     * This endpoint allows you to cancel a direct debit mandate.
     * The permision needed to access this endpoint is PERM_BUSINESS_POST_MANDATE_CANCEL
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelMandateByUuidRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CancelMandateByUuidResponse
     */
	public function cancelMandateByUuid(
        \OpenAPI\OpenAPI\Models\Operations\CancelMandateByUuidRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CancelMandateByUuidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/mandates/{mandateUuid}/cancel', \OpenAPI\OpenAPI\Models\Operations\CancelMandateByUuidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CancelMandateByUuidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get the details of a direct debit
     * 
     * Retrieve all details of a single direct debit collection/payment, whether successful or not.
     * The permision needed to access this endpoint is **PERM_BUSINESS_GET_DIRECT_DEBIT**
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDirectDebitByUuidRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDirectDebitByUuidResponse
     */
	public function getDirectDebitByUuid(
        \OpenAPI\OpenAPI\Models\Operations\GetDirectDebitByUuidRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDirectDebitByUuidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/directdebits/{directDebitUuid}', \OpenAPI\OpenAPI\Models\Operations\GetDirectDebitByUuidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDirectDebitByUuidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->directDebit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetDirectDebitByUuidDirectDebit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all direct debit mandates
     * 
     * The permision needed to access this endpoint is PERM_BUSINESS_GET_MANDATES
     * 
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDirectDebitMandatesResponse
     */
	public function getDirectDebitMandates(
    ): \OpenAPI\OpenAPI\Models\Operations\GetDirectDebitMandatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/mandates');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDirectDebitMandatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mandates = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetDirectDebitMandatesMandates', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all DD payments associated with a direct debit mandate
     * 
     * Retrieve all direct debit payments associated with a direct debit mandate.
     * The permision needed to access this endpoint is PERM_BUSINESS_GET_DIRECT_DEBITS
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDirectDebitsForMandateUuidRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDirectDebitsForMandateUuidResponse
     */
	public function getDirectDebitsForMandateUuid(
        \OpenAPI\OpenAPI\Models\Operations\GetDirectDebitsForMandateUuidRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDirectDebitsForMandateUuidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/directdebits');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDirectDebitsForMandateUuidRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDirectDebitsForMandateUuidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->directDebits = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetDirectDebitsForMandateUuidDirectDebits', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get direct debit mandate details
     * 
     * Retrieve all details for a direct debit mandate.
     * The permision needed to access this endpoint is PERM_BUSINESS_GET_MANDATE
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMandateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMandateResponse
     */
	public function getMandate(
        \OpenAPI\OpenAPI\Models\Operations\GetMandateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMandateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/mandates/{mandateUuid}', \OpenAPI\OpenAPI\Models\Operations\GetMandateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMandateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mandate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetMandateMandate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reject a direct debit payment
     * 
     * This endpoint allows you to reject a direct debit payment where the status is still set to RECEIVED.
     * Permission name PERM_BUSINESS_POST_DIRECT_DEBIT_REJECT
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RejectDirectDebitRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RejectDirectDebitResponse
     */
	public function rejectDirectDebit(
        \OpenAPI\OpenAPI\Models\Operations\RejectDirectDebitRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RejectDirectDebitResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/directdebits/{directDebitUuid}/reject', \OpenAPI\OpenAPI\Models\Operations\RejectDirectDebitRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RejectDirectDebitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Update a direct debit mandate alias
     * 
     * Update Direct Debit Mandate Alias
     * The permision needed to access this endpoint is PERM_BUSINESS_PUT_MANDATE
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMandateAliasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateMandateAliasResponse
     */
	public function updateMandateAlias(
        \OpenAPI\OpenAPI\Models\Operations\UpdateMandateAliasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateMandateAliasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/mandates/{mandateUuid}', \OpenAPI\OpenAPI\Models\Operations\UpdateMandateAliasRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateMandateAliasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
}