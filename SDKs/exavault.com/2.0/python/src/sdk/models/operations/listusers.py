"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import usercollectionresponse as shared_usercollectionresponse
from typing import Optional


@dataclasses.dataclass
class ListUsersRequest:
    
    ev_access_token: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-access-token', 'style': 'simple', 'explode': False }})
    r"""Access token required to make the API call."""  
    ev_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-api-key', 'style': 'simple', 'explode': False }})
    r"""API key required to make the API call."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'email', 'style': 'form', 'explode': True }})
    r"""Email to search for. Ignored if `username` is provided. Supports wildcard searches"""  
    home_resource: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'homeResource', 'style': 'form', 'explode': True }})
    r"""Resource identifier for user's home directory. Does not support wildcard searches."""  
    include: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include', 'style': 'form', 'explode': True }})
    r"""Comma separated list of relationships to include in response. Valid options are **homeResource** and **ownerAccount**."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Number of users to return. Can be used for pagination."""  
    nickname: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nickname', 'style': 'form', 'explode': True }})
    r"""Nickname to search for. Ignored if `username` is provided. Supports wildcard searches."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Starting user record in the result set. Can be used for pagination."""  
    role: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'role', 'style': 'form', 'explode': True }})
    r"""Types of users to include the list. Ignored if `username` is provided. Valid options are **admin**, **master** and **user**"""  
    search: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search', 'style': 'form', 'explode': True }})
    r"""Searches the nickname, email, role and homeDir fields for the provided value. Ignored if `username` is provided. Supports wildcard searches."""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sort order or matching users. You can sort by multiple columns by separating sort options with a comma; the sort will be applied in the order specified. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.
    
    Valid sort fields are: **nickname**, **username**, **email**, **homeDir** and **modified**
    """  
    status: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Whether a user is locked. Ignored if `username` is provided. **0** means user is locked, **1** means user is not locked."""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'username', 'style': 'form', 'explode': True }})
    r"""The username of the user you are looking for. Only entries with the same username as this will be in the list of results. Does not support wildcard searches."""  
    

@dataclasses.dataclass
class ListUsersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    user_collection_response: Optional[shared_usercollectionresponse.UserCollectionResponse] = dataclasses.field(default=None)
    r"""Successful Operation"""  
    