// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PersonAgeRangeEnum - Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range.
type PersonAgeRangeEnum string

const (
	PersonAgeRangeEnumAgeRangeUnspecified PersonAgeRangeEnum = "AGE_RANGE_UNSPECIFIED"
	PersonAgeRangeEnumLessThanEighteen    PersonAgeRangeEnum = "LESS_THAN_EIGHTEEN"
	PersonAgeRangeEnumEighteenToTwenty    PersonAgeRangeEnum = "EIGHTEEN_TO_TWENTY"
	PersonAgeRangeEnumTwentyOneOrOlder    PersonAgeRangeEnum = "TWENTY_ONE_OR_OLDER"
)

func (e *PersonAgeRangeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AGE_RANGE_UNSPECIFIED":
		fallthrough
	case "LESS_THAN_EIGHTEEN":
		fallthrough
	case "EIGHTEEN_TO_TWENTY":
		fallthrough
	case "TWENTY_ONE_OR_OLDER":
		*e = PersonAgeRangeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PersonAgeRangeEnum: %s", s)
	}
}

// Person - Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.
type Person struct {
	// The person's street addresses.
	Addresses []Address `json:"addresses,omitempty"`
	// Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range.
	AgeRange *PersonAgeRangeEnum `json:"ageRange,omitempty"`
	// Output only. The person's age ranges.
	AgeRanges []AgeRangeType `json:"ageRanges,omitempty"`
	// The person's biographies. This field is a singleton for contact sources.
	Biographies []Biography `json:"biographies,omitempty"`
	// The person's birthdays. This field is a singleton for contact sources.
	Birthdays []Birthday `json:"birthdays,omitempty"`
	// **DEPRECATED**: No data will be returned The person's bragging rights.
	BraggingRights []BraggingRights `json:"braggingRights,omitempty"`
	// The person's calendar URLs.
	CalendarUrls []CalendarURL `json:"calendarUrls,omitempty"`
	// The person's client data.
	ClientData []ClientData `json:"clientData,omitempty"`
	// Output only. The person's cover photos.
	CoverPhotos []CoverPhoto `json:"coverPhotos,omitempty"`
	// The person's email addresses. For `people.connections.list` and `otherContacts.list` the number of email addresses is limited to 100. If a Person has more email addresses the entire set can be obtained by calling GetPeople.
	EmailAddresses []EmailAddress `json:"emailAddresses,omitempty"`
	// The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.
	Etag *string `json:"etag,omitempty"`
	// The person's events.
	Events []Event `json:"events,omitempty"`
	// The person's external IDs.
	ExternalIds []ExternalID `json:"externalIds,omitempty"`
	// The person's file-ases.
	FileAses []FileAs `json:"fileAses,omitempty"`
	// The person's genders. This field is a singleton for contact sources.
	Genders []Gender `json:"genders,omitempty"`
	// The person's instant messaging clients.
	ImClients []ImClient `json:"imClients,omitempty"`
	// The person's interests.
	Interests []Interest `json:"interests,omitempty"`
	// The person's locale preferences.
	Locales []Locale `json:"locales,omitempty"`
	// The person's locations.
	Locations []Location `json:"locations,omitempty"`
	// The person's group memberships.
	Memberships []Membership `json:"memberships,omitempty"`
	// The metadata about a person.
	Metadata *PersonMetadata `json:"metadata,omitempty"`
	// The person's miscellaneous keywords.
	MiscKeywords []MiscKeyword `json:"miscKeywords,omitempty"`
	// The person's names. This field is a singleton for contact sources.
	Names []Name `json:"names,omitempty"`
	// The person's nicknames.
	Nicknames []Nickname `json:"nicknames,omitempty"`
	// The person's occupations.
	Occupations []Occupation `json:"occupations,omitempty"`
	// The person's past or current organizations.
	Organizations []Organization `json:"organizations,omitempty"`
	// The person's phone numbers. For `people.connections.list` and `otherContacts.list` the number of phone numbers is limited to 100. If a Person has more phone numbers the entire set can be obtained by calling GetPeople.
	PhoneNumbers []PhoneNumber `json:"phoneNumbers,omitempty"`
	// Output only. The person's photos.
	Photos []Photo `json:"photos,omitempty"`
	// The person's relations.
	Relations []Relation `json:"relations,omitempty"`
	// Output only. **DEPRECATED**: No data will be returned The person's relationship interests.
	RelationshipInterests []RelationshipInterest `json:"relationshipInterests,omitempty"`
	// Output only. **DEPRECATED**: No data will be returned The person's relationship statuses.
	RelationshipStatuses []RelationshipStatus `json:"relationshipStatuses,omitempty"`
	// **DEPRECATED**: (Please use `person.locations` instead) The person's residences.
	Residences []Residence `json:"residences,omitempty"`
	// The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`.
	ResourceName *string `json:"resourceName,omitempty"`
	// The person's SIP addresses.
	SipAddresses []SipAddress `json:"sipAddresses,omitempty"`
	// The person's skills.
	Skills []Skill `json:"skills,omitempty"`
	// Output only. **DEPRECATED**: No data will be returned The person's taglines.
	Taglines []Tagline `json:"taglines,omitempty"`
	// The person's associated URLs.
	Urls []URL `json:"urls,omitempty"`
	// The person's user defined data.
	UserDefined []UserDefined `json:"userDefined,omitempty"`
}

// PersonInput - Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.
type PersonInput struct {
	// The person's street addresses.
	Addresses []AddressInput `json:"addresses,omitempty"`
	// The person's biographies. This field is a singleton for contact sources.
	Biographies []BiographyInput `json:"biographies,omitempty"`
	// The person's birthdays. This field is a singleton for contact sources.
	Birthdays []BirthdayInput `json:"birthdays,omitempty"`
	// **DEPRECATED**: No data will be returned The person's bragging rights.
	BraggingRights []BraggingRightsInput `json:"braggingRights,omitempty"`
	// The person's calendar URLs.
	CalendarUrls []CalendarURLInput `json:"calendarUrls,omitempty"`
	// The person's client data.
	ClientData []ClientDataInput `json:"clientData,omitempty"`
	// The person's email addresses. For `people.connections.list` and `otherContacts.list` the number of email addresses is limited to 100. If a Person has more email addresses the entire set can be obtained by calling GetPeople.
	EmailAddresses []EmailAddressInput `json:"emailAddresses,omitempty"`
	// The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.
	Etag *string `json:"etag,omitempty"`
	// The person's events.
	Events []EventInput `json:"events,omitempty"`
	// The person's external IDs.
	ExternalIds []ExternalIDInput `json:"externalIds,omitempty"`
	// The person's file-ases.
	FileAses []FileAsInput `json:"fileAses,omitempty"`
	// The person's genders. This field is a singleton for contact sources.
	Genders []GenderInput `json:"genders,omitempty"`
	// The person's instant messaging clients.
	ImClients []ImClientInput `json:"imClients,omitempty"`
	// The person's interests.
	Interests []InterestInput `json:"interests,omitempty"`
	// The person's locale preferences.
	Locales []LocaleInput `json:"locales,omitempty"`
	// The person's locations.
	Locations []LocationInput `json:"locations,omitempty"`
	// The person's group memberships.
	Memberships []MembershipInput `json:"memberships,omitempty"`
	// The metadata about a person.
	Metadata *PersonMetadataInput `json:"metadata,omitempty"`
	// The person's miscellaneous keywords.
	MiscKeywords []MiscKeywordInput `json:"miscKeywords,omitempty"`
	// The person's names. This field is a singleton for contact sources.
	Names []NameInput `json:"names,omitempty"`
	// The person's nicknames.
	Nicknames []NicknameInput `json:"nicknames,omitempty"`
	// The person's occupations.
	Occupations []OccupationInput `json:"occupations,omitempty"`
	// The person's past or current organizations.
	Organizations []OrganizationInput `json:"organizations,omitempty"`
	// The person's phone numbers. For `people.connections.list` and `otherContacts.list` the number of phone numbers is limited to 100. If a Person has more phone numbers the entire set can be obtained by calling GetPeople.
	PhoneNumbers []PhoneNumberInput `json:"phoneNumbers,omitempty"`
	// The person's relations.
	Relations []RelationInput `json:"relations,omitempty"`
	// **DEPRECATED**: (Please use `person.locations` instead) The person's residences.
	Residences []ResidenceInput `json:"residences,omitempty"`
	// The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`.
	ResourceName *string `json:"resourceName,omitempty"`
	// The person's SIP addresses.
	SipAddresses []SipAddressInput `json:"sipAddresses,omitempty"`
	// The person's skills.
	Skills []SkillInput `json:"skills,omitempty"`
	// The person's associated URLs.
	Urls []URLInput `json:"urls,omitempty"`
	// The person's user defined data.
	UserDefined []UserDefinedInput `json:"userDefined,omitempty"`
}
