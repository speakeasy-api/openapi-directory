"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class GeonamesPlaceDatasetEnum(str, Enum):
    GEONAMES = 'geonames'

class GeonamesPlaceFeatureClassEnum(str, Enum):
    r"""GeoNames single letter feature code"""
    A = 'A'
    H = 'H'
    L = 'L'
    P = 'P'
    R = 'R'
    S = 'S'
    T = 'T'
    U = 'U'
    V = 'V'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GeonamesPlace:
    r"""Full GeoNames place specification"""
    
    admin1_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin1_code') }})
    r"""Fipscode (subject to change to iso code)"""  
    admin1_geonameid: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin1_geonameid') }})
    r"""GeoName ID for first administrative area"""  
    admin1_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin1_name') }})
    r"""Name of first administrative area"""  
    admin2_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin2_code') }})
    r"""Code for the second administrative division"""  
    admin2_geonameid: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin2_geonameid') }})
    r"""GeoName ID for second administrative area"""  
    admin2_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin2_name') }})
    r"""Name of second administrative area"""  
    admin3_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin3_code') }})
    r"""Code for third level administrative division"""  
    admin4_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin4_code') }})
    r"""Code for fourth level administrative division"""  
    alternatenames: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternatenames') }})
    r"""List of alternate ASCII names"""  
    asciiname: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asciiname') }})
    r"""Place Name (ASCII)"""  
    cc2: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cc2') }})
    r"""List of other countries codes mapping to this place"""  
    country_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country_code') }})
    r"""2 Letter ISO country code"""  
    dem: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dem') }})
    r"""Digital elevation model"""  
    elevation: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elevation') }})
    r"""Elevation in meters"""  
    feature_class: GeonamesPlaceFeatureClassEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feature_class') }})
    r"""GeoNames single letter feature code"""  
    feature_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feature_code') }})
    r"""Full GeoNames feature code (http://www.geonames.org/export/codes.html)"""  
    geonameid: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geonameid') }})
    r"""Unique identifier for GeoNames place"""  
    latitude: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    r"""The latitude of the postcode (WGS84/ETRS89).
    
    Can be a positive or negative decimal. E.g. `51.5083983`.
    
    Returns an empty string if no location data is available.
    """  
    longitude: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    r"""The longitude of the postcode (WGS84/ETRS89).
    
    Can be a positive or negative decimal. E.g. -0.1283983
    
    Returns an empty string if no location data is available.
    """  
    modification_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modification_date') }})
    r"""Datetime format"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Place name (UTF8)"""  
    population: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('population') }})
    r"""Population at place. Represented as string as it could be a larger than a 32bit integer"""  
    timezone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone') }})
    r"""The IANA timezone ID"""  
    dataset: Optional[GeonamesPlaceDatasetEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataset'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique place ID"""  
    