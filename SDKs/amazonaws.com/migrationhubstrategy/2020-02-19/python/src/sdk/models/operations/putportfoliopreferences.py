"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import businessgoals as shared_businessgoals
from ..shared import databasemanagementpreference_enum as shared_databasemanagementpreference_enum
from ..shared import databasemigrationpreference as shared_databasemigrationpreference
from ..shared import managementpreference as shared_managementpreference
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PutPortfolioPreferencesRequestBodyApplicationModeEnum(str, Enum):
    r"""The classification for application component types."""
    ALL = 'ALL'
    KNOWN = 'KNOWN'
    UNKNOWN = 'UNKNOWN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutPortfolioPreferencesRequestBodyApplicationPreferences:
    r"""Application preferences that you specify."""
    
    management_preference: Optional[shared_managementpreference.ManagementPreference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managementPreference'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutPortfolioPreferencesRequestBodyDatabasePreferences:
    r"""Preferences on managing your databases on AWS."""
    
    database_management_preference: Optional[shared_databasemanagementpreference_enum.DatabaseManagementPreferenceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('databaseManagementPreference'), 'exclude': lambda f: f is None }})  
    database_migration_preference: Optional[shared_databasemigrationpreference.DatabaseMigrationPreference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('databaseMigrationPreference'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutPortfolioPreferencesRequestBodyPrioritizeBusinessGoals:
    r"""Rank of business goals based on priority."""
    
    business_goals: Optional[shared_businessgoals.BusinessGoals] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessGoals'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutPortfolioPreferencesRequestBody:
    
    application_mode: Optional[PutPortfolioPreferencesRequestBodyApplicationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationMode'), 'exclude': lambda f: f is None }})
    r"""The classification for application component types."""  
    application_preferences: Optional[PutPortfolioPreferencesRequestBodyApplicationPreferences] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationPreferences'), 'exclude': lambda f: f is None }})
    r"""Application preferences that you specify."""  
    database_preferences: Optional[PutPortfolioPreferencesRequestBodyDatabasePreferences] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('databasePreferences'), 'exclude': lambda f: f is None }})
    r"""Preferences on managing your databases on AWS."""  
    prioritize_business_goals: Optional[PutPortfolioPreferencesRequestBodyPrioritizeBusinessGoals] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prioritizeBusinessGoals'), 'exclude': lambda f: f is None }})
    r"""Rank of business goals based on priority."""  
    

@dataclasses.dataclass
class PutPortfolioPreferencesRequest:
    
    request_body: PutPortfolioPreferencesRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class PutPortfolioPreferencesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    put_portfolio_preferences_response: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    