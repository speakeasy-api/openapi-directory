/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Source } from "./source";
import { SourceSplitOptions } from "./sourcesplitoptions";
import { Expose, Type } from "class-transformer";

/**
 * Represents the operation to split a high-level Source specification into bundles (parts for parallel processing). At a high level, splitting of a source into bundles happens as follows: SourceSplitRequest is applied to the source. If it returns SOURCE_SPLIT_OUTCOME_USE_CURRENT, no further splitting happens and the source is used "as is". Otherwise, splitting is applied recursively to each produced DerivedSource. As an optimization, for any Source, if its does_not_need_splitting is true, the framework assumes that splitting this source would return SOURCE_SPLIT_OUTCOME_USE_CURRENT, and doesn't initiate a SourceSplitRequest. This applies both to the initial source being split and to bundles produced from it.
 */
export class SourceSplitRequest extends SpeakeasyBase {
  /**
   * Hints for splitting a Source into bundles (parts for parallel processing) using SourceSplitRequest.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  @Type(() => SourceSplitOptions)
  options?: SourceSplitOptions;

  /**
   * A source that records can be read and decoded from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(() => Source)
  source?: Source;
}
