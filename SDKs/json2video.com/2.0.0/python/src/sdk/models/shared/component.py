"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ComponentChromaKey:
    r"""Allows to define a color (or a range of colors) that will be converted to transparent"""
    
    color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color') }})
    r"""Set the color for which alpha will be set to 0 (full transparency)"""  
    tolerance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tolerance'), 'exclude': lambda f: f is None }})
    r"""Makes the selection more or less sensitive to changes in color. A value of 1 will select only the provided color. A value of 100 will select all colors, so the full canvas"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ComponentCrop:
    r"""Crops the element"""
    
    height: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height') }})
    r"""Sets the height of the croping"""  
    width: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width') }})
    r"""Sets the width of the croping"""  
    x: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('x'), 'exclude': lambda f: f is None }})
    r"""Sets the left point of croping"""  
    y: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('y'), 'exclude': lambda f: f is None }})
    r"""Sets the top point of croping"""  
    
class ComponentPanEnum(str, Enum):
    r"""Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan"""
    LEFT = 'left'
    TOP = 'top'
    RIGHT = 'right'
    BOTTOM = 'bottom'
    TOP_LEFT = 'top-left'
    TOP_RIGHT = 'top-right'
    BOTTOM_LEFT = 'bottom-left'
    BOTTOM_RIGHT = 'bottom-right'

class ComponentPositionEnum(str, Enum):
    r"""Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties"""
    TOP_LEFT = 'top-left'
    TOP_RIGHT = 'top-right'
    BOTTOM_RIGHT = 'bottom-right'
    BOTTOM_LEFT = 'bottom-left'
    CENTER_CENTER = 'center-center'
    CUSTOM = 'custom'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ComponentRotate:
    
    angle: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('angle') }})
    r"""Sets the angle of rotation"""  
    speed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('speed'), 'exclude': lambda f: f is None }})
    r"""Sets the time it takes to rotate the provided angle. A zero value means no movement"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ComponentScale:
    
    height: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    r"""Sets the height for scaling the element"""  
    width: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    r"""Sets the width for scaling the element"""  
    
class ComponentTypeEnum(str, Enum):
    COMPONENT = 'component'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Component:
    r"""Creates an element based on the specified feature"""
    
    component: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('component') }})
    r"""ID of the Component element. Check all available components in the <a href='https://json2video.com/docs/resources/basic/'>library</a>"""  
    type: ComponentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    cache: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cache'), 'exclude': lambda f: f is None }})
    r"""Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded."""  
    chroma_key: Optional[ComponentChromaKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chroma-key'), 'exclude': lambda f: f is None }})
    r"""Allows to define a color (or a range of colors) that will be converted to transparent"""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Used for adding your comments"""  
    crop: Optional[ComponentCrop] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crop'), 'exclude': lambda f: f is None }})
    r"""Crops the element"""  
    duration: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration."""  
    extra_time: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extra-time'), 'exclude': lambda f: f is None }})
    r"""Element's time span added after the playback."""  
    fade_in: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fade-in'), 'exclude': lambda f: f is None }})
    r"""Adds a fade in effect to the element. Value in seconds."""  
    fade_out: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fade-out'), 'exclude': lambda f: f is None }})
    r"""Adds a fade out effect to the element. Value in seconds."""  
    height: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    r"""Desired text element height, but can be overriden by the component defaults. A value of <code>-1</code> means inherits scenes or movie height"""  
    pan: Optional[ComponentPanEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pan'), 'exclude': lambda f: f is None }})
    r"""Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan"""  
    position: Optional[ComponentPositionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position'), 'exclude': lambda f: f is None }})
    r"""Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties"""  
    rotate: Optional[ComponentRotate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rotate'), 'exclude': lambda f: f is None }})  
    scale: Optional[ComponentScale] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scale'), 'exclude': lambda f: f is None }})  
    settings: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settings'), 'exclude': lambda f: f is None }})
    r"""Settings to be passed to the component"""  
    start: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'exclude': lambda f: f is None }})
    r"""Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array."""  
    width: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    r"""Desired text element width, but can be overriden by the component defaults. A value of <code>-1</code> means inherits scenes or movie width"""  
    x: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('x'), 'exclude': lambda f: f is None }})
    r"""Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side"""  
    y: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('y'), 'exclude': lambda f: f is None }})
    r"""Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side"""  
    z_index: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('z-index'), 'exclude': lambda f: f is None }})
    r"""Element's z-index. Use this property to reorganize the layering of the elements like in HTML"""  
    zoom: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zoom'), 'exclude': lambda f: f is None }})
    r"""Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming"""  
    