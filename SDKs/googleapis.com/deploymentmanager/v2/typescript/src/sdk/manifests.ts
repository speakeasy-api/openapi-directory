/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Manifests {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets information about a specific manifest.
   */
  deploymentmanagerManifestsGet(
    req: operations.DeploymentmanagerManifestsGetRequest,
    security: operations.DeploymentmanagerManifestsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeploymentmanagerManifestsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeploymentmanagerManifestsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/deploymentmanager/v2/projects/{project}/global/deployments/{deployment}/manifests/{manifest}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeploymentmanagerManifestsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeploymentmanagerManifestsGetResponse =
        new operations.DeploymentmanagerManifestsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.manifest = utils.objectToClass(httpRes?.data, shared.Manifest);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all manifests for a given deployment.
   */
  deploymentmanagerManifestsList(
    req: operations.DeploymentmanagerManifestsListRequest,
    security: operations.DeploymentmanagerManifestsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeploymentmanagerManifestsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeploymentmanagerManifestsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/deploymentmanager/v2/projects/{project}/global/deployments/{deployment}/manifests",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeploymentmanagerManifestsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeploymentmanagerManifestsListResponse =
        new operations.DeploymentmanagerManifestsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.manifestsListResponse = utils.objectToClass(
              httpRes?.data,
              shared.ManifestsListResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
