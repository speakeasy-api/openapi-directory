// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoalResponseMetricResourceSubtypeEnum - The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
type GoalResponseMetricResourceSubtypeEnum string

const (
	GoalResponseMetricResourceSubtypeEnumNumber GoalResponseMetricResourceSubtypeEnum = "number"
)

func (e *GoalResponseMetricResourceSubtypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "number":
		*e = GoalResponseMetricResourceSubtypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoalResponseMetricResourceSubtypeEnum: %s", s)
	}
}

// GoalResponseMetricUnitEnum - A supported unit of measure for the goal metric, or none.
type GoalResponseMetricUnitEnum string

const (
	GoalResponseMetricUnitEnumNone       GoalResponseMetricUnitEnum = "none"
	GoalResponseMetricUnitEnumCurrency   GoalResponseMetricUnitEnum = "currency"
	GoalResponseMetricUnitEnumPercentage GoalResponseMetricUnitEnum = "percentage"
)

func (e *GoalResponseMetricUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "none":
		fallthrough
	case "currency":
		fallthrough
	case "percentage":
		*e = GoalResponseMetricUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoalResponseMetricUnitEnum: %s", s)
	}
}

// GoalResponseMetric - A generic Asana Resource, containing a globally unique identifier.
type GoalResponseMetric struct {
	// ISO 4217 currency code to format this custom field. This will be null if the `format` is not `currency`.
	CurrencyCode *string `json:"currency_code,omitempty"`
	// *Conditional*. This string is the current value of a goal metric of type string.
	CurrentDisplayValue *string `json:"current_display_value,omitempty"`
	// *Conditional*. This number is the current value of a goal metric of type number.
	CurrentNumberValue *float64 `json:"current_number_value,omitempty"`
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// *Conditional*. This number is the start value of a goal metric of type number.
	InitialNumberValue *float64 `json:"initial_number_value,omitempty"`
	// Only relevant for goal metrics of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.
	// For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.
	Precision *int64 `json:"precision,omitempty"`
	// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
	ResourceSubtype *GoalResponseMetricResourceSubtypeEnum `json:"resource_subtype,omitempty"`
	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
	// *Conditional*. This number is the end value of a goal metric of type number.
	TargetNumberValue *float64 `json:"target_number_value,omitempty"`
	// A supported unit of measure for the goal metric, or none.
	Unit *GoalResponseMetricUnitEnum `json:"unit,omitempty"`
}

// GoalResponseOwner - A *user* object represents an account in Asana that can be given access to various workspaces, projects, and tasks.
type GoalResponseOwner struct {
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// *Read-only except when same user as requester*. The user’s name.
	Name *string `json:"name,omitempty"`
	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
}

// GoalResponseTeam - A *team* is used to group related projects and people together within an organization. Each project in an organization is associated with a team.
type GoalResponseTeam struct {
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// The name of the team.
	Name *string `json:"name,omitempty"`
	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
}

// GoalResponseTimePeriodPeriodEnum - The cadence and index of the time period. The value is one of: `FY`, `H1`, `H2`, `Q1`, `Q2`, `Q3`, or `Q4`.
type GoalResponseTimePeriodPeriodEnum string

const (
	GoalResponseTimePeriodPeriodEnumFy GoalResponseTimePeriodPeriodEnum = "FY"
	GoalResponseTimePeriodPeriodEnumH1 GoalResponseTimePeriodPeriodEnum = "H1"
	GoalResponseTimePeriodPeriodEnumH2 GoalResponseTimePeriodPeriodEnum = "H2"
	GoalResponseTimePeriodPeriodEnumQ1 GoalResponseTimePeriodPeriodEnum = "Q1"
	GoalResponseTimePeriodPeriodEnumQ2 GoalResponseTimePeriodPeriodEnum = "Q2"
	GoalResponseTimePeriodPeriodEnumQ3 GoalResponseTimePeriodPeriodEnum = "Q3"
	GoalResponseTimePeriodPeriodEnumQ4 GoalResponseTimePeriodPeriodEnum = "Q4"
)

func (e *GoalResponseTimePeriodPeriodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FY":
		fallthrough
	case "H1":
		fallthrough
	case "H2":
		fallthrough
	case "Q1":
		fallthrough
	case "Q2":
		fallthrough
	case "Q3":
		fallthrough
	case "Q4":
		*e = GoalResponseTimePeriodPeriodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoalResponseTimePeriodPeriodEnum: %s", s)
	}
}

// GoalResponseTimePeriod - A generic Asana Resource, containing a globally unique identifier.
type GoalResponseTimePeriod struct {
	// The localized end date of the time period in `YYYY-MM-DD` format.
	EndOn *string `json:"end_on,omitempty"`
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// The cadence and index of the time period. The value is one of: `FY`, `H1`, `H2`, `Q1`, `Q2`, `Q3`, or `Q4`.
	Period *GoalResponseTimePeriodPeriodEnum `json:"period,omitempty"`
	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
	// The localized start date of the time period in `YYYY-MM-DD` format.
	StartOn *string `json:"start_on,omitempty"`
}

// GoalResponseWorkspace - A *workspace* is the highest-level organizational unit in Asana. All projects and tasks have an associated workspace.
type GoalResponseWorkspace struct {
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// The name of the workspace.
	Name *string `json:"name,omitempty"`
	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
}

// GoalResponse - A generic Asana Resource, containing a globally unique identifier.
type GoalResponse struct {
	// The localized day on which this goal is due. This takes a date with format `YYYY-MM-DD`.
	DueOn *string `json:"due_on,omitempty"`
	// Array of users following this goal.
	Followers []UserCompact `json:"followers,omitempty"`
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// The notes of the goal with formatting as HTML.
	HTMLNotes *string `json:"html_notes,omitempty"`
	// *Conditional*. This property is only present when the `workspace` provided is an organization. Whether the goal belongs to the `workspace` (and is listed as part of the workspace’s goals) or not. If it isn’t a workspace-level goal, it is a team-level goal, and is associated with the goal’s team.
	IsWorkspaceLevel *bool `json:"is_workspace_level,omitempty"`
	// True if the goal is liked by the authorized user, false if not.
	Liked *bool `json:"liked,omitempty"`
	// Array of likes for users who have liked this goal.
	Likes  []Like              `json:"likes,omitempty"`
	Metric *GoalResponseMetric `json:"metric,omitempty"`
	// The name of the goal.
	Name *string `json:"name,omitempty"`
	// Free-form textual information associated with the goal (i.e. its description).
	Notes *string `json:"notes,omitempty"`
	// The number of users who have liked this goal.
	NumLikes *int64             `json:"num_likes,omitempty"`
	Owner    *GoalResponseOwner `json:"owner,omitempty"`
	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
	// The day on which work for this goal begins, or null if the goal has no start date. This takes a date with `YYYY-MM-DD` format, and cannot be set unless there is an accompanying due date.
	StartOn *string `json:"start_on,omitempty"`
	// The current status of this goal. When the goal is open, its status can be `green`, `yellow`, and `red` to reflect "On Track", "At Risk", and "Off Track", respectively. When the goal is closed, the value can be `missed`, `achieved`, `partial`, or `dropped`.
	Status *string `json:"status,omitempty"`
	// *Conditional*. This property is only present when the `workspace` provided is an organization.
	Team       *GoalResponseTeam       `json:"team,omitempty"`
	TimePeriod *GoalResponseTimePeriod `json:"time_period,omitempty"`
	Workspace  *GoalResponseWorkspace  `json:"workspace,omitempty"`
}
