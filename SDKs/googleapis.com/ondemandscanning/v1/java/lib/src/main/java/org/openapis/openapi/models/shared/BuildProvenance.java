/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BuildProvenance - Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
 */
public class BuildProvenance {
    /**
     * Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buildOptions")
    public java.util.Map<String, String> buildOptions;

    public BuildProvenance withBuildOptions(java.util.Map<String, String> buildOptions) {
        this.buildOptions = buildOptions;
        return this;
    }
    
    /**
     * Version string of the builder at the time this build was executed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("builderVersion")
    public String builderVersion;

    public BuildProvenance withBuilderVersion(String builderVersion) {
        this.builderVersion = builderVersion;
        return this;
    }
    
    /**
     * Output of the build.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("builtArtifacts")
    public Artifact[] builtArtifacts;

    public BuildProvenance withBuiltArtifacts(Artifact[] builtArtifacts) {
        this.builtArtifacts = builtArtifacts;
        return this;
    }
    
    /**
     * Commands requested by the build.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commands")
    public Command[] commands;

    public BuildProvenance withCommands(Command[] commands) {
        this.commands = commands;
        return this;
    }
    
    /**
     * Time at which the build was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public BuildProvenance withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creator")
    public String creator;

    public BuildProvenance withCreator(String creator) {
        this.creator = creator;
        return this;
    }
    
    /**
     * Time at which execution of the build was finished.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTime")
    public String endTime;

    public BuildProvenance withEndTime(String endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * Required. Unique identifier of the build.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public BuildProvenance withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * URI where any logs for this provenance were written.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logsUri")
    public String logsUri;

    public BuildProvenance withLogsUri(String logsUri) {
        this.logsUri = logsUri;
        return this;
    }
    
    /**
     * ID of the project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projectId")
    public String projectId;

    public BuildProvenance withProjectId(String projectId) {
        this.projectId = projectId;
        return this;
    }
    
    /**
     * Source describes the location of the source used for the build.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceProvenance")
    public Source sourceProvenance;

    public BuildProvenance withSourceProvenance(Source sourceProvenance) {
        this.sourceProvenance = sourceProvenance;
        return this;
    }
    
    /**
     * Time at which execution of the build was started.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    public String startTime;

    public BuildProvenance withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Trigger identifier if the build was triggered automatically; empty if not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("triggerId")
    public String triggerId;

    public BuildProvenance withTriggerId(String triggerId) {
        this.triggerId = triggerId;
        return this;
    }
    
    public BuildProvenance(){}
}
