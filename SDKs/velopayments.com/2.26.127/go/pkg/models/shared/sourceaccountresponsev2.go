// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceAccountResponseV2CurrencyEnum string

const (
	SourceAccountResponseV2CurrencyEnumUsd SourceAccountResponseV2CurrencyEnum = "USD"
)

func (e *SourceAccountResponseV2CurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "USD":
		*e = SourceAccountResponseV2CurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAccountResponseV2CurrencyEnum: %s", s)
	}
}

// SourceAccountResponseV2 - Source account response
type SourceAccountResponseV2 struct {
	AccountType     string           `json:"accountType"`
	AutoTopUpConfig *AutoTopUpConfig `json:"autoTopUpConfig,omitempty"`
	// Decimal implied
	Balance          *int64                               `json:"balance,omitempty"`
	BalanceVisible   bool                                 `json:"balanceVisible"`
	Currency         *SourceAccountResponseV2CurrencyEnum `json:"currency,omitempty"`
	CustomerID       *string                              `json:"customerId,omitempty"`
	FundingAccountID *string                              `json:"fundingAccountId,omitempty"`
	FundingRef       string                               `json:"fundingRef"`
	// Source Account Id
	ID                  string         `json:"id"`
	Name                *string        `json:"name,omitempty"`
	Notifications       *Notifications `json:"notifications,omitempty"`
	PayorID             *string        `json:"payorId,omitempty"`
	PhysicalAccountID   *string        `json:"physicalAccountId,omitempty"`
	PhysicalAccountName string         `json:"physicalAccountName"`
	Pooled              bool           `json:"pooled"`
	RailsID             string         `json:"railsId"`
}
