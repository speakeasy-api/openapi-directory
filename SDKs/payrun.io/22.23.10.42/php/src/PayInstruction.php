<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PayInstruction 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes a pay instruction
     * 
     * Delete the specified pay instruction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePayInstructionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePayInstructionResponse
     */
	public function deletePayInstruction(
        \OpenAPI\OpenAPI\Models\Operations\DeletePayInstructionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePayInstructionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}', \OpenAPI\OpenAPI\Models\Operations\DeletePayInstructionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePayInstructionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all pay instruction tags
     * 
     * Gets all the pay instruction tags
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllPayInstructionTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllPayInstructionTagsResponse
     */
	public function getAllPayInstructionTags(
        \OpenAPI\OpenAPI\Models\Operations\GetAllPayInstructionTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllPayInstructionTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions/Tags', \OpenAPI\OpenAPI\Models\Operations\GetAllPayInstructionTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllPayInstructionTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified pay instruction from the employee
     * 
     * Returns the specified pay instruction from employee
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionFromEmployeeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionFromEmployeeResponse
     */
	public function getPayInstructionFromEmployee(
        \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionFromEmployeeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionFromEmployeeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}', \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionFromEmployeeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionFromEmployeeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payInstruction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayInstruction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the pay instructions from the specified employee
     * 
     * Get links to all pay instructions for the specified employee
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionsFromEmployeeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionsFromEmployeeResponse
     */
	public function getPayInstructionsFromEmployee(
        \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionsFromEmployeeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionsFromEmployeeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions', \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionsFromEmployeeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionsFromEmployeeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get pay instructions with tag
     * 
     * Gets the pay instructions with the tag
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionsWithTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionsWithTagResponse
     */
	public function getPayInstructionsWithTag(
        \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionsWithTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionsWithTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionsWithTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPayInstructionsWithTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sparse Update of a Pay Instruction
     * 
     * Patches the specified pay instruction with the supplied values
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchPayInstructionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchPayInstructionResponse
     */
	public function patchPayInstruction(
        \OpenAPI\OpenAPI\Models\Operations\PatchPayInstructionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchPayInstructionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}', \OpenAPI\OpenAPI\Models\Operations\PatchPayInstructionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "payInstruction", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchPayInstructionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payInstruction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayInstruction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Pay Instruction
     * 
     * Creates a new pay instruction object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPayInstructionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPayInstructionResponse
     */
	public function postPayInstruction(
        \OpenAPI\OpenAPI\Models\Operations\PostPayInstructionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPayInstructionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions', \OpenAPI\OpenAPI\Models\Operations\PostPayInstructionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "payInstruction", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPayInstructionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->link = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Link', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a Pay Instruction
     * 
     * Updates the existing specified pay instruction object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutPayInstructionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutPayInstructionResponse
     */
	public function putPayInstruction(
        \OpenAPI\OpenAPI\Models\Operations\PutPayInstructionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutPayInstructionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}', \OpenAPI\OpenAPI\Models\Operations\PutPayInstructionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "payInstruction", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutPayInstructionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payInstruction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayInstruction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
}