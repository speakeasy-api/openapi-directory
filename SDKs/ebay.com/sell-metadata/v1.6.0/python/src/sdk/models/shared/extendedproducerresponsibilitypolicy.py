"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import extendedproducerresponsibility as shared_extendedproducerresponsibility
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExtendedProducerResponsibilityPolicy:
    r"""A type that defines the Extended Producer Responsibility policy."""
    
    category_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryId'), 'exclude': lambda f: f is None }})
    r"""The unique identifier for the category under which the policy applies."""  
    category_tree_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryTreeId'), 'exclude': lambda f: f is None }})
    r"""The unique identifier for the category tree under which the policy applies."""  
    supported_attributes: Optional[list[shared_extendedproducerresponsibility.ExtendedProducerResponsibility]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedAttributes'), 'exclude': lambda f: f is None }})
    r"""The details regarding the attributes included in the policy, such as their usage guidelines and whether they can be specified at the listing variation level."""  
    