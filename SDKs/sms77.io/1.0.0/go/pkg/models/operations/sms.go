// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// SmsDebugEnum - Disable message sending.
type SmsDebugEnum string

const (
	SmsDebugEnumOne  SmsDebugEnum = "1"
	SmsDebugEnumZero SmsDebugEnum = "0"
)

func (e *SmsDebugEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "0":
		*e = SmsDebugEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SmsDebugEnum: %s", s)
	}
}

// SmsDetailsEnum - Attach message details to response.
type SmsDetailsEnum string

const (
	SmsDetailsEnumOne  SmsDetailsEnum = "1"
	SmsDetailsEnumZero SmsDetailsEnum = "0"
)

func (e *SmsDetailsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "0":
		*e = SmsDetailsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SmsDetailsEnum: %s", s)
	}
}

// SmsFlashEnum - Send as flash.
type SmsFlashEnum string

const (
	SmsFlashEnumOne  SmsFlashEnum = "1"
	SmsFlashEnumZero SmsFlashEnum = "0"
)

func (e *SmsFlashEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "0":
		*e = SmsFlashEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SmsFlashEnum: %s", s)
	}
}

// SmsJSONEnum - Return a detailed JSON response.
type SmsJSONEnum string

const (
	SmsJSONEnumOne  SmsJSONEnum = "1"
	SmsJSONEnumZero SmsJSONEnum = "0"
)

func (e *SmsJSONEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "0":
		*e = SmsJSONEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SmsJSONEnum: %s", s)
	}
}

// SmsNoReloadEnum - Enable sending of duplicated messages within 180 seconds.
type SmsNoReloadEnum string

const (
	SmsNoReloadEnumOne  SmsNoReloadEnum = "1"
	SmsNoReloadEnumZero SmsNoReloadEnum = "0"
)

func (e *SmsNoReloadEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "0":
		*e = SmsNoReloadEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SmsNoReloadEnum: %s", s)
	}
}

// SmsPerformanceTrackingEnum - Enable performance tracking for found URLs.
type SmsPerformanceTrackingEnum string

const (
	SmsPerformanceTrackingEnumOne  SmsPerformanceTrackingEnum = "1"
	SmsPerformanceTrackingEnumZero SmsPerformanceTrackingEnum = "0"
)

func (e *SmsPerformanceTrackingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "0":
		*e = SmsPerformanceTrackingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SmsPerformanceTrackingEnum: %s", s)
	}
}

// SmsReturnMsgIDEnum - Attach message ID to second row in a text response.
type SmsReturnMsgIDEnum string

const (
	SmsReturnMsgIDEnumOne  SmsReturnMsgIDEnum = "1"
	SmsReturnMsgIDEnumZero SmsReturnMsgIDEnum = "0"
)

func (e *SmsReturnMsgIDEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "0":
		*e = SmsReturnMsgIDEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SmsReturnMsgIDEnum: %s", s)
	}
}

// SmsUnicodeEnum - Force unicode encoding. Reduces sms length to 70 chars.
type SmsUnicodeEnum string

const (
	SmsUnicodeEnumOne  SmsUnicodeEnum = "1"
	SmsUnicodeEnumZero SmsUnicodeEnum = "0"
)

func (e *SmsUnicodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "0":
		*e = SmsUnicodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SmsUnicodeEnum: %s", s)
	}
}

// SmsUTF8Enum - Force UTF8 encoding.
type SmsUTF8Enum string

const (
	SmsUTF8EnumOne  SmsUTF8Enum = "1"
	SmsUTF8EnumZero SmsUTF8Enum = "0"
)

func (e *SmsUTF8Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "0":
		*e = SmsUTF8Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SmsUTF8Enum: %s", s)
	}
}

type SmsQueryParams struct {
	// Disable message sending.
	Debug *SmsDebugEnum `queryParam:"style=form,explode=true,name=debug"`
	// Date/Time for delayed dispatch.
	Delay *string `queryParam:"style=form,explode=true,name=delay"`
	// Attach message details to response.
	Details *SmsDetailsEnum `queryParam:"style=form,explode=true,name=details"`
	// Send as flash.
	Flash *SmsFlashEnum `queryParam:"style=form,explode=true,name=flash"`
	// Identifier to return in callbacks.
	ForeignID *string `queryParam:"style=form,explode=true,name=foreign_id"`
	// Set a custom sender name.
	From *string `queryParam:"style=form,explode=true,name=from"`
	// Return a detailed JSON response.
	JSON *SmsJSONEnum `queryParam:"style=form,explode=true,name=json"`
	// A custom label.
	Label *string `queryParam:"style=form,explode=true,name=label"`
	// Enable sending of duplicated messages within 180 seconds.
	NoReload *SmsNoReloadEnum `queryParam:"style=form,explode=true,name=no_reload"`
	// Enable performance tracking for found URLs.
	PerformanceTracking *SmsPerformanceTrackingEnum `queryParam:"style=form,explode=true,name=performance_tracking"`
	// Attach message ID to second row in a text response.
	ReturnMsgID *SmsReturnMsgIDEnum `queryParam:"style=form,explode=true,name=return_msg_id"`
	// The actual text message to send.
	Text string `queryParam:"style=form,explode=true,name=text"`
	// The recipient number or group name.
	To string `queryParam:"style=form,explode=true,name=to"`
	// A custom User Data Header.
	Udh *string `queryParam:"style=form,explode=true,name=udh"`
	// Force unicode encoding. Reduces sms length to 70 chars.
	Unicode *SmsUnicodeEnum `queryParam:"style=form,explode=true,name=unicode"`
	// Force UTF8 encoding.
	UTF8 *SmsUTF8Enum `queryParam:"style=form,explode=true,name=utf8"`
}

type SmsRequest struct {
	QueryParams SmsQueryParams
}

type Sms200ApplicationJSONMessages struct {
	Encoding  *string  `json:"encoding,omitempty"`
	Error     *string  `json:"error,omitempty"`
	ErrorText *string  `json:"error_text,omitempty"`
	ID        *string  `json:"id,omitempty"`
	Messages  []string `json:"messages,omitempty"`
	Parts     *int64   `json:"parts,omitempty"`
	Price     *int64   `json:"price,omitempty"`
	Recipient *string  `json:"recipient,omitempty"`
	Sender    *string  `json:"sender,omitempty"`
	Success   *bool    `json:"success,omitempty"`
	Text      *string  `json:"text,omitempty"`
}

type Sms200ApplicationJSONSmsTypeEnum string

const (
	Sms200ApplicationJSONSmsTypeEnumEconomy Sms200ApplicationJSONSmsTypeEnum = "economy"
	Sms200ApplicationJSONSmsTypeEnumDirect  Sms200ApplicationJSONSmsTypeEnum = "direct"
)

func (e *Sms200ApplicationJSONSmsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "economy":
		fallthrough
	case "direct":
		*e = Sms200ApplicationJSONSmsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sms200ApplicationJSONSmsTypeEnum: %s", s)
	}
}

// Sms200ApplicationJSON - OK
type Sms200ApplicationJSON struct {
	Balance    *float32                          `json:"balance,omitempty"`
	Debug      *string                           `json:"debug,omitempty"`
	Messages   []Sms200ApplicationJSONMessages   `json:"messages,omitempty"`
	SmsType    *Sms200ApplicationJSONSmsTypeEnum `json:"sms_type,omitempty"`
	Success    *string                           `json:"success,omitempty"`
	TotalPrice *float32                          `json:"total_price,omitempty"`
}

type SmsResponse struct {
	ContentType string
	// OK
	Sms200ApplicationJSONObject *Sms200ApplicationJSON
	// OK
	Sms200TextPlainObject *string
	StatusCode            int
	RawResponse           *http.Response
}
