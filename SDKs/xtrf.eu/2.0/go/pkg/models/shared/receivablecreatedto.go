// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ReceivableCreateDTORateOriginEnum string

const (
	ReceivableCreateDTORateOriginEnumPriceProfile   ReceivableCreateDTORateOriginEnum = "PRICE_PROFILE"
	ReceivableCreateDTORateOriginEnumPriceList      ReceivableCreateDTORateOriginEnum = "PRICE_LIST"
	ReceivableCreateDTORateOriginEnumFilledManually ReceivableCreateDTORateOriginEnum = "FILLED_MANUALLY"
	ReceivableCreateDTORateOriginEnumAutocalculated ReceivableCreateDTORateOriginEnum = "AUTOCALCULATED"
)

func (e ReceivableCreateDTORateOriginEnum) ToPointer() *ReceivableCreateDTORateOriginEnum {
	return &e
}

func (e *ReceivableCreateDTORateOriginEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PRICE_PROFILE":
		fallthrough
	case "PRICE_LIST":
		fallthrough
	case "FILLED_MANUALLY":
		fallthrough
	case "AUTOCALCULATED":
		*e = ReceivableCreateDTORateOriginEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReceivableCreateDTORateOriginEnum: %v", v)
	}
}

type ReceivableCreateDTOTypeEnum string

const (
	ReceivableCreateDTOTypeEnumSimple ReceivableCreateDTOTypeEnum = "SIMPLE"
	ReceivableCreateDTOTypeEnumCat    ReceivableCreateDTOTypeEnum = "CAT"
)

func (e ReceivableCreateDTOTypeEnum) ToPointer() *ReceivableCreateDTOTypeEnum {
	return &e
}

func (e *ReceivableCreateDTOTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIMPLE":
		fallthrough
	case "CAT":
		*e = ReceivableCreateDTOTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReceivableCreateDTOTypeEnum: %v", v)
	}
}

// ReceivableCreateDTO - Adds a receivable.
type ReceivableCreateDTO struct {
	CalculationUnitID           *int64                             `json:"calculationUnitId,omitempty"`
	CatLogFile                  *FileDTO                           `json:"catLogFile,omitempty"`
	CurrencyID                  *int64                             `json:"currencyId,omitempty"`
	Description                 *string                            `json:"description,omitempty"`
	ID                          *int64                             `json:"id,omitempty"`
	IgnoreMinimumCharge         *bool                              `json:"ignoreMinimumCharge,omitempty"`
	InvoiceID                   *string                            `json:"invoiceId,omitempty"`
	JobTypeID                   *int64                             `json:"jobTypeId,omitempty"`
	LanguageCombination         *ChargeLanguageCombinationDTO      `json:"languageCombination,omitempty"`
	LanguageCombinationIDNumber *string                            `json:"languageCombinationIdNumber,omitempty"`
	MinimumCharge               *float64                           `json:"minimumCharge,omitempty"`
	Quantity                    *float64                           `json:"quantity,omitempty"`
	Rate                        *float64                           `json:"rate,omitempty"`
	RateOrigin                  *ReceivableCreateDTORateOriginEnum `json:"rateOrigin,omitempty"`
	TaskID                      *int64                             `json:"taskId,omitempty"`
	Total                       *float64                           `json:"total,omitempty"`
	Type                        *ReceivableCreateDTOTypeEnum       `json:"type,omitempty"`
}
