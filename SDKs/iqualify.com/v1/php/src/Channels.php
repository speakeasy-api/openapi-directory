<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Channels 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Remove learners from a group channel
     * 
     * Removes a learner from the specified group channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdChannelsChannelIdLearnersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdChannelsChannelIdLearnersResponse
     */
	public function deleteOfferingsOfferingIdChannelsChannelIdLearners(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdChannelsChannelIdLearnersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdChannelsChannelIdLearnersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/channels/{channelId}/learners', \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdChannelsChannelIdLearnersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOfferingsOfferingIdChannelsChannelIdLearnersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find comments
     * 
     * Responds with a list of comments made in any posts in a specified channel, within an offering.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdCommentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdCommentsResponse
     */
	public function getOfferingsOfferingIdAnalyticsChannelsChannelIdComments(
        \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdCommentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdCommentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/analytics/channels/{channelId}/comments', \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdCommentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdCommentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->comments = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Comment>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find posts
     * 
     * Responds with a list of posts made in a specified channel, within an offering.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdPostsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdPostsResponse
     */
	public function getOfferingsOfferingIdAnalyticsChannelsChannelIdPosts(
        \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdPostsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdPostsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/analytics/channels/{channelId}/posts', \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdPostsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdPostsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpPosts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\HttpPost>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find replies
     * 
     * Responds with a list of replies to comments in any posts in a specified channel, within an offering.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdRepliesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdRepliesResponse
     */
	public function getOfferingsOfferingIdAnalyticsChannelsChannelIdReplies(
        \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdRepliesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdRepliesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/analytics/channels/{channelId}/replies', \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdRepliesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdAnalyticsChannelsChannelIdRepliesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->comments = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Comment>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find channels
     * 
     * Responds with a list of channels in an offering.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdChannelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdChannelsResponse
     */
	public function getOfferingsOfferingIdChannels(
        \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdChannelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdChannelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/channels', \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdChannelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdChannelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channelResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ChannelResponse>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find learners in a group channel
     * 
     * Finds all learners in a specified group channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdChannelsChannelIdLearnersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdChannelsChannelIdLearnersResponse
     */
	public function getOfferingsOfferingIdChannelsChannelIdLearners(
        \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdChannelsChannelIdLearnersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdChannelsChannelIdLearnersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/channels/{channelId}/learners', \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdChannelsChannelIdLearnersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOfferingsOfferingIdChannelsChannelIdLearnersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channelResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChannelResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update channel
     * 
     * Updates a channel in an offering.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdChannelsChannelIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdChannelsChannelIdResponse
     */
	public function patchOfferingsOfferingIdChannelsChannelId(
        \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdChannelsChannelIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdChannelsChannelIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/channels/{channelId}', \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdChannelsChannelIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchOfferingsOfferingIdChannelsChannelIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channelResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChannelResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add channel
     * 
     * Adds new channel to the specified offering.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdChannelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdChannelsResponse
     */
	public function postOfferingsOfferingIdChannels(
        \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdChannelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdChannelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/channels', \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdChannelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channelRequired", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdChannelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channelResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChannelResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add learners to a group channel
     * 
     * Adds a learner to a specified group channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdChannelsChannelIdLearnersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdChannelsChannelIdLearnersResponse
     */
	public function postOfferingsOfferingIdChannelsChannelIdLearners(
        \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdChannelsChannelIdLearnersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdChannelsChannelIdLearnersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/offerings/{offeringId}/channels/{channelId}/learners', \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdChannelsChannelIdLearnersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostOfferingsOfferingIdChannelsChannelIdLearnersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}