"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class APIBillingPeriodUsageOut:
    r"""The current billing period."""
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiKey'), 'exclude': lambda f: f is None }})
    r"""User API Key."""  
    billing_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingStatus'), 'exclude': lambda f: f is None }})
    r"""Current period billing status ex OPEN."""  
    hard_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hardLimit'), 'exclude': lambda f: f is None }})
    r"""Current period hard limit (reaching the limit sends an email notification and blocks the API Key)."""  
    period_ended: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periodEnded'), 'exclude': lambda f: f is None }})
    r"""Datetime when the the plan's current period endend."""  
    period_started: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periodStarted'), 'exclude': lambda f: f is None }})
    r"""Datetime when the the plan's current period started."""  
    soft_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('softLimit'), 'exclude': lambda f: f is None }})
    r"""Current period soft limit (reaching the limit sends an email notification)."""  
    stripe_current_period_end: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stripeCurrentPeriodEnd'), 'exclude': lambda f: f is None }})
    r"""Datetime when the the plan's current period endend (in Stripe). Internal and Stripe periodicity should ~coincide."""  
    stripe_current_period_start: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stripeCurrentPeriodStart'), 'exclude': lambda f: f is None }})
    r"""Datetime when the the plan's current period started (in Stripe). Internal and Stripe periodicity should ~coincide."""  
    subscription_started: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionStarted'), 'exclude': lambda f: f is None }})
    r"""Datetime when the user subscribed to the plan."""  
    usage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage'), 'exclude': lambda f: f is None }})
    r"""Current period usage in units (NB some API endpoints use more than one unit)."""  
    