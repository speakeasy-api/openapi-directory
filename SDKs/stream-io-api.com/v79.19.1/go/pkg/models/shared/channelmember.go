// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ChannelMemberRoleEnum - Permission level of the member in the channel (DEPRECATED: use channel_role instead)
type ChannelMemberRoleEnum string

const (
	ChannelMemberRoleEnumMember    ChannelMemberRoleEnum = "member"
	ChannelMemberRoleEnumModerator ChannelMemberRoleEnum = "moderator"
	ChannelMemberRoleEnumAdmin     ChannelMemberRoleEnum = "admin"
	ChannelMemberRoleEnumOwner     ChannelMemberRoleEnum = "owner"
)

func (e *ChannelMemberRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "member":
		fallthrough
	case "moderator":
		fallthrough
	case "admin":
		fallthrough
	case "owner":
		*e = ChannelMemberRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChannelMemberRoleEnum: %s", s)
	}
}

type ChannelMember struct {
	// Expiration date of the ban
	BanExpires *time.Time `json:"ban_expires,omitempty"`
	// Whether member is banned this channel or not
	Banned bool `json:"banned"`
	// Role of the member in the channel
	ChannelRole string `json:"channel_role"`
	// Date/time of creation
	CreatedAt time.Time  `json:"created_at"`
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Date when invite was accepted
	InviteAcceptedAt *time.Time `json:"invite_accepted_at,omitempty"`
	// Date when invite was rejected
	InviteRejectedAt *time.Time `json:"invite_rejected_at,omitempty"`
	// Whether member was invited or not
	Invited *bool `json:"invited,omitempty"`
	// Whether member is channel moderator or not
	IsModerator *bool `json:"is_moderator,omitempty"`
	// Permission level of the member in the channel (DEPRECATED: use channel_role instead)
	Role *ChannelMemberRoleEnum `json:"role,omitempty"`
	// Whether member is shadow banned in this channel or not
	ShadowBanned bool `json:"shadow_banned"`
	// Date/time of the last update
	UpdatedAt time.Time `json:"updated_at"`
	// Represents chat user
	User   map[string]interface{} `json:"user,omitempty"`
	UserID *string                `json:"user_id,omitempty"`
}
