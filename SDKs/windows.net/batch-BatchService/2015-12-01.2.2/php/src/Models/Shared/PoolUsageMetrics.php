<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PoolUsageMetrics - Usage metrics for a pool across an aggregation interval.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PoolUsageMetrics
{
    /**
     * Gets or sets the cross data center network egress in GiB from the pool during this interval.
     * 
     * @var float $dataEgressGiB
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataEgressGiB')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $dataEgressGiB;
    
    /**
     * Gets or sets the cross data center network ingress in GiB to the pool during this interval.
     * 
     * @var float $dataIngressGiB
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataIngressGiB')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $dataIngressGiB;
    
    /**
     * Gets or sets the end time of the aggregation interval.
     * 
     * @var \DateTime $endTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('endTime')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $endTime;
    
    /**
     * Gets or sets the id of the pool whose metrics are being aggregated.
     * 
     * @var string $poolId
     */
	#[\JMS\Serializer\Annotation\SerializedName('poolId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $poolId;
    
    /**
     * Gets or sets the start time of the aggregation interval.
     * 
     * @var \DateTime $startTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('startTime')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $startTime;
    
    /**
     * Gets or sets the total core hours used in the pool during this aggregation interval.
     * 
     * @var float $totalCoreHours
     */
	#[\JMS\Serializer\Annotation\SerializedName('totalCoreHours')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $totalCoreHours;
    
    /**
     * Gets or sets the size of virtual machines in the pool.  All VMs in a pool are the same size.
     * 
     * @var string $vmSize
     */
	#[\JMS\Serializer\Annotation\SerializedName('vmSize')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $vmSize;
    
	public function __construct()
	{
		$this->dataEgressGiB = 0;
		$this->dataIngressGiB = 0;
		$this->endTime = new \DateTime();
		$this->poolId = "";
		$this->startTime = new \DateTime();
		$this->totalCoreHours = 0;
		$this->vmSize = "";
	}
}
