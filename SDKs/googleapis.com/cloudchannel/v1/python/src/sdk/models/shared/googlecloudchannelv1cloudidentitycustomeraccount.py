"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudChannelV1CloudIdentityCustomerAccount:
    r"""Entity representing a Cloud Identity account that may be associated with a Channel Services API partner."""
    
    customer_cloud_identity_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerCloudIdentityId'), 'exclude': lambda f: f is None }})
    r"""If existing = true, the Cloud Identity ID of the customer."""  
    customer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerName'), 'exclude': lambda f: f is None }})
    r"""If owned = true, the name of the customer that owns the Cloud Identity account. Customer_name uses the format: accounts/{account_id}/customers/{customer_id}"""  
    existing: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('existing'), 'exclude': lambda f: f is None }})
    r"""Returns true if a Cloud Identity account exists for a specific domain."""  
    owned: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owned'), 'exclude': lambda f: f is None }})
    r"""Returns true if the Cloud Identity account is associated with a customer of the Channel Services partner."""  
    