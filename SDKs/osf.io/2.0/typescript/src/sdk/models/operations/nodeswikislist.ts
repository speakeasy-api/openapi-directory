/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class NodesWikisListRequest extends SpeakeasyBase {
  /**
   * The unique identifier of the node.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=node_id",
  })
  nodeId: string;
}

/**
 * The properties of the wiki.
 */
export class NodesWikisListWikiAttributes extends SpeakeasyBase {
  /**
   * Content type of the wiki (`text/markdown`).
   */
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Whether the current user is allowed to post comments on this wiki.
   */
  @SpeakeasyMetadata()
  currentUserCanComment: string;

  /**
   * The date and time at which the wiki was last modified, as an iso8601 formatted timestamp.
   */
  @SpeakeasyMetadata()
  dateModified: Date;

  /**
   * A dictionary containing additional metadata about this wiki, including version information.
   */
  @SpeakeasyMetadata()
  extra: string;

  /**
   * The type of object.
   */
  @SpeakeasyMetadata()
  kind: string;

  /**
   * Materialized path to the wiki object.
   */
  @SpeakeasyMetadata()
  materializedPath: string;

  /**
   * The name/title of the wiki page.
   */
  @SpeakeasyMetadata()
  name: string;

  /**
   * Path to the wiki object.
   */
  @SpeakeasyMetadata()
  path: string;

  /**
   * Size of the wiki.
   */
  @SpeakeasyMetadata()
  size: string;
}

/**
 * URLs to alternative representations of the wiki.
 */
export class NodesWikisListWikiLinks extends SpeakeasyBase {
  /**
   * The URL to download the content of the wiki.
   */
  @SpeakeasyMetadata()
  download?: string;

  /**
   * A link to the detail page for the wiki.
   */
  @SpeakeasyMetadata()
  info?: string;

  /**
   * A link to the detail page for the wiki.
   */
  @SpeakeasyMetadata()
  self?: string;
}

/**
 * URLs to other entities or entity collections that have a relationship to the wiki.
 */
export class NodesWikisListWikiRelationships extends SpeakeasyBase {
  /**
   * A relationship to the comments related to this wiki.
   */
  @SpeakeasyMetadata()
  comments: string;

  /**
   * A relationship to the associated node.
   */
  @SpeakeasyMetadata()
  node: string;

  /**
   * A relationship to the user associated with this wiki.
   */
  @SpeakeasyMetadata()
  user: string;
}

export class NodesWikisListWiki extends SpeakeasyBase {
  /**
   * The properties of the wiki.
   */
  @SpeakeasyMetadata()
  attributes?: NodesWikisListWikiAttributes;

  /**
   * The identifier of the wiki.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * URLs to alternative representations of the wiki.
   */
  @SpeakeasyMetadata()
  links?: NodesWikisListWikiLinks;

  /**
   * URLs to other entities or entity collections that have a relationship to the wiki.
   */
  @SpeakeasyMetadata()
  relationships: NodesWikisListWikiRelationships;

  /**
   * The type identifier of the wiki (`wikis`).
   */
  @SpeakeasyMetadata()
  type: string;
}

export class NodesWikisListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
