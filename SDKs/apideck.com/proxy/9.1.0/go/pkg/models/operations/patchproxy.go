// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type PatchProxySecurity struct {
	APIKey shared.SchemeAPIKey `security:"scheme,type=apiKey,subtype=header"`
}

type PatchProxyHeaders struct {
	// The ID of your Unify application
	XApideckAppID string `header:"style=simple,explode=false,name=x-apideck-app-id"`
	// ID of the consumer which you want to get or push data from
	XApideckConsumerID string `header:"style=simple,explode=false,name=x-apideck-consumer-id"`
	// Downstream authorization header. This will skip the Vault token injection.
	XApideckDownstreamAuthorization *string `header:"style=simple,explode=false,name=x-apideck-downstream-authorization"`
	// Downstream URL
	XApideckDownstreamURL string `header:"style=simple,explode=false,name=x-apideck-downstream-url"`
	// Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
	XApideckServiceID string `header:"style=simple,explode=false,name=x-apideck-service-id"`
}

type PatchProxyRequest struct {
	Headers PatchProxyHeaders
	// Depending on the verb/method of the request this will contain the request body you want to POST/PATCH/PUT.
	Request  []byte `request:"mediaType=*/*"`
	Security PatchProxySecurity
}

// PatchProxy401ApplicationJSON - Unauthorized
type PatchProxy401ApplicationJSON struct {
	// Contains parameter or domain specific information related to the error and why it occurred.
	Detail *string `json:"detail,omitempty"`
	// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
	Error *string `json:"error,omitempty"`
	// A human-readable message providing more details about the error.
	Message *string `json:"message,omitempty"`
	// Link to documentation of error type
	Ref *string `json:"ref,omitempty"`
	// HTTP status code
	StatusCode *float64 `json:"status_code,omitempty"`
	// The type of error returned
	TypeName *string `json:"type_name,omitempty"`
}

type PatchProxyResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Ok
	PatchProxy200ApplicationJSONAny interface{}
	// Unauthorized
	PatchProxy401ApplicationJSONObject *PatchProxy401ApplicationJSON
	// Proxy error
	PatchProxyDefaultApplicationJSONAny interface{}
}
