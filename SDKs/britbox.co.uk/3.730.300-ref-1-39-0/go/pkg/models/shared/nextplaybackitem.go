// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// NextPlaybackItemSuggestionTypeEnum - Field indicating the type or reason behind the suggestion.
//
// Id Type   | Show Watched Status| Value            | Description
// ----------|--------------------|------------------|---------------------------------
// showId    | Unwatched          | StartWatching    |
// showId    | Completely watched | RestartWatching  |
// showId    | Partly watched     | ContinueWatching | Suggested episode partly watched
// showId    | Partly watched     | Sequential       | Suggested episode unwatched
// episodeId | Any                | Sequential       | Next episode in show
type NextPlaybackItemSuggestionTypeEnum string

const (
	NextPlaybackItemSuggestionTypeEnumStartWatching    NextPlaybackItemSuggestionTypeEnum = "StartWatching"
	NextPlaybackItemSuggestionTypeEnumContinueWatching NextPlaybackItemSuggestionTypeEnum = "ContinueWatching"
	NextPlaybackItemSuggestionTypeEnumRestartWatching  NextPlaybackItemSuggestionTypeEnum = "RestartWatching"
	NextPlaybackItemSuggestionTypeEnumSequential       NextPlaybackItemSuggestionTypeEnum = "Sequential"
	NextPlaybackItemSuggestionTypeEnumNone             NextPlaybackItemSuggestionTypeEnum = "None"
)

func (e *NextPlaybackItemSuggestionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "StartWatching":
		fallthrough
	case "ContinueWatching":
		fallthrough
	case "RestartWatching":
		fallthrough
	case "Sequential":
		fallthrough
	case "None":
		*e = NextPlaybackItemSuggestionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NextPlaybackItemSuggestionTypeEnum: %s", s)
	}
}

// NextPlaybackItem - The detail of the next item to play.
type NextPlaybackItem struct {
	// Time when the item corresponding to the itemId passed in by the client was
	// first watched by the user. Will be `undefined` if the user has never
	// watched the item.
	//
	// It can be used to identify the scenario where the user has never watched a
	// show and we are suggesting they watch the first episode (i.e. it is
	// missing in this scenario)
	//
	// **This will only be populated when a `showId` is passed in**
	//
	FirstWatchedDate *time.Time `json:"firstWatchedDate,omitempty"`
	// Time when the item corresponding to the itemId passed in by the client was
	// last watched by the user. Will be `undefined` if the user has never
	// watched the item.
	//
	// It can be used to identify the scenario where the user has never watched a
	// show and we are suggesting they watch the first episode (i.e. it is
	// missing in this scenario)
	//
	// **This will only be populated when a `showId` is passed in**
	//
	LastWatchedDate *time.Time  `json:"lastWatchedDate,omitempty"`
	Next            *ItemDetail `json:"next,omitempty"`
	// The id of the item used to determine the next item to play.
	SourceItemID string `json:"sourceItemId"`
	// Field indicating the type or reason behind the suggestion.
	//
	// Id Type   | Show Watched Status| Value            | Description
	// ----------|--------------------|------------------|---------------------------------
	// showId    | Unwatched          | StartWatching    |
	// showId    | Completely watched | RestartWatching  |
	// showId    | Partly watched     | ContinueWatching | Suggested episode partly watched
	// showId    | Partly watched     | Sequential       | Suggested episode unwatched
	// episodeId | Any                | Sequential       | Next episode in show
	//
	SuggestionType *NextPlaybackItemSuggestionTypeEnum `json:"suggestionType,omitempty"`
}
