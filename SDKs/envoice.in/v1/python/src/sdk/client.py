"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Client:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def client_api_all(self, request: operations.ClientAPIAllRequest) -> operations.ClientAPIAllResponse:
        r"""Return all clients for the account"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/client/all'
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClientAPIAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ClientDetailsAPIModel]])
                res.client_details_api_models = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ClientDetailsAPIModel]])
                res.client_details_api_models = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def client_api_can_delete(self, request: operations.ClientAPICanDeleteRequest) -> operations.ClientAPICanDeleteResponse:
        r"""Check if the provided client can be deleted"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/client/candelete'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ClientAPICanDeleteRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClientAPICanDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.client_api_can_delete_200_application_json_boolean = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.client_api_can_delete_200_text_json_boolean = out

        return res

    def client_api_delete_form(self, request: operations.ClientAPIDeleteFormRequest) -> operations.ClientAPIDeleteFormResponse:
        r"""Delete an existing client"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/client/delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "client_delete_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClientAPIDeleteFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.client_api_delete_form_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.client_api_delete_form_200_text_json_int32_integer = out

        return res

    def client_api_delete_json(self, request: operations.ClientAPIDeleteJSONRequest) -> operations.ClientAPIDeleteJSONResponse:
        r"""Delete an existing client"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/client/delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "client_delete_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClientAPIDeleteJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.client_api_delete_json_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.client_api_delete_json_200_text_json_int32_integer = out

        return res

    def client_api_delete_raw(self, request: operations.ClientAPIDeleteRawRequest) -> operations.ClientAPIDeleteRawResponse:
        r"""Delete an existing client"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/client/delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClientAPIDeleteRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.client_api_delete_raw_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.client_api_delete_raw_200_text_json_int32_integer = out

        return res

    def client_api_details(self, request: operations.ClientAPIDetailsRequest) -> operations.ClientAPIDetailsResponse:
        r"""Return client details. Activities and invoices included."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/client/details'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ClientAPIDetailsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClientAPIDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClientDetailsAPIModel])
                res.client_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClientDetailsAPIModel])
                res.client_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def client_api_new_form(self, request: operations.ClientAPINewFormRequest) -> operations.ClientAPINewFormResponse:
        r"""Create a client"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/client/new'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "client_create_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClientAPINewFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.client_api_new_form_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.client_api_new_form_200_text_json_int32_integer = out

        return res

    def client_api_new_json(self, request: operations.ClientAPINewJSONRequest) -> operations.ClientAPINewJSONResponse:
        r"""Create a client"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/client/new'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "client_create_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClientAPINewJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.client_api_new_json_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.client_api_new_json_200_text_json_int32_integer = out

        return res

    def client_api_new_raw(self, request: operations.ClientAPINewRawRequest) -> operations.ClientAPINewRawResponse:
        r"""Create a client"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/client/new'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClientAPINewRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.client_api_new_raw_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.client_api_new_raw_200_text_json_int32_integer = out

        return res

    def client_api_update_form(self, request: operations.ClientAPIUpdateFormRequest) -> operations.ClientAPIUpdateFormResponse:
        r"""Update an existing client"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/client/update'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "client_update_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClientAPIUpdateFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def client_api_update_json(self, request: operations.ClientAPIUpdateJSONRequest) -> operations.ClientAPIUpdateJSONResponse:
        r"""Update an existing client"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/client/update'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "client_update_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClientAPIUpdateJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def client_api_update_raw(self, request: operations.ClientAPIUpdateRawRequest) -> operations.ClientAPIUpdateRawResponse:
        r"""Update an existing client"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/client/update'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClientAPIUpdateRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    