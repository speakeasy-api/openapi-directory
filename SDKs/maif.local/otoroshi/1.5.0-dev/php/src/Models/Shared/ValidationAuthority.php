<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ValidationAuthority - Settings to access a validation authority server
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ValidationAuthority
{
    /**
     * Bypass http calls, every certificates are valids
     * 
     * @var bool $alwaysValid
     */
	#[\JMS\Serializer\Annotation\SerializedName('alwaysValid')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $alwaysValid;
    
    /**
     * The TTL for invalid access response caching
     * 
     * @var int $badTtl
     */
	#[\JMS\Serializer\Annotation\SerializedName('badTtl')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $badTtl;
    
    /**
     * The description of the settings
     * 
     * @var string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $description;
    
    /**
     * The TTL for valid access response caching
     * 
     * @var int $goodTtl
     */
	#[\JMS\Serializer\Annotation\SerializedName('goodTtl')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $goodTtl;
    
    /**
     * HTTP call headers
     * 
     * @var array<string, string> $headers
     */
	#[\JMS\Serializer\Annotation\SerializedName('headers')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    public array $headers;
    
    /**
     * The host of the server
     * 
     * @var string $host
     */
	#[\JMS\Serializer\Annotation\SerializedName('host')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $host;
    
    /**
     * The id of the settings
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * The HTTP method
     * 
     * @var string $method
     */
	#[\JMS\Serializer\Annotation\SerializedName('method')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $method;
    
    /**
     * The name of the settings
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * Avoid caching responses
     * 
     * @var bool $noCache
     */
	#[\JMS\Serializer\Annotation\SerializedName('noCache')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $noCache;
    
    /**
     * The URL path
     * 
     * @var string $path
     */
	#[\JMS\Serializer\Annotation\SerializedName('path')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $path;
    
    /**
     * The call timeout
     * 
     * @var int $timeout
     */
	#[\JMS\Serializer\Annotation\SerializedName('timeout')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $timeout;
    
    /**
     * The URL of the server
     * 
     * @var string $url
     */
	#[\JMS\Serializer\Annotation\SerializedName('url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $url;
    
	public function __construct()
	{
		$this->alwaysValid = false;
		$this->badTtl = 0;
		$this->description = "";
		$this->goodTtl = 0;
		$this->headers = [];
		$this->host = "";
		$this->id = "";
		$this->method = "";
		$this->name = "";
		$this->noCache = false;
		$this->path = "";
		$this->timeout = 0;
		$this->url = "";
	}
}
