"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CustomObjectJobs:
    r"""With Custom Objects service, you can submit a bulk job request to delete or create custom object records in a batch.
    
    If you use Postman, you can import the custom objects endpoints as a collection into your Postman app and try out different requests to learn how the API works. Click the following button to get started:
    
    [![Run in Postman](https://run.pstmn.io/button.svg)](https://www.getpostman.com/run-collection/1f068ba43651bf63c0d4)
    
    You can sign up for a free account on the [Postman website](https://identity.getpostman.com/signup) and download the app in case you do not use Postman yet.
    
    Note that the Custom Object Jobs API is versioned by `Zuora-Version` in the request header. The response may be different for the same request with a different API version. Specify `Zuora-Version` in the request header if you expect a specific response schema.
    
    ### Error handling      
    If the Custom Objects API call fails, an error code will be returned in the response body. See [Custom Objects API error code](https://knowledgecenter.zuora.com/Central_Platform/Custom_Objects/Z_Custom_Objects_API#Custom_Objects_API_error_code) for details.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_all_custom_object_bulk_jobs(self, request: operations.GETAllCustomObjectBulkJobsRequest) -> operations.GETAllCustomObjectBulkJobsResponse:
        r"""List all custom object bulk jobs
        Lists all custom object bulk jobs submitted by your tenant.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/objects/jobs'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETAllCustomObjectBulkJobsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAllCustomObjectBulkJobsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomObjectBulkJobResponseCollection])
                res.custom_object_bulk_job_response_collection = out

        return res

    def get_custom_object_bulk_job(self, request: operations.GETCustomObjectBulkJobRequest) -> operations.GETCustomObjectBulkJobResponse:
        r"""Retrieve a custom object bulk job
        Retrieves the custom object bulk job details by job ID.
        
        Only the users that have the \"View Custom Objects\" permission can retrieve custom object bulk jobs. See [Platform Permissions](https://knowledgecenter.zuora.com/Billing/Tenant_Management/A_Administrator_Settings/User_Roles/h_Platform_Roles#Platform_Permissions) for more information.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETCustomObjectBulkJobRequest, base_url, '/objects/jobs/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETCustomObjectBulkJobResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomObjectBulkJobResponse])
                res.custom_object_bulk_job_response = out
        elif http_res.status_code == 404:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommonErrorResponse])
                res.common_error_response = out

        return res

    def get_custom_object_bulk_job_errors(self, request: operations.GETCustomObjectBulkJobErrorsRequest) -> operations.GETCustomObjectBulkJobErrorsResponse:
        r"""List all errors for a custom object bulk job
        Lists all errors for a custom object bulk job.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETCustomObjectBulkJobErrorsRequest, base_url, '/objects/jobs/{id}/errors', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETCustomObjectBulkJobErrorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomObjectBulkJobErrorResponseCollection])
                res.custom_object_bulk_job_error_response_collection = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommonErrorResponse])
                res.common_error_response = out

        return res

    def post_custom_object_bulk_job(self, request: operations.POSTCustomObjectBulkJobRequest) -> operations.POSTCustomObjectBulkJobResponse:
        r"""Submit a custom object bulk job
        Submits a bulk job request for a bulk operation on the specified custom object records. A succcessful call returns a newly created bulk job. The job ID can be used to poll the job status or upload the CSV file if it is a `create` job.
        
        ## Limits
        This custom object bulk jobs have the following limits:
        * The concurrent bulk job limit per tenant is 5. Bulk jobs in `open`, `pending`, or `in_progress` status are counted towards the concurrent bulk job limit.
        * The bulk job execuation order is not guaranteed, which means the bulk job that you submit ealier may be executed later.  
        * Only the users that have the \"Delete Custom Objects\" permission can create a `delete` bulk job. Only the users that have the \"Edit Custom Objects\" permission can create a `create` bulk job. See [Platform Permissions](https://knowledgecenter.zuora.com/Billing/Tenant_Management/A_Administrator_Settings/User_Roles/h_Platform_Roles#Platform_Permissions) for more information.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/objects/jobs'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "custom_object_bulk_job_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTCustomObjectBulkJobResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomObjectBulkJobResponse])
                res.custom_object_bulk_job_response = out
        elif http_res.status_code in [400, 403]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommonErrorResponse])
                res.common_error_response = out

        return res

    def post_upload_file_for_custom_object_bulk_job(self, request: operations.POSTUploadFileForCustomObjectBulkJobRequest) -> operations.POSTUploadFileForCustomObjectBulkJobResponse:
        r"""Upload a file for a custom object bulk job
        Uploads a file to a create custom object bulk job. Only one file is allowed per job. The job must be in `pending` status when you upload the file to it. The job will start creating records once the upload is finished.
        
        Only the users that have the \"Edit Custom Objects\" permission can upload files to custom object bulk jobs. See [Platform Permissions](https://knowledgecenter.zuora.com/Billing/Tenant_Management/A_Administrator_Settings/User_Roles/h_Platform_Roles#Platform_Permissions) for more information.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.POSTUploadFileForCustomObjectBulkJobRequest, base_url, '/objects/jobs/{id}/files', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTUploadFileForCustomObjectBulkJobResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomObjectBulkJobResponse])
                res.custom_object_bulk_job_response = out
        elif http_res.status_code in [400, 403, 404]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommonErrorResponse])
                res.common_error_response = out

        return res

    