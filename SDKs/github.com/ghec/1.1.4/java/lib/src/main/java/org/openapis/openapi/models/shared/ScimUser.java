/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ScimUser - SCIM /Users provisioning endpoints
 */
public class ScimUser {
    /**
     * The active status of the User.
     */
    @JsonProperty("active")
    public Boolean active;
    public ScimUser withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * The name of the user, suitable for display to end-users
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public ScimUser withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * user emails
     */
    @JsonProperty("emails")
    public ScimUserEmails[] emails;
    public ScimUser withEmails(ScimUserEmails[] emails) {
        this.emails = emails;
        return this;
    }
    
    /**
     * The ID of the User.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalId")
    public String externalId;
    public ScimUser withExternalId(String externalId) {
        this.externalId = externalId;
        return this;
    }
    
    /**
     * associated groups
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groups")
    public ScimUserGroups[] groups;
    public ScimUser withGroups(ScimUserGroups[] groups) {
        this.groups = groups;
        return this;
    }
    
    /**
     * Unique identifier of an external identity
     */
    @JsonProperty("id")
    public String id;
    public ScimUser withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonProperty("meta")
    public ScimUserMeta meta;
    public ScimUser withMeta(ScimUserMeta meta) {
        this.meta = meta;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public ScimUserName name;
    public ScimUser withName(ScimUserName name) {
        this.name = name;
        return this;
    }
    
    /**
     * Set of operations to be performed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operations")
    public ScimUserOperations[] operations;
    public ScimUser withOperations(ScimUserOperations[] operations) {
        this.operations = operations;
        return this;
    }
    
    /**
     * The ID of the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_id")
    public Long organizationId;
    public ScimUser withOrganizationId(Long organizationId) {
        this.organizationId = organizationId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roles")
    public ScimUserRoles[] roles;
    public ScimUser withRoles(ScimUserRoles[] roles) {
        this.roles = roles;
        return this;
    }
    
    /**
     * SCIM schema used.
     */
    @JsonProperty("schemas")
    public String[] schemas;
    public ScimUser withSchemas(String[] schemas) {
        this.schemas = schemas;
        return this;
    }
    
    /**
     * Configured by the admin. Could be an email, login, or username
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userName")
    public String userName;
    public ScimUser withUserName(String userName) {
        this.userName = userName;
        return this;
    }
    
}
