"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import imagefile as shared_imagefile
from ..shared import updateportalresponse as shared_updateportalresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdatePortalRequestBodyAlarms:
    r"""Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range. For more information, see <a href=\\"https://docs.aws.amazon.com/iot-sitewise/latest/appguide/monitor-alarms.html\\">Monitoring with alarms</a> in the <i>IoT SiteWise Application Guide</i>."""
    
    alarm_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alarmRoleArn'), 'exclude': lambda f: f is None }})  
    notification_lambda_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notificationLambdaArn'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdatePortalRequestBodyPortalLogoImage:
    r"""<p>Contains an image that is one of the following:</p> <ul> <li> <p>An image file. Choose this option to upload a new image.</p> </li> <li> <p>The ID of an existing image. Choose this option to keep an existing image.</p> </li> </ul>"""
    
    file: Optional[shared_imagefile.ImageFile] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file'), 'exclude': lambda f: f is None }})
    r"""Contains an image file."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdatePortalRequestBody:
    
    portal_contact_email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalContactEmail') }})
    r"""The Amazon Web Services administrator's contact email address."""  
    portal_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalName') }})
    r"""A new friendly name for the portal."""  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleArn') }})
    r"""The <a href=\\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\\">ARN</a> of a service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href=\\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html\\">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>."""  
    alarms: Optional[UpdatePortalRequestBodyAlarms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alarms'), 'exclude': lambda f: f is None }})
    r"""Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range. For more information, see <a href=\\"https://docs.aws.amazon.com/iot-sitewise/latest/appguide/monitor-alarms.html\\">Monitoring with alarms</a> in the <i>IoT SiteWise Application Guide</i>."""  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientToken'), 'exclude': lambda f: f is None }})
    r"""A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required."""  
    notification_sender_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notificationSenderEmail'), 'exclude': lambda f: f is None }})
    r"""The email address that sends alarm notifications."""  
    portal_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalDescription'), 'exclude': lambda f: f is None }})
    r"""A new description for the portal."""  
    portal_logo_image: Optional[UpdatePortalRequestBodyPortalLogoImage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portalLogoImage'), 'exclude': lambda f: f is None }})
    r"""<p>Contains an image that is one of the following:</p> <ul> <li> <p>An image file. Choose this option to upload a new image.</p> </li> <li> <p>The ID of an existing image. Choose this option to keep an existing image.</p> </li> </ul>"""  
    

@dataclasses.dataclass
class UpdatePortalRequest:
    
    portal_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'portalId', 'style': 'simple', 'explode': False }})
    r"""The ID of the portal to update."""  
    request_body: UpdatePortalRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdatePortalResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conflicting_operation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictingOperationException"""  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_portal_response: Optional[shared_updateportalresponse.UpdatePortalResponse] = dataclasses.field(default=None)
    r"""Success"""  
    