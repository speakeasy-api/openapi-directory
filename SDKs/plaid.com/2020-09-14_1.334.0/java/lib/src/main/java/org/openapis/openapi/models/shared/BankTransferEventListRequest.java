/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * BankTransferEventListRequest - Defines the request schema for `/bank_transfer/event/list`
 */
public class BankTransferEventListRequest {
    /**
     * The account ID to get events for all transactions to/from an account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    public String accountId;
    public BankTransferEventListRequest withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * Plaid\u2019s unique identifier for a bank transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_transfer_id")
    public String bankTransferId;
    public BankTransferEventListRequest withBankTransferId(String bankTransferId) {
        this.bankTransferId = bankTransferId;
        return this;
    }
    
    /**
     * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_transfer_type")
    public BankTransferEventListBankTransferTypeEnum bankTransferType;
    public BankTransferEventListRequest withBankTransferType(BankTransferEventListBankTransferTypeEnum bankTransferType) {
        this.bankTransferType = bankTransferType;
        return this;
    }
    
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_id")
    public String clientId;
    public BankTransferEventListRequest withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * The maximum number of bank transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    public Long count;
    public BankTransferEventListRequest withCount(Long count) {
        this.count = count;
        return this;
    }
    
    /**
     * Indicates the direction of the transfer: `outbound`: for API-initiated transfers
     * `inbound`: for payments received by the FBO account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("direction")
    public BankTransferEventListDirectionEnum direction;
    public BankTransferEventListRequest withDirection(BankTransferEventListDirectionEnum direction) {
        this.direction = direction;
        return this;
    }
    
    /**
     * The end datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("end_date")
    public OffsetDateTime endDate;
    public BankTransferEventListRequest withEndDate(OffsetDateTime endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * Filter events by event type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_types")
    public BankTransferEventTypeEnum[] eventTypes;
    public BankTransferEventListRequest withEventTypes(BankTransferEventTypeEnum[] eventTypes) {
        this.eventTypes = eventTypes;
        return this;
    }
    
    /**
     * The offset into the list of bank transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 bank transfer events will be returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    public Long offset;
    public BankTransferEventListRequest withOffset(Long offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * The origination account ID to get events for transfers from a specific origination account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("origination_account_id")
    public String originationAccountId;
    public BankTransferEventListRequest withOriginationAccountId(String originationAccountId) {
        this.originationAccountId = originationAccountId;
        return this;
    }
    
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret")
    public String secret;
    public BankTransferEventListRequest withSecret(String secret) {
        this.secret = secret;
        return this;
    }
    
    /**
     * The start datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start_date")
    public OffsetDateTime startDate;
    public BankTransferEventListRequest withStartDate(OffsetDateTime startDate) {
        this.startDate = startDate;
        return this;
    }
    
}
