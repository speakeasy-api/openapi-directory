/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Colors - Successful response
 */
public class Colors {
    /**
     * A global palette of calendar colors, mapping from the color ID to its definition. A calendarListEntry resource refers to one of these color IDs in its colorId field. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calendar")
    public java.util.Map<String, ColorDefinition> calendar;

    public Colors withCalendar(java.util.Map<String, ColorDefinition> calendar) {
        this.calendar = calendar;
        return this;
    }
    
    /**
     * A global palette of event colors, mapping from the color ID to its definition. An event resource may refer to one of these color IDs in its colorId field. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event")
    public java.util.Map<String, ColorDefinition> event;

    public Colors withEvent(java.util.Map<String, ColorDefinition> event) {
        this.event = event;
        return this;
    }
    
    /**
     * Type of the resource ("calendar#colors").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Colors withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Last modification time of the color palette (as a RFC3339 timestamp). Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated")
    public OffsetDateTime updated;

    public Colors withUpdated(OffsetDateTime updated) {
        this.updated = updated;
        return this;
    }
    
    public Colors(){}
}
