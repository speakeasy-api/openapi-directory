"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class BikePoint:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def bike_point_get(self, request: operations.BikePointGetRequest) -> operations.BikePointGetResponse:
        r"""Gets the bike point with the given id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BikePointGetRequest, base_url, '/BikePoint/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BikePointGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TflAPIPresentationEntitiesPlace])
                res.tfl_api_presentation_entities_place = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TflAPIPresentationEntitiesPlace])
                res.tfl_api_presentation_entities_place = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def bike_point_get_all(self) -> operations.BikePointGetAllResponse:
        r"""Gets all bike point locations. The Place object has an addtionalProperties array which contains the nbBikes, nbDocks and nbSpaces
                    numbers which give the status of the BikePoint. A mismatch in these numbers i.e. nbDocks - (nbBikes + nbSpaces) != 0 indicates broken docks.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/BikePoint'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BikePointGetAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesPlace]])
                res.tfl_api_presentation_entities_places = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesPlace]])
                res.tfl_api_presentation_entities_places = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def bike_point_search(self, request: operations.BikePointSearchRequest) -> operations.BikePointSearchResponse:
        r"""Search for bike stations by their name, a bike point's name often contains information about the name of the street
                    or nearby landmarks, for example. Note that the search result does not contain the PlaceProperties i.e. the status
                    or occupancy of the BikePoint, to get that information you should retrieve the BikePoint by its id on /BikePoint/id.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/BikePoint/Search'
        
        query_params = utils.get_query_params(operations.BikePointSearchRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BikePointSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesPlace]])
                res.tfl_api_presentation_entities_places = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesPlace]])
                res.tfl_api_presentation_entities_places = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    