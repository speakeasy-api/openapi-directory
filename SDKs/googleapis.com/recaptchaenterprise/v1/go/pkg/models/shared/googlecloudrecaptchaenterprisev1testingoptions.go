// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleCloudRecaptchaenterpriseV1TestingOptionsTestingChallengeEnum - For challenge-based keys only (CHECKBOX, INVISIBLE), all challenge requests for this site will return nocaptcha if NOCAPTCHA, or an unsolvable challenge if CHALLENGE.
type GoogleCloudRecaptchaenterpriseV1TestingOptionsTestingChallengeEnum string

const (
	GoogleCloudRecaptchaenterpriseV1TestingOptionsTestingChallengeEnumTestingChallengeUnspecified GoogleCloudRecaptchaenterpriseV1TestingOptionsTestingChallengeEnum = "TESTING_CHALLENGE_UNSPECIFIED"
	GoogleCloudRecaptchaenterpriseV1TestingOptionsTestingChallengeEnumNocaptcha                   GoogleCloudRecaptchaenterpriseV1TestingOptionsTestingChallengeEnum = "NOCAPTCHA"
	GoogleCloudRecaptchaenterpriseV1TestingOptionsTestingChallengeEnumUnsolvableChallenge         GoogleCloudRecaptchaenterpriseV1TestingOptionsTestingChallengeEnum = "UNSOLVABLE_CHALLENGE"
)

func (e *GoogleCloudRecaptchaenterpriseV1TestingOptionsTestingChallengeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TESTING_CHALLENGE_UNSPECIFIED":
		fallthrough
	case "NOCAPTCHA":
		fallthrough
	case "UNSOLVABLE_CHALLENGE":
		*e = GoogleCloudRecaptchaenterpriseV1TestingOptionsTestingChallengeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRecaptchaenterpriseV1TestingOptionsTestingChallengeEnum: %s", s)
	}
}

// GoogleCloudRecaptchaenterpriseV1TestingOptions - Options for user acceptance testing.
type GoogleCloudRecaptchaenterpriseV1TestingOptions struct {
	// For challenge-based keys only (CHECKBOX, INVISIBLE), all challenge requests for this site will return nocaptcha if NOCAPTCHA, or an unsolvable challenge if CHALLENGE.
	TestingChallenge *GoogleCloudRecaptchaenterpriseV1TestingOptionsTestingChallengeEnum `json:"testingChallenge,omitempty"`
	// All assessments for this Key will return this score. Must be between 0 (likely not legitimate) and 1 (likely legitimate) inclusive.
	TestingScore *float32 `json:"testingScore,omitempty"`
}
