"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Site:
    r"""Every target has a site object, it contains the main entry URL for scans.
    Other settings are also connected to a site like login parameters,
    basic auth, and custom headers and cookies.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_targets_target_id_site_(self, request: operations.GetTargetsTargetIDSiteRequest) -> operations.GetTargetsTargetIDSiteResponse:
        r"""Retrieve target's site"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTargetsTargetIDSiteRequest, base_url, '/targets/{target_id}/site/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTargetsTargetIDSiteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Site])
                res.site = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTargetsTargetIDSite401ApplicationJSON])
                res.get_targets_target_id_site_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTargetsTargetIDSite404ApplicationJSON])
                res.get_targets_target_id_site_404_application_json_object = out

        return res

    def patch_targets_target_id_site_(self, request: operations.PatchTargetsTargetIDSiteRequest) -> operations.PatchTargetsTargetIDSiteResponse:
        r"""Partial update target's site
        Note that the URL can only be set once.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchTargetsTargetIDSiteRequest, base_url, '/targets/{target_id}/site/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "site_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchTargetsTargetIDSiteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Site])
                res.site = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatchTargetsTargetIDSite400ApplicationJSON])
                res.patch_targets_target_id_site_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatchTargetsTargetIDSite401ApplicationJSON])
                res.patch_targets_target_id_site_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatchTargetsTargetIDSite403ApplicationJSON])
                res.patch_targets_target_id_site_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatchTargetsTargetIDSite404ApplicationJSON])
                res.patch_targets_target_id_site_404_application_json_object = out

        return res

    def post_targets_target_id_site_verify_(self, request: operations.PostTargetsTargetIDSiteVerifyRequest) -> operations.PostTargetsTargetIDSiteVerifyResponse:
        r"""Verify site ownership"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostTargetsTargetIDSiteVerifyRequest, base_url, '/targets/{target_id}/site/verify/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTargetsTargetIDSiteVerifyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostTargetsTargetIDSiteVerify200ApplicationJSON])
                res.post_targets_target_id_site_verify_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostTargetsTargetIDSiteVerify400ApplicationJSON])
                res.post_targets_target_id_site_verify_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostTargetsTargetIDSiteVerify401ApplicationJSON])
                res.post_targets_target_id_site_verify_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostTargetsTargetIDSiteVerify403ApplicationJSON])
                res.post_targets_target_id_site_verify_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostTargetsTargetIDSiteVerify404ApplicationJSON])
                res.post_targets_target_id_site_verify_404_application_json_object = out

        return res

    def put_targets_target_id_site_(self, request: operations.PutTargetsTargetIDSiteRequest) -> operations.PutTargetsTargetIDSiteResponse:
        r"""Update target's site
        Note that the URL can only be set once.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutTargetsTargetIDSiteRequest, base_url, '/targets/{target_id}/site/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "site_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutTargetsTargetIDSiteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Site])
                res.site = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutTargetsTargetIDSite400ApplicationJSON])
                res.put_targets_target_id_site_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutTargetsTargetIDSite401ApplicationJSON])
                res.put_targets_target_id_site_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutTargetsTargetIDSite403ApplicationJSON])
                res.put_targets_target_id_site_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutTargetsTargetIDSite404ApplicationJSON])
                res.put_targets_target_id_site_404_application_json_object = out

        return res

    