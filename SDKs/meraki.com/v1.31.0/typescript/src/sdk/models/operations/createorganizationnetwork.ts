/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export enum CreateOrganizationNetworkRequestBodyProductTypesEnum {
  Appliance = "appliance",
  Camera = "camera",
  CellularGateway = "cellularGateway",
  Sensor = "sensor",
  Switch = "switch",
  SystemsManager = "systemsManager",
  Wireless = "wireless",
}

export class CreateOrganizationNetworkRequestBody extends SpeakeasyBase {
  /**
   * The ID of the network to copy configuration from. Other provided parameters will override the copied configuration, except type which must match this network's type exactly.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "copyFromNetworkId" })
  copyFromNetworkId?: string;

  /**
   * The name of the new network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Add any notes or additional information about this network here.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;

  /**
   * The product type(s) of the new network. If more than one type is included, the network will be a combined network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productTypes" })
  productTypes: CreateOrganizationNetworkRequestBodyProductTypesEnum[];

  /**
   * A list of tags to be applied to the network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: string[];

  /**
   * The timezone of the network. For a list of allowed timezones, please see the 'TZ' column in the table in <a target='_blank' href='https://en.wikipedia.org/wiki/List_of_tz_database_time_zones'>this article.</a>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeZone" })
  timeZone?: string;
}

export class CreateOrganizationNetworkRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateOrganizationNetworkRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=organizationId",
  })
  organizationId: string;
}

/**
 * Successful operation
 */
export class CreateOrganizationNetwork201ApplicationJSON extends SpeakeasyBase {
  /**
   * Enrollment string for the network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enrollmentString" })
  enrollmentString?: string;

  /**
   * Network ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * If the network is bound to a config template
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isBoundToConfigTemplate" })
  isBoundToConfigTemplate?: boolean;

  /**
   * Network name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Notes for the network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;

  /**
   * Organization ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organizationId" })
  organizationId?: string;

  /**
   * List of the product types that the network supports
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productTypes" })
  productTypes?: string[];

  /**
   * Network tags
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: string[];

  /**
   * Timezone of the network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeZone" })
  timeZone?: string;

  /**
   * URL to the network Dashboard UI
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class CreateOrganizationNetworkResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  createOrganizationNetwork201ApplicationJSONObject?: CreateOrganizationNetwork201ApplicationJSON;
}
