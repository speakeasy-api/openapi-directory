<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * JavaSettings - Settings for Java client libraries.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class JavaSettings
{
    /**
     * Required information for every language.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CommonLanguageSettings $common
     */
	#[\JMS\Serializer\Annotation\SerializedName('common')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CommonLanguageSettings')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CommonLanguageSettings $common = null;
    
    /**
     * The package name to use in Java. Clobbers the java_package option set in the protobuf. This should be used **only** by APIs who have already set the language_settings.java.package_name" field in gapic.yaml. API teams should use the protobuf java_package option where possible. Example of a YAML configuration:: publishing: java_settings: library_package: com.google.cloud.pubsub.v1
     * 
     * @var ?string $libraryPackage
     */
	#[\JMS\Serializer\Annotation\SerializedName('libraryPackage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $libraryPackage = null;
    
    /**
     * Configure the Java class name to use instead of the service's for its corresponding generated GAPIC client. Keys are fully-qualified service names as they appear in the protobuf (including the full the language_settings.java.interface_names" field in gapic.yaml. API teams should otherwise use the service name as it appears in the protobuf. Example of a YAML configuration:: publishing: java_settings: service_class_names: - google.pubsub.v1.Publisher: TopicAdmin - google.pubsub.v1.Subscriber: SubscriptionAdmin
     * 
     * @var ?array<string, string> $serviceClassNames
     */
	#[\JMS\Serializer\Annotation\SerializedName('serviceClassNames')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $serviceClassNames = null;
    
	public function __construct()
	{
		$this->common = null;
		$this->libraryPackage = null;
		$this->serviceClassNames = null;
	}
}
