"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class As2Stations:
    r"""Operations about as2_stations"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_as2_stations_id(self, request: operations.DeleteAs2StationsIDRequest) -> operations.DeleteAs2StationsIDResponse:
        r"""Delete As2 Station
        Delete As2 Station
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAs2StationsIDRequest, base_url, '/as2_stations/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAs2StationsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_as2_stations(self, request: operations.GetAs2StationsRequest) -> operations.GetAs2StationsResponse:
        r"""List As2 Stations
        List As2 Stations
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/as2_stations'
        
        query_params = utils.get_query_params(operations.GetAs2StationsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAs2StationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.As2StationEntity]])
                res.as2_station_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def get_as2_stations_id(self, request: operations.GetAs2StationsIDRequest) -> operations.GetAs2StationsIDResponse:
        r"""Show As2 Station
        Show As2 Station
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAs2StationsIDRequest, base_url, '/as2_stations/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAs2StationsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.As2StationEntity])
                res.as2_station_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def patch_as2_stations_id(self, request: operations.PatchAs2StationsIDRequest) -> operations.PatchAs2StationsIDResponse:
        r"""Update As2 Station
        Update As2 Station
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchAs2StationsIDRequest, base_url, '/as2_stations/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchAs2StationsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.As2StationEntity])
                res.as2_station_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def post_as2_stations(self, request: operations.PostAs2StationsRequestBody) -> operations.PostAs2StationsResponse:
        r"""Create As2 Station
        Create As2 Station
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/as2_stations'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAs2StationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.As2StationEntity])
                res.as2_station_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    