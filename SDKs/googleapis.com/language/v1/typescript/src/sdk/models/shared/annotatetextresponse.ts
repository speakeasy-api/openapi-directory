/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ClassificationCategory } from "./classificationcategory";
import { Entity } from "./entity";
import { Sentence } from "./sentence";
import { Sentiment } from "./sentiment";
import { Token } from "./token";
import { Expose, Type } from "class-transformer";

/**
 * The text annotations response message.
 */
export class AnnotateTextResponse extends SpeakeasyBase {
  /**
   * Categories identified in the input document.
   */
  @SpeakeasyMetadata({ elemType: ClassificationCategory })
  @Expose({ name: "categories" })
  @Type(() => ClassificationCategory)
  categories?: ClassificationCategory[];

  /**
   * Represents the feeling associated with the entire text or entities in the text.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "documentSentiment" })
  @Type(() => Sentiment)
  documentSentiment?: Sentiment;

  /**
   * Entities, along with their semantic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_entities.
   */
  @SpeakeasyMetadata({ elemType: Entity })
  @Expose({ name: "entities" })
  @Type(() => Entity)
  entities?: Entity[];

  /**
   * The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language?: string;

  /**
   * Sentences in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_syntax.
   */
  @SpeakeasyMetadata({ elemType: Sentence })
  @Expose({ name: "sentences" })
  @Type(() => Sentence)
  sentences?: Sentence[];

  /**
   * Tokens, along with their syntactic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_syntax.
   */
  @SpeakeasyMetadata({ elemType: Token })
  @Expose({ name: "tokens" })
  @Type(() => Token)
  tokens?: Token[];
}
