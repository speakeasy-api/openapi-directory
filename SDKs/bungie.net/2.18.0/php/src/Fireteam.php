<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Fireteam 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FireteamGetActivePrivateClanFireteamCountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FireteamGetActivePrivateClanFireteamCountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FireteamGetActivePrivateClanFireteamCountResponse
     */
	public function fireteamGetActivePrivateClanFireteamCount(
        \OpenAPI\OpenAPI\Models\Operations\FireteamGetActivePrivateClanFireteamCountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FireteamGetActivePrivateClanFireteamCountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FireteamGetActivePrivateClanFireteamCountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Fireteam/Clan/{groupId}/ActiveCount/', \OpenAPI\OpenAPI\Models\Operations\FireteamGetActivePrivateClanFireteamCountRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FireteamGetActivePrivateClanFireteamCountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets a listing of all of this clan's fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FireteamGetAvailableClanFireteamsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FireteamGetAvailableClanFireteamsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FireteamGetAvailableClanFireteamsResponse
     */
	public function fireteamGetAvailableClanFireteams(
        \OpenAPI\OpenAPI\Models\Operations\FireteamGetAvailableClanFireteamsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FireteamGetAvailableClanFireteamsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FireteamGetAvailableClanFireteamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/', \OpenAPI\OpenAPI\Models\Operations\FireteamGetAvailableClanFireteamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FireteamGetAvailableClanFireteamsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FireteamGetAvailableClanFireteamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets a specific fireteam.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FireteamGetClanFireteamRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FireteamGetClanFireteamSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FireteamGetClanFireteamResponse
     */
	public function fireteamGetClanFireteam(
        \OpenAPI\OpenAPI\Models\Operations\FireteamGetClanFireteamRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FireteamGetClanFireteamSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FireteamGetClanFireteamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Fireteam/Clan/{groupId}/Summary/{fireteamId}/', \OpenAPI\OpenAPI\Models\Operations\FireteamGetClanFireteamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FireteamGetClanFireteamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FireteamGetMyClanFireteamsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FireteamGetMyClanFireteamsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FireteamGetMyClanFireteamsResponse
     */
	public function fireteamGetMyClanFireteams(
        \OpenAPI\OpenAPI\Models\Operations\FireteamGetMyClanFireteamsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FireteamGetMyClanFireteamsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FireteamGetMyClanFireteamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/{page}/', \OpenAPI\OpenAPI\Models\Operations\FireteamGetMyClanFireteamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FireteamGetMyClanFireteamsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FireteamGetMyClanFireteamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FireteamSearchPublicAvailableClanFireteamsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FireteamSearchPublicAvailableClanFireteamsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FireteamSearchPublicAvailableClanFireteamsResponse
     */
	public function fireteamSearchPublicAvailableClanFireteams(
        \OpenAPI\OpenAPI\Models\Operations\FireteamSearchPublicAvailableClanFireteamsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FireteamSearchPublicAvailableClanFireteamsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FireteamSearchPublicAvailableClanFireteamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/', \OpenAPI\OpenAPI\Models\Operations\FireteamSearchPublicAvailableClanFireteamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FireteamSearchPublicAvailableClanFireteamsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FireteamSearchPublicAvailableClanFireteamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}