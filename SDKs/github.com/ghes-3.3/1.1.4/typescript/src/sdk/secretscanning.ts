/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Retrieve secret scanning alerts from a repository.
 */
export class SecretScanning {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get a secret scanning alert
   *
   * @remarks
   * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.3/rest/reference/secret-scanning#get-a-secret-scanning-alert} - API method documentation
   */
  secretScanningGetAlert(
    req: operations.SecretScanningGetAlertRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretScanningGetAlertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretScanningGetAlertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretScanningGetAlertResponse =
        new operations.SecretScanningGetAlertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secretScanningAlert = utils.objectToClass(
              httpRes?.data,
              shared.SecretScanningAlert
            );
          }
          break;
        case [304, 404].includes(httpRes?.status):
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secretScanningGetAlert503ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SecretScanningGetAlert503ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List secret scanning alerts for an organization
   *
   * @remarks
   * Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
   * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.3/rest/reference/secret-scanning#list-secret-scanning-alerts-for-an-organization} - API method documentation
   */
  secretScanningListAlertsForOrg(
    req: operations.SecretScanningListAlertsForOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretScanningListAlertsForOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretScanningListAlertsForOrgRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/secret-scanning/alerts",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretScanningListAlertsForOrgResponse =
        new operations.SecretScanningListAlertsForOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.organizationSecretScanningAlerts = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.organizationSecretScanningAlerts = utils.objectToClass(
              httpRes?.data,
              shared.OrganizationSecretScanningAlert,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secretScanningListAlertsForOrg503ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SecretScanningListAlertsForOrg503ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List secret scanning alerts for a repository
   *
   * @remarks
   * Lists secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.3/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository} - API method documentation
   */
  secretScanningListAlertsForRepo(
    req: operations.SecretScanningListAlertsForRepoRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretScanningListAlertsForRepoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretScanningListAlertsForRepoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/secret-scanning/alerts",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretScanningListAlertsForRepoResponse =
        new operations.SecretScanningListAlertsForRepoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secretScanningAlerts = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.secretScanningAlerts = utils.objectToClass(
              httpRes?.data,
              shared.SecretScanningAlert,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secretScanningListAlertsForRepo503ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SecretScanningListAlertsForRepo503ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List locations for a secret scanning alert
   *
   * @remarks
   * Lists all locations for a given secret scanning alert for a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.3/rest/reference/secret-scanning#list-locations-for-a-secret-scanning-alert} - API method documentation
   */
  secretScanningListLocationsForAlert(
    req: operations.SecretScanningListLocationsForAlertRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretScanningListLocationsForAlertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretScanningListLocationsForAlertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretScanningListLocationsForAlertResponse =
        new operations.SecretScanningListLocationsForAlertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secretScanningLocations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.secretScanningLocations = utils.objectToClass(
              httpRes?.data,
              shared.SecretScanningLocation,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secretScanningListLocationsForAlert503ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SecretScanningListLocationsForAlert503ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a secret scanning alert
   *
   * @remarks
   * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.3/rest/reference/secret-scanning#update-a-secret-scanning-alert} - API method documentation
   */
  secretScanningUpdateAlert(
    req: operations.SecretScanningUpdateAlertRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretScanningUpdateAlertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretScanningUpdateAlertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretScanningUpdateAlertResponse =
        new operations.SecretScanningUpdateAlertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secretScanningAlert = utils.objectToClass(
              httpRes?.data,
              shared.SecretScanningAlert
            );
          }
          break;
        case [404, 422].includes(httpRes?.status):
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secretScanningUpdateAlert503ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SecretScanningUpdateAlert503ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
