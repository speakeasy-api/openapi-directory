/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class ObservationHeading {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public String code;

    public ObservationHeading withCode(String code) {
        this.code = code;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created")
    public OffsetDateTime created;

    public ObservationHeading withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("decimalPlaces")
    public Long decimalPlaces;

    public ObservationHeading withDecimalPlaces(Long decimalPlaces) {
        this.decimalPlaces = decimalPlaces;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultPanel")
    public Long defaultPanel;

    public ObservationHeading withDefaultPanel(Long defaultPanel) {
        this.defaultPanel = defaultPanel;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultPanelOrder")
    public Long defaultPanelOrder;

    public ObservationHeading withDefaultPanelOrder(Long defaultPanelOrder) {
        this.defaultPanelOrder = defaultPanelOrder;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("heading")
    public String heading;

    public ObservationHeading withHeading(String heading) {
        this.heading = heading;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;

    public ObservationHeading withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("infoLink")
    public String infoLink;

    public ObservationHeading withInfoLink(String infoLink) {
        this.infoLink = infoLink;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdate")
    public OffsetDateTime lastUpdate;

    public ObservationHeading withLastUpdate(OffsetDateTime lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxGraph")
    public Double maxGraph;

    public ObservationHeading withMaxGraph(Double maxGraph) {
        this.maxGraph = maxGraph;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minGraph")
    public Double minGraph;

    public ObservationHeading withMinGraph(Double minGraph) {
        this.minGraph = minGraph;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public ObservationHeading withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("normalRange")
    public String normalRange;

    public ObservationHeading withNormalRange(String normalRange) {
        this.normalRange = normalRange;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("observationHeadingGroups")
    public ObservationHeadingGroup[] observationHeadingGroups;

    public ObservationHeading withObservationHeadingGroups(ObservationHeadingGroup[] observationHeadingGroups) {
        this.observationHeadingGroups = observationHeadingGroups;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("units")
    public String units;

    public ObservationHeading withUnits(String units) {
        this.units = units;
        return this;
    }
    
    public ObservationHeading(){}
}
