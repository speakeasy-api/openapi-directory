/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * LivingAreaLayout - Information about the layout of the living area.
 */
public class LivingAreaLayout {
    /**
     * Balcony. An outdoor platform attached to a building and surrounded by a short wall, fence or other safety railing. The balcony is accessed through a door in a guestroom or suite and is for use by the guest staying in that room. May or may not include seating or outdoor furniture. Is not located on the ground floor. Also lanai.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balcony")
    public Boolean balcony;

    public LivingAreaLayout withBalcony(Boolean balcony) {
        this.balcony = balcony;
        return this;
    }
    
    /**
     * Balcony exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balconyException")
    public LivingAreaLayoutBalconyExceptionEnum balconyException;

    public LivingAreaLayout withBalconyException(LivingAreaLayoutBalconyExceptionEnum balconyException) {
        this.balconyException = balconyException;
        return this;
    }
    
    /**
     * Living area sq meters. The measurement in meters of the area of a guestroom's living space.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("livingAreaSqMeters")
    public Float livingAreaSqMeters;

    public LivingAreaLayout withLivingAreaSqMeters(Float livingAreaSqMeters) {
        this.livingAreaSqMeters = livingAreaSqMeters;
        return this;
    }
    
    /**
     * Living area sq meters exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("livingAreaSqMetersException")
    public LivingAreaLayoutLivingAreaSqMetersExceptionEnum livingAreaSqMetersException;

    public LivingAreaLayout withLivingAreaSqMetersException(LivingAreaLayoutLivingAreaSqMetersExceptionEnum livingAreaSqMetersException) {
        this.livingAreaSqMetersException = livingAreaSqMetersException;
        return this;
    }
    
    /**
     * Loft. A three-walled upper area accessed by stairs or a ladder that overlooks the lower area of a room.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loft")
    public Boolean loft;

    public LivingAreaLayout withLoft(Boolean loft) {
        this.loft = loft;
        return this;
    }
    
    /**
     * Loft exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loftException")
    public LivingAreaLayoutLoftExceptionEnum loftException;

    public LivingAreaLayout withLoftException(LivingAreaLayoutLoftExceptionEnum loftException) {
        this.loftException = loftException;
        return this;
    }
    
    /**
     * Non smoking. A guestroom in which the smoking of cigarettes, cigars and pipes is prohibited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nonSmoking")
    public Boolean nonSmoking;

    public LivingAreaLayout withNonSmoking(Boolean nonSmoking) {
        this.nonSmoking = nonSmoking;
        return this;
    }
    
    /**
     * Non smoking exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nonSmokingException")
    public LivingAreaLayoutNonSmokingExceptionEnum nonSmokingException;

    public LivingAreaLayout withNonSmokingException(LivingAreaLayoutNonSmokingExceptionEnum nonSmokingException) {
        this.nonSmokingException = nonSmokingException;
        return this;
    }
    
    /**
     * Patio. A paved, outdoor area with seating attached to and accessed through a ground-floor guestroom for use by the occupants of the guestroom.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("patio")
    public Boolean patio;

    public LivingAreaLayout withPatio(Boolean patio) {
        this.patio = patio;
        return this;
    }
    
    /**
     * Patio exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("patioException")
    public LivingAreaLayoutPatioExceptionEnum patioException;

    public LivingAreaLayout withPatioException(LivingAreaLayoutPatioExceptionEnum patioException) {
        this.patioException = patioException;
        return this;
    }
    
    /**
     * Stairs. There are steps leading from one level or story to another in the unit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stairs")
    public Boolean stairs;

    public LivingAreaLayout withStairs(Boolean stairs) {
        this.stairs = stairs;
        return this;
    }
    
    /**
     * Stairs exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stairsException")
    public LivingAreaLayoutStairsExceptionEnum stairsException;

    public LivingAreaLayout withStairsException(LivingAreaLayoutStairsExceptionEnum stairsException) {
        this.stairsException = stairsException;
        return this;
    }
    
    public LivingAreaLayout(){}
}
