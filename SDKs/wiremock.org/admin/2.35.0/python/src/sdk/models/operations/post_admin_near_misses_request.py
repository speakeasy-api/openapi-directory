"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminNearMissesRequestRequestBody:
    
    absolute_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('absoluteUrl'), 'exclude': lambda f: f is None }})
    r"""The full URL to match against"""  
    body: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body'), 'exclude': lambda f: f is None }})
    r"""Body string to match against"""  
    cookies: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cookies'), 'exclude': lambda f: f is None }})
    r"""Cookie patterns to match against in the <key>: { \\"<predicate>\\": \\"<value>\\" } form"""  
    headers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})
    r"""Header patterns to match against in the <key>: { \\"<predicate>\\": \\"<value>\\" } form"""  
    method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})
    r"""The HTTP request method"""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The path and query to match exactly against"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminNearMissesRequest200ApplicationJSONNearMisses:
    
    absolute_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('absoluteUrl'), 'exclude': lambda f: f is None }})
    r"""The full URL to match against"""  
    body: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body'), 'exclude': lambda f: f is None }})
    r"""Body string to match against"""  
    cookies: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cookies'), 'exclude': lambda f: f is None }})
    r"""Cookie patterns to match against in the <key>: { \\"<predicate>\\": \\"<value>\\" } form"""  
    headers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})
    r"""Header patterns to match against in the <key>: { \\"<predicate>\\": \\"<value>\\" } form"""  
    method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})
    r"""The HTTP request method"""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The path and query to match exactly against"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminNearMissesRequest200ApplicationJSON:
    r"""Near misses matching criteria"""
    
    near_misses: Optional[list[PostAdminNearMissesRequest200ApplicationJSONNearMisses]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nearMisses'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostAdminNearMissesRequestResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_admin_near_misses_request_200_application_json_object: Optional[PostAdminNearMissesRequest200ApplicationJSON] = dataclasses.field(default=None)
    r"""Near misses matching criteria"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    