// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DevicePolicyAllowedDeviceManagementLevelsEnum string

const (
	DevicePolicyAllowedDeviceManagementLevelsEnumManagementUnspecified DevicePolicyAllowedDeviceManagementLevelsEnum = "MANAGEMENT_UNSPECIFIED"
	DevicePolicyAllowedDeviceManagementLevelsEnumNone                  DevicePolicyAllowedDeviceManagementLevelsEnum = "NONE"
	DevicePolicyAllowedDeviceManagementLevelsEnumBasic                 DevicePolicyAllowedDeviceManagementLevelsEnum = "BASIC"
	DevicePolicyAllowedDeviceManagementLevelsEnumComplete              DevicePolicyAllowedDeviceManagementLevelsEnum = "COMPLETE"
)

func (e DevicePolicyAllowedDeviceManagementLevelsEnum) ToPointer() *DevicePolicyAllowedDeviceManagementLevelsEnum {
	return &e
}

func (e *DevicePolicyAllowedDeviceManagementLevelsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MANAGEMENT_UNSPECIFIED":
		fallthrough
	case "NONE":
		fallthrough
	case "BASIC":
		fallthrough
	case "COMPLETE":
		*e = DevicePolicyAllowedDeviceManagementLevelsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DevicePolicyAllowedDeviceManagementLevelsEnum: %v", v)
	}
}

type DevicePolicyAllowedEncryptionStatusesEnum string

const (
	DevicePolicyAllowedEncryptionStatusesEnumEncryptionUnspecified DevicePolicyAllowedEncryptionStatusesEnum = "ENCRYPTION_UNSPECIFIED"
	DevicePolicyAllowedEncryptionStatusesEnumEncryptionUnsupported DevicePolicyAllowedEncryptionStatusesEnum = "ENCRYPTION_UNSUPPORTED"
	DevicePolicyAllowedEncryptionStatusesEnumUnencrypted           DevicePolicyAllowedEncryptionStatusesEnum = "UNENCRYPTED"
	DevicePolicyAllowedEncryptionStatusesEnumEncrypted             DevicePolicyAllowedEncryptionStatusesEnum = "ENCRYPTED"
)

func (e DevicePolicyAllowedEncryptionStatusesEnum) ToPointer() *DevicePolicyAllowedEncryptionStatusesEnum {
	return &e
}

func (e *DevicePolicyAllowedEncryptionStatusesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENCRYPTION_UNSPECIFIED":
		fallthrough
	case "ENCRYPTION_UNSUPPORTED":
		fallthrough
	case "UNENCRYPTED":
		fallthrough
	case "ENCRYPTED":
		*e = DevicePolicyAllowedEncryptionStatusesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DevicePolicyAllowedEncryptionStatusesEnum: %v", v)
	}
}

// DevicePolicy - `DevicePolicy` specifies device specific restrictions necessary to acquire a given access level. A `DevicePolicy` specifies requirements for requests from devices to be granted access levels, it does not do any enforcement on the device. `DevicePolicy` acts as an AND over all specified fields, and each repeated field is an OR over its elements. Any unset fields are ignored. For example, if the proto is { os_type : DESKTOP_WINDOWS, os_type : DESKTOP_LINUX, encryption_status: ENCRYPTED}, then the DevicePolicy will be true for requests originating from encrypted Linux desktops and encrypted Windows desktops.
type DevicePolicy struct {
	// Allowed device management levels, an empty list allows all management levels.
	AllowedDeviceManagementLevels []DevicePolicyAllowedDeviceManagementLevelsEnum `json:"allowedDeviceManagementLevels,omitempty"`
	// Allowed encryptions statuses, an empty list allows all statuses.
	AllowedEncryptionStatuses []DevicePolicyAllowedEncryptionStatusesEnum `json:"allowedEncryptionStatuses,omitempty"`
	// Allowed OS versions, an empty list allows all types and all versions.
	OsConstraints []OsConstraint `json:"osConstraints,omitempty"`
	// Whether the device needs to be approved by the customer admin.
	RequireAdminApproval *bool `json:"requireAdminApproval,omitempty"`
	// Whether the device needs to be corp owned.
	RequireCorpOwned *bool `json:"requireCorpOwned,omitempty"`
	// Whether or not screenlock is required for the DevicePolicy to be true. Defaults to `false`.
	RequireScreenlock *bool `json:"requireScreenlock,omitempty"`
}
