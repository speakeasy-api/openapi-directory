"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import adduserresponse as shared_adduserresponse
from ..shared import four_hundred_and_five as shared_four_hundred_and_five
from ..shared import four_hundred_and_twelve as shared_four_hundred_and_twelve
from typing import Optional


@dataclasses.dataclass
class KkidUserlistPutRequest:
    
    email: str = dataclasses.field(metadata={'query_param': { 'field_name': 'email', 'style': 'form', 'explode': True }})
    r"""email address of user to create"""  
    first_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'firstName', 'style': 'form', 'explode': True }})
    r"""First Name of user to create"""  
    last_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'lastName', 'style': 'form', 'explode': True }})
    r"""Last Name of user to create"""  
    user_id: int = dataclasses.field(metadata={'query_param': { 'field_name': 'userID', 'style': 'form', 'explode': True }})
    r"""userID of the user you wish to update"""  
    username: str = dataclasses.field(metadata={'query_param': { 'field_name': 'username', 'style': 'form', 'explode': True }})
    r"""username of user to create"""  
    emoji: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'emoji', 'style': 'form', 'explode': True }})
    r"""emoji character for user"""  
    enable_admin: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'enableAdmin', 'style': 'form', 'explode': True }})
    r"""set status of isAdmin"""  
    enable_allowance: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'enableAllowance', 'style': 'form', 'explode': True }})
    r"""set status of allowance module enabled"""  
    enable_chores: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'enableChores', 'style': 'form', 'explode': True }})
    r"""set status of chores module enabled"""  
    enable_object_detection: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'enableObjectDetection', 'style': 'form', 'explode': True }})
    r"""set status of enableObjectDetection"""  
    enable_tmdb: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'enableTmdb', 'style': 'form', 'explode': True }})
    r"""set status of enableTmdb (movie and tv search)"""  
    enable_wish_list: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'enableWishList', 'style': 'form', 'explode': True }})
    r"""set status of Wish List module enabled"""  
    tmdb_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tmdbKey', 'style': 'form', 'explode': True }})
    r"""User's TMdB Session Key"""  
    

@dataclasses.dataclass
class KkidUserlistPutResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    four_hundred_and_five: Optional[shared_four_hundred_and_five.FourHundredAndFive] = dataclasses.field(default=None)
    r"""Method Not Allowed- API user does not have access to use this method"""  
    four_hundred_and_twelve: Optional[shared_four_hundred_and_twelve.FourHundredAndTwelve] = dataclasses.field(default=None)
    r"""API Access Denied! Your API key is invalid, expired, or not supplied!"""  
    add_user_response: Optional[shared_adduserresponse.AddUserResponse] = dataclasses.field(default=None)
    r"""User Updated"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    