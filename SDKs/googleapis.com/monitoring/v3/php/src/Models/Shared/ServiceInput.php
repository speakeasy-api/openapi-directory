<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ServiceInput - A Service is a discrete, autonomous, and network-accessible unit, designed to solve an individual concern (Wikipedia (https://en.wikipedia.org/wiki/Service-orientation)). In Cloud Monitoring, a Service acts as the root resource under which operational aspects of the service are accessible.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ServiceInput
{
    /**
     * App Engine service. Learn more at https://cloud.google.com/appengine.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\AppEngine $appEngine
     */
	#[\JMS\Serializer\Annotation\SerializedName('appEngine')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AppEngine')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AppEngine $appEngine = null;
    
    /**
     * A well-known service type, defined by its service type and service labels. Documentation and examples here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BasicService $basicService
     */
	#[\JMS\Serializer\Annotation\SerializedName('basicService')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\BasicService')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BasicService $basicService = null;
    
    /**
     * Cloud Endpoints service. Learn more at https://cloud.google.com/endpoints.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CloudEndpoints $cloudEndpoints
     */
	#[\JMS\Serializer\Annotation\SerializedName('cloudEndpoints')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CloudEndpoints')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CloudEndpoints $cloudEndpoints = null;
    
    /**
     * Cloud Run service. Learn more at https://cloud.google.com/run.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CloudRun $cloudRun
     */
	#[\JMS\Serializer\Annotation\SerializedName('cloudRun')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CloudRun')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CloudRun $cloudRun = null;
    
    /**
     * Istio service scoped to a single Kubernetes cluster. Learn more at https://istio.io. Clusters running OSS Istio will have their services ingested as this type.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ClusterIstio $clusterIstio
     */
	#[\JMS\Serializer\Annotation\SerializedName('clusterIstio')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ClusterIstio')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ClusterIstio $clusterIstio = null;
    
    /**
     * Use a custom service to designate a service that you want to monitor when none of the other service types (like App Engine, Cloud Run, or a GKE type) matches your intended service.
     * 
     * @var ?array<string, mixed> $custom
     */
	#[\JMS\Serializer\Annotation\SerializedName('custom')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $custom = null;
    
    /**
     * Name used for UI elements listing this Service.
     * 
     * @var ?string $displayName
     */
	#[\JMS\Serializer\Annotation\SerializedName('displayName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $displayName = null;
    
    /**
     * GKE Namespace. The field names correspond to the resource metadata labels on monitored resources that fall under a namespace (for example, k8s_container or k8s_pod).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GkeNamespaceInput $gkeNamespace
     */
	#[\JMS\Serializer\Annotation\SerializedName('gkeNamespace')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GkeNamespaceInput')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GkeNamespaceInput $gkeNamespace = null;
    
    /**
     * GKE Service. The "service" here represents a Kubernetes service object (https://kubernetes.io/docs/concepts/services-networking/service). The field names correspond to the resource labels on k8s_service monitored resources (https://cloud.google.com/monitoring/api/resources#tag_k8s_service).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GkeServiceInput $gkeService
     */
	#[\JMS\Serializer\Annotation\SerializedName('gkeService')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GkeServiceInput')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GkeServiceInput $gkeService = null;
    
    /**
     * A GKE Workload (Deployment, StatefulSet, etc). The field names correspond to the metadata labels on monitored resources that fall under a workload (for example, k8s_container or k8s_pod).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GkeWorkloadInput $gkeWorkload
     */
	#[\JMS\Serializer\Annotation\SerializedName('gkeWorkload')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GkeWorkloadInput')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GkeWorkloadInput $gkeWorkload = null;
    
    /**
     * Canonical service scoped to an Istio mesh. Anthos clusters running ASM >= 1.6.8 will have their services ingested as this type.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\IstioCanonicalService $istioCanonicalService
     */
	#[\JMS\Serializer\Annotation\SerializedName('istioCanonicalService')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\IstioCanonicalService')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?IstioCanonicalService $istioCanonicalService = null;
    
    /**
     * Istio service scoped to an Istio mesh. Anthos clusters running ASM < 1.6.8 will have their services ingested as this type.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\MeshIstio $meshIstio
     */
	#[\JMS\Serializer\Annotation\SerializedName('meshIstio')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\MeshIstio')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?MeshIstio $meshIstio = null;
    
    /**
     * Resource name for this Service. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID] 
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Configuration for how to query telemetry on a Service.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Telemetry $telemetry
     */
	#[\JMS\Serializer\Annotation\SerializedName('telemetry')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Telemetry')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Telemetry $telemetry = null;
    
    /**
     * Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.
     * 
     * @var ?array<string, string> $userLabels
     */
	#[\JMS\Serializer\Annotation\SerializedName('userLabels')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $userLabels = null;
    
	public function __construct()
	{
		$this->appEngine = null;
		$this->basicService = null;
		$this->cloudEndpoints = null;
		$this->cloudRun = null;
		$this->clusterIstio = null;
		$this->custom = null;
		$this->displayName = null;
		$this->gkeNamespace = null;
		$this->gkeService = null;
		$this->gkeWorkload = null;
		$this->istioCanonicalService = null;
		$this->meshIstio = null;
		$this->name = null;
		$this->telemetry = null;
		$this->userLabels = null;
	}
}
