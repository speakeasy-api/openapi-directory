"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetCertificatesIDRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of the resource"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCertificatesIDCertificateResponseCertificateStatusError:
    r"""If issuance or renewal reports `failed`, this property contains information about what happened"""
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    
class GetCertificatesIDCertificateResponseCertificateStatusIssuanceEnum(str, Enum):
    r"""Status of the issuance process of the Certificate"""
    PENDING = 'pending'
    COMPLETED = 'completed'
    FAILED = 'failed'

class GetCertificatesIDCertificateResponseCertificateStatusRenewalEnum(str, Enum):
    r"""Status of the renewal process of the Certificate."""
    SCHEDULED = 'scheduled'
    PENDING = 'pending'
    FAILED = 'failed'
    UNAVAILABLE = 'unavailable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCertificatesIDCertificateResponseCertificateStatus:
    r"""Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates"""
    
    error: Optional[GetCertificatesIDCertificateResponseCertificateStatusError] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""If issuance or renewal reports `failed`, this property contains information about what happened"""  
    issuance: Optional[GetCertificatesIDCertificateResponseCertificateStatusIssuanceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuance'), 'exclude': lambda f: f is None }})
    r"""Status of the issuance process of the Certificate"""  
    renewal: Optional[GetCertificatesIDCertificateResponseCertificateStatusRenewalEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewal'), 'exclude': lambda f: f is None }})
    r"""Status of the renewal process of the Certificate."""  
    
class GetCertificatesIDCertificateResponseCertificateTypeEnum(str, Enum):
    r"""Type of the Certificate"""
    UPLOADED = 'uploaded'
    MANAGED = 'managed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCertificatesIDCertificateResponseCertificateUsedBy:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of resource referenced"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of resource referenced"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCertificatesIDCertificateResponseCertificate:
    
    certificate: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificate') }})
    r"""Certificate and chain in PEM format, in order so that each record directly certifies the one preceding"""  
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Resource was created (in ISO-8601 format)"""  
    domain_names: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain_names') }})
    r"""Domains and subdomains covered by the Certificate"""  
    fingerprint: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fingerprint') }})
    r"""SHA256 fingerprint of the Certificate"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    labels: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""User-defined labels (key-value pairs)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Resource. Must be unique per Project."""  
    not_valid_after: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('not_valid_after') }})
    r"""Point in time when the Certificate stops being valid (in ISO-8601 format)"""  
    not_valid_before: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('not_valid_before') }})
    r"""Point in time when the Certificate becomes valid (in ISO-8601 format)"""  
    used_by: list[GetCertificatesIDCertificateResponseCertificateUsedBy] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used_by') }})
    r"""Resources currently using the Certificate"""  
    status: Optional[GetCertificatesIDCertificateResponseCertificateStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates"""  
    type: Optional[GetCertificatesIDCertificateResponseCertificateTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the Certificate"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCertificatesIDCertificateResponse:
    r"""The `certificate` key contains a Certificate object"""
    
    certificate: GetCertificatesIDCertificateResponseCertificate = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificate') }})  
    

@dataclasses.dataclass
class GetCertificatesIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    certificate_response: Optional[GetCertificatesIDCertificateResponse] = dataclasses.field(default=None)
    r"""The `certificate` key contains a Certificate object"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    