"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .accesstoken import AccessToken
from .account import Account
from .actions import Actions
from .additionaldeviceinformation import AdditionalDeviceInformation
from .customdevice import CustomDevice
from .devicebyserial import DeviceBySerial
from .devices import Devices
from .devicesbyenergy import DevicesByEnergy
from .devicesbysubtype import DevicesBySubType
from .fastsenddevicevalues import FastSendDeviceValues
from .folder import Folder
from .folderassign import FolderAssign
from .foldermenu import FolderMenu
from .foldersettings import FolderSettings
from .health import Health
from .mbus import MBus
from .meterfolderinformation import MeterFolderInformation
from .metervalues import MeterValues
from .oauth import OAuth
from .pico import Pico
from .picocharging import PicoCharging
from .picocharginghistory import PicoChargingHistory
from .picoenablefixcablelock import PicoEnableFixCableLock
from .picoloadmanagementgroup import PicoLoadmanagementGroup
from .picoloadmanagementsetdynamiccurrent import PicoLoadmanagementSetDynamicCurrent
from .picosettings import PicoSettings
from .registerforrealtimeapi import RegisterForRealtimeAPI
from .smartmedeviceconfiguration import SmartMeDeviceConfiguration
from .subuser import SubUser
from .user import User
from .usertofolderassign import UserToFolderAssign
from .values import Values
from .valuesinpast import ValuesInPast
from .valuesinpastmultiple import ValuesInPastMultiple
from .virtualbillingmeteractive import VirtualBillingMeterActive
from .virtualbillingmeterdeactivate import VirtualBillingMeterDeactivate
from .virtualbillingmeters import VirtualBillingMeters
from .virtualmetercalculateformula import VirtualMeterCalculateFormula
from .virtualtariff import VirtualTariff
from .virtualtariffconsumption import VirtualTariffConsumption
from .virtualtariffsforproperty import VirtualTariffsForProperty
from .virtualtariffsstatusforproperty import VirtualTariffsStatusForProperty

SERVERS = [
    "https://smart-me.com:443",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product."""
    access_token: AccessToken
    account: Account
    actions: Actions
    additional_device_information: AdditionalDeviceInformation
    custom_device: CustomDevice
    device_by_serial: DeviceBySerial
    devices: Devices
    devices_by_energy: DevicesByEnergy
    devices_by_sub_type: DevicesBySubType
    fast_send_device_values: FastSendDeviceValues
    folder: Folder
    folder_assign: FolderAssign
    folder_menu: FolderMenu
    folder_settings: FolderSettings
    health: Health
    m_bus: MBus
    meter_folder_information: MeterFolderInformation
    meter_values: MeterValues
    o_auth: OAuth
    pico: Pico
    pico_charging: PicoCharging
    pico_charging_history: PicoChargingHistory
    pico_enable_fix_cable_lock: PicoEnableFixCableLock
    pico_loadmanagement_group: PicoLoadmanagementGroup
    pico_loadmanagement_set_dynamic_current: PicoLoadmanagementSetDynamicCurrent
    pico_settings: PicoSettings
    register_for_realtime_api: RegisterForRealtimeAPI
    smart_me_device_configuration: SmartMeDeviceConfiguration
    sub_user: SubUser
    user: User
    user_to_folder_assign: UserToFolderAssign
    values: Values
    values_in_past: ValuesInPast
    values_in_past_multiple: ValuesInPastMultiple
    virtual_billing_meter_active: VirtualBillingMeterActive
    virtual_billing_meter_deactivate: VirtualBillingMeterDeactivate
    virtual_billing_meters: VirtualBillingMeters
    virtual_meter_calculate_formula: VirtualMeterCalculateFormula
    virtual_tariff: VirtualTariff
    virtual_tariff_consumption: VirtualTariffConsumption
    virtual_tariffs_for_property: VirtualTariffsForProperty
    virtual_tariffs_status_for_property: VirtualTariffsStatusForProperty

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.access_token = AccessToken(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.account = Account(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.actions = Actions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.additional_device_information = AdditionalDeviceInformation(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.custom_device = CustomDevice(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.device_by_serial = DeviceBySerial(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.devices = Devices(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.devices_by_energy = DevicesByEnergy(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.devices_by_sub_type = DevicesBySubType(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.fast_send_device_values = FastSendDeviceValues(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.folder = Folder(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.folder_assign = FolderAssign(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.folder_menu = FolderMenu(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.folder_settings = FolderSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.health = Health(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.m_bus = MBus(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.meter_folder_information = MeterFolderInformation(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.meter_values = MeterValues(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.o_auth = OAuth(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.pico = Pico(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.pico_charging = PicoCharging(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.pico_charging_history = PicoChargingHistory(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.pico_enable_fix_cable_lock = PicoEnableFixCableLock(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.pico_loadmanagement_group = PicoLoadmanagementGroup(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.pico_loadmanagement_set_dynamic_current = PicoLoadmanagementSetDynamicCurrent(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.pico_settings = PicoSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.register_for_realtime_api = RegisterForRealtimeAPI(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.smart_me_device_configuration = SmartMeDeviceConfiguration(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.sub_user = SubUser(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.user = User(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.user_to_folder_assign = UserToFolderAssign(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.values = Values(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.values_in_past = ValuesInPast(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.values_in_past_multiple = ValuesInPastMultiple(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.virtual_billing_meter_active = VirtualBillingMeterActive(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.virtual_billing_meter_deactivate = VirtualBillingMeterDeactivate(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.virtual_billing_meters = VirtualBillingMeters(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.virtual_meter_calculate_formula = VirtualMeterCalculateFormula(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.virtual_tariff = VirtualTariff(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.virtual_tariff_consumption = VirtualTariffConsumption(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.virtual_tariffs_for_property = VirtualTariffsForProperty(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.virtual_tariffs_status_for_property = VirtualTariffsStatusForProperty(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    