"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from sdk.models import operations

class Health:
    r"""The Health service allows you to both validate and monitor your Appwrite server's health."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def health_get(self) -> operations.HealthGetResponse:
        r"""Get HTTP
        Check the Appwrite HTTP server is up and responsive.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/health'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HealthGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def health_get_anti_virus(self) -> operations.HealthGetAntiVirusResponse:
        r"""Get Anti virus
        Check the Appwrite Anti Virus server is up and connection is successful.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/health/anti-virus'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HealthGetAntiVirusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def health_get_cache(self) -> operations.HealthGetCacheResponse:
        r"""Get Cache
        Check the Appwrite in-memory cache server is up and connection is successful.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/health/cache'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HealthGetCacheResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def health_get_db(self) -> operations.HealthGetDBResponse:
        r"""Get DB
        Check the Appwrite database server is up and connection is successful.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/health/db'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HealthGetDBResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def health_get_queue_certificates(self) -> operations.HealthGetQueueCertificatesResponse:
        r"""Get Certificate Queue
        Get the number of certificates that are waiting to be issued against [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue server.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/health/queue/certificates'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HealthGetQueueCertificatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def health_get_queue_functions(self) -> operations.HealthGetQueueFunctionsResponse:
        r"""Get Functions Queue"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/health/queue/functions'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HealthGetQueueFunctionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def health_get_queue_logs(self) -> operations.HealthGetQueueLogsResponse:
        r"""Get Logs Queue
        Get the number of logs that are waiting to be processed in the Appwrite internal queue server.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/health/queue/logs'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HealthGetQueueLogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def health_get_queue_tasks(self) -> operations.HealthGetQueueTasksResponse:
        r"""Get Tasks Queue
        Get the number of tasks that are waiting to be processed in the Appwrite internal queue server.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/health/queue/tasks'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HealthGetQueueTasksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def health_get_queue_usage(self) -> operations.HealthGetQueueUsageResponse:
        r"""Get Usage Queue
        Get the number of usage stats that are waiting to be processed in the Appwrite internal queue server.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/health/queue/usage'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HealthGetQueueUsageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def health_get_queue_webhooks(self) -> operations.HealthGetQueueWebhooksResponse:
        r"""Get Webhooks Queue
        Get the number of webhooks that are waiting to be processed in the Appwrite internal queue server.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/health/queue/webhooks'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HealthGetQueueWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def health_get_storage_local(self) -> operations.HealthGetStorageLocalResponse:
        r"""Get Local Storage
        Check the Appwrite local storage device is up and connection is successful.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/health/storage/local'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HealthGetStorageLocalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def health_get_time(self) -> operations.HealthGetTimeResponse:
        r"""Get Time
        Check the Appwrite server time is synced with Google remote NTP server. We use this technology to smoothly handle leap seconds with no disruptive events. The [Network Time Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) (NTP) is used by hundreds of millions of computers and devices to synchronize their clocks over the Internet. If your computer sets its own clock, it likely uses NTP.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/health/time'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HealthGetTimeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    