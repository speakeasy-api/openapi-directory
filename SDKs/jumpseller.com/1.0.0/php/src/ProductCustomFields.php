<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ProductCustomFields 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete value of Product Custom Field
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteProductsProductIdFieldsFieldIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteProductsProductIdFieldsFieldIdJsonResponse
     */
	public function deleteProductsProductIdFieldsFieldIdJson(
        \OpenAPI\OpenAPI\Models\Operations\DeleteProductsProductIdFieldsFieldIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteProductsProductIdFieldsFieldIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products/{product_id}/fields/{field_id}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteProductsProductIdFieldsFieldIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteProductsProductIdFieldsFieldIdJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteProductsProductIdFieldsFieldIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageObject', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve all Product Custom Fields
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProductsIdFieldsJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProductsIdFieldsJsonResponse
     */
	public function getProductsIdFieldsJson(
        \OpenAPI\OpenAPI\Models\Operations\GetProductsIdFieldsJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProductsIdFieldsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products/{id}/fields.json', \OpenAPI\OpenAPI\Models\Operations\GetProductsIdFieldsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProductsIdFieldsJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProductsIdFieldsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productCustomFields = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProductCustomField>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Count all Product Custom Fields.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProductsIdFieldsCountJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProductsIdFieldsCountJsonResponse
     */
	public function getProductsIdFieldsCountJson(
        \OpenAPI\OpenAPI\Models\Operations\GetProductsIdFieldsCountJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProductsIdFieldsCountJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products/{id}/fields/count.json', \OpenAPI\OpenAPI\Models\Operations\GetProductsIdFieldsCountJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProductsIdFieldsCountJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProductsIdFieldsCountJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->count = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Count', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add an existing Custom Field to a Product.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostProductsIdFieldsJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostProductsIdFieldsJsonResponse
     */
	public function postProductsIdFieldsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostProductsIdFieldsJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostProductsIdFieldsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products/{id}/fields.json', \OpenAPI\OpenAPI\Models\Operations\PostProductsIdFieldsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addProductCustomField", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostProductsIdFieldsJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostProductsIdFieldsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->product = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Product', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update value of Product Custom Field
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutProductsProductIdFieldsFieldIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutProductsProductIdFieldsFieldIdJsonResponse
     */
	public function putProductsProductIdFieldsFieldIdJson(
        \OpenAPI\OpenAPI\Models\Operations\PutProductsProductIdFieldsFieldIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutProductsProductIdFieldsFieldIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/products/{product_id}/fields/{field_id}.json', \OpenAPI\OpenAPI\Models\Operations\PutProductsProductIdFieldsFieldIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutProductsProductIdFieldsFieldIdJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutProductsProductIdFieldsFieldIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productCustomField = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProductCustomField', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
}