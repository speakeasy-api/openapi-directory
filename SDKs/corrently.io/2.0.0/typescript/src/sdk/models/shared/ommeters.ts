/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

export class Ommeters extends SpeakeasyBase {
  /**
   * Factor imposed on metered current by a transducer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentScalingFactor" })
  currentScalingFactor?: number;

  /**
   * Metering load profile type associated with the meter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "loadProfileType" })
  loadProfileType?: string;

  /**
   * Basic address information for geo coding
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  /**
   * DLMS manufacturerId
   */
  @SpeakeasyMetadata()
  @Expose({ name: "manufacturerId" })
  manufacturerId?: string;

  /**
   * Physical quantity being measured by the meter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "measurementType" })
  measurementType?: string;

  /**
   * Statistical metadata for this household
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  meta?: string;

  /**
   * identifier to be used in other methods like readings or activities.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meterId" })
  meterId?: string;

  /**
   * Factor imposed on metered current AND voltage by a transducer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scalingFactor" })
  scalingFactor?: number;

  /**
   * Device type of the meter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  /**
   * Factor imposed on metered voltage by a transducer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voltageScalingFactor" })
  voltageScalingFactor?: number;
}
