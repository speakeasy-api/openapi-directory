// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DayPartTargetingTimeZoneTypeEnum - The timezone to use for interpreting the day part targeting.
type DayPartTargetingTimeZoneTypeEnum string

const (
	DayPartTargetingTimeZoneTypeEnumTimeZoneSourceUnspecified DayPartTargetingTimeZoneTypeEnum = "TIME_ZONE_SOURCE_UNSPECIFIED"
	DayPartTargetingTimeZoneTypeEnumPublisher                 DayPartTargetingTimeZoneTypeEnum = "PUBLISHER"
	DayPartTargetingTimeZoneTypeEnumUser                      DayPartTargetingTimeZoneTypeEnum = "USER"
)

func (e DayPartTargetingTimeZoneTypeEnum) ToPointer() *DayPartTargetingTimeZoneTypeEnum {
	return &e
}

func (e *DayPartTargetingTimeZoneTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TIME_ZONE_SOURCE_UNSPECIFIED":
		fallthrough
	case "PUBLISHER":
		fallthrough
	case "USER":
		*e = DayPartTargetingTimeZoneTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DayPartTargetingTimeZoneTypeEnum: %v", v)
	}
}

// DayPartTargeting - Specifies the day part targeting criteria.
type DayPartTargeting struct {
	// A list of day part targeting criterion.
	DayParts []DayPart `json:"dayParts,omitempty"`
	// The timezone to use for interpreting the day part targeting.
	TimeZoneType *DayPartTargetingTimeZoneTypeEnum `json:"timeZoneType,omitempty"`
}
