<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * DestinyVendorsDestinyVendorReceipt - If a character purchased an item that is refundable, a Vendor Receipt will be created on the user's Destiny Profile. These expire after a configurable period of time, but until then can be used to get refunds on items. BNet does not provide the ability to refund a purchase *yet*, but you know.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class DestinyVendorsDestinyVendorReceipt
{
    /**
     * The amount paid for the item, in terms of items that were consumed in the purchase and their quantity.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\DestinyDestinyItemQuantity> $currencyPaid
     */
	
    public ?array $currencyPaid = null;
    
    /**
     * The date at which this receipt is rendered invalid.
     * 
     * @var ?\DateTime $expiresOn
     */
	
    public ?\DateTime $expiresOn = null;
    
    /**
     * The item that was received, and its quantity.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyVendorsDestinyVendorReceiptItemReceived $itemReceived
     */
	
    public ?DestinyVendorsDestinyVendorReceiptItemReceived $itemReceived = null;
    
    /**
     * The unlock flag used to determine whether you still have the purchased item.
     * 
     * @var ?int $licenseUnlockHash
     */
	
    public ?int $licenseUnlockHash = null;
    
    /**
     * The ID of the character who made the purchase.
     * 
     * @var ?int $purchasedByCharacterId
     */
	
    public ?int $purchasedByCharacterId = null;
    
    /**
     * Whether you can get a refund, and what happens in order for the refund to be received. See the DestinyVendorItemRefundPolicy enum for details.
     * 
     * @var ?int $refundPolicy
     */
	
    public ?int $refundPolicy = null;
    
    /**
     * The identifier of this receipt.
     * 
     * @var ?int $sequenceNumber
     */
	
    public ?int $sequenceNumber = null;
    
    /**
     * The seconds since epoch at which this receipt is rendered invalid.
     * 
     * @var ?int $timeToExpiration
     */
	
    public ?int $timeToExpiration = null;
    
	public function __construct()
	{
		$this->currencyPaid = null;
		$this->expiresOn = null;
		$this->itemReceived = null;
		$this->licenseUnlockHash = null;
		$this->purchasedByCharacterId = null;
		$this->refundPolicy = null;
		$this->sequenceNumber = null;
		$this->timeToExpiration = null;
	}
}
