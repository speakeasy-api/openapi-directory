"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import basicauth as shared_basicauth
from ..shared import changedby as shared_changedby
from ..shared import cookies as shared_cookies
from ..shared import formlogin as shared_formlogin
from ..shared import headers as shared_headers
from ..shared import verificationmethod_enum as shared_verificationmethod_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SiteInput:
    r"""Main resource associated with a target"""
    
    basic_auth: Optional[shared_basicauth.BasicAuth] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basic_auth'), 'exclude': lambda f: f is None }})
    r"""Basic authentication credentials"""  
    cookies: Optional[list[shared_cookies.Cookies]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cookies'), 'exclude': lambda f: f is None }})
    r"""Custom cookies name/value pairs"""  
    desc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desc'), 'exclude': lambda f: f is None }})
    r"""Custom description for the resource"""  
    form_login: Optional[list[shared_formlogin.FormLogin]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_login'), 'exclude': lambda f: f is None }})
    r"""Form login field name, field input pairs"""  
    form_login_check_pattern: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_login_check_pattern'), 'exclude': lambda f: f is None }})
    r"""Pattern to check successful authentication (not used)"""  
    form_login_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_login_url'), 'exclude': lambda f: f is None }})
    r"""URL for the form login"""  
    has_basic_auth: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_basic_auth'), 'exclude': lambda f: f is None }})
    r"""Use basic authentication in scan"""  
    has_form_login: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_form_login'), 'exclude': lambda f: f is None }})
    r"""Does the resource use form login"""  
    headers: Optional[list[shared_headers.Headers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})
    r"""Custom headers name value pairs"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Custom name for the resource"""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Site URL, it should include the path if the site is not located at the root. This URL can only be set once."""  
    whitelist: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('whitelist'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Site:
    r"""Main resource associated with a target"""
    
    basic_auth: Optional[shared_basicauth.BasicAuth] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basic_auth'), 'exclude': lambda f: f is None }})
    r"""Basic authentication credentials"""  
    changed: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changed'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date time of the last change"""  
    changed_by: Optional[shared_changedby.ChangedBy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changed_by'), 'exclude': lambda f: f is None }})
    r"""User that last modified the object"""  
    cookies: Optional[list[shared_cookies.Cookies]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cookies'), 'exclude': lambda f: f is None }})
    r"""Custom cookies name/value pairs"""  
    desc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desc'), 'exclude': lambda f: f is None }})
    r"""Custom description for the resource"""  
    form_login: Optional[list[shared_formlogin.FormLogin]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_login'), 'exclude': lambda f: f is None }})
    r"""Form login field name, field input pairs"""  
    form_login_check_pattern: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_login_check_pattern'), 'exclude': lambda f: f is None }})
    r"""Pattern to check successful authentication (not used)"""  
    form_login_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_login_url'), 'exclude': lambda f: f is None }})
    r"""URL for the form login"""  
    has_basic_auth: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_basic_auth'), 'exclude': lambda f: f is None }})
    r"""Use basic authentication in scan"""  
    has_form_login: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_form_login'), 'exclude': lambda f: f is None }})
    r"""Does the resource use form login"""  
    headers: Optional[list[shared_headers.Headers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})
    r"""Custom headers name value pairs"""  
    host: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host'), 'exclude': lambda f: f is None }})
    r"""Site host"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Object id."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Custom name for the resource"""  
    stack: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stack'), 'exclude': lambda f: f is None }})
    r"""List of frameworks detected on this resource"""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Site URL, it should include the path if the site is not located at the root. This URL can only be set once."""  
    verification_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verification_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Verification date time"""  
    verification_last_error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verification_last_error'), 'exclude': lambda f: f is None }})
    r"""Reason for last verification failure."""  
    verification_method: Optional[shared_verificationmethod_enum.VerificationMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verification_method'), 'exclude': lambda f: f is None }})
    r"""Type of verification:
    * dns - we look or a TXT record on the host you registered containing
    `Probely=<verification_token>`
    * file - on the root of the path you registered we look for a file
    named `<verification token>` containing `Probely`.
    """  
    verification_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verification_token'), 'exclude': lambda f: f is None }})
    r"""Token used to verify"""  
    verified: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verified'), 'exclude': lambda f: f is None }})
    r"""Has resource ownership been verified"""  
    whitelist: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('whitelist'), 'exclude': lambda f: f is None }})  
    