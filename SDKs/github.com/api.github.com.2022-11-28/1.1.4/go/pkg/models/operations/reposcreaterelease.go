// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ReposCreateReleaseRequestBodyMakeLatestEnum - Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
type ReposCreateReleaseRequestBodyMakeLatestEnum string

const (
	ReposCreateReleaseRequestBodyMakeLatestEnumTrue   ReposCreateReleaseRequestBodyMakeLatestEnum = "true"
	ReposCreateReleaseRequestBodyMakeLatestEnumFalse  ReposCreateReleaseRequestBodyMakeLatestEnum = "false"
	ReposCreateReleaseRequestBodyMakeLatestEnumLegacy ReposCreateReleaseRequestBodyMakeLatestEnum = "legacy"
)

func (e *ReposCreateReleaseRequestBodyMakeLatestEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		fallthrough
	case "legacy":
		*e = ReposCreateReleaseRequestBodyMakeLatestEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreateReleaseRequestBodyMakeLatestEnum: %s", s)
	}
}

type ReposCreateReleaseRequestBody struct {
	// Text describing the contents of the tag.
	Body *string `json:"body,omitempty"`
	// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
	DiscussionCategoryName *string `json:"discussion_category_name,omitempty"`
	// `true` to create a draft (unpublished) release, `false` to create a published one.
	Draft *bool `json:"draft,omitempty"`
	// Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
	GenerateReleaseNotes *bool `json:"generate_release_notes,omitempty"`
	// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
	MakeLatest *ReposCreateReleaseRequestBodyMakeLatestEnum `json:"make_latest,omitempty"`
	// The name of the release.
	Name *string `json:"name,omitempty"`
	// `true` to identify the release as a prerelease. `false` to identify the release as a full release.
	Prerelease *bool `json:"prerelease,omitempty"`
	// The name of the tag.
	TagName string `json:"tag_name"`
	// Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
	TargetCommitish *string `json:"target_commitish,omitempty"`
}

type ReposCreateReleaseRequest struct {
	RequestBody ReposCreateReleaseRequestBody `request:"mediaType=application/json"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type ReposCreateReleaseResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Not Found if the discussion category name is invalid
	BasicError *shared.BasicError
	// Response
	Release *shared.Release
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
