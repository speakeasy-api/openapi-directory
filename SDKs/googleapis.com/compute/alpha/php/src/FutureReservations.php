<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class FutureReservations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of future reservations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsAggregatedListResponse
     */
	public function computeFutureReservationsAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/futureReservations', \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->futureReservationsAggregatedListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FutureReservationsAggregatedListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancel the specified future reservation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsCancelResponse
     */
	public function computeFutureReservationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/futureReservations/{futureReservation}/cancel', \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified future reservation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsDeleteResponse
     */
	public function computeFutureReservationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/futureReservations/{futureReservation}', \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves information about the specified future reservation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsGetResponse
     */
	public function computeFutureReservationsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/futureReservations/{futureReservation}', \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->futureReservation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FutureReservation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Future Reservation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsInsertResponse
     */
	public function computeFutureReservationsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/futureReservations', \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "futureReservation", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * A list of all the future reservations that have been configured for the specified project in specified zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsListResponse
     */
	public function computeFutureReservationsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/futureReservations', \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->futureReservationsListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FutureReservationsListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified future reservation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsUpdateResponse
     */
	public function computeFutureReservationsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/futureReservations/{futureReservation}', \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "futureReservation1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFutureReservationsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}