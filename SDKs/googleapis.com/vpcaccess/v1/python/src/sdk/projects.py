"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def vpcaccess_projects_locations_connectors_create(self, request: operations.VpcaccessProjectsLocationsConnectorsCreateRequest, security: operations.VpcaccessProjectsLocationsConnectorsCreateSecurity) -> operations.VpcaccessProjectsLocationsConnectorsCreateResponse:
        r"""Creates a Serverless VPC Access connector, returns an operation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.VpcaccessProjectsLocationsConnectorsCreateRequest, base_url, '/v1/{parent}/connectors', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "connector_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.VpcaccessProjectsLocationsConnectorsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VpcaccessProjectsLocationsConnectorsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def vpcaccess_projects_locations_connectors_delete(self, request: operations.VpcaccessProjectsLocationsConnectorsDeleteRequest, security: operations.VpcaccessProjectsLocationsConnectorsDeleteSecurity) -> operations.VpcaccessProjectsLocationsConnectorsDeleteResponse:
        r"""Deletes a Serverless VPC Access connector. Returns NOT_FOUND if the resource does not exist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.VpcaccessProjectsLocationsConnectorsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.VpcaccessProjectsLocationsConnectorsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VpcaccessProjectsLocationsConnectorsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def vpcaccess_projects_locations_connectors_list(self, request: operations.VpcaccessProjectsLocationsConnectorsListRequest, security: operations.VpcaccessProjectsLocationsConnectorsListSecurity) -> operations.VpcaccessProjectsLocationsConnectorsListResponse:
        r"""Lists Serverless VPC Access connectors."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.VpcaccessProjectsLocationsConnectorsListRequest, base_url, '/v1/{parent}/connectors', request)
        
        query_params = utils.get_query_params(operations.VpcaccessProjectsLocationsConnectorsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VpcaccessProjectsLocationsConnectorsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListConnectorsResponse])
                res.list_connectors_response = out

        return res

    def vpcaccess_projects_locations_connectors_patch(self, request: operations.VpcaccessProjectsLocationsConnectorsPatchRequest, security: operations.VpcaccessProjectsLocationsConnectorsPatchSecurity) -> operations.VpcaccessProjectsLocationsConnectorsPatchResponse:
        r"""Updates a Serverless VPC Access connector, returns an operation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.VpcaccessProjectsLocationsConnectorsPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "connector_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.VpcaccessProjectsLocationsConnectorsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VpcaccessProjectsLocationsConnectorsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def vpcaccess_projects_locations_list(self, request: operations.VpcaccessProjectsLocationsListRequest, security: operations.VpcaccessProjectsLocationsListSecurity) -> operations.VpcaccessProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.VpcaccessProjectsLocationsListRequest, base_url, '/v1/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.VpcaccessProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VpcaccessProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def vpcaccess_projects_locations_operations_get(self, request: operations.VpcaccessProjectsLocationsOperationsGetRequest, security: operations.VpcaccessProjectsLocationsOperationsGetSecurity) -> operations.VpcaccessProjectsLocationsOperationsGetResponse:
        r"""Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.VpcaccessProjectsLocationsOperationsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.VpcaccessProjectsLocationsOperationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VpcaccessProjectsLocationsOperationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def vpcaccess_projects_locations_operations_list(self, request: operations.VpcaccessProjectsLocationsOperationsListRequest, security: operations.VpcaccessProjectsLocationsOperationsListSecurity) -> operations.VpcaccessProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.VpcaccessProjectsLocationsOperationsListRequest, base_url, '/v1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.VpcaccessProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VpcaccessProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    