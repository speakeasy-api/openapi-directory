"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import currencycode_enum as shared_currencycode_enum
from ..shared import savingsplanpaymentoption_enum as shared_savingsplanpaymentoption_enum
from ..shared import savingsplanproducttype_enum as shared_savingsplanproducttype_enum
from ..shared import savingsplanstate_enum as shared_savingsplanstate_enum
from ..shared import savingsplantype_enum as shared_savingsplantype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SavingsPlan:
    r"""Information about a Savings Plan."""
    
    commitment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commitment'), 'exclude': lambda f: f is None }})  
    currency: Optional[shared_currencycode_enum.CurrencyCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    ec2_instance_family: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ec2InstanceFamily'), 'exclude': lambda f: f is None }})  
    end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'exclude': lambda f: f is None }})  
    offering_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offeringId'), 'exclude': lambda f: f is None }})  
    payment_option: Optional[shared_savingsplanpaymentoption_enum.SavingsPlanPaymentOptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentOption'), 'exclude': lambda f: f is None }})  
    product_types: Optional[list[shared_savingsplanproducttype_enum.SavingsPlanProductTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productTypes'), 'exclude': lambda f: f is None }})  
    recurring_payment_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurringPaymentAmount'), 'exclude': lambda f: f is None }})  
    region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region'), 'exclude': lambda f: f is None }})  
    savings_plan_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('savingsPlanArn'), 'exclude': lambda f: f is None }})  
    savings_plan_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('savingsPlanId'), 'exclude': lambda f: f is None }})  
    savings_plan_type: Optional[shared_savingsplantype_enum.SavingsPlanTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('savingsPlanType'), 'exclude': lambda f: f is None }})  
    start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'exclude': lambda f: f is None }})  
    state: Optional[shared_savingsplanstate_enum.SavingsPlanStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    term_duration_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termDurationInSeconds'), 'exclude': lambda f: f is None }})  
    upfront_payment_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upfrontPaymentAmount'), 'exclude': lambda f: f is None }})  
    