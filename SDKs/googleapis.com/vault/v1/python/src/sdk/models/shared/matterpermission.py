"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MatterPermissionRoleEnum(str, Enum):
    r"""The user's role for the matter."""
    ROLE_UNSPECIFIED = 'ROLE_UNSPECIFIED'
    COLLABORATOR = 'COLLABORATOR'
    OWNER = 'OWNER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MatterPermission:
    r"""Users can be matter owners or collaborators. Each matter has only one owner. All others users who can access the matter are collaborators. When an account is purged, its corresponding MatterPermission resources cease to exist."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""The account ID, as provided by the [Admin SDK](https://developers.google.com/admin-sdk/)."""  
    role: Optional[MatterPermissionRoleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""The user's role for the matter."""  
    