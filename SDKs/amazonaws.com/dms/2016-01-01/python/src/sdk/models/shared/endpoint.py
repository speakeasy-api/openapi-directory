"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dmssslmodevalue_enum as shared_dmssslmodevalue_enum
from ..shared import dmstransfersettings as shared_dmstransfersettings
from ..shared import docdbsettings as shared_docdbsettings
from ..shared import dynamodbsettings as shared_dynamodbsettings
from ..shared import elasticsearchsettings as shared_elasticsearchsettings
from ..shared import gcpmysqlsettings as shared_gcpmysqlsettings
from ..shared import ibmdb2settings as shared_ibmdb2settings
from ..shared import kafkasettings as shared_kafkasettings
from ..shared import kinesissettings as shared_kinesissettings
from ..shared import microsoftsqlserversettings as shared_microsoftsqlserversettings
from ..shared import mongodbsettings as shared_mongodbsettings
from ..shared import mysqlsettings as shared_mysqlsettings
from ..shared import neptunesettings as shared_neptunesettings
from ..shared import oraclesettings as shared_oraclesettings
from ..shared import postgresqlsettings as shared_postgresqlsettings
from ..shared import redissettings as shared_redissettings
from ..shared import redshiftsettings as shared_redshiftsettings
from ..shared import replicationendpointtypevalue_enum as shared_replicationendpointtypevalue_enum
from ..shared import s3settings as shared_s3settings
from ..shared import sybasesettings as shared_sybasesettings
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Endpoint:
    r"""<p>Describes an endpoint of a database instance in response to operations such as the following:</p> <ul> <li> <p> <code>CreateEndpoint</code> </p> </li> <li> <p> <code>DescribeEndpoint</code> </p> </li> <li> <p> <code>ModifyEndpoint</code> </p> </li> </ul>"""
    
    certificate_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CertificateArn'), 'exclude': lambda f: f is None }})  
    database_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatabaseName'), 'exclude': lambda f: f is None }})  
    dms_transfer_settings: Optional[shared_dmstransfersettings.DmsTransferSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DmsTransferSettings'), 'exclude': lambda f: f is None }})  
    doc_db_settings: Optional[shared_docdbsettings.DocDbSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DocDbSettings'), 'exclude': lambda f: f is None }})
    r"""Provides information that defines a DocumentDB endpoint."""  
    dynamo_db_settings: Optional[shared_dynamodbsettings.DynamoDbSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DynamoDbSettings'), 'exclude': lambda f: f is None }})  
    elasticsearch_settings: Optional[shared_elasticsearchsettings.ElasticsearchSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ElasticsearchSettings'), 'exclude': lambda f: f is None }})  
    endpoint_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointArn'), 'exclude': lambda f: f is None }})  
    endpoint_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointIdentifier'), 'exclude': lambda f: f is None }})  
    endpoint_type: Optional[shared_replicationendpointtypevalue_enum.ReplicationEndpointTypeValueEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointType'), 'exclude': lambda f: f is None }})  
    engine_display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EngineDisplayName'), 'exclude': lambda f: f is None }})  
    engine_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EngineName'), 'exclude': lambda f: f is None }})  
    external_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExternalId'), 'exclude': lambda f: f is None }})  
    external_table_definition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExternalTableDefinition'), 'exclude': lambda f: f is None }})  
    extra_connection_attributes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtraConnectionAttributes'), 'exclude': lambda f: f is None }})  
    gcp_my_sql_settings: Optional[shared_gcpmysqlsettings.GcpMySQLSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GcpMySQLSettings'), 'exclude': lambda f: f is None }})  
    ibm_db2_settings: Optional[shared_ibmdb2settings.IBMDb2Settings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IBMDb2Settings'), 'exclude': lambda f: f is None }})  
    kafka_settings: Optional[shared_kafkasettings.KafkaSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KafkaSettings'), 'exclude': lambda f: f is None }})  
    kinesis_settings: Optional[shared_kinesissettings.KinesisSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KinesisSettings'), 'exclude': lambda f: f is None }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})  
    microsoft_sql_server_settings: Optional[shared_microsoftsqlserversettings.MicrosoftSQLServerSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MicrosoftSQLServerSettings'), 'exclude': lambda f: f is None }})  
    mongo_db_settings: Optional[shared_mongodbsettings.MongoDbSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MongoDbSettings'), 'exclude': lambda f: f is None }})  
    my_sql_settings: Optional[shared_mysqlsettings.MySQLSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MySQLSettings'), 'exclude': lambda f: f is None }})  
    neptune_settings: Optional[shared_neptunesettings.NeptuneSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NeptuneSettings'), 'exclude': lambda f: f is None }})  
    oracle_settings: Optional[shared_oraclesettings.OracleSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OracleSettings'), 'exclude': lambda f: f is None }})  
    port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Port'), 'exclude': lambda f: f is None }})  
    postgre_sql_settings: Optional[shared_postgresqlsettings.PostgreSQLSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostgreSQLSettings'), 'exclude': lambda f: f is None }})  
    redis_settings: Optional[shared_redissettings.RedisSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedisSettings'), 'exclude': lambda f: f is None }})  
    redshift_settings: Optional[shared_redshiftsettings.RedshiftSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedshiftSettings'), 'exclude': lambda f: f is None }})  
    s3_settings: Optional[shared_s3settings.S3Settings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3Settings'), 'exclude': lambda f: f is None }})  
    server_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServerName'), 'exclude': lambda f: f is None }})  
    service_access_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceAccessRoleArn'), 'exclude': lambda f: f is None }})  
    ssl_mode: Optional[shared_dmssslmodevalue_enum.DmsSslModeValueEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SslMode'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    sybase_settings: Optional[shared_sybasesettings.SybaseSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SybaseSettings'), 'exclude': lambda f: f is None }})  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Username'), 'exclude': lambda f: f is None }})  
    