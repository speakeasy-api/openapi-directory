<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class TestInvokeAuthorizerRequestBody
{
    /**
     * Specifies the HTTP context to use for the test authorizer request.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\TestInvokeAuthorizerRequestBodyHttpContext $httpContext
     */
	#[\JMS\Serializer\Annotation\SerializedName('httpContext')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\TestInvokeAuthorizerRequestBodyHttpContext')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TestInvokeAuthorizerRequestBodyHttpContext $httpContext = null;
    
    /**
     * Specifies the MQTT context to use for the test authorizer request
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\TestInvokeAuthorizerRequestBodyMqttContext $mqttContext
     */
	#[\JMS\Serializer\Annotation\SerializedName('mqttContext')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\TestInvokeAuthorizerRequestBodyMqttContext')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TestInvokeAuthorizerRequestBodyMqttContext $mqttContext = null;
    
    /**
     * Specifies the TLS context to use for the test authorizer request.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\TestInvokeAuthorizerRequestBodyTlsContext $tlsContext
     */
	#[\JMS\Serializer\Annotation\SerializedName('tlsContext')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\TestInvokeAuthorizerRequestBodyTlsContext')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TestInvokeAuthorizerRequestBodyTlsContext $tlsContext = null;
    
    /**
     * The token returned by your custom authentication service.
     * 
     * @var ?string $token
     */
	#[\JMS\Serializer\Annotation\SerializedName('token')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $token = null;
    
    /**
     * The signature made with the token and your custom authentication service's private key. This value must be Base-64-encoded.
     * 
     * @var ?string $tokenSignature
     */
	#[\JMS\Serializer\Annotation\SerializedName('tokenSignature')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $tokenSignature = null;
    
	public function __construct()
	{
		$this->httpContext = null;
		$this->mqttContext = null;
		$this->tlsContext = null;
		$this->token = null;
		$this->tokenSignature = null;
	}
}
