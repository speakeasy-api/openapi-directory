<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class BankAccountTransactions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create bank transactions
     * 
     * Posts bank transactions to the accounting package for a given company.
     * 
     * > **Supported Integrations**
     * > 
     * > Check out our [Knowledge UI](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bankTransactions) for integrations that support POST methods.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateBankTransactionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateBankTransactionsResponse
     */
	public function createBankTransactions(
        \OpenAPI\OpenAPI\Models\Operations\CreateBankTransactionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateBankTransactionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/connections/{connectionId}/push/bankAccounts/{accountId}/bankTransactions', \OpenAPI\OpenAPI\Models\Operations\CreateBankTransactionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bankTransactions", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateBankTransactionsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateBankTransactionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createBankTransactionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateBankTransactionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List push options for bank account bank transactions
     * 
     * Gets the options of pushing bank account transactions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCreateBankAccountModelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCreateBankAccountModelResponse
     */
	public function getCreateBankAccountModel(
        \OpenAPI\OpenAPI\Models\Operations\GetCreateBankAccountModelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCreateBankAccountModelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/connections/{connectionId}/options/bankAccounts/{accountId}/bankTransactions', \OpenAPI\OpenAPI\Models\Operations\GetCreateBankAccountModelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCreateBankAccountModelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pushOption = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PushOption', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List bank transactions for bank account
     * 
     * Gets bank transactions for a given bank account ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBankAccountTransactionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListBankAccountTransactionsResponse
     */
	public function listBankAccountTransactions(
        \OpenAPI\OpenAPI\Models\Operations\ListBankAccountTransactionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListBankAccountTransactionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/connections/{connectionId}/data/bankAccounts/{accountId}/bankTransactions', \OpenAPI\OpenAPI\Models\Operations\ListBankAccountTransactionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListBankAccountTransactionsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListBankAccountTransactionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bankTransactionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BankTransactionsResponse', 'json');
            }
        }

        return $response;
    }
}