"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlertPolicy = exports.AlertPolicyCombinerEnum = void 0;
var utils_1 = require("../../../internal/utils");
var alertstrategy_1 = require("./alertstrategy");
var condition_1 = require("./condition");
var documentation_1 = require("./documentation");
var mutationrecord_1 = require("./mutationrecord");
var status_1 = require("./status");
var class_transformer_1 = require("class-transformer");
/**
 * How to combine the results of multiple conditions to determine if an incident should be opened. If condition_time_series_query_language is present, this must be COMBINE_UNSPECIFIED.
 */
var AlertPolicyCombinerEnum;
(function (AlertPolicyCombinerEnum) {
    AlertPolicyCombinerEnum["CombineUnspecified"] = "COMBINE_UNSPECIFIED";
    AlertPolicyCombinerEnum["And"] = "AND";
    AlertPolicyCombinerEnum["Or"] = "OR";
    AlertPolicyCombinerEnum["AndWithMatchingResource"] = "AND_WITH_MATCHING_RESOURCE";
})(AlertPolicyCombinerEnum = exports.AlertPolicyCombinerEnum || (exports.AlertPolicyCombinerEnum = {}));
/**
 * A description of the conditions under which some aspect of your system is considered to be "unhealthy" and the ways to notify people or services about this state. For an overview of alert policies, see Introduction to Alerting (https://cloud.google.com/monitoring/alerts/).
 */
var AlertPolicy = /** @class */ (function (_super) {
    __extends(AlertPolicy, _super);
    function AlertPolicy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "alertStrategy" }),
        (0, class_transformer_1.Type)(function () { return alertstrategy_1.AlertStrategy; }),
        __metadata("design:type", alertstrategy_1.AlertStrategy)
    ], AlertPolicy.prototype, "alertStrategy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "combiner" }),
        __metadata("design:type", String)
    ], AlertPolicy.prototype, "combiner", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: condition_1.Condition }),
        (0, class_transformer_1.Expose)({ name: "conditions" }),
        (0, class_transformer_1.Type)(function () { return condition_1.Condition; }),
        __metadata("design:type", Array)
    ], AlertPolicy.prototype, "conditions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationRecord" }),
        (0, class_transformer_1.Type)(function () { return mutationrecord_1.MutationRecord; }),
        __metadata("design:type", mutationrecord_1.MutationRecord)
    ], AlertPolicy.prototype, "creationRecord", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "displayName" }),
        __metadata("design:type", String)
    ], AlertPolicy.prototype, "displayName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "documentation" }),
        (0, class_transformer_1.Type)(function () { return documentation_1.Documentation; }),
        __metadata("design:type", documentation_1.Documentation)
    ], AlertPolicy.prototype, "documentation", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enabled" }),
        __metadata("design:type", Boolean)
    ], AlertPolicy.prototype, "enabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mutationRecord" }),
        (0, class_transformer_1.Type)(function () { return mutationrecord_1.MutationRecord; }),
        __metadata("design:type", mutationrecord_1.MutationRecord)
    ], AlertPolicy.prototype, "mutationRecord", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], AlertPolicy.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "notificationChannels" }),
        __metadata("design:type", Array)
    ], AlertPolicy.prototype, "notificationChannels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "userLabels" }),
        __metadata("design:type", Object)
    ], AlertPolicy.prototype, "userLabels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "validity" }),
        (0, class_transformer_1.Type)(function () { return status_1.Status; }),
        __metadata("design:type", status_1.Status)
    ], AlertPolicy.prototype, "validity", void 0);
    return AlertPolicy;
}(utils_1.SpeakeasyBase));
exports.AlertPolicy = AlertPolicy;
