/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * AssociationVersionInfo - Information about the association version.
 */
public class AssociationVersionInfo {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ApplyOnlyAtCronInterval")
    public Boolean applyOnlyAtCronInterval;
    public AssociationVersionInfo withApplyOnlyAtCronInterval(Boolean applyOnlyAtCronInterval) {
        this.applyOnlyAtCronInterval = applyOnlyAtCronInterval;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AssociationId")
    public String associationId;
    public AssociationVersionInfo withAssociationId(String associationId) {
        this.associationId = associationId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AssociationName")
    public String associationName;
    public AssociationVersionInfo withAssociationName(String associationName) {
        this.associationName = associationName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AssociationVersion")
    public String associationVersion;
    public AssociationVersionInfo withAssociationVersion(String associationVersion) {
        this.associationVersion = associationVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CalendarNames")
    public String[] calendarNames;
    public AssociationVersionInfo withCalendarNames(String[] calendarNames) {
        this.calendarNames = calendarNames;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ComplianceSeverity")
    public AssociationComplianceSeverityEnum complianceSeverity;
    public AssociationVersionInfo withComplianceSeverity(AssociationComplianceSeverityEnum complianceSeverity) {
        this.complianceSeverity = complianceSeverity;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreatedDate")
    public OffsetDateTime createdDate;
    public AssociationVersionInfo withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DocumentVersion")
    public String documentVersion;
    public AssociationVersionInfo withDocumentVersion(String documentVersion) {
        this.documentVersion = documentVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxConcurrency")
    public String maxConcurrency;
    public AssociationVersionInfo withMaxConcurrency(String maxConcurrency) {
        this.maxConcurrency = maxConcurrency;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxErrors")
    public String maxErrors;
    public AssociationVersionInfo withMaxErrors(String maxErrors) {
        this.maxErrors = maxErrors;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Name")
    public String name;
    public AssociationVersionInfo withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OutputLocation")
    public InstanceAssociationOutputLocation outputLocation;
    public AssociationVersionInfo withOutputLocation(InstanceAssociationOutputLocation outputLocation) {
        this.outputLocation = outputLocation;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Parameters")
    public java.util.Map<String, String[]> parameters;
    public AssociationVersionInfo withParameters(java.util.Map<String, String[]> parameters) {
        this.parameters = parameters;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ScheduleExpression")
    public String scheduleExpression;
    public AssociationVersionInfo withScheduleExpression(String scheduleExpression) {
        this.scheduleExpression = scheduleExpression;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ScheduleOffset")
    public Long scheduleOffset;
    public AssociationVersionInfo withScheduleOffset(Long scheduleOffset) {
        this.scheduleOffset = scheduleOffset;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncCompliance")
    public AssociationSyncComplianceEnum syncCompliance;
    public AssociationVersionInfo withSyncCompliance(AssociationSyncComplianceEnum syncCompliance) {
        this.syncCompliance = syncCompliance;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TargetLocations")
    public TargetLocation[] targetLocations;
    public AssociationVersionInfo withTargetLocations(TargetLocation[] targetLocations) {
        this.targetLocations = targetLocations;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TargetMaps")
    public java.util.Map<String, String[]>[] targetMaps;
    public AssociationVersionInfo withTargetMaps(java.util.Map<String, String[]>[] targetMaps) {
        this.targetMaps = targetMaps;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Targets")
    public Target[] targets;
    public AssociationVersionInfo withTargets(Target[] targets) {
        this.targets = targets;
        return this;
    }
    
}
