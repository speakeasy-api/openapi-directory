// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// WritableIPAddressRoleEnum - The functional role of this IP
type WritableIPAddressRoleEnum string

const (
	WritableIPAddressRoleEnumLoopback  WritableIPAddressRoleEnum = "loopback"
	WritableIPAddressRoleEnumSecondary WritableIPAddressRoleEnum = "secondary"
	WritableIPAddressRoleEnumAnycast   WritableIPAddressRoleEnum = "anycast"
	WritableIPAddressRoleEnumVip       WritableIPAddressRoleEnum = "vip"
	WritableIPAddressRoleEnumVrrp      WritableIPAddressRoleEnum = "vrrp"
	WritableIPAddressRoleEnumHsrp      WritableIPAddressRoleEnum = "hsrp"
	WritableIPAddressRoleEnumGlbp      WritableIPAddressRoleEnum = "glbp"
	WritableIPAddressRoleEnumCarp      WritableIPAddressRoleEnum = "carp"
)

func (e *WritableIPAddressRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "loopback":
		fallthrough
	case "secondary":
		fallthrough
	case "anycast":
		fallthrough
	case "vip":
		fallthrough
	case "vrrp":
		fallthrough
	case "hsrp":
		fallthrough
	case "glbp":
		fallthrough
	case "carp":
		*e = WritableIPAddressRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableIPAddressRoleEnum: %s", s)
	}
}

// WritableIPAddressStatusEnum - The operational status of this IP
type WritableIPAddressStatusEnum string

const (
	WritableIPAddressStatusEnumActive     WritableIPAddressStatusEnum = "active"
	WritableIPAddressStatusEnumReserved   WritableIPAddressStatusEnum = "reserved"
	WritableIPAddressStatusEnumDeprecated WritableIPAddressStatusEnum = "deprecated"
	WritableIPAddressStatusEnumDhcp       WritableIPAddressStatusEnum = "dhcp"
)

func (e *WritableIPAddressStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "reserved":
		fallthrough
	case "deprecated":
		fallthrough
	case "dhcp":
		*e = WritableIPAddressStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableIPAddressStatusEnum: %s", s)
	}
}

type WritableIPAddressInput struct {
	// IPv4 or IPv6 address (with mask)
	Address      string                 `json:"address"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                `json:"description,omitempty"`
	// Hostname or FQDN (not case-sensitive)
	DNSName   *string `json:"dns_name,omitempty"`
	Interface *int64  `json:"interface,omitempty"`
	// The IP for which this address is the "outside" IP
	NatInside  *int64 `json:"nat_inside,omitempty"`
	NatOutside int64  `json:"nat_outside"`
	// The functional role of this IP
	Role *WritableIPAddressRoleEnum `json:"role,omitempty"`
	// The operational status of this IP
	Status *WritableIPAddressStatusEnum `json:"status,omitempty"`
	Tags   []string                     `json:"tags,omitempty"`
	Tenant *int64                       `json:"tenant,omitempty"`
	Vrf    *int64                       `json:"vrf,omitempty"`
}
