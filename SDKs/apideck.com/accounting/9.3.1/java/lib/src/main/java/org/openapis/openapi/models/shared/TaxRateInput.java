/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class TaxRateInput {
    /**
     * Tax code assigned to identify this tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public String code;

    public TaxRateInput withCode(String code) {
        this.code = code;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("components")
    public TaxRateComponents[] components;

    public TaxRateInput withComponents(TaxRateComponents[] components) {
        this.components = components;
        return this;
    }
    
    /**
     * Description of tax rate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public TaxRateInput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Effective tax rate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effective_tax_rate")
    public Double effectiveTaxRate;

    public TaxRateInput withEffectiveTaxRate(Double effectiveTaxRate) {
        this.effectiveTaxRate = effectiveTaxRate;
        return this;
    }
    
    /**
     * ID assigned to identify this tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public TaxRateInput withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Name assigned to identify this tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public TaxRateInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * ID of the original tax rate from which the new tax rate is derived. Helps to understand the relationship between corresponding tax rate entities.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_tax_rate_id")
    public String originalTaxRateId;

    public TaxRateInput withOriginalTaxRateId(String originalTaxRateId) {
        this.originalTaxRateId = originalTaxRateId;
        return this;
    }
    
    /**
     * Report Tax type to aggregate tax collected or paid for reporting purposes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("report_tax_type")
    public String reportTaxType;

    public TaxRateInput withReportTaxType(String reportTaxType) {
        this.reportTaxType = reportTaxType;
        return this;
    }
    
    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    public String rowVersion;

    public TaxRateInput withRowVersion(String rowVersion) {
        this.rowVersion = rowVersion;
        return this;
    }
    
    /**
     * Tax rate status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public TaxRateTaxRateStatusEnum status;

    public TaxRateInput withStatus(TaxRateTaxRateStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Unique identifier for the account for tax collected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_payable_account_id")
    public String taxPayableAccountId;

    public TaxRateInput withTaxPayableAccountId(String taxPayableAccountId) {
        this.taxPayableAccountId = taxPayableAccountId;
        return this;
    }
    
    /**
     * Unique identifier for the account for tax remitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_remitted_account_id")
    public String taxRemittedAccountId;

    public TaxRateInput withTaxRemittedAccountId(String taxRemittedAccountId) {
        this.taxRemittedAccountId = taxRemittedAccountId;
        return this;
    }
    
    /**
     * Not compounded sum of the components of a tax rate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax_rate")
    public Double totalTaxRate;

    public TaxRateInput withTotalTaxRate(Double totalTaxRate) {
        this.totalTaxRate = totalTaxRate;
        return this;
    }
    
    /**
     * Tax type used to indicate the source of tax collected or paid
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public TaxRateInput withType(String type) {
        this.type = type;
        return this;
    }
    
    public TaxRateInput(){}
}
