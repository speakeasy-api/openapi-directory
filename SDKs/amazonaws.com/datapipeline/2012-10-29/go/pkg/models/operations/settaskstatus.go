// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SetTaskStatusXAmzTargetEnum
type SetTaskStatusXAmzTargetEnum string

const (
	SetTaskStatusXAmzTargetEnumDataPipelineSetTaskStatus SetTaskStatusXAmzTargetEnum = "DataPipeline.SetTaskStatus"
)

func (e SetTaskStatusXAmzTargetEnum) ToPointer() *SetTaskStatusXAmzTargetEnum {
	return &e
}

func (e *SetTaskStatusXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DataPipeline.SetTaskStatus":
		*e = SetTaskStatusXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SetTaskStatusXAmzTargetEnum: %v", v)
	}
}

type SetTaskStatusRequest struct {
	SetTaskStatusInput shared.SetTaskStatusInput   `request:"mediaType=application/json"`
	XAmzAlgorithm      *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget         SetTaskStatusXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type SetTaskStatusResponse struct {
	ContentType string
	// InternalServiceError
	InternalServiceError interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// PipelineDeletedException
	PipelineDeletedException interface{}
	// PipelineNotFoundException
	PipelineNotFoundException interface{}
	// Success
	SetTaskStatusOutput map[string]interface{}
	StatusCode          int
	RawResponse         *http.Response
	// TaskNotFoundException
	TaskNotFoundException interface{}
}
