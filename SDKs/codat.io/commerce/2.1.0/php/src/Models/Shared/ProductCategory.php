<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ProductCategory - Product categories are used to classify a group of products together, either by type (e.g. "Furniture"), or sometimes by tax profile.
 * 
 * 
 * Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-productCategories) for this data type.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ProductCategory
{
    /**
     * A collection of parent product categories implicitly ordered with the immediate parent last in the list.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\RecordRef> $ancestorRefs
     */
	#[\JMS\Serializer\Annotation\SerializedName('ancestorRefs')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\RecordRef>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $ancestorRefs = null;
    
    /**
     * A boolean indicating whether there are other product categories beneath this one in the hierarchy.
     * 
     * @var ?bool $hasChildren
     */
	#[\JMS\Serializer\Annotation\SerializedName('hasChildren')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hasChildren = null;
    
    /**
     * The unique identifier of the product category
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var ?string $modifiedDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('modifiedDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $modifiedDate = null;
    
    /**
     * The name of the product category
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var ?string $sourceModifiedDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('sourceModifiedDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sourceModifiedDate = null;
    
	public function __construct()
	{
		$this->ancestorRefs = null;
		$this->hasChildren = null;
		$this->id = null;
		$this->modifiedDate = null;
		$this->name = null;
		$this->sourceModifiedDate = null;
	}
}
