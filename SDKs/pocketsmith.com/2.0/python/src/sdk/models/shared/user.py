"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class User:
    r"""Success"""
    
    always_show_base_currency: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('always_show_base_currency'), 'exclude': lambda f: f is None }})
    r"""Whether the user wants to see all accounts in their base currency instead of the native account currency."""  
    available_accounts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('available_accounts'), 'exclude': lambda f: f is None }})
    r"""The user's total number of available accounts."""  
    available_budgets: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('available_budgets'), 'exclude': lambda f: f is None }})
    r"""The user's total number of available budgets."""  
    avatar_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_url'), 'exclude': lambda f: f is None }})
    r"""The URL to the user's avatar."""  
    base_currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('base_currency_code'), 'exclude': lambda f: f is None }})
    r"""The user's base currency."""  
    beta_user: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beta_user'), 'exclude': lambda f: f is None }})
    r"""Whether the user has opted in to beta features."""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""When the user signed up."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""The user's email address."""  
    forecast_defer_recalculate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forecast_defer_recalculate'), 'exclude': lambda f: f is None }})
    r"""Whether the user's forecast recalculation should be deferred."""  
    forecast_end_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forecast_end_date'), 'exclude': lambda f: f is None }})
    r"""The date that the user's forecast ends."""  
    forecast_last_accessed_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forecast_last_accessed_at'), 'exclude': lambda f: f is None }})
    r"""When the user's forecast was last accessed."""  
    forecast_last_updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forecast_last_updated_at'), 'exclude': lambda f: f is None }})
    r"""When the user's forecast was last updated."""  
    forecast_needs_recalculate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forecast_needs_recalculate'), 'exclude': lambda f: f is None }})
    r"""Whether the user's forecast needs to be recalculated."""  
    forecast_start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forecast_start_date'), 'exclude': lambda f: f is None }})
    r"""The date that the user's forecast starts."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the user."""  
    is_reviewing_transactions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_reviewing_transactions'), 'exclude': lambda f: f is None }})
    r"""Whether the user wants to review new transactions, transfer transactions or categorisation."""  
    last_activity_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_activity_at'), 'exclude': lambda f: f is None }})
    r"""When the user last interacted with PocketSmith, via any application or the API."""  
    last_logged_in_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_logged_in_at'), 'exclude': lambda f: f is None }})
    r"""When the user last logged into PocketSmith."""  
    login: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('login'), 'exclude': lambda f: f is None }})
    r"""The user's username."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The full name of the user, although not all users will have a name set."""  
    time_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_zone'), 'exclude': lambda f: f is None }})
    r"""The user's time zone."""  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})
    r"""When the user was last updated."""  
    using_multiple_currencies: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('using_multiple_currencies'), 'exclude': lambda f: f is None }})
    r"""Whether the user has multiple currencies in use across their account."""  
    week_start_day: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('week_start_day'), 'exclude': lambda f: f is None }})
    r"""The day of the week the user wishes their calendars to start on. A number between 0 and 6, where 0 is Sunday and 6 is Saturday."""  
    