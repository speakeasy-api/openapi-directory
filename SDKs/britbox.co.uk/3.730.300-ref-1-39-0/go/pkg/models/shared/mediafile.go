// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MediaFileDeliveryTypeEnum - The way in which the media file is delivered.
type MediaFileDeliveryTypeEnum string

const (
	MediaFileDeliveryTypeEnumStream      MediaFileDeliveryTypeEnum = "Stream"
	MediaFileDeliveryTypeEnumProgressive MediaFileDeliveryTypeEnum = "Progressive"
	MediaFileDeliveryTypeEnumDownload    MediaFileDeliveryTypeEnum = "Download"
)

func (e MediaFileDeliveryTypeEnum) ToPointer() *MediaFileDeliveryTypeEnum {
	return &e
}

func (e *MediaFileDeliveryTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Stream":
		fallthrough
	case "Progressive":
		fallthrough
	case "Download":
		*e = MediaFileDeliveryTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MediaFileDeliveryTypeEnum: %v", v)
	}
}

// MediaFileResolutionEnum1 - The resolution of the video media.
type MediaFileResolutionEnum1 string

const (
	MediaFileResolutionEnum1Sd       MediaFileResolutionEnum1 = "SD"
	MediaFileResolutionEnum1Hd720    MediaFileResolutionEnum1 = "HD-720"
	MediaFileResolutionEnum1Hd1080   MediaFileResolutionEnum1 = "HD-1080"
	MediaFileResolutionEnum1Hd4K     MediaFileResolutionEnum1 = "HD-4K"
	MediaFileResolutionEnum1External MediaFileResolutionEnum1 = "External"
	MediaFileResolutionEnum1Unknown  MediaFileResolutionEnum1 = "Unknown"
)

func (e MediaFileResolutionEnum1) ToPointer() *MediaFileResolutionEnum1 {
	return &e
}

func (e *MediaFileResolutionEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SD":
		fallthrough
	case "HD-720":
		fallthrough
	case "HD-1080":
		fallthrough
	case "HD-4K":
		fallthrough
	case "External":
		fallthrough
	case "Unknown":
		*e = MediaFileResolutionEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MediaFileResolutionEnum1: %v", v)
	}
}

type MediaFile struct {
	// The number of audio channels.
	Channels *int `json:"channels,omitempty"`
	// The way in which the media file is delivered.
	DeliveryType MediaFileDeliveryTypeEnum `json:"deliveryType"`
	// The type of drm used to encrypt the media. 'None' if unencrypted.
	Drm string `json:"drm"`
	// The format the media was encoded in.
	Format string `json:"format"`
	// The height of the video media.
	Height int `json:"height"`
	// The language code for the media, e.g. 'en'.
	Language string `json:"language"`
	// The name of the media file.
	Name string `json:"name"`
	// The resolution of the video media.
	Resolution MediaFileResolutionEnum1 `json:"resolution"`
	// The url to access the media file.
	URL string `json:"url"`
	// The width of the video media.
	Width int `json:"width"`
}
