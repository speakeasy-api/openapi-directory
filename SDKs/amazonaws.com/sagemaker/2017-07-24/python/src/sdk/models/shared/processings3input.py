"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import processings3compressiontype_enum as shared_processings3compressiontype_enum
from ..shared import processings3datadistributiontype_enum as shared_processings3datadistributiontype_enum
from ..shared import processings3datatype_enum as shared_processings3datatype_enum
from ..shared import processings3inputmode_enum as shared_processings3inputmode_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProcessingS3Input:
    r"""Configuration for downloading input data from Amazon S3 into the processing container."""
    
    s3_data_type: shared_processings3datatype_enum.ProcessingS3DataTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3DataType') }})  
    s3_uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3Uri') }})  
    local_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LocalPath'), 'exclude': lambda f: f is None }})  
    s3_compression_type: Optional[shared_processings3compressiontype_enum.ProcessingS3CompressionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3CompressionType'), 'exclude': lambda f: f is None }})  
    s3_data_distribution_type: Optional[shared_processings3datadistributiontype_enum.ProcessingS3DataDistributionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3DataDistributionType'), 'exclude': lambda f: f is None }})  
    s3_input_mode: Optional[shared_processings3inputmode_enum.ProcessingS3InputModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3InputMode'), 'exclude': lambda f: f is None }})  
    