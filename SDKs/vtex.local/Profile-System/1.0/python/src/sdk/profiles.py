"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Profiles:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_client_profile(self, request: operations.CreateClientProfileRequest) -> operations.CreateClientProfileResponse:
        r"""Create client profile
        Creates new client profile.
        
        
        > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
        
        
        > The `id` field returned by this request is the `profileId` used to retrieve information on a specific profile later.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/storage/profile-system/profiles'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "profile", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CreateClientProfileRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateClientProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_client_profile_201_application_json_object = out

        return res

    def delete_client_profile(self, request: operations.DeleteClientProfileRequest) -> operations.DeleteClientProfileResponse:
        r"""Delete client profile
        Deletes a client profile by `profileId`.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteClientProfileRequest, base_url, '/api/storage/profile-system/profiles/{profileId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteClientProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_profile(self, request: operations.GetProfileRequest) -> operations.GetProfileResponse:
        r"""Get profile
        Retrieves the information of a specific client, by its `profileId`.
        
        
        > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
        
        
        > For security and privacy reasons, this request returns masked profile data. For unmasked information, see Get unmasked profile.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProfileRequest, base_url, '/api/storage/profile-system/profiles/{profileId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetProfileRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[Any]])
                res.get_profile_200_application_json_anies = out

        return res

    def get_profile_by_version(self, request: operations.GetProfileByVersionRequest) -> operations.GetProfileByVersionResponse:
        r"""Get profile by version
        Retrieves the information of a specific version of a client profile.
        
        
        > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
        
        
        > For security and privacy reasons, this request returns masked profile data. For unmasked information, see Get unmasked profile by version.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProfileByVersionRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/versions/{profileVersionId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProfileByVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[Any]])
                res.get_profile_by_version_200_application_json_anies = out

        return res

    def get_unmasked_profile(self, request: operations.GetUnmaskedProfileRequest) -> operations.GetUnmaskedProfileResponse:
        r"""Get unmasked profile
        Retrieves unmasked information of a specific client, by its `profileId`.
        
        
        > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUnmaskedProfileRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/unmask', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetUnmaskedProfileRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUnmaskedProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[Any]])
                res.get_unmasked_profile_200_application_json_anies = out

        return res

    def get_unmasked_profile_by_version(self, request: operations.GetUnmaskedProfileByVersionRequest) -> operations.GetUnmaskedProfileByVersionResponse:
        r"""Get unmasked profile by version
        Retrieves unmasked information of a specific version of a client profile.
        
        
        > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUnmaskedProfileByVersionRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/versions/{profileVersionId}/unmask', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetUnmaskedProfileByVersionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUnmaskedProfileByVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[Any]])
                res.get_unmasked_profile_by_version_200_application_json_anies = out

        return res

    def update_client_profile(self, request: operations.UpdateClientProfileRequest) -> operations.UpdateClientProfileResponse:
        r"""Updates client profile
        Updates one or more fields of an existing client profile.
        
        
        > Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateClientProfileRequest, base_url, '/api/storage/profile-system/profiles/{profileId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.UpdateClientProfileRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateClientProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_client_profile_200_application_json_object = out

        return res

    