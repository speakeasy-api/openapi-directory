/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Announcement - Announcement created by a teacher for students of the course
 */
public class Announcement {
    /**
     * Absolute link to this announcement in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alternateLink")
    public String alternateLink;

    public Announcement withAlternateLink(String alternateLink) {
        this.alternateLink = alternateLink;
        return this;
    }
    
    /**
     * Assignee mode of the announcement. If unspecified, the default value is `ALL_STUDENTS`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assigneeMode")
    public AnnouncementAssigneeModeEnum assigneeMode;

    public Announcement withAssigneeMode(AnnouncementAssigneeModeEnum assigneeMode) {
        this.assigneeMode = assigneeMode;
        return this;
    }
    
    /**
     * Identifier of the course. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("courseId")
    public String courseId;

    public Announcement withCourseId(String courseId) {
        this.courseId = courseId;
        return this;
    }
    
    /**
     * Timestamp when this announcement was created. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTime")
    public String creationTime;

    public Announcement withCreationTime(String creationTime) {
        this.creationTime = creationTime;
        return this;
    }
    
    /**
     * Identifier for the user that created the announcement. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creatorUserId")
    public String creatorUserId;

    public Announcement withCreatorUserId(String creatorUserId) {
        this.creatorUserId = creatorUserId;
        return this;
    }
    
    /**
     * Classroom-assigned identifier of this announcement, unique per course. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Announcement withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Assignee details about a coursework/announcement. This field is set if and only if `assigneeMode` is `INDIVIDUAL_STUDENTS`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("individualStudentsOptions")
    public IndividualStudentsOptions individualStudentsOptions;

    public Announcement withIndividualStudentsOptions(IndividualStudentsOptions individualStudentsOptions) {
        this.individualStudentsOptions = individualStudentsOptions;
        return this;
    }
    
    /**
     * Additional materials. Announcements must have no more than 20 material items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("materials")
    public Material[] materials;

    public Announcement withMaterials(Material[] materials) {
        this.materials = materials;
        return this;
    }
    
    /**
     * Optional timestamp when this announcement is scheduled to be published.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduledTime")
    public String scheduledTime;

    public Announcement withScheduledTime(String scheduledTime) {
        this.scheduledTime = scheduledTime;
        return this;
    }
    
    /**
     * Status of this announcement. If unspecified, the default state is `DRAFT`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public AnnouncementStateEnum state;

    public Announcement withState(AnnouncementStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Description of this announcement. The text must be a valid UTF-8 string containing no more than 30,000 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    public String text;

    public Announcement withText(String text) {
        this.text = text;
        return this;
    }
    
    /**
     * Timestamp of the most recent change to this announcement. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;

    public Announcement withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    public Announcement(){}
}
