/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The status of the update authorizer request.
 */
export enum UpdateAuthorizerRequestBodyStatusEnum {
  Active = "ACTIVE",
  Inactive = "INACTIVE",
}

export class UpdateAuthorizerRequestBody extends SpeakeasyBase {
  /**
   * The ARN of the authorizer's Lambda function.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizerFunctionArn" })
  authorizerFunctionArn?: string;

  /**
   * When <code>true</code>, the result from the authorizerâ€™s Lambda function is cached for the time specified in <code>refreshAfterInSeconds</code>. The cached result is used while the device reuses the same HTTP connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableCachingForHttp" })
  enableCachingForHttp?: boolean;

  /**
   * The status of the update authorizer request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: UpdateAuthorizerRequestBodyStatusEnum;

  /**
   * The key used to extract the token from the HTTP headers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tokenKeyName" })
  tokenKeyName?: string;

  /**
   * The public keys used to verify the token signature.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tokenSigningPublicKeys" })
  tokenSigningPublicKeys?: Record<string, string>;
}

export class UpdateAuthorizerRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateAuthorizerRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The authorizer name.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=authorizerName",
  })
  authorizerName: string;
}

export class UpdateAuthorizerResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * UnauthorizedException
   */
  @SpeakeasyMetadata()
  unauthorizedException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateAuthorizerResponse?: shared.UpdateAuthorizerResponse;
}
