"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AchTransferTransferApproval:
    r"""If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval."""
    
    approved_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approved_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AchTransferTransferCancellation:
    r"""If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation."""
    
    canceled_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canceled_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled."""  
    
class AchTransferCurrencyEnum(str, Enum):
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`."""
    CAD = 'CAD'
    CHF = 'CHF'
    EUR = 'EUR'
    GBP = 'GBP'
    JPY = 'JPY'
    USD = 'USD'

class AchTransferFundingEnum(str, Enum):
    r"""The type of the account to which the transfer will be sent."""
    CHECKING = 'checking'
    SAVINGS = 'savings'

class AchTransferNetworkEnum(str, Enum):
    r"""The transfer's network."""
    ACH = 'ach'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ACHTransferACHNotificationOfChange:
    r"""If the receiving bank accepts the transfer but notifies that future transfers should use different details, this will contain those details."""
    
    change_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('change_code') }})
    r"""The type of change that occurred."""  
    corrected_data: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corrected_data') }})
    r"""The corrected data."""  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the notification occurred."""  
    
class ACHTransferACHTransferReturnReturnReasonCodeEnum(str, Enum):
    r"""Why the ACH Transfer was returned."""
    INSUFFICIENT_FUND = 'insufficient_fund'
    NO_ACCOUNT = 'no_account'
    ACCOUNT_CLOSED = 'account_closed'
    INVALID_ACCOUNT_NUMBER_STRUCTURE = 'invalid_account_number_structure'
    ACCOUNT_FROZEN_ENTRY_RETURNED_PER_OFAC_INSTRUCTION = 'account_frozen_entry_returned_per_ofac_instruction'
    CREDIT_ENTRY_REFUSED_BY_RECEIVER = 'credit_entry_refused_by_receiver'
    UNAUTHORIZED_DEBIT_TO_CONSUMER_ACCOUNT_USING_CORPORATE_SEC_CODE = 'unauthorized_debit_to_consumer_account_using_corporate_sec_code'
    CORPORATE_CUSTOMER_ADVISED_NOT_AUTHORIZED = 'corporate_customer_advised_not_authorized'
    PAYMENT_STOPPED = 'payment_stopped'
    NON_TRANSACTION_ACCOUNT = 'non_transaction_account'
    UNCOLLECTED_FUNDS = 'uncollected_funds'
    ROUTING_NUMBER_CHECK_DIGIT_ERROR = 'routing_number_check_digit_error'
    CUSTOMER_ADVISED_UNAUTHORIZED_IMPROPER_INELIGIBLE_OR_INCOMPLETE = 'customer_advised_unauthorized_improper_ineligible_or_incomplete'
    AMOUNT_FIELD_ERROR = 'amount_field_error'
    AUTHORIZATION_REVOKED_BY_CUSTOMER = 'authorization_revoked_by_customer'
    INVALID_ACH_ROUTING_NUMBER = 'invalid_ach_routing_number'
    FILE_RECORD_EDIT_CRITERIA = 'file_record_edit_criteria'
    ENR_INVALID_INDIVIDUAL_NAME = 'enr_invalid_individual_name'
    RETURNED_PER_ODFI_REQUEST = 'returned_per_odfi_request'
    ADDENDA_ERROR = 'addenda_error'
    LIMITED_PARTICIPATION_DFI = 'limited_participation_dfi'
    INCORRECTLY_CODED_OUTBOUND_INTERNATIONAL_PAYMENT = 'incorrectly_coded_outbound_international_payment'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ACHTransferACHTransferReturn:
    r"""If your transfer is returned, this will contain details of the return."""
    
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created."""  
    return_reason_code: ACHTransferACHTransferReturnReturnReasonCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('return_reason_code') }})
    r"""Why the ACH Transfer was returned."""  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id') }})
    r"""The identifier of the Tranasaction associated with this return."""  
    transfer_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfer_id') }})
    r"""The identifier of the ACH Transfer associated with this return."""  
    
class AchTransferStandardEntryClassCodeEnum(str, Enum):
    r"""The Standard Entry Class (SEC) code to use for the transfer."""
    CORPORATE_CREDIT_OR_DEBIT = 'corporate_credit_or_debit'
    PREARRANGED_PAYMENTS_AND_DEPOSIT = 'prearranged_payments_and_deposit'
    INTERNET_INITIATED = 'internet_initiated'

class AchTransferStatusEnum(str, Enum):
    r"""The lifecycle status of the transfer."""
    PENDING_APPROVAL = 'pending_approval'
    CANCELED = 'canceled'
    PENDING_SUBMISSION = 'pending_submission'
    SUBMITTED = 'submitted'
    RETURNED = 'returned'
    REQUIRES_ATTENTION = 'requires_attention'
    REJECTED = 'rejected'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ACHTransferACHTransferSubmission:
    r"""After the transfer is submitted to FedACH, this will contain supplemental details."""
    
    submitted_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submitted_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""When the ACH transfer was sent to FedACH."""  
    trace_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trace_number') }})
    r"""The trace number for the submission."""  
    
class AchTransferTypeEnum(str, Enum):
    r"""A constant representing the object's type. For this resource it will always be `ach_transfer`."""
    ACH_TRANSFER = 'ach_transfer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AchTransfer:
    r"""ACH transfers move funds between your Increase account and any other account accessible by the Automated Clearing House (ACH)."""
    
    account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id') }})
    r"""The Account to which the transfer belongs."""  
    account_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_number') }})
    r"""The destination account number."""  
    addendum: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addendum') }})
    r"""Additional information that will be sent to the recipient."""  
    amount: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The transfer amount in USD cents. A positive amount indicates a credit transfer pushing funds to the receiving account. A negative amount indicates a debit transfer pulling funds from the receiving account."""  
    approval: AchTransferTransferApproval = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approval') }})
    r"""If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval."""  
    cancellation: AchTransferTransferCancellation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancellation') }})
    r"""If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation."""  
    company_descriptive_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_descriptive_date') }})
    r"""The description of the date of the transfer."""  
    company_discretionary_data: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_discretionary_data') }})
    r"""The data you chose to associate with the transfer."""  
    company_entry_description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_entry_description') }})
    r"""The description of the transfer you set to be shown to the recipient."""  
    company_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_name') }})
    r"""The name by which the recipient knows you."""  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created."""  
    currency: AchTransferCurrencyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`."""  
    external_account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_account_id') }})
    r"""The identifier of the External Account the transfer was made to, if any."""  
    funding: AchTransferFundingEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('funding') }})
    r"""The type of the account to which the transfer will be sent."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The ACH transfer's identifier."""  
    individual_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual_id') }})
    r"""Your identifer for the transfer recipient."""  
    individual_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual_name') }})
    r"""The name of the transfer recipient. This value is information and not verified by the recipient's bank."""  
    network: AchTransferNetworkEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network') }})
    r"""The transfer's network."""  
    notification_of_change: ACHTransferACHNotificationOfChange = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notification_of_change') }})
    r"""If the receiving bank accepts the transfer but notifies that future transfers should use different details, this will contain those details."""  
    return_: ACHTransferACHTransferReturn = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('return') }})
    r"""If your transfer is returned, this will contain details of the return."""  
    routing_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routing_number') }})
    r"""The American Bankers' Association (ABA) Routing Transit Number (RTN)."""  
    standard_entry_class_code: AchTransferStandardEntryClassCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('standard_entry_class_code') }})
    r"""The Standard Entry Class (SEC) code to use for the transfer."""  
    statement_descriptor: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statement_descriptor') }})
    r"""The descriptor that will show on the recipient's bank statement."""  
    status: AchTransferStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The lifecycle status of the transfer."""  
    submission: ACHTransferACHTransferSubmission = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submission') }})
    r"""After the transfer is submitted to FedACH, this will contain supplemental details."""  
    template_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template_id') }})
    r"""If the transfer was created from a template, this will be the template's ID."""  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id') }})
    r"""The ID for the transaction funding the transfer."""  
    type: AchTransferTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""A constant representing the object's type. For this resource it will always be `ach_transfer`."""  
    