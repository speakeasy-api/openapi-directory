<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ConstraintEntity - Constraint is not used as an independent entity, it is retrieved as part of another entity such as Table or View.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ConstraintEntity
{
    /**
     * Custom engine specific features.
     * 
     * @var ?array<string, mixed> $customFeatures
     */
	#[\JMS\Serializer\Annotation\SerializedName('customFeatures')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $customFeatures = null;
    
    /**
     * The name of the table constraint.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Reference columns which may be associated with the constraint. For example, if the constraint is a FOREIGN_KEY, this represents the list of full names of referenced columns by the foreign key.
     * 
     * @var ?array<string> $referenceColumns
     */
	#[\JMS\Serializer\Annotation\SerializedName('referenceColumns')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $referenceColumns = null;
    
    /**
     * Reference table which may be associated with the constraint. For example, if the constraint is a FOREIGN_KEY, this represents the list of full name of the referenced table by the foreign key.
     * 
     * @var ?string $referenceTable
     */
	#[\JMS\Serializer\Annotation\SerializedName('referenceTable')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $referenceTable = null;
    
    /**
     * Table columns used as part of the Constraint, for example primary key constraint should list the columns which constitutes the key.
     * 
     * @var ?array<string> $tableColumns
     */
	#[\JMS\Serializer\Annotation\SerializedName('tableColumns')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tableColumns = null;
    
    /**
     * Table which is associated with the constraint. In case the constraint is defined on a table, this field is left empty as this information is stored in parent_name. However, if constraint is defined on a view, this field stores the table name on which the view is defined.
     * 
     * @var ?string $tableName
     */
	#[\JMS\Serializer\Annotation\SerializedName('tableName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $tableName = null;
    
    /**
     * Type of constraint, for example unique, primary key, foreign key (currently only primary key is supported).
     * 
     * @var ?string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $type = null;
    
	public function __construct()
	{
		$this->customFeatures = null;
		$this->name = null;
		$this->referenceColumns = null;
		$this->referenceTable = null;
		$this->tableColumns = null;
		$this->tableName = null;
		$this->type = null;
	}
}
