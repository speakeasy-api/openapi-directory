"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datacompressiontype_enum as shared_datacompressiontype_enum
from ..shared import datarepositoryconfiguration as shared_datarepositoryconfiguration
from ..shared import drivecachetype_enum as shared_drivecachetype_enum
from ..shared import lustredeploymenttype_enum as shared_lustredeploymenttype_enum
from ..shared import lustrelogconfiguration as shared_lustrelogconfiguration
from ..shared import lustrerootsquashconfiguration as shared_lustrerootsquashconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LustreFileSystemConfiguration:
    r"""The configuration for the Amazon FSx for Lustre file system."""
    
    automatic_backup_retention_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutomaticBackupRetentionDays'), 'exclude': lambda f: f is None }})
    r"""The number of days to retain automatic backups. Setting this property to <code>0</code> disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is <code>0</code>."""  
    copy_tags_to_backups: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CopyTagsToBackups'), 'exclude': lambda f: f is None }})  
    daily_automatic_backup_start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DailyAutomaticBackupStartTime'), 'exclude': lambda f: f is None }})
    r"""A recurring daily time, in the format <code>HH:MM</code>. <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. For example, <code>05:00</code> specifies 5 AM daily."""  
    data_compression_type: Optional[shared_datacompressiontype_enum.DataCompressionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataCompressionType'), 'exclude': lambda f: f is None }})  
    data_repository_configuration: Optional[shared_datarepositoryconfiguration.DataRepositoryConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataRepositoryConfiguration'), 'exclude': lambda f: f is None }})
    r"""<p>The data repository configuration object for Lustre file systems returned in the response of the <code>CreateFileSystem</code> operation.</p> <p>This data type is not supported for file systems with the <code>Persistent_2</code> deployment type. Instead, use .</p>"""  
    deployment_type: Optional[shared_lustredeploymenttype_enum.LustreDeploymentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeploymentType'), 'exclude': lambda f: f is None }})  
    drive_cache_type: Optional[shared_drivecachetype_enum.DriveCacheTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DriveCacheType'), 'exclude': lambda f: f is None }})  
    log_configuration: Optional[shared_lustrelogconfiguration.LustreLogConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LogConfiguration'), 'exclude': lambda f: f is None }})  
    mount_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MountName'), 'exclude': lambda f: f is None }})  
    per_unit_storage_throughput: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PerUnitStorageThroughput'), 'exclude': lambda f: f is None }})  
    root_squash_configuration: Optional[shared_lustrerootsquashconfiguration.LustreRootSquashConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RootSquashConfiguration'), 'exclude': lambda f: f is None }})  
    weekly_maintenance_start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WeeklyMaintenanceStartTime'), 'exclude': lambda f: f is None }})  
    