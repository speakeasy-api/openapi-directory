/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SandboxBankAccountInfo } from "./sandboxbankaccountinfo";
import { SandboxBeneficiary } from "./sandboxbeneficiary";
import { SandboxParty } from "./sandboxparty";
import { SandboxScheduledPayment } from "./sandboxscheduledpayment";
import { SandboxStandingOrder } from "./sandboxstandingorder";
import { SandboxStatement } from "./sandboxstatement";
import { SandboxTransaction } from "./sandboxtransaction";
import { Expose, Type } from "class-transformer";

/**
 * Sandbox bank account
 */
export class SandboxBankAccount extends SpeakeasyBase {
  /**
   * List of account's beneficiaries
   */
  @SpeakeasyMetadata({ elemType: SandboxBeneficiary })
  @Expose({ name: "beneficiaries" })
  @Type(() => SandboxBeneficiary)
  beneficiaries?: SandboxBeneficiary[];

  /**
   * General account information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "info" })
  @Type(() => SandboxBankAccountInfo)
  info?: SandboxBankAccountInfo;

  /**
   * Connected party information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "party" })
  @Type(() => SandboxParty)
  party?: SandboxParty;

  /**
   * List of account's scheduled payments
   */
  @SpeakeasyMetadata({ elemType: SandboxScheduledPayment })
  @Expose({ name: "scheduledPayments" })
  @Type(() => SandboxScheduledPayment)
  scheduledPayments?: SandboxScheduledPayment[];

  /**
   * List of account's standing orders
   */
  @SpeakeasyMetadata({ elemType: SandboxStandingOrder })
  @Expose({ name: "standingOrders" })
  @Type(() => SandboxStandingOrder)
  standingOrders?: SandboxStandingOrder[];

  /**
   * List of account's statements
   */
  @SpeakeasyMetadata({ elemType: SandboxStatement })
  @Expose({ name: "statements" })
  @Type(() => SandboxStatement)
  statements?: SandboxStatement[];

  /**
   * List of account's transactions
   */
  @SpeakeasyMetadata({ elemType: SandboxTransaction })
  @Expose({ name: "transactions" })
  @Type(() => SandboxTransaction)
  transactions?: SandboxTransaction[];
}
