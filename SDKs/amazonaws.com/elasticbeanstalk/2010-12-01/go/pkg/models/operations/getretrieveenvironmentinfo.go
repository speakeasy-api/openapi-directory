// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETRetrieveEnvironmentInfoActionEnum
type GETRetrieveEnvironmentInfoActionEnum string

const (
	GETRetrieveEnvironmentInfoActionEnumRetrieveEnvironmentInfo GETRetrieveEnvironmentInfoActionEnum = "RetrieveEnvironmentInfo"
)

func (e GETRetrieveEnvironmentInfoActionEnum) ToPointer() *GETRetrieveEnvironmentInfoActionEnum {
	return &e
}

func (e *GETRetrieveEnvironmentInfoActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RetrieveEnvironmentInfo":
		*e = GETRetrieveEnvironmentInfoActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRetrieveEnvironmentInfoActionEnum: %v", v)
	}
}

// GETRetrieveEnvironmentInfoInfoTypeEnum - The type of information to retrieve.
type GETRetrieveEnvironmentInfoInfoTypeEnum string

const (
	GETRetrieveEnvironmentInfoInfoTypeEnumTail   GETRetrieveEnvironmentInfoInfoTypeEnum = "tail"
	GETRetrieveEnvironmentInfoInfoTypeEnumBundle GETRetrieveEnvironmentInfoInfoTypeEnum = "bundle"
)

func (e GETRetrieveEnvironmentInfoInfoTypeEnum) ToPointer() *GETRetrieveEnvironmentInfoInfoTypeEnum {
	return &e
}

func (e *GETRetrieveEnvironmentInfoInfoTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tail":
		fallthrough
	case "bundle":
		*e = GETRetrieveEnvironmentInfoInfoTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRetrieveEnvironmentInfoInfoTypeEnum: %v", v)
	}
}

// GETRetrieveEnvironmentInfoVersionEnum
type GETRetrieveEnvironmentInfoVersionEnum string

const (
	GETRetrieveEnvironmentInfoVersionEnumTwoThousandAndTen1201 GETRetrieveEnvironmentInfoVersionEnum = "2010-12-01"
)

func (e GETRetrieveEnvironmentInfoVersionEnum) ToPointer() *GETRetrieveEnvironmentInfoVersionEnum {
	return &e
}

func (e *GETRetrieveEnvironmentInfoVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-12-01":
		*e = GETRetrieveEnvironmentInfoVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRetrieveEnvironmentInfoVersionEnum: %v", v)
	}
}

type GETRetrieveEnvironmentInfoRequest struct {
	Action GETRetrieveEnvironmentInfoActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The ID of the data's environment.</p> <p>If no such environment is found, returns an <code>InvalidParameterValue</code> error.</p> <p>Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.</p>
	EnvironmentID *string `queryParam:"style=form,explode=true,name=EnvironmentId"`
	// <p>The name of the data's environment.</p> <p> If no such environment is found, returns an <code>InvalidParameterValue</code> error. </p> <p> Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p>
	EnvironmentName *string `queryParam:"style=form,explode=true,name=EnvironmentName"`
	// The type of information to retrieve.
	InfoType          GETRetrieveEnvironmentInfoInfoTypeEnum `queryParam:"style=form,explode=true,name=InfoType"`
	Version           GETRetrieveEnvironmentInfoVersionEnum  `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETRetrieveEnvironmentInfoResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
