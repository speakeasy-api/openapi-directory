// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConfigResponseCodeEnum string

const (
	ConfigResponseCodeEnumTwoThousand ConfigResponseCodeEnum = "2000"
)

func (e *ConfigResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = ConfigResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigResponseCodeEnum: %s", s)
	}
}

type ConfigResponseMessageEnum string

const (
	ConfigResponseMessageEnumSuccess ConfigResponseMessageEnum = "Success"
)

func (e *ConfigResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = ConfigResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigResponseMessageEnum: %s", s)
	}
}

// ConfigResponse - Success
type ConfigResponse struct {
	Code    ConfigResponseCodeEnum    `json:"code"`
	Message ConfigResponseMessageEnum `json:"message"`
	Result  Config                    `json:"result"`
}
