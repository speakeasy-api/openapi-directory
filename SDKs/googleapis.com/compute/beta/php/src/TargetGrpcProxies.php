<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TargetGrpcProxies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified TargetGrpcProxy in the given scope
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesDeleteResponse
     */
	public function computeTargetGrpcProxiesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified TargetGrpcProxy resource in the given scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesGetResponse
     */
	public function computeTargetGrpcProxiesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetGrpcProxy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetGrpcProxy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a TargetGrpcProxy in the specified project in the given scope using the parameters that are included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesInsertResponse
     */
	public function computeTargetGrpcProxiesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetGrpcProxies', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetGrpcProxy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the TargetGrpcProxies for a project in the given scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesListResponse
     */
	public function computeTargetGrpcProxiesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetGrpcProxies', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetGrpcProxyList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetGrpcProxyList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified TargetGrpcProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesPatchResponse
     */
	public function computeTargetGrpcProxiesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetGrpcProxy1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesTestIamPermissionsResponse
     */
	public function computeTargetGrpcProxiesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetGrpcProxies/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetGrpcProxiesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}