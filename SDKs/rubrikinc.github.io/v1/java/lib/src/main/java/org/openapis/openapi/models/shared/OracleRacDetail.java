/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class OracleRacDetail {
    /**
     * The ID of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainId")
    public String configuredSlaDomainId;

    public OracleRacDetail withConfiguredSlaDomainId(String configuredSlaDomainId) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        return this;
    }
    
    /**
     * The name of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainName")
    public String configuredSlaDomainName;

    public OracleRacDetail withConfiguredSlaDomainName(String configuredSlaDomainName) {
        this.configuredSlaDomainName = configuredSlaDomainName;
        return this;
    }
    
    /**
     * Specifies whether the SLA Domain is used for protection or retention.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuredSlaDomainType")
    public ConfiguredSlaTypeEnum configuredSlaDomainType;

    public OracleRacDetail withConfiguredSlaDomainType(ConfiguredSlaTypeEnum configuredSlaDomainType) {
        this.configuredSlaDomainType = configuredSlaDomainType;
        return this;
    }
    
    /**
     * Specifies an interval in hours. The next log snapshot job deletes archived Oracle redo log files whose 'nextTime' field specifies a time more than the specified number of hours ago. To immediately delete archived redo log files regardless of age, specify an interval of -1. To preserve all archived redo log files, specify an interval of -2.
     */
    @JsonProperty("hostLogRetentionHours")
    public Integer hostLogRetentionHours;

    public OracleRacDetail withHostLogRetentionHours(Integer hostLogRetentionHours) {
        this.hostLogRetentionHours = hostLogRetentionHours;
        return this;
    }
    
    /**
     * Path where the NFS share is mounted on the host.
     */
    @JsonProperty("hostMount")
    public String hostMount;

    public OracleRacDetail withHostMount(String hostMount) {
        this.hostMount = hostMount;
        return this;
    }
    
    /**
     * ID assigned to the Oracle RAC.
     */
    @JsonProperty("id")
    public String id;

    public OracleRacDetail withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isConfiguredSlaDomainRetentionLocked")
    public Boolean isConfiguredSlaDomainRetentionLocked;

    public OracleRacDetail withIsConfiguredSlaDomainRetentionLocked(Boolean isConfiguredSlaDomainRetentionLocked) {
        this.isConfiguredSlaDomainRetentionLocked = isConfiguredSlaDomainRetentionLocked;
        return this;
    }
    
    /**
     * Specifies an interval in minutes. This interval is the period between successive log backups.
     */
    @JsonProperty("logBackupFrequencyInMinutes")
    public Integer logBackupFrequencyInMinutes;

    public OracleRacDetail withLogBackupFrequencyInMinutes(Integer logBackupFrequencyInMinutes) {
        this.logBackupFrequencyInMinutes = logBackupFrequencyInMinutes;
        return this;
    }
    
    /**
     * Specifies an interval in hours. Log backups are retained for the duration of the interval.
     */
    @JsonProperty("logRetentionHours")
    public Integer logRetentionHours;

    public OracleRacDetail withLogRetentionHours(Integer logRetentionHours) {
        this.logRetentionHours = logRetentionHours;
        return this;
    }
    
    /**
     * Cluster name assigned to the Oracle RAC.
     */
    @JsonProperty("name")
    public String name;

    public OracleRacDetail withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Specifies an order for the RAC nodes. Automated Oracle backups use the RAC nodes in the specified order.
     */
    @JsonProperty("nodeOrder")
    public OracleNodeOrder[] nodeOrder;

    public OracleRacDetail withNodeOrder(OracleNodeOrder[] nodeOrder) {
        this.nodeOrder = nodeOrder;
        return this;
    }
    
    /**
     * Details of the nodes of this Oracle RAC.
     */
    @JsonProperty("nodes")
    public OracleNodeProperties[] nodes;

    public OracleRacDetail withNodes(OracleNodeProperties[] nodes) {
        this.nodes = nodes;
        return this;
    }
    
    /**
     * Number of channels used to backup the Oracle database.
     */
    @JsonProperty("numChannels")
    public Integer numChannels;

    public OracleRacDetail withNumChannels(Integer numChannels) {
        this.numChannels = numChannels;
        return this;
    }
    
    /**
     * Count of the number of databases on the Oracle RAC.
     */
    @JsonProperty("numDbs")
    public Integer numDbs;

    public OracleRacDetail withNumDbs(Integer numDbs) {
        this.numDbs = numDbs;
        return this;
    }
    
    /**
     * Count of the number of nodes on the Oracle RAC.
     */
    @JsonProperty("numNodes")
    public Integer numNodes;

    public OracleRacDetail withNumNodes(Integer numNodes) {
        this.numNodes = numNodes;
        return this;
    }
    
    @JsonProperty("primaryClusterId")
    public String primaryClusterId;

    public OracleRacDetail withPrimaryClusterId(String primaryClusterId) {
        this.primaryClusterId = primaryClusterId;
        return this;
    }
    
    /**
     * Single Client Access Name (SCAN) of the Oracle RAC cluster.
     */
    @JsonProperty("scan")
    public String scan;

    public OracleRacDetail withScan(String scan) {
        this.scan = scan;
        return this;
    }
    
    /**
     * The UTC time when the SLA Domain was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("slaLastUpdateTime")
    public OffsetDateTime slaLastUpdateTime;

    public OracleRacDetail withSlaLastUpdateTime(OffsetDateTime slaLastUpdateTime) {
        this.slaLastUpdateTime = slaLastUpdateTime;
        return this;
    }
    
    /**
     * Connectivity status of the Oracle RAC.
     */
    @JsonProperty("status")
    public String status;

    public OracleRacDetail withStatus(String status) {
        this.status = status;
        return this;
    }
    
    public OracleRacDetail(@JsonProperty("configuredSlaDomainId") String configuredSlaDomainId, @JsonProperty("configuredSlaDomainName") String configuredSlaDomainName, @JsonProperty("hostLogRetentionHours") Integer hostLogRetentionHours, @JsonProperty("hostMount") String hostMount, @JsonProperty("id") String id, @JsonProperty("logBackupFrequencyInMinutes") Integer logBackupFrequencyInMinutes, @JsonProperty("logRetentionHours") Integer logRetentionHours, @JsonProperty("name") String name, @JsonProperty("nodeOrder") OracleNodeOrder[] nodeOrder, @JsonProperty("nodes") OracleNodeProperties[] nodes, @JsonProperty("numChannels") Integer numChannels, @JsonProperty("numDbs") Integer numDbs, @JsonProperty("numNodes") Integer numNodes, @JsonProperty("primaryClusterId") String primaryClusterId, @JsonProperty("scan") String scan, @JsonProperty("status") String status) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        this.configuredSlaDomainName = configuredSlaDomainName;
        this.hostLogRetentionHours = hostLogRetentionHours;
        this.hostMount = hostMount;
        this.id = id;
        this.logBackupFrequencyInMinutes = logBackupFrequencyInMinutes;
        this.logRetentionHours = logRetentionHours;
        this.name = name;
        this.nodeOrder = nodeOrder;
        this.nodes = nodes;
        this.numChannels = numChannels;
        this.numDbs = numDbs;
        this.numNodes = numNodes;
        this.primaryClusterId = primaryClusterId;
        this.scan = scan;
        this.status = status;
  }
}
