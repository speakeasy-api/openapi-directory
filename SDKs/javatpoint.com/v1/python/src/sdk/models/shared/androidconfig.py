"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import androidfcmoptions as shared_androidfcmoptions
from ..shared import androidnotification as shared_androidnotification
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AndroidConfigPriorityEnum(str, Enum):
    r"""Message priority. Can take \\"normal\\" and \\"high\\" values. For more information, see [Setting the priority of a message](https://goo.gl/GjONJv)."""
    NORMAL = 'NORMAL'
    HIGH = 'HIGH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AndroidConfig:
    r"""Android specific options for messages sent through [FCM connection server](https://goo.gl/4GLdUl)."""
    
    collapse_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collapseKey'), 'exclude': lambda f: f is None }})
    r"""An identifier of a group of messages that can be collapsed, so that only the last message gets sent when delivery can be resumed. A maximum of 4 different collapse keys is allowed at any given time."""  
    data: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""Arbitrary key/value payload. If present, it will override google.firebase.fcm.v1.Message.data."""  
    direct_boot_ok: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directBootOk'), 'exclude': lambda f: f is None }})
    r"""If set to true, messages will be allowed to be delivered to the app while the device is in direct boot mode. See [Support Direct Boot mode](https://developer.android.com/training/articles/direct-boot)."""  
    fcm_options: Optional[shared_androidfcmoptions.AndroidFcmOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fcmOptions'), 'exclude': lambda f: f is None }})
    r"""Options for features provided by the FCM SDK for Android."""  
    notification: Optional[shared_androidnotification.AndroidNotification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notification'), 'exclude': lambda f: f is None }})
    r"""Notification to send to android devices."""  
    priority: Optional[AndroidConfigPriorityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priority'), 'exclude': lambda f: f is None }})
    r"""Message priority. Can take \\"normal\\" and \\"high\\" values. For more information, see [Setting the priority of a message](https://goo.gl/GjONJv)."""  
    restricted_package_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restrictedPackageName'), 'exclude': lambda f: f is None }})
    r"""Package name of the application where the registration token must match in order to receive the message."""  
    ttl: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ttl'), 'exclude': lambda f: f is None }})
    r"""How long (in seconds) the message should be kept in FCM storage if the device is offline. The maximum time to live supported is 4 weeks, and the default value is 4 weeks if not set. Set it to 0 if want to send the message immediately. In JSON format, the Duration type is encoded as a string rather than an object, where the string ends in the suffix \\"s\\" (indicating seconds) and is preceded by the number of seconds, with nanoseconds expressed as fractional seconds. For example, 3 seconds with 0 nanoseconds should be encoded in JSON format as \\"3s\\", while 3 seconds and 1 nanosecond should be expressed in JSON format as \\"3.000000001s\\". The ttl will be rounded down to the nearest second."""  
    