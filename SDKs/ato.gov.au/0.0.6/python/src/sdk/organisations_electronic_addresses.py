"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class OrganisationsElectronicAddresses:
    r"""The registry maintains information about an organisation's contact details for administrative purposes.
    
      Including:
      - an email address
      - a mobile number
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_organisations_party_id_electronic_addresses_address_id_(self, request: operations.DeleteOrganisationsPartyIDElectronicAddressesAddressIDRequest) -> operations.DeleteOrganisationsPartyIDElectronicAddressesAddressIDResponse:
        r"""Delete an electronic address
        Delete an electronic address
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrganisationsPartyIDElectronicAddressesAddressIDRequest, base_url, '/organisations/{partyId}/electronic-addresses/{addressId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrganisationsPartyIDElectronicAddressesAddressIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthenticated])
                res.unauthenticated = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_organisations_party_id_electronic_addresses(self, request: operations.GetOrganisationsPartyIDElectronicAddressesRequest) -> operations.GetOrganisationsPartyIDElectronicAddressesResponse:
        r"""Retrieve a list of electronic addresses"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganisationsPartyIDElectronicAddressesRequest, base_url, '/organisations/{partyId}/electronic-addresses', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganisationsPartyIDElectronicAddressesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ElectronicAddress]])
                res.electronic_addresses = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthenticated])
                res.unauthenticated = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_organisations_party_id_electronic_addresses_address_id_(self, request: operations.GetOrganisationsPartyIDElectronicAddressesAddressIDRequest) -> operations.GetOrganisationsPartyIDElectronicAddressesAddressIDResponse:
        r"""Retrieve an electronic address
        Retrieve an electronic address
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganisationsPartyIDElectronicAddressesAddressIDRequest, base_url, '/organisations/{partyId}/electronic-addresses/{addressId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganisationsPartyIDElectronicAddressesAddressIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ElectronicAddress])
                res.electronic_address = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthenticated])
                res.unauthenticated = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def post_organisations_party_id_electronic_addresses(self, request: operations.PostOrganisationsPartyIDElectronicAddressesRequest) -> operations.PostOrganisationsPartyIDElectronicAddressesResponse:
        r"""Create an electronic address
        Create an electronic address
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOrganisationsPartyIDElectronicAddressesRequest, base_url, '/organisations/{partyId}/electronic-addresses', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "electronic_address_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOrganisationsPartyIDElectronicAddressesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ElectronicAddress])
                res.electronic_address = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvalidArgument])
                res.invalid_argument = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthenticated])
                res.unauthenticated = out

        return res

    def put_organisations_party_id_electronic_addresses_address_id_(self, request: operations.PutOrganisationsPartyIDElectronicAddressesAddressIDRequest) -> operations.PutOrganisationsPartyIDElectronicAddressesAddressIDResponse:
        r"""Update an electronic address
        Update an electronic address
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutOrganisationsPartyIDElectronicAddressesAddressIDRequest, base_url, '/organisations/{partyId}/electronic-addresses/{addressId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "electronic_address_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutOrganisationsPartyIDElectronicAddressesAddressIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ElectronicAddress])
                res.electronic_address = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvalidArgument])
                res.invalid_argument = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthenticated])
                res.unauthenticated = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    