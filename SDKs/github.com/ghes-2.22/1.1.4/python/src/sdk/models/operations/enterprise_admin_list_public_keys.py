"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import direction_enum as shared_direction_enum
from ..shared import public_key_full as shared_public_key_full
from enum import Enum
from typing import Optional

class EnterpriseAdminListPublicKeysSortEnum(str, Enum):
    CREATED = 'created'
    UPDATED = 'updated'
    ACCESSED = 'accessed'


@dataclasses.dataclass
class EnterpriseAdminListPublicKeysRequest:
    
    direction: Optional[shared_direction_enum.DirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""One of `asc` (ascending) or `desc` (descending)."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Results per page (max 100)"""  
    since: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'since', 'style': 'form', 'explode': True }})
    r"""Only show public keys accessed after the given time."""  
    sort: Optional[EnterpriseAdminListPublicKeysSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})  
    

@dataclasses.dataclass
class EnterpriseAdminListPublicKeysResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    public_key_fulls: Optional[list[shared_public_key_full.PublicKeyFull]] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    