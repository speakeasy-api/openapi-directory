// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type NotificationRelationshipsOwnerUserDataTypeEnum string

const (
	NotificationRelationshipsOwnerUserDataTypeEnumUser NotificationRelationshipsOwnerUserDataTypeEnum = "user"
)

func (e NotificationRelationshipsOwnerUserDataTypeEnum) ToPointer() *NotificationRelationshipsOwnerUserDataTypeEnum {
	return &e
}

func (e *NotificationRelationshipsOwnerUserDataTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = NotificationRelationshipsOwnerUserDataTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationRelationshipsOwnerUserDataTypeEnum: %v", v)
	}
}

type NotificationRelationshipsOwnerUserData struct {
	ID   *int64                                          `json:"id,omitempty"`
	Type *NotificationRelationshipsOwnerUserDataTypeEnum `json:"type,omitempty"`
}

type NotificationRelationshipsOwnerUser struct {
	Data *NotificationRelationshipsOwnerUserData `json:"data,omitempty"`
}

type NotificationRelationshipsResourceData struct {
	ID   *int64  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

type NotificationRelationshipsResource struct {
	Data *NotificationRelationshipsResourceData `json:"data,omitempty"`
}

type NotificationRelationshipsShareData struct {
	ID   *int    `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

type NotificationRelationshipsShare struct {
	Data *NotificationRelationshipsShareData `json:"data,omitempty"`
}

type NotificationRelationships struct {
	OwnerUser *NotificationRelationshipsOwnerUser `json:"ownerUser,omitempty"`
	Resource  *NotificationRelationshipsResource  `json:"resource,omitempty"`
	Share     *NotificationRelationshipsShare     `json:"share,omitempty"`
}

// Notification - Object containing notification properties.
type Notification struct {
	// Attributes for the notification including the path, recipients, and share data.
	Attributes    *NotificationAttributes    `json:"attributes,omitempty"`
	ID            *int                       `json:"id,omitempty"`
	Relationships *NotificationRelationships `json:"relationships,omitempty"`
	Type          *string                    `json:"type,omitempty"`
}
