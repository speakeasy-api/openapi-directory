"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdvancedFieldSelector:
    r"""A single selector statement in an advanced event selector."""
    
    field: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Field') }})  
    ends_with: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndsWith'), 'exclude': lambda f: f is None }})  
    equals: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Equals'), 'exclude': lambda f: f is None }})  
    not_ends_with: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotEndsWith'), 'exclude': lambda f: f is None }})  
    not_equals: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotEquals'), 'exclude': lambda f: f is None }})  
    not_starts_with: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotStartsWith'), 'exclude': lambda f: f is None }})  
    starts_with: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartsWith'), 'exclude': lambda f: f is None }})  
    