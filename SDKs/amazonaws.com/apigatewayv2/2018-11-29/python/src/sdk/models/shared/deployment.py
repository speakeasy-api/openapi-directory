"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class DeploymentDeploymentStatusEnum(str, Enum):
    r"""The status of the deployment: PENDING, FAILED, or SUCCEEDED."""
    PENDING = 'PENDING'
    FAILED = 'FAILED'
    DEPLOYED = 'DEPLOYED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Deployment:
    r"""An immutable representation of an API that can be called by users. A Deployment must be associated with a Stage for it to be callable over the internet."""
    
    auto_deployed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoDeployed'), 'exclude': lambda f: f is None }})  
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    deployment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeploymentId'), 'exclude': lambda f: f is None }})  
    deployment_status: Optional[DeploymentDeploymentStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeploymentStatus'), 'exclude': lambda f: f is None }})  
    deployment_status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeploymentStatusMessage'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    