"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import namefound as shared_namefound
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class SummaryGenderEnum(str, Enum):
    r"""Person gender"""
    MALE = 'male'
    FEMALE = 'female'

class SummaryIdentityStatusEnum(str, Enum):
    r"""Indicates whether a person was found, found as dead or not found at all"""
    FOUND = 'found'
    NOT_FOUND = 'not_found'
    DEAD = 'dead'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Summary:
    r"""Represents a background check summary"""
    
    names_found: list[shared_namefound.NameFound] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('names_found') }})
    r"""Names found during the background check process"""  
    date_of_birth: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Person date of birth in RFC3339 format"""  
    death_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('death_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Person date of death"""  
    drivers_license: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drivers_license'), 'exclude': lambda f: f is None }})
    r"""Person driver's license"""  
    gender: Optional[SummaryGenderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gender'), 'exclude': lambda f: f is None }})
    r"""Person gender"""  
    identity_status: Optional[SummaryIdentityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identity_status'), 'exclude': lambda f: f is None }})
    r"""Indicates whether a person was found, found as dead or not found at all"""  
    nss: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nss'), 'exclude': lambda f: f is None }})
    r"""Social security number of the person (Mexico)"""  
    rfc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rfc'), 'exclude': lambda f: f is None }})
    r"""Federal taxpayer registration number of the person"""  
    