"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HLRLookupResponse:
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""The phone number country"""  
    country_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country-code') }})
    r"""The number location as an ISO 2-letter country code"""  
    country_code3: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country-code3') }})
    r"""The number location as an ISO 3-letter country code"""  
    currency_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency-code') }})
    r"""ISO 4217 currency code associated with the country"""  
    current_network: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current-network') }})
    r"""The currently used network/carrier name"""  
    hlr_status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hlr-status') }})
    r"""The HLR lookup status, possible values are: <br> <ul> <li>ok - the HLR lookup was successful and the device is connected</li> <li>absent - the number was once registered but the device has been switched off or out of network range for some time</li> <li>unknown - the number is not known by the mobile network</li> <li>invalid - the number is not a valid mobile MSISDN number</li> <li>fixed-line - the number is a registered fixed-line not mobile</li> <li>voip - the number has been detected as a VOIP line</li> <li>failed - the HLR lookup has failed, we could not determine the real status of this number</li> </ul>"""  
    hlr_valid: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hlr-valid') }})
    r"""Was the HLR lookup successful. If true then this is a working and registered cell-phone or mobile device (SMS and phone calls will be delivered)"""  
    imsi: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imsi') }})
    r"""The mobile IMSI number (International Mobile Subscriber Identity)"""  
    international_calling_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('international-calling-code') }})
    r"""The international calling code"""  
    international_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('international-number') }})
    r"""The number represented in full international format"""  
    is_mobile: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-mobile') }})
    r"""True if this is a mobile number (only true with 100% certainty, if the number type is unknown this value will be false)"""  
    is_ported: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-ported') }})
    r"""Has this number been ported to another network"""  
    is_roaming: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-roaming') }})
    r"""Is this number currently roaming from its origin country"""  
    local_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('local-number') }})
    r"""The number represented in local dialing format"""  
    location: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})
    r"""The number location. Could be a city, region or country depending on the type of number"""  
    mcc: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mcc') }})
    r"""The mobile MCC number (Mobile Country Code)"""  
    mnc: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mnc') }})
    r"""The mobile MNC number (Mobile Network Code)"""  
    msc: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('msc') }})
    r"""The mobile MSC number (Mobile Switching Center)"""  
    msin: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('msin') }})
    r"""The mobile MSIN number (Mobile Subscription Identification Number)"""  
    number_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number-type') }})
    r"""The number type, possible values are: <br> <ul> <li>mobile</li> <li>fixed-line</li> <li>premium-rate</li> <li>toll-free</li> <li>voip</li> <li>unknown</li> </ul>"""  
    number_valid: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number-valid') }})
    r"""True if this a valid phone number"""  
    origin_network: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin-network') }})
    r"""The origin network/carrier name"""  
    ported_network: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ported-network') }})
    r"""The ported to network/carrier name (only set if the number has been ported)"""  
    roaming_country_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roaming-country-code') }})
    r"""If the number is currently roaming, the ISO 2-letter country code of the roaming in country"""  
    