"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import documentattributevalue as shared_documentattributevalue
from ..shared import facetresult as shared_facetresult
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DocumentAttributeValueCountPair:
    r"""Provides the count of documents that match a particular attribute when doing a faceted search."""
    
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Count'), 'exclude': lambda f: f is None }})  
    document_attribute_value: Optional[shared_documentattributevalue.DocumentAttributeValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DocumentAttributeValue'), 'exclude': lambda f: f is None }})  
    facet_results: Optional[list[shared_facetresult.FacetResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FacetResults'), 'exclude': lambda f: f is None }})  
    