/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * POSTPublicEmailTemplateRequest - The request body to create an email template.
 */
public class POSTPublicEmailTemplateRequest {
    /**
     * The status of the email template. The default value is true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    public Boolean active;
    public POSTPublicEmailTemplateRequest withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * The email bcc address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bccEmailAddress")
    public String bccEmailAddress;
    public POSTPublicEmailTemplateRequest withBccEmailAddress(String bccEmailAddress) {
        this.bccEmailAddress = bccEmailAddress;
        return this;
    }
    
    /**
     * The email CC address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ccEmailAddress")
    public String ccEmailAddress;
    public POSTPublicEmailTemplateRequest withCcEmailAddress(String ccEmailAddress) {
        this.ccEmailAddress = ccEmailAddress;
        return this;
    }
    
    /**
     * Email CC type:
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, ccEmailType can be ALL values in enum. 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail. 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ccEmailType")
    public POSTPublicEmailTemplateRequestCcEmailTypeEnum ccEmailType;
    public POSTPublicEmailTemplateRequest withCcEmailType(POSTPublicEmailTemplateRequestCcEmailTypeEnum ccEmailType) {
        this.ccEmailType = ccEmailType;
        return this;
    }
    
    /**
     * The description of the email template.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public POSTPublicEmailTemplateRequest withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The email body. You can add merge fields in the email object using angle brackets. 
     * You can also embed HTML tags if 'isHtml' is true.
     */
    @JsonProperty("emailBody")
    public String emailBody;
    public POSTPublicEmailTemplateRequest withEmailBody(String emailBody) {
        this.emailBody = emailBody;
        return this;
    }
    
    /**
     * The email subject. Users can add merge fields in the email subject using angle brackets.
     */
    @JsonProperty("emailSubject")
    public String emailSubject;
    public POSTPublicEmailTemplateRequest withEmailSubject(String emailSubject) {
        this.emailSubject = emailSubject;
        return this;
    }
    
    /**
     * The endcode type of the email body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encodingType")
    public POSTPublicEmailTemplateRequestEncodingTypeEnum encodingType;
    public POSTPublicEmailTemplateRequest withEncodingType(POSTPublicEmailTemplateRequestEncodingTypeEnum encodingType) {
        this.encodingType = encodingType;
        return this;
    }
    
    /**
     * The name of the event type. 
     * 
     */
    @JsonProperty("eventTypeName")
    public String eventTypeName;
    public POSTPublicEmailTemplateRequest withEventTypeName(String eventTypeName) {
        this.eventTypeName = eventTypeName;
        return this;
    }
    
    /**
     * The namespace of the `eventTypeName` field. The `eventTypeName` has the `user.notification` namespace by default. 
     * 
     * Note that if the `eventTypeName` is a standard event type, you must specify the `com.zuora.notification` namespace; otherwise, you will get an error.
     * 
     * For example, if you want to create an email template on the `OrderActionProcessed` event, you must specify `com.zuora.notification` for this field.         
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventTypeNamespace")
    public String eventTypeNamespace;
    public POSTPublicEmailTemplateRequest withEventTypeNamespace(String eventTypeNamespace) {
        this.eventTypeNamespace = eventTypeNamespace;
        return this;
    }
    
    /**
     * If fromEmailType is SpecificEmail, this field is required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fromEmailAddress")
    public String fromEmailAddress;
    public POSTPublicEmailTemplateRequest withFromEmailAddress(String fromEmailAddress) {
        this.fromEmailAddress = fromEmailAddress;
        return this;
    }
    
    /**
     * The type of the email.
     */
    @JsonProperty("fromEmailType")
    public POSTPublicEmailTemplateRequestFromEmailTypeEnum fromEmailType;
    public POSTPublicEmailTemplateRequest withFromEmailType(POSTPublicEmailTemplateRequestFromEmailTypeEnum fromEmailType) {
        this.fromEmailType = fromEmailType;
        return this;
    }
    
    /**
     * The name of the email sender.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fromName")
    public String fromName;
    public POSTPublicEmailTemplateRequest withFromName(String fromName) {
        this.fromName = fromName;
        return this;
    }
    
    /**
     * Specifies whether the style of email body is HTML. The default value is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isHtml")
    public Boolean isHtml;
    public POSTPublicEmailTemplateRequest withIsHtml(Boolean isHtml) {
        this.isHtml = isHtml;
        return this;
    }
    
    /**
     * The name of the email template, a unique name in a tenant.
     */
    @JsonProperty("name")
    public String name;
    public POSTPublicEmailTemplateRequest withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * If replyToEmailType is SpecificEmail, this field is required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replyToEmailAddress")
    public String replyToEmailAddress;
    public POSTPublicEmailTemplateRequest withReplyToEmailAddress(String replyToEmailAddress) {
        this.replyToEmailAddress = replyToEmailAddress;
        return this;
    }
    
    /**
     * Type of the replyTo email.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replyToEmailType")
    public POSTPublicEmailTemplateRequestReplyToEmailTypeEnum replyToEmailType;
    public POSTPublicEmailTemplateRequest withReplyToEmailType(POSTPublicEmailTemplateRequestReplyToEmailTypeEnum replyToEmailType) {
        this.replyToEmailType = replyToEmailType;
        return this;
    }
    
    /**
     * If toEmailType is SpecificEmail, this field is required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("toEmailAddress")
    public String toEmailAddress;
    public POSTPublicEmailTemplateRequest withToEmailAddress(String toEmailAddress) {
        this.toEmailAddress = toEmailAddress;
        return this;
    }
    
    /**
     * Email receive type.
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, toEmailType can be ALL values in enum. 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
     */
    @JsonProperty("toEmailType")
    public POSTPublicEmailTemplateRequestToEmailTypeEnum toEmailType;
    public POSTPublicEmailTemplateRequest withToEmailType(POSTPublicEmailTemplateRequestToEmailTypeEnum toEmailType) {
        this.toEmailType = toEmailType;
        return this;
    }
    
}
