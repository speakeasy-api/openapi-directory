/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class PostCommentForPullRequestResponse {
    /**
     * BeforeCommitIdAndAfterCommitIdAreSameException
     */
    
    public Object beforeCommitIdAndAfterCommitIdAreSameException;

    public PostCommentForPullRequestResponse withBeforeCommitIdAndAfterCommitIdAreSameException(Object beforeCommitIdAndAfterCommitIdAreSameException) {
        this.beforeCommitIdAndAfterCommitIdAreSameException = beforeCommitIdAndAfterCommitIdAreSameException;
        return this;
    }
    
    /**
     * ClientRequestTokenRequiredException
     */
    
    public Object clientRequestTokenRequiredException;

    public PostCommentForPullRequestResponse withClientRequestTokenRequiredException(Object clientRequestTokenRequiredException) {
        this.clientRequestTokenRequiredException = clientRequestTokenRequiredException;
        return this;
    }
    
    /**
     * CommentContentRequiredException
     */
    
    public Object commentContentRequiredException;

    public PostCommentForPullRequestResponse withCommentContentRequiredException(Object commentContentRequiredException) {
        this.commentContentRequiredException = commentContentRequiredException;
        return this;
    }
    
    /**
     * CommentContentSizeLimitExceededException
     */
    
    public Object commentContentSizeLimitExceededException;

    public PostCommentForPullRequestResponse withCommentContentSizeLimitExceededException(Object commentContentSizeLimitExceededException) {
        this.commentContentSizeLimitExceededException = commentContentSizeLimitExceededException;
        return this;
    }
    
    /**
     * CommitDoesNotExistException
     */
    
    public Object commitDoesNotExistException;

    public PostCommentForPullRequestResponse withCommitDoesNotExistException(Object commitDoesNotExistException) {
        this.commitDoesNotExistException = commitDoesNotExistException;
        return this;
    }
    
    /**
     * CommitIdRequiredException
     */
    
    public Object commitIdRequiredException;

    public PostCommentForPullRequestResponse withCommitIdRequiredException(Object commitIdRequiredException) {
        this.commitIdRequiredException = commitIdRequiredException;
        return this;
    }
    
    
    public String contentType;

    public PostCommentForPullRequestResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * EncryptionIntegrityChecksFailedException
     */
    
    public Object encryptionIntegrityChecksFailedException;

    public PostCommentForPullRequestResponse withEncryptionIntegrityChecksFailedException(Object encryptionIntegrityChecksFailedException) {
        this.encryptionIntegrityChecksFailedException = encryptionIntegrityChecksFailedException;
        return this;
    }
    
    /**
     * EncryptionKeyAccessDeniedException
     */
    
    public Object encryptionKeyAccessDeniedException;

    public PostCommentForPullRequestResponse withEncryptionKeyAccessDeniedException(Object encryptionKeyAccessDeniedException) {
        this.encryptionKeyAccessDeniedException = encryptionKeyAccessDeniedException;
        return this;
    }
    
    /**
     * EncryptionKeyDisabledException
     */
    
    public Object encryptionKeyDisabledException;

    public PostCommentForPullRequestResponse withEncryptionKeyDisabledException(Object encryptionKeyDisabledException) {
        this.encryptionKeyDisabledException = encryptionKeyDisabledException;
        return this;
    }
    
    /**
     * EncryptionKeyNotFoundException
     */
    
    public Object encryptionKeyNotFoundException;

    public PostCommentForPullRequestResponse withEncryptionKeyNotFoundException(Object encryptionKeyNotFoundException) {
        this.encryptionKeyNotFoundException = encryptionKeyNotFoundException;
        return this;
    }
    
    /**
     * EncryptionKeyUnavailableException
     */
    
    public Object encryptionKeyUnavailableException;

    public PostCommentForPullRequestResponse withEncryptionKeyUnavailableException(Object encryptionKeyUnavailableException) {
        this.encryptionKeyUnavailableException = encryptionKeyUnavailableException;
        return this;
    }
    
    /**
     * IdempotencyParameterMismatchException
     */
    
    public Object idempotencyParameterMismatchException;

    public PostCommentForPullRequestResponse withIdempotencyParameterMismatchException(Object idempotencyParameterMismatchException) {
        this.idempotencyParameterMismatchException = idempotencyParameterMismatchException;
        return this;
    }
    
    /**
     * InvalidClientRequestTokenException
     */
    
    public Object invalidClientRequestTokenException;

    public PostCommentForPullRequestResponse withInvalidClientRequestTokenException(Object invalidClientRequestTokenException) {
        this.invalidClientRequestTokenException = invalidClientRequestTokenException;
        return this;
    }
    
    /**
     * InvalidCommitIdException
     */
    
    public Object invalidCommitIdException;

    public PostCommentForPullRequestResponse withInvalidCommitIdException(Object invalidCommitIdException) {
        this.invalidCommitIdException = invalidCommitIdException;
        return this;
    }
    
    /**
     * InvalidFileLocationException
     */
    
    public Object invalidFileLocationException;

    public PostCommentForPullRequestResponse withInvalidFileLocationException(Object invalidFileLocationException) {
        this.invalidFileLocationException = invalidFileLocationException;
        return this;
    }
    
    /**
     * InvalidFilePositionException
     */
    
    public Object invalidFilePositionException;

    public PostCommentForPullRequestResponse withInvalidFilePositionException(Object invalidFilePositionException) {
        this.invalidFilePositionException = invalidFilePositionException;
        return this;
    }
    
    /**
     * InvalidPathException
     */
    
    public Object invalidPathException;

    public PostCommentForPullRequestResponse withInvalidPathException(Object invalidPathException) {
        this.invalidPathException = invalidPathException;
        return this;
    }
    
    /**
     * InvalidPullRequestIdException
     */
    
    public Object invalidPullRequestIdException;

    public PostCommentForPullRequestResponse withInvalidPullRequestIdException(Object invalidPullRequestIdException) {
        this.invalidPullRequestIdException = invalidPullRequestIdException;
        return this;
    }
    
    /**
     * InvalidRelativeFileVersionEnumException
     */
    
    public Object invalidRelativeFileVersionEnumException;

    public PostCommentForPullRequestResponse withInvalidRelativeFileVersionEnumException(Object invalidRelativeFileVersionEnumException) {
        this.invalidRelativeFileVersionEnumException = invalidRelativeFileVersionEnumException;
        return this;
    }
    
    /**
     * InvalidRepositoryNameException
     */
    
    public Object invalidRepositoryNameException;

    public PostCommentForPullRequestResponse withInvalidRepositoryNameException(Object invalidRepositoryNameException) {
        this.invalidRepositoryNameException = invalidRepositoryNameException;
        return this;
    }
    
    /**
     * PathDoesNotExistException
     */
    
    public Object pathDoesNotExistException;

    public PostCommentForPullRequestResponse withPathDoesNotExistException(Object pathDoesNotExistException) {
        this.pathDoesNotExistException = pathDoesNotExistException;
        return this;
    }
    
    /**
     * PathRequiredException
     */
    
    public Object pathRequiredException;

    public PostCommentForPullRequestResponse withPathRequiredException(Object pathRequiredException) {
        this.pathRequiredException = pathRequiredException;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.PostCommentForPullRequestOutput postCommentForPullRequestOutput;

    public PostCommentForPullRequestResponse withPostCommentForPullRequestOutput(org.openapis.openapi.models.shared.PostCommentForPullRequestOutput postCommentForPullRequestOutput) {
        this.postCommentForPullRequestOutput = postCommentForPullRequestOutput;
        return this;
    }
    
    /**
     * PullRequestDoesNotExistException
     */
    
    public Object pullRequestDoesNotExistException;

    public PostCommentForPullRequestResponse withPullRequestDoesNotExistException(Object pullRequestDoesNotExistException) {
        this.pullRequestDoesNotExistException = pullRequestDoesNotExistException;
        return this;
    }
    
    /**
     * PullRequestIdRequiredException
     */
    
    public Object pullRequestIdRequiredException;

    public PostCommentForPullRequestResponse withPullRequestIdRequiredException(Object pullRequestIdRequiredException) {
        this.pullRequestIdRequiredException = pullRequestIdRequiredException;
        return this;
    }
    
    /**
     * RepositoryDoesNotExistException
     */
    
    public Object repositoryDoesNotExistException;

    public PostCommentForPullRequestResponse withRepositoryDoesNotExistException(Object repositoryDoesNotExistException) {
        this.repositoryDoesNotExistException = repositoryDoesNotExistException;
        return this;
    }
    
    /**
     * RepositoryNameRequiredException
     */
    
    public Object repositoryNameRequiredException;

    public PostCommentForPullRequestResponse withRepositoryNameRequiredException(Object repositoryNameRequiredException) {
        this.repositoryNameRequiredException = repositoryNameRequiredException;
        return this;
    }
    
    /**
     * RepositoryNotAssociatedWithPullRequestException
     */
    
    public Object repositoryNotAssociatedWithPullRequestException;

    public PostCommentForPullRequestResponse withRepositoryNotAssociatedWithPullRequestException(Object repositoryNotAssociatedWithPullRequestException) {
        this.repositoryNotAssociatedWithPullRequestException = repositoryNotAssociatedWithPullRequestException;
        return this;
    }
    
    
    public Integer statusCode;

    public PostCommentForPullRequestResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public PostCommentForPullRequestResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    public PostCommentForPullRequestResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
