"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import assetperformancedata as shared_assetperformancedata
from ..shared import insightlist as shared_insightlist
from ..shared import virtualmachinedetails as shared_virtualmachinedetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Asset:
    r"""An asset represents a resource in your environment. Asset types include virtual machines and databases."""
    
    assigned_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignedGroups'), 'exclude': lambda f: f is None }})
    r"""Output only. The list of groups that the asset is assigned to."""  
    attributes: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})
    r"""Generic asset attributes."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The timestamp when the asset was created."""  
    insight_list: Optional[shared_insightlist.InsightList] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insightList'), 'exclude': lambda f: f is None }})
    r"""Message containing insights list."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels as key value pairs."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The full name of the asset."""  
    performance_data: Optional[shared_assetperformancedata.AssetPerformanceData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('performanceData'), 'exclude': lambda f: f is None }})
    r"""Performance data for an asset."""  
    sources: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sources'), 'exclude': lambda f: f is None }})
    r"""Output only. The list of sources contributing to the asset."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The timestamp when the asset was last updated."""  
    virtual_machine_details: Optional[shared_virtualmachinedetails.VirtualMachineDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualMachineDetails'), 'exclude': lambda f: f is None }})
    r"""Details of a VirtualMachine."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssetInput:
    r"""An asset represents a resource in your environment. Asset types include virtual machines and databases."""
    
    attributes: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})
    r"""Generic asset attributes."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels as key value pairs."""  
    performance_data: Optional[shared_assetperformancedata.AssetPerformanceData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('performanceData'), 'exclude': lambda f: f is None }})
    r"""Performance data for an asset."""  
    virtual_machine_details: Optional[shared_virtualmachinedetails.VirtualMachineDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualMachineDetails'), 'exclude': lambda f: f is None }})
    r"""Details of a VirtualMachine."""  
    