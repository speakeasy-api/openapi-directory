/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Successful DELETE on Transaction resource
 */
export class Transaction extends SpeakeasyBase {
  /**
   * If false, PFM services will ignore this transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active: boolean;

  /**
   * Date considered by PFM services. It is used to change the month of a transaction, for example.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "application_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  applicationDate?: Date;

  /**
   * Date used by the bank for the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bdate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  bdate?: Date;

  /**
   * Datetime used by the bank
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bdatetime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  bdatetime?: Date;

  /**
   * Card number associated to the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "card" })
  card?: string;

  /**
   * If true, this transaction hasn't been yet debited
   */
  @SpeakeasyMetadata()
  @Expose({ name: "coming" })
  coming: boolean;

  /**
   * User comment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment?: string;

  /**
   * Commission taken on the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commission" })
  commission?: number;

  /**
   * Commission currency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commission_currency" })
  commissionCurrency?: Record<string, any>;

  /**
   * Counterparty
   */
  @SpeakeasyMetadata()
  @Expose({ name: "counterparty" })
  counterparty?: string;

  /**
   * Original country
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country?: string;

  /**
   * Debit date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  date: Date;

  /**
   * Date when the transaction has been seen
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_scraped" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateScraped: Date;

  /**
   * Datetime of the debit of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "datetime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  datetime?: Date;

  /**
   * If set, this transaction has been removed from the bank
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleted" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  deleted?: Date;

  /**
   * Gross value of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gross_value" })
  grossValue?: number;

  /**
   * ID of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * ID of the related account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id_account" })
  idAccount: number;

  /**
   * ID of the related category
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id_category" })
  idCategory?: number;

  /**
   * If the transaction is part of a cluster
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id_cluster" })
  idCluster?: number;

  /**
   * Last update of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_update" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdate?: Date;

  /**
   * Type of transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nature" })
  nature: string;

  /**
   * Original currency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "original_currency" })
  originalCurrency?: Record<string, any>;

  /**
   * Gross value in the original currency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "original_gross_value" })
  originalGrossValue?: number;

  /**
   * Value in the original currency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "original_value" })
  originalValue?: number;

  /**
   * Full label of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "original_wording" })
  originalWording: string;

  /**
   * Realization of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rdate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  rdate: Date;

  /**
   * Datetime of the realization of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rdatetime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  rdatetime?: Date;

  /**
   * Simplified label of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "simplified_wording" })
  simplifiedWording: string;

  /**
   * Internal state of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: string;

  /**
   * Do not use it
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stemmed_wording" })
  stemmedWording: string;

  /**
   * Value of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: number;

  /**
   * Value date of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vdate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  vdate?: Date;

  /**
   * Datetime of the Value of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vdatetime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  vdatetime?: Date;

  /**
   * Webid of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "webid" })
  webid?: string;

  /**
   * Label set by the user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wording" })
  wording?: string;
}
