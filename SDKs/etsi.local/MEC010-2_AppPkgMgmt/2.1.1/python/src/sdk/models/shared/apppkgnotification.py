"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import apppkg_notificationtype_enum as shared_apppkg_notificationtype_enum
from ..shared import apppkgnotification_links as shared_apppkgnotification_links
from ..shared import timestamp as shared_timestamp
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils

class AppPkgNotificationOperationalStateEnum(str, Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppPkgNotification:
    r"""'This data type represents an application package management notification for informing the subscribers about onboarding application package resources. The notification is triggered when a new application package is onboarded'"""
    
    links: shared_apppkgnotification_links.AppPkgNotificationLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links') }})
    r"""Links to resources related to this resource."""  
    app_d_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appDId') }})
    r"""Identifier of this MEC application descriptor. This attribute shall be globally unique."""  
    app_pkg_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appPkgId') }})
    r"""Identifier of the onboarded application package."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""''"""  
    notification_type: shared_apppkg_notificationtype_enum.AppPkgNotificationTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notificationType') }})
    r"""Discriminator for the different notification types"""  
    operational_state: AppPkgNotificationOperationalStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operationalState') }})  
    subscription_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionId') }})
    r"""Identifier of the subscription related to this notification."""  
    time_stamp: shared_timestamp.TimeStamp = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeStamp') }})  
    