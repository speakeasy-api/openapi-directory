/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * File system fileset templates.
 */
public class RootFilesetTemplate {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public RootFilesetTemplate(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Create a fileset template
     * Create a fileset template. The template is applied to the host.  Each template is a set of paths on the host.
     * 
     * A template uses full paths and wildcards to define the objects to include, exclude, and exempt from exclusion.
     * 
     * The **_exceptions_** value specifies paths that should not be excluded from the fileset by the **_exclude_** value.
     * 
     * Specify an array of full path descriptions for each property **_include_**, **_exclude_**, and **_exceptions_**.
     * 
     * Acceptable wildcard characters are.
     * + **_\*_** Single asterisk matches zero or more characters up to a path deliminator.
     * + **_\*\*_** Double asterisk matches zero or more characters.
     * 
     * The following rules apply to path descriptions.
     * + Accepts UTF-8 characters.
     * + Case sensitive.
     * + Forward slash character **_/_** is the path deliminator.
     * + Symbolic links must point to a subset of a non symbolic link path.
     * + Paths that do not start with **_/_** are modified to start with **_\*\* /_**.
     * + Paths that do not end with **_\*_** are modified to end with **_/\*\*_**.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateFilesetTemplateResponse createFilesetTemplate(org.openapis.openapi.models.shared.FilesetTemplateCreate request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/fileset_template");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateFilesetTemplateResponse res = new org.openapis.openapi.models.operations.CreateFilesetTemplateResponse(contentType, httpRes.statusCode()) {{
            filesetTemplateDetail = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FilesetTemplateDetail out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FilesetTemplateDetail.class);
                res.filesetTemplateDetail = out;
            }
        }

        return res;
    }

    /**
     * Delete a fileset template
     * Deletes the specfied fileset template. All associated filesets are deleted.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteFilesetTemplateResponse deleteFilesetTemplate(org.openapis.openapi.models.operations.DeleteFilesetTemplateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteFilesetTemplateRequest.class, baseUrl, "/fileset_template/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DeleteFilesetTemplateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteFilesetTemplateResponse res = new org.openapis.openapi.models.operations.DeleteFilesetTemplateResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Get information for a fileset template
     * Retrieve summary information for a specified fileset template.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetFilesetTemplateResponse getFilesetTemplate(org.openapis.openapi.models.operations.GetFilesetTemplateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetFilesetTemplateRequest.class, baseUrl, "/fileset_template/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetFilesetTemplateResponse res = new org.openapis.openapi.models.operations.GetFilesetTemplateResponse(contentType, httpRes.statusCode()) {{
            filesetTemplateDetail = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FilesetTemplateDetail out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FilesetTemplateDetail.class);
                res.filesetTemplateDetail = out;
            }
        }

        return res;
    }

    /**
     * Get summary information for all fileset templates
     * Retrieve summary information for all fileset templates, including: ID and name of the fileset template, fileset template creation timestamp, array of the included filepaths, array of the excluded filepaths.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.QueryFilesetTemplateResponse queryFilesetTemplate(org.openapis.openapi.models.operations.QueryFilesetTemplateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/fileset_template");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.QueryFilesetTemplateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.QueryFilesetTemplateResponse res = new org.openapis.openapi.models.operations.QueryFilesetTemplateResponse(contentType, httpRes.statusCode()) {{
            filesetTemplateDetailListResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FilesetTemplateDetailListResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FilesetTemplateDetailListResponse.class);
                res.filesetTemplateDetailListResponse = out;
            }
        }

        return res;
    }

    /**
     * Modify a fileset template
     * Modify the values of specified fileset template.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateFilesetTemplateResponse updateFilesetTemplate(org.openapis.openapi.models.operations.UpdateFilesetTemplateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateFilesetTemplateRequest.class, baseUrl, "/fileset_template/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "filesetTemplatePatch", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateFilesetTemplateResponse res = new org.openapis.openapi.models.operations.UpdateFilesetTemplateResponse(contentType, httpRes.statusCode()) {{
            filesetTemplateDetail = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FilesetTemplateDetail out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FilesetTemplateDetail.class);
                res.filesetTemplateDetail = out;
            }
        }

        return res;
    }
}