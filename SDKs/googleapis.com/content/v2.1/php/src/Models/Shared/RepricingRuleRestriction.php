<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * RepricingRuleRestriction - Definition of a rule restriction. At least one of the following needs to be true: (1) use_auto_pricing_min_price is true (2) floor.price_delta exists (3) floor.percentage_delta exists If floor.price_delta and floor.percentage_delta are both set on a rule, the highest value will be chosen by the Repricer. In other words, for a product with a price of $50, if the `floor.percentage_delta` is "-10" and the floor.price_delta is "-12", the offer price will only be lowered $5 (10% lower than the original offer price).
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class RepricingRuleRestriction
{
    /**
     * Definition of a boundary.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RepricingRuleRestrictionBoundary $floor
     */
	#[\JMS\Serializer\Annotation\SerializedName('floor')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\RepricingRuleRestrictionBoundary')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RepricingRuleRestrictionBoundary $floor = null;
    
    /**
     * If true, use the AUTO_PRICING_MIN_PRICE offer attribute as the lower bound of the rule. If use_auto_pricing_min_price is true, then only offers with `AUTO_PRICING_MIN_PRICE` existing on the offer will get Repricer treatment, even if a floor value is set on the rule. Also, if use_auto_pricing_min_price is true, the floor restriction will be ignored.
     * 
     * @var ?bool $useAutoPricingMinPrice
     */
	#[\JMS\Serializer\Annotation\SerializedName('useAutoPricingMinPrice')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $useAutoPricingMinPrice = null;
    
	public function __construct()
	{
		$this->floor = null;
		$this->useAutoPricingMinPrice = null;
	}
}
