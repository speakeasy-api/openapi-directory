"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import source as shared_source
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OfficeLevelsEnum(str, Enum):
    INTERNATIONAL = 'international'
    COUNTRY = 'country'
    ADMINISTRATIVE_AREA1 = 'administrativeArea1'
    REGIONAL = 'regional'
    ADMINISTRATIVE_AREA2 = 'administrativeArea2'
    LOCALITY = 'locality'
    SUB_LOCALITY1 = 'subLocality1'
    SUB_LOCALITY2 = 'subLocality2'
    SPECIAL = 'special'

class OfficeRolesEnum(str, Enum):
    HEAD_OF_STATE = 'headOfState'
    HEAD_OF_GOVERNMENT = 'headOfGovernment'
    DEPUTY_HEAD_OF_GOVERNMENT = 'deputyHeadOfGovernment'
    GOVERNMENT_OFFICER = 'governmentOfficer'
    EXECUTIVE_COUNCIL = 'executiveCouncil'
    LEGISLATOR_UPPER_BODY = 'legislatorUpperBody'
    LEGISLATOR_LOWER_BODY = 'legislatorLowerBody'
    HIGHEST_COURT_JUDGE = 'highestCourtJudge'
    JUDGE = 'judge'
    SCHOOL_BOARD = 'schoolBoard'
    SPECIAL_PURPOSE_OFFICER = 'specialPurposeOfficer'
    OTHER_ROLE = 'otherRole'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Office:
    r"""Information about an Office held by one or more Officials."""
    
    division_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('divisionId'), 'exclude': lambda f: f is None }})
    r"""The OCD ID of the division with which this office is associated."""  
    levels: Optional[list[OfficeLevelsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('levels'), 'exclude': lambda f: f is None }})
    r"""The levels of government of which this office is part. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at \\"locality\\" level, but also effectively at both \\"administrative-area-2\\" and \\"administrative-area-1\\"."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The human-readable name of the office."""  
    official_indices: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('officialIndices'), 'exclude': lambda f: f is None }})
    r"""List of indices in the officials array of people who presently hold this office."""  
    roles: Optional[list[OfficeRolesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roles'), 'exclude': lambda f: f is None }})
    r"""The roles which this office fulfills. Roles are not meant to be exhaustive, or to exactly specify the entire set of responsibilities of a given office, but are meant to be rough categories that are useful for general selection from or sorting of a list of offices."""  
    sources: Optional[list[shared_source.Source]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sources'), 'exclude': lambda f: f is None }})
    r"""A list of sources for this office. If multiple sources are listed, the data has been aggregated from those sources."""  
    