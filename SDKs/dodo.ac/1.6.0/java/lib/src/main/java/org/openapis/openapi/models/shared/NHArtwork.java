/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * NHArtwork - A JSON object describing the artwork.
 */
public class NHArtwork {
    /**
     * The name of the real-life analog to the artwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("art_name")
    public String artName;

    public NHArtwork withArtName(String artName) {
        this.artName = artName;
        return this;
    }
    
    /**
     * The art style of the artwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("art_style")
    public String artStyle;

    public NHArtwork withArtStyle(String artStyle) {
        this.artStyle = artStyle;
        return this;
    }
    
    /**
     * The type of artwork (either a painting or statue).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("art_type")
    public NHArtworkArtTypeEnum artType;

    public NHArtwork withArtType(NHArtworkArtTypeEnum artType) {
        this.artType = artType;
        return this;
    }
    
    /**
     * The author of the real-life analog to the artwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author")
    public String author;

    public NHArtwork withAuthor(String author) {
        this.author = author;
        return this;
    }
    
    /**
     * The availability of the artwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availability")
    public String availability;

    public NHArtwork withAvailability(String availability) {
        this.availability = availability;
        return this;
    }
    
    /**
     * The number of Bells the artwork may be purchased for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buy")
    public Long buy;

    public NHArtwork withBuy(Long buy) {
        this.buy = buy;
        return this;
    }
    
    /**
     * Information about the fake version of the artwork. If there is no fake, `fake_info`'s value will be `null`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fake_info")
    public NHArtworkFakeInfo fakeInfo;

    public NHArtwork withFakeInfo(NHArtworkFakeInfo fakeInfo) {
        this.fakeInfo = fakeInfo;
        return this;
    }
    
    /**
     * Whether the artwork has a fake or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_fake")
    public Boolean hasFake;

    public NHArtwork withHasFake(Boolean hasFake) {
        this.hasFake = hasFake;
        return this;
    }
    
    /**
     * The length of the artwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("length")
    public Float length;

    public NHArtwork withLength(Float length) {
        this.length = length;
        return this;
    }
    
    /**
     * Name of the artwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public NHArtwork withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Information about the genuine version of the artwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("real_info")
    public NHArtworkRealInfo realInfo;

    public NHArtwork withRealInfo(NHArtworkRealInfo realInfo) {
        this.realInfo = realInfo;
        return this;
    }
    
    /**
     * The number of Bells the artwork can be sold to Nook's store for, when it is genuine.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sell")
    public Long sell;

    public NHArtwork withSell(Long sell) {
        this.sell = sell;
        return this;
    }
    
    /**
     * Link to the respective Nookipedia article.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public NHArtwork withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * The width of the artwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    public Float width;

    public NHArtwork withWidth(Float width) {
        this.width = width;
        return this;
    }
    
    /**
     * The year that the real-life analog was made. May be an exact year, an estimate ("circa"), or a range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("year")
    public String year;

    public NHArtwork withYear(String year) {
        this.year = year;
        return this;
    }
    
    public NHArtwork(){}
}
