// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CreateDeploymentResponseDeploymentStatusEnum - The status of the deployment: PENDING, FAILED, or SUCCEEDED.
type CreateDeploymentResponseDeploymentStatusEnum string

const (
	CreateDeploymentResponseDeploymentStatusEnumPending  CreateDeploymentResponseDeploymentStatusEnum = "PENDING"
	CreateDeploymentResponseDeploymentStatusEnumFailed   CreateDeploymentResponseDeploymentStatusEnum = "FAILED"
	CreateDeploymentResponseDeploymentStatusEnumDeployed CreateDeploymentResponseDeploymentStatusEnum = "DEPLOYED"
)

func (e *CreateDeploymentResponseDeploymentStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PENDING":
		fallthrough
	case "FAILED":
		fallthrough
	case "DEPLOYED":
		*e = CreateDeploymentResponseDeploymentStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentResponseDeploymentStatusEnum: %s", s)
	}
}

// CreateDeploymentResponse - Success
type CreateDeploymentResponse struct {
	AutoDeployed            *bool                                         `json:"AutoDeployed,omitempty"`
	CreatedDate             *time.Time                                    `json:"CreatedDate,omitempty"`
	DeploymentID            *string                                       `json:"DeploymentId,omitempty"`
	DeploymentStatus        *CreateDeploymentResponseDeploymentStatusEnum `json:"DeploymentStatus,omitempty"`
	DeploymentStatusMessage *string                                       `json:"DeploymentStatusMessage,omitempty"`
	Description             *string                                       `json:"Description,omitempty"`
}
