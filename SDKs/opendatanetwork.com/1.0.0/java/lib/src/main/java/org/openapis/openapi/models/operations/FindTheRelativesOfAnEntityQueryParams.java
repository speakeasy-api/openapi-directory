/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class FindTheRelativesOfAnEntityQueryParams {
    /**
     * The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be
     * used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=app_token")
    public String appToken;
    public FindTheRelativesOfAnEntityQueryParams withAppToken(String appToken) {
        this.appToken = appToken;
        return this;
    }
    
    /**
     * ID of the target entity.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=entity_id")
    public String entityId;
    public FindTheRelativesOfAnEntityQueryParams withEntityId(String entityId) {
        this.entityId = entityId;
        return this;
    }
    
    /**
     * Maximum number of entities in each group.
     * Must be an integer from 1 to 1000.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Double limit;
    public FindTheRelativesOfAnEntityQueryParams withLimit(Double limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * If this parameter is included, only entities with data for the given
     * variable will be returned. Note that this may cause the number of
     * entities returned to be less than the specified `limit`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=variable_id")
    public String variableId;
    public FindTheRelativesOfAnEntityQueryParams withVariableId(String variableId) {
        this.variableId = variableId;
        return this;
    }
    
}
