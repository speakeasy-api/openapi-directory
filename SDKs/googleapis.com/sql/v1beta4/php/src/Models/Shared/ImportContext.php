<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ImportContext - Database instance import context.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ImportContext
{
    /**
     * Import parameters specific to SQL Server .BAK files
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ImportContextBakImportOptions $bakImportOptions
     */
	#[\JMS\Serializer\Annotation\SerializedName('bakImportOptions')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ImportContextBakImportOptions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ImportContextBakImportOptions $bakImportOptions = null;
    
    /**
     * Options for importing data as CSV.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ImportContextCsvImportOptions $csvImportOptions
     */
	#[\JMS\Serializer\Annotation\SerializedName('csvImportOptions')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ImportContextCsvImportOptions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ImportContextCsvImportOptions $csvImportOptions = null;
    
    /**
     * The target database for the import. If `fileType` is `SQL`, this field is required only if the import file does not specify a database, and is overridden by any database specification in the import file. If `fileType` is `CSV`, one database must be specified.
     * 
     * @var ?string $database
     */
	#[\JMS\Serializer\Annotation\SerializedName('database')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $database = null;
    
    /**
     * The file type for the specified uri. * `SQL`: The file contains SQL statements. * `CSV`: The file contains CSV data. * `BAK`: The file contains backup data for a SQL Server instance.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ImportContextFileTypeEnum $fileType
     */
	#[\JMS\Serializer\Annotation\SerializedName('fileType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ImportContextFileTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ImportContextFileTypeEnum $fileType = null;
    
    /**
     * The PostgreSQL user for this import operation. PostgreSQL instances only.
     * 
     * @var ?string $importUser
     */
	#[\JMS\Serializer\Annotation\SerializedName('importUser')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $importUser = null;
    
    /**
     * This is always `sql#importContext`.
     * 
     * @var ?string $kind
     */
	#[\JMS\Serializer\Annotation\SerializedName('kind')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $kind = null;
    
    /**
     * Path to the import file in Cloud Storage, in the form `gs://bucketName/fileName`. Compressed gzip files (.gz) are supported when `fileType` is `SQL`. The instance must have write permissions to the bucket and read access to the file.
     * 
     * @var ?string $uri
     */
	#[\JMS\Serializer\Annotation\SerializedName('uri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $uri = null;
    
	public function __construct()
	{
		$this->bakImportOptions = null;
		$this->csvImportOptions = null;
		$this->database = null;
		$this->fileType = null;
		$this->importUser = null;
		$this->kind = null;
		$this->uri = null;
	}
}
