<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new instance in the specified region. Returns a long running operation which contains an instance on completion. While the long running operation is in progress, any call to `GetInstance` returns an instance in state `CREATING`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesCreateResponse
     */
	public function remotebuildexecutionProjectsInstancesCreate(
        \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/instances', \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleDevtoolsRemotebuildexecutionAdminV1alphaCreateInstanceRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists instances in a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesListResponse
     */
	public function remotebuildexecutionProjectsInstancesList(
        \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/instances', \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleDevtoolsRemotebuildexecutionAdminV1alphaListInstancesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleDevtoolsRemotebuildexecutionAdminV1alphaListInstancesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends a test notification to the specified instance. Returns a `google.protobuf.Empty` on success.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesTestNotifyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesTestNotifySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesTestNotifyResponse
     */
	public function remotebuildexecutionProjectsInstancesTestNotify(
        \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesTestNotifyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesTestNotifySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesTestNotifyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}:testNotify', \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesTestNotifyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesTestNotifyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesTestNotifyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new worker pool with a specified size and configuration. Returns a long running operation which contains a worker pool on completion. While the long running operation is in progress, any call to `GetWorkerPool` returns a worker pool in state `CREATING`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsCreateResponse
     */
	public function remotebuildexecutionProjectsInstancesWorkerpoolsCreate(
        \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/workerpools', \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleDevtoolsRemotebuildexecutionAdminV1alphaCreateWorkerPoolRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified worker pool. Returns a long running operation, which contains a `google.protobuf.Empty` response on completion. While the long running operation is in progress, any call to `GetWorkerPool` returns a worker pool in state `DELETING`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsDeleteResponse
     */
	public function remotebuildexecutionProjectsInstancesWorkerpoolsDelete(
        \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}', \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists worker pools in an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsListResponse
     */
	public function remotebuildexecutionProjectsInstancesWorkerpoolsList(
        \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/workerpools', \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing worker pool with a specified size and/or configuration. Returns a long running operation, which contains a worker pool on completion. While the long running operation is in progress, any call to `GetWorkerPool` returns a worker pool in state `UPDATING`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsPatchResponse
     */
	public function remotebuildexecutionProjectsInstancesWorkerpoolsPatch(
        \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}', \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleDevtoolsRemotebuildexecutionAdminV1alphaUpdateWorkerPoolRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsInstancesWorkerpoolsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsOperationsGetResponse
     */
	public function remotebuildexecutionProjectsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}', \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemotebuildexecutionProjectsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
}