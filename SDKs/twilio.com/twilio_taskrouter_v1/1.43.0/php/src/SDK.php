<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const CREATE_ACTIVITY_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const CREATE_TASK_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const CREATE_TASK_CHANNEL_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const CREATE_TASK_QUEUE_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const CREATE_WORKER_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const CREATE_WORKFLOW_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const CREATE_WORKSPACE_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const DELETE_ACTIVITY_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const DELETE_TASK_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const DELETE_TASK_CHANNEL_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const DELETE_TASK_QUEUE_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const DELETE_WORKER_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const DELETE_WORKFLOW_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const DELETE_WORKSPACE_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_ACTIVITY_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_EVENT_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_TASK_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_TASK_CHANNEL_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_TASK_QUEUE_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_TASK_QUEUE_CUMULATIVE_STATISTICS_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_TASK_QUEUE_REAL_TIME_STATISTICS_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_TASK_QUEUE_STATISTICS_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_TASK_RESERVATION_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_WORKER_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_WORKER_CHANNEL_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_WORKER_INSTANCE_STATISTICS_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_WORKER_RESERVATION_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_WORKER_STATISTICS_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_WORKERS_CUMULATIVE_STATISTICS_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_WORKERS_REAL_TIME_STATISTICS_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_WORKFLOW_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_WORKFLOW_CUMULATIVE_STATISTICS_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_WORKFLOW_REAL_TIME_STATISTICS_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_WORKFLOW_STATISTICS_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_WORKSPACE_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_WORKSPACE_CUMULATIVE_STATISTICS_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_WORKSPACE_REAL_TIME_STATISTICS_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const FETCH_WORKSPACE_STATISTICS_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const LIST_ACTIVITY_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const LIST_EVENT_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const LIST_TASK_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const LIST_TASK_CHANNEL_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const LIST_TASK_QUEUE_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const LIST_TASK_QUEUES_STATISTICS_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const LIST_TASK_RESERVATION_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const LIST_WORKER_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const LIST_WORKER_CHANNEL_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const LIST_WORKER_RESERVATION_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const LIST_WORKFLOW_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const LIST_WORKSPACE_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const UPDATE_ACTIVITY_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const UPDATE_TASK_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const UPDATE_TASK_CHANNEL_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const UPDATE_TASK_QUEUE_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const UPDATE_TASK_RESERVATION_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const UPDATE_WORKER_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const UPDATE_WORKER_CHANNEL_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const UPDATE_WORKER_RESERVATION_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const UPDATE_WORKFLOW_SERVERS = [
		'https://taskrouter.twilio.com',
	];
	
	public const UPDATE_WORKSPACE_SERVERS = [
		'https://taskrouter.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * createActivity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateActivityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateActivitySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateActivityResponse
     */
	public function createActivity(
        \OpenAPI\OpenAPI\Models\Operations\CreateActivityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateActivitySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateActivityResponse
    {
        $baseUrl = SDK::CREATE_ACTIVITY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Activities', \OpenAPI\OpenAPI\Models\Operations\CreateActivityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateActivityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceActivity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceActivity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createTask
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTaskSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTaskResponse
     */
	public function createTask(
        \OpenAPI\OpenAPI\Models\Operations\CreateTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTaskSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTaskResponse
    {
        $baseUrl = SDK::CREATE_TASK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Tasks', \OpenAPI\OpenAPI\Models\Operations\CreateTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceTask = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceTask', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createTaskChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTaskChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTaskChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTaskChannelResponse
     */
	public function createTaskChannel(
        \OpenAPI\OpenAPI\Models\Operations\CreateTaskChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTaskChannelSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTaskChannelResponse
    {
        $baseUrl = SDK::CREATE_TASK_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/TaskChannels', \OpenAPI\OpenAPI\Models\Operations\CreateTaskChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTaskChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceTaskChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceTaskChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createTaskQueue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTaskQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTaskQueueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTaskQueueResponse
     */
	public function createTaskQueue(
        \OpenAPI\OpenAPI\Models\Operations\CreateTaskQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTaskQueueSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTaskQueueResponse
    {
        $baseUrl = SDK::CREATE_TASK_QUEUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/TaskQueues', \OpenAPI\OpenAPI\Models\Operations\CreateTaskQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTaskQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceTaskQueue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceTaskQueue', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createWorker
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWorkerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWorkerSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateWorkerResponse
     */
	public function createWorker(
        \OpenAPI\OpenAPI\Models\Operations\CreateWorkerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateWorkerSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateWorkerResponse
    {
        $baseUrl = SDK::CREATE_WORKER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workers', \OpenAPI\OpenAPI\Models\Operations\CreateWorkerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateWorkerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorker = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorker', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createWorkflow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWorkflowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWorkflowSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateWorkflowResponse
     */
	public function createWorkflow(
        \OpenAPI\OpenAPI\Models\Operations\CreateWorkflowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateWorkflowSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateWorkflowResponse
    {
        $baseUrl = SDK::CREATE_WORKFLOW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workflows', \OpenAPI\OpenAPI\Models\Operations\CreateWorkflowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateWorkflowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkflow = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkflow', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createWorkspace
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWorkspaceCreateWorkspaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWorkspaceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateWorkspaceResponse
     */
	public function createWorkspace(
        \OpenAPI\OpenAPI\Models\Operations\CreateWorkspaceCreateWorkspaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateWorkspaceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateWorkspaceResponse
    {
        $baseUrl = SDK::CREATE_WORKSPACE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateWorkspaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1Workspace = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1Workspace', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deleteActivity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteActivityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteActivitySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteActivityResponse
     */
	public function deleteActivity(
        \OpenAPI\OpenAPI\Models\Operations\DeleteActivityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteActivitySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteActivityResponse
    {
        $baseUrl = SDK::DELETE_ACTIVITY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteActivityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteActivityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteTask
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTaskSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTaskResponse
     */
	public function deleteTask(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTaskSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTaskResponse
    {
        $baseUrl = SDK::DELETE_TASK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteTaskChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTaskChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTaskChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTaskChannelResponse
     */
	public function deleteTaskChannel(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTaskChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTaskChannelSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTaskChannelResponse
    {
        $baseUrl = SDK::DELETE_TASK_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteTaskChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTaskChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteTaskQueue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTaskQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTaskQueueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTaskQueueResponse
     */
	public function deleteTaskQueue(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTaskQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTaskQueueSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTaskQueueResponse
    {
        $baseUrl = SDK::DELETE_TASK_QUEUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteTaskQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTaskQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteWorker
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkerSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWorkerResponse
     */
	public function deleteWorker(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkerSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWorkerResponse
    {
        $baseUrl = SDK::DELETE_WORKER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteWorkerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWorkerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteWorkflow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkflowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkflowSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWorkflowResponse
     */
	public function deleteWorkflow(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkflowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkflowSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWorkflowResponse
    {
        $baseUrl = SDK::DELETE_WORKFLOW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteWorkflowRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWorkflowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteWorkspace
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceResponse
     */
	public function deleteWorkspace(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceResponse
    {
        $baseUrl = SDK::DELETE_WORKSPACE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * fetchActivity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchActivityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchActivitySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchActivityResponse
     */
	public function fetchActivity(
        \OpenAPI\OpenAPI\Models\Operations\FetchActivityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchActivitySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchActivityResponse
    {
        $baseUrl = SDK::FETCH_ACTIVITY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchActivityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchActivityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceActivity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceActivity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchEvent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEventRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEventSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchEventResponse
     */
	public function fetchEvent(
        \OpenAPI\OpenAPI\Models\Operations\FetchEventRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchEventSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchEventResponse
    {
        $baseUrl = SDK::FETCH_EVENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Events/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceEvent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceEvent', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchTask
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTaskResponse
     */
	public function fetchTask(
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTaskResponse
    {
        $baseUrl = SDK::FETCH_TASK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceTask = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceTask', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchTaskChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTaskChannelResponse
     */
	public function fetchTaskChannel(
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskChannelSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTaskChannelResponse
    {
        $baseUrl = SDK::FETCH_TASK_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchTaskChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTaskChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceTaskChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceTaskChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchTaskQueue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueResponse
     */
	public function fetchTaskQueue(
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueResponse
    {
        $baseUrl = SDK::FETCH_TASK_QUEUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceTaskQueue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceTaskQueue', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchTaskQueueCumulativeStatistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueCumulativeStatisticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueCumulativeStatisticsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueCumulativeStatisticsResponse
     */
	public function fetchTaskQueueCumulativeStatistics(
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueCumulativeStatisticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueCumulativeStatisticsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueCumulativeStatisticsResponse
    {
        $baseUrl = SDK::FETCH_TASK_QUEUE_CUMULATIVE_STATISTICS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/CumulativeStatistics', \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueCumulativeStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueCumulativeStatisticsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueCumulativeStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchTaskQueueRealTimeStatistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueRealTimeStatisticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueRealTimeStatisticsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueRealTimeStatisticsResponse
     */
	public function fetchTaskQueueRealTimeStatistics(
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueRealTimeStatisticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueRealTimeStatisticsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueRealTimeStatisticsResponse
    {
        $baseUrl = SDK::FETCH_TASK_QUEUE_REAL_TIME_STATISTICS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/RealTimeStatistics', \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueRealTimeStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueRealTimeStatisticsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueRealTimeStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchTaskQueueStatistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueStatisticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueStatisticsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueStatisticsResponse
     */
	public function fetchTaskQueueStatistics(
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueStatisticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueStatisticsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueStatisticsResponse
    {
        $baseUrl = SDK::FETCH_TASK_QUEUE_STATISTICS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/Statistics', \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueStatisticsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTaskQueueStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceTaskQueueTaskQueueStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchTaskReservation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskReservationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTaskReservationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTaskReservationResponse
     */
	public function fetchTaskReservation(
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskReservationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTaskReservationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTaskReservationResponse
    {
        $baseUrl = SDK::FETCH_TASK_RESERVATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchTaskReservationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTaskReservationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceTaskTaskReservation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceTaskTaskReservation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWorker
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkerSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWorkerResponse
     */
	public function fetchWorker(
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkerSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWorkerResponse
    {
        $baseUrl = SDK::FETCH_WORKER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchWorkerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWorkerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorker = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorker', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWorkerChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkerChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkerChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWorkerChannelResponse
     */
	public function fetchWorkerChannel(
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkerChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkerChannelSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWorkerChannelResponse
    {
        $baseUrl = SDK::FETCH_WORKER_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchWorkerChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWorkerChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkerWorkerChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkerWorkerChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWorkerInstanceStatistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkerInstanceStatisticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkerInstanceStatisticsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWorkerInstanceStatisticsResponse
     */
	public function fetchWorkerInstanceStatistics(
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkerInstanceStatisticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkerInstanceStatisticsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWorkerInstanceStatisticsResponse
    {
        $baseUrl = SDK::FETCH_WORKER_INSTANCE_STATISTICS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Statistics', \OpenAPI\OpenAPI\Models\Operations\FetchWorkerInstanceStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchWorkerInstanceStatisticsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWorkerInstanceStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkerWorkerInstanceStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkerWorkerInstanceStatistics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWorkerReservation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkerReservationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkerReservationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWorkerReservationResponse
     */
	public function fetchWorkerReservation(
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkerReservationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkerReservationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWorkerReservationResponse
    {
        $baseUrl = SDK::FETCH_WORKER_RESERVATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchWorkerReservationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWorkerReservationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkerWorkerReservation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkerWorkerReservation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWorkerStatistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkerStatisticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkerStatisticsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWorkerStatisticsResponse
     */
	public function fetchWorkerStatistics(
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkerStatisticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkerStatisticsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWorkerStatisticsResponse
    {
        $baseUrl = SDK::FETCH_WORKER_STATISTICS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workers/Statistics', \OpenAPI\OpenAPI\Models\Operations\FetchWorkerStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchWorkerStatisticsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWorkerStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkerWorkerStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkerWorkerStatistics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWorkersCumulativeStatistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkersCumulativeStatisticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkersCumulativeStatisticsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWorkersCumulativeStatisticsResponse
     */
	public function fetchWorkersCumulativeStatistics(
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkersCumulativeStatisticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkersCumulativeStatisticsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWorkersCumulativeStatisticsResponse
    {
        $baseUrl = SDK::FETCH_WORKERS_CUMULATIVE_STATISTICS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workers/CumulativeStatistics', \OpenAPI\OpenAPI\Models\Operations\FetchWorkersCumulativeStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchWorkersCumulativeStatisticsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWorkersCumulativeStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkerWorkersCumulativeStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkerWorkersCumulativeStatistics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWorkersRealTimeStatistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkersRealTimeStatisticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkersRealTimeStatisticsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWorkersRealTimeStatisticsResponse
     */
	public function fetchWorkersRealTimeStatistics(
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkersRealTimeStatisticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkersRealTimeStatisticsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWorkersRealTimeStatisticsResponse
    {
        $baseUrl = SDK::FETCH_WORKERS_REAL_TIME_STATISTICS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workers/RealTimeStatistics', \OpenAPI\OpenAPI\Models\Operations\FetchWorkersRealTimeStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchWorkersRealTimeStatisticsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWorkersRealTimeStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkerWorkersRealTimeStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWorkflow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowResponse
     */
	public function fetchWorkflow(
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowResponse
    {
        $baseUrl = SDK::FETCH_WORKFLOW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkflow = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkflow', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWorkflowCumulativeStatistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowCumulativeStatisticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowCumulativeStatisticsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowCumulativeStatisticsResponse
     */
	public function fetchWorkflowCumulativeStatistics(
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowCumulativeStatisticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowCumulativeStatisticsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowCumulativeStatisticsResponse
    {
        $baseUrl = SDK::FETCH_WORKFLOW_CUMULATIVE_STATISTICS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/CumulativeStatistics', \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowCumulativeStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchWorkflowCumulativeStatisticsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowCumulativeStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWorkflowRealTimeStatistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowRealTimeStatisticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowRealTimeStatisticsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowRealTimeStatisticsResponse
     */
	public function fetchWorkflowRealTimeStatistics(
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowRealTimeStatisticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowRealTimeStatisticsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowRealTimeStatisticsResponse
    {
        $baseUrl = SDK::FETCH_WORKFLOW_REAL_TIME_STATISTICS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/RealTimeStatistics', \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowRealTimeStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchWorkflowRealTimeStatisticsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowRealTimeStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWorkflowStatistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowStatisticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowStatisticsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowStatisticsResponse
     */
	public function fetchWorkflowStatistics(
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowStatisticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowStatisticsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowStatisticsResponse
    {
        $baseUrl = SDK::FETCH_WORKFLOW_STATISTICS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/Statistics', \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchWorkflowStatisticsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWorkflowStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkflowWorkflowStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkflowWorkflowStatistics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWorkspace
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceResponse
     */
	public function fetchWorkspace(
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceResponse
    {
        $baseUrl = SDK::FETCH_WORKSPACE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1Workspace = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1Workspace', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWorkspaceCumulativeStatistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceCumulativeStatisticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceCumulativeStatisticsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceCumulativeStatisticsResponse
     */
	public function fetchWorkspaceCumulativeStatistics(
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceCumulativeStatisticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceCumulativeStatisticsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceCumulativeStatisticsResponse
    {
        $baseUrl = SDK::FETCH_WORKSPACE_CUMULATIVE_STATISTICS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/CumulativeStatistics', \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceCumulativeStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceCumulativeStatisticsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceCumulativeStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkspaceCumulativeStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkspaceCumulativeStatistics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWorkspaceRealTimeStatistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceRealTimeStatisticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceRealTimeStatisticsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceRealTimeStatisticsResponse
     */
	public function fetchWorkspaceRealTimeStatistics(
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceRealTimeStatisticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceRealTimeStatisticsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceRealTimeStatisticsResponse
    {
        $baseUrl = SDK::FETCH_WORKSPACE_REAL_TIME_STATISTICS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/RealTimeStatistics', \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceRealTimeStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceRealTimeStatisticsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceRealTimeStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkspaceRealTimeStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkspaceRealTimeStatistics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWorkspaceStatistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceStatisticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceStatisticsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceStatisticsResponse
     */
	public function fetchWorkspaceStatistics(
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceStatisticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceStatisticsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceStatisticsResponse
    {
        $baseUrl = SDK::FETCH_WORKSPACE_STATISTICS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Statistics', \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceStatisticsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWorkspaceStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkspaceStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkspaceStatistics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listActivity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListActivityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListActivitySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListActivityResponse
     */
	public function listActivity(
        \OpenAPI\OpenAPI\Models\Operations\ListActivityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListActivitySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListActivityResponse
    {
        $baseUrl = SDK::LIST_ACTIVITY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Activities', \OpenAPI\OpenAPI\Models\Operations\ListActivityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListActivityRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListActivityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listActivityResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListActivityListActivityResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listEvent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEventRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEventSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEventResponse
     */
	public function listEvent(
        \OpenAPI\OpenAPI\Models\Operations\ListEventRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListEventSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEventResponse
    {
        $baseUrl = SDK::LIST_EVENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Events', \OpenAPI\OpenAPI\Models\Operations\ListEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEventRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEventResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListEventListEventResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listTask
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTaskSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTaskResponse
     */
	public function listTask(
        \OpenAPI\OpenAPI\Models\Operations\ListTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListTaskSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTaskResponse
    {
        $baseUrl = SDK::LIST_TASK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Tasks', \OpenAPI\OpenAPI\Models\Operations\ListTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTaskRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTaskResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListTaskListTaskResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listTaskChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTaskChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTaskChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTaskChannelResponse
     */
	public function listTaskChannel(
        \OpenAPI\OpenAPI\Models\Operations\ListTaskChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListTaskChannelSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTaskChannelResponse
    {
        $baseUrl = SDK::LIST_TASK_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/TaskChannels', \OpenAPI\OpenAPI\Models\Operations\ListTaskChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTaskChannelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTaskChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTaskChannelResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListTaskChannelListTaskChannelResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listTaskQueue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTaskQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTaskQueueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTaskQueueResponse
     */
	public function listTaskQueue(
        \OpenAPI\OpenAPI\Models\Operations\ListTaskQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListTaskQueueSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTaskQueueResponse
    {
        $baseUrl = SDK::LIST_TASK_QUEUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/TaskQueues', \OpenAPI\OpenAPI\Models\Operations\ListTaskQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTaskQueueRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTaskQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTaskQueueResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListTaskQueueListTaskQueueResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listTaskQueuesStatistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTaskQueuesStatisticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTaskQueuesStatisticsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTaskQueuesStatisticsResponse
     */
	public function listTaskQueuesStatistics(
        \OpenAPI\OpenAPI\Models\Operations\ListTaskQueuesStatisticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListTaskQueuesStatisticsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTaskQueuesStatisticsResponse
    {
        $baseUrl = SDK::LIST_TASK_QUEUES_STATISTICS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/TaskQueues/Statistics', \OpenAPI\OpenAPI\Models\Operations\ListTaskQueuesStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTaskQueuesStatisticsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTaskQueuesStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTaskQueuesStatisticsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListTaskQueuesStatisticsListTaskQueuesStatisticsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listTaskReservation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTaskReservationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTaskReservationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTaskReservationResponse
     */
	public function listTaskReservation(
        \OpenAPI\OpenAPI\Models\Operations\ListTaskReservationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListTaskReservationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTaskReservationResponse
    {
        $baseUrl = SDK::LIST_TASK_RESERVATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations', \OpenAPI\OpenAPI\Models\Operations\ListTaskReservationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTaskReservationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTaskReservationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTaskReservationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListTaskReservationListTaskReservationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listWorker
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWorkerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWorkerSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListWorkerResponse
     */
	public function listWorker(
        \OpenAPI\OpenAPI\Models\Operations\ListWorkerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListWorkerSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListWorkerResponse
    {
        $baseUrl = SDK::LIST_WORKER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workers', \OpenAPI\OpenAPI\Models\Operations\ListWorkerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListWorkerRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListWorkerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkerResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListWorkerListWorkerResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listWorkerChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWorkerChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWorkerChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListWorkerChannelResponse
     */
	public function listWorkerChannel(
        \OpenAPI\OpenAPI\Models\Operations\ListWorkerChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListWorkerChannelSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListWorkerChannelResponse
    {
        $baseUrl = SDK::LIST_WORKER_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels', \OpenAPI\OpenAPI\Models\Operations\ListWorkerChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListWorkerChannelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListWorkerChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkerChannelResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListWorkerChannelListWorkerChannelResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listWorkerReservation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWorkerReservationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWorkerReservationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListWorkerReservationResponse
     */
	public function listWorkerReservation(
        \OpenAPI\OpenAPI\Models\Operations\ListWorkerReservationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListWorkerReservationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListWorkerReservationResponse
    {
        $baseUrl = SDK::LIST_WORKER_RESERVATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations', \OpenAPI\OpenAPI\Models\Operations\ListWorkerReservationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListWorkerReservationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListWorkerReservationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkerReservationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListWorkerReservationListWorkerReservationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listWorkflow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWorkflowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWorkflowSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListWorkflowResponse
     */
	public function listWorkflow(
        \OpenAPI\OpenAPI\Models\Operations\ListWorkflowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListWorkflowSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListWorkflowResponse
    {
        $baseUrl = SDK::LIST_WORKFLOW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workflows', \OpenAPI\OpenAPI\Models\Operations\ListWorkflowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListWorkflowRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListWorkflowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkflowResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListWorkflowListWorkflowResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listWorkspace
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWorkspaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWorkspaceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListWorkspaceResponse
     */
	public function listWorkspace(
        \OpenAPI\OpenAPI\Models\Operations\ListWorkspaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListWorkspaceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListWorkspaceResponse
    {
        $baseUrl = SDK::LIST_WORKSPACE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListWorkspaceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListWorkspaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkspaceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListWorkspaceListWorkspaceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateActivity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateActivityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateActivitySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateActivityResponse
     */
	public function updateActivity(
        \OpenAPI\OpenAPI\Models\Operations\UpdateActivityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateActivitySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateActivityResponse
    {
        $baseUrl = SDK::UPDATE_ACTIVITY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateActivityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateActivityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceActivity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceActivity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateTask
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTaskSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTaskResponse
     */
	public function updateTask(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateTaskSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTaskResponse
    {
        $baseUrl = SDK::UPDATE_TASK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceTask = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceTask', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateTaskChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTaskChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTaskChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTaskChannelResponse
     */
	public function updateTaskChannel(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTaskChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateTaskChannelSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTaskChannelResponse
    {
        $baseUrl = SDK::UPDATE_TASK_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateTaskChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTaskChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceTaskChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceTaskChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateTaskQueue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTaskQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTaskQueueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTaskQueueResponse
     */
	public function updateTaskQueue(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTaskQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateTaskQueueSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTaskQueueResponse
    {
        $baseUrl = SDK::UPDATE_TASK_QUEUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateTaskQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTaskQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceTaskQueue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceTaskQueue', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateTaskReservation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTaskReservationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTaskReservationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTaskReservationResponse
     */
	public function updateTaskReservation(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTaskReservationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateTaskReservationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTaskReservationResponse
    {
        $baseUrl = SDK::UPDATE_TASK_RESERVATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateTaskReservationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTaskReservationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceTaskTaskReservation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceTaskTaskReservation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateWorker
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerResponse
     */
	public function updateWorker(
        \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerResponse
    {
        $baseUrl = SDK::UPDATE_WORKER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorker = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorker', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateWorkerChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerChannelResponse
     */
	public function updateWorkerChannel(
        \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerChannelSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerChannelResponse
    {
        $baseUrl = SDK::UPDATE_WORKER_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkerWorkerChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkerWorkerChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateWorkerReservation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerReservationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerReservationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerReservationResponse
     */
	public function updateWorkerReservation(
        \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerReservationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerReservationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerReservationResponse
    {
        $baseUrl = SDK::UPDATE_WORKER_RESERVATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerReservationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateWorkerReservationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkerWorkerReservation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkerWorkerReservation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateWorkflow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWorkflowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWorkflowSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateWorkflowResponse
     */
	public function updateWorkflow(
        \OpenAPI\OpenAPI\Models\Operations\UpdateWorkflowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateWorkflowSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateWorkflowResponse
    {
        $baseUrl = SDK::UPDATE_WORKFLOW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateWorkflowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateWorkflowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1WorkspaceWorkflow = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1WorkspaceWorkflow', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateWorkspace
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWorkspaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWorkspaceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateWorkspaceResponse
     */
	public function updateWorkspace(
        \OpenAPI\OpenAPI\Models\Operations\UpdateWorkspaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateWorkspaceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateWorkspaceResponse
    {
        $baseUrl = SDK::UPDATE_WORKSPACE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Workspaces/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateWorkspaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateWorkspaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskrouterV1Workspace = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskrouterV1Workspace', 'json');
            }
        }

        return $response;
    }
}