/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class PostApiV1AccountsIdMuteSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=bearer;name=Authorization",
  })
  bearerAuth: string;
}

export class PostApiV1AccountsIdMuteRequestBody extends SpeakeasyBase {
  /**
   * How long the mute should last, in seconds. Defaults to 0 (indefinite).
   */
  @SpeakeasyMetadata()
  duration?: number;

  /**
   * Mute notifications in addition to statuses? Defaults to true.
   */
  @SpeakeasyMetadata()
  notifications?: boolean;
}

export class PostApiV1AccountsIdMuteRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/form-data" })
  requestBody?: Uint8Array;

  /**
   * The id of the account in the database
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;
}

export class PostApiV1AccountsIdMuteResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Invalid or missing Authorization header
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  /**
   * Successfully muted, or account was already muted. Note that you can call this API method again with notifications=false to update the relationship so that only statuses are muted.
   */
  @SpeakeasyMetadata()
  relationship?: shared.Relationship;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
