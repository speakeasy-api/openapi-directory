<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Videos 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes a resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosDeleteResponse
     */
	public function youtubeVideosDelete(
        \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/youtube/v3/videos');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubeVideosDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves the ratings that the authorized user gave to a list of specified videos.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosGetRatingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosGetRatingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosGetRatingResponse
     */
	public function youtubeVideosGetRating(
        \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosGetRatingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosGetRatingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosGetRatingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/youtube/v3/videos/getRating');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubeVideosGetRatingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosGetRatingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoGetRatingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoGetRatingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a new resource into this collection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosInsertResponse
     */
	public function youtubeVideosInsert(
        \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/youtube/v3/videos');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubeVideosInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->video = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Video', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of resources, possibly filtered.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosListResponse
     */
	public function youtubeVideosList(
        \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/youtube/v3/videos');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubeVideosListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VideoListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a like or dislike rating to a video or removes a rating from a video.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosRateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosRateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosRateResponse
     */
	public function youtubeVideosRate(
        \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosRateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosRateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosRateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/youtube/v3/videos/rate');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubeVideosRateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosRateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Report abuse for a video.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosReportAbuseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosReportAbuseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosReportAbuseResponse
     */
	public function youtubeVideosReportAbuse(
        \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosReportAbuseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosReportAbuseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosReportAbuseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/youtube/v3/videos/reportAbuse');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "videoAbuseReport", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubeVideosReportAbuseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosReportAbuseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Updates an existing resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosUpdateResponse
     */
	public function youtubeVideosUpdate(
        \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/youtube/v3/videos');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "video", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubeVideosUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubeVideosUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->video = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Video', 'json');
            }
        }

        return $response;
    }
}