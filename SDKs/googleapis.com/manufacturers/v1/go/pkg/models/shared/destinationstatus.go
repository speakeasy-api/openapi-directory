// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DestinationStatusStatusEnum - The status of the destination.
type DestinationStatusStatusEnum string

const (
	DestinationStatusStatusEnumUnknown     DestinationStatusStatusEnum = "UNKNOWN"
	DestinationStatusStatusEnumActive      DestinationStatusStatusEnum = "ACTIVE"
	DestinationStatusStatusEnumPending     DestinationStatusStatusEnum = "PENDING"
	DestinationStatusStatusEnumDisapproved DestinationStatusStatusEnum = "DISAPPROVED"
)

func (e DestinationStatusStatusEnum) ToPointer() *DestinationStatusStatusEnum {
	return &e
}

func (e *DestinationStatusStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "PENDING":
		fallthrough
	case "DISAPPROVED":
		*e = DestinationStatusStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationStatusStatusEnum: %v", v)
	}
}

// DestinationStatus - The destination status.
type DestinationStatus struct {
	// The name of the destination.
	Destination *string `json:"destination,omitempty"`
	// The status of the destination.
	Status *DestinationStatusStatusEnum `json:"status,omitempty"`
}
