/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PlacedBet {
    /**
     * The cash in value of the bet. For example £0.88. When no value is given or no value is present, no cash in is available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cashinValue")
    public Double cashinValue;

    public PlacedBet withCashinValue(Double cashinValue) {
        this.cashinValue = cashinValue;
        return this;
    }
    
    /**
     * The estimated value of the returns if the bet is successful. Note: when an estimated return isn’t available, as in the case of a bet placed on a horse at SP (starting price) where the actual price is unknown when the bet is placed, ‘NOT_AVAILABLE’ will appear in the response field.
     */
    @JsonProperty("estimatedReturns")
    public Double estimatedReturns;

    public PlacedBet withEstimatedReturns(Double estimatedReturns) {
        this.estimatedReturns = estimatedReturns;
        return this;
    }
    
    /**
     * If a free bet token is used for the bet, this element represents the value
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("freeBetValue")
    public Double freeBetValue;

    public PlacedBet withFreeBetValue(Double freeBetValue) {
        this.freeBetValue = freeBetValue;
        return this;
    }
    
    /**
     * The unique identifier of the bet
     */
    @JsonProperty("id")
    public String id;

    public PlacedBet withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("legs")
    public PlacedBetLeg[] legs;

    public PlacedBet withLegs(PlacedBetLeg[] legs) {
        this.legs = legs;
        return this;
    }
    
    /**
     * Number of lines of bets
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numLines")
    public Long numLines;

    public PlacedBet withNumLines(Long numLines) {
        this.numLines = numLines;
        return this;
    }
    
    /**
     * Number of selections that the bet is made of
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numSelections")
    public Long numSelections;

    public PlacedBet withNumSelections(Long numSelections) {
        this.numSelections = numSelections;
        return this;
    }
    
    /**
     * The unique identifier of the receipt for the bet
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("receipt")
    public String receipt;

    public PlacedBet withReceipt(String receipt) {
        this.receipt = receipt;
        return this;
    }
    
    /**
     * Whether the bet is settled
     */
    @JsonProperty("settled")
    public Boolean settled;

    public PlacedBet withSettled(Boolean settled) {
        this.settled = settled;
        return this;
    }
    
    /**
     * The bet stake, which represents the total value of the bet. For example: £ 12.34
     */
    @JsonProperty("stake")
    public Double stake;

    public PlacedBet withStake(Double stake) {
        this.stake = stake;
        return this;
    }
    
    /**
     * The individual stake on each line of the bet. For example: £ 6.17
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stakePerLine")
    public Double stakePerLine;

    public PlacedBet withStakePerLine(Double stakePerLine) {
        this.stakePerLine = stakePerLine;
        return this;
    }
    
    /**
     * The status of the bet. Can be one of the following: A - Active, S - suspended, C - Cashed Out
     */
    @JsonProperty("status")
    public String status;

    public PlacedBet withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * The time the bet was placed
     */
    @JsonProperty("transDateTime")
    public String transDateTime;

    public PlacedBet withTransDateTime(String transDateTime) {
        this.transDateTime = transDateTime;
        return this;
    }
    
    /**
     * The bet type code of the bet. For example: TBL (Treble)
     */
    @JsonProperty("typeCode")
    public String typeCode;

    public PlacedBet withTypeCode(String typeCode) {
        this.typeCode = typeCode;
        return this;
    }
    
    /**
     * The name of the bet type. For example: Double
     */
    @JsonProperty("typeName")
    public String typeName;

    public PlacedBet withTypeName(String typeName) {
        this.typeName = typeName;
        return this;
    }
    
    /**
     * Actual value of the returns from this bet
     */
    @JsonProperty("winnings")
    public Double winnings;

    public PlacedBet withWinnings(Double winnings) {
        this.winnings = winnings;
        return this;
    }
    
    public PlacedBet(@JsonProperty("estimatedReturns") Double estimatedReturns, @JsonProperty("id") String id, @JsonProperty("settled") Boolean settled, @JsonProperty("stake") Double stake, @JsonProperty("status") String status, @JsonProperty("transDateTime") String transDateTime, @JsonProperty("typeCode") String typeCode, @JsonProperty("typeName") String typeName, @JsonProperty("winnings") Double winnings) {
        this.estimatedReturns = estimatedReturns;
        this.id = id;
        this.settled = settled;
        this.stake = stake;
        this.status = status;
        this.transDateTime = transDateTime;
        this.typeCode = typeCode;
        this.typeName = typeName;
        this.winnings = winnings;
  }
}
