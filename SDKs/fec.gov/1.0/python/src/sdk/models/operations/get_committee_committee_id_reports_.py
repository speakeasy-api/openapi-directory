"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import committeereportspage as shared_committeereportspage
from typing import Optional


@dataclasses.dataclass
class GetCommitteeCommitteeIDReportsRequest:
    
    api_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""API key for https://api.data.gov. Get one at https://api.data.gov/signup."""  
    committee_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'committee_id', 'style': 'simple', 'explode': False }})
    r"""A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits."""  
    beginning_image_number: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'beginning_image_number', 'style': 'form', 'explode': True }})
    r"""Unique identifier for the electronic or paper report. This number is used to construct
    PDF URLs to the original document.
    """  
    candidate_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'candidate_id', 'style': 'form', 'explode': True }})
    r"""A unique identifier assigned to each candidate registered with the FEC.
    If a person runs for several offices, that person will have separate candidate IDs for each office.
    """  
    cycle: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cycle', 'style': 'form', 'explode': True }})
    r"""Filter records to only those that were applicable to a given
    two-year period.The cycle begins with an odd year and is named
    for its ending, even year.
    """  
    is_amended: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'is_amended', 'style': 'form', 'explode': True }})
    r"""False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment."""  
    max_cash_on_hand_end_period_amount: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_cash_on_hand_end_period_amount', 'style': 'form', 'explode': True }})
    r"""Filter for all amounts less than a value."""  
    max_debts_owed_expenditures: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_debts_owed_expenditures', 'style': 'form', 'explode': True }})
    r"""Filter for all amounts less than a value."""  
    max_disbursements_amount: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_disbursements_amount', 'style': 'form', 'explode': True }})
    r"""Filter for all amounts less than a value."""  
    max_independent_expenditures: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_independent_expenditures', 'style': 'form', 'explode': True }})
    r"""Filter for all amounts less than a value."""  
    max_party_coordinated_expenditures: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_party_coordinated_expenditures', 'style': 'form', 'explode': True }})
    r"""Filter for all amounts less than a value."""  
    max_receipts_amount: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_receipts_amount', 'style': 'form', 'explode': True }})
    r"""Filter for all amounts less than a value."""  
    max_total_contributions: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_total_contributions', 'style': 'form', 'explode': True }})
    r"""Filter for all amounts less than a value."""  
    min_cash_on_hand_end_period_amount: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_cash_on_hand_end_period_amount', 'style': 'form', 'explode': True }})
    r"""Filter for all amounts greater than a value."""  
    min_debts_owed_amount: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_debts_owed_amount', 'style': 'form', 'explode': True }})
    r"""Filter for all amounts greater than a value."""  
    min_disbursements_amount: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_disbursements_amount', 'style': 'form', 'explode': True }})
    r"""Filter for all amounts greater than a value."""  
    min_independent_expenditures: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_independent_expenditures', 'style': 'form', 'explode': True }})
    r"""Filter for all amounts greater than a value."""  
    min_party_coordinated_expenditures: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_party_coordinated_expenditures', 'style': 'form', 'explode': True }})
    r"""Filter for all amounts greater than a value."""  
    min_receipts_amount: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_receipts_amount', 'style': 'form', 'explode': True }})
    r"""Filter for all amounts greater than a value."""  
    min_total_contributions: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_total_contributions', 'style': 'form', 'explode': True }})
    r"""Filter for all amounts greater than a value."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""For paginating through results, starting at page 1"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results returned per page. Defaults to 20."""  
    report_type: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'report_type', 'style': 'form', 'explode': True }})
    r"""Report type; prefix with \\"-\\" to exclude. Name of report where the underlying data comes from:
        - 10D Pre-Election
        - 10G Pre-General
        - 10P Pre-Primary
        - 10R Pre-Run-Off
        - 10S Pre-Special
        - 12C Pre-Convention
        - 12G Pre-General
        - 12P Pre-Primary
        - 12R Pre-Run-Off
        - 12S Pre-Special
        - 30D Post-Election
        - 30G Post-General
        - 30P Post-Primary
        - 30R Post-Run-Off
        - 30S Post-Special
        - 60D Post-Convention
        - M1  January Monthly
        - M10 October Monthly
        - M11 November Monthly
        - M12 December Monthly
        - M2  February Monthly
        - M3  March Monthly
        - M4  April Monthly
        - M5  May Monthly
        - M6  June Monthly
        - M7  July Monthly
        - M8  August Monthly
        - M9  September Monthly
        - MY  Mid-Year Report
        - Q1  April Quarterly
        - Q2  July Quarterly
        - Q3  October Quarterly
        - TER Termination Report
        - YE  Year-End
        - ADJ COMP ADJUST AMEND
        - CA  COMPREHENSIVE AMEND
    """  
    sort: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Provide a field to sort by. Use `-` for descending order. ex: `-case_no`"""  
    sort_hide_null: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_hide_null', 'style': 'form', 'explode': True }})
    r"""Hide null values on sorted column(s)."""  
    sort_null_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_null_only', 'style': 'form', 'explode': True }})
    r"""Toggle that filters out all rows having sort column that is non-null"""  
    sort_nulls_last: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_nulls_last', 'style': 'form', 'explode': True }})
    r"""Toggle that sorts null values last"""  
    type: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""The one-letter type code of the organization:
            - C communication cost
            - D delegate
            - E electioneering communication
            - H House
            - I independent expenditure filer (not a committee)
            - N PAC - nonqualified
            - O independent expenditure-only (super PACs)
            - P presidential
            - Q PAC - qualified
            - S Senate
            - U single candidate independent expenditure
            - V PAC with non-contribution account, nonqualified
            - W PAC with non-contribution account, qualified
            - X party, nonqualified
            - Y party, qualified
            - Z national party non-federal account
    """  
    year: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'year', 'style': 'form', 'explode': True }})
    r"""Forms with coverage date -
        year from the coverage ending date.
    Forms without coverage date - 
        year from the receipt date.
    """  
    

@dataclasses.dataclass
class GetCommitteeCommitteeIDReportsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    committee_reports_page: Optional[shared_committeereportspage.CommitteeReportsPage] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    