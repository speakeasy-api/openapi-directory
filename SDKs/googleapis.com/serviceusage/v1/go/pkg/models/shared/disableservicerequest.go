// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DisableServiceRequestCheckIfServiceHasUsageEnum - Defines the behavior for checking service usage when disabling a service.
type DisableServiceRequestCheckIfServiceHasUsageEnum string

const (
	DisableServiceRequestCheckIfServiceHasUsageEnumCheckIfServiceHasUsageUnspecified DisableServiceRequestCheckIfServiceHasUsageEnum = "CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED"
	DisableServiceRequestCheckIfServiceHasUsageEnumSkip                              DisableServiceRequestCheckIfServiceHasUsageEnum = "SKIP"
	DisableServiceRequestCheckIfServiceHasUsageEnumCheck                             DisableServiceRequestCheckIfServiceHasUsageEnum = "CHECK"
)

func (e *DisableServiceRequestCheckIfServiceHasUsageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED":
		fallthrough
	case "SKIP":
		fallthrough
	case "CHECK":
		*e = DisableServiceRequestCheckIfServiceHasUsageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DisableServiceRequestCheckIfServiceHasUsageEnum: %s", s)
	}
}

// DisableServiceRequest - Request message for the `DisableService` method.
type DisableServiceRequest struct {
	// Defines the behavior for checking service usage when disabling a service.
	CheckIfServiceHasUsage *DisableServiceRequestCheckIfServiceHasUsageEnum `json:"checkIfServiceHasUsage,omitempty"`
	// Indicates if services that are enabled and which depend on this service should also be disabled. If not set, an error will be generated if any enabled services depend on the service to be disabled. When set, the service, and any enabled services that depend on it, will be disabled together.
	DisableDependentServices *bool `json:"disableDependentServices,omitempty"`
}
