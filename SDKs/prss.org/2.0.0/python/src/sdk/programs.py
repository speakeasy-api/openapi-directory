"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Programs:
    r"""Program information including searching for existing programs or fetching a specific program. A program is a collection of episodes that are delivered by ContentDepot as a live stream or pre-recorded files."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_api_v2_programs_search(self, request: operations.GetAPIV2ProgramsSearchRequest, security: operations.GetAPIV2ProgramsSearchSecurity) -> operations.GetAPIV2ProgramsSearchResponse:
        r"""Optimized free-text search for programs using various filters."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v2/programs/search'
        
        query_params = utils.get_query_params(operations.GetAPIV2ProgramsSearchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV2ProgramsSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Program]])
                res.programs = out
        elif http_res.status_code == 403:
            pass

        return res

    def get_api_v2_programs_id_(self, request: operations.GetAPIV2ProgramsIDRequest, security: operations.GetAPIV2ProgramsIDSecurity) -> operations.GetAPIV2ProgramsIDResponse:
        r"""Returns the program matching the given ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV2ProgramsIDRequest, base_url, '/api/v2/programs/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV2ProgramsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Program])
                res.program = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    