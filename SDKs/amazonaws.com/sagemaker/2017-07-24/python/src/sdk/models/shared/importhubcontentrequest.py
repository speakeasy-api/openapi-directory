"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import hubcontenttype_enum as shared_hubcontenttype_enum
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImportHubContentRequest:
    
    document_schema_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DocumentSchemaVersion') }})  
    hub_content_document: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentDocument') }})  
    hub_content_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentName') }})  
    hub_content_type: shared_hubcontenttype_enum.HubContentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentType') }})  
    hub_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubName') }})  
    hub_content_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentDescription'), 'exclude': lambda f: f is None }})  
    hub_content_display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentDisplayName'), 'exclude': lambda f: f is None }})  
    hub_content_markdown: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentMarkdown'), 'exclude': lambda f: f is None }})  
    hub_content_search_keywords: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentSearchKeywords'), 'exclude': lambda f: f is None }})  
    hub_content_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HubContentVersion'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    