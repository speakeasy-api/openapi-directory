/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PrivateAuthorsSearch - Search Parameters
 */
public class PrivateAuthorsSearch {
    /**
     * Return only authors in this group or subgroups of the group
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_id")
    public Long groupId;

    public PrivateAuthorsSearch withGroupId(Long groupId) {
        this.groupId = groupId;
        return this;
    }
    
    /**
     * Return only authors associated to this institution
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("institution_id")
    public Long institutionId;

    public PrivateAuthorsSearch withInstitutionId(Long institutionId) {
        this.institutionId = institutionId;
        return this;
    }
    
    /**
     * Return only active authors if True
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_active")
    public Boolean isActive;

    public PrivateAuthorsSearch withIsActive(Boolean isActive) {
        this.isActive = isActive;
        return this;
    }
    
    /**
     * Return only authors that have published items if True
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_public")
    public Boolean isPublic;

    public PrivateAuthorsSearch withIsPublic(Boolean isPublic) {
        this.isPublic = isPublic;
        return this;
    }
    
    /**
     * Number of results included on a page. Used for pagination with query
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    public Long limit;

    public PrivateAuthorsSearch withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Where to start the listing(the offset of the first result). Used for pagination with limit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    public Long offset;

    public PrivateAuthorsSearch withOffset(Long offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * Orcid of author
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orcid")
    public String orcid;

    public PrivateAuthorsSearch withOrcid(String orcid) {
        this.orcid = orcid;
        return this;
    }
    
    /**
     * The field by which to order. Default varies by endpoint/resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order")
    public PrivateAuthorsSearchOrderEnum order;

    public PrivateAuthorsSearch withOrder(PrivateAuthorsSearchOrderEnum order) {
        this.order = order;
        return this;
    }
    
    /**
     * Direction of ordering
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_direction")
    public PrivateAuthorsSearchOrderDirectionEnum orderDirection;

    public PrivateAuthorsSearch withOrderDirection(PrivateAuthorsSearchOrderDirectionEnum orderDirection) {
        this.orderDirection = orderDirection;
        return this;
    }
    
    /**
     * Page number. Used for pagination with page_size
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page")
    public Long page;

    public PrivateAuthorsSearch withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * The number of results included on a page. Used for pagination with page
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_size")
    public Long pageSize;

    public PrivateAuthorsSearch withPageSize(Long pageSize) {
        this.pageSize = pageSize;
        return this;
    }
    
    /**
     * Search term
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_for")
    public String searchFor;

    public PrivateAuthorsSearch withSearchFor(String searchFor) {
        this.searchFor = searchFor;
        return this;
    }
    
    public PrivateAuthorsSearch(){}
}
