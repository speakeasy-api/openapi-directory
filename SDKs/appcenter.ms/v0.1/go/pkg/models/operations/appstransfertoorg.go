// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AppsTransferToOrgSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AppsTransferToOrgRequest struct {
	// allow empty body for custom http-client lib
	RequestBody map[string]interface{} `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AppsTransferToOrgDefaultApplicationJSONErrorCodeEnum string

const (
	AppsTransferToOrgDefaultApplicationJSONErrorCodeEnumBadRequest          AppsTransferToOrgDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AppsTransferToOrgDefaultApplicationJSONErrorCodeEnumConflict            AppsTransferToOrgDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AppsTransferToOrgDefaultApplicationJSONErrorCodeEnumNotAcceptable       AppsTransferToOrgDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AppsTransferToOrgDefaultApplicationJSONErrorCodeEnumNotFound            AppsTransferToOrgDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AppsTransferToOrgDefaultApplicationJSONErrorCodeEnumInternalServerError AppsTransferToOrgDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AppsTransferToOrgDefaultApplicationJSONErrorCodeEnumUnauthorized        AppsTransferToOrgDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AppsTransferToOrgDefaultApplicationJSONErrorCodeEnumTooManyRequests     AppsTransferToOrgDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *AppsTransferToOrgDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AppsTransferToOrgDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsTransferToOrgDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type AppsTransferToOrgDefaultApplicationJSONError struct {
	Code    AppsTransferToOrgDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                               `json:"message"`
}

// AppsTransferToOrgDefaultApplicationJSON - Error
type AppsTransferToOrgDefaultApplicationJSON struct {
	Error AppsTransferToOrgDefaultApplicationJSONError `json:"error"`
}

// AppsTransferToOrg200ApplicationJSONOriginEnum - The creation origin of this organization
type AppsTransferToOrg200ApplicationJSONOriginEnum string

const (
	AppsTransferToOrg200ApplicationJSONOriginEnumAppcenter AppsTransferToOrg200ApplicationJSONOriginEnum = "appcenter"
	AppsTransferToOrg200ApplicationJSONOriginEnumHockeyapp AppsTransferToOrg200ApplicationJSONOriginEnum = "hockeyapp"
)

func (e *AppsTransferToOrg200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		*e = AppsTransferToOrg200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsTransferToOrg200ApplicationJSONOriginEnum: %s", s)
	}
}

// AppsTransferToOrg200ApplicationJSON - Success
type AppsTransferToOrg200ApplicationJSON struct {
	// The URL to a user-uploaded Avatar image
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The creation date of this organization
	CreatedAt string `json:"created_at"`
	// The display name of the organization
	DisplayName string `json:"display_name"`
	// The internal unique id (UUID) of the organization.
	ID string `json:"id"`
	// The slug name of the organization
	Name string `json:"name"`
	// The creation origin of this organization
	Origin AppsTransferToOrg200ApplicationJSONOriginEnum `json:"origin"`
	// The date the organization was last updated at
	UpdatedAt string `json:"updated_at"`
}

type AppsTransferToOrgResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	AppsTransferToOrg200ApplicationJSONObject *AppsTransferToOrg200ApplicationJSON
	// Error
	AppsTransferToOrgDefaultApplicationJSONObject *AppsTransferToOrgDefaultApplicationJSON
}
