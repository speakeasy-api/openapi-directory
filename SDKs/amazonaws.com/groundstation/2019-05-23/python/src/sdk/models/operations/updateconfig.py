"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import antennadownlinkconfig as shared_antennadownlinkconfig
from ..shared import antennadownlinkdemoddecodeconfig as shared_antennadownlinkdemoddecodeconfig
from ..shared import antennauplinkconfig as shared_antennauplinkconfig
from ..shared import configidresponse as shared_configidresponse
from ..shared import dataflowendpointconfig as shared_dataflowendpointconfig
from ..shared import s3recordingconfig as shared_s3recordingconfig
from ..shared import trackingconfig as shared_trackingconfig
from ..shared import uplinkechoconfig as shared_uplinkechoconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateConfigRequestBodyConfigData:
    r"""<p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>"""
    
    antenna_downlink_config: Optional[shared_antennadownlinkconfig.AntennaDownlinkConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antennaDownlinkConfig'), 'exclude': lambda f: f is None }})  
    antenna_downlink_demod_decode_config: Optional[shared_antennadownlinkdemoddecodeconfig.AntennaDownlinkDemodDecodeConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antennaDownlinkDemodDecodeConfig'), 'exclude': lambda f: f is None }})  
    antenna_uplink_config: Optional[shared_antennauplinkconfig.AntennaUplinkConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antennaUplinkConfig'), 'exclude': lambda f: f is None }})  
    dataflow_endpoint_config: Optional[shared_dataflowendpointconfig.DataflowEndpointConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataflowEndpointConfig'), 'exclude': lambda f: f is None }})  
    s3_recording_config: Optional[shared_s3recordingconfig.S3RecordingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3RecordingConfig'), 'exclude': lambda f: f is None }})  
    tracking_config: Optional[shared_trackingconfig.TrackingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingConfig'), 'exclude': lambda f: f is None }})  
    uplink_echo_config: Optional[shared_uplinkechoconfig.UplinkEchoConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uplinkEchoConfig'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateConfigRequestBody:
    
    config_data: UpdateConfigRequestBodyConfigData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configData') }})
    r"""<p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of a <code>Config</code>."""  
    
class UpdateConfigConfigTypeEnum(str, Enum):
    r"""Type of a <code>Config</code>."""
    ANTENNA_DOWNLINK = 'antenna-downlink'
    ANTENNA_DOWNLINK_DEMOD_DECODE = 'antenna-downlink-demod-decode'
    ANTENNA_UPLINK = 'antenna-uplink'
    DATAFLOW_ENDPOINT = 'dataflow-endpoint'
    TRACKING = 'tracking'
    UPLINK_ECHO = 'uplink-echo'
    S3_RECORDING = 's3-recording'


@dataclasses.dataclass
class UpdateConfigRequest:
    
    config_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'configId', 'style': 'simple', 'explode': False }})
    r"""UUID of a <code>Config</code>."""  
    config_type: UpdateConfigConfigTypeEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'configType', 'style': 'simple', 'explode': False }})
    r"""Type of a <code>Config</code>."""  
    request_body: UpdateConfigRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateConfigResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    config_id_response: Optional[shared_configidresponse.ConfigIDResponse] = dataclasses.field(default=None)
    r"""Success"""  
    dependency_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DependencyException"""  
    invalid_parameter_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    