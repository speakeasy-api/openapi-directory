/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Dhcp {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Show the agent's DHCP argument structure
   *
   * @remarks
   * Agent's DHCP configuration particulars
   */
  protocolDhcpGetArgs(
    req: operations.ProtocolDhcpGetArgsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolDhcpGetArgsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolDhcpGetArgsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/dhcp/get/args",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolDhcpGetArgsResponse =
        new operations.ProtocolDhcpGetArgsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolDhcpGetArgs200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the agent's DHCP configuration
   *
   * @remarks
   * Agent's DHCP configuration hwaddr,classid,add_options,script
   */
  protocolDhcpGetConfig(
    req: operations.ProtocolDhcpGetConfigRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolDhcpGetConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolDhcpGetConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/dhcp/get/config",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolDhcpGetConfigResponse =
        new operations.ProtocolDhcpGetConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.configDHCP = utils.objectToClass(
              httpRes?.data,
              shared.ConfigDHCP
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the agent's DHCP statistics
   *
   * @remarks
   * Statistics of fields indicated in the headers
   */
  protocolDhcpGetStatistics(
    req: operations.ProtocolDhcpGetStatisticsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolDhcpGetStatisticsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolDhcpGetStatisticsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/dhcp/get/statistics",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolDhcpGetStatisticsResponse =
        new operations.ProtocolDhcpGetStatisticsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolDhcpGetStatistics200ApplicationJSONInt32Integers =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the DHCP statistics headers
   *
   * @remarks
   * The headers of statistics fields
   */
  protocolDhcpGetStatsHdr(
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolDhcpGetStatsHdrResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/mimic/protocol/msg/dhcp/get/stats_hdr";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolDhcpGetStatsHdrResponse =
        new operations.ProtocolDhcpGetStatsHdrResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolDhcpGetStatsHdr200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the agent's DHCP traffic tracing
   *
   * @remarks
   * Trace 1 means enabled, 0 means not
   */
  protocolDhcpGetTrace(
    req: operations.ProtocolDhcpGetTraceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolDhcpGetTraceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolDhcpGetTraceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/dhcp/get/trace",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolDhcpGetTraceResponse =
        new operations.ProtocolDhcpGetTraceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.configDHCP = utils.objectToClass(
              httpRes?.data,
              shared.ConfigDHCP
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the parameters configured by the server in its DHCP-OFFER message
   *
   * @remarks
   * DHCP-OFFER message parameters
   */
  protocolDhcpParams(
    req: operations.ProtocolDhcpParamsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolDhcpParamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolDhcpParamsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/dhcp/params",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolDhcpParamsResponse =
        new operations.ProtocolDhcpParamsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolDhcpParams200ApplicationJSONObjects =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Set the agent's DHCP configuration
   *
   * @remarks
   * Agent's DHCP configuration with port,rule,prompt,paging_prompt,userdb,keymap
   */
  protocolDhcpSetConfig(
    req: operations.ProtocolDhcpSetConfigRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolDhcpSetConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolDhcpSetConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/dhcp/set/config/{argument}/{value}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolDhcpSetConfigResponse =
        new operations.ProtocolDhcpSetConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolDhcpSetConfig200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Set the agent's DHCP traffic tracing
   *
   * @remarks
   * 1 to enable, 0 to disable
   */
  protocolDhcpSetTrace(
    req: operations.ProtocolDhcpSetTraceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolDhcpSetTraceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolDhcpSetTraceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/dhcp/set/trace/{enableOrNot}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolDhcpSetTraceResponse =
        new operations.ProtocolDhcpSetTraceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolDhcpSetTrace200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }
}
