"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import compensationentry as shared_compensationentry
from ..shared import compensationrange as shared_compensationrange
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CompensationInfo:
    r"""Job compensation details."""
    
    annualized_base_compensation_range: Optional[shared_compensationrange.CompensationRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annualizedBaseCompensationRange'), 'exclude': lambda f: f is None }})
    r"""Compensation range."""  
    annualized_total_compensation_range: Optional[shared_compensationrange.CompensationRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annualizedTotalCompensationRange'), 'exclude': lambda f: f is None }})
    r"""Compensation range."""  
    entries: Optional[list[shared_compensationentry.CompensationEntry]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entries'), 'exclude': lambda f: f is None }})
    r"""Optional. Job compensation information. At most one entry can be of type CompensationInfo.CompensationType.BASE, which is referred as ** base compensation entry ** for the job."""  
    