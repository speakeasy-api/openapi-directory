"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class VoiceCapabilityPaymentsGatewaysModeEnum(str, Enum):
    r"""determines if the user has completed the integration with the gateway"""
    TEST = 'test'
    LIVE = 'live'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VoiceCapabilityPaymentsGateways:
    
    credential: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credential'), 'exclude': lambda f: f is None }})
    r"""used to identify the gateway in the credentials service"""  
    mode: Optional[VoiceCapabilityPaymentsGatewaysModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""determines if the user has completed the integration with the gateway"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""payment gateway type (Stripe, Azure)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VoiceCapabilityPayments:
    r"""encompass all the payment related fields"""
    
    gateways: Optional[list[VoiceCapabilityPaymentsGateways]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateways'), 'exclude': lambda f: f is None }})
    r"""payment gateways like Stripe"""  
    
class VoiceCapabilityWebhooksAnswerURLHTTPMethodEnum(str, Enum):
    r"""The HTTP method used to fetch your NCCO from your `answer_url`"""
    GET = 'GET'
    POST = 'POST'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VoiceCapabilityWebhooksAnswerURL:
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""The URL that Vonage requests when a call is placed/received. Must return an NCCO"""  
    connection_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connection_timeout'), 'exclude': lambda f: f is None }})
    r"""If Vonage can't connect to the webhook URL for this specified amount of time, then Vonage makes one additional attempt to connect to the webhook endpoint. This is an integer value specified in milliseconds."""  
    http_method: Optional[VoiceCapabilityWebhooksAnswerURLHTTPMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http_method'), 'exclude': lambda f: f is None }})
    r"""The HTTP method used to fetch your NCCO from your `answer_url`"""  
    socket_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('socket_timeout'), 'exclude': lambda f: f is None }})
    r"""If a response from the webhook URL can't be read for this specified amount of time, then Vonage makes one additional attempt to read the webhook endpoint. This is an integer value specified in milliseconds."""  
    
class VoiceCapabilityWebhooksEventURLHTTPMethodEnum(str, Enum):
    r"""The HTTP method used to send events to your server"""
    GET = 'GET'
    POST = 'POST'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VoiceCapabilityWebhooksEventURL:
    r"""Vonage will send call events (e.g. `ringing`, `answered`) to this URL"""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""The URL that Vonage sends events related to your call to"""  
    connection_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connection_timeout'), 'exclude': lambda f: f is None }})
    r"""If Vonage can't connect to the webhook URL for this specified amount of time, then Vonage makes one additional attempt to connect to the webhook endpoint. This is an integer value specified in milliseconds."""  
    http_method: Optional[VoiceCapabilityWebhooksEventURLHTTPMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http_method'), 'exclude': lambda f: f is None }})
    r"""The HTTP method used to send events to your server"""  
    socket_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('socket_timeout'), 'exclude': lambda f: f is None }})
    r"""If a response from the webhook URL can't be read for this specified amount of time, then Vonage makes one additional attempt to read the webhook endpoint. This is an integer value specified in milliseconds."""  
    
class VoiceCapabilityWebhooksFallbackAnswerURLHTTPMethodEnum(str, Enum):
    r"""The HTTP method used to fetch your NCCO from your `answer_url`"""
    GET = 'GET'
    POST = 'POST'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VoiceCapabilityWebhooksFallbackAnswerURL:
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""If your `answer_url` is offline or returns a HTTP error code, Vonage will make a request to a
    `fallback_answer_url` if it is set. This URL must return an NCCO.
    """  
    connection_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connection_timeout'), 'exclude': lambda f: f is None }})
    r"""If Vonage can't connect to the webhook URL for this specified amount of time, then Vonage makes one additional attempt to connect to the webhook endpoint. This is an integer value specified in milliseconds."""  
    http_method: Optional[VoiceCapabilityWebhooksFallbackAnswerURLHTTPMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http_method'), 'exclude': lambda f: f is None }})
    r"""The HTTP method used to fetch your NCCO from your `answer_url`"""  
    socket_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('socket_timeout'), 'exclude': lambda f: f is None }})
    r"""If a response from the webhook URL can't be read for this specified amount of time, then Vonage makes one additional attempt to read the webhook endpoint. This is an integer value specified in milliseconds."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VoiceCapabilityWebhooks:
    
    answer_url: Optional[VoiceCapabilityWebhooksAnswerURL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answer_url'), 'exclude': lambda f: f is None }})  
    event_url: Optional[VoiceCapabilityWebhooksEventURL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_url'), 'exclude': lambda f: f is None }})
    r"""Vonage will send call events (e.g. `ringing`, `answered`) to this URL"""  
    fallback_answer_url: Optional[VoiceCapabilityWebhooksFallbackAnswerURL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fallback_answer_url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VoiceCapability:
    r"""Voice related configuration"""
    
    conversation_ttl: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversation_ttl'), 'exclude': lambda f: f is None }})
    r"""ttl used by the NCCO in case youâ€™re using a conversation action (is set in hours and is 48 by default)"""  
    payments: Optional[VoiceCapabilityPayments] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payments'), 'exclude': lambda f: f is None }})
    r"""encompass all the payment related fields"""  
    signed_callbacks: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signed_callbacks'), 'exclude': lambda f: f is None }})
    r"""verify that a request is coming from Vonage servers (a jwt token will be sent on the callback authorization header)"""  
    webhooks: Optional[VoiceCapabilityWebhooks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webhooks'), 'exclude': lambda f: f is None }})  
    