<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Billing 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get GitHub Advanced Security active committers for an enterprise
     * 
     * Gets the GitHub Advanced Security active committers for an enterprise per repository.
     * 
     * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the `total_advanced_security_committers` is not the sum of active_users for each repository.
     * 
     * The total number of repositories with committer information is tracked by the `total_count` field.
     * https://docs.github.com/enterprise-server@3.7/rest/reference/billing#export-advanced-security-active-committers-data-for-enterprise - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubAdvancedSecurityBillingGheRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubAdvancedSecurityBillingGheResponse
     * @see https://docs.github.com/enterprise-server@3.7/rest/reference/billing#export-advanced-security-active-committers-data-for-enterprise
     */
	public function billingGetGithubAdvancedSecurityBillingGhe(
        \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubAdvancedSecurityBillingGheRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubAdvancedSecurityBillingGheResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/enterprises/{enterprise}/settings/billing/advanced-security', \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubAdvancedSecurityBillingGheRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BillingGetGithubAdvancedSecurityBillingGheRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubAdvancedSecurityBillingGheResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->advancedSecurityActiveCommitters = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdvancedSecurityActiveCommitters', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get GitHub Advanced Security active committers for an organization
     * 
     * Gets the GitHub Advanced Security active committers for an organization per repository.
     * 
     * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the `total_advanced_security_committers` is not the sum of advanced_security_committers for each repository.
     * 
     * If this organization defers to an enterprise for billing, the `total_advanced_security_committers` returned from the organization API may include some users that are in more than one organization, so they will only consume a single Advanced Security seat at the enterprise level.
     * 
     * The total number of repositories with committer information is tracked by the `total_count` field.
     * https://docs.github.com/enterprise-server@3.7/rest/reference/billing#get-github-advanced-security-active-committers-for-an-organization - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubAdvancedSecurityBillingOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubAdvancedSecurityBillingOrgResponse
     * @see https://docs.github.com/enterprise-server@3.7/rest/reference/billing#get-github-advanced-security-active-committers-for-an-organization
     */
	public function billingGetGithubAdvancedSecurityBillingOrg(
        \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubAdvancedSecurityBillingOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubAdvancedSecurityBillingOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/settings/billing/advanced-security', \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubAdvancedSecurityBillingOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BillingGetGithubAdvancedSecurityBillingOrgRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubAdvancedSecurityBillingOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->advancedSecurityActiveCommitters = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdvancedSecurityActiveCommitters', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
}