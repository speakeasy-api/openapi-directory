/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * The sort direction of the results.
 */
export enum SearchVideosDirectionEnum {
  Asc = "asc",
  Desc = "desc",
}

/**
 * The attribute by which to filter the results. `CC` and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.
 */
export enum SearchVideosFilterEnum {
  Cc = "CC",
  CcBy = "CC-BY",
  CcByNc = "CC-BY-NC",
  CcByNcNd = "CC-BY-NC-ND",
  CcByNcSa = "CC-BY-NC-SA",
  CcByNd = "CC-BY-ND",
  CcBySa = "CC-BY-SA",
  Cc0 = "CC0",
  Categories = "categories",
  Duration = "duration",
  InProgress = "in-progress",
  MinimumLikes = "minimum_likes",
  Trending = "trending",
  UploadDate = "upload_date",
}

/**
 * The way to sort the results.
 */
export enum SearchVideosSortEnum {
  Alphabetical = "alphabetical",
  Comments = "comments",
  Date = "date",
  Duration = "duration",
  Likes = "likes",
  Plays = "plays",
  Relevant = "relevant",
}

export class SearchVideosRequest extends SpeakeasyBase {
  /**
   * The sort direction of the results.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=direction",
  })
  direction?: SearchVideosDirectionEnum;

  /**
   * The attribute by which to filter the results. `CC` and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter",
  })
  filter?: SearchVideosFilterEnum;

  /**
   * A comma-separated list of video URLs to find.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=links" })
  links?: string;

  /**
   * The page number of the results to show.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of items to show on each page of results, up to a maximum of 100.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Search query.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query: string;

  /**
   * The way to sort the results.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: SearchVideosSortEnum;

  /**
   * The comma-separated list of videos to find.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=uris" })
  uris?: string;
}

export class SearchVideosResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * * Error code 2101: Either the `uris` or `links` parameter has filtering or sorting arguments.
   *
   * @remarks
   * * Error code 2204: There is a problem with the batch request.
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  /**
   * * Search is disabled.
   *
   * @remarks
   * * Error code 7300: There was an internal search error.
   */
  @SpeakeasyMetadata()
  legacyError?: shared.LegacyError;

  /**
   * The search results were returned.
   */
  @SpeakeasyMetadata({ elemType: shared.Video })
  videos?: shared.Video[];
}
