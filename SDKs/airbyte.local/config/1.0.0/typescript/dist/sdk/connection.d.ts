import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig } from "axios";
/**
 * Connection between sources and destinations.
 */
export declare class Connection {
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    _language: string;
    _sdkVersion: string;
    _genVersion: string;
    constructor(defaultClient: AxiosInstance, securityClient: AxiosInstance, serverURL: string, language: string, sdkVersion: string, genVersion: string);
    /**
     * Create a connection between a source and a destination
     */
    createConnection(req: shared.ConnectionCreate, config?: AxiosRequestConfig): Promise<operations.CreateConnectionResponse>;
    /**
     * Delete a connection
     */
    deleteConnection(req: shared.ConnectionIdRequestBody, config?: AxiosRequestConfig): Promise<operations.DeleteConnectionResponse>;
    /**
     * Get a connection
     */
    getConnection(req: shared.ConnectionIdRequestBody, config?: AxiosRequestConfig): Promise<operations.GetConnectionResponse>;
    /**
     * Returns all connections for a workspace, including deleted connections.
     *
     * @remarks
     * List connections for workspace, including deleted connections.
     */
    listAllConnectionsForWorkspace(req: shared.WorkspaceIdRequestBody, config?: AxiosRequestConfig): Promise<operations.ListAllConnectionsForWorkspaceResponse>;
    /**
     * Returns all connections for a workspace.
     *
     * @remarks
     * List connections for workspace. Does not return deleted connections.
     */
    listConnectionsForWorkspace(req: shared.WorkspaceIdRequestBody, config?: AxiosRequestConfig): Promise<operations.ListConnectionsForWorkspaceResponse>;
    /**
     * Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state.
     */
    resetConnection(req: shared.ConnectionIdRequestBody, config?: AxiosRequestConfig): Promise<operations.ResetConnectionResponse>;
    /**
     * Search connections
     */
    searchConnections(req: shared.ConnectionSearch, config?: AxiosRequestConfig): Promise<operations.SearchConnectionsResponse>;
    /**
     * Trigger a manual sync of the connection
     */
    syncConnection(req: shared.ConnectionIdRequestBody, config?: AxiosRequestConfig): Promise<operations.SyncConnectionResponse>;
    /**
     * Update a connection
     *
     * @remarks
     * Apply a patch-style update to a connection. Only fields present on the update request body will be updated.
     * Note that if a catalog is present in the request body, the connection's entire catalog will be replaced
     * with the catalog from the request. This means that to modify a single stream, the entire new catalog
     * containing the updated stream needs to be sent.
     *
     */
    updateConnection(req: shared.ConnectionUpdate, config?: AxiosRequestConfig): Promise<operations.UpdateConnectionResponse>;
}
