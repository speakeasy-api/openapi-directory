"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class MissingSymbolGroupsGetSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class MissingSymbolGroupsGetRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    symbol_group_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'symbol_group_id', 'style': 'simple', 'explode': False }})
    r"""missing symbol crash group id"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MissingSymbolGroupsGetDefaultApplicationJSON:
    r"""failure response object"""
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    
class MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbolsStatusEnum(str, Enum):
    r"""symbol status"""
    MISSING = 'missing'
    IGNORED = 'ignored'
    AVAILABLE = 'available'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbols:
    r"""missing symbol"""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""symbol name"""  
    status: MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbolsStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""symbol status"""  
    symbol_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symbol_id') }})
    r"""symbol id"""  
    platform: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform'), 'exclude': lambda f: f is None }})
    r"""symbol plarform"""  
    
class MissingSymbolGroupsGet200ApplicationJSONGroupsStatusEnum(str, Enum):
    r"""group status"""
    ACTIVE = 'active'
    PENDING = 'pending'
    CLOSED = 'closed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MissingSymbolGroupsGet200ApplicationJSONGroups:
    r"""missing symbol crash group object"""
    
    app_build: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_build') }})
    r"""application build"""  
    app_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_id') }})
    r"""application id"""  
    app_ver: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_ver') }})
    r"""application version"""  
    last_modified: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_modified'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""last update date for the group"""  
    missing_symbols: list[MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbols] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('missing_symbols') }})
    r"""list of missing symbols"""  
    status: MissingSymbolGroupsGet200ApplicationJSONGroupsStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""group status"""  
    symbol_group_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symbol_group_id') }})
    r"""id of the symbol group"""  
    crash_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crash_count'), 'exclude': lambda f: f is None }})
    r"""number of crashes that belong to this group"""  
    error_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_count'), 'exclude': lambda f: f is None }})
    r"""number of errors that belong to this group"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MissingSymbolGroupsGet200ApplicationJSON:
    r"""grouped by missing symbols crashes response object"""
    
    groups: list[MissingSymbolGroupsGet200ApplicationJSONGroups] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups') }})
    r"""list of crash groups formed by missing symbols combination"""  
    total_crash_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_crash_count') }})
    r"""total number of crashes for all the groups"""  
    

@dataclasses.dataclass
class MissingSymbolGroupsGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    missing_symbol_groups_get_200_application_json_object: Optional[MissingSymbolGroupsGet200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    missing_symbol_groups_get_default_application_json_object: Optional[MissingSymbolGroupsGetDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    