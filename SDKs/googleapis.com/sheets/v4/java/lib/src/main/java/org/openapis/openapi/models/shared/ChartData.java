/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ChartData - The data included in a domain or series.
 */
public class ChartData {
    /**
     * The aggregation type for the series of a data source chart. Only supported for data source charts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aggregateType")
    public ChartDataAggregateTypeEnum aggregateType;
    public ChartData withAggregateType(ChartDataAggregateTypeEnum aggregateType) {
        this.aggregateType = aggregateType;
        return this;
    }
    
    /**
     * An unique identifier that references a data source column.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("columnReference")
    public DataSourceColumnReference columnReference;
    public ChartData withColumnReference(DataSourceColumnReference columnReference) {
        this.columnReference = columnReference;
        return this;
    }
    
    /**
     * An optional setting on the ChartData of the domain of a data source chart that defines buckets for the values in the domain rather than breaking out each individual value. For example, when plotting a data source chart, you can specify a histogram rule on the domain (it should only contain numeric values), grouping its values into buckets. Any values of a chart series that fall into the same bucket are aggregated based on the aggregate_type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groupRule")
    public ChartGroupRule groupRule;
    public ChartData withGroupRule(ChartGroupRule groupRule) {
        this.groupRule = groupRule;
        return this;
    }
    
    /**
     * Source ranges for a chart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceRange")
    public ChartSourceRange sourceRange;
    public ChartData withSourceRange(ChartSourceRange sourceRange) {
        this.sourceRange = sourceRange;
        return this;
    }
    
}
