"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import grpcroutedestination as shared_grpcroutedestination
from ..shared import grpcroutefaultinjectionpolicy as shared_grpcroutefaultinjectionpolicy
from ..shared import grpcrouteretrypolicy as shared_grpcrouteretrypolicy
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GrpcRouteRouteAction:
    r"""Specifies how to route matched traffic."""
    
    destinations: Optional[list[shared_grpcroutedestination.GrpcRouteDestination]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinations'), 'exclude': lambda f: f is None }})
    r"""Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations."""  
    fault_injection_policy: Optional[shared_grpcroutefaultinjectionpolicy.GrpcRouteFaultInjectionPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('faultInjectionPolicy'), 'exclude': lambda f: f is None }})
    r"""The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests."""  
    retry_policy: Optional[shared_grpcrouteretrypolicy.GrpcRouteRetryPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retryPolicy'), 'exclude': lambda f: f is None }})
    r"""The specifications for retries."""  
    timeout: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeout'), 'exclude': lambda f: f is None }})
    r"""Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries."""  
    