"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import code_scanning_alert_items as shared_code_scanning_alert_items
from ..shared import code_scanning_alert_severity_enum as shared_code_scanning_alert_severity_enum
from ..shared import code_scanning_alert_state_enum as shared_code_scanning_alert_state_enum
from ..shared import direction_enum as shared_direction_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CodeScanningListAlertsForRepoSortEnum(str, Enum):
    r"""The property by which to sort the results."""
    CREATED = 'created'
    UPDATED = 'updated'


@dataclasses.dataclass
class CodeScanningListAlertsForRepoRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    direction: Optional[shared_direction_enum.DirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""The direction to sort the results by."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results per page (max 100)."""  
    ref: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ref', 'style': 'form', 'explode': True }})
    r"""The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`."""  
    severity: Optional[shared_code_scanning_alert_severity_enum.CodeScanningAlertSeverityEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'severity', 'style': 'form', 'explode': True }})
    r"""If specified, only code scanning alerts with this severity will be returned."""  
    sort: Optional[CodeScanningListAlertsForRepoSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""The property by which to sort the results."""  
    state: Optional[shared_code_scanning_alert_state_enum.CodeScanningAlertStateEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""If specified, only code scanning alerts with this state will be returned."""  
    tool_guid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tool_guid', 'style': 'form', 'explode': True }})
    r"""The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both."""  
    tool_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tool_name', 'style': 'form', 'explode': True }})
    r"""The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodeScanningListAlertsForRepo503ApplicationJSON:
    r"""Service unavailable"""
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    documentation_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentation_url'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CodeScanningListAlertsForRepoResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Response if GitHub Advanced Security is not enabled for this repository"""  
    code_scanning_alert_items: Optional[list[shared_code_scanning_alert_items.CodeScanningAlertItems]] = dataclasses.field(default=None)
    r"""Response"""  
    code_scanning_list_alerts_for_repo_503_application_json_object: Optional[CodeScanningListAlertsForRepo503ApplicationJSON] = dataclasses.field(default=None)
    r"""Service unavailable"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    