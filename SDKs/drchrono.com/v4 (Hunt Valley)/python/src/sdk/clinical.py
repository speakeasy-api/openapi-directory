"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Clinical:
    r"""Create and manage clinical resources"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def allergies_create(self, request: operations.AllergiesCreateRequest, security: operations.AllergiesCreateSecurity) -> operations.AllergiesCreateResponse:
        r"""Create patient allergy"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/allergies'
        
        query_params = utils.get_query_params(operations.AllergiesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AllergiesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientAllergy])
                res.patient_allergy = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def allergies_list(self, request: operations.AllergiesListRequest, security: operations.AllergiesListSecurity) -> operations.AllergiesListResponse:
        r"""Retrieve or search patient allergies"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/allergies'
        
        query_params = utils.get_query_params(operations.AllergiesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AllergiesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AllergiesList200ApplicationJSON])
                res.allergies_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def allergies_partial_update(self, request: operations.AllergiesPartialUpdateRequest, security: operations.AllergiesPartialUpdateSecurity) -> operations.AllergiesPartialUpdateResponse:
        r"""Update an existing patient allergy"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AllergiesPartialUpdateRequest, base_url, '/api/allergies/{id}', request)
        
        query_params = utils.get_query_params(operations.AllergiesPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AllergiesPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def allergies_read(self, request: operations.AllergiesReadRequest, security: operations.AllergiesReadSecurity) -> operations.AllergiesReadResponse:
        r"""Retrieve an existing patient allergy"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AllergiesReadRequest, base_url, '/api/allergies/{id}', request)
        
        query_params = utils.get_query_params(operations.AllergiesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AllergiesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientAllergy])
                res.patient_allergy = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def allergies_update(self, request: operations.AllergiesUpdateRequest, security: operations.AllergiesUpdateSecurity) -> operations.AllergiesUpdateResponse:
        r"""Update an existing patient allergy"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AllergiesUpdateRequest, base_url, '/api/allergies/{id}', request)
        
        query_params = utils.get_query_params(operations.AllergiesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AllergiesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def amendments_create(self, request: operations.AmendmentsCreateRequest, security: operations.AmendmentsCreateSecurity) -> operations.AmendmentsCreateResponse:
        r"""Create patient amendments to a patient's clinical records"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/amendments'
        
        query_params = utils.get_query_params(operations.AmendmentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AmendmentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientAmendment])
                res.patient_amendment = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def amendments_delete(self, request: operations.AmendmentsDeleteRequest, security: operations.AmendmentsDeleteSecurity) -> operations.AmendmentsDeleteResponse:
        r"""Delete an existing patient amendment, you can only interact with amendments created by your API application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AmendmentsDeleteRequest, base_url, '/api/amendments/{id}', request)
        
        query_params = utils.get_query_params(operations.AmendmentsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AmendmentsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def amendments_list(self, request: operations.AmendmentsListRequest, security: operations.AmendmentsListSecurity) -> operations.AmendmentsListResponse:
        r"""Retrieve or search patient amendments. You can only interact with amendments created by your API application"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/amendments'
        
        query_params = utils.get_query_params(operations.AmendmentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AmendmentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AmendmentsList200ApplicationJSON])
                res.amendments_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def amendments_partial_update(self, request: operations.AmendmentsPartialUpdateRequest, security: operations.AmendmentsPartialUpdateSecurity) -> operations.AmendmentsPartialUpdateResponse:
        r"""Update an existing patient amendment, you can only interact with amendments created by your API application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AmendmentsPartialUpdateRequest, base_url, '/api/amendments/{id}', request)
        
        query_params = utils.get_query_params(operations.AmendmentsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AmendmentsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def amendments_read(self, request: operations.AmendmentsReadRequest, security: operations.AmendmentsReadSecurity) -> operations.AmendmentsReadResponse:
        r"""Retrieve an existing patient amendment, you can only interact with amendments created by your API application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AmendmentsReadRequest, base_url, '/api/amendments/{id}', request)
        
        query_params = utils.get_query_params(operations.AmendmentsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AmendmentsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientAmendment])
                res.patient_amendment = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def amendments_update(self, request: operations.AmendmentsUpdateRequest, security: operations.AmendmentsUpdateSecurity) -> operations.AmendmentsUpdateResponse:
        r"""Update an existing patient amendment, you can only interact with amendments created by your API application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AmendmentsUpdateRequest, base_url, '/api/amendments/{id}', request)
        
        query_params = utils.get_query_params(operations.AmendmentsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AmendmentsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def appointment_profiles_create(self, request: operations.AppointmentProfilesCreateRequest, security: operations.AppointmentProfilesCreateSecurity) -> operations.AppointmentProfilesCreateResponse:
        r"""Create appointment profiles for a doctor's calendar"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/appointment_profiles'
        
        query_params = utils.get_query_params(operations.AppointmentProfilesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentProfilesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AppointmentProfile])
                res.appointment_profile = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def appointment_profiles_delete(self, request: operations.AppointmentProfilesDeleteRequest, security: operations.AppointmentProfilesDeleteSecurity) -> operations.AppointmentProfilesDeleteResponse:
        r"""Delete an existing appointment profile"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppointmentProfilesDeleteRequest, base_url, '/api/appointment_profiles/{id}', request)
        
        query_params = utils.get_query_params(operations.AppointmentProfilesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentProfilesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def appointment_profiles_list(self, request: operations.AppointmentProfilesListRequest, security: operations.AppointmentProfilesListSecurity) -> operations.AppointmentProfilesListResponse:
        r"""Retrieve or search appointment profiles for a doctor's calendar"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/appointment_profiles'
        
        query_params = utils.get_query_params(operations.AppointmentProfilesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentProfilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppointmentProfilesList200ApplicationJSON])
                res.appointment_profiles_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def appointment_profiles_partial_update(self, request: operations.AppointmentProfilesPartialUpdateRequest, security: operations.AppointmentProfilesPartialUpdateSecurity) -> operations.AppointmentProfilesPartialUpdateResponse:
        r"""Update an existing appointment profile"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppointmentProfilesPartialUpdateRequest, base_url, '/api/appointment_profiles/{id}', request)
        
        query_params = utils.get_query_params(operations.AppointmentProfilesPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentProfilesPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def appointment_profiles_read(self, request: operations.AppointmentProfilesReadRequest, security: operations.AppointmentProfilesReadSecurity) -> operations.AppointmentProfilesReadResponse:
        r"""Retrieve an existing appointment profile"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppointmentProfilesReadRequest, base_url, '/api/appointment_profiles/{id}', request)
        
        query_params = utils.get_query_params(operations.AppointmentProfilesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentProfilesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AppointmentProfile])
                res.appointment_profile = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def appointment_profiles_update(self, request: operations.AppointmentProfilesUpdateRequest, security: operations.AppointmentProfilesUpdateSecurity) -> operations.AppointmentProfilesUpdateResponse:
        r"""Update an existing appointment profile"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppointmentProfilesUpdateRequest, base_url, '/api/appointment_profiles/{id}', request)
        
        query_params = utils.get_query_params(operations.AppointmentProfilesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentProfilesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def appointment_templates_create(self, request: operations.AppointmentTemplatesCreateRequest, security: operations.AppointmentTemplatesCreateSecurity) -> operations.AppointmentTemplatesCreateResponse:
        r"""Create appointment templates for a doctor's calendar"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/appointment_templates'
        
        query_params = utils.get_query_params(operations.AppointmentTemplatesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentTemplatesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AppointmentTemplate])
                res.appointment_template = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def appointment_templates_delete(self, request: operations.AppointmentTemplatesDeleteRequest, security: operations.AppointmentTemplatesDeleteSecurity) -> operations.AppointmentTemplatesDeleteResponse:
        r"""Delete an existing appointment template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppointmentTemplatesDeleteRequest, base_url, '/api/appointment_templates/{id}', request)
        
        query_params = utils.get_query_params(operations.AppointmentTemplatesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentTemplatesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def appointment_templates_list(self, request: operations.AppointmentTemplatesListRequest, security: operations.AppointmentTemplatesListSecurity) -> operations.AppointmentTemplatesListResponse:
        r"""Retrieve or search appointment templates for a doctor's calendar"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/appointment_templates'
        
        query_params = utils.get_query_params(operations.AppointmentTemplatesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentTemplatesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppointmentTemplatesList200ApplicationJSON])
                res.appointment_templates_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def appointment_templates_partial_update(self, request: operations.AppointmentTemplatesPartialUpdateRequest, security: operations.AppointmentTemplatesPartialUpdateSecurity) -> operations.AppointmentTemplatesPartialUpdateResponse:
        r"""Update an existing appointment template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppointmentTemplatesPartialUpdateRequest, base_url, '/api/appointment_templates/{id}', request)
        
        query_params = utils.get_query_params(operations.AppointmentTemplatesPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentTemplatesPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def appointment_templates_read(self, request: operations.AppointmentTemplatesReadRequest, security: operations.AppointmentTemplatesReadSecurity) -> operations.AppointmentTemplatesReadResponse:
        r"""Retrieve an existing appointment template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppointmentTemplatesReadRequest, base_url, '/api/appointment_templates/{id}', request)
        
        query_params = utils.get_query_params(operations.AppointmentTemplatesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentTemplatesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AppointmentTemplate])
                res.appointment_template = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def appointment_templates_update(self, request: operations.AppointmentTemplatesUpdateRequest, security: operations.AppointmentTemplatesUpdateSecurity) -> operations.AppointmentTemplatesUpdateResponse:
        r"""Update an existing appointment template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppointmentTemplatesUpdateRequest, base_url, '/api/appointment_templates/{id}', request)
        
        query_params = utils.get_query_params(operations.AppointmentTemplatesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentTemplatesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def appointments_create(self, request: operations.AppointmentsCreateRequest, security: operations.AppointmentsCreateSecurity) -> operations.AppointmentsCreateResponse:
        r"""Create a new appointment or break on doctor's calendar"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/appointments'
        
        query_params = utils.get_query_params(operations.AppointmentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Appointment])
                res.appointment = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 500]:
            pass

        return res

    def appointments_delete(self, request: operations.AppointmentsDeleteRequest, security: operations.AppointmentsDeleteSecurity) -> operations.AppointmentsDeleteResponse:
        r"""Delete an existing appointment or break"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppointmentsDeleteRequest, base_url, '/api/appointments/{id}', request)
        
        query_params = utils.get_query_params(operations.AppointmentsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def appointments_list(self, request: operations.AppointmentsListRequest, security: operations.AppointmentsListSecurity) -> operations.AppointmentsListResponse:
        r"""Retrieve or search appointment or breaks.
        <b>Note:</b> Either `since`, `date` or `date_range` parameter must be specified.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/appointments'
        
        query_params = utils.get_query_params(operations.AppointmentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppointmentsList200ApplicationJSON])
                res.appointments_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def appointments_partial_update(self, request: operations.AppointmentsPartialUpdateRequest, security: operations.AppointmentsPartialUpdateSecurity) -> operations.AppointmentsPartialUpdateResponse:
        r"""Update an existing appointment or break"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppointmentsPartialUpdateRequest, base_url, '/api/appointments/{id}', request)
        
        query_params = utils.get_query_params(operations.AppointmentsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def appointments_read(self, request: operations.AppointmentsReadRequest, security: operations.AppointmentsReadSecurity) -> operations.AppointmentsReadResponse:
        r"""Retrieve an existing appointment or break"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppointmentsReadRequest, base_url, '/api/appointments/{id}', request)
        
        query_params = utils.get_query_params(operations.AppointmentsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Appointment])
                res.appointment = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def appointments_update(self, request: operations.AppointmentsUpdateRequest, security: operations.AppointmentsUpdateSecurity) -> operations.AppointmentsUpdateResponse:
        r"""Update an existing appointment or break"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AppointmentsUpdateRequest, base_url, '/api/appointments/{id}', request)
        
        query_params = utils.get_query_params(operations.AppointmentsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppointmentsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def care_plans_list(self, request: operations.CarePlansListRequest, security: operations.CarePlansListSecurity) -> operations.CarePlansListResponse:
        r"""Retrieve or search care plans"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/care_plans'
        
        query_params = utils.get_query_params(operations.CarePlansListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CarePlansListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CarePlansList200ApplicationJSON])
                res.care_plans_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def care_plans_read(self, request: operations.CarePlansReadRequest, security: operations.CarePlansReadSecurity) -> operations.CarePlansReadResponse:
        r"""Retrieve an existing care plan"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CarePlansReadRequest, base_url, '/api/care_plans/{id}', request)
        
        query_params = utils.get_query_params(operations.CarePlansReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CarePlansReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CarePlan])
                res.care_plan = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def care_team_members_list(self, request: operations.CareTeamMembersListRequest, security: operations.CareTeamMembersListSecurity) -> operations.CareTeamMembersListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/care_team_members'
        
        query_params = utils.get_query_params(operations.CareTeamMembersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CareTeamMembersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CareTeamMembersList200ApplicationJSON])
                res.care_team_members_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def care_team_members_read(self, request: operations.CareTeamMembersReadRequest, security: operations.CareTeamMembersReadSecurity) -> operations.CareTeamMembersReadResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.CareTeamMembersReadRequest, base_url, '/api/care_team_members/{id}', request)
        
        query_params = utils.get_query_params(operations.CareTeamMembersReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CareTeamMembersReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CareTeamMember])
                res.care_team_member = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def claim_billing_notes_create(self, request: operations.ClaimBillingNotesCreateRequest, security: operations.ClaimBillingNotesCreateSecurity) -> operations.ClaimBillingNotesCreateResponse:
        r"""Create a new billing note"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/claim_billing_notes'
        
        query_params = utils.get_query_params(operations.ClaimBillingNotesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClaimBillingNotesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClaimBillingNotes])
                res.claim_billing_notes = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def claim_billing_notes_list(self, request: operations.ClaimBillingNotesListRequest, security: operations.ClaimBillingNotesListSecurity) -> operations.ClaimBillingNotesListResponse:
        r"""Retrieve or search billing notes"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/claim_billing_notes'
        
        query_params = utils.get_query_params(operations.ClaimBillingNotesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClaimBillingNotesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ClaimBillingNotesList200ApplicationJSON])
                res.claim_billing_notes_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def claim_billing_notes_read(self, request: operations.ClaimBillingNotesReadRequest, security: operations.ClaimBillingNotesReadSecurity) -> operations.ClaimBillingNotesReadResponse:
        r"""Retrieve an existing billing note"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClaimBillingNotesReadRequest, base_url, '/api/claim_billing_notes/{id}', request)
        
        query_params = utils.get_query_params(operations.ClaimBillingNotesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClaimBillingNotesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClaimBillingNotes])
                res.claim_billing_notes = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def clinical_note_field_types_list(self, request: operations.ClinicalNoteFieldTypesListRequest, security: operations.ClinicalNoteFieldTypesListSecurity) -> operations.ClinicalNoteFieldTypesListResponse:
        r"""Retrieve or search clinical note field types"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/clinical_note_field_types'
        
        query_params = utils.get_query_params(operations.ClinicalNoteFieldTypesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClinicalNoteFieldTypesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ClinicalNoteFieldTypesList200ApplicationJSON])
                res.clinical_note_field_types_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def clinical_note_field_types_read(self, request: operations.ClinicalNoteFieldTypesReadRequest, security: operations.ClinicalNoteFieldTypesReadSecurity) -> operations.ClinicalNoteFieldTypesReadResponse:
        r"""Retrieve an existing clinial note field type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClinicalNoteFieldTypesReadRequest, base_url, '/api/clinical_note_field_types/{id}', request)
        
        query_params = utils.get_query_params(operations.ClinicalNoteFieldTypesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClinicalNoteFieldTypesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SoapNoteLineItemFieldType])
                res.soap_note_line_item_field_type = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def clinical_note_field_values_create(self, request: operations.ClinicalNoteFieldValuesCreateRequest, security: operations.ClinicalNoteFieldValuesCreateSecurity) -> operations.ClinicalNoteFieldValuesCreateResponse:
        r"""Create clinical note field value"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/clinical_note_field_values'
        
        query_params = utils.get_query_params(operations.ClinicalNoteFieldValuesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClinicalNoteFieldValuesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SoapNoteLineItemFieldValue])
                res.soap_note_line_item_field_value = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def clinical_note_field_values_list(self, request: operations.ClinicalNoteFieldValuesListRequest, security: operations.ClinicalNoteFieldValuesListSecurity) -> operations.ClinicalNoteFieldValuesListResponse:
        r"""Retrieve or search clinical note field values"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/clinical_note_field_values'
        
        query_params = utils.get_query_params(operations.ClinicalNoteFieldValuesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClinicalNoteFieldValuesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ClinicalNoteFieldValuesList200ApplicationJSON])
                res.clinical_note_field_values_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def clinical_note_field_values_partial_update(self, request: operations.ClinicalNoteFieldValuesPartialUpdateRequest, security: operations.ClinicalNoteFieldValuesPartialUpdateSecurity) -> operations.ClinicalNoteFieldValuesPartialUpdateResponse:
        r"""Update an existing clinical note field value"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClinicalNoteFieldValuesPartialUpdateRequest, base_url, '/api/clinical_note_field_values/{id}', request)
        
        query_params = utils.get_query_params(operations.ClinicalNoteFieldValuesPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClinicalNoteFieldValuesPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def clinical_note_field_values_read(self, request: operations.ClinicalNoteFieldValuesReadRequest, security: operations.ClinicalNoteFieldValuesReadSecurity) -> operations.ClinicalNoteFieldValuesReadResponse:
        r"""Retrieve an existing clinical note field value"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClinicalNoteFieldValuesReadRequest, base_url, '/api/clinical_note_field_values/{id}', request)
        
        query_params = utils.get_query_params(operations.ClinicalNoteFieldValuesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClinicalNoteFieldValuesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SoapNoteLineItemFieldValue])
                res.soap_note_line_item_field_value = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def clinical_note_field_values_update(self, request: operations.ClinicalNoteFieldValuesUpdateRequest, security: operations.ClinicalNoteFieldValuesUpdateSecurity) -> operations.ClinicalNoteFieldValuesUpdateResponse:
        r"""Update an existing clinical note field value"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClinicalNoteFieldValuesUpdateRequest, base_url, '/api/clinical_note_field_values/{id}', request)
        
        query_params = utils.get_query_params(operations.ClinicalNoteFieldValuesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClinicalNoteFieldValuesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def clinical_note_templates_list(self, request: operations.ClinicalNoteTemplatesListRequest, security: operations.ClinicalNoteTemplatesListSecurity) -> operations.ClinicalNoteTemplatesListResponse:
        r"""Retrieve or search clinical note templates"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/clinical_note_templates'
        
        query_params = utils.get_query_params(operations.ClinicalNoteTemplatesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClinicalNoteTemplatesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ClinicalNoteTemplatesList200ApplicationJSON])
                res.clinical_note_templates_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def clinical_note_templates_read(self, request: operations.ClinicalNoteTemplatesReadRequest, security: operations.ClinicalNoteTemplatesReadSecurity) -> operations.ClinicalNoteTemplatesReadResponse:
        r"""Retrieve an existing clinical note tempalte"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClinicalNoteTemplatesReadRequest, base_url, '/api/clinical_note_templates/{id}', request)
        
        query_params = utils.get_query_params(operations.ClinicalNoteTemplatesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClinicalNoteTemplatesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SoapNoteCustomReport])
                res.soap_note_custom_report = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def clinical_notes_list(self, request: operations.ClinicalNotesListRequest, security: operations.ClinicalNotesListSecurity) -> operations.ClinicalNotesListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/clinical_notes'
        
        query_params = utils.get_query_params(operations.ClinicalNotesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClinicalNotesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ClinicalNotesList200ApplicationJSON])
                res.clinical_notes_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def clinical_notes_read(self, request: operations.ClinicalNotesReadRequest, security: operations.ClinicalNotesReadSecurity) -> operations.ClinicalNotesReadResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClinicalNotesReadRequest, base_url, '/api/clinical_notes/{id}', request)
        
        query_params = utils.get_query_params(operations.ClinicalNotesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClinicalNotesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClinicalNote])
                res.clinical_note = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def consent_forms_apply_to_appointment(self, request: operations.ConsentFormsApplyToAppointmentRequest, security: operations.ConsentFormsApplyToAppointmentSecurity) -> operations.ConsentFormsApplyToAppointmentResponse:
        r"""Assign (apply) a consent form to appointment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConsentFormsApplyToAppointmentRequest, base_url, '/api/consent_forms/{id}/apply_to_appointment', request)
        
        query_params = utils.get_query_params(operations.ConsentFormsApplyToAppointmentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConsentFormsApplyToAppointmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def consent_forms_create(self, request: operations.ConsentFormsCreateRequest, security: operations.ConsentFormsCreateSecurity) -> operations.ConsentFormsCreateResponse:
        r"""Create a patient consent form"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/consent_forms'
        
        query_params = utils.get_query_params(operations.ConsentFormsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConsentFormsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConsentForm])
                res.consent_form = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def consent_forms_list(self, request: operations.ConsentFormsListRequest, security: operations.ConsentFormsListSecurity) -> operations.ConsentFormsListResponse:
        r"""Retrieve or search patient consent forms"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/consent_forms'
        
        query_params = utils.get_query_params(operations.ConsentFormsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConsentFormsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ConsentFormsList200ApplicationJSON])
                res.consent_forms_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def consent_forms_partial_update(self, request: operations.ConsentFormsPartialUpdateRequest, security: operations.ConsentFormsPartialUpdateSecurity) -> operations.ConsentFormsPartialUpdateResponse:
        r"""Update an existing patient consent form"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConsentFormsPartialUpdateRequest, base_url, '/api/consent_forms/{id}', request)
        
        query_params = utils.get_query_params(operations.ConsentFormsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConsentFormsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def consent_forms_read(self, request: operations.ConsentFormsReadRequest, security: operations.ConsentFormsReadSecurity) -> operations.ConsentFormsReadResponse:
        r"""Retrieve an existing patient consent form"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConsentFormsReadRequest, base_url, '/api/consent_forms/{id}', request)
        
        query_params = utils.get_query_params(operations.ConsentFormsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConsentFormsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConsentForm])
                res.consent_form = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def consent_forms_unapply_from_appointment(self, request: operations.ConsentFormsUnapplyFromAppointmentRequest, security: operations.ConsentFormsUnapplyFromAppointmentSecurity) -> operations.ConsentFormsUnapplyFromAppointmentResponse:
        r"""Unassign (unapply) a consent form from appointment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConsentFormsUnapplyFromAppointmentRequest, base_url, '/api/consent_forms/{id}/unapply_from_appointment', request)
        
        query_params = utils.get_query_params(operations.ConsentFormsUnapplyFromAppointmentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConsentFormsUnapplyFromAppointmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def consent_forms_update(self, request: operations.ConsentFormsUpdateRequest, security: operations.ConsentFormsUpdateSecurity) -> operations.ConsentFormsUpdateResponse:
        r"""Update an existing patient consent form"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConsentFormsUpdateRequest, base_url, '/api/consent_forms/{id}', request)
        
        query_params = utils.get_query_params(operations.ConsentFormsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConsentFormsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def custom_appointment_fields_create(self, request: operations.CustomAppointmentFieldsCreateRequest, security: operations.CustomAppointmentFieldsCreateSecurity) -> operations.CustomAppointmentFieldsCreateResponse:
        r"""Create custom appointment fields"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/custom_appointment_fields'
        
        query_params = utils.get_query_params(operations.CustomAppointmentFieldsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomAppointmentFieldsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomAppointmentFieldType])
                res.custom_appointment_field_type = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def custom_appointment_fields_list(self, request: operations.CustomAppointmentFieldsListRequest, security: operations.CustomAppointmentFieldsListSecurity) -> operations.CustomAppointmentFieldsListResponse:
        r"""Retrieve or search custom appointment fields"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/custom_appointment_fields'
        
        query_params = utils.get_query_params(operations.CustomAppointmentFieldsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomAppointmentFieldsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CustomAppointmentFieldsList200ApplicationJSON])
                res.custom_appointment_fields_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def custom_appointment_fields_partial_update(self, request: operations.CustomAppointmentFieldsPartialUpdateRequest, security: operations.CustomAppointmentFieldsPartialUpdateSecurity) -> operations.CustomAppointmentFieldsPartialUpdateResponse:
        r"""Update an existing custom appointment field"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CustomAppointmentFieldsPartialUpdateRequest, base_url, '/api/custom_appointment_fields/{id}', request)
        
        query_params = utils.get_query_params(operations.CustomAppointmentFieldsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomAppointmentFieldsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def custom_appointment_fields_read(self, request: operations.CustomAppointmentFieldsReadRequest, security: operations.CustomAppointmentFieldsReadSecurity) -> operations.CustomAppointmentFieldsReadResponse:
        r"""Retrieve an existing custom appointment field"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CustomAppointmentFieldsReadRequest, base_url, '/api/custom_appointment_fields/{id}', request)
        
        query_params = utils.get_query_params(operations.CustomAppointmentFieldsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomAppointmentFieldsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomAppointmentFieldType])
                res.custom_appointment_field_type = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def custom_appointment_fields_update(self, request: operations.CustomAppointmentFieldsUpdateRequest, security: operations.CustomAppointmentFieldsUpdateSecurity) -> operations.CustomAppointmentFieldsUpdateResponse:
        r"""Update an existing custom appointment field"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CustomAppointmentFieldsUpdateRequest, base_url, '/api/custom_appointment_fields/{id}', request)
        
        query_params = utils.get_query_params(operations.CustomAppointmentFieldsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomAppointmentFieldsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def custom_demographics_create(self, request: operations.CustomDemographicsCreateRequest, security: operations.CustomDemographicsCreateSecurity) -> operations.CustomDemographicsCreateResponse:
        r"""Create custom demographics fields"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/custom_demographics'
        
        query_params = utils.get_query_params(operations.CustomDemographicsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomDemographicsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomPatientFieldType])
                res.custom_patient_field_type = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def custom_demographics_list(self, request: operations.CustomDemographicsListRequest, security: operations.CustomDemographicsListSecurity) -> operations.CustomDemographicsListResponse:
        r"""Retrieve or search custom demographics fields"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/custom_demographics'
        
        query_params = utils.get_query_params(operations.CustomDemographicsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomDemographicsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CustomDemographicsList200ApplicationJSON])
                res.custom_demographics_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def custom_demographics_partial_update(self, request: operations.CustomDemographicsPartialUpdateRequest, security: operations.CustomDemographicsPartialUpdateSecurity) -> operations.CustomDemographicsPartialUpdateResponse:
        r"""Update an existing custom demographics field"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CustomDemographicsPartialUpdateRequest, base_url, '/api/custom_demographics/{id}', request)
        
        query_params = utils.get_query_params(operations.CustomDemographicsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomDemographicsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def custom_demographics_read(self, request: operations.CustomDemographicsReadRequest, security: operations.CustomDemographicsReadSecurity) -> operations.CustomDemographicsReadResponse:
        r"""Retrieve an existing custom demographics field"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CustomDemographicsReadRequest, base_url, '/api/custom_demographics/{id}', request)
        
        query_params = utils.get_query_params(operations.CustomDemographicsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomDemographicsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomPatientFieldType])
                res.custom_patient_field_type = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def custom_demographics_update(self, request: operations.CustomDemographicsUpdateRequest, security: operations.CustomDemographicsUpdateSecurity) -> operations.CustomDemographicsUpdateResponse:
        r"""Update an existing custom demographics field"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CustomDemographicsUpdateRequest, base_url, '/api/custom_demographics/{id}', request)
        
        query_params = utils.get_query_params(operations.CustomDemographicsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomDemographicsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def custom_vitals_list(self, request: operations.CustomVitalsListRequest, security: operations.CustomVitalsListSecurity) -> operations.CustomVitalsListResponse:
        r"""Retrieve or search custom vital types"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/custom_vitals'
        
        query_params = utils.get_query_params(operations.CustomVitalsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomVitalsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CustomVitalsList200ApplicationJSON])
                res.custom_vitals_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def custom_vitals_read(self, request: operations.CustomVitalsReadRequest, security: operations.CustomVitalsReadSecurity) -> operations.CustomVitalsReadResponse:
        r"""Retrieve an existing custom vital type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CustomVitalsReadRequest, base_url, '/api/custom_vitals/{id}', request)
        
        query_params = utils.get_query_params(operations.CustomVitalsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomVitalsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVitalType])
                res.custom_vital_type = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def documents_create(self, request: operations.DocumentsCreateRequest, security: operations.DocumentsCreateSecurity) -> operations.DocumentsCreateResponse:
        r"""Create documents"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/documents'
        
        query_params = utils.get_query_params(operations.DocumentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScannedClinicalDocument])
                res.scanned_clinical_document = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def documents_delete(self, request: operations.DocumentsDeleteRequest, security: operations.DocumentsDeleteSecurity) -> operations.DocumentsDeleteResponse:
        r"""Delete an existing appointment template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentsDeleteRequest, base_url, '/api/documents/{id}', request)
        
        query_params = utils.get_query_params(operations.DocumentsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def documents_list(self, request: operations.DocumentsListRequest, security: operations.DocumentsListSecurity) -> operations.DocumentsListResponse:
        r"""Retrieve or search documents"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/documents'
        
        query_params = utils.get_query_params(operations.DocumentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DocumentsList200ApplicationJSON])
                res.documents_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def documents_partial_update(self, request: operations.DocumentsPartialUpdateRequest, security: operations.DocumentsPartialUpdateSecurity) -> operations.DocumentsPartialUpdateResponse:
        r"""Update an existing appointment template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentsPartialUpdateRequest, base_url, '/api/documents/{id}', request)
        
        query_params = utils.get_query_params(operations.DocumentsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def documents_read(self, request: operations.DocumentsReadRequest, security: operations.DocumentsReadSecurity) -> operations.DocumentsReadResponse:
        r"""Retrieve an existing appointment template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentsReadRequest, base_url, '/api/documents/{id}', request)
        
        query_params = utils.get_query_params(operations.DocumentsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScannedClinicalDocument])
                res.scanned_clinical_document = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def documents_update(self, request: operations.DocumentsUpdateRequest, security: operations.DocumentsUpdateSecurity) -> operations.DocumentsUpdateResponse:
        r"""Update an existing appointment template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentsUpdateRequest, base_url, '/api/documents/{id}', request)
        
        query_params = utils.get_query_params(operations.DocumentsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def eobs_create(self, request: operations.EobsCreateRequest, security: operations.EobsCreateSecurity) -> operations.EobsCreateResponse:
        r"""Create EOB object"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/eobs'
        
        query_params = utils.get_query_params(operations.EobsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EobsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EOBObject])
                res.eob_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def eobs_list(self, request: operations.EobsListRequest, security: operations.EobsListSecurity) -> operations.EobsListResponse:
        r"""Retrieve or search EOB objects"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/eobs'
        
        query_params = utils.get_query_params(operations.EobsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EobsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EobsList200ApplicationJSON])
                res.eobs_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def eobs_read(self, request: operations.EobsReadRequest, security: operations.EobsReadSecurity) -> operations.EobsReadResponse:
        r"""Retrieve an existing EOB object"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EobsReadRequest, base_url, '/api/eobs/{id}', request)
        
        query_params = utils.get_query_params(operations.EobsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EobsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EOBObject])
                res.eob_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def fee_schedules_list(self, request: operations.FeeSchedulesListRequest, security: operations.FeeSchedulesListSecurity) -> operations.FeeSchedulesListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/fee_schedules'
        
        query_params = utils.get_query_params(operations.FeeSchedulesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FeeSchedulesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.FeeSchedulesList200ApplicationJSON])
                res.fee_schedules_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def fee_schedules_read(self, request: operations.FeeSchedulesReadRequest, security: operations.FeeSchedulesReadSecurity) -> operations.FeeSchedulesReadResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.FeeSchedulesReadRequest, base_url, '/api/fee_schedules/{id}', request)
        
        query_params = utils.get_query_params(operations.FeeSchedulesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FeeSchedulesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DoctorFeeSchedule])
                res.doctor_fee_schedule = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def implantable_devices_list(self, request: operations.ImplantableDevicesListRequest, security: operations.ImplantableDevicesListSecurity) -> operations.ImplantableDevicesListResponse:
        r"""Retrieve or search implantable devices"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/implantable_devices'
        
        query_params = utils.get_query_params(operations.ImplantableDevicesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImplantableDevicesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ImplantableDevicesList200ApplicationJSON])
                res.implantable_devices_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def implantable_devices_read(self, request: operations.ImplantableDevicesReadRequest, security: operations.ImplantableDevicesReadSecurity) -> operations.ImplantableDevicesReadResponse:
        r"""Retrieve an existing implantable device"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImplantableDevicesReadRequest, base_url, '/api/implantable_devices/{id}', request)
        
        query_params = utils.get_query_params(operations.ImplantableDevicesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImplantableDevicesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImplantableDevice])
                res.implantable_device = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def insurances_list(self, request: operations.InsurancesListRequest, security: operations.InsurancesListSecurity) -> operations.InsurancesListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/insurances'
        
        query_params = utils.get_query_params(operations.InsurancesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InsurancesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.InsurancesList200ApplicationJSON])
                res.insurances_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def insurances_read(self, request: operations.InsurancesReadRequest, security: operations.InsurancesReadSecurity) -> operations.InsurancesReadResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.InsurancesReadRequest, base_url, '/api/insurances/{id}', request)
        
        query_params = utils.get_query_params(operations.InsurancesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InsurancesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Insurance])
                res.insurance = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def lab_documents_create(self, request: operations.LabDocumentsCreateRequest, security: operations.LabDocumentsCreateSecurity) -> operations.LabDocumentsCreateResponse:
        r"""Create lab order documents. An example lab workflow is as following:
        
        - When you get orders, submit them via `/api/lab_orders`, such that doctors can see them in drchrono.
        
        - When results come in, submit the result document PDF via `/api/lab_documents` and submit the results data via `/api/lab_results`
        
        - Update `/api/lab_orders` status
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/lab_documents'
        
        query_params = utils.get_query_params(operations.LabDocumentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabDocumentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LabOrderDocument])
                res.lab_order_document = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def lab_documents_delete(self, request: operations.LabDocumentsDeleteRequest, security: operations.LabDocumentsDeleteSecurity) -> operations.LabDocumentsDeleteResponse:
        r"""Delete an existing lab order document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabDocumentsDeleteRequest, base_url, '/api/lab_documents/{id}', request)
        
        query_params = utils.get_query_params(operations.LabDocumentsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabDocumentsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def lab_documents_list(self, request: operations.LabDocumentsListRequest, security: operations.LabDocumentsListSecurity) -> operations.LabDocumentsListResponse:
        r"""Retrieve or search lab order documents"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/lab_documents'
        
        query_params = utils.get_query_params(operations.LabDocumentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabDocumentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.LabDocumentsList200ApplicationJSON])
                res.lab_documents_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def lab_documents_partial_update(self, request: operations.LabDocumentsPartialUpdateRequest, security: operations.LabDocumentsPartialUpdateSecurity) -> operations.LabDocumentsPartialUpdateResponse:
        r"""Update an existing lab order document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabDocumentsPartialUpdateRequest, base_url, '/api/lab_documents/{id}', request)
        
        query_params = utils.get_query_params(operations.LabDocumentsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabDocumentsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def lab_documents_read(self, request: operations.LabDocumentsReadRequest, security: operations.LabDocumentsReadSecurity) -> operations.LabDocumentsReadResponse:
        r"""Retrieve an existing lab order document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabDocumentsReadRequest, base_url, '/api/lab_documents/{id}', request)
        
        query_params = utils.get_query_params(operations.LabDocumentsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabDocumentsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LabOrderDocument])
                res.lab_order_document = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def lab_documents_update(self, request: operations.LabDocumentsUpdateRequest, security: operations.LabDocumentsUpdateSecurity) -> operations.LabDocumentsUpdateResponse:
        r"""Update an existing lab order document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabDocumentsUpdateRequest, base_url, '/api/lab_documents/{id}', request)
        
        query_params = utils.get_query_params(operations.LabDocumentsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabDocumentsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def lab_orders_create(self, request: operations.LabOrdersCreateRequest, security: operations.LabOrdersCreateSecurity) -> operations.LabOrdersCreateResponse:
        r"""Create lab orders. An example lab workflow is as following:
        
        - When you get orders, submit them via `/api/lab_orders`, such that doctors can see them in drchrono.
        
        - When results come in, submit the result document PDF via `/api/lab_documents` and submit the results data via `/api/lab_results`
        
        - Update `/api/lab_orders` status
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/lab_orders'
        
        query_params = utils.get_query_params(operations.LabOrdersCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabOrdersCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LabOrder])
                res.lab_order = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def lab_orders_delete(self, request: operations.LabOrdersDeleteRequest, security: operations.LabOrdersDeleteSecurity) -> operations.LabOrdersDeleteResponse:
        r"""Delete an existing lab order"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabOrdersDeleteRequest, base_url, '/api/lab_orders/{id}', request)
        
        query_params = utils.get_query_params(operations.LabOrdersDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabOrdersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def lab_orders_list(self, request: operations.LabOrdersListRequest, security: operations.LabOrdersListSecurity) -> operations.LabOrdersListResponse:
        r"""Retrieve or search lab orders"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/lab_orders'
        
        query_params = utils.get_query_params(operations.LabOrdersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabOrdersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.LabOrdersList200ApplicationJSON])
                res.lab_orders_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def lab_orders_partial_update(self, request: operations.LabOrdersPartialUpdateRequest, security: operations.LabOrdersPartialUpdateSecurity) -> operations.LabOrdersPartialUpdateResponse:
        r"""Update an existing lab order"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabOrdersPartialUpdateRequest, base_url, '/api/lab_orders/{id}', request)
        
        query_params = utils.get_query_params(operations.LabOrdersPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabOrdersPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def lab_orders_read(self, request: operations.LabOrdersReadRequest, security: operations.LabOrdersReadSecurity) -> operations.LabOrdersReadResponse:
        r"""Retrieve an existing lab order"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabOrdersReadRequest, base_url, '/api/lab_orders/{id}', request)
        
        query_params = utils.get_query_params(operations.LabOrdersReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabOrdersReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LabOrder])
                res.lab_order = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def lab_orders_summary_list(self, request: operations.LabOrdersSummaryListRequest, security: operations.LabOrdersSummaryListSecurity) -> operations.LabOrdersSummaryListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/lab_orders_summary'
        
        query_params = utils.get_query_params(operations.LabOrdersSummaryListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabOrdersSummaryListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.LabOrdersSummaryList200ApplicationJSON])
                res.lab_orders_summary_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def lab_orders_summary_read(self, request: operations.LabOrdersSummaryReadRequest, security: operations.LabOrdersSummaryReadSecurity) -> operations.LabOrdersSummaryReadResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabOrdersSummaryReadRequest, base_url, '/api/lab_orders_summary/{id}', request)
        
        query_params = utils.get_query_params(operations.LabOrdersSummaryReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabOrdersSummaryReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LabOrder])
                res.lab_order = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def lab_orders_update(self, request: operations.LabOrdersUpdateRequest, security: operations.LabOrdersUpdateSecurity) -> operations.LabOrdersUpdateResponse:
        r"""Update an existing lab order"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabOrdersUpdateRequest, base_url, '/api/lab_orders/{id}', request)
        
        query_params = utils.get_query_params(operations.LabOrdersUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabOrdersUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def lab_results_create(self, request: operations.LabResultsCreateRequest, security: operations.LabResultsCreateSecurity) -> operations.LabResultsCreateResponse:
        r"""Create lab results. An example lab workflow is as following:
        
        - When you get orders, submit them via `/api/lab_orders`, such that doctors can see them in drchrono.
        
        - When results come in, submit the result document PDF via `/api/lab_documents` and submit the results data via `/api/lab_results`
        
        - Update `/api/lab_orders` status
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/lab_results'
        
        query_params = utils.get_query_params(operations.LabResultsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabResultsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LabResult])
                res.lab_result = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def lab_results_delete(self, request: operations.LabResultsDeleteRequest, security: operations.LabResultsDeleteSecurity) -> operations.LabResultsDeleteResponse:
        r"""Delete an existing lab result"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabResultsDeleteRequest, base_url, '/api/lab_results/{id}', request)
        
        query_params = utils.get_query_params(operations.LabResultsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabResultsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def lab_results_list(self, request: operations.LabResultsListRequest, security: operations.LabResultsListSecurity) -> operations.LabResultsListResponse:
        r"""Retrieve or search lab results"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/lab_results'
        
        query_params = utils.get_query_params(operations.LabResultsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabResultsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.LabResultsList200ApplicationJSON])
                res.lab_results_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def lab_results_partial_update(self, request: operations.LabResultsPartialUpdateRequest, security: operations.LabResultsPartialUpdateSecurity) -> operations.LabResultsPartialUpdateResponse:
        r"""Update an existing lab result"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabResultsPartialUpdateRequest, base_url, '/api/lab_results/{id}', request)
        
        query_params = utils.get_query_params(operations.LabResultsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabResultsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def lab_results_read(self, request: operations.LabResultsReadRequest, security: operations.LabResultsReadSecurity) -> operations.LabResultsReadResponse:
        r"""Retrieve an existing lab result"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabResultsReadRequest, base_url, '/api/lab_results/{id}', request)
        
        query_params = utils.get_query_params(operations.LabResultsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabResultsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LabResult])
                res.lab_result = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def lab_results_update(self, request: operations.LabResultsUpdateRequest, security: operations.LabResultsUpdateSecurity) -> operations.LabResultsUpdateResponse:
        r"""Update an existing lab result"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabResultsUpdateRequest, base_url, '/api/lab_results/{id}', request)
        
        query_params = utils.get_query_params(operations.LabResultsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabResultsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def lab_tests_create(self, request: operations.LabTestsCreateRequest, security: operations.LabTestsCreateSecurity) -> operations.LabTestsCreateResponse:
        r"""Create lab tests. An example lab workflow is as following:
        
        - When you get orders, submit them via `/api/lab_orders`, such that doctors can see them in drchrono.
        
        - When results come in, submit the result document PDF via `/api/lab_documents` and submit the results data via `/api/lab_results`
        
        - Update `/api/lab_orders` status
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/lab_tests'
        
        query_params = utils.get_query_params(operations.LabTestsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabTestsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LabTest])
                res.lab_test = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def lab_tests_delete(self, request: operations.LabTestsDeleteRequest, security: operations.LabTestsDeleteSecurity) -> operations.LabTestsDeleteResponse:
        r"""Delete an existing lab test"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabTestsDeleteRequest, base_url, '/api/lab_tests/{id}', request)
        
        query_params = utils.get_query_params(operations.LabTestsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabTestsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def lab_tests_list(self, request: operations.LabTestsListRequest, security: operations.LabTestsListSecurity) -> operations.LabTestsListResponse:
        r"""Retrieve or search lab tests"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/lab_tests'
        
        query_params = utils.get_query_params(operations.LabTestsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabTestsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.LabTestsList200ApplicationJSON])
                res.lab_tests_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def lab_tests_partial_update(self, request: operations.LabTestsPartialUpdateRequest, security: operations.LabTestsPartialUpdateSecurity) -> operations.LabTestsPartialUpdateResponse:
        r"""Update an existing lab test"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabTestsPartialUpdateRequest, base_url, '/api/lab_tests/{id}', request)
        
        query_params = utils.get_query_params(operations.LabTestsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabTestsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def lab_tests_read(self, request: operations.LabTestsReadRequest, security: operations.LabTestsReadSecurity) -> operations.LabTestsReadResponse:
        r"""Retrieve an existing lab test"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabTestsReadRequest, base_url, '/api/lab_tests/{id}', request)
        
        query_params = utils.get_query_params(operations.LabTestsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabTestsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LabTest])
                res.lab_test = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def lab_tests_update(self, request: operations.LabTestsUpdateRequest, security: operations.LabTestsUpdateSecurity) -> operations.LabTestsUpdateResponse:
        r"""Update an existing lab test"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LabTestsUpdateRequest, base_url, '/api/lab_tests/{id}', request)
        
        query_params = utils.get_query_params(operations.LabTestsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LabTestsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def medications_append_to_pharmacy_note(self, request: operations.MedicationsAppendToPharmacyNoteRequest, security: operations.MedicationsAppendToPharmacyNoteSecurity) -> operations.MedicationsAppendToPharmacyNoteResponse:
        r"""Append a message to the \\"pharmacy_note\\" section of the prescription, in a new paragraph"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MedicationsAppendToPharmacyNoteRequest, base_url, '/api/medications/{id}/append_to_pharmacy_note', request)
        
        query_params = utils.get_query_params(operations.MedicationsAppendToPharmacyNoteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MedicationsAppendToPharmacyNoteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def medications_create(self, request: operations.MedicationsCreateRequest, security: operations.MedicationsCreateSecurity) -> operations.MedicationsCreateResponse:
        r"""Create patient medications"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/medications'
        
        query_params = utils.get_query_params(operations.MedicationsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MedicationsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientDrug])
                res.patient_drug = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def medications_list(self, request: operations.MedicationsListRequest, security: operations.MedicationsListSecurity) -> operations.MedicationsListResponse:
        r"""Retrieve or search patient medications"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/medications'
        
        query_params = utils.get_query_params(operations.MedicationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MedicationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MedicationsList200ApplicationJSON])
                res.medications_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def medications_partial_update(self, request: operations.MedicationsPartialUpdateRequest, security: operations.MedicationsPartialUpdateSecurity) -> operations.MedicationsPartialUpdateResponse:
        r"""Update an existing patient medications"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MedicationsPartialUpdateRequest, base_url, '/api/medications/{id}', request)
        
        query_params = utils.get_query_params(operations.MedicationsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MedicationsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def medications_read(self, request: operations.MedicationsReadRequest, security: operations.MedicationsReadSecurity) -> operations.MedicationsReadResponse:
        r"""Retrieve an existing patient medications"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MedicationsReadRequest, base_url, '/api/medications/{id}', request)
        
        query_params = utils.get_query_params(operations.MedicationsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MedicationsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientDrug])
                res.patient_drug = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def medications_update(self, request: operations.MedicationsUpdateRequest, security: operations.MedicationsUpdateSecurity) -> operations.MedicationsUpdateResponse:
        r"""Update an existing patient medications"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MedicationsUpdateRequest, base_url, '/api/medications/{id}', request)
        
        query_params = utils.get_query_params(operations.MedicationsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MedicationsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_communications_create(self, request: operations.PatientCommunicationsCreateRequest, security: operations.PatientCommunicationsCreateSecurity) -> operations.PatientCommunicationsCreateResponse:
        r"""Create patient communication for CQM"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_communications'
        
        query_params = utils.get_query_params(operations.PatientCommunicationsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientCommunicationsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientCommunication])
                res.patient_communication = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_communications_list(self, request: operations.PatientCommunicationsListRequest, security: operations.PatientCommunicationsListSecurity) -> operations.PatientCommunicationsListResponse:
        r"""Retrieve or search patient communications for CQM"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_communications'
        
        query_params = utils.get_query_params(operations.PatientCommunicationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientCommunicationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatientCommunicationsList200ApplicationJSON])
                res.patient_communications_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_communications_partial_update(self, request: operations.PatientCommunicationsPartialUpdateRequest, security: operations.PatientCommunicationsPartialUpdateSecurity) -> operations.PatientCommunicationsPartialUpdateResponse:
        r"""Update an existing patient communication for CQM"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientCommunicationsPartialUpdateRequest, base_url, '/api/patient_communications/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientCommunicationsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientCommunicationsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_communications_read(self, request: operations.PatientCommunicationsReadRequest, security: operations.PatientCommunicationsReadSecurity) -> operations.PatientCommunicationsReadResponse:
        r"""Retrieve an existing patient communication for CQM"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientCommunicationsReadRequest, base_url, '/api/patient_communications/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientCommunicationsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientCommunicationsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientCommunication])
                res.patient_communication = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_communications_update(self, request: operations.PatientCommunicationsUpdateRequest, security: operations.PatientCommunicationsUpdateSecurity) -> operations.PatientCommunicationsUpdateResponse:
        r"""Update an existing patient communication for CQM"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientCommunicationsUpdateRequest, base_url, '/api/patient_communications/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientCommunicationsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientCommunicationsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_flag_types_create(self, request: operations.PatientFlagTypesCreateRequest, security: operations.PatientFlagTypesCreateSecurity) -> operations.PatientFlagTypesCreateResponse:
        r"""Create patient flag types"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_flag_types'
        
        query_params = utils.get_query_params(operations.PatientFlagTypesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientFlagTypesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientFlagType])
                res.patient_flag_type = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_flag_types_list(self, request: operations.PatientFlagTypesListRequest, security: operations.PatientFlagTypesListSecurity) -> operations.PatientFlagTypesListResponse:
        r"""Retrieve or search patient flag types"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_flag_types'
        
        query_params = utils.get_query_params(operations.PatientFlagTypesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientFlagTypesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatientFlagTypesList200ApplicationJSON])
                res.patient_flag_types_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_flag_types_partial_update(self, request: operations.PatientFlagTypesPartialUpdateRequest, security: operations.PatientFlagTypesPartialUpdateSecurity) -> operations.PatientFlagTypesPartialUpdateResponse:
        r"""Update an existing patient flag type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientFlagTypesPartialUpdateRequest, base_url, '/api/patient_flag_types/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientFlagTypesPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientFlagTypesPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_flag_types_read(self, request: operations.PatientFlagTypesReadRequest, security: operations.PatientFlagTypesReadSecurity) -> operations.PatientFlagTypesReadResponse:
        r"""Retrieve an existing patient flag type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientFlagTypesReadRequest, base_url, '/api/patient_flag_types/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientFlagTypesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientFlagTypesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientFlagType])
                res.patient_flag_type = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_flag_types_update(self, request: operations.PatientFlagTypesUpdateRequest, security: operations.PatientFlagTypesUpdateSecurity) -> operations.PatientFlagTypesUpdateResponse:
        r"""Update an existing patient flag type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientFlagTypesUpdateRequest, base_url, '/api/patient_flag_types/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientFlagTypesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientFlagTypesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_interventions_create(self, request: operations.PatientInterventionsCreateRequest, security: operations.PatientInterventionsCreateSecurity) -> operations.PatientInterventionsCreateResponse:
        r"""Create patient intervention for CQM"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_interventions'
        
        query_params = utils.get_query_params(operations.PatientInterventionsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientInterventionsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientIntervention])
                res.patient_intervention = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_interventions_list(self, request: operations.PatientInterventionsListRequest, security: operations.PatientInterventionsListSecurity) -> operations.PatientInterventionsListResponse:
        r"""Retrieve or search patient interventions for CQM"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_interventions'
        
        query_params = utils.get_query_params(operations.PatientInterventionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientInterventionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatientInterventionsList200ApplicationJSON])
                res.patient_interventions_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_interventions_partial_update(self, request: operations.PatientInterventionsPartialUpdateRequest, security: operations.PatientInterventionsPartialUpdateSecurity) -> operations.PatientInterventionsPartialUpdateResponse:
        r"""Update an existing patient intervention for CQM"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientInterventionsPartialUpdateRequest, base_url, '/api/patient_interventions/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientInterventionsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientInterventionsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_interventions_read(self, request: operations.PatientInterventionsReadRequest, security: operations.PatientInterventionsReadSecurity) -> operations.PatientInterventionsReadResponse:
        r"""Retrieve an existing patient intervention for CQM"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientInterventionsReadRequest, base_url, '/api/patient_interventions/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientInterventionsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientInterventionsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientIntervention])
                res.patient_intervention = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_interventions_update(self, request: operations.PatientInterventionsUpdateRequest, security: operations.PatientInterventionsUpdateSecurity) -> operations.PatientInterventionsUpdateResponse:
        r"""Update an existing patient intervention for CQM"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientInterventionsUpdateRequest, base_url, '/api/patient_interventions/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientInterventionsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientInterventionsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_lab_results_create(self, request: operations.PatientLabResultsCreateRequest, security: operations.PatientLabResultsCreateSecurity) -> operations.PatientLabResultsCreateResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_lab_results'
        
        query_params = utils.get_query_params(operations.PatientLabResultsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientLabResultsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientLabResultSet])
                res.patient_lab_result_set = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_lab_results_delete(self, request: operations.PatientLabResultsDeleteRequest, security: operations.PatientLabResultsDeleteSecurity) -> operations.PatientLabResultsDeleteResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientLabResultsDeleteRequest, base_url, '/api/patient_lab_results/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientLabResultsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientLabResultsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_lab_results_list(self, request: operations.PatientLabResultsListRequest, security: operations.PatientLabResultsListSecurity) -> operations.PatientLabResultsListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_lab_results'
        
        query_params = utils.get_query_params(operations.PatientLabResultsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientLabResultsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatientLabResultsList200ApplicationJSON])
                res.patient_lab_results_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_lab_results_partial_update(self, request: operations.PatientLabResultsPartialUpdateRequest, security: operations.PatientLabResultsPartialUpdateSecurity) -> operations.PatientLabResultsPartialUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientLabResultsPartialUpdateRequest, base_url, '/api/patient_lab_results/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientLabResultsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientLabResultsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_lab_results_read(self, request: operations.PatientLabResultsReadRequest, security: operations.PatientLabResultsReadSecurity) -> operations.PatientLabResultsReadResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientLabResultsReadRequest, base_url, '/api/patient_lab_results/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientLabResultsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientLabResultsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientLabResultSet])
                res.patient_lab_result_set = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_lab_results_update(self, request: operations.PatientLabResultsUpdateRequest, security: operations.PatientLabResultsUpdateSecurity) -> operations.PatientLabResultsUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientLabResultsUpdateRequest, base_url, '/api/patient_lab_results/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientLabResultsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientLabResultsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_messages_create(self, request: operations.PatientMessagesCreateRequest, security: operations.PatientMessagesCreateSecurity) -> operations.PatientMessagesCreateResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_messages'
        
        query_params = utils.get_query_params(operations.PatientMessagesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientMessagesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientMessage])
                res.patient_message = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_messages_list(self, request: operations.PatientMessagesListRequest, security: operations.PatientMessagesListSecurity) -> operations.PatientMessagesListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_messages'
        
        query_params = utils.get_query_params(operations.PatientMessagesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientMessagesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatientMessagesList200ApplicationJSON])
                res.patient_messages_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_messages_partial_update(self, request: operations.PatientMessagesPartialUpdateRequest, security: operations.PatientMessagesPartialUpdateSecurity) -> operations.PatientMessagesPartialUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientMessagesPartialUpdateRequest, base_url, '/api/patient_messages/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientMessagesPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientMessagesPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_messages_read(self, request: operations.PatientMessagesReadRequest, security: operations.PatientMessagesReadSecurity) -> operations.PatientMessagesReadResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientMessagesReadRequest, base_url, '/api/patient_messages/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientMessagesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientMessagesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientMessage])
                res.patient_message = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_messages_update(self, request: operations.PatientMessagesUpdateRequest, security: operations.PatientMessagesUpdateSecurity) -> operations.PatientMessagesUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientMessagesUpdateRequest, base_url, '/api/patient_messages/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientMessagesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientMessagesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_physical_exams_create(self, request: operations.PatientPhysicalExamsCreateRequest, security: operations.PatientPhysicalExamsCreateSecurity) -> operations.PatientPhysicalExamsCreateResponse:
        r"""Create patient physical exam for CQM"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_physical_exams'
        
        query_params = utils.get_query_params(operations.PatientPhysicalExamsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientPhysicalExamsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientPhysicalExam])
                res.patient_physical_exam = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_physical_exams_list(self, request: operations.PatientPhysicalExamsListRequest, security: operations.PatientPhysicalExamsListSecurity) -> operations.PatientPhysicalExamsListResponse:
        r"""Retrieve or search patient physical exams for CQM"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_physical_exams'
        
        query_params = utils.get_query_params(operations.PatientPhysicalExamsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientPhysicalExamsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatientPhysicalExamsList200ApplicationJSON])
                res.patient_physical_exams_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_physical_exams_partial_update(self, request: operations.PatientPhysicalExamsPartialUpdateRequest, security: operations.PatientPhysicalExamsPartialUpdateSecurity) -> operations.PatientPhysicalExamsPartialUpdateResponse:
        r"""Update an existing patient physical exam for CQM"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientPhysicalExamsPartialUpdateRequest, base_url, '/api/patient_physical_exams/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientPhysicalExamsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientPhysicalExamsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_physical_exams_read(self, request: operations.PatientPhysicalExamsReadRequest, security: operations.PatientPhysicalExamsReadSecurity) -> operations.PatientPhysicalExamsReadResponse:
        r"""Retrieve an existing patient physical exam for CQM"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientPhysicalExamsReadRequest, base_url, '/api/patient_physical_exams/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientPhysicalExamsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientPhysicalExamsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientPhysicalExam])
                res.patient_physical_exam = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_physical_exams_update(self, request: operations.PatientPhysicalExamsUpdateRequest, security: operations.PatientPhysicalExamsUpdateSecurity) -> operations.PatientPhysicalExamsUpdateResponse:
        r"""Update an existing patient physical exam for CQM"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientPhysicalExamsUpdateRequest, base_url, '/api/patient_physical_exams/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientPhysicalExamsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientPhysicalExamsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_risk_assessments_create(self, request: operations.PatientRiskAssessmentsCreateRequest, security: operations.PatientRiskAssessmentsCreateSecurity) -> operations.PatientRiskAssessmentsCreateResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_risk_assessments'
        
        query_params = utils.get_query_params(operations.PatientRiskAssessmentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientRiskAssessmentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientRiskAssessment])
                res.patient_risk_assessment = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_risk_assessments_list(self, request: operations.PatientRiskAssessmentsListRequest, security: operations.PatientRiskAssessmentsListSecurity) -> operations.PatientRiskAssessmentsListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_risk_assessments'
        
        query_params = utils.get_query_params(operations.PatientRiskAssessmentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientRiskAssessmentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatientRiskAssessmentsList200ApplicationJSON])
                res.patient_risk_assessments_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_risk_assessments_partial_update(self, request: operations.PatientRiskAssessmentsPartialUpdateRequest, security: operations.PatientRiskAssessmentsPartialUpdateSecurity) -> operations.PatientRiskAssessmentsPartialUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientRiskAssessmentsPartialUpdateRequest, base_url, '/api/patient_risk_assessments/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientRiskAssessmentsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientRiskAssessmentsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_risk_assessments_read(self, request: operations.PatientRiskAssessmentsReadRequest, security: operations.PatientRiskAssessmentsReadSecurity) -> operations.PatientRiskAssessmentsReadResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientRiskAssessmentsReadRequest, base_url, '/api/patient_risk_assessments/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientRiskAssessmentsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientRiskAssessmentsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientRiskAssessment])
                res.patient_risk_assessment = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_risk_assessments_update(self, request: operations.PatientRiskAssessmentsUpdateRequest, security: operations.PatientRiskAssessmentsUpdateSecurity) -> operations.PatientRiskAssessmentsUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientRiskAssessmentsUpdateRequest, base_url, '/api/patient_risk_assessments/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientRiskAssessmentsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientRiskAssessmentsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_vaccine_records_create(self, request: operations.PatientVaccineRecordsCreateRequest, security: operations.PatientVaccineRecordsCreateSecurity) -> operations.PatientVaccineRecordsCreateResponse:
        r"""Create patient vaccine records"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_vaccine_records'
        
        query_params = utils.get_query_params(operations.PatientVaccineRecordsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientVaccineRecordsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientVaccineRecord])
                res.patient_vaccine_record = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_vaccine_records_list(self, request: operations.PatientVaccineRecordsListRequest, security: operations.PatientVaccineRecordsListSecurity) -> operations.PatientVaccineRecordsListResponse:
        r"""Retrieve or search patient vaccine records"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patient_vaccine_records'
        
        query_params = utils.get_query_params(operations.PatientVaccineRecordsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientVaccineRecordsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatientVaccineRecordsList200ApplicationJSON])
                res.patient_vaccine_records_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_vaccine_records_partial_update(self, request: operations.PatientVaccineRecordsPartialUpdateRequest, security: operations.PatientVaccineRecordsPartialUpdateSecurity) -> operations.PatientVaccineRecordsPartialUpdateResponse:
        r"""Update an existing patient vaccine records"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientVaccineRecordsPartialUpdateRequest, base_url, '/api/patient_vaccine_records/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientVaccineRecordsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientVaccineRecordsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patient_vaccine_records_read(self, request: operations.PatientVaccineRecordsReadRequest, security: operations.PatientVaccineRecordsReadSecurity) -> operations.PatientVaccineRecordsReadResponse:
        r"""Retrieve an existing patient vaccine records"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientVaccineRecordsReadRequest, base_url, '/api/patient_vaccine_records/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientVaccineRecordsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientVaccineRecordsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientVaccineRecord])
                res.patient_vaccine_record = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patient_vaccine_records_update(self, request: operations.PatientVaccineRecordsUpdateRequest, security: operations.PatientVaccineRecordsUpdateSecurity) -> operations.PatientVaccineRecordsUpdateResponse:
        r"""Update an existing patient vaccine records"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientVaccineRecordsUpdateRequest, base_url, '/api/patient_vaccine_records/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientVaccineRecordsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientVaccineRecordsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patients_ccda(self, request: operations.PatientsCcdaRequest, security: operations.PatientsCcdaSecurity) -> operations.PatientsCcdaResponse:
        r"""Retrieve patient CCDA"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientsCcdaRequest, base_url, '/api/patients/{id}/ccda', request)
        
        query_params = utils.get_query_params(operations.PatientsCcdaRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsCcdaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patients_create(self, request: operations.PatientsCreateRequest, security: operations.PatientsCreateSecurity) -> operations.PatientsCreateResponse:
        r"""Create patient"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patients'
        
        query_params = utils.get_query_params(operations.PatientsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Patient])
                res.patient = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patients_delete(self, request: operations.PatientsDeleteRequest, security: operations.PatientsDeleteSecurity) -> operations.PatientsDeleteResponse:
        r"""Delete an existing patient"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientsDeleteRequest, base_url, '/api/patients/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patients_list(self, request: operations.PatientsListRequest, security: operations.PatientsListSecurity) -> operations.PatientsListResponse:
        r"""Retrieve or search patients"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patients'
        
        query_params = utils.get_query_params(operations.PatientsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatientsList200ApplicationJSON])
                res.patients_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patients_onpatient_access_create(self, request: operations.PatientsOnpatientAccessCreateRequest, security: operations.PatientsOnpatientAccessCreateSecurity) -> operations.PatientsOnpatientAccessCreateResponse:
        r"""Send new onpatient invite to patient"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientsOnpatientAccessCreateRequest, base_url, '/api/patients/{id}/onpatient_access', request)
        
        query_params = utils.get_query_params(operations.PatientsOnpatientAccessCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsOnpatientAccessCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Patient])
                res.patient = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patients_onpatient_access_delete(self, request: operations.PatientsOnpatientAccessDeleteRequest, security: operations.PatientsOnpatientAccessDeleteSecurity) -> operations.PatientsOnpatientAccessDeleteResponse:
        r"""Revoke sent onpatient invites"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientsOnpatientAccessDeleteRequest, base_url, '/api/patients/{id}/onpatient_access', request)
        
        query_params = utils.get_query_params(operations.PatientsOnpatientAccessDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsOnpatientAccessDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patients_onpatient_access_read(self, request: operations.PatientsOnpatientAccessReadRequest, security: operations.PatientsOnpatientAccessReadSecurity) -> operations.PatientsOnpatientAccessReadResponse:
        r"""Retrieve or search existing onpatient access invites"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientsOnpatientAccessReadRequest, base_url, '/api/patients/{id}/onpatient_access', request)
        
        query_params = utils.get_query_params(operations.PatientsOnpatientAccessReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsOnpatientAccessReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Patient])
                res.patient = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patients_partial_update(self, request: operations.PatientsPartialUpdateRequest, security: operations.PatientsPartialUpdateSecurity) -> operations.PatientsPartialUpdateResponse:
        r"""Update an existing patient"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientsPartialUpdateRequest, base_url, '/api/patients/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patients_qrda1(self, request: operations.PatientsQrda1Request, security: operations.PatientsQrda1Security) -> operations.PatientsQrda1Response:
        r"""Retrieve patient QRDA1"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientsQrda1Request, base_url, '/api/patients/{id}/qrda1', request)
        
        query_params = utils.get_query_params(operations.PatientsQrda1Request, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsQrda1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patients_read(self, request: operations.PatientsReadRequest, security: operations.PatientsReadSecurity) -> operations.PatientsReadResponse:
        r"""Retrieve an existing patient"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientsReadRequest, base_url, '/api/patients/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Patient])
                res.patient = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patients_summary_create(self, request: operations.PatientsSummaryCreateRequest, security: operations.PatientsSummaryCreateSecurity) -> operations.PatientsSummaryCreateResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patients_summary'
        
        query_params = utils.get_query_params(operations.PatientsSummaryCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsSummaryCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Patient])
                res.patient = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patients_summary_delete(self, request: operations.PatientsSummaryDeleteRequest, security: operations.PatientsSummaryDeleteSecurity) -> operations.PatientsSummaryDeleteResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientsSummaryDeleteRequest, base_url, '/api/patients_summary/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientsSummaryDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsSummaryDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patients_summary_list(self, request: operations.PatientsSummaryListRequest, security: operations.PatientsSummaryListSecurity) -> operations.PatientsSummaryListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patients_summary'
        
        query_params = utils.get_query_params(operations.PatientsSummaryListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsSummaryListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatientsSummaryList200ApplicationJSON])
                res.patients_summary_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patients_summary_partial_update(self, request: operations.PatientsSummaryPartialUpdateRequest, security: operations.PatientsSummaryPartialUpdateSecurity) -> operations.PatientsSummaryPartialUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientsSummaryPartialUpdateRequest, base_url, '/api/patients_summary/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientsSummaryPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsSummaryPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patients_summary_read(self, request: operations.PatientsSummaryReadRequest, security: operations.PatientsSummaryReadSecurity) -> operations.PatientsSummaryReadResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientsSummaryReadRequest, base_url, '/api/patients_summary/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientsSummaryReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsSummaryReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Patient])
                res.patient = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def patients_summary_update(self, request: operations.PatientsSummaryUpdateRequest, security: operations.PatientsSummaryUpdateSecurity) -> operations.PatientsSummaryUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientsSummaryUpdateRequest, base_url, '/api/patients_summary/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientsSummaryUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsSummaryUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patients_update(self, request: operations.PatientsUpdateRequest, security: operations.PatientsUpdateSecurity) -> operations.PatientsUpdateResponse:
        r"""Update an existing patient"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatientsUpdateRequest, base_url, '/api/patients/{id}', request)
        
        query_params = utils.get_query_params(operations.PatientsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatientsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def prescription_messages_list(self, request: operations.PrescriptionMessagesListRequest, security: operations.PrescriptionMessagesListSecurity) -> operations.PrescriptionMessagesListResponse:
        r"""Retrieve or search prescription messages"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/prescription_messages'
        
        query_params = utils.get_query_params(operations.PrescriptionMessagesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrescriptionMessagesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PrescriptionMessagesList200ApplicationJSON])
                res.prescription_messages_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def prescription_messages_read(self, request: operations.PrescriptionMessagesReadRequest, security: operations.PrescriptionMessagesReadSecurity) -> operations.PrescriptionMessagesReadResponse:
        r"""Retrieve an existing prescription message"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrescriptionMessagesReadRequest, base_url, '/api/prescription_messages/{id}', request)
        
        query_params = utils.get_query_params(operations.PrescriptionMessagesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrescriptionMessagesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PrescriptionMessage])
                res.prescription_message = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def problems_create(self, request: operations.ProblemsCreateRequest, security: operations.ProblemsCreateSecurity) -> operations.ProblemsCreateResponse:
        r"""Create patient problems"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/problems'
        
        query_params = utils.get_query_params(operations.ProblemsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProblemsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientProblem])
                res.patient_problem = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def problems_list(self, request: operations.ProblemsListRequest, security: operations.ProblemsListSecurity) -> operations.ProblemsListResponse:
        r"""Retrieve or search patient problems"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/problems'
        
        query_params = utils.get_query_params(operations.ProblemsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProblemsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProblemsList200ApplicationJSON])
                res.problems_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def problems_partial_update(self, request: operations.ProblemsPartialUpdateRequest, security: operations.ProblemsPartialUpdateSecurity) -> operations.ProblemsPartialUpdateResponse:
        r"""Update an existing patient problems"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProblemsPartialUpdateRequest, base_url, '/api/problems/{id}', request)
        
        query_params = utils.get_query_params(operations.ProblemsPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProblemsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def problems_read(self, request: operations.ProblemsReadRequest, security: operations.ProblemsReadSecurity) -> operations.ProblemsReadResponse:
        r"""Retrieve an existing patient problems"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProblemsReadRequest, base_url, '/api/problems/{id}', request)
        
        query_params = utils.get_query_params(operations.ProblemsReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProblemsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatientProblem])
                res.patient_problem = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def problems_update(self, request: operations.ProblemsUpdateRequest, security: operations.ProblemsUpdateSecurity) -> operations.ProblemsUpdateResponse:
        r"""Update an existing patient problems"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProblemsUpdateRequest, base_url, '/api/problems/{id}', request)
        
        query_params = utils.get_query_params(operations.ProblemsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProblemsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reminder_profiles_create(self, request: operations.ReminderProfilesCreateRequest, security: operations.ReminderProfilesCreateSecurity) -> operations.ReminderProfilesCreateResponse:
        r"""Create reminder profile"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/reminder_profiles'
        
        query_params = utils.get_query_params(operations.ReminderProfilesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReminderProfilesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReminderProfile])
                res.reminder_profile = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def reminder_profiles_delete(self, request: operations.ReminderProfilesDeleteRequest, security: operations.ReminderProfilesDeleteSecurity) -> operations.ReminderProfilesDeleteResponse:
        r"""Delete an existing reminder profile"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReminderProfilesDeleteRequest, base_url, '/api/reminder_profiles/{id}', request)
        
        query_params = utils.get_query_params(operations.ReminderProfilesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReminderProfilesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reminder_profiles_list(self, request: operations.ReminderProfilesListRequest, security: operations.ReminderProfilesListSecurity) -> operations.ReminderProfilesListResponse:
        r"""Retrieve or search reminder profiles"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/reminder_profiles'
        
        query_params = utils.get_query_params(operations.ReminderProfilesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReminderProfilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ReminderProfilesList200ApplicationJSON])
                res.reminder_profiles_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def reminder_profiles_partial_update(self, request: operations.ReminderProfilesPartialUpdateRequest, security: operations.ReminderProfilesPartialUpdateSecurity) -> operations.ReminderProfilesPartialUpdateResponse:
        r"""Update an existing reminder profile"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReminderProfilesPartialUpdateRequest, base_url, '/api/reminder_profiles/{id}', request)
        
        query_params = utils.get_query_params(operations.ReminderProfilesPartialUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReminderProfilesPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reminder_profiles_read(self, request: operations.ReminderProfilesReadRequest, security: operations.ReminderProfilesReadSecurity) -> operations.ReminderProfilesReadResponse:
        r"""Retrieve an existing reminder profile"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReminderProfilesReadRequest, base_url, '/api/reminder_profiles/{id}', request)
        
        query_params = utils.get_query_params(operations.ReminderProfilesReadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReminderProfilesReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReminderProfile])
                res.reminder_profile = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def reminder_profiles_update(self, request: operations.ReminderProfilesUpdateRequest, security: operations.ReminderProfilesUpdateSecurity) -> operations.ReminderProfilesUpdateResponse:
        r"""Update an existing reminder profile"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReminderProfilesUpdateRequest, base_url, '/api/reminder_profiles/{id}', request)
        
        query_params = utils.get_query_params(operations.ReminderProfilesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReminderProfilesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def sublabs_create(self) -> operations.SublabsCreateResponse:
        r"""Create sub-vendors
        
        - When you get orders, submit them via `/api/lab_orders`, such that doctors can see them in drchrono.
        
        - When results come in, submit the result document PDF via `/api/lab_documents` and submit the results data via `/api/lab_results`
        
        - Update `/api/lab_orders` status
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/sublabs'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SublabsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LabVendorLocation])
                res.lab_vendor_location = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def sublabs_delete(self, request: operations.SublabsDeleteRequest, security: operations.SublabsDeleteSecurity) -> operations.SublabsDeleteResponse:
        r"""Delete an existing sub vendor"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SublabsDeleteRequest, base_url, '/api/sublabs/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SublabsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def sublabs_list(self, request: operations.SublabsListRequest, security: operations.SublabsListSecurity) -> operations.SublabsListResponse:
        r"""Retrieve or search sub vendors"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/sublabs'
        
        query_params = utils.get_query_params(operations.SublabsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SublabsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SublabsList200ApplicationJSON])
                res.sublabs_list_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def sublabs_partial_update(self, request: operations.SublabsPartialUpdateRequest, security: operations.SublabsPartialUpdateSecurity) -> operations.SublabsPartialUpdateResponse:
        r"""Update an existing sub vendor"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SublabsPartialUpdateRequest, base_url, '/api/sublabs/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SublabsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def sublabs_read(self, request: operations.SublabsReadRequest, security: operations.SublabsReadSecurity) -> operations.SublabsReadResponse:
        r"""Retrieve an existing sub vendor"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SublabsReadRequest, base_url, '/api/sublabs/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SublabsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LabVendorLocation])
                res.lab_vendor_location = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 500]:
            pass

        return res

    def sublabs_update(self, request: operations.SublabsUpdateRequest, security: operations.SublabsUpdateSecurity) -> operations.SublabsUpdateResponse:
        r"""Update an existing sub vendor"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SublabsUpdateRequest, base_url, '/api/sublabs/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SublabsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    