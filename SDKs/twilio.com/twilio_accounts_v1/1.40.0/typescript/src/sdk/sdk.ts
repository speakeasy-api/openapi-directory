/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://accounts.twilio.com"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * This is the public Twilio REST API.
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * Create a new AWS Credential
   */
  createCredentialAws(
    req: operations.CreateCredentialAwsCreateCredentialAwsRequest,
    security: operations.CreateCredentialAwsSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateCredentialAwsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateCredentialAwsCreateCredentialAwsRequest(req);
    }

    let baseURL: string = operations.CreateCredentialAwsServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/Credentials/AWS";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateCredentialAwsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateCredentialAwsResponse =
        new operations.CreateCredentialAwsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountsV1CredentialCredentialAws = utils.objectToClass(
              httpRes?.data,
              shared.AccountsV1CredentialCredentialAws
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new Public Key Credential
   */
  createCredentialPublicKey(
    req: operations.CreateCredentialPublicKeyCreateCredentialPublicKeyRequest,
    security: operations.CreateCredentialPublicKeySecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateCredentialPublicKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CreateCredentialPublicKeyCreateCredentialPublicKeyRequest(
          req
        );
    }

    let baseURL: string = operations.CreateCredentialPublicKeyServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/Credentials/PublicKeys";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateCredentialPublicKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateCredentialPublicKeyResponse =
        new operations.CreateCredentialPublicKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountsV1CredentialCredentialPublicKey = utils.objectToClass(
              httpRes?.data,
              shared.AccountsV1CredentialCredentialPublicKey
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new secondary Auth Token
   */
  createSecondaryAuthToken(
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateSecondaryAuthTokenResponse> {
    let baseURL: string = operations.CreateSecondaryAuthTokenServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/AuthTokens/Secondary";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateSecondaryAuthTokenResponse =
        new operations.CreateSecondaryAuthTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountsV1SecondaryAuthToken = utils.objectToClass(
              httpRes?.data,
              shared.AccountsV1SecondaryAuthToken
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a Credential from your account
   */
  deleteCredentialAws(
    req: operations.DeleteCredentialAwsRequest,
    security: operations.DeleteCredentialAwsSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteCredentialAwsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteCredentialAwsRequest(req);
    }

    let baseURL: string = operations.DeleteCredentialAwsServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Credentials/AWS/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteCredentialAwsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteCredentialAwsResponse =
        new operations.DeleteCredentialAwsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a Credential from your account
   */
  deleteCredentialPublicKey(
    req: operations.DeleteCredentialPublicKeyRequest,
    security: operations.DeleteCredentialPublicKeySecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteCredentialPublicKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteCredentialPublicKeyRequest(req);
    }

    let baseURL: string = operations.DeleteCredentialPublicKeyServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Credentials/PublicKeys/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteCredentialPublicKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteCredentialPublicKeyResponse =
        new operations.DeleteCredentialPublicKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete the secondary Auth Token from your account
   */
  deleteSecondaryAuthToken(
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteSecondaryAuthTokenResponse> {
    let baseURL: string = operations.DeleteSecondaryAuthTokenServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/AuthTokens/Secondary";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteSecondaryAuthTokenResponse =
        new operations.DeleteSecondaryAuthTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Fetch the AWS credentials specified by the provided Credential Sid
   */
  fetchCredentialAws(
    req: operations.FetchCredentialAwsRequest,
    security: operations.FetchCredentialAwsSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchCredentialAwsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchCredentialAwsRequest(req);
    }

    let baseURL: string = operations.FetchCredentialAwsServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Credentials/AWS/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchCredentialAwsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchCredentialAwsResponse =
        new operations.FetchCredentialAwsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountsV1CredentialCredentialAws = utils.objectToClass(
              httpRes?.data,
              shared.AccountsV1CredentialCredentialAws
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetch the public key specified by the provided Credential Sid
   */
  fetchCredentialPublicKey(
    req: operations.FetchCredentialPublicKeyRequest,
    security: operations.FetchCredentialPublicKeySecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchCredentialPublicKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchCredentialPublicKeyRequest(req);
    }

    let baseURL: string = operations.FetchCredentialPublicKeyServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Credentials/PublicKeys/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchCredentialPublicKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchCredentialPublicKeyResponse =
        new operations.FetchCredentialPublicKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountsV1CredentialCredentialPublicKey = utils.objectToClass(
              httpRes?.data,
              shared.AccountsV1CredentialCredentialPublicKey
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a collection of AWS Credentials belonging to the account used to make the request
   */
  listCredentialAws(
    req: operations.ListCredentialAwsRequest,
    security: operations.ListCredentialAwsSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListCredentialAwsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListCredentialAwsRequest(req);
    }

    let baseURL: string = operations.ListCredentialAwsServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/Credentials/AWS";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListCredentialAwsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListCredentialAwsResponse =
        new operations.ListCredentialAwsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCredentialAwsResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListCredentialAwsListCredentialAwsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a collection of Public Key Credentials belonging to the account used to make the request
   */
  listCredentialPublicKey(
    req: operations.ListCredentialPublicKeyRequest,
    security: operations.ListCredentialPublicKeySecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListCredentialPublicKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListCredentialPublicKeyRequest(req);
    }

    let baseURL: string = operations.ListCredentialPublicKeyServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/Credentials/PublicKeys";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListCredentialPublicKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListCredentialPublicKeyResponse =
        new operations.ListCredentialPublicKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCredentialPublicKeyResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListCredentialPublicKeyListCredentialPublicKeyResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Promote the secondary Auth Token to primary. After promoting the new token, all requests to Twilio using your old primary Auth Token will result in an error.
   */
  updateAuthTokenPromotion(
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateAuthTokenPromotionResponse> {
    let baseURL: string = operations.UpdateAuthTokenPromotionServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/AuthTokens/Promote";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateAuthTokenPromotionResponse =
        new operations.UpdateAuthTokenPromotionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountsV1AuthTokenPromotion = utils.objectToClass(
              httpRes?.data,
              shared.AccountsV1AuthTokenPromotion
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Modify the properties of a given Account
   */
  updateCredentialAws(
    req: operations.UpdateCredentialAwsRequest,
    security: operations.UpdateCredentialAwsSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateCredentialAwsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateCredentialAwsRequest(req);
    }

    let baseURL: string = operations.UpdateCredentialAwsServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Credentials/AWS/{Sid}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateCredentialAwsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateCredentialAwsResponse =
        new operations.UpdateCredentialAwsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountsV1CredentialCredentialAws = utils.objectToClass(
              httpRes?.data,
              shared.AccountsV1CredentialCredentialAws
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Modify the properties of a given Account
   */
  updateCredentialPublicKey(
    req: operations.UpdateCredentialPublicKeyRequest,
    security: operations.UpdateCredentialPublicKeySecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateCredentialPublicKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateCredentialPublicKeyRequest(req);
    }

    let baseURL: string = operations.UpdateCredentialPublicKeyServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Credentials/PublicKeys/{Sid}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateCredentialPublicKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateCredentialPublicKeyResponse =
        new operations.UpdateCredentialPublicKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountsV1CredentialCredentialPublicKey = utils.objectToClass(
              httpRes?.data,
              shared.AccountsV1CredentialCredentialPublicKey
            );
          }
          break;
      }

      return res;
    });
  }
}
