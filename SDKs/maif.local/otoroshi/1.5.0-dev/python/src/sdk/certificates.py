"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Certificates:
    r"""Everything about Otoroshi SSL/TLS certificates"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def all_certs(self) -> operations.AllCertsResponse:
        r"""Get all certificates
        Get all certificates
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/certificates'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AllCertsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Certificate]])
                res.certificates = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def create_cert(self, request: shared.Certificate, security: operations.CreateCertSecurity) -> operations.CreateCertResponse:
        r"""Create one certificate
        Create one certificate
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/certificates'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Certificate])
                res.certificate = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def delete_cert(self, request: operations.DeleteCertRequest, security: operations.DeleteCertSecurity) -> operations.DeleteCertResponse:
        r"""Delete one certificate by id
        Delete one certificate by id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCertRequest, base_url, '/api/certificates/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Deleted])
                res.deleted = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def one_cert(self, request: operations.OneCertRequest, security: operations.OneCertSecurity) -> operations.OneCertResponse:
        r"""Get one certificate by id
        Get one certificate by id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.OneCertRequest, base_url, '/api/certificates/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OneCertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Certificate])
                res.certificate = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def patch_cert(self, request: operations.PatchCertRequest, security: operations.PatchCertSecurity) -> operations.PatchCertResponse:
        r"""Update one certificate by id
        Update one certificate by id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchCertRequest, base_url, '/api/certificates/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchCertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Certificate])
                res.certificate = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def put_cert(self, request: operations.PutCertRequest, security: operations.PutCertSecurity) -> operations.PutCertResponse:
        r"""Update one certificate by id
        Update one certificate by id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCertRequest, base_url, '/api/certificates/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "certificate", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Certificate])
                res.certificate = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    