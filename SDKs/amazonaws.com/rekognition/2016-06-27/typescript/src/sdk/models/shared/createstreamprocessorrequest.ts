/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RegionOfInterest } from "./regionofinterest";
import { StreamProcessorDataSharingPreference } from "./streamprocessordatasharingpreference";
import { StreamProcessorInput } from "./streamprocessorinput";
import { StreamProcessorNotificationChannel } from "./streamprocessornotificationchannel";
import { StreamProcessorOutput } from "./streamprocessoroutput";
import { StreamProcessorSettings } from "./streamprocessorsettings";
import { Expose, Type } from "class-transformer";

export class CreateStreamProcessorRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DataSharingPreference" })
  @Type(() => StreamProcessorDataSharingPreference)
  dataSharingPreference?: StreamProcessorDataSharingPreference;

  @SpeakeasyMetadata()
  @Expose({ name: "Input" })
  @Type(() => StreamProcessorInput)
  input: StreamProcessorInput;

  @SpeakeasyMetadata()
  @Expose({ name: "KmsKeyId" })
  kmsKeyId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  /**
   * <p>The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the object detection results and completion status of a video analysis operation.</p> <p>Amazon Rekognition publishes a notification the first time an object of interest or a person is detected in the video stream. For example, if Amazon Rekognition detects a person at second 2, a pet at second 4, and a person again at second 5, Amazon Rekognition sends 2 object class detected notifications, one for a person at second 2 and one for a pet at second 4.</p> <p>Amazon Rekognition also publishes an an end-of-session notification with a summary when the stream processing session is complete.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NotificationChannel" })
  @Type(() => StreamProcessorNotificationChannel)
  notificationChannel?: StreamProcessorNotificationChannel;

  @SpeakeasyMetadata()
  @Expose({ name: "Output" })
  @Type(() => StreamProcessorOutput)
  output: StreamProcessorOutput;

  @SpeakeasyMetadata({ elemType: RegionOfInterest })
  @Expose({ name: "RegionsOfInterest" })
  @Type(() => RegionOfInterest)
  regionsOfInterest?: RegionOfInterest[];

  @SpeakeasyMetadata()
  @Expose({ name: "RoleArn" })
  roleArn: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Settings" })
  @Type(() => StreamProcessorSettings)
  settings: StreamProcessorSettings;

  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;
}
