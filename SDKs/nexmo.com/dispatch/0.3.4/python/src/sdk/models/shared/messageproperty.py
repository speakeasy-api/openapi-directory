"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import audioproperty as shared_audioproperty
from ..shared import fileproperty as shared_fileproperty
from ..shared import imageproperty as shared_imageproperty
from ..shared import templateproperty as shared_templateproperty
from ..shared import videoproperty as shared_videoproperty
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MessagePropertyContentTypeEnum(str, Enum):
    r"""The type of message that you are sending.
    
    **Messenger**: supports `text`, `image`, `audio`, `video` and `file`.
    
    **Viber Business Messages**: supports `image` and `text`.
    
    **WhatsApp**: supports `template`, `text`, `image`, `audio`, `video` and `file`.
    
    **SMS**: supports `text`.
    """
    TEXT = 'text'
    IMAGE = 'image'
    AUDIO = 'audio'
    VIDEO = 'video'
    FILE = 'file'
    TEMPLATE = 'template'
    CUSTOM = 'custom'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessagePropertyContent:
    
    type: MessagePropertyContentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of message that you are sending.
    
    **Messenger**: supports `text`, `image`, `audio`, `video` and `file`.
    
    **Viber Business Messages**: supports `image` and `text`.
    
    **WhatsApp**: supports `template`, `text`, `image`, `audio`, `video` and `file`.
    
    **SMS**: supports `text`.
    """  
    audio: Optional[shared_audioproperty.AudioProperty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio'), 'exclude': lambda f: f is None }})  
    file: Optional[shared_fileproperty.FileProperty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file'), 'exclude': lambda f: f is None }})  
    image: Optional[shared_imageproperty.ImageProperty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})  
    template: Optional[shared_templateproperty.TemplateProperty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template'), 'exclude': lambda f: f is None }})  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""The text of the message.
    
    **Messenger**: Is limited to 640 characters
    
    **SMS** or **Viber**: Is 1000 characters
    
    **WhatsApp**: is 4096 characters
    """  
    video: Optional[shared_videoproperty.VideoProperty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('video'), 'exclude': lambda f: f is None }})  
    
class MessagePropertyMessengerCategoryEnum(str, Enum):
    r"""The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy]( https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger."""
    RESPONSE = 'response'
    UPDATE = 'update'
    MESSAGE_TAG = 'message_tag'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessagePropertyMessenger:
    
    category: Optional[MessagePropertyMessengerCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy]( https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger."""  
    tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag'), 'exclude': lambda f: f is None }})
    r"""‘A full list of the possible tags is available on [developers.facebook.com](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)'"""  
    
class MessagePropertyViberServiceMsgCategoryEnum(str, Enum):
    r"""The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative and a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages."""
    TRANSACTION = 'transaction'
    PROMOTION = 'promotion'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessagePropertyViberServiceMsg:
    
    category: Optional[MessagePropertyViberServiceMsgCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative and a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages."""  
    ttl: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ttl'), 'exclude': lambda f: f is None }})
    r"""Only valid for Viber Business Messages. Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message."""  
    
class MessagePropertyWhatsappPolicyEnum(str, Enum):
    r"""Please note that WhatsApp will deprecate `fallback` policy in January 2020. There are two policies that you can specify when sending a Message Template: `deterministic` and `fallback`. `deterministic` — Deliver the Message Template in exactly the language and locale asked for. `fallback` — Deliver the Message Template in the language that matches users language/locale setting on device. If one can not be found, deliver using the specified fallback language."""
    FALLBACK = 'fallback'
    DETERMINISTIC = 'deterministic'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessagePropertyWhatsapp:
    
    locale: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale'), 'exclude': lambda f: f is None }})
    r"""We are using the industry standard, BCP 47, for locales. So in your API call to the /messages API you will need to put “en-GB” and this will refer to the “en_GB” template for WhatsApp. A full list of the possible locales is available on [developers.facebook.com](https://developers.facebook.com/docs/whatsapp/message-templates/creation#translations)."""  
    policy: Optional[MessagePropertyWhatsappPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy'), 'exclude': lambda f: f is None }})
    r"""Please note that WhatsApp will deprecate `fallback` policy in January 2020. There are two policies that you can specify when sending a Message Template: `deterministic` and `fallback`. `deterministic` — Deliver the Message Template in exactly the language and locale asked for. `fallback` — Deliver the Message Template in the language that matches users language/locale setting on device. If one can not be found, deliver using the specified fallback language."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessageProperty:
    
    content: MessagePropertyContent = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content') }})  
    messenger: Optional[MessagePropertyMessenger] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messenger'), 'exclude': lambda f: f is None }})  
    viber_service_msg: Optional[MessagePropertyViberServiceMsg] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viber_service_msg'), 'exclude': lambda f: f is None }})  
    whatsapp: Optional[MessagePropertyWhatsapp] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('whatsapp'), 'exclude': lambda f: f is None }})  
    