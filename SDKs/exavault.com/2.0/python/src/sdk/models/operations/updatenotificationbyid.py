"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import notificationresponse as shared_notificationresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UpdateNotificationByIDUpdateNotificationByIDRequestBodyActionEnum(str, Enum):
    r"""Type of action be notified about. Notifications will only be sent for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)"""
    UPLOAD = 'upload'
    DOWNLOAD = 'download'
    DELETE = 'delete'
    ALL = 'all'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNotificationByIDUpdateNotificationByIDRequestBody:
    
    action: Optional[UpdateNotificationByIDUpdateNotificationByIDRequestBodyActionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""Type of action be notified about. Notifications will only be sent for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)"""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""Custom message to insert into the notification emails, along with the matching activity."""  
    recipients: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipients'), 'exclude': lambda f: f is None }})
    r"""Email addresses to send notification emails to. If empty, sends to the current user's email address."""  
    send_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sendEmail'), 'exclude': lambda f: f is None }})
    r"""Whether an email should be sent to the recipients when matching activity happens."""  
    usernames: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usernames'), 'exclude': lambda f: f is None }})
    r"""Determines which users' actions should trigger the notification. 
    
    Rather than listing  individual users, you can also use 3 special options:
    
    - **notice\_user\_all** for activity by any user or share recipient
    - **notice\_user\_all\_users** for activity only by user accounts
    - **notice\_user\_all\_recipients** for activity only by share recipients
    """  
    

@dataclasses.dataclass
class UpdateNotificationByIDRequest:
    
    ev_access_token: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-access-token', 'style': 'simple', 'explode': False }})
    r"""Access token required to make the API call."""  
    ev_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-api-key', 'style': 'simple', 'explode': False }})
    r"""API Key required to make the API call."""  
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID."""  
    request_body: Optional[UpdateNotificationByIDUpdateNotificationByIDRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNotificationByIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    notification_response: Optional[shared_notificationresponse.NotificationResponse] = dataclasses.field(default=None)
    r"""Successful Operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    