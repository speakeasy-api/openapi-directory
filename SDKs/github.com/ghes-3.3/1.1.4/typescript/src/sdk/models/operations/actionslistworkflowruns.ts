/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class ActionsListWorkflowRunsRequest extends SpeakeasyBase {
  /**
   * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=actor" })
  actor?: string;

  /**
   * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=branch",
  })
  branch?: string;

  /**
   * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.3/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=created;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  created?: Date;

  /**
   * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/enterprise-server@3.3/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=event" })
  event?: string;

  /**
   * If `true` pull requests are omitted from the response (empty array).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=exclude_pull_requests",
  })
  excludePullRequests?: boolean;

  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  /**
   * Page number of the results to fetch.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of results per page (max 100).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * The name of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;

  /**
   * Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=status",
  })
  status?: shared.WorkflowRunStatusEnum;

  /**
   * The ID of the workflow. You can also pass the workflow file name as a string.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=workflow_id",
  })
  workflowId: any;
}

/**
 * Response
 */
export class ActionsListWorkflowRuns200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "total_count" })
  totalCount: number;

  @SpeakeasyMetadata({ elemType: shared.WorkflowRun })
  @Expose({ name: "workflow_runs" })
  @Type(() => shared.WorkflowRun)
  workflowRuns: shared.WorkflowRun[];
}

export class ActionsListWorkflowRunsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  actionsListWorkflowRuns200ApplicationJSONObject?: ActionsListWorkflowRuns200ApplicationJSON;
}
