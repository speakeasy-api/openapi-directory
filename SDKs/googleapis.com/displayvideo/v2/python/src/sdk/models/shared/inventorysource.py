"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import creativeconfig as shared_creativeconfig
from ..shared import inventorysourceaccessors as shared_inventorysourceaccessors
from ..shared import inventorysourcestatus as shared_inventorysourcestatus
from ..shared import ratedetails as shared_ratedetails
from ..shared import timerange as shared_timerange
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class InventorySourceCommitmentEnum(str, Enum):
    r"""Whether the inventory source has a guaranteed or non-guaranteed delivery."""
    INVENTORY_SOURCE_COMMITMENT_UNSPECIFIED = 'INVENTORY_SOURCE_COMMITMENT_UNSPECIFIED'
    INVENTORY_SOURCE_COMMITMENT_GUARANTEED = 'INVENTORY_SOURCE_COMMITMENT_GUARANTEED'
    INVENTORY_SOURCE_COMMITMENT_NON_GUARANTEED = 'INVENTORY_SOURCE_COMMITMENT_NON_GUARANTEED'

class InventorySourceDeliveryMethodEnum(str, Enum):
    r"""The delivery method of the inventory source. * For non-guaranteed inventory sources, the only acceptable value is `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`. * For guaranteed inventory sources, acceptable values are `INVENTORY_SOURCE_DELIVERY_METHOD_TAG` and `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`."""
    INVENTORY_SOURCE_DELIVERY_METHOD_UNSPECIFIED = 'INVENTORY_SOURCE_DELIVERY_METHOD_UNSPECIFIED'
    INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC = 'INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC'
    INVENTORY_SOURCE_DELIVERY_METHOD_TAG = 'INVENTORY_SOURCE_DELIVERY_METHOD_TAG'

class InventorySourceExchangeEnum(str, Enum):
    r"""The exchange to which the inventory source belongs."""
    EXCHANGE_UNSPECIFIED = 'EXCHANGE_UNSPECIFIED'
    EXCHANGE_GOOGLE_AD_MANAGER = 'EXCHANGE_GOOGLE_AD_MANAGER'
    EXCHANGE_APPNEXUS = 'EXCHANGE_APPNEXUS'
    EXCHANGE_BRIGHTROLL = 'EXCHANGE_BRIGHTROLL'
    EXCHANGE_ADFORM = 'EXCHANGE_ADFORM'
    EXCHANGE_ADMETA = 'EXCHANGE_ADMETA'
    EXCHANGE_ADMIXER = 'EXCHANGE_ADMIXER'
    EXCHANGE_ADSMOGO = 'EXCHANGE_ADSMOGO'
    EXCHANGE_ADSWIZZ = 'EXCHANGE_ADSWIZZ'
    EXCHANGE_BIDSWITCH = 'EXCHANGE_BIDSWITCH'
    EXCHANGE_BRIGHTROLL_DISPLAY = 'EXCHANGE_BRIGHTROLL_DISPLAY'
    EXCHANGE_CADREON = 'EXCHANGE_CADREON'
    EXCHANGE_DAILYMOTION = 'EXCHANGE_DAILYMOTION'
    EXCHANGE_FIVE = 'EXCHANGE_FIVE'
    EXCHANGE_FLUCT = 'EXCHANGE_FLUCT'
    EXCHANGE_FREEWHEEL = 'EXCHANGE_FREEWHEEL'
    EXCHANGE_GENIEE = 'EXCHANGE_GENIEE'
    EXCHANGE_GUMGUM = 'EXCHANGE_GUMGUM'
    EXCHANGE_IMOBILE = 'EXCHANGE_IMOBILE'
    EXCHANGE_IBILLBOARD = 'EXCHANGE_IBILLBOARD'
    EXCHANGE_IMPROVE_DIGITAL = 'EXCHANGE_IMPROVE_DIGITAL'
    EXCHANGE_INDEX = 'EXCHANGE_INDEX'
    EXCHANGE_KARGO = 'EXCHANGE_KARGO'
    EXCHANGE_MICROAD = 'EXCHANGE_MICROAD'
    EXCHANGE_MOPUB = 'EXCHANGE_MOPUB'
    EXCHANGE_NEND = 'EXCHANGE_NEND'
    EXCHANGE_ONE_BY_AOL_DISPLAY = 'EXCHANGE_ONE_BY_AOL_DISPLAY'
    EXCHANGE_ONE_BY_AOL_MOBILE = 'EXCHANGE_ONE_BY_AOL_MOBILE'
    EXCHANGE_ONE_BY_AOL_VIDEO = 'EXCHANGE_ONE_BY_AOL_VIDEO'
    EXCHANGE_OOYALA = 'EXCHANGE_OOYALA'
    EXCHANGE_OPENX = 'EXCHANGE_OPENX'
    EXCHANGE_PERMODO = 'EXCHANGE_PERMODO'
    EXCHANGE_PLATFORMONE = 'EXCHANGE_PLATFORMONE'
    EXCHANGE_PLATFORMID = 'EXCHANGE_PLATFORMID'
    EXCHANGE_PUBMATIC = 'EXCHANGE_PUBMATIC'
    EXCHANGE_PULSEPOINT = 'EXCHANGE_PULSEPOINT'
    EXCHANGE_REVENUEMAX = 'EXCHANGE_REVENUEMAX'
    EXCHANGE_RUBICON = 'EXCHANGE_RUBICON'
    EXCHANGE_SMARTCLIP = 'EXCHANGE_SMARTCLIP'
    EXCHANGE_SMARTRTB = 'EXCHANGE_SMARTRTB'
    EXCHANGE_SMARTSTREAMTV = 'EXCHANGE_SMARTSTREAMTV'
    EXCHANGE_SOVRN = 'EXCHANGE_SOVRN'
    EXCHANGE_SPOTXCHANGE = 'EXCHANGE_SPOTXCHANGE'
    EXCHANGE_STROER = 'EXCHANGE_STROER'
    EXCHANGE_TEADSTV = 'EXCHANGE_TEADSTV'
    EXCHANGE_TELARIA = 'EXCHANGE_TELARIA'
    EXCHANGE_TVN = 'EXCHANGE_TVN'
    EXCHANGE_UNITED = 'EXCHANGE_UNITED'
    EXCHANGE_YIELDLAB = 'EXCHANGE_YIELDLAB'
    EXCHANGE_YIELDMO = 'EXCHANGE_YIELDMO'
    EXCHANGE_UNRULYX = 'EXCHANGE_UNRULYX'
    EXCHANGE_OPEN8 = 'EXCHANGE_OPEN8'
    EXCHANGE_TRITON = 'EXCHANGE_TRITON'
    EXCHANGE_TRIPLELIFT = 'EXCHANGE_TRIPLELIFT'
    EXCHANGE_TABOOLA = 'EXCHANGE_TABOOLA'
    EXCHANGE_INMOBI = 'EXCHANGE_INMOBI'
    EXCHANGE_SMAATO = 'EXCHANGE_SMAATO'
    EXCHANGE_AJA = 'EXCHANGE_AJA'
    EXCHANGE_SUPERSHIP = 'EXCHANGE_SUPERSHIP'
    EXCHANGE_NEXSTAR_DIGITAL = 'EXCHANGE_NEXSTAR_DIGITAL'
    EXCHANGE_WAZE = 'EXCHANGE_WAZE'
    EXCHANGE_SOUNDCAST = 'EXCHANGE_SOUNDCAST'
    EXCHANGE_SHARETHROUGH = 'EXCHANGE_SHARETHROUGH'
    EXCHANGE_FYBER = 'EXCHANGE_FYBER'
    EXCHANGE_RED_FOR_PUBLISHERS = 'EXCHANGE_RED_FOR_PUBLISHERS'
    EXCHANGE_MEDIANET = 'EXCHANGE_MEDIANET'
    EXCHANGE_TAPJOY = 'EXCHANGE_TAPJOY'
    EXCHANGE_VISTAR = 'EXCHANGE_VISTAR'
    EXCHANGE_DAX = 'EXCHANGE_DAX'
    EXCHANGE_JCD = 'EXCHANGE_JCD'
    EXCHANGE_PLACE_EXCHANGE = 'EXCHANGE_PLACE_EXCHANGE'
    EXCHANGE_APPLOVIN = 'EXCHANGE_APPLOVIN'
    EXCHANGE_CONNATIX = 'EXCHANGE_CONNATIX'
    EXCHANGE_RESET_DIGITAL = 'EXCHANGE_RESET_DIGITAL'
    EXCHANGE_HIVESTACK = 'EXCHANGE_HIVESTACK'

class InventorySourceInventorySourceTypeEnum(str, Enum):
    r"""Denotes the type of the inventory source."""
    INVENTORY_SOURCE_TYPE_UNSPECIFIED = 'INVENTORY_SOURCE_TYPE_UNSPECIFIED'
    INVENTORY_SOURCE_TYPE_PRIVATE = 'INVENTORY_SOURCE_TYPE_PRIVATE'
    INVENTORY_SOURCE_TYPE_AUCTION_PACKAGE = 'INVENTORY_SOURCE_TYPE_AUCTION_PACKAGE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InventorySourceInput:
    r"""An inventory source."""
    
    commitment: Optional[InventorySourceCommitmentEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commitment'), 'exclude': lambda f: f is None }})
    r"""Whether the inventory source has a guaranteed or non-guaranteed delivery."""  
    creative_configs: Optional[list[shared_creativeconfig.CreativeConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeConfigs'), 'exclude': lambda f: f is None }})
    r"""The creative requirements of the inventory source. Not applicable for auction packages."""  
    deal_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dealId'), 'exclude': lambda f: f is None }})
    r"""The ID in the exchange space that uniquely identifies the inventory source. Must be unique across buyers within each exchange but not necessarily unique across exchanges."""  
    delivery_method: Optional[InventorySourceDeliveryMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryMethod'), 'exclude': lambda f: f is None }})
    r"""The delivery method of the inventory source. * For non-guaranteed inventory sources, the only acceptable value is `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`. * For guaranteed inventory sources, acceptable values are `INVENTORY_SOURCE_DELIVERY_METHOD_TAG` and `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The display name of the inventory source. Must be UTF-8 encoded with a maximum size of 240 bytes."""  
    exchange: Optional[InventorySourceExchangeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exchange'), 'exclude': lambda f: f is None }})
    r"""The exchange to which the inventory source belongs."""  
    guaranteed_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guaranteedOrderId'), 'exclude': lambda f: f is None }})
    r"""Immutable. The ID of the guaranteed order that this inventory source belongs to. Only applicable when commitment is `INVENTORY_SOURCE_COMMITMENT_GUARANTEED`."""  
    inventory_source_type: Optional[InventorySourceInventorySourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySourceType'), 'exclude': lambda f: f is None }})
    r"""Denotes the type of the inventory source."""  
    publisher_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisherName'), 'exclude': lambda f: f is None }})
    r"""The publisher/seller name of the inventory source."""  
    rate_details: Optional[shared_ratedetails.RateDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rateDetails'), 'exclude': lambda f: f is None }})
    r"""The rate related settings of the inventory source."""  
    read_write_accessors: Optional[shared_inventorysourceaccessors.InventorySourceAccessors] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readWriteAccessors'), 'exclude': lambda f: f is None }})
    r"""The partner or advertisers with access to the inventory source."""  
    status: Optional[shared_inventorysourcestatus.InventorySourceStatusInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status related settings of the inventory source."""  
    sub_site_property_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subSitePropertyId'), 'exclude': lambda f: f is None }})
    r"""Immutable. The unique ID of the sub-site property assigned to this inventory source."""  
    time_range: Optional[shared_timerange.TimeRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeRange'), 'exclude': lambda f: f is None }})
    r"""A time range."""  
    
class InventorySourceInventorySourceProductTypeEnum(str, Enum):
    r"""Output only. The product type of the inventory source, denoting the way through which it sells inventory."""
    INVENTORY_SOURCE_PRODUCT_TYPE_UNSPECIFIED = 'INVENTORY_SOURCE_PRODUCT_TYPE_UNSPECIFIED'
    PREFERRED_DEAL = 'PREFERRED_DEAL'
    PRIVATE_AUCTION = 'PRIVATE_AUCTION'
    PROGRAMMATIC_GUARANTEED = 'PROGRAMMATIC_GUARANTEED'
    TAG_GUARANTEED = 'TAG_GUARANTEED'
    YOUTUBE_RESERVE = 'YOUTUBE_RESERVE'
    INSTANT_RESERVE = 'INSTANT_RESERVE'
    GUARANTEED_PACKAGE = 'GUARANTEED_PACKAGE'
    PROGRAMMATIC_TV = 'PROGRAMMATIC_TV'
    AUCTION_PACKAGE = 'AUCTION_PACKAGE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InventorySource:
    r"""An inventory source."""
    
    commitment: Optional[InventorySourceCommitmentEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commitment'), 'exclude': lambda f: f is None }})
    r"""Whether the inventory source has a guaranteed or non-guaranteed delivery."""  
    creative_configs: Optional[list[shared_creativeconfig.CreativeConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeConfigs'), 'exclude': lambda f: f is None }})
    r"""The creative requirements of the inventory source. Not applicable for auction packages."""  
    deal_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dealId'), 'exclude': lambda f: f is None }})
    r"""The ID in the exchange space that uniquely identifies the inventory source. Must be unique across buyers within each exchange but not necessarily unique across exchanges."""  
    delivery_method: Optional[InventorySourceDeliveryMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryMethod'), 'exclude': lambda f: f is None }})
    r"""The delivery method of the inventory source. * For non-guaranteed inventory sources, the only acceptable value is `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`. * For guaranteed inventory sources, acceptable values are `INVENTORY_SOURCE_DELIVERY_METHOD_TAG` and `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The display name of the inventory source. Must be UTF-8 encoded with a maximum size of 240 bytes."""  
    exchange: Optional[InventorySourceExchangeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exchange'), 'exclude': lambda f: f is None }})
    r"""The exchange to which the inventory source belongs."""  
    guaranteed_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guaranteedOrderId'), 'exclude': lambda f: f is None }})
    r"""Immutable. The ID of the guaranteed order that this inventory source belongs to. Only applicable when commitment is `INVENTORY_SOURCE_COMMITMENT_GUARANTEED`."""  
    inventory_source_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySourceId'), 'exclude': lambda f: f is None }})
    r"""Output only. The unique ID of the inventory source. Assigned by the system."""  
    inventory_source_product_type: Optional[InventorySourceInventorySourceProductTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySourceProductType'), 'exclude': lambda f: f is None }})
    r"""Output only. The product type of the inventory source, denoting the way through which it sells inventory."""  
    inventory_source_type: Optional[InventorySourceInventorySourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySourceType'), 'exclude': lambda f: f is None }})
    r"""Denotes the type of the inventory source."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of the inventory source."""  
    publisher_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisherName'), 'exclude': lambda f: f is None }})
    r"""The publisher/seller name of the inventory source."""  
    rate_details: Optional[shared_ratedetails.RateDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rateDetails'), 'exclude': lambda f: f is None }})
    r"""The rate related settings of the inventory source."""  
    read_advertiser_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readAdvertiserIds'), 'exclude': lambda f: f is None }})
    r"""Output only. The IDs of advertisers with read-only access to the inventory source."""  
    read_partner_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readPartnerIds'), 'exclude': lambda f: f is None }})
    r"""Output only. The IDs of partners with read-only access to the inventory source. All advertisers of partners in this field inherit read-only access to the inventory source."""  
    read_write_accessors: Optional[shared_inventorysourceaccessors.InventorySourceAccessors] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readWriteAccessors'), 'exclude': lambda f: f is None }})
    r"""The partner or advertisers with access to the inventory source."""  
    status: Optional[shared_inventorysourcestatus.InventorySourceStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status related settings of the inventory source."""  
    sub_site_property_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subSitePropertyId'), 'exclude': lambda f: f is None }})
    r"""Immutable. The unique ID of the sub-site property assigned to this inventory source."""  
    time_range: Optional[shared_timerange.TimeRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeRange'), 'exclude': lambda f: f is None }})
    r"""A time range."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The timestamp when the inventory source was last updated. Assigned by the system."""  
    