/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Address } from "./address";
import { Expose, Type } from "class-transformer";

/**
 * The reason for not providing a VAT number.
 *
 * @remarks
 *
 * Possible values: **industryExemption**, **belowTaxThreshold**.
 */
export enum SoleProprietorshipVatAbsenceReasonEnum {
  IndustryExemption = "industryExemption",
  BelowTaxThreshold = "belowTaxThreshold",
}

export class SoleProprietorship extends SpeakeasyBase {
  /**
   * The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the governing country.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "countryOfGoverningLaw" })
  countryOfGoverningLaw: string;

  /**
   * The date when the legal arrangement was incorporated in YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateOfIncorporation" })
  dateOfIncorporation?: string;

  /**
   * The registered name, if different from the `name`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "doingBusinessAs" })
  doingBusinessAs?: string;

  /**
   * The legal name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "principalPlaceOfBusiness" })
  @Type(() => Address)
  principalPlaceOfBusiness?: Address;

  @SpeakeasyMetadata()
  @Expose({ name: "registeredAddress" })
  @Type(() => Address)
  registeredAddress: Address;

  /**
   * The registration number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "registrationNumber" })
  registrationNumber?: string;

  /**
   * The reason for not providing a VAT number.
   *
   * @remarks
   *
   * Possible values: **industryExemption**, **belowTaxThreshold**.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vatAbsenceReason" })
  vatAbsenceReason?: SoleProprietorshipVatAbsenceReasonEnum;

  /**
   * The VAT number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vatNumber" })
  vatNumber?: string;
}
