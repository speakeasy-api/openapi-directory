// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// WorkstationInput - A single instance of a developer workstation with its own persistent storage.
type WorkstationInput struct {
	// Client-specified annotations.
	Annotations map[string]string `json:"annotations,omitempty"`
	// Human-readable name for this resource.
	DisplayName *string `json:"displayName,omitempty"`
	// Environment variables passed to the workstation container's entrypoint.
	Env map[string]string `json:"env,omitempty"`
	// Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.
	Etag *string `json:"etag,omitempty"`
	// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
	Labels map[string]string `json:"labels,omitempty"`
	// Full name of this resource.
	Name *string `json:"name,omitempty"`
}

// WorkstationStateEnum - Output only. Current state of the workstation.
type WorkstationStateEnum string

const (
	WorkstationStateEnumStateUnspecified WorkstationStateEnum = "STATE_UNSPECIFIED"
	WorkstationStateEnumStateStarting    WorkstationStateEnum = "STATE_STARTING"
	WorkstationStateEnumStateRunning     WorkstationStateEnum = "STATE_RUNNING"
	WorkstationStateEnumStateStopping    WorkstationStateEnum = "STATE_STOPPING"
	WorkstationStateEnumStateStopped     WorkstationStateEnum = "STATE_STOPPED"
)

func (e WorkstationStateEnum) ToPointer() *WorkstationStateEnum {
	return &e
}

func (e *WorkstationStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "STATE_STARTING":
		fallthrough
	case "STATE_RUNNING":
		fallthrough
	case "STATE_STOPPING":
		fallthrough
	case "STATE_STOPPED":
		*e = WorkstationStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WorkstationStateEnum: %v", v)
	}
}

// Workstation - A single instance of a developer workstation with its own persistent storage.
type Workstation struct {
	// Client-specified annotations.
	Annotations map[string]string `json:"annotations,omitempty"`
	// Output only. Time when this resource was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Output only. Time when this resource was soft-deleted.
	DeleteTime *string `json:"deleteTime,omitempty"`
	// Human-readable name for this resource.
	DisplayName *string `json:"displayName,omitempty"`
	// Environment variables passed to the workstation container's entrypoint.
	Env map[string]string `json:"env,omitempty"`
	// Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.
	Etag *string `json:"etag,omitempty"`
	// Output only. Host to which clients can send HTTPS traffic that will be received by the workstation. Authorized traffic will be received to the workstation as HTTP on port 80. To send traffic to a different port, clients may prefix the host with the destination port in the format `{port}-{host}`.
	Host *string `json:"host,omitempty"`
	// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
	Labels map[string]string `json:"labels,omitempty"`
	// Full name of this resource.
	Name *string `json:"name,omitempty"`
	// Output only. Indicates whether this resource is currently being updated to match its intended state.
	Reconciling *bool `json:"reconciling,omitempty"`
	// Output only. Current state of the workstation.
	State *WorkstationStateEnum `json:"state,omitempty"`
	// Output only. A system-assigned unique identified for this resource.
	UID *string `json:"uid,omitempty"`
	// Output only. Time when this resource was most recently updated.
	UpdateTime *string `json:"updateTime,omitempty"`
}
