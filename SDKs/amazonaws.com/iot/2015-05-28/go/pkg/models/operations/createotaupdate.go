// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateOTAUpdateRequestBodyAwsJobAbortConfig - The criteria that determine when and how a job abort takes place.
type CreateOTAUpdateRequestBodyAwsJobAbortConfig struct {
	AbortCriteriaList []shared.AwsJobAbortCriteria `json:"abortCriteriaList,omitempty"`
}

// CreateOTAUpdateRequestBodyAwsJobExecutionsRolloutConfig - Configuration for the rollout of OTA updates.
type CreateOTAUpdateRequestBodyAwsJobExecutionsRolloutConfig struct {
	ExponentialRate  *shared.AwsJobExponentialRolloutRate `json:"exponentialRate,omitempty"`
	MaximumPerMinute *int64                               `json:"maximumPerMinute,omitempty"`
}

// CreateOTAUpdateRequestBodyAwsJobPresignedURLConfig - Configuration information for pre-signed URLs. Valid when <code>protocols</code> contains HTTP.
type CreateOTAUpdateRequestBodyAwsJobPresignedURLConfig struct {
	ExpiresInSec *int64 `json:"expiresInSec,omitempty"`
}

// CreateOTAUpdateRequestBodyAwsJobTimeoutConfig - Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
type CreateOTAUpdateRequestBodyAwsJobTimeoutConfig struct {
	InProgressTimeoutInMinutes *int64 `json:"inProgressTimeoutInMinutes,omitempty"`
}

// CreateOTAUpdateRequestBodyTargetSelectionEnum - Specifies whether the update will continue to run (CONTINUOUS), or will be complete after all the things specified as targets have completed the update (SNAPSHOT). If continuous, the update may also be run on a thing when a change is detected in a target. For example, an update will run on a thing when the thing is added to a target group, even after the update was completed by all things originally in the group. Valid values: CONTINUOUS | SNAPSHOT.
type CreateOTAUpdateRequestBodyTargetSelectionEnum string

const (
	CreateOTAUpdateRequestBodyTargetSelectionEnumContinuous CreateOTAUpdateRequestBodyTargetSelectionEnum = "CONTINUOUS"
	CreateOTAUpdateRequestBodyTargetSelectionEnumSnapshot   CreateOTAUpdateRequestBodyTargetSelectionEnum = "SNAPSHOT"
)

func (e *CreateOTAUpdateRequestBodyTargetSelectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONTINUOUS":
		fallthrough
	case "SNAPSHOT":
		*e = CreateOTAUpdateRequestBodyTargetSelectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOTAUpdateRequestBodyTargetSelectionEnum: %s", s)
	}
}

type CreateOTAUpdateRequestBody struct {
	// A list of additional OTA update parameters which are name-value pairs.
	AdditionalParameters map[string]string `json:"additionalParameters,omitempty"`
	// The criteria that determine when and how a job abort takes place.
	AwsJobAbortConfig *CreateOTAUpdateRequestBodyAwsJobAbortConfig `json:"awsJobAbortConfig,omitempty"`
	// Configuration for the rollout of OTA updates.
	AwsJobExecutionsRolloutConfig *CreateOTAUpdateRequestBodyAwsJobExecutionsRolloutConfig `json:"awsJobExecutionsRolloutConfig,omitempty"`
	// Configuration information for pre-signed URLs. Valid when <code>protocols</code> contains HTTP.
	AwsJobPresignedURLConfig *CreateOTAUpdateRequestBodyAwsJobPresignedURLConfig `json:"awsJobPresignedUrlConfig,omitempty"`
	// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
	AwsJobTimeoutConfig *CreateOTAUpdateRequestBodyAwsJobTimeoutConfig `json:"awsJobTimeoutConfig,omitempty"`
	// The description of the OTA update.
	Description *string `json:"description,omitempty"`
	// The files to be streamed by the OTA update.
	Files []shared.OTAUpdateFile `json:"files"`
	// The protocol used to transfer the OTA update image. Valid values are [HTTP], [MQTT], [HTTP, MQTT]. When both HTTP and MQTT are specified, the target device can choose the protocol.
	Protocols []shared.ProtocolEnum `json:"protocols,omitempty"`
	// The IAM role that grants Amazon Web Services IoT Core access to the Amazon S3, IoT jobs and Amazon Web Services Code Signing resources to create an OTA update job.
	RoleArn string `json:"roleArn"`
	// Metadata which can be used to manage updates.
	Tags []shared.Tag `json:"tags,omitempty"`
	// Specifies whether the update will continue to run (CONTINUOUS), or will be complete after all the things specified as targets have completed the update (SNAPSHOT). If continuous, the update may also be run on a thing when a change is detected in a target. For example, an update will run on a thing when the thing is added to a target group, even after the update was completed by all things originally in the group. Valid values: CONTINUOUS | SNAPSHOT.
	TargetSelection *CreateOTAUpdateRequestBodyTargetSelectionEnum `json:"targetSelection,omitempty"`
	// The devices targeted to receive OTA updates.
	Targets []string `json:"targets"`
}

type CreateOTAUpdateRequest struct {
	RequestBody       CreateOTAUpdateRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The ID of the OTA update to be created.
	OtaUpdateID string `pathParam:"style=simple,explode=false,name=otaUpdateId"`
}

type CreateOTAUpdateResponse struct {
	ContentType string
	// Success
	CreateOTAUpdateResponse *shared.CreateOTAUpdateResponse
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	StatusCode                  int
	RawResponse                 *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// UnauthorizedException
	UnauthorizedException interface{}
}
