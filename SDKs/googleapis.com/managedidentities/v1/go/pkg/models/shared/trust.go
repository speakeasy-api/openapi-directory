// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TrustTrustDirectionEnum - Required. The trust direction, which decides if the current domain is trusted, trusting, or both.
type TrustTrustDirectionEnum string

const (
	TrustTrustDirectionEnumTrustDirectionUnspecified TrustTrustDirectionEnum = "TRUST_DIRECTION_UNSPECIFIED"
	TrustTrustDirectionEnumInbound                   TrustTrustDirectionEnum = "INBOUND"
	TrustTrustDirectionEnumOutbound                  TrustTrustDirectionEnum = "OUTBOUND"
	TrustTrustDirectionEnumBidirectional             TrustTrustDirectionEnum = "BIDIRECTIONAL"
)

func (e TrustTrustDirectionEnum) ToPointer() *TrustTrustDirectionEnum {
	return &e
}

func (e *TrustTrustDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TRUST_DIRECTION_UNSPECIFIED":
		fallthrough
	case "INBOUND":
		fallthrough
	case "OUTBOUND":
		fallthrough
	case "BIDIRECTIONAL":
		*e = TrustTrustDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrustTrustDirectionEnum: %v", v)
	}
}

// TrustTrustTypeEnum - Required. The type of trust represented by the trust resource.
type TrustTrustTypeEnum string

const (
	TrustTrustTypeEnumTrustTypeUnspecified TrustTrustTypeEnum = "TRUST_TYPE_UNSPECIFIED"
	TrustTrustTypeEnumForest               TrustTrustTypeEnum = "FOREST"
	TrustTrustTypeEnumExternal             TrustTrustTypeEnum = "EXTERNAL"
)

func (e TrustTrustTypeEnum) ToPointer() *TrustTrustTypeEnum {
	return &e
}

func (e *TrustTrustTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TRUST_TYPE_UNSPECIFIED":
		fallthrough
	case "FOREST":
		fallthrough
	case "EXTERNAL":
		*e = TrustTrustTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrustTrustTypeEnum: %v", v)
	}
}

// TrustInput - Represents a relationship between two domains. This allows a controller in one domain to authenticate a user in another domain. If the trust is being changed, it will be placed into the UPDATING state, which indicates that the resource is being reconciled. At this point, Get will reflect an intermediate state.
type TrustInput struct {
	// Optional. The trust authentication type, which decides whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
	SelectiveAuthentication *bool `json:"selectiveAuthentication,omitempty"`
	// Required. The target DNS server IP addresses which can resolve the remote domain involved in the trust.
	TargetDNSIPAddresses []string `json:"targetDnsIpAddresses,omitempty"`
	// Required. The fully qualified target domain name which will be in trust with the current domain.
	TargetDomainName *string `json:"targetDomainName,omitempty"`
	// Required. The trust direction, which decides if the current domain is trusted, trusting, or both.
	TrustDirection *TrustTrustDirectionEnum `json:"trustDirection,omitempty"`
	// Required. The trust secret used for the handshake with the target domain. This will not be stored.
	TrustHandshakeSecret *string `json:"trustHandshakeSecret,omitempty"`
	// Required. The type of trust represented by the trust resource.
	TrustType *TrustTrustTypeEnum `json:"trustType,omitempty"`
}

// TrustStateEnum - Output only. The current state of the trust.
type TrustStateEnum string

const (
	TrustStateEnumStateUnspecified TrustStateEnum = "STATE_UNSPECIFIED"
	TrustStateEnumCreating         TrustStateEnum = "CREATING"
	TrustStateEnumUpdating         TrustStateEnum = "UPDATING"
	TrustStateEnumDeleting         TrustStateEnum = "DELETING"
	TrustStateEnumConnected        TrustStateEnum = "CONNECTED"
	TrustStateEnumDisconnected     TrustStateEnum = "DISCONNECTED"
)

func (e TrustStateEnum) ToPointer() *TrustStateEnum {
	return &e
}

func (e *TrustStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "CREATING":
		fallthrough
	case "UPDATING":
		fallthrough
	case "DELETING":
		fallthrough
	case "CONNECTED":
		fallthrough
	case "DISCONNECTED":
		*e = TrustStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrustStateEnum: %v", v)
	}
}

// Trust - Represents a relationship between two domains. This allows a controller in one domain to authenticate a user in another domain. If the trust is being changed, it will be placed into the UPDATING state, which indicates that the resource is being reconciled. At this point, Get will reflect an intermediate state.
type Trust struct {
	// Output only. The time the instance was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Output only. The last heartbeat time when the trust was known to be connected.
	LastTrustHeartbeatTime *string `json:"lastTrustHeartbeatTime,omitempty"`
	// Optional. The trust authentication type, which decides whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
	SelectiveAuthentication *bool `json:"selectiveAuthentication,omitempty"`
	// Output only. The current state of the trust.
	State *TrustStateEnum `json:"state,omitempty"`
	// Output only. Additional information about the current state of the trust, if available.
	StateDescription *string `json:"stateDescription,omitempty"`
	// Required. The target DNS server IP addresses which can resolve the remote domain involved in the trust.
	TargetDNSIPAddresses []string `json:"targetDnsIpAddresses,omitempty"`
	// Required. The fully qualified target domain name which will be in trust with the current domain.
	TargetDomainName *string `json:"targetDomainName,omitempty"`
	// Required. The trust direction, which decides if the current domain is trusted, trusting, or both.
	TrustDirection *TrustTrustDirectionEnum `json:"trustDirection,omitempty"`
	// Required. The trust secret used for the handshake with the target domain. This will not be stored.
	TrustHandshakeSecret *string `json:"trustHandshakeSecret,omitempty"`
	// Required. The type of trust represented by the trust resource.
	TrustType *TrustTrustTypeEnum `json:"trustType,omitempty"`
	// Output only. The last update time.
	UpdateTime *string `json:"updateTime,omitempty"`
}
