<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class InfoRequests123 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * getAccountResources
     * 
     * getAccountResources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetaccountresourcesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetaccountresourcesResponse
     */
	public function getaccountresources(
        \OpenAPI\OpenAPI\Models\Operations\GetaccountresourcesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetaccountresourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/account/{address}/resources', \OpenAPI\OpenAPI\Models\Operations\GetaccountresourcesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetaccountresourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getaccountresources200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getaccountresources200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getBlock
     * 
     * getBlock
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Getblock3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getblock3Response
     */
	public function getblock3(
        \OpenAPI\OpenAPI\Models\Operations\Getblock3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getblock3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/blocks/{block}', \OpenAPI\OpenAPI\Models\Operations\Getblock3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getblock3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getblock3200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getblock3200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getChainParameters
     * 
     * getChainParameters
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetchainparametersResponse
     */
	public function getchainparameters(
    ): \OpenAPI\OpenAPI\Models\Operations\GetchainparametersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/chainparameters');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetchainparametersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getchainparameters200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getchainparameters200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getLastBlockNumber
     * 
     * Get the latest block number
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber3Response
     */
	public function getlastblocknumber3(
    ): \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/blocks/number');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getlastblocknumber3200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber3200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTransaction
     * 
     * You can get your transaction decoded by add /decoded to your api call. If you want to get the transaction encoded, youst remove the /decoded part
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Gettransaction3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Gettransaction3Response
     */
	public function gettransaction3(
        \OpenAPI\OpenAPI\Models\Operations\Gettransaction3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Gettransaction3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/transactions/{transaction}/decoded', \OpenAPI\OpenAPI\Models\Operations\Gettransaction3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Gettransaction3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettransaction3200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettransaction3200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTransactionReceipt
     * 
     * You can get your transaction decoded by add /decoded to your api call. If you want to get the transaction encoded, youst remove the /decoded part
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt3Response
     */
	public function gettransactionreceipt3(
        \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/transactions/{transaction}/receipt/decoded', \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt3Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettransactionreceipt3200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt3200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTRC10Balance
     * 
     * getTRC10Balance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Gettrc10balanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Gettrc10balanceResponse
     */
	public function gettrc10balance(
        \OpenAPI\OpenAPI\Models\Operations\Gettrc10balanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Gettrc10balanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/balances/{account}/trc10/{tokenId}', \OpenAPI\OpenAPI\Models\Operations\Gettrc10balanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Gettrc10balanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettrc10balance200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettrc10balance200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTRC20Balance
     * 
     * getTRC20Balance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Gettrc20balanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Gettrc20balanceResponse
     */
	public function gettrc20balance(
        \OpenAPI\OpenAPI\Models\Operations\Gettrc20balanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Gettrc20balanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/balances/{account}/trc20/{token}', \OpenAPI\OpenAPI\Models\Operations\Gettrc20balanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Gettrc20balanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettrc20balance200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettrc20balance200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTronBalance
     * 
     * getTronBalance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GettronbalanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GettronbalanceResponse
     */
	public function gettronbalance(
        \OpenAPI\OpenAPI\Models\Operations\GettronbalanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GettronbalanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/balances/{address}', \OpenAPI\OpenAPI\Models\Operations\GettronbalanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GettronbalanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettronbalance200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettronbalance200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}