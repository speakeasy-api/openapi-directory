// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type KafkaRulePatchRuleTypeEnum string

const (
	KafkaRulePatchRuleTypeEnumKafka KafkaRulePatchRuleTypeEnum = "kafka"
)

func (e KafkaRulePatchRuleTypeEnum) ToPointer() *KafkaRulePatchRuleTypeEnum {
	return &e
}

func (e *KafkaRulePatchRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "kafka":
		*e = KafkaRulePatchRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaRulePatchRuleTypeEnum: %v", v)
	}
}

type KafkaRulePatchTargetAuthSaslMechanismEnum string

const (
	KafkaRulePatchTargetAuthSaslMechanismEnumPlain       KafkaRulePatchTargetAuthSaslMechanismEnum = "plain"
	KafkaRulePatchTargetAuthSaslMechanismEnumScramSha256 KafkaRulePatchTargetAuthSaslMechanismEnum = "scram-sha-256"
	KafkaRulePatchTargetAuthSaslMechanismEnumScramSha512 KafkaRulePatchTargetAuthSaslMechanismEnum = "scram-sha-512"
)

func (e KafkaRulePatchTargetAuthSaslMechanismEnum) ToPointer() *KafkaRulePatchTargetAuthSaslMechanismEnum {
	return &e
}

func (e *KafkaRulePatchTargetAuthSaslMechanismEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "plain":
		fallthrough
	case "scram-sha-256":
		fallthrough
	case "scram-sha-512":
		*e = KafkaRulePatchTargetAuthSaslMechanismEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaRulePatchTargetAuthSaslMechanismEnum: %v", v)
	}
}

type KafkaRulePatchTargetAuthSasl struct {
	Mechanism *KafkaRulePatchTargetAuthSaslMechanismEnum `json:"mechanism,omitempty"`
	Password  *string                                    `json:"password,omitempty"`
	Username  *string                                    `json:"username,omitempty"`
}

type KafkaRulePatchTargetAuth struct {
	Sasl *KafkaRulePatchTargetAuthSasl `json:"sasl,omitempty"`
}

type KafkaRulePatchTarget struct {
	Auth       *KafkaRulePatchTargetAuth `json:"auth,omitempty"`
	Brokers    []string                  `json:"brokers,omitempty"`
	Enveloped  *bool                     `json:"enveloped,omitempty"`
	Format     *string                   `json:"format,omitempty"`
	RoutingKey *string                   `json:"routingKey,omitempty"`
}

type KafkaRulePatch struct {
	RequestMode *string                    `json:"requestMode,omitempty"`
	RuleType    KafkaRulePatchRuleTypeEnum `json:"ruleType"`
	Source      *RuleSourcePatch           `json:"source,omitempty"`
	Status      *string                    `json:"status,omitempty"`
	Target      *KafkaRulePatchTarget      `json:"target,omitempty"`
}
