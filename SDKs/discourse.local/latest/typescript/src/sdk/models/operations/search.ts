/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class SearchRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The query string needs to be url encoded and is made up of the following options:
   *
   * @remarks
   * - Search term. This is just a string. Usually it would be the first item in the query.
   * - `@<username>`: Use the `@` followed by the username to specify posts by this user.
   * - `#<category>`: Use the `#` followed by the category slug to search within this category.
   * - `tags:`: `api,solved` or for posts that have all the specified tags `api+solved`.
   * - `before:`: `yyyy-mm-dd`
   * - `after:`: `yyyy-mm-dd`
   * - `order:`: `latest`, `likes`, `views`, `latest_topic`
   * - `assigned:`: username (without `@`)
   * - `in:`: `title`, `likes`, `personal`, `messages`, `seen`, `unseen`, `posted`, `created`, `watching`, `tracking`, `bookmarks`, `assigned`, `unassigned`, `first`, `pinned`, `wiki`
   * - `with:`: `images`
   * - `status:`: `open`, `closed`, `public`, `archived`, `noreplies`, `single_user`, `solved`, `unsolved`
   * - `group:`: group_name or group_id
   * - `group_messages:`: group_name or group_id
   * - `min_posts:`: 1
   * - `max_posts:`: 10
   * - `min_views:`: 1
   * - `max_views:`: 10
   *
   * If you are using cURL you can use the `-G` and the `--data-urlencode` flags to encode the query:
   *
   * ```
   * curl -i -sS -X GET -G "http://localhost:4200/search.json" \
   * --data-urlencode 'q=wordpress @scossar #fun after:2020-01-01'
   * ```
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=q" })
  q?: string;
}

export class Search200ApplicationJSONGroupedSearchResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "can_create_topic" })
  canCreateTopic: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "category_ids" })
  categoryIds: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error: string;

  @SpeakeasyMetadata()
  @Expose({ name: "group_ids" })
  groupIds: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "more_categories" })
  moreCategories: string;

  @SpeakeasyMetadata()
  @Expose({ name: "more_full_page_results" })
  moreFullPageResults: string;

  @SpeakeasyMetadata()
  @Expose({ name: "more_posts" })
  morePosts: string;

  @SpeakeasyMetadata()
  @Expose({ name: "more_users" })
  moreUsers: string;

  @SpeakeasyMetadata()
  @Expose({ name: "post_ids" })
  postIds: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "search_log_id" })
  searchLogId: number;

  @SpeakeasyMetadata()
  @Expose({ name: "tag_ids" })
  tagIds: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "term" })
  term: string;

  @SpeakeasyMetadata()
  @Expose({ name: "user_ids" })
  userIds: any[];
}

/**
 * success response
 */
export class Search200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "categories" })
  categories: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "grouped_search_result" })
  @Type(() => Search200ApplicationJSONGroupedSearchResult)
  groupedSearchResult: Search200ApplicationJSONGroupedSearchResult;

  @SpeakeasyMetadata()
  @Expose({ name: "groups" })
  groups: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "posts" })
  posts: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "users" })
  users: any[];
}

export class SearchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * success response
   */
  @SpeakeasyMetadata()
  search200ApplicationJSONObject?: Search200ApplicationJSON;
}
