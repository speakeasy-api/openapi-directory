// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTPutAttributesActionEnum
type POSTPutAttributesActionEnum string

const (
	POSTPutAttributesActionEnumPutAttributes POSTPutAttributesActionEnum = "PutAttributes"
)

func (e *POSTPutAttributesActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PutAttributes":
		*e = POSTPutAttributesActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTPutAttributesActionEnum: %s", s)
	}
}

// POSTPutAttributesVersionEnum
type POSTPutAttributesVersionEnum string

const (
	POSTPutAttributesVersionEnumTwoThousandAndNine0415 POSTPutAttributesVersionEnum = "2009-04-15"
)

func (e *POSTPutAttributesVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2009-04-15":
		*e = POSTPutAttributesVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTPutAttributesVersionEnum: %s", s)
	}
}

type POSTPutAttributesRequest struct {
	AWSAccessKeyID   string                       `queryParam:"style=form,explode=true,name=AWSAccessKeyId"`
	Action           POSTPutAttributesActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	RequestBody      []byte                       `request:"mediaType=text/xml"`
	Signature        string                       `queryParam:"style=form,explode=true,name=Signature"`
	SignatureMethod  string                       `queryParam:"style=form,explode=true,name=SignatureMethod"`
	SignatureVersion string                       `queryParam:"style=form,explode=true,name=SignatureVersion"`
	Timestamp        string                       `queryParam:"style=form,explode=true,name=Timestamp"`
	Version          POSTPutAttributesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTPutAttributesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
