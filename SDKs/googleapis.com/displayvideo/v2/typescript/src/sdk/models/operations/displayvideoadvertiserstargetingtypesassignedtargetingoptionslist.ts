/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

/**
 * Required. Identifies the type of assigned targeting options to list. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_YOUTUBE_VIDEO` * `TARGETING_TYPE_YOUTUBE_CHANNEL`
 */
export enum DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListTargetingTypeEnum {
  TargetingTypeUnspecified = "TARGETING_TYPE_UNSPECIFIED",
  TargetingTypeChannel = "TARGETING_TYPE_CHANNEL",
  TargetingTypeAppCategory = "TARGETING_TYPE_APP_CATEGORY",
  TargetingTypeApp = "TARGETING_TYPE_APP",
  TargetingTypeUrl = "TARGETING_TYPE_URL",
  TargetingTypeDayAndTime = "TARGETING_TYPE_DAY_AND_TIME",
  TargetingTypeAgeRange = "TARGETING_TYPE_AGE_RANGE",
  TargetingTypeRegionalLocationList = "TARGETING_TYPE_REGIONAL_LOCATION_LIST",
  TargetingTypeProximityLocationList = "TARGETING_TYPE_PROXIMITY_LOCATION_LIST",
  TargetingTypeGender = "TARGETING_TYPE_GENDER",
  TargetingTypeVideoPlayerSize = "TARGETING_TYPE_VIDEO_PLAYER_SIZE",
  TargetingTypeUserRewardedContent = "TARGETING_TYPE_USER_REWARDED_CONTENT",
  TargetingTypeParentalStatus = "TARGETING_TYPE_PARENTAL_STATUS",
  TargetingTypeContentInstreamPosition = "TARGETING_TYPE_CONTENT_INSTREAM_POSITION",
  TargetingTypeContentOutstreamPosition = "TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION",
  TargetingTypeDeviceType = "TARGETING_TYPE_DEVICE_TYPE",
  TargetingTypeAudienceGroup = "TARGETING_TYPE_AUDIENCE_GROUP",
  TargetingTypeBrowser = "TARGETING_TYPE_BROWSER",
  TargetingTypeHouseholdIncome = "TARGETING_TYPE_HOUSEHOLD_INCOME",
  TargetingTypeOnScreenPosition = "TARGETING_TYPE_ON_SCREEN_POSITION",
  TargetingTypeThirdPartyVerifier = "TARGETING_TYPE_THIRD_PARTY_VERIFIER",
  TargetingTypeDigitalContentLabelExclusion = "TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION",
  TargetingTypeSensitiveCategoryExclusion = "TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION",
  TargetingTypeEnvironment = "TARGETING_TYPE_ENVIRONMENT",
  TargetingTypeCarrierAndIsp = "TARGETING_TYPE_CARRIER_AND_ISP",
  TargetingTypeOperatingSystem = "TARGETING_TYPE_OPERATING_SYSTEM",
  TargetingTypeDeviceMakeModel = "TARGETING_TYPE_DEVICE_MAKE_MODEL",
  TargetingTypeKeyword = "TARGETING_TYPE_KEYWORD",
  TargetingTypeNegativeKeywordList = "TARGETING_TYPE_NEGATIVE_KEYWORD_LIST",
  TargetingTypeViewability = "TARGETING_TYPE_VIEWABILITY",
  TargetingTypeCategory = "TARGETING_TYPE_CATEGORY",
  TargetingTypeInventorySource = "TARGETING_TYPE_INVENTORY_SOURCE",
  TargetingTypeLanguage = "TARGETING_TYPE_LANGUAGE",
  TargetingTypeAuthorizedSellerStatus = "TARGETING_TYPE_AUTHORIZED_SELLER_STATUS",
  TargetingTypeGeoRegion = "TARGETING_TYPE_GEO_REGION",
  TargetingTypeInventorySourceGroup = "TARGETING_TYPE_INVENTORY_SOURCE_GROUP",
  TargetingTypeExchange = "TARGETING_TYPE_EXCHANGE",
  TargetingTypeSubExchange = "TARGETING_TYPE_SUB_EXCHANGE",
  TargetingTypePoi = "TARGETING_TYPE_POI",
  TargetingTypeBusinessChain = "TARGETING_TYPE_BUSINESS_CHAIN",
  TargetingTypeContentDuration = "TARGETING_TYPE_CONTENT_DURATION",
  TargetingTypeContentStreamType = "TARGETING_TYPE_CONTENT_STREAM_TYPE",
  TargetingTypeNativeContentPosition = "TARGETING_TYPE_NATIVE_CONTENT_POSITION",
  TargetingTypeOmid = "TARGETING_TYPE_OMID",
  TargetingTypeAudioContentType = "TARGETING_TYPE_AUDIO_CONTENT_TYPE",
  TargetingTypeContentGenre = "TARGETING_TYPE_CONTENT_GENRE",
  TargetingTypeYoutubeVideo = "TARGETING_TYPE_YOUTUBE_VIDEO",
  TargetingTypeYoutubeChannel = "TARGETING_TYPE_YOUTUBE_CHANNEL",
  TargetingTypeSessionPosition = "TARGETING_TYPE_SESSION_POSITION",
}

export class DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * Required. The ID of the advertiser.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=advertiserId",
  })
  advertiserId: string;

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * Allows filtering by assigned targeting option properties. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * The operator must be `EQUALS (=)`. * Supported fields: - `assignedTargetingOptionId` Examples: * AssignedTargetingOption with ID 123456 `assignedTargetingOptionId="123456"` The length of this field should be no more than 500 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter",
  })
  filter?: string;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * Field by which to sort the list. Acceptable values are: * `assignedTargetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `assignedTargetingOptionId desc`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=orderBy",
  })
  orderBy?: string;

  /**
   * Requested page size. Must be between `1` and `5000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pageSize",
  })
  pageSize?: number;

  /**
   * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListAdvertiserAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pageToken",
  })
  pageToken?: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * Required. Identifies the type of assigned targeting options to list. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_YOUTUBE_VIDEO` * `TARGETING_TYPE_YOUTUBE_CHANNEL`
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=targetingType",
  })
  targetingType: DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListTargetingTypeEnum;

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;
}

export class DisplayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  listAdvertiserAssignedTargetingOptionsResponse?: shared.ListAdvertiserAssignedTargetingOptionsResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
