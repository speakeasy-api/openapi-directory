// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type WebhookActivityEntryAttributesType string

const (
	WebhookActivityEntryAttributesTypeWebhookActivityAttributesV2 WebhookActivityEntryAttributesType = "WebhookActivityAttributesV2"
	WebhookActivityEntryAttributesTypeWebhookActivityAttributesV1 WebhookActivityEntryAttributesType = "WebhookActivityAttributesV1"
)

type WebhookActivityEntryAttributes struct {
	WebhookActivityAttributesV2 *WebhookActivityAttributesV2
	WebhookActivityAttributesV1 *WebhookActivityAttributesV1

	Type WebhookActivityEntryAttributesType
}

func CreateWebhookActivityEntryAttributesWebhookActivityAttributesV2(webhookActivityAttributesV2 WebhookActivityAttributesV2) WebhookActivityEntryAttributes {
	typ := WebhookActivityEntryAttributesTypeWebhookActivityAttributesV2
	typStr := string(typ)
	webhookActivityAttributesV2.WebhookFormat = &typStr

	return WebhookActivityEntryAttributes{
		WebhookActivityAttributesV2: &webhookActivityAttributesV2,
		Type:                        typ,
	}
}

func CreateWebhookActivityEntryAttributesWebhookActivityAttributesV1(webhookActivityAttributesV1 WebhookActivityAttributesV1) WebhookActivityEntryAttributes {
	typ := WebhookActivityEntryAttributesTypeWebhookActivityAttributesV1
	typStr := string(typ)
	webhookActivityAttributesV1.WebhookFormat = &typStr

	return WebhookActivityEntryAttributes{
		WebhookActivityAttributesV1: &webhookActivityAttributesV1,
		Type:                        typ,
	}
}

func (u *WebhookActivityEntryAttributes) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		WebhookFormat string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.WebhookFormat {
	case "WebhookActivityAttributesV2":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		webhookActivityAttributesV2 := new(WebhookActivityAttributesV2)
		if err := d.Decode(&webhookActivityAttributesV2); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.WebhookActivityAttributesV2 = webhookActivityAttributesV2
		u.Type = WebhookActivityEntryAttributesTypeWebhookActivityAttributesV2
		return nil
	case "WebhookActivityAttributesV1":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		webhookActivityAttributesV1 := new(WebhookActivityAttributesV1)
		if err := d.Decode(&webhookActivityAttributesV1); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.WebhookActivityAttributesV1 = webhookActivityAttributesV1
		u.Type = WebhookActivityEntryAttributesTypeWebhookActivityAttributesV1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u WebhookActivityEntryAttributes) MarshalJSON() ([]byte, error) {
	if u.WebhookActivityAttributesV2 != nil {
		return json.Marshal(u.WebhookActivityAttributesV2)
	}

	if u.WebhookActivityAttributesV1 != nil {
		return json.Marshal(u.WebhookActivityAttributesV1)
	}

	return nil, nil
}

type WebhookActivityEntryTypeEnum string

const (
	WebhookActivityEntryTypeEnumWebhookActivity WebhookActivityEntryTypeEnum = "webhookActivity"
)

func (e WebhookActivityEntryTypeEnum) ToPointer() *WebhookActivityEntryTypeEnum {
	return &e
}

func (e *WebhookActivityEntryTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "webhookActivity":
		*e = WebhookActivityEntryTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookActivityEntryTypeEnum: %v", v)
	}
}

type WebhookActivityEntry struct {
	Attributes *WebhookActivityEntryAttributes `json:"attributes,omitempty"`
	ID         *int64                          `json:"id,omitempty"`
	Type       *WebhookActivityEntryTypeEnum   `json:"type,omitempty"`
}
