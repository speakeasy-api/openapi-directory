"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class BadgeExpiryExpiryTypeEnum(str, Enum):
    DATE = 'date'
    TIMEFRAME = 'timeframe'

class BadgeExpiryTimeframeUnitEnum(str, Enum):
    DAYS = 'days'
    MONTHS = 'months'
    YEARS = 'years'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BadgeExpiry:
    
    expiration_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expirationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    expires: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires'), 'exclude': lambda f: f is None }})  
    expiry_type: Optional[BadgeExpiryExpiryTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiryType'), 'exclude': lambda f: f is None }})  
    timeframe_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeframeAmount'), 'exclude': lambda f: f is None }})  
    timeframe_unit: Optional[BadgeExpiryTimeframeUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeframeUnit'), 'exclude': lambda f: f is None }})  
    