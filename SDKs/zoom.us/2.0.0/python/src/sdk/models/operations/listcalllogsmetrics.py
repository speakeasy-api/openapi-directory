"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ListCallLogsMetricsRequest:
    
    from_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Start date for the report in `yyyy-mm-dd` format. Specify a 30 day range using the `from` and `to` parameters as the response provides a maximum of a month worth of data per API request."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single call."""  
    quality_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quality_type', 'style': 'form', 'explode': True }})
    r"""Filter call logs by voice quality. Zoom uses MOS of 3.5 as a general baseline to categorize calls by call quality. A MOS greater than or equal to 3.5 means good quality, while below 3.5 means poor quality. <br><br>The value of this field can be one of the following:<br>
    * `good`: Retrieve call logs of the call(s) with good quality of voice.<br>
    * `bad`: Retrieve call logs of the call(s) with good quality of voice.<br>
    * `all`: Retrieve all call logs without filtering by voice quality.
    """  
    site_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'site_id', 'style': 'form', 'explode': True }})
    r"""Unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites). Use this query parameter if you have enabled multiple sites and would like to filter the response of this API call by call logs of a specific phone site."""  
    to: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""End date for the report in `yyyy-mm-dd` format."""  
    

@dataclasses.dataclass
class ListCallLogsMetrics200ApplicationXMLCallLogsCallee:
    r"""Callee object contains information of the calee."""
    
    codec: Optional[str] = dataclasses.field(default=None)
    r"""Audio codec."""  
    device_type: Optional[str] = dataclasses.field(default=None)
    r"""Device type."""  
    extension_number: Optional[str] = dataclasses.field(default=None)
    r"""Full extension number of the callee."""  
    headset: Optional[str] = dataclasses.field(default=None)
    r"""Headset used for the call by the callee."""  
    isp: Optional[str] = dataclasses.field(default=None)
    r"""ISP."""  
    microphone: Optional[str] = dataclasses.field(default=None)
    r"""Microphone used for the call by the callee."""  
    phone_number: Optional[str] = dataclasses.field(default=None)
    r"""Phone number of the callee in E164 format."""  
    site_id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites)."""  
    

@dataclasses.dataclass
class ListCallLogsMetrics200ApplicationXMLCallLogsCaller:
    r"""Caller object contains information of the caller."""
    
    codec: Optional[str] = dataclasses.field(default=None)
    r"""Audio codec."""  
    device_type: Optional[str] = dataclasses.field(default=None)
    r"""Device type."""  
    extension_number: Optional[str] = dataclasses.field(default=None)
    r"""Full extension number of the caller."""  
    headset: Optional[str] = dataclasses.field(default=None)
    r"""Headset used for the call by the caller."""  
    isp: Optional[str] = dataclasses.field(default=None)
    r"""ISP."""  
    microphone: Optional[str] = dataclasses.field(default=None)
    r"""Microphone used for the call by the caller."""  
    phone_number: Optional[str] = dataclasses.field(default=None)
    r"""Phone number of the caller in E164 format."""  
    site_id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites)."""  
    

@dataclasses.dataclass
class ListCallLogsMetrics200ApplicationXMLCallLogs:
    
    call_id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the phone call."""  
    callee: Optional[ListCallLogsMetrics200ApplicationXMLCallLogsCallee] = dataclasses.field(default=None)
    r"""Callee object contains information of the calee."""  
    caller: Optional[ListCallLogsMetrics200ApplicationXMLCallLogsCaller] = dataclasses.field(default=None)
    r"""Caller object contains information of the caller."""  
    date_time: Optional[str] = dataclasses.field(default=None)
    r"""Date and time at which the call started."""  
    direction: Optional[str] = dataclasses.field(default=None)
    r"""Direction of the call. The value of this field can be either `internal` or `outbound`."""  
    duration: Optional[int] = dataclasses.field(default=None)
    r"""Duration of the call in seconds."""  
    mos: Optional[str] = dataclasses.field(default=None)
    r"""Zoom uses Mean Opinion Score (MOS) as the main measurement to report on voice quality. MOS measures voice quality on a scale of 1 to 5. A score of 1 indicates unacceptable voice quality for all users. A score of 5 is the best voice quality."""  
    

@dataclasses.dataclass
class ListCallLogsMetrics200ApplicationXML:
    
    call_logs: Optional[list[ListCallLogsMetrics200ApplicationXMLCallLogs]] = dataclasses.field(default=None)
    r"""Call logs."""  
    from_: Optional[str] = dataclasses.field(default=None)
    r"""Start date for the report in `yyyy-mm-dd` format."""  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned within a single call."""  
    to: Optional[str] = dataclasses.field(default=None)
    r"""End date for the report in `yyyy-mm-dd` format."""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The total number of records available across all pages."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListCallLogsMetrics200ApplicationJSONCallLogsCallee:
    r"""Callee object contains information of the calee."""
    
    codec: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('codec'), 'exclude': lambda f: f is None }})
    r"""Audio codec."""  
    device_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_type'), 'exclude': lambda f: f is None }})
    r"""Device type."""  
    extension_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension_number'), 'exclude': lambda f: f is None }})
    r"""Full extension number of the callee."""  
    headset: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headset'), 'exclude': lambda f: f is None }})
    r"""Headset used for the call by the callee."""  
    isp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isp'), 'exclude': lambda f: f is None }})
    r"""ISP."""  
    microphone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('microphone'), 'exclude': lambda f: f is None }})
    r"""Microphone used for the call by the callee."""  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_number'), 'exclude': lambda f: f is None }})
    r"""Phone number of the callee in E164 format."""  
    site_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListCallLogsMetrics200ApplicationJSONCallLogsCaller:
    r"""Caller object contains information of the caller."""
    
    codec: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('codec'), 'exclude': lambda f: f is None }})
    r"""Audio codec."""  
    device_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_type'), 'exclude': lambda f: f is None }})
    r"""Device type."""  
    extension_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension_number'), 'exclude': lambda f: f is None }})
    r"""Full extension number of the caller."""  
    headset: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headset'), 'exclude': lambda f: f is None }})
    r"""Headset used for the call by the caller."""  
    isp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isp'), 'exclude': lambda f: f is None }})
    r"""ISP."""  
    microphone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('microphone'), 'exclude': lambda f: f is None }})
    r"""Microphone used for the call by the caller."""  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_number'), 'exclude': lambda f: f is None }})
    r"""Phone number of the caller in E164 format."""  
    site_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListCallLogsMetrics200ApplicationJSONCallLogs:
    
    call_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the phone call."""  
    callee: Optional[ListCallLogsMetrics200ApplicationJSONCallLogsCallee] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callee'), 'exclude': lambda f: f is None }})
    r"""Callee object contains information of the calee."""  
    caller: Optional[ListCallLogsMetrics200ApplicationJSONCallLogsCaller] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caller'), 'exclude': lambda f: f is None }})
    r"""Caller object contains information of the caller."""  
    date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_time'), 'exclude': lambda f: f is None }})
    r"""Date and time at which the call started."""  
    direction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})
    r"""Direction of the call. The value of this field can be either `internal` or `outbound`."""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Duration of the call in seconds."""  
    mos: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mos'), 'exclude': lambda f: f is None }})
    r"""Zoom uses Mean Opinion Score (MOS) as the main measurement to report on voice quality. MOS measures voice quality on a scale of 1 to 5. A score of 1 indicates unacceptable voice quality for all users. A score of 5 is the best voice quality."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListCallLogsMetrics200ApplicationJSON:
    
    call_logs: Optional[list[ListCallLogsMetrics200ApplicationJSONCallLogs]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_logs'), 'exclude': lambda f: f is None }})
    r"""Call logs."""  
    from_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'exclude': lambda f: f is None }})
    r"""Start date for the report in `yyyy-mm-dd` format."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single call."""  
    to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'exclude': lambda f: f is None }})
    r"""End date for the report in `yyyy-mm-dd` format."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The total number of records available across all pages."""  
    

@dataclasses.dataclass
class ListCallLogsMetricsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    list_call_logs_metrics_200_application_json_object: Optional[ListCallLogsMetrics200ApplicationJSON] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    