"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Groups:
    r"""Search, subscribe and unsubscribe to groups."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def contact_moderators(self, request: operations.ContactModeratorsRequest) -> operations.ContactModeratorsResponse:
        r"""Contact group moderators"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactModeratorsRequest, base_url, '/groups/{group_id}/contact', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactModeratorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_group(self, request: operations.GetGroupRequest, security: operations.GetGroupSecurity) -> operations.GetGroupResponse:
        r"""Retrieve a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGroupRequest, base_url, '/groups/{group_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Group])
                res.group = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_groups_by_ids(self, request: operations.GetGroupsByIdsRequest, security: operations.GetGroupsByIdsSecurity) -> operations.GetGroupsByIdsResponse:
        r"""Retrieve multiple groups"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/groups/multiple'
        
        query_params = utils.get_query_params(operations.GetGroupsByIdsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGroupsByIdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Group]])
                res.groups = out
        elif http_res.status_code == 400:
            pass

        return res

    def join_groups(self, request: operations.JoinGroupsRequestBody) -> operations.JoinGroupsResponse:
        r"""Join groups
        Request membership to one or more groups. <br /><br /> NOTE: Any group with a has_questions field set to true will also require answers to the groups' new member questionnaire to be submitted.  Groups waiting for answers will have their membership field set to 'pending-questions'.  And the questionnaire that needs to be answered can be found in the membership.questionnaire field of the group after a subscribe request is made to that group.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/groups/subscribe'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JoinGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.JoinGroups200ApplicationJSON])
                res.join_groups_200_application_json_object = out
        elif http_res.status_code in [400, 404]:
            pass

        return res

    def leave_group(self, request: operations.LeaveGroupRequest) -> operations.LeaveGroupResponse:
        r"""Leave a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LeaveGroupRequest, base_url, '/groups/{group_id}/unsubscribe', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LeaveGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Group])
                res.group = out
        elif http_res.status_code in [400, 404]:
            pass

        return res

    def search_groups(self, request: operations.SearchGroupsRequest, security: operations.SearchGroupsSecurity) -> operations.SearchGroupsResponse:
        r"""Search groups"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/groups'
        
        query_params = utils.get_query_params(operations.SearchGroupsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SearchGroups200ApplicationJSON])
                res.search_groups_200_application_json_object = out
        elif http_res.status_code == 400:
            pass

        return res

    def submit_answers(self, request: operations.SubmitAnswersRequest) -> operations.SubmitAnswersResponse:
        r"""Submit group answers
        Submits answers to a groups' membership questionnaire. <br /><br /> The request body should be a JSON object mapping each question from the group membership.questionnaire.questions field to an answer (eg. {\"Where do you live?\": \"New York City\"} ). All questions are required so no null or empty string answers are allowed.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SubmitAnswersRequest, base_url, '/groups/{group_id}/answers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubmitAnswersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Group])
                res.group = out
        elif http_res.status_code in [400, 404]:
            pass

        return res

    