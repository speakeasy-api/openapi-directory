"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmailValidateResponse:
    
    domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain') }})
    r"""The email domain"""  
    domain_error: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain-error') }})
    r"""True if this address has a domain error (e.g. no valid mail server records)"""  
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""The email address. If you have used the fix-typos option then this will be the fixed address"""  
    is_disposable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-disposable') }})
    r"""True if this address is a disposable, temporary or darknet related email address"""  
    is_freemail: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-freemail') }})
    r"""True if this address is a free-mail address"""  
    is_personal: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-personal') }})
    r"""True if this address belongs to a person. False if this is a role based address, e.g. admin@, help@, office@, etc."""  
    provider: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider') }})
    r"""The email service provider domain"""  
    syntax_error: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syntax-error') }})
    r"""True if this address has a syntax error"""  
    typos_fixed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('typos-fixed') }})
    r"""True if typos have been fixed"""  
    valid: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valid') }})
    r"""Is this a valid email"""  
    