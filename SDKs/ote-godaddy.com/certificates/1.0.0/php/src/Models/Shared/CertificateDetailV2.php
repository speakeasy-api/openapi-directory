<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CertificateDetailV2 - Certificate details retrieved
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CertificateDetailV2
{
    /**
     * The unique identifier of the certificate request. Only present if no errors returned
     * 
     * @var string $certificateId
     */
	#[\JMS\Serializer\Annotation\SerializedName('certificateId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $certificateId;
    
    /**
     * Common name of certificate
     * 
     * @var string $commonName
     */
	#[\JMS\Serializer\Annotation\SerializedName('commonName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $commonName;
    
    /**
     * The date the certificate request completed processing.
     * 
     * @var ?string $completedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('completedAt')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $completedAt = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('contact')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CertificateContact')]
    public CertificateContact $contact;
    
    /**
     * The date the certificate was ordered.
     * 
     * @var string $createdAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('createdAt')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $createdAt;
    
    /**
     * Certificate signing request (if present) in PEM format
     * 
     * @var ?string $csr
     */
	#[\JMS\Serializer\Annotation\SerializedName('csr')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $csr = null;
    
    /**
     * Only present if certificate order has been denied
     * 
     * @var ?string $deniedReason
     */
	#[\JMS\Serializer\Annotation\SerializedName('deniedReason')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $deniedReason = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('organization')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CertificateOrganization')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CertificateOrganization $organization = null;
    
    /**
     * Validity period of order. Specified in years
     * 
     * @var int $period
     */
	#[\JMS\Serializer\Annotation\SerializedName('period')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $period;
    
    /**
     * Percentage of completion for certificate vetting
     * 
     * @var ?int $progress
     */
	#[\JMS\Serializer\Annotation\SerializedName('progress')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $progress = null;
    
    /**
     * Only returned when a renewal is available.
     * 
     * @var ?bool $renewalAvailable
     */
	#[\JMS\Serializer\Annotation\SerializedName('renewalAvailable')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $renewalAvailable = null;
    
    /**
     * The revocation date of certificate (if revoked).
     * 
     * @var ?string $revokedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('revokedAt')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $revokedAt = null;
    
    /**
     * Root type: 
     * 
     *   * `GODADDY_SHA_1` - GoDaddy (Secure Hash Algorithm 1) SHA-1 root type
     *   * `GODADDY_SHA_2` - GoDaddy (Secure Hash Algorithm 2) SHA-2 root type
     *   * `STARFIELD_SHA_1` - Starfield SHA-1 root type
     *   * `STARFIELD_SHA_2` - Starfield SHA-2 root type
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CertificateDetailV2RootTypeEnum $rootType
     */
	#[\JMS\Serializer\Annotation\SerializedName('rootType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CertificateDetailV2RootTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CertificateDetailV2RootTypeEnum $rootType = null;
    
    /**
     * Serial number of certificate (if issued or revoked)
     * 
     * @var ?string $serialNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('serialNumber')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $serialNumber = null;
    
    /**
     * Hexadecmial format for Serial number of certificate(if issued or revoked)
     * 
     * @var ?string $serialNumberHex
     */
	#[\JMS\Serializer\Annotation\SerializedName('serialNumberHex')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $serialNumberHex = null;
    
    /**
     * Number of subject alternative names (SAN) to be included in certificate (if UCC): 
     * 
     *   * `FIVE` - Five slot UCC request
     *   * `TEN` - Ten slot UCC request
     *   * `FIFTEEN` - Fifteen slot UCC request
     *   * `TWENTY` - Twenty slot UCC request
     *   * `THIRTY` - Thirty slot UCC request
     *   * `FOURTY` - Fourty slot UCC request
     *   * `FIFTY` - Fifty slot UCC request
     *   * `ONE_HUNDRED` - One hundred slot UCC request
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CertificateDetailV2SlotSizeEnum $slotSize
     */
	#[\JMS\Serializer\Annotation\SerializedName('slotSize')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CertificateDetailV2SlotSizeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CertificateDetailV2SlotSizeEnum $slotSize = null;
    
    /**
     * Certificate status (if issued or revoked): 
     * 
     *   * `CANCELED` - Certificate request was canceled by customer
     *   * `DENIED` - Certificate request was denied by customer\n  * `EXPIRED` - Issued certificate has exceeded the valid end date
     *   * `ISSUED` - Certificate has been issued and is within validity period
     *   * `PENDING_ISSUANCE` - Certificate request has completed domain verification and is in the process of being issued
     *   * `PENDING_REKEY` - Previously issued certificate was rekeyed by customer and is in the process of being reissued
     *   * `PENDING_REVOCATION` - Previously issued certificate is in the process of being revoked
     *   * `REVOKED` - Issued certificate has been revoked\n  * `UNUSED` - Certificate in an error state
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\CertificateDetailV2StatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CertificateDetailV2StatusEnum>')]
    public CertificateDetailV2StatusEnum $status;
    
    /**
     * Subject Alternative names. Collection of subjectAlternativeNames to be included in certificate.
     * 
     * @var ?array<string> $subjectAlternativeNames
     */
	#[\JMS\Serializer\Annotation\SerializedName('subjectAlternativeNames')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $subjectAlternativeNames = null;
    
    /**
     * Certificate type: 
     * 
     *   * `DV_SSL` - (Domain Validated Secure Sockets Layer) SSL certificate validated using domain name only
     *   * `DV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using domain name only
     *   * `EV_SSL` - (Extended Validation) SSL certificate validated using organization information, domain name, business legal status, and other factors
     *   * `OV_CODE_SIGNING` - Code signing SSL certificate used by software developers to digitally sign apps. Validated using organization information
     *   * `OV_DRIVER_SIGNING` - Driver signing SSL certificate request used by software developers to digitally sign secure code for Windows hardware drivers. Validated using organization information
     *   * `OV_SSL` - SSL certificate validated using organization information and domain name
     *   * `OV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using organization information and domain name
     *   * `UCC_DV_SSL` - (Unified Communication Certificate) Multi domain SSL certificate validated using domain name only
     *   * `UCC_EV_SSL` - Multi domain SSL certificate validated using organization information, domain name, business legal status, and other factors
     *   * `UCC_OV_SSL` - Multi domain SSL certificate validated using organization information and domain name
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\CertificateDetailV2TypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CertificateDetailV2TypeEnum>')]
    public CertificateDetailV2TypeEnum $type;
    
    /**
     * The end date of the certificate's validity (if issued or revoked).
     * 
     * @var ?string $validEndAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('validEndAt')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $validEndAt = null;
    
    /**
     * The start date of the certificate's validity (if issued or revoked).
     * 
     * @var ?string $validStartAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('validStartAt')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $validStartAt = null;
    
	public function __construct()
	{
		$this->certificateId = "";
		$this->commonName = "";
		$this->completedAt = null;
		$this->contact = new \OpenAPI\OpenAPI\Models\Shared\CertificateContact();
		$this->createdAt = "";
		$this->csr = null;
		$this->deniedReason = null;
		$this->organization = null;
		$this->period = 0;
		$this->progress = null;
		$this->renewalAvailable = null;
		$this->revokedAt = null;
		$this->rootType = null;
		$this->serialNumber = null;
		$this->serialNumberHex = null;
		$this->slotSize = null;
		$this->status = \OpenAPI\OpenAPI\Models\Shared\CertificateDetailV2StatusEnum::PENDING_ISSUANCE;
		$this->subjectAlternativeNames = null;
		$this->type = \OpenAPI\OpenAPI\Models\Shared\CertificateDetailV2TypeEnum::DV_SSL;
		$this->validEndAt = null;
		$this->validStartAt = null;
	}
}
