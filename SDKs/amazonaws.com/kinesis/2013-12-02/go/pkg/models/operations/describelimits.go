// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeLimitsXAmzTargetEnum
type DescribeLimitsXAmzTargetEnum string

const (
	DescribeLimitsXAmzTargetEnumKinesis20131202DescribeLimits DescribeLimitsXAmzTargetEnum = "Kinesis_20131202.DescribeLimits"
)

func (e DescribeLimitsXAmzTargetEnum) ToPointer() *DescribeLimitsXAmzTargetEnum {
	return &e
}

func (e *DescribeLimitsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Kinesis_20131202.DescribeLimits":
		*e = DescribeLimitsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeLimitsXAmzTargetEnum: %v", v)
	}
}

type DescribeLimitsRequest struct {
	RequestBody       map[string]interface{}       `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeLimitsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeLimitsResponse struct {
	ContentType string
	// Success
	DescribeLimitsOutput *shared.DescribeLimitsOutput
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
}
