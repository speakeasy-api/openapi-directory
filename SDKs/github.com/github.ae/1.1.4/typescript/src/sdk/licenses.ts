/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * View various OSS licenses.
 */
export class Licenses {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get a license
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/licenses#get-a-license} - API method documentation
   */
  licensesGet(
    req: operations.LicensesGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LicensesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LicensesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/licenses/{license}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LicensesGetResponse =
        new operations.LicensesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.license = utils.objectToClass(httpRes?.data, shared.License);
          }
          break;
        case httpRes?.status == 304:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all commonly used licenses
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/licenses#get-all-commonly-used-licenses} - API method documentation
   */
  licensesGetAllCommonlyUsed(
    req: operations.LicensesGetAllCommonlyUsedRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LicensesGetAllCommonlyUsedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LicensesGetAllCommonlyUsedRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/licenses";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LicensesGetAllCommonlyUsedResponse =
        new operations.LicensesGetAllCommonlyUsedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.licenseSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.licenseSimples = utils.objectToClass(
              httpRes?.data,
              shared.LicenseSimple,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 304:
          break;
      }

      return res;
    });
  }

  /**
   * Get the license for a repository
   *
   * @remarks
   * This method returns the contents of the repository's license file, if one is detected.
   *
   * Similar to [Get repository content](https://docs.github.com/github-ae@latest/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/github-ae@latest/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
   *
   * @see {@link https://docs.github.com/github-ae@latest/rest/reference/licenses/#get-the-license-for-a-repository} - API method documentation
   */
  licensesGetForRepo(
    req: operations.LicensesGetForRepoRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LicensesGetForRepoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LicensesGetForRepoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/license",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LicensesGetForRepoResponse =
        new operations.LicensesGetForRepoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.licenseContent = utils.objectToClass(
              httpRes?.data,
              shared.LicenseContent
            );
          }
          break;
      }

      return res;
    });
  }
}
