// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"time"
)

type EditChatbotMessageSecurity struct {
	ClientCredentials string `security:"scheme,type=oauth2,name=Authorization"`
}

type EditChatbotMessageApplicationJSON struct {
	// The AccountID of the Zoom account to which the message was sent. Retrieve this from the Chatbot request sent to your server as shown in the example [here]( https://marketplace.zoom.us/docs/guides/chatbots/sending-messages).
	AccountID string `json:"account_id"`
	// JSON template describing how the edited message should be displayed for the user. For more information please see our ["Send Message" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).
	Content map[string]interface{} `json:"content"`
	// **Optional**<br>
	// Enable or disable markdown parser to your chatbot message. Applies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).
	IsMarkdownSupport *bool `json:"is_markdown_support,omitempty"`
	// Robot JID created when enabling chatbot features on your marketplace app.
	RobotJid string `json:"robot_jid"`
	// **Optional**<br>
	// The UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
	UserJid *string `json:"user_jid,omitempty"`
}

type EditChatbotMessageRequest struct {
	RequestBody *EditChatbotMessageApplicationJSON `request:"mediaType=application/json"`
	// Unique Identifier of the message that needs to be updated. This should be retrieved from the response of [Send Chatbot Message API](https://marketplace.zoom.us/docs/api-reference/zoom-api/im-chat/sendchatbot).
	MessageID string `pathParam:"style=simple,explode=false,name=message_id"`
}

// EditChatbotMessage200ApplicationXML - **HTTP Status Code:** `200` **OK**<br>
// Message updated.
type EditChatbotMessage200ApplicationXML struct {
	// Unique Identifier of the updated message,
	MessageID *string
	// The BotJID found in the Chat Subscription Section on the Features page of your App Dashboard.
	RobotJid *string
	// The date and time at which the message was sent.
	SentTime *time.Time
	// The JID of the Channel or User to whom the message was sent.
	ToJid *string
	// The UserJID of the user on whose behalf the message is being sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
	UserJid *string
}

// EditChatbotMessage200ApplicationJSON - **HTTP Status Code:** `200` **OK**<br>
// Message updated.
type EditChatbotMessage200ApplicationJSON struct {
	// Unique Identifier of the updated message,
	MessageID *string `json:"message_id,omitempty"`
	// The BotJID found in the Chat Subscription Section on the Features page of your App Dashboard.
	RobotJid *string `json:"robot_jid,omitempty"`
	// The date and time at which the message was sent.
	SentTime *time.Time `json:"sent_time,omitempty"`
	// The JID of the Channel or User to whom the message was sent.
	ToJid *string `json:"to_jid,omitempty"`
	// The UserJID of the user on whose behalf the message is being sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
	UserJid *string `json:"user_jid,omitempty"`
}

type EditChatbotMessageResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200` **OK**<br>
	// Message updated.
	EditChatbotMessage200ApplicationJSONObject *EditChatbotMessage200ApplicationJSON
}
