"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import mobiledeviceaccessruleeffect_enum as shared_mobiledeviceaccessruleeffect_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateMobileDeviceAccessRuleRequest:
    
    effect: shared_mobiledeviceaccessruleeffect_enum.MobileDeviceAccessRuleEffectEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Effect') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    organization_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrganizationId') }})  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientToken'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    device_models: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeviceModels'), 'exclude': lambda f: f is None }})  
    device_operating_systems: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeviceOperatingSystems'), 'exclude': lambda f: f is None }})  
    device_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeviceTypes'), 'exclude': lambda f: f is None }})  
    device_user_agents: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeviceUserAgents'), 'exclude': lambda f: f is None }})  
    not_device_models: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotDeviceModels'), 'exclude': lambda f: f is None }})  
    not_device_operating_systems: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotDeviceOperatingSystems'), 'exclude': lambda f: f is None }})  
    not_device_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotDeviceTypes'), 'exclude': lambda f: f is None }})  
    not_device_user_agents: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotDeviceUserAgents'), 'exclude': lambda f: f is None }})  
    