"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import ekscontainerenvironmentvariable as shared_ekscontainerenvironmentvariable
from ..shared import ekscontainerresourcerequirements as shared_ekscontainerresourcerequirements
from ..shared import ekscontainersecuritycontext as shared_ekscontainersecuritycontext
from ..shared import ekscontainervolumemount as shared_ekscontainervolumemount
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EksContainer:
    r"""EKS container properties are used in job definitions for Amazon EKS based job definitions to describe the properties for a container node in the pod that's launched as part of a job. This can't be specified for Amazon ECS based job definitions."""
    
    image: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image') }})  
    args: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('args'), 'exclude': lambda f: f is None }})  
    command: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('command'), 'exclude': lambda f: f is None }})  
    env: Optional[list[shared_ekscontainerenvironmentvariable.EksContainerEnvironmentVariable]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('env'), 'exclude': lambda f: f is None }})  
    image_pull_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imagePullPolicy'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    resources: Optional[shared_ekscontainerresourcerequirements.EksContainerResourceRequirements] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources'), 'exclude': lambda f: f is None }})  
    security_context: Optional[shared_ekscontainersecuritycontext.EksContainerSecurityContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityContext'), 'exclude': lambda f: f is None }})  
    volume_mounts: Optional[list[shared_ekscontainervolumemount.EksContainerVolumeMount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumeMounts'), 'exclude': lambda f: f is None }})  
    