// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PullsListDirectionEnum - The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
type PullsListDirectionEnum string

const (
	PullsListDirectionEnumAsc  PullsListDirectionEnum = "asc"
	PullsListDirectionEnumDesc PullsListDirectionEnum = "desc"
)

func (e PullsListDirectionEnum) ToPointer() *PullsListDirectionEnum {
	return &e
}

func (e *PullsListDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = PullsListDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PullsListDirectionEnum: %v", v)
	}
}

// PullsListSortEnum - What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).
type PullsListSortEnum string

const (
	PullsListSortEnumCreated     PullsListSortEnum = "created"
	PullsListSortEnumUpdated     PullsListSortEnum = "updated"
	PullsListSortEnumPopularity  PullsListSortEnum = "popularity"
	PullsListSortEnumLongRunning PullsListSortEnum = "long-running"
)

func (e PullsListSortEnum) ToPointer() *PullsListSortEnum {
	return &e
}

func (e *PullsListSortEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created":
		fallthrough
	case "updated":
		fallthrough
	case "popularity":
		fallthrough
	case "long-running":
		*e = PullsListSortEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PullsListSortEnum: %v", v)
	}
}

// PullsListStateEnum - Either `open`, `closed`, or `all` to filter by state.
type PullsListStateEnum string

const (
	PullsListStateEnumOpen   PullsListStateEnum = "open"
	PullsListStateEnumClosed PullsListStateEnum = "closed"
	PullsListStateEnumAll    PullsListStateEnum = "all"
)

func (e PullsListStateEnum) ToPointer() *PullsListStateEnum {
	return &e
}

func (e *PullsListStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "closed":
		fallthrough
	case "all":
		*e = PullsListStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PullsListStateEnum: %v", v)
	}
}

type PullsListRequest struct {
	// Filter pulls by base branch name. Example: `gh-pages`.
	Base *string `queryParam:"style=form,explode=true,name=base"`
	// The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
	Direction *PullsListDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
	Head  *string `queryParam:"style=form,explode=true,name=head"`
	Owner string  `pathParam:"style=simple,explode=false,name=owner"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Results per page (max 100)
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	Repo    string `pathParam:"style=simple,explode=false,name=repo"`
	// What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).
	Sort *PullsListSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Either `open`, `closed`, or `all` to filter by state.
	State *PullsListStateEnum `queryParam:"style=form,explode=true,name=state"`
}

type PullsListResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Response
	PullRequestSimples []shared.PullRequestSimple
	// Validation failed
	ValidationError *shared.ValidationError
}
