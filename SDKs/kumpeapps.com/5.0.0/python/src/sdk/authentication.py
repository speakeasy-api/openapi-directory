"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Authentication:
    r"""Authenticate KumpeApps users (required to get apiKey)"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def appkey_patch(self, request: operations.AppkeyPatchRequest) -> operations.AppkeyPatchResponse:
        r"""Compromise app key
        Pass an app key to mark it as compromised. This may be submitted by the app owner or a concerned party that has optained the compromised app key.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/appkey'
        
        query_params = utils.get_query_params(operations.AppkeyPatchRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppkeyPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse202])
                res.inline_response_202 = out

        return res

    def appkey_post(self, request: operations.AppkeyPostRequest) -> operations.AppkeyPostResponse:
        r"""Request app key
        Request a new app key by passing username and password for app account
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/appkey'
        
        query_params = utils.get_query_params(operations.AppkeyPostRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppkeyPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse201])
                res.inline_response_201 = out

        return res

    def appkey_put(self, request: operations.AppkeyPutRequest, security: operations.AppkeyPutSecurity) -> operations.AppkeyPutResponse:
        r"""Deactivate app key
        Pass your app key to deactivate the key
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/appkey'
        
        query_params = utils.get_query_params(operations.AppkeyPutRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppkeyPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse202])
                res.inline_response_202 = out

        return res

    def auth_appkey_patch(self, request: operations.AuthAppkeyPatchRequest) -> operations.AuthAppkeyPatchResponse:
        r"""Compromise app key
        Pass an app key to mark it as compromised. This may be submitted by the app owner or a concerned party that has optained the compromised app key.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/authentication/appkey'
        
        query_params = utils.get_query_params(operations.AuthAppkeyPatchRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AuthAppkeyPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse202])
                res.inline_response_202 = out

        return res

    def auth_appkey_post(self, request: operations.AuthAppkeyPostRequest) -> operations.AuthAppkeyPostResponse:
        r"""Request app key
        Request a new app key by passing username and password for app account
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/authentication/appkey'
        
        query_params = utils.get_query_params(operations.AuthAppkeyPostRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AuthAppkeyPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse201])
                res.inline_response_201 = out

        return res

    def auth_appkey_put(self, request: operations.AuthAppkeyPutRequest, security: operations.AuthAppkeyPutSecurity) -> operations.AuthAppkeyPutResponse:
        r"""Deactivate app key
        Pass your app key to deactivate the key
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/authentication/appkey'
        
        query_params = utils.get_query_params(operations.AuthAppkeyPutRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AuthAppkeyPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse202])
                res.inline_response_202 = out

        return res

    def auth_authkey_get(self, request: operations.AuthAuthkeyGetRequest, security: operations.AuthAuthkeyGetSecurity) -> operations.AuthAuthkeyGetResponse:
        r"""Request auth key for user (login user)
        Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/authentication/authkey'
        
        query_params = utils.get_query_params(operations.AuthAuthkeyGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AuthAuthkeyGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse2011])
                res.inline_response_201_1 = out
        elif http_res.status_code == 401:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndThree])
                res.four_hundred_and_three = out
        elif http_res.status_code == 449:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFortyNine])
                res.four_hundred_and_forty_nine = out

        return res

    def auth_authkey_patch(self, request: operations.AuthAuthkeyPatchRequest) -> operations.AuthAuthkeyPatchResponse:
        r"""Compromise auth key
        Mark user auth key as compromised
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/authentication/authkey'
        
        query_params = utils.get_query_params(operations.AuthAuthkeyPatchRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AuthAuthkeyPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse202])
                res.inline_response_202 = out
        elif http_res.status_code == 401:
            pass

        return res

    def auth_authkey_post(self, request: operations.AuthAuthkeyPostRequest, security: operations.AuthAuthkeyPostSecurity) -> operations.AuthAuthkeyPostResponse:
        r"""Request auth key for user (login user)
        Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/authentication/authkey'
        
        query_params = utils.get_query_params(operations.AuthAuthkeyPostRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AuthAuthkeyPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse2011])
                res.inline_response_201_1 = out
        elif http_res.status_code == 401:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndThree])
                res.four_hundred_and_three = out
        elif http_res.status_code == 449:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFortyNine])
                res.four_hundred_and_forty_nine = out

        return res

    def auth_authkey_put(self, request: operations.AuthAuthkeyPutRequest, security: operations.AuthAuthkeyPutSecurity) -> operations.AuthAuthkeyPutResponse:
        r"""Deactivate auth key (logout)
        Deactivate auth key for user logging them out of your application
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/authentication/authkey'
        
        query_params = utils.get_query_params(operations.AuthAuthkeyPutRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AuthAuthkeyPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse202])
                res.inline_response_202 = out
        elif http_res.status_code == 401:
            pass

        return res

    def auth_verifyotp_get(self, request: operations.AuthVerifyotpGetRequest, security: operations.AuthVerifyotpGetSecurity) -> operations.AuthVerifyotpGetResponse:
        r"""Verifies YubiKey OTP for authenticated user
        Verifies YubiKey OTP for authenticated user
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/authentication/verifyotp'
        
        query_params = utils.get_query_params(operations.AuthVerifyotpGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AuthVerifyotpGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 401]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndThree])
                res.four_hundred_and_three = out

        return res

    def authkey_get(self, request: operations.AuthkeyGetRequest, security: operations.AuthkeyGetSecurity) -> operations.AuthkeyGetResponse:
        r"""Request auth key for user (login user)
        Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/authkey'
        
        query_params = utils.get_query_params(operations.AuthkeyGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AuthkeyGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse2011])
                res.inline_response_201_1 = out
        elif http_res.status_code == 401:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndThree])
                res.four_hundred_and_three = out
        elif http_res.status_code == 449:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFortyNine])
                res.four_hundred_and_forty_nine = out

        return res

    def authkey_patch(self, request: operations.AuthkeyPatchRequest) -> operations.AuthkeyPatchResponse:
        r"""Compromise auth key
        Mark user auth key as compromised
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/authkey'
        
        query_params = utils.get_query_params(operations.AuthkeyPatchRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AuthkeyPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse202])
                res.inline_response_202 = out
        elif http_res.status_code == 401:
            pass

        return res

    def authkey_post(self, request: operations.AuthkeyPostRequest, security: operations.AuthkeyPostSecurity) -> operations.AuthkeyPostResponse:
        r"""Request auth key for user (login user)
        Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/authkey'
        
        query_params = utils.get_query_params(operations.AuthkeyPostRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AuthkeyPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse2011])
                res.inline_response_201_1 = out
        elif http_res.status_code == 401:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndThree])
                res.four_hundred_and_three = out
        elif http_res.status_code == 449:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFortyNine])
                res.four_hundred_and_forty_nine = out

        return res

    def authkey_put(self, request: operations.AuthkeyPutRequest, security: operations.AuthkeyPutSecurity) -> operations.AuthkeyPutResponse:
        r"""Deactivate auth key (logout)
        Deactivate auth key for user logging them out of your application
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/authkey'
        
        query_params = utils.get_query_params(operations.AuthkeyPutRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AuthkeyPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse202])
                res.inline_response_202 = out
        elif http_res.status_code == 401:
            pass

        return res

    