// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AlsfcSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type AlsfcRequestBodyCertificateParameters struct {
	// Aadhaar number
	UID string `json:"UID"`
	// Licence No
	Lino string `json:"lino"`
}

// AlsfcRequestBodyFormatEnum - The format of the certificate in response.
type AlsfcRequestBodyFormatEnum string

const (
	AlsfcRequestBodyFormatEnumPdf AlsfcRequestBodyFormatEnum = "pdf"
)

func (e AlsfcRequestBodyFormatEnum) ToPointer() *AlsfcRequestBodyFormatEnum {
	return &e
}

func (e *AlsfcRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = AlsfcRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AlsfcRequestBodyFormatEnum: %v", v)
	}
}

// AlsfcRequestBody - Request format
type AlsfcRequestBody struct {
	CertificateParameters *AlsfcRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format AlsfcRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Alsfc504ApplicationJSONErrorEnum string

const (
	Alsfc504ApplicationJSONErrorEnumGatewayTimeout Alsfc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Alsfc504ApplicationJSONErrorEnum) ToPointer() *Alsfc504ApplicationJSONErrorEnum {
	return &e
}

func (e *Alsfc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Alsfc504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsfc504ApplicationJSONErrorEnum: %v", v)
	}
}

type Alsfc504ApplicationJSONErrorDescriptionEnum string

const (
	Alsfc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Alsfc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Alsfc504ApplicationJSONErrorDescriptionEnum) ToPointer() *Alsfc504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Alsfc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Alsfc504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsfc504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Alsfc504ApplicationJSON - Gateway timeout
type Alsfc504ApplicationJSON struct {
	Error            *Alsfc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alsfc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alsfc503ApplicationJSONErrorEnum string

const (
	Alsfc503ApplicationJSONErrorEnumServiceUnavailable Alsfc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Alsfc503ApplicationJSONErrorEnum) ToPointer() *Alsfc503ApplicationJSONErrorEnum {
	return &e
}

func (e *Alsfc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Alsfc503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsfc503ApplicationJSONErrorEnum: %v", v)
	}
}

type Alsfc503ApplicationJSONErrorDescriptionEnum string

const (
	Alsfc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Alsfc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Alsfc503ApplicationJSONErrorDescriptionEnum) ToPointer() *Alsfc503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Alsfc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Alsfc503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsfc503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Alsfc503ApplicationJSON - Service unavailable
type Alsfc503ApplicationJSON struct {
	Error            *Alsfc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alsfc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alsfc502ApplicationJSONErrorEnum string

const (
	Alsfc502ApplicationJSONErrorEnumBadGatewy Alsfc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Alsfc502ApplicationJSONErrorEnum) ToPointer() *Alsfc502ApplicationJSONErrorEnum {
	return &e
}

func (e *Alsfc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Alsfc502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsfc502ApplicationJSONErrorEnum: %v", v)
	}
}

type Alsfc502ApplicationJSONErrorDescriptionEnum string

const (
	Alsfc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Alsfc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Alsfc502ApplicationJSONErrorDescriptionEnum) ToPointer() *Alsfc502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Alsfc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Alsfc502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsfc502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Alsfc502ApplicationJSON - Bad gateway
type Alsfc502ApplicationJSON struct {
	Error            *Alsfc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alsfc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alsfc500ApplicationJSONErrorEnum string

const (
	Alsfc500ApplicationJSONErrorEnumInternalServerError Alsfc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Alsfc500ApplicationJSONErrorEnum) ToPointer() *Alsfc500ApplicationJSONErrorEnum {
	return &e
}

func (e *Alsfc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Alsfc500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsfc500ApplicationJSONErrorEnum: %v", v)
	}
}

type Alsfc500ApplicationJSONErrorDescriptionEnum string

const (
	Alsfc500ApplicationJSONErrorDescriptionEnumInternalServerError Alsfc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Alsfc500ApplicationJSONErrorDescriptionEnum) ToPointer() *Alsfc500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Alsfc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Alsfc500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsfc500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Alsfc500ApplicationJSON - Internal server error
type Alsfc500ApplicationJSON struct {
	Error            *Alsfc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alsfc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alsfc404ApplicationJSONErrorEnum string

const (
	Alsfc404ApplicationJSONErrorEnumRecordNotFound Alsfc404ApplicationJSONErrorEnum = "record_not_found"
	Alsfc404ApplicationJSONErrorEnumURLNotFound    Alsfc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Alsfc404ApplicationJSONErrorEnum) ToPointer() *Alsfc404ApplicationJSONErrorEnum {
	return &e
}

func (e *Alsfc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Alsfc404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsfc404ApplicationJSONErrorEnum: %v", v)
	}
}

type Alsfc404ApplicationJSONErrorDescriptionEnum string

const (
	Alsfc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Alsfc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Alsfc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Alsfc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Alsfc404ApplicationJSONErrorDescriptionEnum) ToPointer() *Alsfc404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Alsfc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Alsfc404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsfc404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Alsfc404ApplicationJSON - No record found
type Alsfc404ApplicationJSON struct {
	Error            *Alsfc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alsfc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alsfc401ApplicationJSONErrorEnum string

const (
	Alsfc401ApplicationJSONErrorEnumInvalidAuthentication Alsfc401ApplicationJSONErrorEnum = "invalid_authentication"
	Alsfc401ApplicationJSONErrorEnumInvalidAuthorization  Alsfc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Alsfc401ApplicationJSONErrorEnum) ToPointer() *Alsfc401ApplicationJSONErrorEnum {
	return &e
}

func (e *Alsfc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Alsfc401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsfc401ApplicationJSONErrorEnum: %v", v)
	}
}

type Alsfc401ApplicationJSONErrorDescriptionEnum string

const (
	Alsfc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Alsfc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Alsfc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Alsfc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Alsfc401ApplicationJSONErrorDescriptionEnum) ToPointer() *Alsfc401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Alsfc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Alsfc401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsfc401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Alsfc401ApplicationJSON - Unauthorized access
type Alsfc401ApplicationJSON struct {
	Error            *Alsfc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alsfc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alsfc400ApplicationJSONErrorEnum string

const (
	Alsfc400ApplicationJSONErrorEnumMissingParameter Alsfc400ApplicationJSONErrorEnum = "missing_parameter"
	Alsfc400ApplicationJSONErrorEnumInvalidParameter Alsfc400ApplicationJSONErrorEnum = "invalid_parameter"
	Alsfc400ApplicationJSONErrorEnumInvalidFormat    Alsfc400ApplicationJSONErrorEnum = "invalid_format"
	Alsfc400ApplicationJSONErrorEnumInvalidTxnid     Alsfc400ApplicationJSONErrorEnum = "invalid_txnid"
	Alsfc400ApplicationJSONErrorEnumInvalidConsentid Alsfc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Alsfc400ApplicationJSONErrorEnum) ToPointer() *Alsfc400ApplicationJSONErrorEnum {
	return &e
}

func (e *Alsfc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Alsfc400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsfc400ApplicationJSONErrorEnum: %v", v)
	}
}

type Alsfc400ApplicationJSONErrorDescriptionEnum string

const (
	Alsfc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Alsfc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Alsfc400ApplicationJSONErrorDescriptionEnumBadRequest                              Alsfc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Alsfc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Alsfc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Alsfc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Alsfc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Alsfc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Alsfc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Alsfc400ApplicationJSONErrorDescriptionEnum) ToPointer() *Alsfc400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Alsfc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Alsfc400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsfc400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Alsfc400ApplicationJSON - Bad request
type Alsfc400ApplicationJSON struct {
	Error            *Alsfc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alsfc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type AlsfcResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Alsfc400ApplicationJSONObject *Alsfc400ApplicationJSON
	// Unauthorized access
	Alsfc401ApplicationJSONObject *Alsfc401ApplicationJSON
	// No record found
	Alsfc404ApplicationJSONObject *Alsfc404ApplicationJSON
	// Internal server error
	Alsfc500ApplicationJSONObject *Alsfc500ApplicationJSON
	// Bad gateway
	Alsfc502ApplicationJSONObject *Alsfc502ApplicationJSON
	// Service unavailable
	Alsfc503ApplicationJSONObject *Alsfc503ApplicationJSON
	// Gateway timeout
	Alsfc504ApplicationJSONObject *Alsfc504ApplicationJSON
}
