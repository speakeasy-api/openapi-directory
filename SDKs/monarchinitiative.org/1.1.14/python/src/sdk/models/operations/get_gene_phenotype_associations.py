"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import associationresults as shared_associationresults
from typing import Optional


@dataclasses.dataclass
class GetGenePhenotypeAssociationsRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results"""  
    direct: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direct', 'style': 'form', 'explode': True }})
    r"""Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False"""  
    direct_taxon: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direct_taxon', 'style': 'form', 'explode': True }})
    r"""Set true to exclude inferred taxa"""  
    evidence: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'evidence', 'style': 'form', 'explode': True }})
    r"""Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2"""  
    exclude_automatic_assertions: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exclude_automatic_assertions', 'style': 'form', 'explode': True }})
    r"""If true, excludes associations that involve IEAs (ECO:0000501)"""  
    facet: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'facet', 'style': 'form', 'explode': True }})
    r"""Enable faceting"""  
    facet_fields: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'facet_fields', 'style': 'form', 'explode': True }})
    r"""Fields to facet on"""  
    fetch_objects: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fetch_objects', 'style': 'form', 'explode': True }})
    r"""If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload"""  
    q: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""Query string to filter documents"""  
    relation: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'relation', 'style': 'form', 'explode': True }})
    r"""A relation CURIE to filter associations"""  
    rows: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'rows', 'style': 'form', 'explode': True }})
    r"""number of rows"""  
    slim: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'slim', 'style': 'form', 'explode': True }})
    r"""Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID"""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sorting responses <field> <desc,asc>"""  
    start: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start', 'style': 'form', 'explode': True }})
    r"""beginning row"""  
    taxon: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'taxon', 'style': 'form', 'explode': True }})
    r"""One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default"""  
    unselect_evidence: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'unselect_evidence', 'style': 'form', 'explode': True }})
    r"""If true, excludes evidence objects in response"""  
    use_compact_associations: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'use_compact_associations', 'style': 'form', 'explode': True }})
    r"""If true, returns results in compact associations format"""  
    

@dataclasses.dataclass
class GetGenePhenotypeAssociationsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    association_results: Optional[shared_associationresults.AssociationResults] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    