/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
 */
export class UpdateConfigurationSetEventDestinationRequestBodyEventDestination extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CloudWatchDestination" })
  @Type(() => shared.CloudWatchDestination)
  cloudWatchDestination?: shared.CloudWatchDestination;

  @SpeakeasyMetadata()
  @Expose({ name: "Enabled" })
  enabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "KinesisFirehoseDestination" })
  @Type(() => shared.KinesisFirehoseDestination)
  kinesisFirehoseDestination?: shared.KinesisFirehoseDestination;

  @SpeakeasyMetadata()
  @Expose({ name: "MatchingEventTypes" })
  matchingEventTypes?: shared.EventTypeEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "PinpointDestination" })
  @Type(() => shared.PinpointDestination)
  pinpointDestination?: shared.PinpointDestination;

  @SpeakeasyMetadata()
  @Expose({ name: "SnsDestination" })
  @Type(() => shared.SnsDestination)
  snsDestination?: shared.SnsDestination;
}

export class UpdateConfigurationSetEventDestinationRequestBody extends SpeakeasyBase {
  /**
   * An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EventDestination" })
  @Type(() => UpdateConfigurationSetEventDestinationRequestBodyEventDestination)
  eventDestination: UpdateConfigurationSetEventDestinationRequestBodyEventDestination;
}

export class UpdateConfigurationSetEventDestinationRequest extends SpeakeasyBase {
  /**
   * The name of the configuration set that contains the event destination to modify.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ConfigurationSetName",
  })
  configurationSetName: string;

  /**
   * The name of the event destination.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=EventDestinationName",
  })
  eventDestinationName: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateConfigurationSetEventDestinationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateConfigurationSetEventDestinationResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateConfigurationSetEventDestinationResponse?: Record<string, any>;
}
