"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class IndividualsAddresses:
    r"""The registry maintains information about an individual's contact details for administrative purposes.
    
      Including:
      - an address for the service of documents
      - a principal place of business address
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_individuals_party_id_addresses_address_id_(self, request: operations.DeleteIndividualsPartyIDAddressesAddressIDRequest) -> operations.DeleteIndividualsPartyIDAddressesAddressIDResponse:
        r"""Delete an address
        Delete an address
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteIndividualsPartyIDAddressesAddressIDRequest, base_url, '/individuals/{partyId}/addresses/{addressId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteIndividualsPartyIDAddressesAddressIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthenticated])
                res.unauthenticated = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_individuals_party_id_addresses(self, request: operations.GetIndividualsPartyIDAddressesRequest) -> operations.GetIndividualsPartyIDAddressesResponse:
        r"""Retrieve a list of addresses"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIndividualsPartyIDAddressesRequest, base_url, '/individuals/{partyId}/addresses', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIndividualsPartyIDAddressesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Address]])
                res.addresses = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthenticated])
                res.unauthenticated = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_individuals_party_id_addresses_address_id_(self, request: operations.GetIndividualsPartyIDAddressesAddressIDRequest) -> operations.GetIndividualsPartyIDAddressesAddressIDResponse:
        r"""Retrieve an address
        Retrieve an address
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIndividualsPartyIDAddressesAddressIDRequest, base_url, '/individuals/{partyId}/addresses/{addressId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIndividualsPartyIDAddressesAddressIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Address])
                res.address = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthenticated])
                res.unauthenticated = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def post_individuals_party_id_addresses(self, request: operations.PostIndividualsPartyIDAddressesRequest) -> operations.PostIndividualsPartyIDAddressesResponse:
        r"""Create an address
        Create an address
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostIndividualsPartyIDAddressesRequest, base_url, '/individuals/{partyId}/addresses', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "address_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostIndividualsPartyIDAddressesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Address])
                res.address = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvalidArgument])
                res.invalid_argument = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthenticated])
                res.unauthenticated = out

        return res

    def put_individuals_party_id_addresses_address_id_(self, request: operations.PutIndividualsPartyIDAddressesAddressIDRequest) -> operations.PutIndividualsPartyIDAddressesAddressIDResponse:
        r"""Update an address
        Update an address
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutIndividualsPartyIDAddressesAddressIDRequest, base_url, '/individuals/{partyId}/addresses/{addressId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "address_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutIndividualsPartyIDAddressesAddressIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Address])
                res.address = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvalidArgument])
                res.invalid_argument = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthenticated])
                res.unauthenticated = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    