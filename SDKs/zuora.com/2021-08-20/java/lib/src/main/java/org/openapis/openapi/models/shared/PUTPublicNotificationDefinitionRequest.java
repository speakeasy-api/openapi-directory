/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PUTPublicNotificationDefinitionRequest - The request body of the notification definition to be updated.
 */
public class PUTPublicNotificationDefinitionRequest {
    /**
     * The status of the notification definition. The default value is true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    public Boolean active;
    public PUTPublicNotificationDefinitionRequest withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callout")
    public PUTPublicNotificationDefinitionRequestCallout callout;
    public PUTPublicNotificationDefinitionRequest withCallout(PUTPublicNotificationDefinitionRequestCallout callout) {
        this.callout = callout;
        return this;
    }
    
    /**
     * The status of the callout action. The default value is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calloutActive")
    public Boolean calloutActive;
    public PUTPublicNotificationDefinitionRequest withCalloutActive(Boolean calloutActive) {
        this.calloutActive = calloutActive;
        return this;
    }
    
    /**
     * The profile that notification definition belongs to. If you want to
     * update the notification to a system notification, you should pass
     * 'SystemNotification'. '
     * 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, comunicationProfileId can be 'SystemNotification'/Empty/UUID. 
     * 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not  associated to Account, comunicationProfileId can be 'SystemNotification'/Empty. 
     * 
     * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, comunicationProfileId can be 'SystemNotification'/Empty.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("communicationProfileId")
    public String communicationProfileId;
    public PUTPublicNotificationDefinitionRequest withCommunicationProfileId(String communicationProfileId) {
        this.communicationProfileId = communicationProfileId;
        return this;
    }
    
    /**
     * The description of the notification definition.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public PUTPublicNotificationDefinitionRequest withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The status of the email action. The default is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailActive")
    public Boolean emailActive;
    public PUTPublicNotificationDefinitionRequest withEmailActive(Boolean emailActive) {
        this.emailActive = emailActive;
        return this;
    }
    
    /**
     * The ID of the email template. If emailActive is updated from
     * false to true, an email template is required, and the EventType of
     * the email template MUST be the same as the EventType of the notification definition.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailTemplateId")
    public String emailTemplateId;
    public PUTPublicNotificationDefinitionRequest withEmailTemplateId(String emailTemplateId) {
        this.emailTemplateId = emailTemplateId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filterRule")
    public PUTPublicNotificationDefinitionRequestFilterRule filterRule;
    public PUTPublicNotificationDefinitionRequest withFilterRule(PUTPublicNotificationDefinitionRequestFilterRule filterRule) {
        this.filterRule = filterRule;
        return this;
    }
    
    /**
     * The parameter values used to configure the filter rule.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filterRuleParams")
    public java.util.Map<String, String> filterRuleParams;
    public PUTPublicNotificationDefinitionRequest withFilterRuleParams(java.util.Map<String, String> filterRuleParams) {
        this.filterRuleParams = filterRuleParams;
        return this;
    }
    
    /**
     * The name of the notification definition, which is unique in the profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public PUTPublicNotificationDefinitionRequest withName(String name) {
        this.name = name;
        return this;
    }
    
}
