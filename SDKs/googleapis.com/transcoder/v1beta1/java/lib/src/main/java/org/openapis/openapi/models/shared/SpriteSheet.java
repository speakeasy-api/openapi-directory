/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SpriteSheet - Sprite sheet configuration.
 */
public class SpriteSheet {
    /**
     * The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("columnCount")
    public Integer columnCount;

    public SpriteSheet withColumnCount(Integer columnCount) {
        this.columnCount = columnCount;
        return this;
    }
    
    /**
     * End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTimeOffset")
    public String endTimeOffset;

    public SpriteSheet withEndTimeOffset(String endTimeOffset) {
        this.endTimeOffset = endTimeOffset;
        return this;
    }
    
    /**
     * Required. File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `"sprite_sheet0000000123.jpeg"`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filePrefix")
    public String filePrefix;

    public SpriteSheet withFilePrefix(String filePrefix) {
        this.filePrefix = filePrefix;
        return this;
    }
    
    /**
     * Format type. The default is `"jpeg"`. Supported formats: - 'jpeg'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    public String format;

    public SpriteSheet withFormat(String format) {
        this.format = format;
        return this;
    }
    
    /**
     * Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval")
    public String interval;

    public SpriteSheet withInterval(String interval) {
        this.interval = interval;
        return this;
    }
    
    /**
     * The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quality")
    public Integer quality;

    public SpriteSheet withQuality(Integer quality) {
        this.quality = quality;
        return this;
    }
    
    /**
     * The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rowCount")
    public Integer rowCount;

    public SpriteSheet withRowCount(Integer rowCount) {
        this.rowCount = rowCount;
        return this;
    }
    
    /**
     * Required. The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spriteHeightPixels")
    public Integer spriteHeightPixels;

    public SpriteSheet withSpriteHeightPixels(Integer spriteHeightPixels) {
        this.spriteHeightPixels = spriteHeightPixels;
        return this;
    }
    
    /**
     * Required. The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spriteWidthPixels")
    public Integer spriteWidthPixels;

    public SpriteSheet withSpriteWidthPixels(Integer spriteWidthPixels) {
        this.spriteWidthPixels = spriteWidthPixels;
        return this;
    }
    
    /**
     * Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTimeOffset")
    public String startTimeOffset;

    public SpriteSheet withStartTimeOffset(String startTimeOffset) {
        this.startTimeOffset = startTimeOffset;
        return this;
    }
    
    /**
     * Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalCount")
    public Integer totalCount;

    public SpriteSheet withTotalCount(Integer totalCount) {
        this.totalCount = totalCount;
        return this;
    }
    
    public SpriteSheet(){}
}
