"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import amplitudesourceproperties as shared_amplitudesourceproperties
from ..shared import customconnectorsourceproperties as shared_customconnectorsourceproperties
from ..shared import datadogsourceproperties as shared_datadogsourceproperties
from ..shared import dynatracesourceproperties as shared_dynatracesourceproperties
from ..shared import googleanalyticssourceproperties as shared_googleanalyticssourceproperties
from ..shared import infornexussourceproperties as shared_infornexussourceproperties
from ..shared import marketosourceproperties as shared_marketosourceproperties
from ..shared import pardotsourceproperties as shared_pardotsourceproperties
from ..shared import s3sourceproperties as shared_s3sourceproperties
from ..shared import salesforcesourceproperties as shared_salesforcesourceproperties
from ..shared import sapodatasourceproperties as shared_sapodatasourceproperties
from ..shared import servicenowsourceproperties as shared_servicenowsourceproperties
from ..shared import singularsourceproperties as shared_singularsourceproperties
from ..shared import slacksourceproperties as shared_slacksourceproperties
from ..shared import trendmicrosourceproperties as shared_trendmicrosourceproperties
from ..shared import veevasourceproperties as shared_veevasourceproperties
from ..shared import zendesksourceproperties as shared_zendesksourceproperties
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceConnectorProperties:
    r"""Specifies the information that is required to query a particular connector."""
    
    amplitude: Optional[shared_amplitudesourceproperties.AmplitudeSourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amplitude'), 'exclude': lambda f: f is None }})  
    custom_connector: Optional[shared_customconnectorsourceproperties.CustomConnectorSourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomConnector'), 'exclude': lambda f: f is None }})
    r"""The properties that are applied when the custom connector is being used as a source."""  
    datadog: Optional[shared_datadogsourceproperties.DatadogSourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Datadog'), 'exclude': lambda f: f is None }})  
    dynatrace: Optional[shared_dynatracesourceproperties.DynatraceSourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Dynatrace'), 'exclude': lambda f: f is None }})  
    google_analytics: Optional[shared_googleanalyticssourceproperties.GoogleAnalyticsSourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GoogleAnalytics'), 'exclude': lambda f: f is None }})  
    infor_nexus: Optional[shared_infornexussourceproperties.InforNexusSourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InforNexus'), 'exclude': lambda f: f is None }})  
    marketo: Optional[shared_marketosourceproperties.MarketoSourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Marketo'), 'exclude': lambda f: f is None }})  
    pardot: Optional[shared_pardotsourceproperties.PardotSourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Pardot'), 'exclude': lambda f: f is None }})  
    s3: Optional[shared_s3sourceproperties.S3SourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3'), 'exclude': lambda f: f is None }})  
    salesforce: Optional[shared_salesforcesourceproperties.SalesforceSourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Salesforce'), 'exclude': lambda f: f is None }})  
    sapo_data: Optional[shared_sapodatasourceproperties.SAPODataSourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SAPOData'), 'exclude': lambda f: f is None }})
    r"""The properties that are applied when using SAPOData as a flow source."""  
    service_now: Optional[shared_servicenowsourceproperties.ServiceNowSourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceNow'), 'exclude': lambda f: f is None }})  
    singular: Optional[shared_singularsourceproperties.SingularSourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Singular'), 'exclude': lambda f: f is None }})  
    slack: Optional[shared_slacksourceproperties.SlackSourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Slack'), 'exclude': lambda f: f is None }})  
    trendmicro: Optional[shared_trendmicrosourceproperties.TrendmicroSourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Trendmicro'), 'exclude': lambda f: f is None }})  
    veeva: Optional[shared_veevasourceproperties.VeevaSourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Veeva'), 'exclude': lambda f: f is None }})  
    zendesk: Optional[shared_zendesksourceproperties.ZendeskSourceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Zendesk'), 'exclude': lambda f: f is None }})  
    