"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningResourceAttributes:
    
    earned_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('earned_at') }})
    r"""Date at which the reward was earned. (Must be after the reward was allocated and before the reward program activation was deactivated or expired)"""  
    earned_value: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('earned_value') }})
    r"""Value of the reward that has been earned. (Must not exceed the allocated value for the reward)"""  
    earned_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('earned_unit'), 'exclude': lambda f: f is None }})
    r"""Unit of the reward that has been earned. (Read-only property)"""  
    fulfilled_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fulfilled_at'), 'exclude': lambda f: f is None }})
    r"""Date at which the reward earning was fulfilled. (Read-only property)"""  
    fulfilled_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fulfilled_value'), 'exclude': lambda f: f is None }})
    r"""Value of the earned reward that has been fulfilled. (Read-only property)"""  
    ready_for_fulfillment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ready_for_fulfillment'), 'exclude': lambda f: f is None }})
    r"""If true, the reward earning is ready to be fulfilled, either because the reward program activation was fulfill_as_earned or because the reward program activation has been deactivated. (Read-only property)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningResourceRelationshipsGroupData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningResourceRelationshipsGroup:
    
    data: Optional[RewardEarningResourceRelationshipsGroupData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningResourceRelationshipsPatientData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningResourceRelationshipsPatient:
    
    data: Optional[RewardEarningResourceRelationshipsPatientData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningResourceRelationshipsRewardData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningResourceRelationshipsReward:
    
    data: Optional[RewardEarningResourceRelationshipsRewardData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningResourceRelationshipsRewardProgramActivationData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningResourceRelationshipsRewardProgramActivation:
    
    data: Optional[RewardEarningResourceRelationshipsRewardProgramActivationData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningResourceRelationships:
    
    reward: RewardEarningResourceRelationshipsReward = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reward') }})  
    group: Optional[RewardEarningResourceRelationshipsGroup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group'), 'exclude': lambda f: f is None }})  
    patient: Optional[RewardEarningResourceRelationshipsPatient] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient'), 'exclude': lambda f: f is None }})  
    reward_program_activation: Optional[RewardEarningResourceRelationshipsRewardProgramActivation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reward_program_activation'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningResource:
    
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    attributes: Optional[RewardEarningResourceAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    relationships: Optional[RewardEarningResourceRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningResourceAttributesInput:
    
    earned_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('earned_at') }})
    r"""Date at which the reward was earned. (Must be after the reward was allocated and before the reward program activation was deactivated or expired)"""  
    earned_value: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('earned_value') }})
    r"""Value of the reward that has been earned. (Must not exceed the allocated value for the reward)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningResourceRelationshipsInput:
    
    reward: RewardEarningResourceRelationshipsReward = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reward') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RewardEarningResourceInput:
    
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    attributes: Optional[RewardEarningResourceAttributesInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    relationships: Optional[RewardEarningResourceRelationshipsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    