"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class BuildsDistributeSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    
class BuildsDistributeRequestBodyDestinationsTypeEnum(str, Enum):
    STORE = 'store'
    GROUP = 'group'
    TESTER = 'tester'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsDistributeRequestBodyDestinations:
    r"""Destination details for distributing build releases"""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    type: BuildsDistributeRequestBodyDestinationsTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsDistributeRequestBody:
    r"""The distribution details"""
    
    destinations: Optional[list[BuildsDistributeRequestBodyDestinations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinations'), 'exclude': lambda f: f is None }})
    r"""Array of objects {id:string, type:string} with \\"id\\" being the distribution group ID, store ID, or tester email, and \\"type\\" being \\"group\\", \\"store\\", or \\"tester\\" """  
    mandatory_update: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandatoryUpdate'), 'exclude': lambda f: f is None }})  
    notify_testers: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifyTesters'), 'exclude': lambda f: f is None }})  
    release_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseNotes'), 'exclude': lambda f: f is None }})
    r"""The release notes"""  
    

@dataclasses.dataclass
class BuildsDistributeRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    build_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'build_id', 'style': 'simple', 'explode': False }})
    r"""The build ID"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    request_body: BuildsDistributeRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""The distribution details"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildsDistribute200ApplicationJSON:
    r"""Success"""
    
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the Request"""  
    upload_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_id'), 'exclude': lambda f: f is None }})
    r"""A unique ID of the upload"""  
    

@dataclasses.dataclass
class BuildsDistributeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    builds_distribute_200_application_json_object: Optional[BuildsDistribute200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    