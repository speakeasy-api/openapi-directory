"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import tfl_api_presentation_entities_place as shared_tfl_api_presentation_entities_place
from typing import Optional


@dataclasses.dataclass
class PlaceGetByTypeRequest:
    
    types: list[str] = dataclasses.field(metadata={'path_param': { 'field_name': 'types', 'style': 'simple', 'explode': False }})
    r"""A comma-separated list of the types to return. Max. approx 12 types.
                A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.
    """  
    active_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'activeOnly', 'style': 'form', 'explode': True }})
    r"""An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)"""  
    

@dataclasses.dataclass
class PlaceGetByTypeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    tfl_api_presentation_entities_places: Optional[list[shared_tfl_api_presentation_entities_place.TflAPIPresentationEntitiesPlace]] = dataclasses.field(default=None)
    r"""OK"""  
    