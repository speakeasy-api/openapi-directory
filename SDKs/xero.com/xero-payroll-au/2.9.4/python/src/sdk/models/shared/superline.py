"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import superannuationcalculationtype_enum as shared_superannuationcalculationtype_enum
from ..shared import superannuationcontributiontype_enum as shared_superannuationcontributiontype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SuperLine:
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount'), 'exclude': lambda f: f is None }})
    r"""Super membership amount"""  
    calculation_type: Optional[shared_superannuationcalculationtype_enum.SuperannuationCalculationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CalculationType'), 'exclude': lambda f: f is None }})  
    contribution_type: Optional[shared_superannuationcontributiontype_enum.SuperannuationContributionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContributionType'), 'exclude': lambda f: f is None }})  
    expense_account_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpenseAccountCode'), 'exclude': lambda f: f is None }})
    r"""expense account code"""  
    liability_account_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LiabilityAccountCode'), 'exclude': lambda f: f is None }})
    r"""liabilty account code"""  
    minimum_monthly_earnings: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumMonthlyEarnings'), 'exclude': lambda f: f is None }})
    r"""amount of minimum earnings"""  
    percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Percentage'), 'exclude': lambda f: f is None }})
    r"""percentage for super line"""  
    super_membership_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SuperMembershipID'), 'exclude': lambda f: f is None }})
    r"""Xero super membership ID"""  
    