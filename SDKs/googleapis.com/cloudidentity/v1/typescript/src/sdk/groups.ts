/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Groups {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a Group.
   */
  cloudidentityGroupsCreate(
    req: operations.CloudidentityGroupsCreateRequest,
    security: operations.CloudidentityGroupsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityGroupsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityGroupsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/groups";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "groupInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudidentityGroupsCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityGroupsCreateResponse =
        new operations.CloudidentityGroupsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the `Group` resources under a customer or namespace.
   */
  cloudidentityGroupsList(
    req: operations.CloudidentityGroupsListRequest,
    security: operations.CloudidentityGroupsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityGroupsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityGroupsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/groups";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudidentityGroupsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityGroupsListResponse =
        new operations.CloudidentityGroupsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listGroupsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListGroupsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Looks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Group` by its `EntityKey`.
   */
  cloudidentityGroupsLookup(
    req: operations.CloudidentityGroupsLookupRequest,
    security: operations.CloudidentityGroupsLookupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityGroupsLookupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityGroupsLookupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/groups:lookup";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudidentityGroupsLookupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityGroupsLookupResponse =
        new operations.CloudidentityGroupsLookupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lookupGroupNameResponse = utils.objectToClass(
              httpRes?.data,
              shared.LookupGroupNameResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Check a potential member for membership in a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. If the account of the member is not one of these, a 403 (PERMISSION_DENIED) HTTP status code will be returned. A member has membership to a group as long as there is a single viewable transitive membership between the group and the member. The actor must have view permissions to at least one transitive membership between the member and group.
   */
  cloudidentityGroupsMembershipsCheckTransitiveMembership(
    req: operations.CloudidentityGroupsMembershipsCheckTransitiveMembershipRequest,
    security: operations.CloudidentityGroupsMembershipsCheckTransitiveMembershipSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityGroupsMembershipsCheckTransitiveMembershipResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CloudidentityGroupsMembershipsCheckTransitiveMembershipRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/memberships:checkTransitiveMembership",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CloudidentityGroupsMembershipsCheckTransitiveMembershipSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityGroupsMembershipsCheckTransitiveMembershipResponse =
        new operations.CloudidentityGroupsMembershipsCheckTransitiveMembershipResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.checkTransitiveMembershipResponse = utils.objectToClass(
              httpRes?.data,
              shared.CheckTransitiveMembershipResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a `Membership`.
   */
  cloudidentityGroupsMembershipsCreate(
    req: operations.CloudidentityGroupsMembershipsCreateRequest,
    security: operations.CloudidentityGroupsMembershipsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityGroupsMembershipsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityGroupsMembershipsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/memberships",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "membershipInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudidentityGroupsMembershipsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityGroupsMembershipsCreateResponse =
        new operations.CloudidentityGroupsMembershipsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a membership graph of just a member or both a member and a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. If the account of the member is not one of these, a 403 (PERMISSION_DENIED) HTTP status code will be returned. Given a member, the response will contain all membership paths from the member. Given both a group and a member, the response will contain all membership paths between the group and the member.
   */
  cloudidentityGroupsMembershipsGetMembershipGraph(
    req: operations.CloudidentityGroupsMembershipsGetMembershipGraphRequest,
    security: operations.CloudidentityGroupsMembershipsGetMembershipGraphSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityGroupsMembershipsGetMembershipGraphResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CloudidentityGroupsMembershipsGetMembershipGraphRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/memberships:getMembershipGraph",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CloudidentityGroupsMembershipsGetMembershipGraphSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityGroupsMembershipsGetMembershipGraphResponse =
        new operations.CloudidentityGroupsMembershipsGetMembershipGraphResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the `Membership`s within a `Group`.
   */
  cloudidentityGroupsMembershipsList(
    req: operations.CloudidentityGroupsMembershipsListRequest,
    security: operations.CloudidentityGroupsMembershipsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityGroupsMembershipsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityGroupsMembershipsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/memberships",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudidentityGroupsMembershipsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityGroupsMembershipsListResponse =
        new operations.CloudidentityGroupsMembershipsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listMembershipsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListMembershipsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Looks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Membership` by its `EntityKey`.
   */
  cloudidentityGroupsMembershipsLookup(
    req: operations.CloudidentityGroupsMembershipsLookupRequest,
    security: operations.CloudidentityGroupsMembershipsLookupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityGroupsMembershipsLookupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityGroupsMembershipsLookupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/memberships:lookup",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudidentityGroupsMembershipsLookupSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityGroupsMembershipsLookupResponse =
        new operations.CloudidentityGroupsMembershipsLookupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lookupMembershipNameResponse = utils.objectToClass(
              httpRes?.data,
              shared.LookupMembershipNameResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Modifies the `MembershipRole`s of a `Membership`.
   */
  cloudidentityGroupsMembershipsModifyMembershipRoles(
    req: operations.CloudidentityGroupsMembershipsModifyMembershipRolesRequest,
    security: operations.CloudidentityGroupsMembershipsModifyMembershipRolesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityGroupsMembershipsModifyMembershipRolesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CloudidentityGroupsMembershipsModifyMembershipRolesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:modifyMembershipRoles",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "modifyMembershipRolesRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CloudidentityGroupsMembershipsModifyMembershipRolesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityGroupsMembershipsModifyMembershipRolesResponse =
        new operations.CloudidentityGroupsMembershipsModifyMembershipRolesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.modifyMembershipRolesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ModifyMembershipRolesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Searches direct groups of a member.
   */
  cloudidentityGroupsMembershipsSearchDirectGroups(
    req: operations.CloudidentityGroupsMembershipsSearchDirectGroupsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityGroupsMembershipsSearchDirectGroupsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CloudidentityGroupsMembershipsSearchDirectGroupsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/memberships:searchDirectGroups",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityGroupsMembershipsSearchDirectGroupsResponse =
        new operations.CloudidentityGroupsMembershipsSearchDirectGroupsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchDirectGroupsResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchDirectGroupsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Search transitive groups of a member. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. If the account of the member is not one of these, a 403 (PERMISSION_DENIED) HTTP status code will be returned. A transitive group is any group that has a direct or indirect membership to the member. Actor must have view permissions all transitive groups.
   */
  cloudidentityGroupsMembershipsSearchTransitiveGroups(
    req: operations.CloudidentityGroupsMembershipsSearchTransitiveGroupsRequest,
    security: operations.CloudidentityGroupsMembershipsSearchTransitiveGroupsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityGroupsMembershipsSearchTransitiveGroupsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CloudidentityGroupsMembershipsSearchTransitiveGroupsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/memberships:searchTransitiveGroups",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CloudidentityGroupsMembershipsSearchTransitiveGroupsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityGroupsMembershipsSearchTransitiveGroupsResponse =
        new operations.CloudidentityGroupsMembershipsSearchTransitiveGroupsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchTransitiveGroupsResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchTransitiveGroupsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Search transitive memberships of a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. If the account of the group is not one of these, a 403 (PERMISSION_DENIED) HTTP status code will be returned. A transitive membership is any direct or indirect membership of a group. Actor must have view permissions to all transitive memberships.
   */
  cloudidentityGroupsMembershipsSearchTransitiveMemberships(
    req: operations.CloudidentityGroupsMembershipsSearchTransitiveMembershipsRequest,
    security: operations.CloudidentityGroupsMembershipsSearchTransitiveMembershipsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityGroupsMembershipsSearchTransitiveMembershipsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CloudidentityGroupsMembershipsSearchTransitiveMembershipsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/memberships:searchTransitiveMemberships",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CloudidentityGroupsMembershipsSearchTransitiveMembershipsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityGroupsMembershipsSearchTransitiveMembershipsResponse =
        new operations.CloudidentityGroupsMembershipsSearchTransitiveMembershipsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchTransitiveMembershipsResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchTransitiveMembershipsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Searches for `Group` resources matching a specified query.
   */
  cloudidentityGroupsSearch(
    req: operations.CloudidentityGroupsSearchRequest,
    security: operations.CloudidentityGroupsSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityGroupsSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityGroupsSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/groups:search";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudidentityGroupsSearchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityGroupsSearchResponse =
        new operations.CloudidentityGroupsSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchGroupsResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchGroupsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
