<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * VcenterSummary - Summary of the updated vCenter Server object.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class VcenterSummary
{
    /**
     * Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----. Use an empty string to remove the existing certificates for the vCenter.
     * 
     * @var ?string $caCerts
     */
	#[\JMS\Serializer\Annotation\SerializedName('caCerts')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $caCerts = null;
    
    /**
     * Compute clusters that are visible to this Rubrik Cluster. All other compute resources are hidden. If 'computeVisibilityFilter' is not specified, all resources are visible. If 'hostGroupFilter' is not specified for a compute cluster, all compute resources in the compute cluster are visible. If a 'hostGroupFilter' is specified for a compute cluster, only vms that currently reside on these hosts are visible.
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\ClusterVisibilityInfo> $computeVisibilityFilter
     */
	#[\JMS\Serializer\Annotation\SerializedName('computeVisibilityFilter')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\ClusterVisibilityInfo>')]
    public array $computeVisibilityFilter;
    
    /**
     * The ID of the SLA Domain configured directly on the Rubrik object.
     * 
     * @var string $configuredSlaDomainId
     */
	#[\JMS\Serializer\Annotation\SerializedName('configuredSlaDomainId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $configuredSlaDomainId;
    
    /**
     * The name of the SLA Domain configured directly on the Rubrik object.
     * 
     * @var string $configuredSlaDomainName
     */
	#[\JMS\Serializer\Annotation\SerializedName('configuredSlaDomainName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $configuredSlaDomainName;
    
    /**
     * Optional field containing Polaris managed id of the configured SLA domain if it is Polaris managed.
     * 
     * @var ?string $configuredSlaDomainPolarisManagedId
     */
	#[\JMS\Serializer\Annotation\SerializedName('configuredSlaDomainPolarisManagedId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $configuredSlaDomainPolarisManagedId = null;
    
    /**
     * Specifies whether the SLA Domain is used for protection or retention.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ConfiguredSlaTypeEnum $configuredSlaDomainType
     */
	#[\JMS\Serializer\Annotation\SerializedName('configuredSlaDomainType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ConfiguredSlaTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ConfiguredSlaTypeEnum $configuredSlaDomainType = null;
    
    /**
     * Set to 'AllowAutoConflictResolution' to link the relic virtual machine objects of a virtual machine to the current object for the virtual machine or to 'NoConflictResolution' to prevent linking. The Rubrik cluster generates a unique ID for each virtual machine when a vCenter Server is added. When a virtual machine changes to another vCenter Server or unregisters and registers with the same vCenter Server, a new unique ID is generated for that virtual machine. When this happens, the virtual machine object associated with the original ID becomes a relic. This option links relic virtual machine objects with the current virtual machine object of a specific virtual machine, and makes the collective snapshot history available through the current object. Default value is 'NoConflictResolution'.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\VcenterSummaryConflictResolutionAuthzEnum $conflictResolutionAuthz
     */
	#[\JMS\Serializer\Annotation\SerializedName('conflictResolutionAuthz')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\VcenterSummaryConflictResolutionAuthzEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VcenterSummaryConflictResolutionAuthzEnum $conflictResolutionAuthz = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('connectionStatus')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\RefreshableObjectConnectionStatus')]
    public RefreshableObjectConnectionStatus $connectionStatus;
    
	#[\JMS\Serializer\Annotation\SerializedName('hostname')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $hostname;
    
    /**
     * The ID of the Rubrik object.
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
     * 
     * @var ?bool $isConfiguredSlaDomainRetentionLocked
     */
	#[\JMS\Serializer\Annotation\SerializedName('isConfiguredSlaDomainRetentionLocked')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isConfiguredSlaDomainRetentionLocked = null;
    
    /**
     * A Boolean value that specifies whether Rubrik IO filters are installed on any compute clusters in the vCenter. When this value is 'true,' Rubrik IO filters are present on at least one compute cluster in the vCenter. When this value is 'false,' no Rubrik IO filters are present on any compute clusters in the vCenter.
     * 
     * @var ?bool $isIoFilterInstalled
     */
	#[\JMS\Serializer\Annotation\SerializedName('isIoFilterInstalled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isIoFilterInstalled = null;
    
    /**
     * Indicates if the vCenter is a VMC instance.
     * 
     * @var ?bool $isVmc
     */
	#[\JMS\Serializer\Annotation\SerializedName('isVmc')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isVmc = null;
    
    /**
     * Optional field containing the last time that a vcenter was refreshed (either lite or full).
     * 
     * @var ?\DateTime $lastRefreshTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('lastRefreshTime')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $lastRefreshTime = null;
    
    /**
     * The name of the Rubrik object.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * The ID of the cluster that manages the Rubrik object.
     * 
     * @var string $primaryClusterId
     */
	#[\JMS\Serializer\Annotation\SerializedName('primaryClusterId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $primaryClusterId;
    
    /**
     * The UTC time when the SLA Domain was last updated.
     * 
     * @var ?\DateTime $slaLastUpdateTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('slaLastUpdateTime')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $slaLastUpdateTime = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('username')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $username;
    
    /**
     * Version of vCenter.
     * 
     * @var string $version
     */
	#[\JMS\Serializer\Annotation\SerializedName('version')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $version;
    
	public function __construct()
	{
		$this->caCerts = null;
		$this->computeVisibilityFilter = [];
		$this->configuredSlaDomainId = "";
		$this->configuredSlaDomainName = "";
		$this->configuredSlaDomainPolarisManagedId = null;
		$this->configuredSlaDomainType = null;
		$this->conflictResolutionAuthz = null;
		$this->connectionStatus = new \OpenAPI\OpenAPI\Models\Shared\RefreshableObjectConnectionStatus();
		$this->hostname = "";
		$this->id = "";
		$this->isConfiguredSlaDomainRetentionLocked = null;
		$this->isIoFilterInstalled = null;
		$this->isVmc = null;
		$this->lastRefreshTime = null;
		$this->name = "";
		$this->primaryClusterId = "";
		$this->slaLastUpdateTime = null;
		$this->username = "";
		$this->version = "";
	}
}
