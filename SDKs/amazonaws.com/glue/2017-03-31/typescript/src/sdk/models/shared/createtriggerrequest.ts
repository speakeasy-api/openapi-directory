/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Action } from "./action";
import { EventBatchingCondition } from "./eventbatchingcondition";
import { Predicate } from "./predicate";
import { TriggerTypeEnum } from "./triggertypeenum";
import { Expose, Type } from "class-transformer";

export class CreateTriggerRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Action })
  @Expose({ name: "Actions" })
  @Type(() => Action)
  actions: Action[];

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "EventBatchingCondition" })
  @Type(() => EventBatchingCondition)
  eventBatchingCondition?: EventBatchingCondition;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Predicate" })
  @Type(() => Predicate)
  predicate?: Predicate;

  @SpeakeasyMetadata()
  @Expose({ name: "Schedule" })
  schedule?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StartOnCreation" })
  startOnCreation?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "Type" })
  type: TriggerTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "WorkflowName" })
  workflowName?: string;
}
