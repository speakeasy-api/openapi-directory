/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Subscription - Request was successful
 */
public class Subscription {
    /**
     * An array of additional products that have been purchased to augment this Subscription
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addons")
    public SubscriptionAddon[] addons;
    public Subscription withAddons(SubscriptionAddon[] addons) {
        this.addons = addons;
        return this;
    }
    
    @JsonProperty("billing")
    public SubscriptionBilling billing;
    public Subscription withBilling(SubscriptionBilling billing) {
        this.billing = billing;
        return this;
    }
    
    /**
     * Whether or not the Subscription is allowed to be canceled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancelable")
    public Boolean cancelable;
    public Subscription withCancelable(Boolean cancelable) {
        this.cancelable = cancelable;
        return this;
    }
    
    /**
     * When the Subscription was created
     */
    @JsonProperty("createdAt")
    public String createdAt;
    public Subscription withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * When the Subscription will expire
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiresAt")
    public String expiresAt;
    public Subscription withExpiresAt(String expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }
    
    /**
     * A human readable description of this Subscription
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    public String label;
    public Subscription withLabel(String label) {
        this.label = label;
        return this;
    }
    
    /**
     * The url to use or manage this Subscription's active product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("launchUrl")
    public String launchUrl;
    public Subscription withLaunchUrl(String launchUrl) {
        this.launchUrl = launchUrl;
        return this;
    }
    
    /**
     * Unique identifier of the payment profile that will be used to automatically renew this Subscription
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentProfileId")
    public Long paymentProfileId;
    public Subscription withPaymentProfileId(Long paymentProfileId) {
        this.paymentProfileId = paymentProfileId;
        return this;
    }
    
    /**
     * Whether the renewal price will be based from the list price or a locked-in price for this shopper
     */
    @JsonProperty("priceLocked")
    public Boolean priceLocked;
    public Subscription withPriceLocked(Boolean priceLocked) {
        this.priceLocked = priceLocked;
        return this;
    }
    
    @JsonProperty("product")
    public SubscriptionProduct product;
    public Subscription withProduct(SubscriptionProduct product) {
        this.product = product;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relations")
    public SubscriptionRelations relations;
    public Subscription withRelations(SubscriptionRelations relations) {
        this.relations = relations;
        return this;
    }
    
    /**
     * Whether or not the Subscription is set to be automatically renewed via the billing agent
     */
    @JsonProperty("renewAuto")
    public Boolean renewAuto;
    public Subscription withRenewAuto(Boolean renewAuto) {
        this.renewAuto = renewAuto;
        return this;
    }
    
    /**
     * Whether or not the Subscription is allowed to be renewed
     */
    @JsonProperty("renewable")
    public Boolean renewable;
    public Subscription withRenewable(Boolean renewable) {
        this.renewable = renewable;
        return this;
    }
    
    /**
     * Whether the Subscription is active or the specific non-active state
     */
    @JsonProperty("status")
    public SubscriptionStatusEnum status;
    public Subscription withStatus(SubscriptionStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Unique identifier of the Subscription
     */
    @JsonProperty("subscriptionId")
    public String subscriptionId;
    public Subscription withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }
    
    /**
     * Whether or not the Subscription is allowed to be upgraded
     */
    @JsonProperty("upgradeable")
    public Boolean upgradeable;
    public Subscription withUpgradeable(Boolean upgradeable) {
        this.upgradeable = upgradeable;
        return this;
    }
    
}
