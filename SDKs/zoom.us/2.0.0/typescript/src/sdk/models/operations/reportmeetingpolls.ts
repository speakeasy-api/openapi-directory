/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class ReportMeetingPollsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

export class ReportMeetingPollsRequest extends SpeakeasyBase {
  /**
   * The meeting ID or the meeting UUID.  If a meeting ID is provided in the request instead of a UUID, the response will be for the latest meeting instance.
   *
   * @remarks
   *
   * If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=meetingId",
  })
  meetingId: string;
}

export class ReportMeetingPolls200ApplicationXMLQuestionsQuestionDetails extends SpeakeasyBase {
  /**
   * Given answer.
   */
  @SpeakeasyMetadata()
  answer?: string;

  /**
   * Date and time at which the answer to the poll was submitted.
   */
  @SpeakeasyMetadata()
  dateTime?: Date;

  /**
   * Unique identifier of the poll.
   */
  @SpeakeasyMetadata()
  pollingId?: string;

  /**
   * Asked question.
   */
  @SpeakeasyMetadata()
  question?: string;
}

export class ReportMeetingPolls200ApplicationXMLQuestions extends SpeakeasyBase {
  /**
   * Participant email.
   */
  @SpeakeasyMetadata()
  email?: string;

  /**
   * Participant display name.<br> If "anonymous" option is enabled for a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meet), the participant's polling information will be kept anonymous and the value of `name` field will be "Anonymous Attendee".
   */
  @SpeakeasyMetadata()
  name?: string;

  /**
   * Array of questions from user.
   */
  @SpeakeasyMetadata({
    elemType: ReportMeetingPolls200ApplicationXMLQuestionsQuestionDetails,
  })
  questionDetails?: ReportMeetingPolls200ApplicationXMLQuestionsQuestionDetails[];
}

/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 * Meeting polls report returned.<br>
 * This is only available for paid account:{accountId}.
 */
export class ReportMeetingPolls200ApplicationXML extends SpeakeasyBase {
  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
   */
  @SpeakeasyMetadata()
  id?: number;

  /**
   * Array of meeting question objects.
   */
  @SpeakeasyMetadata({ elemType: ReportMeetingPolls200ApplicationXMLQuestions })
  questions?: ReportMeetingPolls200ApplicationXMLQuestions[];

  /**
   * Meeting start time.
   */
  @SpeakeasyMetadata()
  startTime?: Date;

  /**
   * Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
   */
  @SpeakeasyMetadata()
  uuid?: string;
}

export class ReportMeetingPolls200ApplicationJSONQuestionsQuestionDetails extends SpeakeasyBase {
  /**
   * Given answer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "answer" })
  answer?: string;

  /**
   * Date and time at which the answer to the poll was submitted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateTime?: Date;

  /**
   * Unique identifier of the poll.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "polling_id" })
  pollingId?: string;

  /**
   * Asked question.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "question" })
  question?: string;
}

export class ReportMeetingPolls200ApplicationJSONQuestions extends SpeakeasyBase {
  /**
   * Participant email.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Participant display name.<br> If "anonymous" option is enabled for a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meet), the participant's polling information will be kept anonymous and the value of `name` field will be "Anonymous Attendee".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Array of questions from user.
   */
  @SpeakeasyMetadata({
    elemType: ReportMeetingPolls200ApplicationJSONQuestionsQuestionDetails,
  })
  @Expose({ name: "question_details" })
  @Type(() => ReportMeetingPolls200ApplicationJSONQuestionsQuestionDetails)
  questionDetails?: ReportMeetingPolls200ApplicationJSONQuestionsQuestionDetails[];
}

/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 * Meeting polls report returned.<br>
 * This is only available for paid account:{accountId}.
 */
export class ReportMeetingPolls200ApplicationJSON extends SpeakeasyBase {
  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Array of meeting question objects.
   */
  @SpeakeasyMetadata({
    elemType: ReportMeetingPolls200ApplicationJSONQuestions,
  })
  @Expose({ name: "questions" })
  @Type(() => ReportMeetingPolls200ApplicationJSONQuestions)
  questions?: ReportMeetingPolls200ApplicationJSONQuestions[];

  /**
   * Meeting start time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  /**
   * Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

export class ReportMeetingPollsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * Meeting polls report returned.<br>
   * This is only available for paid account:{accountId}.
   */
  @SpeakeasyMetadata()
  reportMeetingPolls200ApplicationJSONObject?: ReportMeetingPolls200ApplicationJSON;
}
