// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type TestUploadHashesBatchSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// TestUploadHashesBatchTestCloudFileHashFileTypeEnum - Type of the file
type TestUploadHashesBatchTestCloudFileHashFileTypeEnum string

const (
	TestUploadHashesBatchTestCloudFileHashFileTypeEnumDsymFile TestUploadHashesBatchTestCloudFileHashFileTypeEnum = "dsym-file"
	TestUploadHashesBatchTestCloudFileHashFileTypeEnumAppFile  TestUploadHashesBatchTestCloudFileHashFileTypeEnum = "app-file"
	TestUploadHashesBatchTestCloudFileHashFileTypeEnumTestFile TestUploadHashesBatchTestCloudFileHashFileTypeEnum = "test-file"
)

func (e TestUploadHashesBatchTestCloudFileHashFileTypeEnum) ToPointer() *TestUploadHashesBatchTestCloudFileHashFileTypeEnum {
	return &e
}

func (e *TestUploadHashesBatchTestCloudFileHashFileTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dsym-file":
		fallthrough
	case "app-file":
		fallthrough
	case "test-file":
		*e = TestUploadHashesBatchTestCloudFileHashFileTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TestUploadHashesBatchTestCloudFileHashFileTypeEnum: %v", v)
	}
}

// TestUploadHashesBatchTestCloudFileHash - Hash, type, path and byte range of a file that is required in test run
type TestUploadHashesBatchTestCloudFileHash struct {
	// SHA256 hash of the file
	Checksum string `json:"checksum"`
	// Type of the file
	FileType TestUploadHashesBatchTestCloudFileHashFileTypeEnum `json:"fileType"`
	// Relative path of the file
	RelativePath string `json:"relativePath"`
}

type TestUploadHashesBatchRequest struct {
	// File hash information
	RequestBody []TestUploadHashesBatchTestCloudFileHash `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The ID of the test run
	TestRunID string `pathParam:"style=simple,explode=false,name=test_run_id"`
}

// TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnum - Type of the file
type TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnum string

const (
	TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnumDsymFile TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnum = "dsym-file"
	TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnumAppFile  TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnum = "app-file"
	TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnumTestFile TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnum = "test-file"
)

func (e TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnum) ToPointer() *TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnum {
	return &e
}

func (e *TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dsym-file":
		fallthrough
	case "app-file":
		fallthrough
	case "test-file":
		*e = TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnum: %v", v)
	}
}

// TestUploadHashesBatchTestCloudFileHashResponseTestCloudHashUploadStatus - Status of the upload
type TestUploadHashesBatchTestCloudFileHashResponseTestCloudHashUploadStatus struct {
	// URI that should be used to make POST request if file with given hash doesn't exist. This is set when status_code is equal to 412
	Location *string `json:"location,omitempty"`
	// HTTP status code that represent result of upload
	StatusCode float64 `json:"statusCode"`
}

// TestUploadHashesBatchTestCloudFileHashResponse - Response message for single uploaded file hash
type TestUploadHashesBatchTestCloudFileHashResponse struct {
	// SHA256 hash of the file
	Checksum string `json:"checksum"`
	// Type of the file
	FileType TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnum `json:"fileType"`
	// Relative path of the file
	RelativePath *string `json:"relativePath,omitempty"`
	// Status of the upload
	UploadStatus TestUploadHashesBatchTestCloudFileHashResponseTestCloudHashUploadStatus `json:"uploadStatus"`
}

type TestUploadHashesBatchResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	TestCloudFileHashResponses []TestUploadHashesBatchTestCloudFileHashResponse
}
