<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PrivateConnection - The PrivateConnection resource is used to establish private connectivity with the customer's network.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PrivateConnection
{
    /**
     * Output only. The create time of the resource.
     * 
     * @var ?string $createTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('createTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $createTime = null;
    
    /**
     * The private connection display name.
     * 
     * @var ?string $displayName
     */
	#[\JMS\Serializer\Annotation\SerializedName('displayName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $displayName = null;
    
    /**
     * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Status $error
     */
	#[\JMS\Serializer\Annotation\SerializedName('error')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Status')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Status $error = null;
    
    /**
     * The resource labels for private connections to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg", "count": "3" }`.
     * 
     * @var ?array<string, string> $labels
     */
	#[\JMS\Serializer\Annotation\SerializedName('labels')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $labels = null;
    
    /**
     * The name of the resource.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Output only. The state of the private connection.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PrivateConnectionStateEnum $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PrivateConnectionStateEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PrivateConnectionStateEnum $state = null;
    
    /**
     * Output only. The last update time of the resource.
     * 
     * @var ?string $updateTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('updateTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $updateTime = null;
    
    /**
     * The VPC peering configuration is used to create VPC peering with the consumer's VPC.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\VpcPeeringConfig $vpcPeeringConfig
     */
	#[\JMS\Serializer\Annotation\SerializedName('vpcPeeringConfig')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\VpcPeeringConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VpcPeeringConfig $vpcPeeringConfig = null;
    
	public function __construct()
	{
		$this->createTime = null;
		$this->displayName = null;
		$this->error = null;
		$this->labels = null;
		$this->name = null;
		$this->state = null;
		$this->updateTime = null;
		$this->vpcPeeringConfig = null;
	}
}
