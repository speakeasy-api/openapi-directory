/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Post - Successful response
 */
public class Post {
    /**
     * The author of this Post.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author")
    public PostAuthor author;

    public Post withAuthor(PostAuthor author) {
        this.author = author;
        return this;
    }
    
    /**
     * Data about the blog containing this Post.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blog")
    public PostBlog blog;

    public Post withBlog(PostBlog blog) {
        this.blog = blog;
        return this;
    }
    
    /**
     * The content of the Post. May contain HTML markup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    public String content;

    public Post withContent(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * The JSON meta-data for the Post.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customMetaData")
    public String customMetaData;

    public Post withCustomMetaData(String customMetaData) {
        this.customMetaData = customMetaData;
        return this;
    }
    
    /**
     * Etag of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public Post withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * The identifier of this Post.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Post withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Display image for the Post.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    public PostImages[] images;

    public Post withImages(PostImages[] images) {
        this.images = images;
        return this;
    }
    
    /**
     * The kind of this entity. Always blogger#post.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Post withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The list of labels this Post was tagged with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public String[] labels;

    public Post withLabels(String[] labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * The location for geotagged posts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public PostLocation location;

    public Post withLocation(PostLocation location) {
        this.location = location;
        return this;
    }
    
    /**
     * RFC 3339 date-time when this Post was published.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("published")
    public String published;

    public Post withPublished(String published) {
        this.published = published;
        return this;
    }
    
    /**
     * Comment control and display setting for readers of this post.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readerComments")
    public PostReaderCommentsEnum readerComments;

    public Post withReaderComments(PostReaderCommentsEnum readerComments) {
        this.readerComments = readerComments;
        return this;
    }
    
    /**
     * The container of comments on this Post.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replies")
    public PostReplies replies;

    public Post withReplies(PostReplies replies) {
        this.replies = replies;
        return this;
    }
    
    /**
     * The API REST URL to fetch this resource from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;

    public Post withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * Status of the post. Only set for admin-level requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public PostStatusEnum status;

    public Post withStatus(PostStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The title of the Post.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public Post withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The title link URL, similar to atom's related link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("titleLink")
    public String titleLink;

    public Post withTitleLink(String titleLink) {
        this.titleLink = titleLink;
        return this;
    }
    
    /**
     * RFC 3339 date-time when this Post was last trashed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trashed")
    public String trashed;

    public Post withTrashed(String trashed) {
        this.trashed = trashed;
        return this;
    }
    
    /**
     * RFC 3339 date-time when this Post was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated")
    public String updated;

    public Post withUpdated(String updated) {
        this.updated = updated;
        return this;
    }
    
    /**
     * The URL where this Post is displayed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public Post withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public Post(){}
}
