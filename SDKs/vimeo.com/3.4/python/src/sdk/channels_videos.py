"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ChannelsVideos:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_video_to_channel(self, request: operations.AddVideoToChannelRequest, security: operations.AddVideoToChannelSecurity) -> operations.AddVideoToChannelResponse:
        r"""Add a specific video to a channel"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideoToChannelRequest, base_url, '/channels/{channel_id}/videos/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideoToChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def add_videos_to_channel(self, request: operations.AddVideosToChannelRequest, security: operations.AddVideosToChannelSecurity) -> operations.AddVideosToChannelResponse:
        r"""Add a list of videos to a channel"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideosToChannelRequest, base_url, '/channels/{channel_id}/videos', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideosToChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_video_from_channel(self, request: operations.DeleteVideoFromChannelRequest, security: operations.DeleteVideoFromChannelSecurity) -> operations.DeleteVideoFromChannelResponse:
        r"""Remove a specific video from a channel"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVideoFromChannelRequest, base_url, '/channels/{channel_id}/videos/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVideoFromChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_available_video_channels(self, request: operations.GetAvailableVideoChannelsRequest) -> operations.GetAvailableVideoChannelsResponse:
        r"""Get all the channels to which a user can add or remove a specific video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAvailableVideoChannelsRequest, base_url, '/videos/{video_id}/available_channels', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAvailableVideoChannelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.channel+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Channel]])
                res.channels = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.channel+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_channel_video(self, request: operations.GetChannelVideoRequest) -> operations.GetChannelVideoResponse:
        r"""Get a specific video in a channel
        This method returns a specific video in a channel. You can use it to determine whether the video is in the channel.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChannelVideoRequest, base_url, '/channels/{channel_id}/videos/{video_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelVideoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Video])
                res.video = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_channel_videos(self, request: operations.GetChannelVideosRequest) -> operations.GetChannelVideosResponse:
        r"""Get all the videos in a channel"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChannelVideosRequest, base_url, '/channels/{channel_id}/videos', request)
        
        query_params = utils.get_query_params(operations.GetChannelVideosRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelVideosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Video]])
                res.videos = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def remove_videos_from_channel(self, request: operations.RemoveVideosFromChannelRequest, security: operations.RemoveVideosFromChannelSecurity) -> operations.RemoveVideosFromChannelResponse:
        r"""Remove a list of videos from a channel"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveVideosFromChannelRequest, base_url, '/channels/{channel_id}/videos', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveVideosFromChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Video])
                res.video = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    