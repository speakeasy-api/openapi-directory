<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * TestNotificationConfigurationResponse - OK - the request has succeeded.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class TestNotificationConfigurationResponse
{
    /**
     * Any error messages encountered.
     * 
     * @var ?array<string> $errorMessages
     */
	#[\JMS\Serializer\Annotation\SerializedName('errorMessages')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $errorMessages = null;
    
    /**
     * The event types that were tested.
     * 
     * >Permitted values: `ACCOUNT_HOLDER_CREATED`, `ACCOUNT_CREATED`, `ACCOUNT_UPDATED`, `ACCOUNT_HOLDER_UPDATED`, `ACCOUNT_HOLDER_STATUS_CHANGE`, `ACCOUNT_HOLDER_STORE_STATUS_CHANGE` `ACCOUNT_HOLDER_VERIFICATION`, `ACCOUNT_HOLDER_LIMIT_REACHED`, `ACCOUNT_HOLDER_PAYOUT`, `PAYMENT_FAILURE`, `SCHEDULED_REFUNDS`, `REPORT_AVAILABLE`, `TRANSFER_FUNDS`, `BENEFICIARY_SETUP`, `COMPENSATE_NEGATIVE_BALANCE`.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\TestNotificationConfigurationResponseEventTypesEnum> $eventTypes
     */
	#[\JMS\Serializer\Annotation\SerializedName('eventTypes')]
    #[\JMS\Serializer\Annotation\Type('array<enum<OpenAPI\OpenAPI\Models\Shared\TestNotificationConfigurationResponseEventTypesEnum>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $eventTypes = null;
    
    /**
     * The notification message and related response messages.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\ExchangeMessage> $exchangeMessages
     */
	#[\JMS\Serializer\Annotation\SerializedName('exchangeMessages')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\ExchangeMessage>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $exchangeMessages = null;
    
    /**
     * The ID of the notification subscription configuration.
     * 
     * @var int $notificationId
     */
	#[\JMS\Serializer\Annotation\SerializedName('notificationId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $notificationId;
    
    /**
     * A list of messages describing the testing steps.
     * 
     * @var ?array<string> $okMessages
     */
	#[\JMS\Serializer\Annotation\SerializedName('okMessages')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $okMessages = null;
    
    /**
     * The reference of a request. Can be used to uniquely identify the request.
     * 
     * @var ?string $pspReference
     */
	#[\JMS\Serializer\Annotation\SerializedName('pspReference')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $pspReference = null;
    
    /**
     * The result code.
     * 
     * @var ?string $resultCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('resultCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $resultCode = null;
    
    /**
     * Indicates whether the request is processed asynchronously. Depending on the request's platform settings, the following scenarios may be applied:
     * 
     * * **true**: The request is queued and will be executed when the providing service is available in the order in which the requests are received.
     * * **false**: The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
     * 
     * @var ?bool $submittedAsync
     */
	#[\JMS\Serializer\Annotation\SerializedName('submittedAsync')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $submittedAsync = null;
    
	public function __construct()
	{
		$this->errorMessages = null;
		$this->eventTypes = null;
		$this->exchangeMessages = null;
		$this->notificationId = 0;
		$this->okMessages = null;
		$this->pspReference = null;
		$this->resultCode = null;
		$this->submittedAsync = null;
	}
}
