"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import attributevalue as shared_attributevalue
from ..shared import condition as shared_condition
from ..shared import key as shared_key
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueryInput:
    
    hash_key_value: shared_attributevalue.AttributeValue = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HashKeyValue') }})  
    table_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableName') }})  
    attributes_to_get: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttributesToGet'), 'exclude': lambda f: f is None }})
    r"""List of <code>Attribute</code> names. If attribute names are not specified then all attributes will be returned. If some attributes are not found, they will not appear in the result."""  
    consistent_read: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConsistentRead'), 'exclude': lambda f: f is None }})
    r"""If set to <code>true</code>, then a consistent read is issued. Otherwise eventually-consistent is used."""  
    count: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Count'), 'exclude': lambda f: f is None }})  
    exclusive_start_key: Optional[shared_key.Key] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExclusiveStartKey'), 'exclude': lambda f: f is None }})  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Limit'), 'exclude': lambda f: f is None }})  
    range_key_condition: Optional[shared_condition.Condition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RangeKeyCondition'), 'exclude': lambda f: f is None }})  
    scan_index_forward: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScanIndexForward'), 'exclude': lambda f: f is None }})  
    