"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any

class GbrCleanseMatchLocalityMatchEnum(str, Enum):
    r"""Match indicator for the locality"""
    FULL = 'FULL'
    PARTIAL = 'PARTIAL'
    INCORRECT = 'INCORRECT'
    MISSING = 'MISSING'
    NA = 'NA'

class GbrCleanseMatchOrganisationMatchEnum(str, Enum):
    r"""Match indicator for the organisation"""
    FULL = 'FULL'
    PARTIAL = 'PARTIAL'
    INCORRECT = 'INCORRECT'
    MISSING = 'MISSING'
    NA = 'NA'

class GbrCleanseMatchPostTownMatchEnum(str, Enum):
    r"""Match indicator for the post_town"""
    FULL = 'FULL'
    PARTIAL = 'PARTIAL'
    INCORRECT = 'INCORRECT'
    MISSING = 'MISSING'
    NA = 'NA'

class GbrCleanseMatchPostcodeMatchEnum(str, Enum):
    r"""Match indicator for the postcode"""
    FULL = 'FULL'
    PARTIAL = 'PARTIAL'
    INCORRECT = 'INCORRECT'
    MISSING = 'MISSING'
    NA = 'NA'

class GbrCleanseMatchPremiseMatchEnum(str, Enum):
    r"""Match indicator for the premise"""
    FULL = 'FULL'
    PARTIAL = 'PARTIAL'
    INCORRECT = 'INCORRECT'
    MISSING = 'MISSING'
    NA = 'NA'

class GbrCleanseMatchThoroughfareMatchEnum(str, Enum):
    r"""Match indicator for the street"""
    FULL = 'FULL'
    PARTIAL = 'PARTIAL'
    INCORRECT = 'INCORRECT'
    MISSING = 'MISSING'
    NA = 'NA'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GbrCleanseMatch:
    
    confidence: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidence') }})
    r"""A confidence score represented as number between 1 and 0. 1 indicates a full match. 0 indicates no complete matching elements."""  
    count: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count') }})
    r"""The number of addresses we matched to the input. We return the closest match by default."""  
    fit: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fit') }})
    r"""A score represented as number between 1 and 0. Fit compares the address elements present in your query against the matching address elements. It does not incorporate elements you have not presented in the score. A partial address (e.g. 12 Pye Green Road) will have a fit of 1 even though it is missing post town and postcode. Its confidence score will be less than 1 however because it is missing some crucial elements."""  
    locality_match: GbrCleanseMatchLocalityMatchEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locality_match') }})
    r"""Match indicator for the locality"""  
    match: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('match') }})
    r"""Nearest matching address"""  
    organisation_match: GbrCleanseMatchOrganisationMatchEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organisation_match') }})
    r"""Match indicator for the organisation"""  
    post_town_match: GbrCleanseMatchPostTownMatchEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_town_match') }})
    r"""Match indicator for the post_town"""  
    postcode_match: GbrCleanseMatchPostcodeMatchEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postcode_match') }})
    r"""Match indicator for the postcode"""  
    premise_match: GbrCleanseMatchPremiseMatchEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('premise_match') }})
    r"""Match indicator for the premise"""  
    query: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query') }})
    r"""Originally submitted query"""  
    thoroughfare_match: GbrCleanseMatchThoroughfareMatchEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thoroughfare_match') }})
    r"""Match indicator for the street"""  
    