/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Describes a rule.
 */
export class CreateTopicRuleRequestBodyTopicRulePayload extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.Action })
  @Expose({ name: "actions" })
  @Type(() => shared.Action)
  actions?: shared.Action[];

  @SpeakeasyMetadata()
  @Expose({ name: "awsIotSqlVersion" })
  awsIotSqlVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "errorAction" })
  @Type(() => shared.Action)
  errorAction?: shared.Action;

  @SpeakeasyMetadata()
  @Expose({ name: "ruleDisabled" })
  ruleDisabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "sql" })
  sql?: string;
}

export class CreateTopicRuleRequestBody extends SpeakeasyBase {
  /**
   * Describes a rule.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "topicRulePayload" })
  @Type(() => CreateTopicRuleRequestBodyTopicRulePayload)
  topicRulePayload: CreateTopicRuleRequestBodyTopicRulePayload;
}

export class CreateTopicRuleRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateTopicRuleRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The name of the rule.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ruleName",
  })
  ruleName: string;

  /**
   * <p>Metadata which can be used to manage the topic rule.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: --tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-amz-tagging",
  })
  xAmzTagging?: string;
}

export class CreateTopicRuleResponse extends SpeakeasyBase {
  /**
   * ConflictingResourceUpdateException
   */
  @SpeakeasyMetadata()
  conflictingResourceUpdateException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalException
   */
  @SpeakeasyMetadata()
  internalException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * ResourceAlreadyExistsException
   */
  @SpeakeasyMetadata()
  resourceAlreadyExistsException?: any;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;

  /**
   * SqlParseException
   */
  @SpeakeasyMetadata()
  sqlParseException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
