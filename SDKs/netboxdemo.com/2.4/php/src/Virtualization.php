<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Virtualization 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * virtualizationChoicesList
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationChoicesListResponse
     */
	public function virtualizationChoicesList(
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationChoicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/_choices/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationChoicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * virtualizationChoicesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationChoicesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationChoicesReadResponse
     */
	public function virtualizationChoicesRead(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationChoicesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationChoicesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/_choices/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationChoicesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationChoicesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * virtualizationClusterGroupsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ClusterGroupInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsCreateResponse
     */
	public function virtualizationClusterGroupsCreate(
        \OpenAPI\OpenAPI\Models\Shared\ClusterGroupInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/cluster-groups/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clusterGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClusterGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationClusterGroupsDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsDeleteResponse
     */
	public function virtualizationClusterGroupsDelete(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/cluster-groups/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * virtualizationClusterGroupsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsListResponse
     */
	public function virtualizationClusterGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/cluster-groups/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->virtualizationClusterGroupsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationClusterGroupsPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsPartialUpdateResponse
     */
	public function virtualizationClusterGroupsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/cluster-groups/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "clusterGroupInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clusterGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClusterGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationClusterGroupsRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsReadResponse
     */
	public function virtualizationClusterGroupsRead(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/cluster-groups/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clusterGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClusterGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationClusterGroupsUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsUpdateResponse
     */
	public function virtualizationClusterGroupsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/cluster-groups/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "clusterGroupInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterGroupsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clusterGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClusterGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationClusterTypesCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ClusterTypeInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesCreateResponse
     */
	public function virtualizationClusterTypesCreate(
        \OpenAPI\OpenAPI\Models\Shared\ClusterTypeInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/cluster-types/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clusterType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClusterType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationClusterTypesDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesDeleteResponse
     */
	public function virtualizationClusterTypesDelete(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/cluster-types/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * virtualizationClusterTypesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesListResponse
     */
	public function virtualizationClusterTypesList(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/cluster-types/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->virtualizationClusterTypesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationClusterTypesPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesPartialUpdateResponse
     */
	public function virtualizationClusterTypesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/cluster-types/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "clusterTypeInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clusterType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClusterType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationClusterTypesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesReadResponse
     */
	public function virtualizationClusterTypesRead(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/cluster-types/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clusterType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClusterType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationClusterTypesUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesUpdateResponse
     */
	public function virtualizationClusterTypesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/cluster-types/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "clusterTypeInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClusterTypesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clusterType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClusterType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationClustersCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableClusterInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersCreateResponse
     */
	public function virtualizationClustersCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableClusterInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/clusters/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cluster = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Cluster', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationClustersDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersDeleteResponse
     */
	public function virtualizationClustersDelete(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/clusters/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * virtualizationClustersList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersListResponse
     */
	public function virtualizationClustersList(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/clusters/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->virtualizationClustersList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationClustersPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersPartialUpdateResponse
     */
	public function virtualizationClustersPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/clusters/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableClusterInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cluster = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Cluster', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationClustersRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersReadResponse
     */
	public function virtualizationClustersRead(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/clusters/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cluster = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Cluster', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationClustersUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersUpdateResponse
     */
	public function virtualizationClustersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/clusters/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableClusterInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationClustersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cluster = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Cluster', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationInterfacesCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableInterfaceInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesCreateResponse
     */
	public function virtualizationInterfacesCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableInterfaceInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/interfaces/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interface = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceT', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationInterfacesDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesDeleteResponse
     */
	public function virtualizationInterfacesDelete(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/interfaces/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * virtualizationInterfacesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesListResponse
     */
	public function virtualizationInterfacesList(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/interfaces/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->virtualizationInterfacesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationInterfacesPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesPartialUpdateResponse
     */
	public function virtualizationInterfacesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/interfaces/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableInterfaceInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interface = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceT', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationInterfacesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesReadResponse
     */
	public function virtualizationInterfacesRead(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/interfaces/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interface = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceT', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationInterfacesUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesUpdateResponse
     */
	public function virtualizationInterfacesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/interfaces/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableInterfaceInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationInterfacesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interface = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceT', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationVirtualMachinesCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableVirtualMachineInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesCreateResponse
     */
	public function virtualizationVirtualMachinesCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableVirtualMachineInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/virtual-machines/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->virtualMachine = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VirtualMachine', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationVirtualMachinesDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesDeleteResponse
     */
	public function virtualizationVirtualMachinesDelete(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/virtual-machines/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * virtualizationVirtualMachinesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesListResponse
     */
	public function virtualizationVirtualMachinesList(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/virtual-machines/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->virtualizationVirtualMachinesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationVirtualMachinesPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesPartialUpdateResponse
     */
	public function virtualizationVirtualMachinesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/virtual-machines/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableVirtualMachineInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->virtualMachine = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VirtualMachine', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationVirtualMachinesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesReadResponse
     */
	public function virtualizationVirtualMachinesRead(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/virtual-machines/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->virtualMachineWithConfigContext = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VirtualMachineWithConfigContext', 'json');
            }
        }

        return $response;
    }
	
    /**
     * virtualizationVirtualMachinesUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesUpdateResponse
     */
	public function virtualizationVirtualMachinesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/virtualization/virtual-machines/{id}/', \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableVirtualMachineInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VirtualizationVirtualMachinesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->virtualMachine = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VirtualMachine', 'json');
            }
        }

        return $response;
    }
}