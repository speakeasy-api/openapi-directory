// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ServicesBaggageStorageExceptionEnum - Baggage storage exception.
type ServicesBaggageStorageExceptionEnum string

const (
	ServicesBaggageStorageExceptionEnumExceptionUnspecified ServicesBaggageStorageExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ServicesBaggageStorageExceptionEnumUnderConstruction    ServicesBaggageStorageExceptionEnum = "UNDER_CONSTRUCTION"
	ServicesBaggageStorageExceptionEnumDependentOnSeason    ServicesBaggageStorageExceptionEnum = "DEPENDENT_ON_SEASON"
	ServicesBaggageStorageExceptionEnumDependentOnDayOfWeek ServicesBaggageStorageExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ServicesBaggageStorageExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ServicesBaggageStorageExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServicesBaggageStorageExceptionEnum: %s", s)
	}
}

// ServicesConciergeExceptionEnum - Concierge exception.
type ServicesConciergeExceptionEnum string

const (
	ServicesConciergeExceptionEnumExceptionUnspecified ServicesConciergeExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ServicesConciergeExceptionEnumUnderConstruction    ServicesConciergeExceptionEnum = "UNDER_CONSTRUCTION"
	ServicesConciergeExceptionEnumDependentOnSeason    ServicesConciergeExceptionEnum = "DEPENDENT_ON_SEASON"
	ServicesConciergeExceptionEnumDependentOnDayOfWeek ServicesConciergeExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ServicesConciergeExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ServicesConciergeExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServicesConciergeExceptionEnum: %s", s)
	}
}

// ServicesConvenienceStoreExceptionEnum - Convenience store exception.
type ServicesConvenienceStoreExceptionEnum string

const (
	ServicesConvenienceStoreExceptionEnumExceptionUnspecified ServicesConvenienceStoreExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ServicesConvenienceStoreExceptionEnumUnderConstruction    ServicesConvenienceStoreExceptionEnum = "UNDER_CONSTRUCTION"
	ServicesConvenienceStoreExceptionEnumDependentOnSeason    ServicesConvenienceStoreExceptionEnum = "DEPENDENT_ON_SEASON"
	ServicesConvenienceStoreExceptionEnumDependentOnDayOfWeek ServicesConvenienceStoreExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ServicesConvenienceStoreExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ServicesConvenienceStoreExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServicesConvenienceStoreExceptionEnum: %s", s)
	}
}

// ServicesCurrencyExchangeExceptionEnum - Currency exchange exception.
type ServicesCurrencyExchangeExceptionEnum string

const (
	ServicesCurrencyExchangeExceptionEnumExceptionUnspecified ServicesCurrencyExchangeExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ServicesCurrencyExchangeExceptionEnumUnderConstruction    ServicesCurrencyExchangeExceptionEnum = "UNDER_CONSTRUCTION"
	ServicesCurrencyExchangeExceptionEnumDependentOnSeason    ServicesCurrencyExchangeExceptionEnum = "DEPENDENT_ON_SEASON"
	ServicesCurrencyExchangeExceptionEnumDependentOnDayOfWeek ServicesCurrencyExchangeExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ServicesCurrencyExchangeExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ServicesCurrencyExchangeExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServicesCurrencyExchangeExceptionEnum: %s", s)
	}
}

// ServicesElevatorExceptionEnum - Elevator exception.
type ServicesElevatorExceptionEnum string

const (
	ServicesElevatorExceptionEnumExceptionUnspecified ServicesElevatorExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ServicesElevatorExceptionEnumUnderConstruction    ServicesElevatorExceptionEnum = "UNDER_CONSTRUCTION"
	ServicesElevatorExceptionEnumDependentOnSeason    ServicesElevatorExceptionEnum = "DEPENDENT_ON_SEASON"
	ServicesElevatorExceptionEnumDependentOnDayOfWeek ServicesElevatorExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ServicesElevatorExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ServicesElevatorExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServicesElevatorExceptionEnum: %s", s)
	}
}

// ServicesFrontDeskExceptionEnum - Front desk exception.
type ServicesFrontDeskExceptionEnum string

const (
	ServicesFrontDeskExceptionEnumExceptionUnspecified ServicesFrontDeskExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ServicesFrontDeskExceptionEnumUnderConstruction    ServicesFrontDeskExceptionEnum = "UNDER_CONSTRUCTION"
	ServicesFrontDeskExceptionEnumDependentOnSeason    ServicesFrontDeskExceptionEnum = "DEPENDENT_ON_SEASON"
	ServicesFrontDeskExceptionEnumDependentOnDayOfWeek ServicesFrontDeskExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ServicesFrontDeskExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ServicesFrontDeskExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServicesFrontDeskExceptionEnum: %s", s)
	}
}

// ServicesFullServiceLaundryExceptionEnum - Full service laundry exception.
type ServicesFullServiceLaundryExceptionEnum string

const (
	ServicesFullServiceLaundryExceptionEnumExceptionUnspecified ServicesFullServiceLaundryExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ServicesFullServiceLaundryExceptionEnumUnderConstruction    ServicesFullServiceLaundryExceptionEnum = "UNDER_CONSTRUCTION"
	ServicesFullServiceLaundryExceptionEnumDependentOnSeason    ServicesFullServiceLaundryExceptionEnum = "DEPENDENT_ON_SEASON"
	ServicesFullServiceLaundryExceptionEnumDependentOnDayOfWeek ServicesFullServiceLaundryExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ServicesFullServiceLaundryExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ServicesFullServiceLaundryExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServicesFullServiceLaundryExceptionEnum: %s", s)
	}
}

// ServicesGiftShopExceptionEnum - Gift shop exception.
type ServicesGiftShopExceptionEnum string

const (
	ServicesGiftShopExceptionEnumExceptionUnspecified ServicesGiftShopExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ServicesGiftShopExceptionEnumUnderConstruction    ServicesGiftShopExceptionEnum = "UNDER_CONSTRUCTION"
	ServicesGiftShopExceptionEnumDependentOnSeason    ServicesGiftShopExceptionEnum = "DEPENDENT_ON_SEASON"
	ServicesGiftShopExceptionEnumDependentOnDayOfWeek ServicesGiftShopExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ServicesGiftShopExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ServicesGiftShopExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServicesGiftShopExceptionEnum: %s", s)
	}
}

// ServicesSelfServiceLaundryExceptionEnum - Self service laundry exception.
type ServicesSelfServiceLaundryExceptionEnum string

const (
	ServicesSelfServiceLaundryExceptionEnumExceptionUnspecified ServicesSelfServiceLaundryExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ServicesSelfServiceLaundryExceptionEnumUnderConstruction    ServicesSelfServiceLaundryExceptionEnum = "UNDER_CONSTRUCTION"
	ServicesSelfServiceLaundryExceptionEnumDependentOnSeason    ServicesSelfServiceLaundryExceptionEnum = "DEPENDENT_ON_SEASON"
	ServicesSelfServiceLaundryExceptionEnumDependentOnDayOfWeek ServicesSelfServiceLaundryExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ServicesSelfServiceLaundryExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ServicesSelfServiceLaundryExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServicesSelfServiceLaundryExceptionEnum: %s", s)
	}
}

// ServicesSocialHourExceptionEnum - Social hour exception.
type ServicesSocialHourExceptionEnum string

const (
	ServicesSocialHourExceptionEnumExceptionUnspecified ServicesSocialHourExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ServicesSocialHourExceptionEnumUnderConstruction    ServicesSocialHourExceptionEnum = "UNDER_CONSTRUCTION"
	ServicesSocialHourExceptionEnumDependentOnSeason    ServicesSocialHourExceptionEnum = "DEPENDENT_ON_SEASON"
	ServicesSocialHourExceptionEnumDependentOnDayOfWeek ServicesSocialHourExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ServicesSocialHourExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ServicesSocialHourExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServicesSocialHourExceptionEnum: %s", s)
	}
}

// ServicesTwentyFourHourFrontDeskExceptionEnum - 24hr front desk exception.
type ServicesTwentyFourHourFrontDeskExceptionEnum string

const (
	ServicesTwentyFourHourFrontDeskExceptionEnumExceptionUnspecified ServicesTwentyFourHourFrontDeskExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ServicesTwentyFourHourFrontDeskExceptionEnumUnderConstruction    ServicesTwentyFourHourFrontDeskExceptionEnum = "UNDER_CONSTRUCTION"
	ServicesTwentyFourHourFrontDeskExceptionEnumDependentOnSeason    ServicesTwentyFourHourFrontDeskExceptionEnum = "DEPENDENT_ON_SEASON"
	ServicesTwentyFourHourFrontDeskExceptionEnumDependentOnDayOfWeek ServicesTwentyFourHourFrontDeskExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ServicesTwentyFourHourFrontDeskExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ServicesTwentyFourHourFrontDeskExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServicesTwentyFourHourFrontDeskExceptionEnum: %s", s)
	}
}

// ServicesWakeUpCallsExceptionEnum - Wake up calls exception.
type ServicesWakeUpCallsExceptionEnum string

const (
	ServicesWakeUpCallsExceptionEnumExceptionUnspecified ServicesWakeUpCallsExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ServicesWakeUpCallsExceptionEnumUnderConstruction    ServicesWakeUpCallsExceptionEnum = "UNDER_CONSTRUCTION"
	ServicesWakeUpCallsExceptionEnumDependentOnSeason    ServicesWakeUpCallsExceptionEnum = "DEPENDENT_ON_SEASON"
	ServicesWakeUpCallsExceptionEnumDependentOnDayOfWeek ServicesWakeUpCallsExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ServicesWakeUpCallsExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ServicesWakeUpCallsExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServicesWakeUpCallsExceptionEnum: %s", s)
	}
}

// Services - Conveniences or help provided by the property to facilitate an easier, more comfortable stay.
type Services struct {
	// Baggage storage. A provision for guests to leave their bags at the hotel when they arrive for their stay before the official check-in time. May or may not apply for guests who wish to leave their bags after check-out and before departing the locale. Also known as bag dropoff.
	BaggageStorage *bool `json:"baggageStorage,omitempty"`
	// Baggage storage exception.
	BaggageStorageException *ServicesBaggageStorageExceptionEnum `json:"baggageStorageException,omitempty"`
	// Concierge. Hotel staff member(s) responsible for facilitating an easy, comfortable stay through making reservations for meals, sourcing theater tickets, arranging tours, finding a doctor, making recommendations, and answering questions.
	Concierge *bool `json:"concierge,omitempty"`
	// Concierge exception.
	ConciergeException *ServicesConciergeExceptionEnum `json:"conciergeException,omitempty"`
	// Convenience store. A shop at the hotel primarily selling snacks, drinks, non-prescription medicines, health and beauty aids, magazines and newspapers.
	ConvenienceStore *bool `json:"convenienceStore,omitempty"`
	// Convenience store exception.
	ConvenienceStoreException *ServicesConvenienceStoreExceptionEnum `json:"convenienceStoreException,omitempty"`
	// Currency exchange. A staff member or automated machine tasked with the transaction of providing the native currency of the hotel's locale in exchange for the foreign currency provided by a guest.
	CurrencyExchange *bool `json:"currencyExchange,omitempty"`
	// Currency exchange exception.
	CurrencyExchangeException *ServicesCurrencyExchangeExceptionEnum `json:"currencyExchangeException,omitempty"`
	// Elevator. A passenger elevator that transports guests from one story to another. Also known as lift.
	Elevator *bool `json:"elevator,omitempty"`
	// Elevator exception.
	ElevatorException *ServicesElevatorExceptionEnum `json:"elevatorException,omitempty"`
	// Front desk. A counter or desk in the lobby or the immediate interior of the hotel where a member of the staff greets guests and processes the information related to their stay (including check-in and check-out). May or may not be manned and open 24/7.
	FrontDesk *bool `json:"frontDesk,omitempty"`
	// Front desk exception.
	FrontDeskException *ServicesFrontDeskExceptionEnum `json:"frontDeskException,omitempty"`
	// Full service laundry. Laundry and dry cleaning facilitated and handled by the hotel on behalf of the guest. Does not include the provision for guests to do their own laundry in on-site machines.
	FullServiceLaundry *bool `json:"fullServiceLaundry,omitempty"`
	// Full service laundry exception.
	FullServiceLaundryException *ServicesFullServiceLaundryExceptionEnum `json:"fullServiceLaundryException,omitempty"`
	// Gift shop. An on-site store primarily selling souvenirs, mementos and other gift items. May or may not also sell sundries, magazines and newspapers, clothing, or snacks.
	GiftShop *bool `json:"giftShop,omitempty"`
	// Gift shop exception.
	GiftShopException *ServicesGiftShopExceptionEnum `json:"giftShopException,omitempty"`
	// Languages spoken by at least one staff member.
	LanguagesSpoken *LanguagesSpoken `json:"languagesSpoken,omitempty"`
	// Self service laundry. On-site clothes washers and dryers accessible to guests for the purpose of washing and drying their own clothes. May or may not require payment to use the machines.
	SelfServiceLaundry *bool `json:"selfServiceLaundry,omitempty"`
	// Self service laundry exception.
	SelfServiceLaundryException *ServicesSelfServiceLaundryExceptionEnum `json:"selfServiceLaundryException,omitempty"`
	// Social hour. A reception with complimentary soft drinks, tea, coffee, wine and/or cocktails in the afternoon or evening. Can be hosted by hotel staff or guests may serve themselves. Also known as wine hour. The availability of coffee/tea in the lobby throughout the day does not constitute a social or wine hour.
	SocialHour *bool `json:"socialHour,omitempty"`
	// Social hour exception.
	SocialHourException *ServicesSocialHourExceptionEnum `json:"socialHourException,omitempty"`
	// 24hr front desk. Front desk is staffed 24 hours a day.
	TwentyFourHourFrontDesk *bool `json:"twentyFourHourFrontDesk,omitempty"`
	// 24hr front desk exception.
	TwentyFourHourFrontDeskException *ServicesTwentyFourHourFrontDeskExceptionEnum `json:"twentyFourHourFrontDeskException,omitempty"`
	// Wake up calls. By direction of the guest, a hotel staff member will phone the guest unit at the requested hour. Also known as morning call.
	WakeUpCalls *bool `json:"wakeUpCalls,omitempty"`
	// Wake up calls exception.
	WakeUpCallsException *ServicesWakeUpCallsExceptionEnum `json:"wakeUpCallsException,omitempty"`
}
