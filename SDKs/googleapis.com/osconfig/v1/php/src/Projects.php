<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List inventory data for all VM instances in the specified zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesInventoriesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesInventoriesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesInventoriesListResponse
     */
	public function osconfigProjectsLocationsInstancesInventoriesList(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesInventoriesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesInventoriesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesInventoriesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/inventories', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesInventoriesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesInventoriesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesInventoriesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInventoriesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInventoriesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List OS policy asssignment reports for all Compute Engine VM instances in the specified zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListResponse
     */
	public function osconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsList(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/reports', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOSPolicyAssignmentReportsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOSPolicyAssignmentReportsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List vulnerability reports for all VM instances in the specified zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesVulnerabilityReportsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesVulnerabilityReportsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesVulnerabilityReportsListResponse
     */
	public function osconfigProjectsLocationsInstancesVulnerabilityReportsList(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesVulnerabilityReportsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesVulnerabilityReportsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesVulnerabilityReportsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/vulnerabilityReports', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesVulnerabilityReportsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesVulnerabilityReportsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsInstancesVulnerabilityReportsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVulnerabilityReportsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVulnerabilityReportsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an OS policy assignment. This method also creates the first revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1/projects.locations.osPolicyAssignments.operations/cancel).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsCreateResponse
     */
	public function osconfigProjectsLocationsOsPolicyAssignmentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/osPolicyAssignments', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "osPolicyAssignmentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the OS policy assignments under the parent resource. For each OS policy assignment, the latest revision is returned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListResponse
     */
	public function osconfigProjectsLocationsOsPolicyAssignmentsList(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/osPolicyAssignments', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOSPolicyAssignmentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOSPolicyAssignmentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the OS policy assignment revisions for a given OS policy assignment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsResponse
     */
	public function osconfigProjectsLocationsOsPolicyAssignmentsListRevisions(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:listRevisions', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOSPolicyAssignmentRevisionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOSPolicyAssignmentRevisionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an OS Config patch deployment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsCreateResponse
     */
	public function osconfigProjectsPatchDeploymentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/patchDeployments', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "patchDeploymentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchDeployment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatchDeployment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an OS Config patch deployment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsDeleteResponse
     */
	public function osconfigProjectsPatchDeploymentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a page of OS Config patch deployments.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsListResponse
     */
	public function osconfigProjectsPatchDeploymentsList(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/patchDeployments', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPatchDeploymentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPatchDeploymentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an OS Config patch deployment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPatchResponse
     */
	public function osconfigProjectsPatchDeploymentsPatch(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "patchDeploymentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchDeployment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatchDeployment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change state of patch deployment to "PAUSED". Patch deployment in paused state doesn't generate patch jobs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPauseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPauseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPauseResponse
     */
	public function osconfigProjectsPatchDeploymentsPause(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPauseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPauseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPauseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:pause', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPauseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPauseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsPauseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchDeployment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatchDeployment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change state of patch deployment back to "ACTIVE". Patch deployment in active state continues to generate patch jobs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsResumeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsResumeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsResumeResponse
     */
	public function osconfigProjectsPatchDeploymentsResume(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsResumeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsResumeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsResumeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:resume', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsResumeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsResumeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchDeploymentsResumeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchDeployment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatchDeployment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancel a patch job. The patch job must be active. Canceled patch jobs cannot be restarted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsCancelResponse
     */
	public function osconfigProjectsPatchJobsCancel(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchJob = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatchJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patch VM instances by creating and running a patch job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsExecuteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsExecuteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsExecuteResponse
     */
	public function osconfigProjectsPatchJobsExecute(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsExecuteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsExecuteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsExecuteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/patchJobs:execute', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsExecuteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "executePatchJobRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsExecuteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsExecuteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchJob = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatchJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the patch job. This can be used to track the progress of an ongoing patch job or review the details of completed jobs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsGetResponse
     */
	public function osconfigProjectsPatchJobsGet(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchJob = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatchJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of instance details for a given patch job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsInstanceDetailsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsInstanceDetailsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsInstanceDetailsListResponse
     */
	public function osconfigProjectsPatchJobsInstanceDetailsList(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsInstanceDetailsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsInstanceDetailsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsInstanceDetailsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/instanceDetails', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsInstanceDetailsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsInstanceDetailsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsInstanceDetailsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPatchJobInstanceDetailsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPatchJobInstanceDetailsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of patch jobs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsListResponse
     */
	public function osconfigProjectsPatchJobsList(
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/patchJobs', \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsconfigProjectsPatchJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPatchJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPatchJobsResponse', 'json');
            }
        }

        return $response;
    }
}