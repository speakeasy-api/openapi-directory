/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GameServerClaimStatusEnum } from "./gameserverclaimstatusenum";
import { GameServerUtilizationStatusEnum } from "./gameserverutilizationstatusenum";
import { Expose, Transform } from "class-transformer";

/**
 * <p> <b>This data type is used with the GameLift FleetIQ and game server groups.</b> </p> <p>Properties describing a game server that is running on an instance in a game server group. </p> <p>A game server is created by a successful call to <code>RegisterGameServer</code> and deleted by calling <code>DeregisterGameServer</code>. A game server is claimed to host a game session by calling <code>ClaimGameServer</code>. </p>
 */
export class GameServer extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ClaimStatus" })
  claimStatus?: GameServerClaimStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "ConnectionInfo" })
  connectionInfo?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "GameServerData" })
  gameServerData?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "GameServerGroupArn" })
  gameServerGroupArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "GameServerGroupName" })
  gameServerGroupName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "GameServerId" })
  gameServerId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "InstanceId" })
  instanceId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "LastClaimTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastClaimTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "LastHealthCheckTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastHealthCheckTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "RegistrationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  registrationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "UtilizationStatus" })
  utilizationStatus?: GameServerUtilizationStatusEnum;
}
