/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Answer - An answer of the question.
 */
public class Answer {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ChoiceAnswers")
    public ChoiceAnswer[] choiceAnswers;
    public Answer withChoiceAnswers(ChoiceAnswer[] choiceAnswers) {
        this.choiceAnswers = choiceAnswers;
        return this;
    }
    
    /**
     * List of choices available for a question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Choices")
    public Choice[] choices;
    public Answer withChoices(Choice[] choices) {
        this.choices = choices;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HelpfulResourceDisplayText")
    public String helpfulResourceDisplayText;
    public Answer withHelpfulResourceDisplayText(String helpfulResourceDisplayText) {
        this.helpfulResourceDisplayText = helpfulResourceDisplayText;
        return this;
    }
    
    /**
     * The helpful resource URL for a question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HelpfulResourceUrl")
    public String helpfulResourceUrl;
    public Answer withHelpfulResourceUrl(String helpfulResourceUrl) {
        this.helpfulResourceUrl = helpfulResourceUrl;
        return this;
    }
    
    /**
     * &lt;p&gt;The improvement plan URL for a question.&lt;/p&gt; &lt;p&gt;This value is only available if the question has been answered.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ImprovementPlanUrl")
    public String improvementPlanUrl;
    public Answer withImprovementPlanUrl(String improvementPlanUrl) {
        this.improvementPlanUrl = improvementPlanUrl;
        return this;
    }
    
    /**
     * Defines whether this question is applicable to a lens review.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IsApplicable")
    public Boolean isApplicable;
    public Answer withIsApplicable(Boolean isApplicable) {
        this.isApplicable = isApplicable;
        return this;
    }
    
    /**
     * The notes associated with the workload.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Notes")
    public String notes;
    public Answer withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * &lt;p&gt;The ID used to identify a pillar, for example, &lt;code&gt;security&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;A pillar is identified by its &lt;a&gt;PillarReviewSummary$PillarId&lt;/a&gt;.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PillarId")
    public String pillarId;
    public Answer withPillarId(String pillarId) {
        this.pillarId = pillarId;
        return this;
    }
    
    /**
     * The description of the question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QuestionDescription")
    public String questionDescription;
    public Answer withQuestionDescription(String questionDescription) {
        this.questionDescription = questionDescription;
        return this;
    }
    
    /**
     * The ID of the question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QuestionId")
    public String questionId;
    public Answer withQuestionId(String questionId) {
        this.questionId = questionId;
        return this;
    }
    
    /**
     * The title of the question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QuestionTitle")
    public String questionTitle;
    public Answer withQuestionTitle(String questionTitle) {
        this.questionTitle = questionTitle;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Reason")
    public AnswerReasonEnum reason;
    public Answer withReason(AnswerReasonEnum reason) {
        this.reason = reason;
        return this;
    }
    
    /**
     * The risk for a given workload, lens review, pillar, or question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Risk")
    public RiskEnum risk;
    public Answer withRisk(RiskEnum risk) {
        this.risk = risk;
        return this;
    }
    
    /**
     * &lt;p&gt;List of selected choice IDs in a question answer.&lt;/p&gt; &lt;p&gt;The values entered replace the previously selected choices.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SelectedChoices")
    public String[] selectedChoices;
    public Answer withSelectedChoices(String[] selectedChoices) {
        this.selectedChoices = selectedChoices;
        return this;
    }
    
}
