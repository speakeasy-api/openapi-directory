// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ContactCenterInput - Message describing ContactCenter object Next ID: 14
type ContactCenterInput struct {
	// Message storing info about the first admin user. Next ID: 3
	AdminUser *AdminUser `json:"adminUser,omitempty"`
	// Optional. Whether to enable users to be created in the CCAIP-instance concurrently to having users in Cloud identity
	CcaipManagedUsers *bool `json:"ccaipManagedUsers,omitempty"`
	// Required. Immutable. At least 2 and max 16 char long, must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).
	CustomerDomainPrefix *string `json:"customerDomainPrefix,omitempty"`
	// Required. A user friendly name for the ContactCenter.
	DisplayName *string `json:"displayName,omitempty"`
	// Message storing the instance configuration.
	InstanceConfig *InstanceConfig `json:"instanceConfig,omitempty"`
	// Labels as key value pairs
	Labels map[string]string `json:"labels,omitempty"`
	// name of resource
	Name *string `json:"name,omitempty"`
	// Message storing SAML params to enable Google as IDP.
	SamlParams *SAMLParams `json:"samlParams,omitempty"`
	// Message storing the URIs of the ContactCenter.
	Uris *URIs `json:"uris,omitempty"`
	// Optional. Email address of the first admin user.
	UserEmail *string `json:"userEmail,omitempty"`
}

// ContactCenterStateEnum - Output only. The state of this contact center.
type ContactCenterStateEnum string

const (
	ContactCenterStateEnumStateUnspecified       ContactCenterStateEnum = "STATE_UNSPECIFIED"
	ContactCenterStateEnumStateDeploying         ContactCenterStateEnum = "STATE_DEPLOYING"
	ContactCenterStateEnumStateDeployed          ContactCenterStateEnum = "STATE_DEPLOYED"
	ContactCenterStateEnumStateTerminating       ContactCenterStateEnum = "STATE_TERMINATING"
	ContactCenterStateEnumStateFailed            ContactCenterStateEnum = "STATE_FAILED"
	ContactCenterStateEnumStateTerminatingFailed ContactCenterStateEnum = "STATE_TERMINATING_FAILED"
	ContactCenterStateEnumStateTerminated        ContactCenterStateEnum = "STATE_TERMINATED"
)

func (e *ContactCenterStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "STATE_DEPLOYING":
		fallthrough
	case "STATE_DEPLOYED":
		fallthrough
	case "STATE_TERMINATING":
		fallthrough
	case "STATE_FAILED":
		fallthrough
	case "STATE_TERMINATING_FAILED":
		fallthrough
	case "STATE_TERMINATED":
		*e = ContactCenterStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ContactCenterStateEnum: %s", s)
	}
}

// ContactCenter - Message describing ContactCenter object Next ID: 14
type ContactCenter struct {
	// Message storing info about the first admin user. Next ID: 3
	AdminUser *AdminUser `json:"adminUser,omitempty"`
	// Optional. Whether to enable users to be created in the CCAIP-instance concurrently to having users in Cloud identity
	CcaipManagedUsers *bool `json:"ccaipManagedUsers,omitempty"`
	// Output only. [Output only] Create time stamp
	CreateTime *string `json:"createTime,omitempty"`
	// Required. Immutable. At least 2 and max 16 char long, must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).
	CustomerDomainPrefix *string `json:"customerDomainPrefix,omitempty"`
	// Required. A user friendly name for the ContactCenter.
	DisplayName *string `json:"displayName,omitempty"`
	// Message storing the instance configuration.
	InstanceConfig *InstanceConfig `json:"instanceConfig,omitempty"`
	// Labels as key value pairs
	Labels map[string]string `json:"labels,omitempty"`
	// name of resource
	Name *string `json:"name,omitempty"`
	// Message storing SAML params to enable Google as IDP.
	SamlParams *SAMLParams `json:"samlParams,omitempty"`
	// Output only. The state of this contact center.
	State *ContactCenterStateEnum `json:"state,omitempty"`
	// Output only. [Output only] Update time stamp
	UpdateTime *string `json:"updateTime,omitempty"`
	// Message storing the URIs of the ContactCenter.
	Uris *URIs `json:"uris,omitempty"`
	// Optional. Email address of the first admin user.
	UserEmail *string `json:"userEmail,omitempty"`
}
