// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ReleaseEventSeriesContractCategoryEnum string

const (
	ReleaseEventSeriesContractCategoryEnumUnspecified  ReleaseEventSeriesContractCategoryEnum = "Unspecified"
	ReleaseEventSeriesContractCategoryEnumAlbumRelease ReleaseEventSeriesContractCategoryEnum = "AlbumRelease"
	ReleaseEventSeriesContractCategoryEnumAnniversary  ReleaseEventSeriesContractCategoryEnum = "Anniversary"
	ReleaseEventSeriesContractCategoryEnumClub         ReleaseEventSeriesContractCategoryEnum = "Club"
	ReleaseEventSeriesContractCategoryEnumConcert      ReleaseEventSeriesContractCategoryEnum = "Concert"
	ReleaseEventSeriesContractCategoryEnumContest      ReleaseEventSeriesContractCategoryEnum = "Contest"
	ReleaseEventSeriesContractCategoryEnumConvention   ReleaseEventSeriesContractCategoryEnum = "Convention"
	ReleaseEventSeriesContractCategoryEnumOther        ReleaseEventSeriesContractCategoryEnum = "Other"
)

func (e *ReleaseEventSeriesContractCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unspecified":
		fallthrough
	case "AlbumRelease":
		fallthrough
	case "Anniversary":
		fallthrough
	case "Club":
		fallthrough
	case "Concert":
		fallthrough
	case "Contest":
		fallthrough
	case "Convention":
		fallthrough
	case "Other":
		*e = ReleaseEventSeriesContractCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleaseEventSeriesContractCategoryEnum: %s", s)
	}
}

type ReleaseEventSeriesContractStatusEnum string

const (
	ReleaseEventSeriesContractStatusEnumDraft    ReleaseEventSeriesContractStatusEnum = "Draft"
	ReleaseEventSeriesContractStatusEnumFinished ReleaseEventSeriesContractStatusEnum = "Finished"
	ReleaseEventSeriesContractStatusEnumApproved ReleaseEventSeriesContractStatusEnum = "Approved"
	ReleaseEventSeriesContractStatusEnumLocked   ReleaseEventSeriesContractStatusEnum = "Locked"
)

func (e *ReleaseEventSeriesContractStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Draft":
		fallthrough
	case "Finished":
		fallthrough
	case "Approved":
		fallthrough
	case "Locked":
		*e = ReleaseEventSeriesContractStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleaseEventSeriesContractStatusEnum: %s", s)
	}
}

type ReleaseEventSeriesContract struct {
	AdditionalNames *string                                 `json:"additionalNames,omitempty"`
	Category        *ReleaseEventSeriesContractCategoryEnum `json:"category,omitempty"`
	Deleted         *bool                                   `json:"deleted,omitempty"`
	Description     *string                                 `json:"description,omitempty"`
	ID              *int                                    `json:"id,omitempty"`
	Name            *string                                 `json:"name,omitempty"`
	PictureMime     *string                                 `json:"pictureMime,omitempty"`
	Status          *ReleaseEventSeriesContractStatusEnum   `json:"status,omitempty"`
	URLSlug         *string                                 `json:"urlSlug,omitempty"`
	Version         *int                                    `json:"version,omitempty"`
	WebLinks        []WebLinkContract                       `json:"webLinks,omitempty"`
}
