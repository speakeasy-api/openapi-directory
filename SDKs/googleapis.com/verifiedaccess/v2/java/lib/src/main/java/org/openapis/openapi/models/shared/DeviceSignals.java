/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DeviceSignals - The device signals as reported by Chrome.
 */
public class DeviceSignals {
    /**
     * Value of the AllowScreenLock policy on the device. See https://chromeenterprise.google/policies/?policy=AllowScreenLock for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowScreenLock")
    public Boolean allowScreenLock;

    public DeviceSignals withAllowScreenLock(Boolean allowScreenLock) {
        this.allowScreenLock = allowScreenLock;
        return this;
    }
    
    /**
     * Current version of the Chrome browser which generated this set of signals. Example value: "107.0.5286.0".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("browserVersion")
    public String browserVersion;

    public DeviceSignals withBrowserVersion(String browserVersion) {
        this.browserVersion = browserVersion;
        return this;
    }
    
    /**
     * Whether Chrome's built-in DNS client is used. The OS DNS client is otherwise used. This value may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#BuiltInDnsClientEnabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("builtInDnsClientEnabled")
    public Boolean builtInDnsClientEnabled;

    public DeviceSignals withBuiltInDnsClientEnabled(Boolean builtInDnsClientEnabled) {
        this.builtInDnsClientEnabled = builtInDnsClientEnabled;
        return this;
    }
    
    /**
     * Whether access to the Chrome Remote Desktop application is blocked via a policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chromeRemoteDesktopAppBlocked")
    public Boolean chromeRemoteDesktopAppBlocked;

    public DeviceSignals withChromeRemoteDesktopAppBlocked(Boolean chromeRemoteDesktopAppBlocked) {
        this.chromeRemoteDesktopAppBlocked = chromeRemoteDesktopAppBlocked;
        return this;
    }
    
    /**
     * Properties of the CrowdStrike agent installed on a device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crowdStrikeAgent")
    public CrowdStrikeAgent crowdStrikeAgent;

    public DeviceSignals withCrowdStrikeAgent(CrowdStrikeAgent crowdStrikeAgent) {
        this.crowdStrikeAgent = crowdStrikeAgent;
        return this;
    }
    
    /**
     * Affiliation IDs of the organizations that are affiliated with the organization that is currently managing the device. When the sets of device and profile affiliation IDs overlap, it means that the organizations managing the device and user are affiliated. To learn more about user affiliation, visit https://support.google.com/chrome/a/answer/12801245?ref_topic=9027936.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceAffiliationIds")
    public String[] deviceAffiliationIds;

    public DeviceSignals withDeviceAffiliationIds(String[] deviceAffiliationIds) {
        this.deviceAffiliationIds = deviceAffiliationIds;
        return this;
    }
    
    /**
     * Enrollment domain of the customer which is currently managing the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceEnrollmentDomain")
    public String deviceEnrollmentDomain;

    public DeviceSignals withDeviceEnrollmentDomain(String deviceEnrollmentDomain) {
        this.deviceEnrollmentDomain = deviceEnrollmentDomain;
        return this;
    }
    
    /**
     * The name of the device's manufacturer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceManufacturer")
    public String deviceManufacturer;

    public DeviceSignals withDeviceManufacturer(String deviceManufacturer) {
        this.deviceManufacturer = deviceManufacturer;
        return this;
    }
    
    /**
     * The name of the device's model.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceModel")
    public String deviceModel;

    public DeviceSignals withDeviceModel(String deviceModel) {
        this.deviceModel = deviceModel;
        return this;
    }
    
    /**
     * The encryption state of the disk. On ChromeOS, the main disk is always ENCRYPTED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskEncryption")
    public DeviceSignalsDiskEncryptionEnum diskEncryption;

    public DeviceSignals withDiskEncryption(DeviceSignalsDiskEncryptionEnum diskEncryption) {
        this.diskEncryption = diskEncryption;
        return this;
    }
    
    /**
     * The display name of the device, as defined by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public DeviceSignals withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Hostname of the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostname")
    public String hostname;

    public DeviceSignals withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }
    
    /**
     * International Mobile Equipment Identity (IMEI) of the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imei")
    public String[] imei;

    public DeviceSignals withImei(String[] imei) {
        this.imei = imei;
        return this;
    }
    
    /**
     * MAC addresses of the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("macAddresses")
    public String[] macAddresses;

    public DeviceSignals withMacAddresses(String[] macAddresses) {
        this.macAddresses = macAddresses;
        return this;
    }
    
    /**
     * Mobile Equipment Identifier (MEID) of the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meid")
    public String[] meid;

    public DeviceSignals withMeid(String[] meid) {
        this.meid = meid;
        return this;
    }
    
    /**
     * The type of the Operating System currently running on the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operatingSystem")
    public DeviceSignalsOperatingSystemEnum operatingSystem;

    public DeviceSignals withOperatingSystem(DeviceSignalsOperatingSystemEnum operatingSystem) {
        this.operatingSystem = operatingSystem;
        return this;
    }
    
    /**
     * The state of the OS level firewall. On ChromeOS, the value will always be ENABLED on regular devices and UNKNOWN on devices in developer mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("osFirewall")
    public DeviceSignalsOsFirewallEnum osFirewall;

    public DeviceSignals withOsFirewall(DeviceSignalsOsFirewallEnum osFirewall) {
        this.osFirewall = osFirewall;
        return this;
    }
    
    /**
     * The current version of the Operating System. On Windows and linux, the value will also include the security patch information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("osVersion")
    public String osVersion;

    public DeviceSignals withOsVersion(String osVersion) {
        this.osVersion = osVersion;
        return this;
    }
    
    /**
     * Whether the Password Protection Warning feature is enabled or not. Password protection alerts users when they reuse their protected password on potentially suspicious sites. This setting is controlled by an enterprise policy: https://chromeenterprise.google/policies/#PasswordProtectionWarningTrigger. Note that the policy unset does not have the same effects as having the policy explicitly set to `PASSWORD_PROTECTION_OFF`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passwordProtectionWarningTrigger")
    public DeviceSignalsPasswordProtectionWarningTriggerEnum passwordProtectionWarningTrigger;

    public DeviceSignals withPasswordProtectionWarningTrigger(DeviceSignalsPasswordProtectionWarningTriggerEnum passwordProtectionWarningTrigger) {
        this.passwordProtectionWarningTrigger = passwordProtectionWarningTrigger;
        return this;
    }
    
    /**
     * Affiliation IDs of the organizations that are affiliated with the organization that is currently managing the Chrome Profile\u2019s user or ChromeOS user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileAffiliationIds")
    public String[] profileAffiliationIds;

    public DeviceSignals withProfileAffiliationIds(String[] profileAffiliationIds) {
        this.profileAffiliationIds = profileAffiliationIds;
        return this;
    }
    
    /**
     * Whether Enterprise-grade (i.e. custom) unsafe URL scanning is enabled or not. This setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#EnterpriseRealTimeUrlCheckMode
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("realtimeUrlCheckMode")
    public DeviceSignalsRealtimeUrlCheckModeEnum realtimeUrlCheckMode;

    public DeviceSignals withRealtimeUrlCheckMode(DeviceSignalsRealtimeUrlCheckModeEnum realtimeUrlCheckMode) {
        this.realtimeUrlCheckMode = realtimeUrlCheckMode;
        return this;
    }
    
    /**
     * Safe Browsing Protection Level. That setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#SafeBrowsingProtectionLevel.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("safeBrowsingProtectionLevel")
    public DeviceSignalsSafeBrowsingProtectionLevelEnum safeBrowsingProtectionLevel;

    public DeviceSignals withSafeBrowsingProtectionLevel(DeviceSignalsSafeBrowsingProtectionLevelEnum safeBrowsingProtectionLevel) {
        this.safeBrowsingProtectionLevel = safeBrowsingProtectionLevel;
        return this;
    }
    
    /**
     * The state of the Screen Lock password protection. On ChromeOS, this value will always be ENABLED as there is not way to disable requiring a password or pin when unlocking the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("screenLockSecured")
    public DeviceSignalsScreenLockSecuredEnum screenLockSecured;

    public DeviceSignals withScreenLockSecured(DeviceSignalsScreenLockSecuredEnum screenLockSecured) {
        this.screenLockSecured = screenLockSecured;
        return this;
    }
    
    /**
     * Whether the device's startup software has its Secure Boot feature enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secureBootMode")
    public DeviceSignalsSecureBootModeEnum secureBootMode;

    public DeviceSignals withSecureBootMode(DeviceSignalsSecureBootModeEnum secureBootMode) {
        this.secureBootMode = secureBootMode;
        return this;
    }
    
    /**
     * The serial number of the device. On Windows, this represents the BIOS's serial number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serialNumber")
    public String serialNumber;

    public DeviceSignals withSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }
    
    /**
     * Whether the Site Isolation (a.k.a Site Per Process) setting is enabled. That setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#SitePerProcess
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("siteIsolationEnabled")
    public Boolean siteIsolationEnabled;

    public DeviceSignals withSiteIsolationEnabled(Boolean siteIsolationEnabled) {
        this.siteIsolationEnabled = siteIsolationEnabled;
        return this;
    }
    
    /**
     * List of the addesses of all OS level DNS servers configured in the device's network settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("systemDnsServers")
    public String[] systemDnsServers;

    public DeviceSignals withSystemDnsServers(String[] systemDnsServers) {
        this.systemDnsServers = systemDnsServers;
        return this;
    }
    
    /**
     * Whether Chrome is blocking third-party software injection or not. This setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/?policy=ThirdPartyBlockingEnabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thirdPartyBlockingEnabled")
    public Boolean thirdPartyBlockingEnabled;

    public DeviceSignals withThirdPartyBlockingEnabled(Boolean thirdPartyBlockingEnabled) {
        this.thirdPartyBlockingEnabled = thirdPartyBlockingEnabled;
        return this;
    }
    
    /**
     * Windows domain that the current machine has joined.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("windowsMachineDomain")
    public String windowsMachineDomain;

    public DeviceSignals withWindowsMachineDomain(String windowsMachineDomain) {
        this.windowsMachineDomain = windowsMachineDomain;
        return this;
    }
    
    /**
     * Windows domain for the current OS user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("windowsUserDomain")
    public String windowsUserDomain;

    public DeviceSignals withWindowsUserDomain(String windowsUserDomain) {
        this.windowsUserDomain = windowsUserDomain;
        return this;
    }
    
    public DeviceSignals(){}
}
