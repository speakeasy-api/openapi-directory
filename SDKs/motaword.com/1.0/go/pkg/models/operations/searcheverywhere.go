// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SearchEverywhereIncludeEnum string

const (
	SearchEverywhereIncludeEnumProjects  SearchEverywhereIncludeEnum = "projects"
	SearchEverywhereIncludeEnumDocuments SearchEverywhereIncludeEnum = "documents"
	SearchEverywhereIncludeEnumStrings   SearchEverywhereIncludeEnum = "strings"
)

func (e SearchEverywhereIncludeEnum) ToPointer() *SearchEverywhereIncludeEnum {
	return &e
}

func (e *SearchEverywhereIncludeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "projects":
		fallthrough
	case "documents":
		fallthrough
	case "strings":
		*e = SearchEverywhereIncludeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchEverywhereIncludeEnum: %v", v)
	}
}

type SearchEverywhereRequest struct {
	// Search in these entities. Current oprions are projects, documents, strings. Can be multiple. When not provided, we'll search through all entities.
	Include []SearchEverywhereIncludeEnum `queryParam:"style=form,explode=true,name=include[]"`
	Page    *int64                        `queryParam:"style=form,explode=true,name=page"`
	PerPage *int64                        `queryParam:"style=form,explode=true,name=per_page"`
	// Search query term
	Query string `queryParam:"style=form,explode=true,name=query"`
}

type SearchEverywhereResponse struct {
	ContentType string
	// Search result for multiple entities and paging
	SearchEverywhereResult *shared.SearchEverywhereResult
	StatusCode             int
	RawResponse            *http.Response
}
