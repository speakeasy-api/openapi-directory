"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GroupCountry:
    r"""Provides information about the country that is associated with a group.  May be null."""
    
    abbreviation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('abbreviation'), 'exclude': lambda f: f is None }})
    r"""A 2 letter country code for the country (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 )."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the country."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GroupMembershipQuestionnaire:
    r"""Membership questionnaire data.  Will be null unless the membership status is pending-questions."""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""A message from the group moderators to be displayed above the questions (may be null)."""  
    questions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questions'), 'exclude': lambda f: f is None }})
    r"""The list of questions."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GroupMembership:
    r"""Provides information about the current users' active or pending membership to this group (if any).  Will be null if there is no active or pending membership to this group."""
    
    date_: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The UTC date and time when the membership was last updated."""  
    questionnaire: Optional[GroupMembershipQuestionnaire] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questionnaire'), 'exclude': lambda f: f is None }})
    r"""Membership questionnaire data.  Will be null unless the membership status is pending-questions."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""One of: subscribed, pending, pending-questions"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GroupRegion:
    r"""Provides information about an area within a country that a group is associated with (eg. a state in the US or a province in Canada).  May be null."""
    
    abbreviation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('abbreviation'), 'exclude': lambda f: f is None }})
    r"""A 2 letter abbreviation for the region (is not guaranteed to be globally unique but is unique among all the regions in the country)."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the region."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Group:
    r"""Groups are run by volunteer moderators and provide a way to group activity in a specific location. Because each group is usually run by different people, there can be variations in rules from group to group (eg. who is allowed to join, what is allowed to be posted, how often reposts are allowed)."""
    
    country: Optional[GroupCountry] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Provides information about the country that is associated with a group.  May be null."""  
    group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_id'), 'exclude': lambda f: f is None }})  
    has_questions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_questions'), 'exclude': lambda f: f is None }})
    r"""When true, anyone requesting membership to this group will be required to answer a new membership questionnaire."""  
    homepage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homepage'), 'exclude': lambda f: f is None }})
    r"""A URL to the group homepage."""  
    identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier'), 'exclude': lambda f: f is None }})
    r"""A unique identifier for the group that is used in URLs."""  
    latitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude'), 'exclude': lambda f: f is None }})  
    longitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude'), 'exclude': lambda f: f is None }})  
    member_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('member_count'), 'exclude': lambda f: f is None }})
    r"""The number of members who belong to the group."""  
    membership: Optional[GroupMembership] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('membership'), 'exclude': lambda f: f is None }})
    r"""Provides information about the current users' active or pending membership to this group (if any).  Will be null if there is no active or pending membership to this group."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the group (not guaranteed to be unique)."""  
    open_archives: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('open_archives'), 'exclude': lambda f: f is None }})
    r"""When true, the group posts are viewable by anyone.  When false, the group posts can only be viewed by members of the group."""  
    open_membership: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('open_membership'), 'exclude': lambda f: f is None }})
    r"""When true, the group allows anyone to join.  When false, the group moderators review and approve applicants."""  
    region: Optional[GroupRegion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region'), 'exclude': lambda f: f is None }})
    r"""Provides information about an area within a country that a group is associated with (eg. a state in the US or a province in Canada).  May be null."""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""The timezone that the group is in (eg. America/New_York)."""  
    