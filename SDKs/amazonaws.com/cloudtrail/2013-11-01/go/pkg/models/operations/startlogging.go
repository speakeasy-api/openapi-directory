// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartLoggingXAmzTargetEnum
type StartLoggingXAmzTargetEnum string

const (
	StartLoggingXAmzTargetEnumComAmazonawsCloudtrailV20131101CloudTrail20131101StartLogging StartLoggingXAmzTargetEnum = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StartLogging"
)

func (e *StartLoggingXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StartLogging":
		*e = StartLoggingXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StartLoggingXAmzTargetEnum: %s", s)
	}
}

type StartLoggingHeaders struct {
	XAmzAlgorithm     *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        StartLoggingXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartLoggingRequest struct {
	Headers StartLoggingHeaders
	Request shared.StartLoggingRequest `request:"mediaType=application/json"`
}

type StartLoggingResponse struct {
	// CloudTrailARNInvalidException
	CloudTrailARNInvalidException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InsufficientDependencyServiceAccessPermissionException
	InsufficientDependencyServiceAccessPermissionException interface{}
	// InvalidHomeRegionException
	InvalidHomeRegionException interface{}
	// InvalidTrailNameException
	InvalidTrailNameException interface{}
	// NoManagementAccountSLRExistsException
	NoManagementAccountSLRExistsException interface{}
	// NotOrganizationMasterAccountException
	NotOrganizationMasterAccountException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	// Success
	StartLoggingResponse map[string]interface{}
	StatusCode           int
	RawResponse          *http.Response
	// TrailNotFoundException
	TrailNotFoundException interface{}
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
