/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Operations about message_comment_reactions
 */
export class MessageCommentReactions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete Message Comment Reaction
   *
   * @remarks
   * Delete Message Comment Reaction
   */
  deleteMessageCommentReactionsId(
    req: operations.DeleteMessageCommentReactionsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteMessageCommentReactionsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteMessageCommentReactionsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/message_comment_reactions/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteMessageCommentReactionsIdResponse =
        new operations.DeleteMessageCommentReactionsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * List Message Comment Reactions
   *
   * @remarks
   * List Message Comment Reactions
   */
  getMessageCommentReactions(
    req: operations.GetMessageCommentReactionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMessageCommentReactionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMessageCommentReactionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/message_comment_reactions";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMessageCommentReactionsResponse =
        new operations.GetMessageCommentReactionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.messageCommentReactionEntities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.messageCommentReactionEntities = utils.objectToClass(
              httpRes?.data,
              shared.MessageCommentReactionEntity,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Show Message Comment Reaction
   *
   * @remarks
   * Show Message Comment Reaction
   */
  getMessageCommentReactionsId(
    req: operations.GetMessageCommentReactionsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMessageCommentReactionsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMessageCommentReactionsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/message_comment_reactions/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMessageCommentReactionsIdResponse =
        new operations.GetMessageCommentReactionsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.messageCommentReactionEntity = utils.objectToClass(
              httpRes?.data,
              shared.MessageCommentReactionEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Create Message Comment Reaction
   *
   * @remarks
   * Create Message Comment Reaction
   */
  postMessageCommentReactions(
    req: operations.PostMessageCommentReactionsRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostMessageCommentReactionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostMessageCommentReactionsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/message_comment_reactions";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostMessageCommentReactionsResponse =
        new operations.PostMessageCommentReactionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.messageCommentReactionEntity = utils.objectToClass(
              httpRes?.data,
              shared.MessageCommentReactionEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }
}
