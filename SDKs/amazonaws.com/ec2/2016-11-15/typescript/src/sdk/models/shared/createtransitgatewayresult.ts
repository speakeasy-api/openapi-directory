/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * Indicates whether attachment requests are automatically accepted.
 */
export enum CreateTransitGatewayResultTransitGatewayOptionsAutoAcceptSharedAttachmentsEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * Indicates whether resource attachments are automatically associated with the default association route table.
 */
export enum CreateTransitGatewayResultTransitGatewayOptionsDefaultRouteTableAssociationEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * Indicates whether resource attachments automatically propagate routes to the default propagation route table.
 */
export enum CreateTransitGatewayResultTransitGatewayOptionsDefaultRouteTablePropagationEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * Indicates whether DNS support is enabled.
 */
export enum CreateTransitGatewayResultTransitGatewayOptionsDnsSupportEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * Indicates whether multicast is enabled on the transit gateway
 */
export enum CreateTransitGatewayResultTransitGatewayOptionsMulticastSupportEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * Indicates whether Equal Cost Multipath Protocol support is enabled.
 */
export enum CreateTransitGatewayResultTransitGatewayOptionsVpnEcmpSupportEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * The transit gateway options.
 */
export class CreateTransitGatewayResultTransitGatewayOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  amazonSideAsn?: number;

  @SpeakeasyMetadata()
  associationDefaultRouteTableId?: string;

  @SpeakeasyMetadata()
  autoAcceptSharedAttachments?: CreateTransitGatewayResultTransitGatewayOptionsAutoAcceptSharedAttachmentsEnum;

  @SpeakeasyMetadata()
  defaultRouteTableAssociation?: CreateTransitGatewayResultTransitGatewayOptionsDefaultRouteTableAssociationEnum;

  @SpeakeasyMetadata()
  defaultRouteTablePropagation?: CreateTransitGatewayResultTransitGatewayOptionsDefaultRouteTablePropagationEnum;

  @SpeakeasyMetadata()
  dnsSupport?: CreateTransitGatewayResultTransitGatewayOptionsDnsSupportEnum;

  @SpeakeasyMetadata()
  multicastSupport?: CreateTransitGatewayResultTransitGatewayOptionsMulticastSupportEnum;

  @SpeakeasyMetadata()
  propagationDefaultRouteTableId?: string;

  @SpeakeasyMetadata()
  transitGatewayCidrBlocks?: string[];

  @SpeakeasyMetadata()
  vpnEcmpSupport?: CreateTransitGatewayResultTransitGatewayOptionsVpnEcmpSupportEnum;
}

/**
 * The state of the transit gateway.
 */
export enum CreateTransitGatewayResultTransitGatewayStateEnum {
  Pending = "pending",
  Available = "available",
  Modifying = "modifying",
  Deleting = "deleting",
  Deleted = "deleted",
}

/**
 * Describes a tag.
 */
export class CreateTransitGatewayResultTransitGatewayTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Information about the transit gateway.
 */
export class CreateTransitGatewayResultTransitGateway extends SpeakeasyBase {
  @SpeakeasyMetadata()
  creationTime?: Date;

  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  options?: CreateTransitGatewayResultTransitGatewayOptions;

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata()
  state?: CreateTransitGatewayResultTransitGatewayStateEnum;

  @SpeakeasyMetadata({ elemType: CreateTransitGatewayResultTransitGatewayTags })
  tags?: CreateTransitGatewayResultTransitGatewayTags[];

  @SpeakeasyMetadata()
  transitGatewayArn?: string;

  @SpeakeasyMetadata()
  transitGatewayId?: string;
}

/**
 * Success
 */
export class CreateTransitGatewayResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  transitGateway?: CreateTransitGatewayResultTransitGateway;
}
