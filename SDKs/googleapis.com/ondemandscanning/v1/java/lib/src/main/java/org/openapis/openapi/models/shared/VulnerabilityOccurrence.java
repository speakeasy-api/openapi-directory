/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VulnerabilityOccurrence - An occurrence of a severity vulnerability on a resource.
 */
public class VulnerabilityOccurrence {
    /**
     * Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cvssScore")
    public Float cvssScore;
    public VulnerabilityOccurrence withCvssScore(Float cvssScore) {
        this.cvssScore = cvssScore;
        return this;
    }
    
    /**
     * Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cvssV2")
    public Cvss cvssV2;
    public VulnerabilityOccurrence withCvssV2(Cvss cvssV2) {
        this.cvssV2 = cvssV2;
        return this;
    }
    
    /**
     * Output only. CVSS version used to populate cvss_score and severity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cvssVersion")
    public VulnerabilityOccurrenceCvssVersionEnum cvssVersion;
    public VulnerabilityOccurrence withCvssVersion(VulnerabilityOccurrenceCvssVersionEnum cvssVersion) {
        this.cvssVersion = cvssVersion;
        return this;
    }
    
    /**
     * Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cvssv3")
    public Cvss cvssv3;
    public VulnerabilityOccurrence withCvssv3(Cvss cvssv3) {
        this.cvssv3 = cvssv3;
        return this;
    }
    
    /**
     * The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSeverity")
    public VulnerabilityOccurrenceEffectiveSeverityEnum effectiveSeverity;
    public VulnerabilityOccurrence withEffectiveSeverity(VulnerabilityOccurrenceEffectiveSeverityEnum effectiveSeverity) {
        this.effectiveSeverity = effectiveSeverity;
        return this;
    }
    
    /**
     * Output only. Whether at least one of the affected packages has a fix available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fixAvailable")
    public Boolean fixAvailable;
    public VulnerabilityOccurrence withFixAvailable(Boolean fixAvailable) {
        this.fixAvailable = fixAvailable;
        return this;
    }
    
    /**
     * Output only. A detailed description of this vulnerability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longDescription")
    public String longDescription;
    public VulnerabilityOccurrence withLongDescription(String longDescription) {
        this.longDescription = longDescription;
        return this;
    }
    
    /**
     * Required. The set of affected locations and their fixes (if available) within the associated resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("packageIssue")
    public PackageIssue[] packageIssue;
    public VulnerabilityOccurrence withPackageIssue(PackageIssue[] packageIssue) {
        this.packageIssue = packageIssue;
        return this;
    }
    
    /**
     * Output only. URLs related to this vulnerability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relatedUrls")
    public RelatedUrl[] relatedUrls;
    public VulnerabilityOccurrence withRelatedUrls(RelatedUrl[] relatedUrls) {
        this.relatedUrls = relatedUrls;
        return this;
    }
    
    /**
     * Output only. The note provider assigned severity of this vulnerability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("severity")
    public VulnerabilityOccurrenceSeverityEnum severity;
    public VulnerabilityOccurrence withSeverity(VulnerabilityOccurrenceSeverityEnum severity) {
        this.severity = severity;
        return this;
    }
    
    /**
     * Output only. A one sentence description of this vulnerability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortDescription")
    public String shortDescription;
    public VulnerabilityOccurrence withShortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
        return this;
    }
    
    /**
     * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public VulnerabilityOccurrence withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vexAssessment")
    public VexAssessment vexAssessment;
    public VulnerabilityOccurrence withVexAssessment(VexAssessment vexAssessment) {
        this.vexAssessment = vexAssessment;
        return this;
    }
    
}
