"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NHItemAvailability:
    
    from_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'exclude': lambda f: f is None }})  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NHItemBuy:
    
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})  
    
class NHItemMaterialTypeEnum(str, Enum):
    r"""(WIP)"""
    UNKNOWN = ''
    BAMBOO = 'Bamboo'
    MUSHROOM = 'Mushroom'
    TRASH = 'Trash'
    WOOD = 'Wood'
    ORE = 'Ore'
    SNOWFLAKE = 'Snowflake'
    TREE = 'Tree'
    ORNAMENT = 'Ornament'
    FRUIT = 'Fruit'
    UNDERWATER = 'Underwater'
    OTHER = 'Other'
    LEAF = 'Leaf'
    SHELL = 'Shell'
    FLOWER = 'Flower'
    STAR_FRAGMENT = 'Star Fragment'
    FEATHER = 'Feather'
    EGG = 'Egg'
    PLANT = 'Plant'

class NHItemPlantTypeEnum(str, Enum):
    r"""(WIP)"""
    UNKNOWN = ''
    PUMPKIN = 'Pumpkin'
    FLOWER = 'Flower'
    BUSH = 'Bush'
    TREE = 'Tree'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NHItem:
    r"""A JSON object describing the item."""
    
    availability: Optional[list[NHItemAvailability]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availability'), 'exclude': lambda f: f is None }})
    r"""Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details."""  
    buy: Optional[list[NHItemBuy]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buy'), 'exclude': lambda f: f is None }})
    r"""An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc.."""  
    edible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('edible'), 'exclude': lambda f: f is None }})
    r"""Whether the item is edible or not."""  
    hha_base: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hha_base'), 'exclude': lambda f: f is None }})
    r"""The base value that the item provides to a player's Happy Home Academy score when placed in their home."""  
    image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_url'), 'exclude': lambda f: f is None }})
    r"""Image of the interior. dodo.ac is Nookipedia's CDN server."""  
    is_fence: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_fence'), 'exclude': lambda f: f is None }})
    r"""Whether or not the item is a fence or not."""  
    material_name_sort: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('material_name_sort'), 'exclude': lambda f: f is None }})
    r"""(WIP)"""  
    material_seasonality: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('material_seasonality'), 'exclude': lambda f: f is None }})
    r"""(WIP)"""  
    material_seasonality_sort: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('material_seasonality_sort'), 'exclude': lambda f: f is None }})
    r"""(WIP)"""  
    material_sort: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('material_sort'), 'exclude': lambda f: f is None }})
    r"""(WIP)"""  
    material_type: Optional[NHItemMaterialTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('material_type'), 'exclude': lambda f: f is None }})
    r"""(WIP)"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the item."""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Any additional miscellaneous information about the item, such as a name change from a past update."""  
    plant_type: Optional[NHItemPlantTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plant_type'), 'exclude': lambda f: f is None }})
    r"""(WIP)"""  
    sell: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sell'), 'exclude': lambda f: f is None }})
    r"""The number of bells the item can be sold to Nook's store for."""  
    stack: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stack'), 'exclude': lambda f: f is None }})
    r"""How much the item can stack up to in a single inventory slot."""  
    unlocked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unlocked'), 'exclude': lambda f: f is None }})
    r"""Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Link to the respective Nookipedia article."""  
    version_added: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version_added'), 'exclude': lambda f: f is None }})
    r"""The version of *New Horizons* that the item was added. Items that were included at the game's launch have version \\"1.0.0\\"."""  
    