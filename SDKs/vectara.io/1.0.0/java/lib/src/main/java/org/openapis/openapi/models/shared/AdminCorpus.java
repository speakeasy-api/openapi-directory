/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class AdminCorpus {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customDimensions")
    public AdminDimension[] customDimensions;
    public AdminCorpus withCustomDimensions(AdminDimension[] customDimensions) {
        this.customDimensions = customDimensions;
        return this;
    }
    
    /**
     * A description for the corpus.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public AdminCorpus withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The time at which the corpus was provisioned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dtProvision")
    public String dtProvision;
    public AdminCorpus withDtProvision(String dtProvision) {
        this.dtProvision = dtProvision;
        return this;
    }
    
    /**
     * Whether the corpus is enabled for use or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;
    public AdminCorpus withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * This is an advanced setting for changing the underlying model type.  The
     * default value is "1", which is Vectara's high-performing global model.
     * Underlying models may be swapped for some paying customers by contacting
     * our support team.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encoderId")
    public String encoderId;
    public AdminCorpus withEncoderId(String encoderId) {
        this.encoderId = encoderId;
        return this;
    }
    
    /**
     * Encryption is on by default and cannot be turned off.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encrypted")
    public Boolean encrypted;
    public AdminCorpus withEncrypted(Boolean encrypted) {
        this.encrypted = encrypted;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filterAttributes")
    public AdminFilterAttribute[] filterAttributes;
    public AdminCorpus withFilterAttributes(AdminFilterAttribute[] filterAttributes) {
        this.filterAttributes = filterAttributes;
        return this;
    }
    
    /**
     * The Corpus ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public AdminCorpus withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * An optional maximum size of the metadata that each document can contain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadataMaxBytes")
    public Long metadataMaxBytes;
    public AdminCorpus withMetadataMaxBytes(Long metadataMaxBytes) {
        this.metadataMaxBytes = metadataMaxBytes;
        return this;
    }
    
    /**
     * The name of the corpus.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public AdminCorpus withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The default query encoder is designed for normal question-answering types
     * of queries when the text contains the answer.  Swapping the index encoder
     * is generally rare, but can be used to help directly match questions to
     * questions.  This can be useful if you have a FAQ dataset and you want to
     * directly match the user question to the question in the FAQ.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("swapIenc")
    public Boolean swapIenc;
    public AdminCorpus withSwapIenc(Boolean swapIenc) {
        this.swapIenc = swapIenc;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("swapQenc")
    public Boolean swapQenc;
    public AdminCorpus withSwapQenc(Boolean swapQenc) {
        this.swapQenc = swapQenc;
        return this;
    }
    
    /**
     * When a corpus is "textless", Vectara does not store the original text.
     * Instead, Vectara converts the text to vectors and only retains metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("textless")
    public Boolean textless;
    public AdminCorpus withTextless(Boolean textless) {
        this.textless = textless;
        return this;
    }
    
}
