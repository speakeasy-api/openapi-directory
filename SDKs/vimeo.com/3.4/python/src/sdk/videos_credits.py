"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class VideosCredits:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_video_credit(self, request: operations.AddVideoCreditRequest) -> operations.AddVideoCreditResponse:
        r"""Credit a user in a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideoCreditRequest, base_url, '/videos/{video_id}/credits', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideoCreditResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.credit+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Credit])
                res.credit = out
        elif http_res.status_code in [400, 403]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.credit+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def add_video_credit_alt1(self, request: operations.AddVideoCreditAlt1Request) -> operations.AddVideoCreditAlt1Response:
        r"""Credit a user in a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideoCreditAlt1Request, base_url, '/channels/{channel_id}/videos/{video_id}/credits', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideoCreditAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.credit+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Credit])
                res.credit = out
        elif http_res.status_code in [400, 403]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.credit+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_video_credit(self, request: operations.DeleteVideoCreditRequest, security: operations.DeleteVideoCreditSecurity) -> operations.DeleteVideoCreditResponse:
        r"""Delete a credit for a user in a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVideoCreditRequest, base_url, '/videos/{video_id}/credits/{credit_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVideoCreditResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def edit_video_credit(self, request: operations.EditVideoCreditRequest, security: operations.EditVideoCreditSecurity) -> operations.EditVideoCreditResponse:
        r"""Edit a credit for a user in a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditVideoCreditRequest, base_url, '/videos/{video_id}/credits/{credit_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditVideoCreditResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.credit+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Credit])
                res.credit = out
        elif http_res.status_code in [400, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.credit+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_video_credit(self, request: operations.GetVideoCreditRequest) -> operations.GetVideoCreditResponse:
        r"""Get a specific credited user in a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVideoCreditRequest, base_url, '/videos/{video_id}/credits/{credit_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVideoCreditResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.credit+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Credit])
                res.credit = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.credit+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_video_credits(self, request: operations.GetVideoCreditsRequest) -> operations.GetVideoCreditsResponse:
        r"""Get all the credited users in a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVideoCreditsRequest, base_url, '/videos/{video_id}/credits', request)
        
        query_params = utils.get_query_params(operations.GetVideoCreditsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVideoCreditsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.credit+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Credit]])
                res.credits = out

        return res

    def get_video_credits_alt1(self, request: operations.GetVideoCreditsAlt1Request) -> operations.GetVideoCreditsAlt1Response:
        r"""Get all the credited users in a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVideoCreditsAlt1Request, base_url, '/channels/{channel_id}/videos/{video_id}/credits', request)
        
        query_params = utils.get_query_params(operations.GetVideoCreditsAlt1Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVideoCreditsAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.credit+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Credit]])
                res.credits = out

        return res

    