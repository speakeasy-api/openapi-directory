// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type PlaydeveloperreportingVitalsErrorsReportsSearchSecurity struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type PlaydeveloperreportingVitalsErrorsReportsSearchPathParams struct {
	// Required. Parent resource of the reports, indicating the application for which they were received. Format: apps/{app}
	Parent string `pathParam:"style=simple,explode=false,name=parent"`
}

type PlaydeveloperreportingVitalsErrorsReportsSearchQueryParams struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// A selection predicate to retrieve only a subset of the reports. For filtering basics, please check [AIP-160](https://google.aip.dev/160). ** Supported field names:** * `apiLevel`: Matches error reports that occurred in the requested Android versions (specified as the numeric API level) only. Example: `apiLevel = 28 OR apiLevel = 29`. * `versionCode`: Matches error reports that occurred in the requested app version codes only. Example: `versionCode = 123 OR versionCode = 456`. * `deviceModel`: Matches error reports that occurred in the requested devices. Example: `deviceModel = "walleye" OR deviceModel = "marlin"`. * `deviceType`: Matches error reports that occurred in the requested device types. Example: `deviceType = "PHONE"`. * `errorIssueType`: Matches error reports of the requested types only. Valid candidates: `JAVA_CRASH`, `NATIVE_CRASH`, `ANR`. Example: `errorIssueType = JAVA_CRASH OR errorIssueType = NATIVE_CRASH`. * `errorIssueId`: Matches error reports belonging to the requested error issue ids only. Example: `errorIssueId = 1234 OR errorIssueId = 4567`. * `appProcessState`: Matches error reports on the process state of an app, indicating whether an app runs in the foreground (user-visible) or background. Valid candidates: `FOREGROUND`, `BACKGROUND`. Example: `appProcessState = FOREGROUND`. * `isUserPerceived`: Matches error reports that are user-perceived. It is not accompanied by any operators. Example: `isUserPerceived`. ** Supported operators:** * Comparison operators: The only supported comparison operator is equality. The filtered field must appear on the left hand side of the comparison. * Logical Operators: Logical operators `AND` and `OR` can be used to build complex filters following a conjunctive normal form (CNF), i.e., conjunctions of disjunctions. The `OR` operator takes precedence over `AND` so the use of parenthesis is not necessary when building CNF. The `OR` operator is only supported to build disjunctions that apply to the same field, e.g., `versionCode = 123 OR versionCode = ANR`. The filter expression `versionCode = 123 OR errorIssueType = ANR` is not valid. ** Examples ** Some valid filtering expressions: * `versionCode = 123 AND errorIssueType = ANR` * `versionCode = 123 AND errorIssueType = OR errorIssueType = CRASH` * `versionCode = 123 AND (errorIssueType = OR errorIssueType = CRASH)`
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
	// Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.
	IntervalEndTimeDay *int64 `queryParam:"style=form,explode=true,name=interval.endTime.day"`
	// Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	IntervalEndTimeHours *int64 `queryParam:"style=form,explode=true,name=interval.endTime.hours"`
	// Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.
	IntervalEndTimeMinutes *int64 `queryParam:"style=form,explode=true,name=interval.endTime.minutes"`
	// Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.
	IntervalEndTimeMonth *int64 `queryParam:"style=form,explode=true,name=interval.endTime.month"`
	// Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.
	IntervalEndTimeNanos *int64 `queryParam:"style=form,explode=true,name=interval.endTime.nanos"`
	// Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.
	IntervalEndTimeSeconds *int64 `queryParam:"style=form,explode=true,name=interval.endTime.seconds"`
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	IntervalEndTimeTimeZoneID *string `queryParam:"style=form,explode=true,name=interval.endTime.timeZone.id"`
	// Optional. IANA Time Zone Database version number, e.g. "2019a".
	IntervalEndTimeTimeZoneVersion *string `queryParam:"style=form,explode=true,name=interval.endTime.timeZone.version"`
	// UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.
	IntervalEndTimeUtcOffset *string `queryParam:"style=form,explode=true,name=interval.endTime.utcOffset"`
	// Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.
	IntervalEndTimeYear *int64 `queryParam:"style=form,explode=true,name=interval.endTime.year"`
	// Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.
	IntervalStartTimeDay *int64 `queryParam:"style=form,explode=true,name=interval.startTime.day"`
	// Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	IntervalStartTimeHours *int64 `queryParam:"style=form,explode=true,name=interval.startTime.hours"`
	// Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.
	IntervalStartTimeMinutes *int64 `queryParam:"style=form,explode=true,name=interval.startTime.minutes"`
	// Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.
	IntervalStartTimeMonth *int64 `queryParam:"style=form,explode=true,name=interval.startTime.month"`
	// Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.
	IntervalStartTimeNanos *int64 `queryParam:"style=form,explode=true,name=interval.startTime.nanos"`
	// Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.
	IntervalStartTimeSeconds *int64 `queryParam:"style=form,explode=true,name=interval.startTime.seconds"`
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	IntervalStartTimeTimeZoneID *string `queryParam:"style=form,explode=true,name=interval.startTime.timeZone.id"`
	// Optional. IANA Time Zone Database version number, e.g. "2019a".
	IntervalStartTimeTimeZoneVersion *string `queryParam:"style=form,explode=true,name=interval.startTime.timeZone.version"`
	// UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.
	IntervalStartTimeUtcOffset *string `queryParam:"style=form,explode=true,name=interval.startTime.utcOffset"`
	// Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.
	IntervalStartTimeYear *int64 `queryParam:"style=form,explode=true,name=interval.startTime.year"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// The maximum number of reports to return. The service may return fewer than this value. If unspecified, at most 50 reports will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize *int64 `queryParam:"style=form,explode=true,name=pageSize"`
	// A page token, received from a previous `SearchErrorReports` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `SearchErrorReports` must match the call that provided the page token.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type PlaydeveloperreportingVitalsErrorsReportsSearchRequest struct {
	PathParams  PlaydeveloperreportingVitalsErrorsReportsSearchPathParams
	QueryParams PlaydeveloperreportingVitalsErrorsReportsSearchQueryParams
	Security    PlaydeveloperreportingVitalsErrorsReportsSearchSecurity
}

type PlaydeveloperreportingVitalsErrorsReportsSearchResponse struct {
	ContentType string
	// Successful response
	GooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse *shared.GooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse
	StatusCode                                                     int
	RawResponse                                                    *http.Response
}
