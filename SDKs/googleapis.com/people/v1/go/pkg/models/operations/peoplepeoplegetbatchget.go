// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PeoplePeopleGetBatchGetSecurityOption1 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type PeoplePeopleGetBatchGetSecurityOption10 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type PeoplePeopleGetBatchGetSecurityOption11 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type PeoplePeopleGetBatchGetSecurityOption2 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type PeoplePeopleGetBatchGetSecurityOption3 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type PeoplePeopleGetBatchGetSecurityOption4 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type PeoplePeopleGetBatchGetSecurityOption5 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type PeoplePeopleGetBatchGetSecurityOption6 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type PeoplePeopleGetBatchGetSecurityOption7 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type PeoplePeopleGetBatchGetSecurityOption8 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type PeoplePeopleGetBatchGetSecurityOption9 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type PeoplePeopleGetBatchGetSecurity struct {
	Option1  *PeoplePeopleGetBatchGetSecurityOption1  `security:"option"`
	Option10 *PeoplePeopleGetBatchGetSecurityOption10 `security:"option"`
	Option11 *PeoplePeopleGetBatchGetSecurityOption11 `security:"option"`
	Option2  *PeoplePeopleGetBatchGetSecurityOption2  `security:"option"`
	Option3  *PeoplePeopleGetBatchGetSecurityOption3  `security:"option"`
	Option4  *PeoplePeopleGetBatchGetSecurityOption4  `security:"option"`
	Option5  *PeoplePeopleGetBatchGetSecurityOption5  `security:"option"`
	Option6  *PeoplePeopleGetBatchGetSecurityOption6  `security:"option"`
	Option7  *PeoplePeopleGetBatchGetSecurityOption7  `security:"option"`
	Option8  *PeoplePeopleGetBatchGetSecurityOption8  `security:"option"`
	Option9  *PeoplePeopleGetBatchGetSecurityOption9  `security:"option"`
}

type PeoplePeopleGetBatchGetSourcesEnum string

const (
	PeoplePeopleGetBatchGetSourcesEnumReadSourceTypeUnspecified   PeoplePeopleGetBatchGetSourcesEnum = "READ_SOURCE_TYPE_UNSPECIFIED"
	PeoplePeopleGetBatchGetSourcesEnumReadSourceTypeProfile       PeoplePeopleGetBatchGetSourcesEnum = "READ_SOURCE_TYPE_PROFILE"
	PeoplePeopleGetBatchGetSourcesEnumReadSourceTypeContact       PeoplePeopleGetBatchGetSourcesEnum = "READ_SOURCE_TYPE_CONTACT"
	PeoplePeopleGetBatchGetSourcesEnumReadSourceTypeDomainContact PeoplePeopleGetBatchGetSourcesEnum = "READ_SOURCE_TYPE_DOMAIN_CONTACT"
)

func (e *PeoplePeopleGetBatchGetSourcesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "READ_SOURCE_TYPE_UNSPECIFIED":
		fallthrough
	case "READ_SOURCE_TYPE_PROFILE":
		fallthrough
	case "READ_SOURCE_TYPE_CONTACT":
		fallthrough
	case "READ_SOURCE_TYPE_DOMAIN_CONTACT":
		*e = PeoplePeopleGetBatchGetSourcesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PeoplePeopleGetBatchGetSourcesEnum: %s", s)
	}
}

type PeoplePeopleGetBatchGetQueryParams struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined
	PersonFields *string `queryParam:"style=form,explode=true,name=personFields"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Required. Comma-separated list of person fields to be included in the response. Each path should start with `person.`: for example, `person.names` or `person.photos`.
	RequestMaskIncludeField *string `queryParam:"style=form,explode=true,name=requestMask.includeField"`
	// Required. The resource names of the people to provide information about. It's repeatable. The URL query parameter should be resourceNames=<name1>&resourceNames=<name2>&... - To get information about the authenticated user, specify `people/me`. - To get information about a google account, specify `people/{account_id}`. - To get information about a contact, specify the resource name that identifies the contact as returned by `people.connections.list`. There is a maximum of 200 resource names.
	ResourceNames []string `queryParam:"style=form,explode=true,name=resourceNames"`
	// Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
	Sources []PeoplePeopleGetBatchGetSourcesEnum `queryParam:"style=form,explode=true,name=sources"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type PeoplePeopleGetBatchGetRequest struct {
	QueryParams PeoplePeopleGetBatchGetQueryParams
	Security    PeoplePeopleGetBatchGetSecurity
}

type PeoplePeopleGetBatchGetResponse struct {
	ContentType string
	// Successful response
	GetPeopleResponse *shared.GetPeopleResponse
	StatusCode        int
	RawResponse       *http.Response
}
