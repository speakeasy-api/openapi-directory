// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TransferInstrumentTypeEnum - The type of transfer instrument.
//
// Possible value: **bankAccount**.
type TransferInstrumentTypeEnum string

const (
	TransferInstrumentTypeEnumBankAccount     TransferInstrumentTypeEnum = "bankAccount"
	TransferInstrumentTypeEnumRecurringDetail TransferInstrumentTypeEnum = "recurringDetail"
)

func (e *TransferInstrumentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bankAccount":
		fallthrough
	case "recurringDetail":
		*e = TransferInstrumentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferInstrumentTypeEnum: %s", s)
	}
}

// TransferInstrument - OK - the request has succeeded.
type TransferInstrument struct {
	BankAccount BankAccountInfo `json:"bankAccount"`
	// List of capabilities for this supporting entity.
	Capabilities map[string]SupportingEntityCapability `json:"capabilities,omitempty"`
	// List of documents uploaded for the transfer instrument.
	DocumentDetails []DocumentReference `json:"documentDetails,omitempty"`
	// The unique identifier of the transfer instrument.
	ID string `json:"id"`
	// The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) that owns the transfer instrument.
	LegalEntityID string `json:"legalEntityId"`
	// List of the verification errors from capabilities for this supporting entity.
	Problems []CapabilityProblem `json:"problems,omitempty"`
	// The type of transfer instrument.
	//
	// Possible value: **bankAccount**.
	Type TransferInstrumentTypeEnum `json:"type"`
}
