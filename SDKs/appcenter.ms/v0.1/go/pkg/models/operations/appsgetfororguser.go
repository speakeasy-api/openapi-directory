// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AppsGetForOrgUserSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type AppsGetForOrgUserPathParams struct {
	// The organization's name
	OrgName string `pathParam:"style=simple,explode=false,name=org_name"`
	// The slug name of the user
	UserName string `pathParam:"style=simple,explode=false,name=user_name"`
}

type AppsGetForOrgUserRequest struct {
	PathParams AppsGetForOrgUserPathParams
	Security   AppsGetForOrgUserSecurity
}

type AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnum string

const (
	AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnumBadRequest          AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnumConflict            AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnumNotAcceptable       AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnumNotFound            AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnumInternalServerError AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnumUnauthorized        AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnumTooManyRequests     AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type AppsGetForOrgUserDefaultApplicationJSONError struct {
	Code    AppsGetForOrgUserDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                               `json:"message"`
}

// AppsGetForOrgUserDefaultApplicationJSON - Error
type AppsGetForOrgUserDefaultApplicationJSON struct {
	Error AppsGetForOrgUserDefaultApplicationJSONError `json:"error"`
}

type AppsGetForOrgUser200ApplicationJSONAzureSubscription struct {
	// If the subscription can be used for billing
	IsBillable *bool `json:"is_billable,omitempty"`
	// If the subscription is used for billing
	IsBilling *bool `json:"is_billing,omitempty"`
	// If the subscription is internal Microsoft subscription
	IsMicrosoftInternal *bool `json:"is_microsoft_internal,omitempty"`
	// The azure subscription id
	SubscriptionID string `json:"subscription_id"`
	// The name of the azure subscription
	SubscriptionName string `json:"subscription_name"`
	// The tenant id of the azure subscription belongs to
	TenantID string `json:"tenant_id"`
}

type AppsGetForOrgUser200ApplicationJSONMemberPermissionsEnum string

const (
	AppsGetForOrgUser200ApplicationJSONMemberPermissionsEnumManager   AppsGetForOrgUser200ApplicationJSONMemberPermissionsEnum = "manager"
	AppsGetForOrgUser200ApplicationJSONMemberPermissionsEnumDeveloper AppsGetForOrgUser200ApplicationJSONMemberPermissionsEnum = "developer"
	AppsGetForOrgUser200ApplicationJSONMemberPermissionsEnumViewer    AppsGetForOrgUser200ApplicationJSONMemberPermissionsEnum = "viewer"
	AppsGetForOrgUser200ApplicationJSONMemberPermissionsEnumTester    AppsGetForOrgUser200ApplicationJSONMemberPermissionsEnum = "tester"
)

func (e *AppsGetForOrgUser200ApplicationJSONMemberPermissionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = AppsGetForOrgUser200ApplicationJSONMemberPermissionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsGetForOrgUser200ApplicationJSONMemberPermissionsEnum: %s", s)
	}
}

// AppsGetForOrgUser200ApplicationJSONOriginEnum - The creation origin of this app
type AppsGetForOrgUser200ApplicationJSONOriginEnum string

const (
	AppsGetForOrgUser200ApplicationJSONOriginEnumAppcenter AppsGetForOrgUser200ApplicationJSONOriginEnum = "appcenter"
	AppsGetForOrgUser200ApplicationJSONOriginEnumHockeyapp AppsGetForOrgUser200ApplicationJSONOriginEnum = "hockeyapp"
	AppsGetForOrgUser200ApplicationJSONOriginEnumCodepush  AppsGetForOrgUser200ApplicationJSONOriginEnum = "codepush"
)

func (e *AppsGetForOrgUser200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = AppsGetForOrgUser200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsGetForOrgUser200ApplicationJSONOriginEnum: %s", s)
	}
}

// AppsGetForOrgUser200ApplicationJSONOsEnum - The OS the app will be running on
type AppsGetForOrgUser200ApplicationJSONOsEnum string

const (
	AppsGetForOrgUser200ApplicationJSONOsEnumAndroid AppsGetForOrgUser200ApplicationJSONOsEnum = "Android"
	AppsGetForOrgUser200ApplicationJSONOsEnumIOs     AppsGetForOrgUser200ApplicationJSONOsEnum = "iOS"
	AppsGetForOrgUser200ApplicationJSONOsEnumMacOs   AppsGetForOrgUser200ApplicationJSONOsEnum = "macOS"
	AppsGetForOrgUser200ApplicationJSONOsEnumTizen   AppsGetForOrgUser200ApplicationJSONOsEnum = "Tizen"
	AppsGetForOrgUser200ApplicationJSONOsEnumTvOs    AppsGetForOrgUser200ApplicationJSONOsEnum = "tvOS"
	AppsGetForOrgUser200ApplicationJSONOsEnumWindows AppsGetForOrgUser200ApplicationJSONOsEnum = "Windows"
	AppsGetForOrgUser200ApplicationJSONOsEnumLinux   AppsGetForOrgUser200ApplicationJSONOsEnum = "Linux"
	AppsGetForOrgUser200ApplicationJSONOsEnumCustom  AppsGetForOrgUser200ApplicationJSONOsEnum = "Custom"
)

func (e *AppsGetForOrgUser200ApplicationJSONOsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Android":
		fallthrough
	case "iOS":
		fallthrough
	case "macOS":
		fallthrough
	case "Tizen":
		fallthrough
	case "tvOS":
		fallthrough
	case "Windows":
		fallthrough
	case "Linux":
		fallthrough
	case "Custom":
		*e = AppsGetForOrgUser200ApplicationJSONOsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsGetForOrgUser200ApplicationJSONOsEnum: %s", s)
	}
}

// AppsGetForOrgUser200ApplicationJSONOwnerTypeEnum - The owner type. Can either be 'org' or 'user'
type AppsGetForOrgUser200ApplicationJSONOwnerTypeEnum string

const (
	AppsGetForOrgUser200ApplicationJSONOwnerTypeEnumOrg  AppsGetForOrgUser200ApplicationJSONOwnerTypeEnum = "org"
	AppsGetForOrgUser200ApplicationJSONOwnerTypeEnumUser AppsGetForOrgUser200ApplicationJSONOwnerTypeEnum = "user"
)

func (e *AppsGetForOrgUser200ApplicationJSONOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "org":
		fallthrough
	case "user":
		*e = AppsGetForOrgUser200ApplicationJSONOwnerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsGetForOrgUser200ApplicationJSONOwnerTypeEnum: %s", s)
	}
}

// AppsGetForOrgUser200ApplicationJSONOwner - The information about the app's owner
type AppsGetForOrgUser200ApplicationJSONOwner struct {
	// The avatar URL of the owner
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The owner's display name
	DisplayName string `json:"display_name"`
	// The owner's email address
	Email *string `json:"email,omitempty"`
	// The unique id (UUID) of the owner
	ID string `json:"id"`
	// The unique name that used to identify the owner
	Name string `json:"name"`
	// The owner type. Can either be 'org' or 'user'
	Type AppsGetForOrgUser200ApplicationJSONOwnerTypeEnum `json:"type"`
}

// AppsGetForOrgUser200ApplicationJSONPlatformEnum - The platform of the app
type AppsGetForOrgUser200ApplicationJSONPlatformEnum string

const (
	AppsGetForOrgUser200ApplicationJSONPlatformEnumJava            AppsGetForOrgUser200ApplicationJSONPlatformEnum = "Java"
	AppsGetForOrgUser200ApplicationJSONPlatformEnumObjectiveCSwift AppsGetForOrgUser200ApplicationJSONPlatformEnum = "Objective-C-Swift"
	AppsGetForOrgUser200ApplicationJSONPlatformEnumUwp             AppsGetForOrgUser200ApplicationJSONPlatformEnum = "UWP"
	AppsGetForOrgUser200ApplicationJSONPlatformEnumCordova         AppsGetForOrgUser200ApplicationJSONPlatformEnum = "Cordova"
	AppsGetForOrgUser200ApplicationJSONPlatformEnumReactNative     AppsGetForOrgUser200ApplicationJSONPlatformEnum = "React-Native"
	AppsGetForOrgUser200ApplicationJSONPlatformEnumUnity           AppsGetForOrgUser200ApplicationJSONPlatformEnum = "Unity"
	AppsGetForOrgUser200ApplicationJSONPlatformEnumElectron        AppsGetForOrgUser200ApplicationJSONPlatformEnum = "Electron"
	AppsGetForOrgUser200ApplicationJSONPlatformEnumXamarin         AppsGetForOrgUser200ApplicationJSONPlatformEnum = "Xamarin"
	AppsGetForOrgUser200ApplicationJSONPlatformEnumWpf             AppsGetForOrgUser200ApplicationJSONPlatformEnum = "WPF"
	AppsGetForOrgUser200ApplicationJSONPlatformEnumWinForms        AppsGetForOrgUser200ApplicationJSONPlatformEnum = "WinForms"
	AppsGetForOrgUser200ApplicationJSONPlatformEnumUnknown         AppsGetForOrgUser200ApplicationJSONPlatformEnum = "Unknown"
	AppsGetForOrgUser200ApplicationJSONPlatformEnumCustom          AppsGetForOrgUser200ApplicationJSONPlatformEnum = "Custom"
)

func (e *AppsGetForOrgUser200ApplicationJSONPlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Java":
		fallthrough
	case "Objective-C-Swift":
		fallthrough
	case "UWP":
		fallthrough
	case "Cordova":
		fallthrough
	case "React-Native":
		fallthrough
	case "Unity":
		fallthrough
	case "Electron":
		fallthrough
	case "Xamarin":
		fallthrough
	case "WPF":
		fallthrough
	case "WinForms":
		fallthrough
	case "Unknown":
		fallthrough
	case "Custom":
		*e = AppsGetForOrgUser200ApplicationJSONPlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsGetForOrgUser200ApplicationJSONPlatformEnum: %s", s)
	}
}

type AppsGetForOrgUser200ApplicationJSON struct {
	// A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics
	AppSecret         string                                                `json:"app_secret"`
	AzureSubscription *AppsGetForOrgUser200ApplicationJSONAzureSubscription `json:"azure_subscription,omitempty"`
	// The created date of this app
	CreatedAt *string `json:"created_at,omitempty"`
	// The description of the app
	Description *string `json:"description,omitempty"`
	// The display name of the app
	DisplayName string `json:"display_name"`
	// The string representation of the source of the app's icon
	IconSource *string `json:"icon_source,omitempty"`
	// The string representation of the URL pointing to the app's icon
	IconURL *string `json:"icon_url,omitempty"`
	// The unique ID (UUID) of the app
	ID string `json:"id"`
	// The permissions of the calling user
	MemberPermissions []AppsGetForOrgUser200ApplicationJSONMemberPermissionsEnum `json:"member_permissions,omitempty"`
	// The name of the app used in URLs
	Name string `json:"name"`
	// The creation origin of this app
	Origin AppsGetForOrgUser200ApplicationJSONOriginEnum `json:"origin"`
	// The OS the app will be running on
	Os AppsGetForOrgUser200ApplicationJSONOsEnum `json:"os"`
	// The information about the app's owner
	Owner AppsGetForOrgUser200ApplicationJSONOwner `json:"owner"`
	// The platform of the app
	Platform AppsGetForOrgUser200ApplicationJSONPlatformEnum `json:"platform"`
	// A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
	ReleaseType *string `json:"release_type,omitempty"`
	// The last updated date of this app
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type AppsGetForOrgUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	AppsGetForOrgUser200ApplicationJSONAnies []AppsGetForOrgUser200ApplicationJSON
	// Error
	AppsGetForOrgUserDefaultApplicationJSONObject *AppsGetForOrgUserDefaultApplicationJSON
}
