/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * System settings (mail server, logging, branding, default values etc.)
 */
public class SystemSettingsConfig {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public SystemSettingsConfig(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Request authentication settings
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;
     * 
     * ### Description:  
     * DRACOON authentication configuration entry point.  
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * Returns a list of configurable authentication methods.
     * 
     * ### Further Information:
     * Authentication methods are sorted by priority attribute.  
     * Smaller values have higher priority.  
     * Authentication method with highest priority is considered as default.  
     * Priority **MUST** be a positive value.
     * 
     * ### Configurable authentication settings:
     * &lt;details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Authentication Method | Description |
     * | :--- | :--- |
     * | `basic` | **Basic** authentication globally allowed.&lt;br&gt;This option **MUST** be activated to allow users to log in with their credentials stored in the database.&lt;br&gt;Formerly known as `sql`. |
     * | `active_directory` | **Active Directory** authentication globally allowed.&lt;br&gt;This option **MUST** be activated to allow users to log in with their Active Directory credentials. |
     * | `radius` | **RADIUS** authentication globally allowed.&lt;br&gt;This option **MUST** be activated to allow users to log in with their RADIUS username, their PIN and a token password. |
     * | `openid` | **OpenID Connect** authentication globally allowed.This option **MUST** be activated to allow users to log in with their OpenID Connect identity. |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestAuthConfigResponse requestAuthConfig(org.openapis.openapi.models.operations.RequestAuthConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/settings/auth");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestAuthConfigResponse res = new org.openapis.openapi.models.operations.RequestAuthConfigResponse() {{
            authConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AuthConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AuthConfig.class);
                res.authConfig = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request eventlog settings
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;
     * 
     * ### Description:  
     * DRACOON eventlog configuration entry point.  
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * Returns a list of configurable eventlog settings.
     * 
     * ### Further Information:
     * None.
     * 
     * ### Configurable eventlog settings:
     * &lt;details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | `enabled` | Determines whether eventlog is enabled. | `true or false` |
     * | `retentionPeriod` | Retention period (in _days_) of eventlog entries.&lt;br&gt;After that period, all entries are deleted. | `Integer between 0 and 9999`&lt;br&gt;If set to `0`: no logs are deleted |
     * | `logIpEnabled` | Determines whether user\u2019s IP address is logged. | `true or false` |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestEventlogConfigResponse requestEventlogConfig(org.openapis.openapi.models.operations.RequestEventlogConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/settings/eventlog");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestEventlogConfigResponse res = new org.openapis.openapi.models.operations.RequestEventlogConfigResponse() {{
            eventlogConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EventlogConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EventlogConfig.class);
                res.eventlogConfig = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request general settings
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;
     * 
     * ### Description:  
     * DRACOON general settings configuration entry point.  
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * Returns a list of configurable general settings.
     * 
     * ### Further Information:
     * 
     * ### Auth token restrictions:
     * 
     * A restriction is a lower bound for a token timeout and defines a duration after which a token is invalidated when it wasn't used.  
     * The access/refresh token validity duration of the client is the upper bound. A token is invalidated - in any case - when it has passed.  
     * 
     * Auth token restrictions are enabled by default.
     * 
     * * Default access token validity: **2 hours**  
     * * Default refresh token validity: **30 days**
     * 
     * ### Configurable general settings:
     * &lt;details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | `sharePasswordSmsEnabled` | Determines whether sending of share passwords via SMS is allowed. | `true or false` |
     * | `cryptoEnabled` | Determines whether client-side encryption is enabled.&lt;br&gt;Can only be enabled once; disabling is **NOT** possible. | `true or false` |
     * | `emailNotificationButtonEnabled` | Determines whether email notification button is enabled. | `true or false` |
     * | `eulaEnabled` | Determines whether EULA is enabled.&lt;br&gt;Each user has to confirm the EULA at first login. | `true or false` |
     * | `useS3Storage` | Defines if S3 is used as storage backend.&lt;br&gt;Can only be enabled once; disabling is **NOT** possible. | `true or false` |
     * | `s3TagsEnabled` | Determines whether S3 tags are enabled | `true or false` |
     * | `authTokenRestrictions` | Determines auth token restrictions. (e.g. restricted access token validity) | `object` |
     * 
     * &lt;/details&gt;
     * 
     * ### Deprecated configurable general settings:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting                           | Description | Value |
     * |:----------------------------------| :--- | :--- |
     * | &lt;del&gt;`mediaServerEnabled`&lt;/del&gt;   | Determines whether media server is enabled.&lt;br&gt;Returns boolean value dependent on conjunction of `mediaServerConfigEnabled` AND `mediaServerEnabled` | `true or false` |
     * | &lt;del&gt;`weakPasswordEnabled`&lt;/del&gt;  | Determines whether weak password is allowed.&lt;br&gt;Use `GET /system/config/policies/passwords` API to get configured password policies. | `true or false` |
     * | &lt;del&gt;`hideLoginInputFields`&lt;/del&gt; | Determines whether input fields for login should be enabled | `true or false` |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestGeneralSettingsResponse requestGeneralSettings(org.openapis.openapi.models.operations.RequestGeneralSettingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/settings/general");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestGeneralSettingsResponse res = new org.openapis.openapi.models.operations.RequestGeneralSettingsResponse() {{
            generalSettings = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GeneralSettings out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GeneralSettings.class);
                res.generalSettings = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request infrastructure properties
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;
     * 
     * ### Description:  
     * DRACOON infrastructure properties entry point.  
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * Returns a list of read-only infrastructure properties.
     * 
     * ### Further Information:
     * Source: `core-service.properties`
     * 
     * ### Read-only infrastructure properties:
     * &lt;details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | `smsConfigEnabled` | Determines whether sending of share passwords via SMS is **system-wide** enabled. | `true or false` |
     * | `mediaServerConfigEnabled` | Determines whether media server is **system-wide** enabled. | `true or false` |
     * | `s3DefaultRegion` | Suggested S3 region | `Region name` |
     * | `s3EnforceDirectUpload` | Enforce direct upload to S3 | `true or false` |
     * | `dracoonCloud` | Determines if the **DRACOON Core** is deployed in the cloud environment | `true or false` |
     * | `tenantUuid` | Current tenant UUID | `UUID` |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestInfrastructurePropertiesResponse requestInfrastructureProperties(org.openapis.openapi.models.operations.RequestInfrastructurePropertiesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/settings/infrastructure");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestInfrastructurePropertiesResponse res = new org.openapis.openapi.models.operations.RequestInfrastructurePropertiesResponse() {{
            infrastructureProperties = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.InfrastructureProperties out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.InfrastructureProperties.class);
                res.infrastructureProperties = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request syslog settings
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;
     * 
     * ### Description:  
     * DRACOON syslog configuration entry point.  
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * Returns a list of configurable syslog settings.
     * 
     * ### Further Information:
     * None.
     * 
     * ### Configurable syslog settings:
     * &lt;details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | `enabled` | Determines whether syslog is enabled. | `true or false` |
     * | `host` | Syslog server (IP or FQDN) | `DNS name or IPv4 of a syslog server` |
     * | `port` | Syslog server port | `Valid port number` |
     * | `protocol` | Protocol to connect to syslog server | `TCP or UDP` |
     * | `logIpEnabled` | Determines whether user\u2019s IP address is logged. | `true or false` |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestSyslogConfigResponse requestSyslogConfig(org.openapis.openapi.models.operations.RequestSyslogConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/settings/syslog");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestSyslogConfigResponse res = new org.openapis.openapi.models.operations.RequestSyslogConfigResponse() {{
            syslogConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyslogConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyslogConfig.class);
                res.syslogConfig = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request system defaults
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;
     * 
     * ### Description:  
     * DRACOON system defaults configuration entry point.  
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * Returns a list of configurable system default values.
     * 
     * ### Further Information:
     * None.
     * 
     * ### Configurable default values
     * &lt;details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | `languageDefault` | Defines which language should be default. | `ISO 639-1 code` |
     * | `downloadShareDefaultExpirationPeriod` | Default expiration period for Download Shares in _days_. | `Integer between 0 and 9999` |
     * | `uploadShareDefaultExpirationPeriod` | Default expiration period for Upload Shares in _days_. | `Integer between 0 and 9999` |
     * | `fileDefaultExpirationPeriod` | Default expiration period for all uploaded files in _days_. | `Integer between 0 and 9999` |
     * | `nonmemberViewerDefault` | Defines if new users get the role _Non Member Viewer_ by default | `true or false` |
     * 
     * &lt;/details&gt;
     * https://tools.ietf.org/html/rfc5646 - Tags for Identifying Languages
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestSystemDefaultsResponse requestSystemDefaults(org.openapis.openapi.models.operations.RequestSystemDefaultsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/settings/defaults");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestSystemDefaultsResponse res = new org.openapis.openapi.models.operations.RequestSystemDefaultsResponse() {{
            systemDefaults = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SystemDefaults out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SystemDefaults.class);
                res.systemDefaults = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Update authentication settings
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;
     * 
     * ### Description:  
     * DRACOON authentication configuration entry point.  
     * Change configurable authentication settings.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; change global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * One or more authentication methods gets changed.
     * 
     * ### Further Information:
     * Authentication methods are sorted by priority attribute.  
     * Smaller values have higher priority.  
     * Authentication method with highest priority is considered as default.  
     * Priority **MUST** be a positive value.
     * 
     * ### Configurable authentication settings:
     * &lt;details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Authentication Method | Description |
     * | :--- | :--- |
     * | `basic` | **Basic** authentication globally allowed.&lt;br&gt;This option **MUST** be activated to allow users to log in with their credentials stored in the database.&lt;br&gt;Formerly known as `sql`. |
     * | `active_directory` | **Active Directory** authentication globally allowed.&lt;br&gt;This option **MUST** be activated to allow users to log in with their Active Directory credentials. |
     * | `radius` | **RADIUS** authentication globally allowed.&lt;br&gt;This option **MUST** be activated to allow users to log in with their RADIUS username, their PIN and a token password. |
     * | `openid` | **OpenID Connect** authentication globally allowed.This option **MUST** be activated to allow users to log in with their OpenID Connect identity. |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateAuthConfigResponse updateAuthConfig(org.openapis.openapi.models.operations.UpdateAuthConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/settings/auth");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "authConfig", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateAuthConfigResponse res = new org.openapis.openapi.models.operations.UpdateAuthConfigResponse() {{
            authConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AuthConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AuthConfig.class);
                res.authConfig = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Update eventlog settings
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;
     * 
     * ### Description:  
     * DRACOON eventlog configuration entry point.  
     * Change configurable eventlog settings.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; change global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * One or more eventlog settings gets changed.
     * 
     * ### Further Information:
     * None.
     * 
     * ### Configurable eventlog settings:
     * &lt;details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | `enabled` | Determines whether eventlog is enabled. | `true or false` |
     * | `retentionPeriod` | Retention period (in _days_) of eventlog entries.&lt;br&gt;After that period, all entries are deleted. | `Integer between 0 and 9999`&lt;br&gt;If set to `0`: no logs are deleted&lt;br&gt;Recommended value: 7 |
     * | `logIpEnabled` | Determines whether user\u2019s IP address is logged. | `true or false` |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateEventlogConfigResponse updateEventlogConfig(org.openapis.openapi.models.operations.UpdateEventlogConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/settings/eventlog");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "updateEventlogConfig", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateEventlogConfigResponse res = new org.openapis.openapi.models.operations.UpdateEventlogConfigResponse() {{
            eventlogConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EventlogConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EventlogConfig.class);
                res.eventlogConfig = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Update general settings
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;
     * 
     * ### Description:  
     * DRACOON general settings configuration entry point.  
     * Change configurable general settings.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; change global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * One or more general settings gets changed.
     * 
     * ### Further Information:
     * Auth token restrictions are enabled by default.
     *     
     * * Default access token validity: **2 hours**  
     * * Default refresh token validity: **30 days**
     * 
     * ### Configurable general settings:
     * &lt;details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | `sharePasswordSmsEnabled` | Determines whether sending of share passwords via SMS is allowed. | `true or false` |
     * | `cryptoEnabled` | Determines whether client-side encryption is enabled.&lt;br&gt;Can only be enabled once; disabling is **NOT** possible. | `true or false` |
     * | `emailNotificationButtonEnabled` | Determines whether email notification button is enabled. | `true or false` |
     * | `eulaEnabled` | Determines whether EULA is enabled.&lt;br&gt;Each user has to confirm the EULA at first login. | `true or false` |
     * | `s3TagsEnabled` | Determines whether S3 tags are enabled | `true or false` |
     * | `authTokenRestrictions` | Determines auth token restrictions. (e.g. restricted access token validity) | `object` |
     * 
     * &lt;/details&gt;
     * 
     * ### Deprecated configurable general settings:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting                           | Description | Value |
     * |:----------------------------------| :--- | :--- |
     * | &lt;del&gt;`mediaServerEnabled`&lt;/del&gt;   | Determines whether media server is enabled.&lt;br&gt;**CANNOT** be enabled if media server configuration is disabled in `core-service.properties`.&lt;br&gt;Check `mediaServerConfigEnabled` with `GET /system/config/settings/infrastructure`. | `true or false` |
     * | &lt;del&gt;`weakPasswordEnabled`&lt;/del&gt;  | Determines whether weak password is allowed.&lt;br&gt;Use `PUT /system/config/policies/passwords` API to change configured password policies. | `true or false` |
     * | &lt;del&gt;`hideLoginInputFields`&lt;/del&gt; | Determines whether input fields for login should be enabled | `true or false` |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateGeneralSettingsResponse updateGeneralSettings(org.openapis.openapi.models.operations.UpdateGeneralSettingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/settings/general");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "updateGeneralSettings", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateGeneralSettingsResponse res = new org.openapis.openapi.models.operations.UpdateGeneralSettingsResponse() {{
            generalSettings = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GeneralSettings out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GeneralSettings.class);
                res.generalSettings = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Update syslog settings
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;
     * 
     * ### Description:  
     * DRACOON syslog configuration entry point.  
     * Change configurable syslog settings.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; change global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * One or more syslog settings gets changed.
     * 
     * ### Further Information:
     * None.
     * 
     * ### Configurable syslog settings:
     * &lt;details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | `enabled` | Set `true` to enable syslog. | `true or false` |
     * | `host` | Syslog server (IP or FQDN) | `DNS name or IPv4 of a syslog server` |
     * | `port` | Syslog server port | `Valid port number` |
     * | `protocol` | Protocol to connect to syslog server | `TCP or UDP` |
     * | `logIpEnabled` | Determines whether user\u2019s IP address is logged. | `true or false` |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSyslogConfigResponse updateSyslogConfig(org.openapis.openapi.models.operations.UpdateSyslogConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/settings/syslog");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "updateSyslogConfig", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSyslogConfigResponse res = new org.openapis.openapi.models.operations.UpdateSyslogConfigResponse() {{
            syslogConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SyslogConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SyslogConfig.class);
                res.syslogConfig = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Update system defaults
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;
     * 
     * ### Description:  
     * DRACOON system defaults configuration entry point.  
     * Change configurable system default values.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; change global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * One or more system default values gets changed.
     * 
     * ### Further Information:
     * None.
     * 
     * ### Configurable default values
     * &lt;details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | `languageDefault` | Defines which language should be default. | `ISO 639-1 code` |
     * | `downloadShareDefaultExpirationPeriod` | Default expiration period for Download Shares in _days_. | `Integer between 0 and 9999`&lt;br&gt;Set `0` to disable. |
     * | `uploadShareDefaultExpirationPeriod` | Default expiration period for Upload Shares in _days_. | `Integer between 0 and 9999`&lt;br&gt;Set `0` to disable. |
     * | `fileDefaultExpirationPeriod` | Default expiration period for all uploaded files in _days_. | `Integer between 0 and 9999`&lt;br&gt;Set `0` to disable. |
     * | `nonmemberViewerDefault` | Defines if new users get the role _Non Member Viewer_ by default | `true or false` |
     * 
     * &lt;/details&gt;
     * https://tools.ietf.org/html/rfc5646 - Tags for Identifying Languages
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSystemDefaultsResponse updateSystemDefaults(org.openapis.openapi.models.operations.UpdateSystemDefaultsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/system/config/settings/defaults");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "updateSystemDefaults", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSystemDefaultsResponse res = new org.openapis.openapi.models.operations.UpdateSystemDefaultsResponse() {{
            systemDefaults = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SystemDefaults out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SystemDefaults.class);
                res.systemDefaults = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }
}