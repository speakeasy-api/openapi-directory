"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETAccountingPeriodWithoutSuccessTypeFileIds:
    r"""File IDs of the reports available for the accounting period. You can retrieve the reports by specifying the file ID in a [Get Files](https://www.zuora.com/developer/api-reference/#operation/GET_Files) REST API call."""
    
    accounts_receivable_account_aging_detail_export_file_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountsReceivableAccountAgingDetailExportFileId'), 'exclude': lambda f: f is None }})
    r"""File ID of the Accounts Receivable Aging Account Detail report."""  
    accounts_receivable_invoice_aging_detail_export_file_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountsReceivableInvoiceAgingDetailExportFileId'), 'exclude': lambda f: f is None }})
    r"""File ID of the Accounts Receivable Aging Invoice Detail report."""  
    ar_roll_forward_detail_export_file_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arRollForwardDetailExportFileId'), 'exclude': lambda f: f is None }})
    r"""File ID of the Accounts Receivable Detail report."""  
    fx_realized_gain_and_loss_detail_export_file_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fxRealizedGainAndLossDetailExportFileId'), 'exclude': lambda f: f is None }})
    r"""File ID of the Realized Gain and Loss Detail report.
    
    Returned only if you have Foreign Currency Conversion enabled.
    """  
    fx_unrealized_gain_and_loss_detail_export_file_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fxUnrealizedGainAndLossDetailExportFileId'), 'exclude': lambda f: f is None }})
    r"""File ID of the Unrealized Gain and Loss Detail report.
    
    Returned only if you have Foreign Currency Conversion enabled
    """  
    revenue_detail_csv_file_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueDetailCsvFileId'), 'exclude': lambda f: f is None }})
    r"""File ID of the Revenue Detail report in CSV format."""  
    revenue_detail_excel_file_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueDetailExcelFileId'), 'exclude': lambda f: f is None }})
    r"""File ID of the Revenue Detail report in XLSX format."""  
    unprocessed_charges_file_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unprocessedChargesFileId'), 'exclude': lambda f: f is None }})
    r"""File ID of a report containing all unprocessed charges for the accounting period."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETAccountingPeriodWithoutSuccessType:
    r"""Container for custom fields of an Accounting Period object."""
    
    created_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdBy'), 'exclude': lambda f: f is None }})
    r"""ID of the user who created the accounting period."""  
    created_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date and time when the accounting period was created."""  
    end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end date of the accounting period."""  
    file_ids: Optional[GETAccountingPeriodWithoutSuccessTypeFileIds] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileIds'), 'exclude': lambda f: f is None }})
    r"""File IDs of the reports available for the accounting period. You can retrieve the reports by specifying the file ID in a [Get Files](https://www.zuora.com/developer/api-reference/#operation/GET_Files) REST API call."""  
    fiscal_quarter: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fiscal_quarter'), 'exclude': lambda f: f is None }})  
    fiscal_year: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fiscalYear'), 'exclude': lambda f: f is None }})
    r"""Fiscal year of the accounting period."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the accounting period."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the accounting period."""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Any optional notes about the accounting period."""  
    run_trial_balance_end: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runTrialBalanceEnd'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date and time that the trial balance was completed. If the trial balance status is `Pending`, `Processing`, or `Error`, this field is `null`."""  
    run_trial_balance_error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runTrialBalanceErrorMessage'), 'exclude': lambda f: f is None }})
    r"""If trial balance status is Error, an error message is returned in this field."""  
    run_trial_balance_start: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runTrialBalanceStart'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date and time that the trial balance was run. If the trial balance status is `Pending`, this field is `null`."""  
    run_trial_balance_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runTrialBalanceStatus'), 'exclude': lambda f: f is None }})
    r"""Status of the trial balance for the accounting period. Possible values:
    
    * `Pending`
    * `Processing`
    * `Completed`
    * `Error`
    """  
    start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start date of the accounting period."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the accounting period. Possible values:
    
    * `Open`
    * `PendingClose`
    * `Closed`
    """  
    updated_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedBy'), 'exclude': lambda f: f is None }})
    r"""D of the user who last updated the accounting period."""  
    updated_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date and time when the accounting period was last updated."""  
    