"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import processinginstancetype_enum as shared_processinginstancetype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DebugRuleConfiguration:
    r"""Configuration information for SageMaker Debugger rules for debugging. To learn more about how to configure the <code>DebugRuleConfiguration</code> parameter, see <a href=\\"https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html\\">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>."""
    
    rule_configuration_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleConfigurationName') }})  
    rule_evaluator_image: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleEvaluatorImage') }})  
    instance_type: Optional[shared_processinginstancetype_enum.ProcessingInstanceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceType'), 'exclude': lambda f: f is None }})  
    local_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LocalPath'), 'exclude': lambda f: f is None }})  
    rule_parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleParameters'), 'exclude': lambda f: f is None }})  
    s3_output_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3OutputPath'), 'exclude': lambda f: f is None }})  
    volume_size_in_gb: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VolumeSizeInGB'), 'exclude': lambda f: f is None }})  
    