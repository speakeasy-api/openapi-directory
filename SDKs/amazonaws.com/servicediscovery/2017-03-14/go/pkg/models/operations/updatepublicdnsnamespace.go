// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdatePublicDNSNamespaceXAmzTargetEnum
type UpdatePublicDNSNamespaceXAmzTargetEnum string

const (
	UpdatePublicDNSNamespaceXAmzTargetEnumRoute53AutoNamingV20170314UpdatePublicDNSNamespace UpdatePublicDNSNamespaceXAmzTargetEnum = "Route53AutoNaming_v20170314.UpdatePublicDnsNamespace"
)

func (e *UpdatePublicDNSNamespaceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Route53AutoNaming_v20170314.UpdatePublicDnsNamespace":
		*e = UpdatePublicDNSNamespaceXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePublicDNSNamespaceXAmzTargetEnum: %s", s)
	}
}

type UpdatePublicDNSNamespaceRequest struct {
	UpdatePublicDNSNamespaceRequest shared.UpdatePublicDNSNamespaceRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                   *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256               *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                  *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                        *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken               *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                   *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders               *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                      UpdatePublicDNSNamespaceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdatePublicDNSNamespaceResponse struct {
	ContentType string
	// DuplicateRequest
	DuplicateRequest interface{}
	// InvalidInput
	InvalidInput interface{}
	// NamespaceNotFound
	NamespaceNotFound interface{}
	// ResourceInUse
	ResourceInUse interface{}
	StatusCode    int
	RawResponse   *http.Response
	// Success
	UpdatePublicDNSNamespaceResponse *shared.UpdatePublicDNSNamespaceResponse
}
