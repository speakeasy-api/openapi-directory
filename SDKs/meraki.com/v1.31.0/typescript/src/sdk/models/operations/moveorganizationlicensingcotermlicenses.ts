/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The claim mode of the moved license
 */
export enum MoveOrganizationLicensingCotermLicensesRequestBodyDestinationModeEnum {
  AddDevices = "addDevices",
  Renew = "renew",
}

/**
 * Destination data for the license move
 */
export class MoveOrganizationLicensingCotermLicensesRequestBodyDestination extends SpeakeasyBase {
  /**
   * The claim mode of the moved license
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mode" })
  mode?: MoveOrganizationLicensingCotermLicensesRequestBodyDestinationModeEnum;

  /**
   * The organization to move the license to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organizationId" })
  organizationId?: string;
}

export class MoveOrganizationLicensingCotermLicensesRequestBodyLicensesCounts extends SpeakeasyBase {
  /**
   * The number of counts to move
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count: number;

  /**
   * The license model type to move counts of
   */
  @SpeakeasyMetadata()
  @Expose({ name: "model" })
  model: string;
}

export class MoveOrganizationLicensingCotermLicensesRequestBodyLicenses extends SpeakeasyBase {
  /**
   * The counts to move from the license by model type
   */
  @SpeakeasyMetadata({
    elemType: MoveOrganizationLicensingCotermLicensesRequestBodyLicensesCounts,
  })
  @Expose({ name: "counts" })
  @Type(() => MoveOrganizationLicensingCotermLicensesRequestBodyLicensesCounts)
  counts: MoveOrganizationLicensingCotermLicensesRequestBodyLicensesCounts[];

  /**
   * The license key to move counts from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key: string;
}

export class MoveOrganizationLicensingCotermLicensesRequestBody extends SpeakeasyBase {
  /**
   * Destination data for the license move
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination" })
  @Type(() => MoveOrganizationLicensingCotermLicensesRequestBodyDestination)
  destination: MoveOrganizationLicensingCotermLicensesRequestBodyDestination;

  /**
   * The list of licenses to move
   */
  @SpeakeasyMetadata({
    elemType: MoveOrganizationLicensingCotermLicensesRequestBodyLicenses,
  })
  @Expose({ name: "licenses" })
  @Type(() => MoveOrganizationLicensingCotermLicensesRequestBodyLicenses)
  licenses: MoveOrganizationLicensingCotermLicensesRequestBodyLicenses[];
}

export class MoveOrganizationLicensingCotermLicensesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: MoveOrganizationLicensingCotermLicensesRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=organizationId",
  })
  organizationId: string;
}

export class MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesCounts extends SpeakeasyBase {
  /**
   * The number of counts the license contains of this model
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count?: number;

  /**
   * The license model type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "model" })
  model?: string;
}

export class MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesEditions extends SpeakeasyBase {
  /**
   * The name of the license edition
   */
  @SpeakeasyMetadata()
  @Expose({ name: "edition" })
  edition?: string;

  /**
   * The product type of the license edition
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productType" })
  productType?: string;
}

/**
 * The operation mode of the license when it was claimed
 */
export enum MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesModeEnum {
  AddDevices = "addDevices",
  Renew = "renew",
}

export class MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicenses extends SpeakeasyBase {
  /**
   * When the license was claimed into the organization
   */
  @SpeakeasyMetadata()
  @Expose({ name: "claimedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  claimedAt?: Date;

  /**
   * The counts of the license by model type
   */
  @SpeakeasyMetadata({
    elemType:
      MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesCounts,
  })
  @Expose({ name: "counts" })
  @Type(
    () =>
      MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesCounts
  )
  counts?: MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesCounts[];

  /**
   * The duration (term length) of the license, measured in days
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: number;

  /**
   * The editions of the license for each relevant product type
   */
  @SpeakeasyMetadata({
    elemType:
      MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesEditions,
  })
  @Expose({ name: "editions" })
  @Type(
    () =>
      MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesEditions
  )
  editions?: MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesEditions[];

  /**
   * Flag to indicate if the license is expired
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expired" })
  expired?: boolean;

  /**
   * Flag to indicated that the license is invalidated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invalidated" })
  invalidated?: boolean;

  /**
   * When the license was invalidated. Will be null for active licenses
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invalidatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  invalidatedAt?: Date;

  /**
   * The key of the license
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * The operation mode of the license when it was claimed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mode" })
  mode?: MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesModeEnum;

  /**
   * The ID of the organization that the license is claimed in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organizationId" })
  organizationId?: string;

  /**
   * When the license's term began (approximately the date when the license was created)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startedAt?: Date;
}

export class MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesCounts extends SpeakeasyBase {
  /**
   * The number of counts the license contains of this model
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count?: number;

  /**
   * The license model type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "model" })
  model?: string;
}

export class MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesEditions extends SpeakeasyBase {
  /**
   * The name of the license edition
   */
  @SpeakeasyMetadata()
  @Expose({ name: "edition" })
  edition?: string;

  /**
   * The product type of the license edition
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productType" })
  productType?: string;
}

/**
 * The operation mode of the license when it was claimed
 */
export enum MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesModeEnum {
  AddDevices = "addDevices",
  Renew = "renew",
}

export class MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses extends SpeakeasyBase {
  /**
   * When the license was claimed into the organization
   */
  @SpeakeasyMetadata()
  @Expose({ name: "claimedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  claimedAt?: Date;

  /**
   * The counts of the license by model type
   */
  @SpeakeasyMetadata({
    elemType:
      MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesCounts,
  })
  @Expose({ name: "counts" })
  @Type(
    () =>
      MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesCounts
  )
  counts?: MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesCounts[];

  /**
   * The duration (term length) of the license, measured in days
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: number;

  /**
   * The editions of the license for each relevant product type
   */
  @SpeakeasyMetadata({
    elemType:
      MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesEditions,
  })
  @Expose({ name: "editions" })
  @Type(
    () =>
      MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesEditions
  )
  editions?: MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesEditions[];

  /**
   * Flag to indicate if the license is expired
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expired" })
  expired?: boolean;

  /**
   * Flag to indicated that the license is invalidated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invalidated" })
  invalidated?: boolean;

  /**
   * When the license was invalidated. Will be null for active licenses
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invalidatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  invalidatedAt?: Date;

  /**
   * The key of the license
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * The operation mode of the license when it was claimed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mode" })
  mode?: MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesModeEnum;

  /**
   * The ID of the organization that the license is claimed in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organizationId" })
  organizationId?: string;

  /**
   * When the license's term began (approximately the date when the license was created)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startedAt?: Date;
}

/**
 * Successful operation
 */
export class MoveOrganizationLicensingCotermLicenses200ApplicationJSON extends SpeakeasyBase {
  /**
   * Newly moved licenses created in the destination organization of the license move operation
   */
  @SpeakeasyMetadata({
    elemType:
      MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicenses,
  })
  @Expose({ name: "movedLicenses" })
  @Type(
    () => MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicenses
  )
  movedLicenses?: MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicenses[];

  /**
   * Remainder licenses created in the source organization as a result of moving a subset of the counts of a license
   */
  @SpeakeasyMetadata({
    elemType:
      MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses,
  })
  @Expose({ name: "remainderLicenses" })
  @Type(
    () =>
      MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses
  )
  remainderLicenses?: MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses[];
}

export class MoveOrganizationLicensingCotermLicensesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  moveOrganizationLicensingCotermLicenses200ApplicationJSONObject?: MoveOrganizationLicensingCotermLicenses200ApplicationJSON;
}
