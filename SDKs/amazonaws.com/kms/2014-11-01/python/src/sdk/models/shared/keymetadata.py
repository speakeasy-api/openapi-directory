"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import encryptionalgorithmspec_enum as shared_encryptionalgorithmspec_enum
from ..shared import expirationmodeltype_enum as shared_expirationmodeltype_enum
from ..shared import keymanagertype_enum as shared_keymanagertype_enum
from ..shared import keyspec_enum as shared_keyspec_enum
from ..shared import keystate_enum as shared_keystate_enum
from ..shared import keyusagetype_enum as shared_keyusagetype_enum
from ..shared import macalgorithmspec_enum as shared_macalgorithmspec_enum
from ..shared import multiregionconfiguration as shared_multiregionconfiguration
from ..shared import origintype_enum as shared_origintype_enum
from ..shared import signingalgorithmspec_enum as shared_signingalgorithmspec_enum
from ..shared import xkskeyconfigurationtype as shared_xkskeyconfigurationtype
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class KeyMetadataCustomerMasterKeySpecEnum(str, Enum):
    r"""<p>Instead, use the <code>KeySpec</code> field.</p> <p>The <code>KeySpec</code> and <code>CustomerMasterKeySpec</code> fields have the same value. We recommend that you use the <code>KeySpec</code> field in your code. However, to avoid breaking changes, KMS supports both fields.</p>This field has been deprecated. Instead, use the KeySpec field."""
    RSA_2048 = 'RSA_2048'
    RSA_3072 = 'RSA_3072'
    RSA_4096 = 'RSA_4096'
    ECC_NIST_P256 = 'ECC_NIST_P256'
    ECC_NIST_P384 = 'ECC_NIST_P384'
    ECC_NIST_P521 = 'ECC_NIST_P521'
    ECC_SECG_P256_K1 = 'ECC_SECG_P256K1'
    SYMMETRIC_DEFAULT = 'SYMMETRIC_DEFAULT'
    HMAC_224 = 'HMAC_224'
    HMAC_256 = 'HMAC_256'
    HMAC_384 = 'HMAC_384'
    HMAC_512 = 'HMAC_512'
    SM2 = 'SM2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class KeyMetadata:
    r"""<p>Contains metadata about a KMS key.</p> <p>This data type is used as a response element for the <a>CreateKey</a>, <a>DescribeKey</a>, and <a>ReplicateKey</a> operations.</p>"""
    
    key_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyId') }})  
    arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Arn'), 'exclude': lambda f: f is None }})  
    aws_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AWSAccountId'), 'exclude': lambda f: f is None }})  
    cloud_hsm_cluster_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudHsmClusterId'), 'exclude': lambda f: f is None }})  
    creation_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    customer_master_key_spec: Optional[KeyMetadataCustomerMasterKeySpecEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerMasterKeySpec'), 'exclude': lambda f: f is None }})  
    custom_key_store_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomKeyStoreId'), 'exclude': lambda f: f is None }})  
    deletion_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeletionDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Enabled'), 'exclude': lambda f: f is None }})  
    encryption_algorithms: Optional[list[shared_encryptionalgorithmspec_enum.EncryptionAlgorithmSpecEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionAlgorithms'), 'exclude': lambda f: f is None }})  
    expiration_model: Optional[shared_expirationmodeltype_enum.ExpirationModelTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpirationModel'), 'exclude': lambda f: f is None }})  
    key_manager: Optional[shared_keymanagertype_enum.KeyManagerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyManager'), 'exclude': lambda f: f is None }})  
    key_spec: Optional[shared_keyspec_enum.KeySpecEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeySpec'), 'exclude': lambda f: f is None }})  
    key_state: Optional[shared_keystate_enum.KeyStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyState'), 'exclude': lambda f: f is None }})  
    key_usage: Optional[shared_keyusagetype_enum.KeyUsageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyUsage'), 'exclude': lambda f: f is None }})  
    mac_algorithms: Optional[list[shared_macalgorithmspec_enum.MacAlgorithmSpecEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MacAlgorithms'), 'exclude': lambda f: f is None }})  
    multi_region: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MultiRegion'), 'exclude': lambda f: f is None }})  
    multi_region_configuration: Optional[shared_multiregionconfiguration.MultiRegionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MultiRegionConfiguration'), 'exclude': lambda f: f is None }})  
    origin: Optional[shared_origintype_enum.OriginTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Origin'), 'exclude': lambda f: f is None }})  
    pending_deletion_window_in_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PendingDeletionWindowInDays'), 'exclude': lambda f: f is None }})  
    signing_algorithms: Optional[list[shared_signingalgorithmspec_enum.SigningAlgorithmSpecEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SigningAlgorithms'), 'exclude': lambda f: f is None }})  
    valid_to: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ValidTo'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    xks_key_configuration: Optional[shared_xkskeyconfigurationtype.XksKeyConfigurationType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('XksKeyConfiguration'), 'exclude': lambda f: f is None }})  
    