// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EndpointStateEnum string

const (
	EndpointStateEnumCreating             EndpointStateEnum = "CREATING"
	EndpointStateEnumActive               EndpointStateEnum = "ACTIVE"
	EndpointStateEnumTerminating          EndpointStateEnum = "TERMINATING"
	EndpointStateEnumTerminated           EndpointStateEnum = "TERMINATED"
	EndpointStateEnumTerminatedWithErrors EndpointStateEnum = "TERMINATED_WITH_ERRORS"
)

func (e EndpointStateEnum) ToPointer() *EndpointStateEnum {
	return &e
}

func (e *EndpointStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREATING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "TERMINATING":
		fallthrough
	case "TERMINATED":
		fallthrough
	case "TERMINATED_WITH_ERRORS":
		*e = EndpointStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EndpointStateEnum: %v", v)
	}
}
