// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EnterpriseCrmEventbusProtoSuccessPolicyFinalStateEnum - State to which the execution snapshot status will be set if the task succeeds.
type EnterpriseCrmEventbusProtoSuccessPolicyFinalStateEnum string

const (
	EnterpriseCrmEventbusProtoSuccessPolicyFinalStateEnumUnspecified EnterpriseCrmEventbusProtoSuccessPolicyFinalStateEnum = "UNSPECIFIED"
	EnterpriseCrmEventbusProtoSuccessPolicyFinalStateEnumSucceeded   EnterpriseCrmEventbusProtoSuccessPolicyFinalStateEnum = "SUCCEEDED"
	EnterpriseCrmEventbusProtoSuccessPolicyFinalStateEnumSuspended   EnterpriseCrmEventbusProtoSuccessPolicyFinalStateEnum = "SUSPENDED"
)

func (e EnterpriseCrmEventbusProtoSuccessPolicyFinalStateEnum) ToPointer() *EnterpriseCrmEventbusProtoSuccessPolicyFinalStateEnum {
	return &e
}

func (e *EnterpriseCrmEventbusProtoSuccessPolicyFinalStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNSPECIFIED":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "SUSPENDED":
		*e = EnterpriseCrmEventbusProtoSuccessPolicyFinalStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnterpriseCrmEventbusProtoSuccessPolicyFinalStateEnum: %v", v)
	}
}

// EnterpriseCrmEventbusProtoSuccessPolicy - Policy that dictates the behavior for the task after it completes successfully.
type EnterpriseCrmEventbusProtoSuccessPolicy struct {
	// State to which the execution snapshot status will be set if the task succeeds.
	FinalState *EnterpriseCrmEventbusProtoSuccessPolicyFinalStateEnum `json:"finalState,omitempty"`
}
