/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SortParam } from "./sortparam";
import { Expose, Transform, Type } from "class-transformer";

export class QueryBannedUsersRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "created_at_after" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAtAfter?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at_after_or_equal" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAtAfterOrEqual?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at_before" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAtBefore?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at_before_or_equal" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAtBeforeOrEqual?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "filter_conditions" })
  filterConditions: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "limit" })
  limit?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "offset" })
  offset?: number;

  @SpeakeasyMetadata({ elemType: SortParam })
  @Expose({ name: "sort" })
  @Type(() => SortParam)
  sort?: SortParam[];

  /**
   * Represents chat user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  user?: Record<string, any>;

  /**
   * **Server-side only**. User ID which server acts upon
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_id" })
  userId?: string;
}
