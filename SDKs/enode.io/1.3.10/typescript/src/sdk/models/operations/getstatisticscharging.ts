/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class GetStatisticsChargingSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  userAccessToken: string;
}

/**
 * The unit of time the data will be cut into before aggregate statistics are applied. For instance if you choose DAY, then each item in the returned array will cover 1 day.
 */
export enum GetStatisticsChargingResolutionEnum {
  Hour = "HOUR",
  Day = "DAY",
  Week = "WEEK",
  Month = "MONTH",
  Year = "YEAR",
}

export class GetStatisticsChargingRequest extends SpeakeasyBase {
  /**
   * Filter statistics to only include this charging location
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=chargingLocationId",
  })
  chargingLocationId?: string;

  /**
   * Latest date to include in the response (defaults to current date/time)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=endDate;dateTimeFormat=YYYY-MM-DD",
  })
  endDate?: Date;

  /**
   * The unit of time the data will be cut into before aggregate statistics are applied. For instance if you choose DAY, then each item in the returned array will cover 1 day.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=resolution",
  })
  resolution?: GetStatisticsChargingResolutionEnum;

  /**
   * Earliest date to include in the response
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=startDate;dateTimeFormat=YYYY-MM-DD",
  })
  startDate: Date;

  /**
   * Filter statistics to only include this vehicle
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=vehicleId",
  })
  vehicleId?: string;
}

/**
 * Aggregate statistics for charge rate in kW
 */
export class GetStatisticsCharging200ApplicationJSONKw extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  @SpeakeasyMetadata()
  @Expose({ name: "mean" })
  mean: number;

  @SpeakeasyMetadata()
  @Expose({ name: "min" })
  min: number;
}

/**
 * Aggregate statistics for power price (<CURRENCY> per kWh)
 */
export class GetStatisticsCharging200ApplicationJSONPrice extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  @SpeakeasyMetadata()
  @Expose({ name: "mean" })
  mean: number;

  @SpeakeasyMetadata()
  @Expose({ name: "min" })
  min: number;
}

export class GetStatisticsCharging200ApplicationJSON extends SpeakeasyBase {
  /**
   * Total cost in <CURRENCY>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "costSum" })
  costSum: number;

  /**
   * The start date of this sample within the timeseries
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  date: Date;

  /**
   * Aggregate statistics for charge rate in kW
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kw" })
  @Type(() => GetStatisticsCharging200ApplicationJSONKw)
  kw: GetStatisticsCharging200ApplicationJSONKw;

  /**
   * Total power consumption in kWh
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kwhSum" })
  kwhSum: number;

  /**
   * Aggregate statistics for power price (<CURRENCY> per kWh)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  @Type(() => GetStatisticsCharging200ApplicationJSONPrice)
  price: GetStatisticsCharging200ApplicationJSONPrice;
}

export class GetStatisticsChargingResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful
   */
  @SpeakeasyMetadata({ elemType: GetStatisticsCharging200ApplicationJSON })
  getStatisticsCharging200ApplicationJSONObjects?: GetStatisticsCharging200ApplicationJSON[];
}
