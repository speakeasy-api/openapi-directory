// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EcKeyTypeSignatureAlgorithmEnum - Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed.
type EcKeyTypeSignatureAlgorithmEnum string

const (
	EcKeyTypeSignatureAlgorithmEnumEcSignatureAlgorithmUnspecified EcKeyTypeSignatureAlgorithmEnum = "EC_SIGNATURE_ALGORITHM_UNSPECIFIED"
	EcKeyTypeSignatureAlgorithmEnumEcdsaP256                       EcKeyTypeSignatureAlgorithmEnum = "ECDSA_P256"
	EcKeyTypeSignatureAlgorithmEnumEcdsaP384                       EcKeyTypeSignatureAlgorithmEnum = "ECDSA_P384"
	EcKeyTypeSignatureAlgorithmEnumEddsa25519                      EcKeyTypeSignatureAlgorithmEnum = "EDDSA_25519"
)

func (e *EcKeyTypeSignatureAlgorithmEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EC_SIGNATURE_ALGORITHM_UNSPECIFIED":
		fallthrough
	case "ECDSA_P256":
		fallthrough
	case "ECDSA_P384":
		fallthrough
	case "EDDSA_25519":
		*e = EcKeyTypeSignatureAlgorithmEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EcKeyTypeSignatureAlgorithmEnum: %s", s)
	}
}

// EcKeyType - Describes an Elliptic Curve key that may be used in a Certificate issued from a CaPool.
type EcKeyType struct {
	// Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed.
	SignatureAlgorithm *EcKeyTypeSignatureAlgorithmEnum `json:"signatureAlgorithm,omitempty"`
}
