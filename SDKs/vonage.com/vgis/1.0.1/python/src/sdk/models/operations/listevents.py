"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import errorresponse as shared_errorresponse
from ..shared import event as shared_event
from enum import Enum
from typing import Optional

class ListEventsDirectionEnum(str, Enum):
    r"""Filter by event direction"""
    INBOUND = 'INBOUND'
    OUTBOUND = 'OUTBOUND'

class ListEventsOrderEnum(str, Enum):
    r"""Sort in either ascending or descending order'"""
    DESC = 'DESC'
    ASC = 'ASC'

class ListEventsStatesEnum(str, Enum):
    r"""Filter events by state"""
    INITIALIZING = 'INITIALIZING'
    RINGING = 'RINGING'
    ACTIVE = 'ACTIVE'
    HELD = 'HELD'
    REMOTE_HELD = 'REMOTE_HELD'
    DETACHED = 'DETACHED'
    REJECTED = 'REJECTED'
    CANCELLED = 'CANCELLED'
    ANSWERED = 'ANSWERED'
    MISSED = 'MISSED'

class ListEventsTypesEnum(str, Enum):
    r"""Record type"""
    CALL = 'CALL'


@dataclasses.dataclass
class ListEventsRequest:
    
    direction: Optional[ListEventsDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""Filter by event direction"""  
    from_date: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fromDate', 'style': 'form', 'explode': True }})
    r"""Return events that occurred after this point in time"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Page number of events to return"""  
    order: Optional[ListEventsOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})
    r"""Sort in either ascending or descending order'"""  
    size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'size', 'style': 'form', 'explode': True }})
    r"""Return this amount of events in the response"""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sort events by property"""  
    states: Optional[ListEventsStatesEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'states', 'style': 'form', 'explode': True }})
    r"""Filter events by state"""  
    to_date: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'toDate', 'style': 'form', 'explode': True }})
    r"""Return events that occurred before this point in time"""  
    types: Optional[ListEventsTypesEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'types', 'style': 'form', 'explode': True }})
    r"""Record type"""  
    

@dataclasses.dataclass
class ListEventsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error_response: Optional[shared_errorresponse.ErrorResponse] = dataclasses.field(default=None)
    r"""Bad Request: The client should not repeat the request without modifications"""  
    events: Optional[list[shared_event.Event]] = dataclasses.field(default=None)
    r"""Successful"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    