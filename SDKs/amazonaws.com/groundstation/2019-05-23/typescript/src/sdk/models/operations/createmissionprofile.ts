/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * AWS Key Management Service (KMS) Key.
 */
export class CreateMissionProfileRequestBodyStreamsKmsKey extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "kmsAliasArn" })
  kmsAliasArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "kmsKeyArn" })
  kmsKeyArn?: string;
}

export class CreateMissionProfileRequestBody extends SpeakeasyBase {
  /**
   * Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contactPostPassDurationSeconds" })
  contactPostPassDurationSeconds?: number;

  /**
   * Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contactPrePassDurationSeconds" })
  contactPrePassDurationSeconds?: number;

  /**
   * A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataflowEdges" })
  dataflowEdges: string[][];

  /**
   * Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minimumViableContactDurationSeconds" })
  minimumViableContactDurationSeconds: number;

  /**
   * Name of a mission profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * AWS Key Management Service (KMS) Key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "streamsKmsKey" })
  @Type(() => CreateMissionProfileRequestBodyStreamsKmsKey)
  streamsKmsKey?: CreateMissionProfileRequestBodyStreamsKmsKey;

  /**
   * Role to use for encrypting streams with KMS key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "streamsKmsRole" })
  streamsKmsRole?: string;

  /**
   * Tags assigned to a mission profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  /**
   * ARN of a tracking <code>Config</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trackingConfigArn" })
  trackingConfigArn: string;
}

export class CreateMissionProfileRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateMissionProfileRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateMissionProfileResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * DependencyException
   */
  @SpeakeasyMetadata()
  dependencyException?: any;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  missionProfileIdResponse?: shared.MissionProfileIdResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;
}
