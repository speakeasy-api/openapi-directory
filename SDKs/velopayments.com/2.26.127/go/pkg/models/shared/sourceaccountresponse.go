// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceAccountResponseCurrencyEnum string

const (
	SourceAccountResponseCurrencyEnumUsd SourceAccountResponseCurrencyEnum = "USD"
)

func (e *SourceAccountResponseCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "USD":
		*e = SourceAccountResponseCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAccountResponseCurrencyEnum: %s", s)
	}
}

// SourceAccountResponse - Source account response
type SourceAccountResponse struct {
	AccountType *string `json:"accountType,omitempty"`
	// Decimal implied
	Balance          *int64                             `json:"balance,omitempty"`
	BalanceVisible   *bool                              `json:"balanceVisible,omitempty"`
	Currency         *SourceAccountResponseCurrencyEnum `json:"currency,omitempty"`
	CustomerID       *string                            `json:"customerId,omitempty"`
	FundingAccountID *string                            `json:"fundingAccountId,omitempty"`
	FundingRef       *string                            `json:"fundingRef,omitempty"`
	// Source Account Id
	ID                  *string `json:"id,omitempty"`
	Name                *string `json:"name,omitempty"`
	PayorID             *string `json:"payorId,omitempty"`
	PhysicalAccountID   *string `json:"physicalAccountId,omitempty"`
	PhysicalAccountName *string `json:"physicalAccountName,omitempty"`
	Pooled              *bool   `json:"pooled,omitempty"`
	RailsID             *string `json:"railsId,omitempty"`
}
