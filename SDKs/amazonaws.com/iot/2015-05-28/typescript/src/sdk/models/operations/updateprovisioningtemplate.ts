/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Structure that contains <code>payloadVersion</code> and <code>targetArn</code>.
 */
export class UpdateProvisioningTemplateRequestBodyPreProvisioningHook extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "payloadVersion" })
  payloadVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "targetArn" })
  targetArn?: string;
}

export class UpdateProvisioningTemplateRequestBody extends SpeakeasyBase {
  /**
   * The ID of the default provisioning template version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultVersionId" })
  defaultVersionId?: number;

  /**
   * The description of the provisioning template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * True to enable the provisioning template, otherwise false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * Structure that contains <code>payloadVersion</code> and <code>targetArn</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preProvisioningHook" })
  @Type(() => UpdateProvisioningTemplateRequestBodyPreProvisioningHook)
  preProvisioningHook?: UpdateProvisioningTemplateRequestBodyPreProvisioningHook;

  /**
   * The ARN of the role associated with the provisioning template. This IoT role grants permission to provision a device.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "provisioningRoleArn" })
  provisioningRoleArn?: string;

  /**
   * Removes pre-provisioning hook template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "removePreProvisioningHook" })
  removePreProvisioningHook?: boolean;
}

export class UpdateProvisioningTemplateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateProvisioningTemplateRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The name of the provisioning template.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=templateName",
  })
  templateName: string;
}

export class UpdateProvisioningTemplateResponse extends SpeakeasyBase {
  /**
   * ConflictingResourceUpdateException
   */
  @SpeakeasyMetadata()
  conflictingResourceUpdateException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * UnauthorizedException
   */
  @SpeakeasyMetadata()
  unauthorizedException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateProvisioningTemplateResponse?: Record<string, any>;
}
