"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import applicationcategory as shared_applicationcategory
from ..shared import imageasset as shared_imageasset
from ..shared import instance as shared_instance
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ApplicationEnabledFeaturesEnum(str, Enum):
    APPLICATION_FEATURE_UNSPECIFIED = 'APPLICATION_FEATURE_UNSPECIFIED'
    SNAPSHOTS = 'SNAPSHOTS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Application:
    r"""The Application resource."""
    
    achievement_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('achievement_count'), 'exclude': lambda f: f is None }})
    r"""The number of achievements visible to the currently authenticated player."""  
    assets: Optional[list[shared_imageasset.ImageAsset]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assets'), 'exclude': lambda f: f is None }})
    r"""The assets of the application."""  
    author: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author'), 'exclude': lambda f: f is None }})
    r"""The author of the application."""  
    category: Optional[shared_applicationcategory.ApplicationCategory] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""An application category object."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the application."""  
    enabled_features: Optional[list[ApplicationEnabledFeaturesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabledFeatures'), 'exclude': lambda f: f is None }})
    r"""A list of features that have been enabled for the application."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the application."""  
    instances: Optional[list[shared_instance.Instance]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instances'), 'exclude': lambda f: f is None }})
    r"""The instances of the application."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Uniquely identifies the type of this resource. Value is always the fixed string `games#application`."""  
    last_updated_timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdatedTimestamp'), 'exclude': lambda f: f is None }})
    r"""The last updated timestamp of the application."""  
    leaderboard_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leaderboard_count'), 'exclude': lambda f: f is None }})
    r"""The number of leaderboards visible to the currently authenticated player."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the application."""  
    theme_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('themeColor'), 'exclude': lambda f: f is None }})
    r"""A hint to the client UI for what color to use as an app-themed color. The color is given as an RGB triplet (e.g. \\"E0E0E0\\")."""  
    