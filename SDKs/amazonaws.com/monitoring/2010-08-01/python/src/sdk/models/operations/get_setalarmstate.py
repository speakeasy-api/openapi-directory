"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETSetAlarmStateActionEnum(str, Enum):
    SET_ALARM_STATE = 'SetAlarmState'

class GETSetAlarmStateStateValueEnum(str, Enum):
    r"""The value of the state."""
    OK = 'OK'
    ALARM = 'ALARM'
    INSUFFICIENT_DATA = 'INSUFFICIENT_DATA'

class GETSetAlarmStateVersionEnum(str, Enum):
    TWO_THOUSAND_AND_TEN_08_01 = '2010-08-01'


@dataclasses.dataclass
class GETSetAlarmStateRequest:
    
    action: GETSetAlarmStateActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    alarm_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'AlarmName', 'style': 'form', 'explode': True }})
    r"""The name of the alarm."""  
    state_reason: str = dataclasses.field(metadata={'query_param': { 'field_name': 'StateReason', 'style': 'form', 'explode': True }})
    r"""The reason that this alarm is set to this specific state, in text format."""  
    state_value: GETSetAlarmStateStateValueEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'StateValue', 'style': 'form', 'explode': True }})
    r"""The value of the state."""  
    version: GETSetAlarmStateVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    state_reason_data: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'StateReasonData', 'style': 'form', 'explode': True }})
    r"""<p>The reason that this alarm is set to this specific state, in JSON format.</p> <p>For SNS or EC2 alarm actions, this is just informational. But for EC2 Auto Scaling or application Auto Scaling alarm actions, the Auto Scaling policy uses the information in this field to take the correct action.</p>"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETSetAlarmStateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    