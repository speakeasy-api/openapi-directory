"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import redisauthtypevalue_enum as shared_redisauthtypevalue_enum
from ..shared import sslsecurityprotocolvalue_enum as shared_sslsecurityprotocolvalue_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RedisSettings:
    r"""Provides information that defines a Redis target endpoint."""
    
    port: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Port') }})  
    server_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServerName') }})  
    auth_password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthPassword'), 'exclude': lambda f: f is None }})  
    auth_type: Optional[shared_redisauthtypevalue_enum.RedisAuthTypeValueEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthType'), 'exclude': lambda f: f is None }})  
    auth_user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthUserName'), 'exclude': lambda f: f is None }})  
    ssl_ca_certificate_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SslCaCertificateArn'), 'exclude': lambda f: f is None }})  
    ssl_security_protocol: Optional[shared_sslsecurityprotocolvalue_enum.SslSecurityProtocolValueEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SslSecurityProtocol'), 'exclude': lambda f: f is None }})  
    