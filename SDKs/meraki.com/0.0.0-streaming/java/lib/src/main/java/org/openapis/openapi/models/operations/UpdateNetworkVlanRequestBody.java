/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UpdateNetworkVlanRequestBody {
    /**
     * The local IP of the appliance on the VLAN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applianceIp")
    public String applianceIp;
    public UpdateNetworkVlanRequestBody withApplianceIp(String applianceIp) {
        this.applianceIp = applianceIp;
        return this;
    }
    
    /**
     * DHCP boot option for boot filename
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dhcpBootFilename")
    public String dhcpBootFilename;
    public UpdateNetworkVlanRequestBody withDhcpBootFilename(String dhcpBootFilename) {
        this.dhcpBootFilename = dhcpBootFilename;
        return this;
    }
    
    /**
     * DHCP boot option to direct boot clients to the server to load the boot file from
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dhcpBootNextServer")
    public String dhcpBootNextServer;
    public UpdateNetworkVlanRequestBody withDhcpBootNextServer(String dhcpBootNextServer) {
        this.dhcpBootNextServer = dhcpBootNextServer;
        return this;
    }
    
    /**
     * Use DHCP boot options specified in other properties
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dhcpBootOptionsEnabled")
    public Boolean dhcpBootOptionsEnabled;
    public UpdateNetworkVlanRequestBody withDhcpBootOptionsEnabled(Boolean dhcpBootOptionsEnabled) {
        this.dhcpBootOptionsEnabled = dhcpBootOptionsEnabled;
        return this;
    }
    
    /**
     * The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dhcpHandling")
    public UpdateNetworkVlanRequestBodyDhcpHandlingEnum dhcpHandling;
    public UpdateNetworkVlanRequestBody withDhcpHandling(UpdateNetworkVlanRequestBodyDhcpHandlingEnum dhcpHandling) {
        this.dhcpHandling = dhcpHandling;
        return this;
    }
    
    /**
     * The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dhcpLeaseTime")
    public UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum dhcpLeaseTime;
    public UpdateNetworkVlanRequestBody withDhcpLeaseTime(UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum dhcpLeaseTime) {
        this.dhcpLeaseTime = dhcpLeaseTime;
        return this;
    }
    
    /**
     * The list of DHCP options that will be included in DHCP responses. Each object in the list should have "code", "type", and "value" properties.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dhcpOptions")
    public UpdateNetworkVlanRequestBodyDhcpOptions[] dhcpOptions;
    public UpdateNetworkVlanRequestBody withDhcpOptions(UpdateNetworkVlanRequestBodyDhcpOptions[] dhcpOptions) {
        this.dhcpOptions = dhcpOptions;
        return this;
    }
    
    /**
     * The IPs of the DHCP servers that DHCP requests should be relayed to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dhcpRelayServerIps")
    public String[] dhcpRelayServerIps;
    public UpdateNetworkVlanRequestBody withDhcpRelayServerIps(String[] dhcpRelayServerIps) {
        this.dhcpRelayServerIps = dhcpRelayServerIps;
        return this;
    }
    
    /**
     * The DNS nameservers used for DHCP responses, either "upstream_dns", "google_dns", "opendns", or a newline seperated string of IP addresses or domain names
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dnsNameservers")
    public String dnsNameservers;
    public UpdateNetworkVlanRequestBody withDnsNameservers(String dnsNameservers) {
        this.dnsNameservers = dnsNameservers;
        return this;
    }
    
    /**
     * The DHCP fixed IP assignments on the VLAN. This should be an object that contains mappings from MAC addresses to objects that themselves each contain "ip" and "name" string fields. See the sample request/response for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fixedIpAssignments")
    public java.util.Map<String, Object> fixedIpAssignments;
    public UpdateNetworkVlanRequestBody withFixedIpAssignments(java.util.Map<String, Object> fixedIpAssignments) {
        this.fixedIpAssignments = fixedIpAssignments;
        return this;
    }
    
    /**
     * The id of the desired group policy to apply to the VLAN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groupPolicyId")
    public String groupPolicyId;
    public UpdateNetworkVlanRequestBody withGroupPolicyId(String groupPolicyId) {
        this.groupPolicyId = groupPolicyId;
        return this;
    }
    
    /**
     * The name of the VLAN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public UpdateNetworkVlanRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The DHCP reserved IP ranges on the VLAN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservedIpRanges")
    public UpdateNetworkVlanRequestBodyReservedIpRanges[] reservedIpRanges;
    public UpdateNetworkVlanRequestBody withReservedIpRanges(UpdateNetworkVlanRequestBodyReservedIpRanges[] reservedIpRanges) {
        this.reservedIpRanges = reservedIpRanges;
        return this;
    }
    
    /**
     * The subnet of the VLAN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subnet")
    public String subnet;
    public UpdateNetworkVlanRequestBody withSubnet(String subnet) {
        this.subnet = subnet;
        return this;
    }
    
    /**
     * The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vpnNatSubnet")
    public String vpnNatSubnet;
    public UpdateNetworkVlanRequestBody withVpnNatSubnet(String vpnNatSubnet) {
        this.vpnNatSubnet = vpnNatSubnet;
        return this;
    }
    
}
