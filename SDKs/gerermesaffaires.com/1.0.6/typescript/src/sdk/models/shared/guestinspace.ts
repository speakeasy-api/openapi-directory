/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export enum GuestInSpaceClientManagementEnum {
  No = "no",
  Manager = "manager",
  Adn = "adn",
}

export enum GuestInSpaceFoldersRightEnum {
  Read = "read",
  Write = "write",
}

export class GuestInSpaceFolders extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Right" })
  right?: GuestInSpaceFoldersRightEnum;
}

export enum GuestInSpacePlayerEnum {
  Guest = "guest",
  Owner = "owner",
  Manager = "manager",
  Assistant = "assistant",
  Collaborator = "collaborator",
}

/**
 * Infos to invite
 */
export class GuestInSpace extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ClientManagement" })
  clientManagement?: GuestInSpaceClientManagementEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Comment" })
  comment?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Contact" })
  contact?: string;

  @SpeakeasyMetadata({ elemType: GuestInSpaceFolders })
  @Expose({ name: "Folders" })
  @Type(() => GuestInSpaceFolders)
  folders?: GuestInSpaceFolders[];

  @SpeakeasyMetadata()
  @Expose({ name: "GroupIds" })
  groupIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "IsAdmin" })
  isAdmin?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "MemberId" })
  memberId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Player" })
  player?: GuestInSpacePlayerEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "PlayerEnd" })
  playerEnd?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Signature" })
  signature?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Subject" })
  subject?: string;
}
