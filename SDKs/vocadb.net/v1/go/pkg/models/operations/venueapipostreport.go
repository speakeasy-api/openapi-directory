// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type VenueAPIPostReportPathParams struct {
	// Venue to be reported.
	ID int `pathParam:"style=simple,explode=false,name=id"`
}

// VenueAPIPostReportReportTypeEnum - Report type.
type VenueAPIPostReportReportTypeEnum string

const (
	VenueAPIPostReportReportTypeEnumInvalidInfo   VenueAPIPostReportReportTypeEnum = "InvalidInfo"
	VenueAPIPostReportReportTypeEnumDuplicate     VenueAPIPostReportReportTypeEnum = "Duplicate"
	VenueAPIPostReportReportTypeEnumInappropriate VenueAPIPostReportReportTypeEnum = "Inappropriate"
	VenueAPIPostReportReportTypeEnumOther         VenueAPIPostReportReportTypeEnum = "Other"
)

func (e *VenueAPIPostReportReportTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "InvalidInfo":
		fallthrough
	case "Duplicate":
		fallthrough
	case "Inappropriate":
		fallthrough
	case "Other":
		*e = VenueAPIPostReportReportTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VenueAPIPostReportReportTypeEnum: %s", s)
	}
}

type VenueAPIPostReportQueryParams struct {
	// Notes. Optional.
	Notes string `queryParam:"style=form,explode=true,name=notes"`
	// Report type.
	ReportType VenueAPIPostReportReportTypeEnum `queryParam:"style=form,explode=true,name=reportType"`
	// Version to be reported. Optional.
	VersionNumber int `queryParam:"style=form,explode=true,name=versionNumber"`
}

type VenueAPIPostReportRequest struct {
	PathParams  VenueAPIPostReportPathParams
	QueryParams VenueAPIPostReportQueryParams
}

type VenueAPIPostReportResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
