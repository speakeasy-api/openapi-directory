<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SyncFlowPreferences 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve preferences for text fields on Sync Flow
     * 
     * To enable retrieval of preferences set for the text fields on Sync Flow.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetConfigTextSyncFlowResponse
     */
	public function getConfigTextSyncFlow(
    ): \OpenAPI\OpenAPI\Models\Operations\GetConfigTextSyncFlowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sync/commerce/config/ui/text');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetConfigTextSyncFlowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->localizationInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, OpenAPI\OpenAPI\Models\Shared\Localization>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve sync flow url
     * 
     * Get a URL for Sync Flow including a one time passcode.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSyncFlowUrlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSyncFlowUrlResponse
     */
	public function getSyncFlowUrl(
        \OpenAPI\OpenAPI\Models\Operations\GetSyncFlowUrlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSyncFlowUrlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/config/sync/commerce/{commerceKey}/{accountingKey}/start', \OpenAPI\OpenAPI\Models\Operations\GetSyncFlowUrlRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSyncFlowUrlRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSyncFlowUrlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncFlowUrl = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncFlowUrl', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List visible accounts
     * 
     * Enable retrieval for accounts which are visible on sync flow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVisibleAccountsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVisibleAccountsResponse
     */
	public function getVisibleAccounts(
        \OpenAPI\OpenAPI\Models\Operations\GetVisibleAccountsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVisibleAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/clients/{clientId}/config/ui/accounts/platform/{platformKey}', \OpenAPI\OpenAPI\Models\Operations\GetVisibleAccountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVisibleAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->visibleAccounts = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VisibleAccounts', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update preferences for text fields on sync flow
     * 
     * To enable update of preferences set for the text fields on sync flow.
     * 
     * @param array<string, \OpenAPI\OpenAPI\Models\Shared\Localization> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateConfigTextSyncFlowResponse
     */
	public function updateConfigTextSyncFlow(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateConfigTextSyncFlowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sync/commerce/config/ui/text');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateConfigTextSyncFlowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->localizationInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, OpenAPI\OpenAPI\Models\Shared\Localization>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the visible accounts on Sync Flow
     * 
     * To enable update of accounts visible preferences set on Sync Flow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateVisibleAccountsSyncFlowRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateVisibleAccountsSyncFlowResponse
     */
	public function updateVisibleAccountsSyncFlow(
        \OpenAPI\OpenAPI\Models\Operations\UpdateVisibleAccountsSyncFlowRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateVisibleAccountsSyncFlowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sync/commerce/config/ui/accounts/platform/{commerceKey}', \OpenAPI\OpenAPI\Models\Operations\UpdateVisibleAccountsSyncFlowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "visibleAccounts", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateVisibleAccountsSyncFlowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->visibleAccounts = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VisibleAccounts', 'json');
            }
        }

        return $response;
    }
}