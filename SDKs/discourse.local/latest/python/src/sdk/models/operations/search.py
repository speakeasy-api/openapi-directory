"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class SearchRequest:
    
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})  
    q: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""The query string needs to be url encoded and is made up of the following options:
    - Search term. This is just a string. Usually it would be the first item in the query.
    - `@<username>`: Use the `@` followed by the username to specify posts by this user.
    - `#<category>`: Use the `#` followed by the category slug to search within this category.
    - `tags:`: `api,solved` or for posts that have all the specified tags `api+solved`.
    - `before:`: `yyyy-mm-dd`
    - `after:`: `yyyy-mm-dd`
    - `order:`: `latest`, `likes`, `views`, `latest_topic`
    - `assigned:`: username (without `@`)
    - `in:`: `title`, `likes`, `personal`, `messages`, `seen`, `unseen`, `posted`, `created`, `watching`, `tracking`, `bookmarks`, `assigned`, `unassigned`, `first`, `pinned`, `wiki`
    - `with:`: `images`
    - `status:`: `open`, `closed`, `public`, `archived`, `noreplies`, `single_user`, `solved`, `unsolved`
    - `group:`: group_name or group_id
    - `group_messages:`: group_name or group_id
    - `min_posts:`: 1
    - `max_posts:`: 10
    - `min_views:`: 1
    - `max_views:`: 10
    
    If you are using cURL you can use the `-G` and the `--data-urlencode` flags to encode the query:
    
    ```
    curl -i -sS -X GET -G \"http://localhost:4200/search.json\" \
    --data-urlencode 'q=wordpress @scossar #fun after:2020-01-01'
    ```
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Search200ApplicationJSONGroupedSearchResult:
    
    can_create_topic: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_create_topic') }})  
    category_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category_ids') }})  
    error: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})  
    group_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_ids') }})  
    more_categories: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('more_categories') }})  
    more_full_page_results: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('more_full_page_results') }})  
    more_posts: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('more_posts') }})  
    more_users: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('more_users') }})  
    post_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_ids') }})  
    search_log_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('search_log_id') }})  
    tag_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag_ids') }})  
    term: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('term') }})  
    user_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_ids') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Search200ApplicationJSON:
    r"""success response"""
    
    categories: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories') }})  
    grouped_search_result: Search200ApplicationJSONGroupedSearchResult = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grouped_search_result') }})  
    groups: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups') }})  
    posts: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posts') }})  
    tags: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags') }})  
    users: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users') }})  
    

@dataclasses.dataclass
class SearchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    search_200_application_json_object: Optional[Search200ApplicationJSON] = dataclasses.field(default=None)
    r"""success response"""  
    