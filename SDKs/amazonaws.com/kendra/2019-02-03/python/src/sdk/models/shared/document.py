"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import contenttype_enum as shared_contenttype_enum
from ..shared import documentattribute as shared_documentattribute
from ..shared import hierarchicalprincipal as shared_hierarchicalprincipal
from ..shared import principal as shared_principal
from ..shared import s3path as shared_s3path
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Document:
    r"""A document in an index."""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id') }})  
    access_control_configuration_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessControlConfigurationId'), 'exclude': lambda f: f is None }})  
    access_control_list: Optional[list[shared_principal.Principal]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessControlList'), 'exclude': lambda f: f is None }})  
    attributes: Optional[list[shared_documentattribute.DocumentAttribute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attributes'), 'exclude': lambda f: f is None }})  
    blob: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Blob'), 'exclude': lambda f: f is None }})  
    content_type: Optional[shared_contenttype_enum.ContentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContentType'), 'exclude': lambda f: f is None }})  
    hierarchical_access_control_list: Optional[list[shared_hierarchicalprincipal.HierarchicalPrincipal]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HierarchicalAccessControlList'), 'exclude': lambda f: f is None }})  
    s3_path: Optional[shared_s3path.S3Path] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3Path'), 'exclude': lambda f: f is None }})
    r"""Information required to find a specific file in an Amazon S3 bucket."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Title'), 'exclude': lambda f: f is None }})  
    