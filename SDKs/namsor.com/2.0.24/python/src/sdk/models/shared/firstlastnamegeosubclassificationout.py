"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FirstLastNameGeoSubclassificationOut:
    r"""Represents the geographic name origin at a country subclassification level (usually regional or state level)."""
    
    country_iso2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countryIso2'), 'exclude': lambda f: f is None }})
    r"""The input country ISO2 code"""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName'), 'exclude': lambda f: f is None }})
    r"""The first name (also known as given name)"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName'), 'exclude': lambda f: f is None }})
    r"""The last name (also known as family name, or surname)"""  
    probability_alt_calibrated: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('probabilityAltCalibrated'), 'exclude': lambda f: f is None }})
    r"""The calibrated probability for subclassification OR subclassificationAlt to have been guessed correctly. -1 = still calibrating."""  
    probability_calibrated: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('probabilityCalibrated'), 'exclude': lambda f: f is None }})
    r"""The calibrated probability for subclassification to have been guessed correctly. -1 = still calibrating."""  
    score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score'), 'exclude': lambda f: f is None }})
    r"""Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available."""  
    script: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('script'), 'exclude': lambda f: f is None }})  
    sub_classification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subClassification'), 'exclude': lambda f: f is None }})
    r"""Most likely subclassification ISO_3166-2 code"""  
    sub_classification_alt: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subClassificationAlt'), 'exclude': lambda f: f is None }})
    r"""Second best alternative : subclassification ISO_3166-2 code"""  
    subclassification_top: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subclassificationTop'), 'exclude': lambda f: f is None }})
    r"""List subclassification ISO_3166-2 codes (top 10)"""  
    