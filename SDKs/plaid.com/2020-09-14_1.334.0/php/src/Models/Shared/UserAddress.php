<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * UserAddress - Home address for the user.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class UserAddress
{
    /**
     * City from the end user's address
     * 
     * @var string $city
     */
	#[\JMS\Serializer\Annotation\SerializedName('city')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $city;
    
    /**
     * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * 
     * @var string $country
     */
	#[\JMS\Serializer\Annotation\SerializedName('country')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $country;
    
    /**
     * The postal code for the associated address. Between 2 and 10 alphanumeric characters. For US-based addresses this must be 5 numeric digits.
     * 
     * @var string $postalCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('postal_code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $postalCode;
    
    /**
     * An ISO 3166-2 subdivision code. Related terms would be "state", "province", "prefecture", "zone", "subdivision", etc.
     * 
     * @var string $region
     */
	#[\JMS\Serializer\Annotation\SerializedName('region')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $region;
    
    /**
     * The primary street portion of an address. If the user has submitted their address, this field will always be filled.
     * 
     * @var string $street
     */
	#[\JMS\Serializer\Annotation\SerializedName('street')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $street;
    
    /**
     * Extra street information, like an apartment or suite number.
     * 
     * @var ?string $street2
     */
	#[\JMS\Serializer\Annotation\SerializedName('street2')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $street2 = null;
    
	public function __construct()
	{
		$this->city = "";
		$this->country = "";
		$this->postalCode = "";
		$this->region = "";
		$this->street = "";
		$this->street2 = null;
	}
}
