// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectorConfigProviderEnum string

const (
	ConnectorConfigProviderEnumEksAnywhere ConnectorConfigProviderEnum = "EKS_ANYWHERE"
	ConnectorConfigProviderEnumAnthos      ConnectorConfigProviderEnum = "ANTHOS"
	ConnectorConfigProviderEnumGke         ConnectorConfigProviderEnum = "GKE"
	ConnectorConfigProviderEnumAks         ConnectorConfigProviderEnum = "AKS"
	ConnectorConfigProviderEnumOpenshift   ConnectorConfigProviderEnum = "OPENSHIFT"
	ConnectorConfigProviderEnumTanzu       ConnectorConfigProviderEnum = "TANZU"
	ConnectorConfigProviderEnumRancher     ConnectorConfigProviderEnum = "RANCHER"
	ConnectorConfigProviderEnumEc2         ConnectorConfigProviderEnum = "EC2"
	ConnectorConfigProviderEnumOther       ConnectorConfigProviderEnum = "OTHER"
)

func (e ConnectorConfigProviderEnum) ToPointer() *ConnectorConfigProviderEnum {
	return &e
}

func (e *ConnectorConfigProviderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EKS_ANYWHERE":
		fallthrough
	case "ANTHOS":
		fallthrough
	case "GKE":
		fallthrough
	case "AKS":
		fallthrough
	case "OPENSHIFT":
		fallthrough
	case "TANZU":
		fallthrough
	case "RANCHER":
		fallthrough
	case "EC2":
		fallthrough
	case "OTHER":
		*e = ConnectorConfigProviderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectorConfigProviderEnum: %v", v)
	}
}
