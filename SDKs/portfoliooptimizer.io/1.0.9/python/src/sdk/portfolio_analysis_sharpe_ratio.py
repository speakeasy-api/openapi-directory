"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class PortfolioAnalysisSharpeRatio:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_portfolio_analysis_sharpe_ratio(self, request: Any) -> operations.PostPortfolioAnalysisSharpeRatioResponse:
        r"""Sharpe Ratio
        Compute the Sharpe ratio of one or several portfolio(s) from either:
        * Portfolio assets arithmetic returns and assets covariance matrix
        * Portfolio values
        
        References
        * Carl R. Bacon, Practical Portfolio Performance Measurement and Attribution
        * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/sharpe-ratio'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisSharpeRatioResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisSharpeRatio200ApplicationJSON])
                res.post_portfolio_analysis_sharpe_ratio_200_application_json_object = out

        return res

    def post_portfolio_analysis_sharpe_ratio_bias_adjusted(self, request: operations.PostPortfolioAnalysisSharpeRatioBiasAdjustedRequestBody) -> operations.PostPortfolioAnalysisSharpeRatioBiasAdjustedResponse:
        r"""Bias-Adjusted Sharpe Ratio
        Compute the Sharpe ratio of one or several portfolio(s), adjusted for small sample bias.
        
        References
        * [Opdyke, J., Comparing Sharpe ratios: So where are the p-values?. J Asset Manag 8, 308–336 (2007)](https://link.springer.com/article/10.1057/palgrave.jam.2250084)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/sharpe-ratio/bias-adjusted'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisSharpeRatioBiasAdjustedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisSharpeRatioBiasAdjusted200ApplicationJSON])
                res.post_portfolio_analysis_sharpe_ratio_bias_adjusted_200_application_json_object = out

        return res

    def post_portfolio_analysis_sharpe_ratio_confidence_interval(self, request: operations.PostPortfolioAnalysisSharpeRatioConfidenceIntervalRequestBody) -> operations.PostPortfolioAnalysisSharpeRatioConfidenceIntervalResponse:
        r"""Sharpe Ratio Confidence Interval
        Build a confidence interval for the Sharpe ratio of one or several portfolio(s).
        
        References
        * [Opdyke, J.D., Comparing Sharpe ratios: So where are the p-values?. J Asset Manag 8, 308–336 (2007)](https://link.springer.com/article/10.1057/palgrave.jam.2250084)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/sharpe-ratio/confidence-interval'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisSharpeRatioConfidenceIntervalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisSharpeRatioConfidenceInterval200ApplicationJSON])
                res.post_portfolio_analysis_sharpe_ratio_confidence_interval_200_application_json_object = out

        return res

    def post_portfolio_analysis_sharpe_ratio_probabilistic(self, request: Any) -> operations.PostPortfolioAnalysisSharpeRatioProbabilisticResponse:
        r"""Probabilistic Sharpe Ratio
        Compute the probabilistic Sharpe ratio of one or several portfolio(s).
        
        References
        * [Opdyke, J.D., Comparing Sharpe ratios: So where are the p-values?. J Asset Manag 8, 308–336 (2007)](https://link.springer.com/article/10.1057/palgrave.jam.2250084)
        * [Bailey, David H. and Lopez de Prado, Marcos, The Sharpe Ratio Efficient Frontier (April 1, 2012). Journal of Risk, Vol. 15, No. 2, Winter 2012/13](https://ssrn.com/abstract=1821643)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/sharpe-ratio/probabilistic'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisSharpeRatioProbabilisticResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisSharpeRatioProbabilistic200ApplicationJSON])
                res.post_portfolio_analysis_sharpe_ratio_probabilistic_200_application_json_object = out

        return res

    def post_portfolio_analysis_sharpe_ratio_probabilistic_minimum_track_record_length(self, request: Any) -> operations.PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthResponse:
        r"""Minimum Track Record Length
        Compute the minimum track record length of one or several portfolio(s).
        
        References
        * [Bailey, David H. and Lopez de Prado, Marcos, The Sharpe Ratio Efficient Frontier (April 1, 2012). Journal of Risk, Vol. 15, No. 2, Winter 2012/13](https://ssrn.com/abstract=1821643)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/portfolio/analysis/sharpe-ratio/probabilistic/minimum-track-record-length'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLengthResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostPortfolioAnalysisSharpeRatioProbabilisticMinimumTrackRecordLength200ApplicationJSON])
                res.post_portfolio_analysis_sharpe_ratio_probabilistic_minimum_track_record_length_200_application_json_object = out

        return res

    