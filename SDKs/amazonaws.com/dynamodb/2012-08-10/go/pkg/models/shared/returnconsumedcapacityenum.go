// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ReturnConsumedCapacityEnum - <p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p> <ul> <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li> <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li> <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li> </ul>
type ReturnConsumedCapacityEnum string

const (
	ReturnConsumedCapacityEnumIndexes ReturnConsumedCapacityEnum = "INDEXES"
	ReturnConsumedCapacityEnumTotal   ReturnConsumedCapacityEnum = "TOTAL"
	ReturnConsumedCapacityEnumNone    ReturnConsumedCapacityEnum = "NONE"
)

func (e *ReturnConsumedCapacityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INDEXES":
		fallthrough
	case "TOTAL":
		fallthrough
	case "NONE":
		*e = ReturnConsumedCapacityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnConsumedCapacityEnum: %s", s)
	}
}
