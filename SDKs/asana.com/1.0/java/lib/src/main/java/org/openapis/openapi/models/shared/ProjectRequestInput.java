/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ProjectRequestInput - A *project* represents a prioritized list of tasks in Asana or a board with columns of tasks represented as cards. It exists in a single workspace or organization and is accessible to a subset of users in that workspace or organization, depending on its permissions.
 */
public class ProjectRequestInput {
    /**
     * True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    public Boolean archived;

    public ProjectRequestInput withArchived(Boolean archived) {
        this.archived = archived;
        return this;
    }
    
    /**
     * Color of the project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color")
    public ProjectRequestColorEnum color;

    public ProjectRequestInput withColor(ProjectRequestColorEnum color) {
        this.color = color;
        return this;
    }
    
    /**
     * *Deprecated: new integrations should prefer the `current_status_update` resource.*
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_status")
    public ProjectRequestCurrentStatusInput currentStatus;

    public ProjectRequestInput withCurrentStatus(ProjectRequestCurrentStatusInput currentStatus) {
        this.currentStatus = currentStatus;
        return this;
    }
    
    /**
     * The latest `status_update` posted to this project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_status_update")
    public ProjectRequestCurrentStatusUpdateInput currentStatusUpdate;

    public ProjectRequestInput withCurrentStatusUpdate(ProjectRequestCurrentStatusUpdateInput currentStatusUpdate) {
        this.currentStatusUpdate = currentStatusUpdate;
        return this;
    }
    
    /**
     * An object where each key is a Custom Field GID and each value is an enum GID, string, number, or object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    public java.util.Map<String, String> customFields;

    public ProjectRequestInput withCustomFields(java.util.Map<String, String> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * The default view (list, board, calendar, or timeline) of a project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_view")
    public ProjectRequestDefaultViewEnum defaultView;

    public ProjectRequestInput withDefaultView(ProjectRequestDefaultViewEnum defaultView) {
        this.defaultView = defaultView;
        return this;
    }
    
    /**
     * *Deprecated: new integrations should prefer the `due_on` field.*
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("due_date")
    public OffsetDateTime dueDate;

    public ProjectRequestInput withDueDate(OffsetDateTime dueDate) {
        this.dueDate = dueDate;
        return this;
    }
    
    /**
     * The day on which this project is due. This takes a date with format YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("due_on")
    public OffsetDateTime dueOn;

    public ProjectRequestInput withDueOn(OffsetDateTime dueOn) {
        this.dueOn = dueOn;
        return this;
    }
    
    /**
     * *Create-only*. Comma separated string of users. Followers are a subset of members who have opted in to receive "tasks added" notifications for a project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followers")
    public String followers;

    public ProjectRequestInput withFollowers(String followers) {
        this.followers = followers;
        return this;
    }
    
    /**
     * [Opt In](/docs/input-output-options). The notes of the project with formatting as HTML.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("html_notes")
    public String htmlNotes;

    public ProjectRequestInput withHtmlNotes(String htmlNotes) {
        this.htmlNotes = htmlNotes;
        return this;
    }
    
    /**
     * [Opt In](/docs/input-output-options). *Deprecated - please use a project template endpoint instead (more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432)).* Determines if the project is a template.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_template")
    public Boolean isTemplate;

    public ProjectRequestInput withIsTemplate(Boolean isTemplate) {
        this.isTemplate = isTemplate;
        return this;
    }
    
    /**
     * Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public ProjectRequestInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Free-form textual information associated with the project (ie., its description).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;

    public ProjectRequestInput withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * The current owner of the project, may be null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner")
    public String owner;

    public ProjectRequestInput withOwner(String owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * True if the project is public to its team.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public")
    public Boolean public_;

    public ProjectRequestInput withPublic(Boolean public_) {
        this.public_ = public_;
        return this;
    }
    
    /**
     * The day on which work for this project begins, or null if the project has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("start_on")
    public LocalDate startOn;

    public ProjectRequestInput withStartOn(LocalDate startOn) {
        this.startOn = startOn;
        return this;
    }
    
    /**
     * The team that this project is shared with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("team")
    public String team;

    public ProjectRequestInput withTeam(String team) {
        this.team = team;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workspace")
    public ProjectRequestWorkspaceInput workspace;

    public ProjectRequestInput withWorkspace(ProjectRequestWorkspaceInput workspace) {
        this.workspace = workspace;
        return this;
    }
    
    public ProjectRequestInput(){}
}
