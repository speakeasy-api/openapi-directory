"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from datetime import datetime
from enum import Enum
from typing import Optional

class GETPurchaseReservedInstancesOfferingActionEnum(str, Enum):
    PURCHASE_RESERVED_INSTANCES_OFFERING = 'PurchaseReservedInstancesOffering'

class GETPurchaseReservedInstancesOfferingLimitPriceCurrencyCodeEnum(str, Enum):
    r"""The currency in which the <code>limitPrice</code> amount is specified. At this time, the only supported currency is <code>USD</code>."""
    USD = 'USD'


@dataclasses.dataclass
class GETPurchaseReservedInstancesOfferingLimitPrice:
    r"""Describes the limit price of a Reserved Instance offering."""
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Amount' }})  
    currency_code: Optional[GETPurchaseReservedInstancesOfferingLimitPriceCurrencyCodeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CurrencyCode' }})  
    
class GETPurchaseReservedInstancesOfferingVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETPurchaseReservedInstancesOfferingRequest:
    
    action: GETPurchaseReservedInstancesOfferingActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    instance_count: int = dataclasses.field(metadata={'query_param': { 'field_name': 'InstanceCount', 'style': 'form', 'explode': True }})
    r"""The number of Reserved Instances to purchase."""  
    reserved_instances_offering_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'ReservedInstancesOfferingId', 'style': 'form', 'explode': True }})
    r"""The ID of the Reserved Instance offering to purchase."""  
    version: GETPurchaseReservedInstancesOfferingVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DryRun', 'style': 'form', 'explode': True }})
    r"""Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."""  
    limit_price: Optional[GETPurchaseReservedInstancesOfferingLimitPrice] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'LimitPrice', 'style': 'form', 'explode': True }})
    r"""Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices."""  
    purchase_time: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PurchaseTime', 'style': 'form', 'explode': True }})
    r"""The time at which to purchase the Reserved Instance, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z)."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETPurchaseReservedInstancesOfferingResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    