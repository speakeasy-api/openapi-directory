<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Crash 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Gets a specific group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function crashGroupsGet(
        \OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}', \OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashGroupsGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashGroupsGet200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashGroupsGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a stacktrace for a specific crash.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetStacktraceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetStacktraceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetStacktraceResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function crashGroupsGetStacktrace(
        \OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetStacktraceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetStacktraceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetStacktraceResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace', \OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetStacktraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetStacktraceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetStacktraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stacktrace = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Stacktrace', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashGroupsGetStacktraceDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashGroupsGetStacktraceDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of crash groups and whether the list contains all available groups.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashGroupsListResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function crashGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\CrashGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashGroupsListResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/crash_groups', \OpenAPI\OpenAPI\Models\Operations\CrashGroupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CrashGroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashGroupsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashGroupsList200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashGroupsListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashGroupsListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashGroupsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashGroupsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashGroupsUpdateResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function crashGroupsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\CrashGroupsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashGroupsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashGroupsUpdateResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}', \OpenAPI\OpenAPI\Models\Operations\CrashGroupsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashGroupsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashGroupsUpdate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashGroupsUpdate200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashGroupsUpdateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashGroupsUpdateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a specific crash and related attachments and blobs for an app.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashesDeleteResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function crashesDelete(
        \OpenAPI\OpenAPI\Models\Operations\CrashesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashesDeleteResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}', \OpenAPI\OpenAPI\Models\Operations\CrashesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CrashesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesDelete200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesDelete200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesDeleteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesDeleteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a specific crash for an app.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashesGetResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function crashesGet(
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashesGetResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}', \OpenAPI\OpenAPI\Models\Operations\CrashesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CrashesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crash = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Crash', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets whether the application has any crashes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetAppCrashesInfoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetAppCrashesInfoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashesGetAppCrashesInfoResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function crashesGetAppCrashesInfo(
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetAppCrashesInfoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetAppCrashesInfoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashesGetAppCrashesInfoResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/crashes_info', \OpenAPI\OpenAPI\Models\Operations\CrashesGetAppCrashesInfoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashesGetAppCrashesInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesGetAppCrashesInfo200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesGetAppCrashesInfo200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesGetAppCrashesInfoDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesGetAppCrashesInfoDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of application versions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetAppVersionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetAppVersionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashesGetAppVersionsResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function crashesGetAppVersions(
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetAppVersionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetAppVersionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashesGetAppVersionsResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/versions', \OpenAPI\OpenAPI\Models\Operations\CrashesGetAppVersionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashesGetAppVersionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesGetAppVersions200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CrashesGetAppVersions200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesGetAppVersionsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesGetAppVersionsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the URI location to download crash attachment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashAttachmentLocationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashAttachmentLocationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashAttachmentLocationResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function crashesGetCrashAttachmentLocation(
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashAttachmentLocationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashAttachmentLocationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashAttachmentLocationResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/location', \OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashAttachmentLocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashAttachmentLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesGetCrashAttachmentLocation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashAttachmentLocation200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesGetCrashAttachmentLocationDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashAttachmentLocationDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets content of the text attachment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashTextAttachmentContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashTextAttachmentContentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashTextAttachmentContentResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function crashesGetCrashTextAttachmentContent(
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashTextAttachmentContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashTextAttachmentContentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashTextAttachmentContentResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/text', \OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashTextAttachmentContentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashTextAttachmentContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->crashesGetCrashTextAttachmentContent200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesGetCrashTextAttachmentContentDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesGetCrashTextAttachmentContentDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the native log of a specific crash.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function crashesGetNativeCrash(
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native', \OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->crashesGetNativeCrash200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesGetNativeCrashDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the native log of a specific crash as a text attachment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashDownloadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashDownloadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashDownloadResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function crashesGetNativeCrashDownload(
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashDownloadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashDownloadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashDownloadResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native/download', \OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashDownloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashDownloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->crashesGetNativeCrashDownload200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesGetNativeCrashDownloadDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesGetNativeCrashDownloadDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the URI location to download json of a specific crash.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetRawCrashLocationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetRawCrashLocationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashesGetRawCrashLocationResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function crashesGetRawCrashLocation(
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetRawCrashLocationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetRawCrashLocationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashesGetRawCrashLocationResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/raw/location', \OpenAPI\OpenAPI\Models\Operations\CrashesGetRawCrashLocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashesGetRawCrashLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesGetRawCrashLocation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesGetRawCrashLocation200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesGetRawCrashLocationDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesGetRawCrashLocationDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a stacktrace for a specific crash.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetStacktraceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesGetStacktraceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashesGetStacktraceResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function crashesGetStacktrace(
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetStacktraceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashesGetStacktraceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashesGetStacktraceResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/stacktrace', \OpenAPI\OpenAPI\Models\Operations\CrashesGetStacktraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CrashesGetStacktraceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashesGetStacktraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stacktrace = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Stacktrace', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesGetStacktraceDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesGetStacktraceDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets all crashes of a group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashesListResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function crashesList(
        \OpenAPI\OpenAPI\Models\Operations\CrashesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashesListResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes', \OpenAPI\OpenAPI\Models\Operations\CrashesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CrashesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Crash>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets all attachments for a specific crash.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesListAttachmentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesListAttachmentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashesListAttachmentsResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function crashesListAttachments(
        \OpenAPI\OpenAPI\Models\Operations\CrashesListAttachmentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashesListAttachmentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashesListAttachmentsResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments', \OpenAPI\OpenAPI\Models\Operations\CrashesListAttachmentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashesListAttachmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesListAttachments200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CrashesListAttachments200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesListAttachmentsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesListAttachmentsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets missing symbol crash group by its id
     * 
     * Gets missing symbol crash group by its id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsGetResponse
     */
	public function missingSymbolGroupsGet(
        \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}', \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->missingSymbolGroupsGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsGet200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->missingSymbolGroupsGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets application level statistics for all missing symbol groups
     * 
     * Gets application level statistics for all missing symbol groups
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsInfoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsInfoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsInfoResponse
     */
	public function missingSymbolGroupsInfo(
        \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsInfoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsInfoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info', \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsInfoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->missingSymbolGroupsInfo200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsInfo200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->missingSymbolGroupsInfoDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsInfoDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     * 
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsListResponse
     */
	public function missingSymbolGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups', \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->missingSymbolGroupsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsList200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->missingSymbolGroupsListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MissingSymbolGroupsListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Commits or aborts the symbol upload process for a new set of symbols for the specified application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCompleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCompleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCompleteResponse
     */
	public function symbolUploadsComplete(
        \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCompleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCompleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCompleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}', \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCompleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCompleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsComplete200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsComplete200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsComplete400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsComplete400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsComplete403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsComplete403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsComplete500ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsComplete500ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Begins the symbol upload process for a new set of symbols for the specified application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCreateResponse
     */
	public function symbolUploadsCreate(
        \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads', \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsCreate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCreate200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsCreate400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCreate400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsCreate403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCreate403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsCreate500ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsCreate500ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a symbol upload by id for the specified application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsDeleteResponse
     */
	public function symbolUploadsDelete(
        \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}', \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsDelete200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsDelete200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsDelete403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsDelete403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsDelete404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsDelete404ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsDelete500ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsDelete500ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a symbol upload by id for the specified application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetResponse
     */
	public function symbolUploadsGet(
        \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}', \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGet200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsGet403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGet403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsGet404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGet404ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsGet500ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGet500ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the URL to download the symbol upload
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetLocationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetLocationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetLocationResponse
     */
	public function symbolUploadsGetLocation(
        \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetLocationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetLocationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location', \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetLocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsGetLocation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetLocation200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsGetLocation403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetLocation403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsGetLocation404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetLocation404ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsGetLocation500ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsGetLocation500ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of all uploads for the specified application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsListResponse
     */
	public function symbolUploadsList(
        \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads', \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SymbolUploadsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SymbolUploadsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\SymbolUploadsList200ApplicationJSON>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsList403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsList403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolUploadsList500ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolUploadsList500ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a particular symbol by id (uuid) for the provided application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SymbolsGetResponse
     */
	public function symbolsGet(
        \OpenAPI\OpenAPI\Models\Operations\SymbolsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SymbolsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SymbolsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}', \OpenAPI\OpenAPI\Models\Operations\SymbolsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SymbolsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsGet200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsGet403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsGet403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsGet404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsGet404ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsGet500ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsGet500ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the URL to download the symbol
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolsGetLocationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolsGetLocationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SymbolsGetLocationResponse
     */
	public function symbolsGetLocation(
        \OpenAPI\OpenAPI\Models\Operations\SymbolsGetLocationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SymbolsGetLocationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SymbolsGetLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location', \OpenAPI\OpenAPI\Models\Operations\SymbolsGetLocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SymbolsGetLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsGetLocation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsGetLocation200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsGetLocation403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsGetLocation403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsGetLocation404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsGetLocation404ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsGetLocation500ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsGetLocation500ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a particular symbol by id (uuid) for the provided application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolsGetStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolsGetStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SymbolsGetStatusResponse
     */
	public function symbolsGetStatus(
        \OpenAPI\OpenAPI\Models\Operations\SymbolsGetStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SymbolsGetStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SymbolsGetStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status', \OpenAPI\OpenAPI\Models\Operations\SymbolsGetStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SymbolsGetStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsGetStatus200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsGetStatus200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsGetStatus403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsGetStatus403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsGetStatus404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsGetStatus404ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsGetStatus500ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsGetStatus500ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Marks a symbol by id (uuid) as ignored
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolsIgnoreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolsIgnoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SymbolsIgnoreResponse
     */
	public function symbolsIgnore(
        \OpenAPI\OpenAPI\Models\Operations\SymbolsIgnoreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SymbolsIgnoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SymbolsIgnoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore', \OpenAPI\OpenAPI\Models\Operations\SymbolsIgnoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SymbolsIgnoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsIgnore200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsIgnore200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsIgnore403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsIgnore403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsIgnore404ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsIgnore404ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsIgnore500ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsIgnore500ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all symbols for the provided application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SymbolsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SymbolsListResponse
     */
	public function symbolsList(
        \OpenAPI\OpenAPI\Models\Operations\SymbolsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SymbolsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SymbolsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/symbols', \OpenAPI\OpenAPI\Models\Operations\SymbolsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SymbolsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\SymbolsList200ApplicationJSON>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsList403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsList403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->symbolsList500ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SymbolsList500ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}