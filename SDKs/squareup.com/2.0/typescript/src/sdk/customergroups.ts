/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class CustomerGroups {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * CreateCustomerGroup
   *
   * @remarks
   * Creates a new customer group for a business.
   *
   * The request must include the `name` value of the group.
   */
  createCustomerGroup(
    req: shared.CreateCustomerGroupRequest,
    security: operations.CreateCustomerGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateCustomerGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateCustomerGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/customers/groups";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateCustomerGroupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateCustomerGroupResponse =
        new operations.CreateCustomerGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createCustomerGroupResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateCustomerGroupResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * DeleteCustomerGroup
   *
   * @remarks
   * Deletes a customer group as identified by the `group_id` value.
   */
  deleteCustomerGroup(
    req: operations.DeleteCustomerGroupRequest,
    security: operations.DeleteCustomerGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteCustomerGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteCustomerGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customers/groups/{group_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteCustomerGroupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteCustomerGroupResponse =
        new operations.DeleteCustomerGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteCustomerGroupResponse = utils.objectToClass(
              httpRes?.data,
              shared.DeleteCustomerGroupResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * ListCustomerGroups
   *
   * @remarks
   * Retrieves the list of customer groups of a business.
   */
  listCustomerGroups(
    req: operations.ListCustomerGroupsRequest,
    security: operations.ListCustomerGroupsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListCustomerGroupsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListCustomerGroupsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/customers/groups";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListCustomerGroupsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListCustomerGroupsResponse =
        new operations.ListCustomerGroupsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCustomerGroupsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListCustomerGroupsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveCustomerGroup
   *
   * @remarks
   * Retrieves a specific customer group as identified by the `group_id` value.
   */
  retrieveCustomerGroup(
    req: operations.RetrieveCustomerGroupRequest,
    security: operations.RetrieveCustomerGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveCustomerGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveCustomerGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customers/groups/{group_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveCustomerGroupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveCustomerGroupResponse =
        new operations.RetrieveCustomerGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveCustomerGroupResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveCustomerGroupResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * UpdateCustomerGroup
   *
   * @remarks
   * Updates a customer group as identified by the `group_id` value.
   */
  updateCustomerGroup(
    req: operations.UpdateCustomerGroupRequest,
    security: operations.UpdateCustomerGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateCustomerGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateCustomerGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/customers/groups/{group_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateCustomerGroupRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateCustomerGroupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateCustomerGroupResponse =
        new operations.UpdateCustomerGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateCustomerGroupResponse = utils.objectToClass(
              httpRes?.data,
              shared.UpdateCustomerGroupResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
