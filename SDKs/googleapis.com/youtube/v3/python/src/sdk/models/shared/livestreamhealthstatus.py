"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import livestreamconfigurationissue as shared_livestreamconfigurationissue
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LiveStreamHealthStatusStatusEnum(str, Enum):
    r"""The status code of this stream"""
    GOOD = 'good'
    OK = 'ok'
    BAD = 'bad'
    NO_DATA = 'noData'
    REVOKED = 'revoked'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LiveStreamHealthStatus:
    
    configuration_issues: Optional[list[shared_livestreamconfigurationissue.LiveStreamConfigurationIssue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configurationIssues'), 'exclude': lambda f: f is None }})
    r"""The configurations issues on this stream"""  
    last_update_time_seconds: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdateTimeSeconds'), 'exclude': lambda f: f is None }})
    r"""The last time this status was updated (in seconds)"""  
    status: Optional[LiveStreamHealthStatusStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status code of this stream"""  
    