/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Teamdrives {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deprecated use drives.delete instead.
   */
  driveTeamdrivesDelete(
    req: operations.DriveTeamdrivesDeleteRequest,
    security: operations.DriveTeamdrivesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DriveTeamdrivesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DriveTeamdrivesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teamdrives/{teamDriveId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DriveTeamdrivesDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DriveTeamdrivesDeleteResponse =
        new operations.DriveTeamdrivesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Deprecated use drives.get instead.
   */
  driveTeamdrivesGet(
    req: operations.DriveTeamdrivesGetRequest,
    security: operations.DriveTeamdrivesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DriveTeamdrivesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DriveTeamdrivesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teamdrives/{teamDriveId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DriveTeamdrivesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DriveTeamdrivesGetResponse =
        new operations.DriveTeamdrivesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamDrive = utils.objectToClass(
              httpRes?.data,
              shared.TeamDrive
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deprecated use drives.insert instead.
   */
  driveTeamdrivesInsert(
    req: operations.DriveTeamdrivesInsertRequest,
    security: operations.DriveTeamdrivesInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DriveTeamdrivesInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DriveTeamdrivesInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/teamdrives";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "teamDrive",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DriveTeamdrivesInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DriveTeamdrivesInsertResponse =
        new operations.DriveTeamdrivesInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamDrive = utils.objectToClass(
              httpRes?.data,
              shared.TeamDrive
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deprecated use drives.list instead.
   */
  driveTeamdrivesList(
    req: operations.DriveTeamdrivesListRequest,
    security: operations.DriveTeamdrivesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DriveTeamdrivesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DriveTeamdrivesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/teamdrives";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DriveTeamdrivesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DriveTeamdrivesListResponse =
        new operations.DriveTeamdrivesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamDriveList = utils.objectToClass(
              httpRes?.data,
              shared.TeamDriveList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deprecated use drives.update instead.
   */
  driveTeamdrivesUpdate(
    req: operations.DriveTeamdrivesUpdateRequest,
    security: operations.DriveTeamdrivesUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DriveTeamdrivesUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DriveTeamdrivesUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teamdrives/{teamDriveId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "teamDrive",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DriveTeamdrivesUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DriveTeamdrivesUpdateResponse =
        new operations.DriveTeamdrivesUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamDrive = utils.objectToClass(
              httpRes?.data,
              shared.TeamDrive
            );
          }
          break;
      }

      return res;
    });
  }
}
