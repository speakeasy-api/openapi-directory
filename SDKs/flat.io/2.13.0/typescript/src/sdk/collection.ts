/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Collections let you organize your content in a Flat account. They work like a regular _folder_ with some specificities:
 *
 * @remarks
 *   - Our design goal here is to create a system similar to a _book_ or a _playlist of songs_.
 *   - Collections can't have children collections (except the `trash` and `sharedWithMe` that are special collections).
 *   - Any score can be added to one or multiple collections. For example, you can have a single private score in two or more collections, or add any public or shared scores to one of your collections.
 *
 * All the collections don't have the same capabilities. Capabilities depend on the `type` of collection and the `rights` you have on a collection. They are available when [listing the collection](#operation/listCollections) or [retrieving the collection details](#operation/getCollection).
 *
 * At this time, only `private` privacy mode is widely available. Privacy modes `public`, `organizationPublic` and `privateLink`, and 1:1 sharing will be available in an upcoming update later this year.
 *
 */
export class Collection {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add a score to the collection
   *
   * @remarks
   * This operation will add a score to a collection. The default behavior will make the score available across multiple collections.
   * You must have the capability `canAddScores` on the provided `collection` to perform the action.
   *
   */
  addScoreToCollection(
    req: operations.AddScoreToCollectionRequest,
    security: operations.AddScoreToCollectionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddScoreToCollectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddScoreToCollectionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/collections/{collection}/scores/{score}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddScoreToCollectionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddScoreToCollectionResponse =
        new operations.AddScoreToCollectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scoreDetails = utils.objectToClass(
              httpRes?.data,
              shared.ScoreDetails
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.flatErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.FlatErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new collection
   *
   * @remarks
   * This method will create a new collection and add it to your `root` collection.
   *
   */
  createCollection(
    req: shared.CollectionCreation,
    security: operations.CreateCollectionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateCollectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CollectionCreation(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/collections";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateCollectionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateCollectionResponse =
        new operations.CreateCollectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.collection = utils.objectToClass(
              httpRes?.data,
              shared.Collection
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.flatErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.FlatErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete the collection
   *
   * @remarks
   * This method will schedule the deletion of the collection. Until deleted, the collection will be available in the `trash`.
   *
   */
  deleteCollection(
    req: operations.DeleteCollectionRequest,
    security: operations.DeleteCollectionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteCollectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteCollectionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/collections/{collection}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteCollectionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteCollectionResponse =
        new operations.DeleteCollectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.flatErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.FlatErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a score from the collection
   *
   * @remarks
   * This method will delete a score from the collection. Unlike [`DELETE /scores/{score}`](#operation/deleteScore), this score will not remove the score from your account, but only from the collection.
   * This can be used to *move* a score from one collection to another, or simply remove a score from one collection when this one is contained in multiple collections.
   *
   */
  deleteScoreFromCollection(
    req: operations.DeleteScoreFromCollectionRequest,
    security: operations.DeleteScoreFromCollectionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteScoreFromCollectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteScoreFromCollectionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/collections/{collection}/scores/{score}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteScoreFromCollectionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteScoreFromCollectionResponse =
        new operations.DeleteScoreFromCollectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.flatErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.FlatErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a collection's metadata
   */
  editCollection(
    req: operations.EditCollectionRequest,
    security: operations.EditCollectionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EditCollectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EditCollectionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/collections/{collection}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "collectionModification",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EditCollectionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EditCollectionResponse =
        new operations.EditCollectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.collection = utils.objectToClass(
              httpRes?.data,
              shared.Collection
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.flatErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.FlatErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get collection details
   */
  getCollection(
    req: operations.GetCollectionRequest,
    security: operations.GetCollectionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCollectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCollectionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/collections/{collection}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetCollectionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCollectionResponse =
        new operations.GetCollectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.collection = utils.objectToClass(
              httpRes?.data,
              shared.Collection
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.flatErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.FlatErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the scores contained in a collection
   *
   * @remarks
   * Use this method to list the scores contained in a collection.
   * If no sort option is provided, the scores are sorted by `modificationDate` `desc`.
   *
   */
  listCollectionScores(
    req: operations.ListCollectionScoresRequest,
    security: operations.ListCollectionScoresSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListCollectionScoresResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListCollectionScoresRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/collections/{collection}/scores",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListCollectionScoresSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListCollectionScoresResponse =
        new operations.ListCollectionScoresResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scoreDetails = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.scoreDetails = utils.objectToClass(
              httpRes?.data,
              shared.ScoreDetails,
              resFieldDepth
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.flatErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.FlatErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the collections
   *
   * @remarks
   * Use this method to list the user's collections contained in `parent` (by default in the `root` collection).
   * If no sort option is provided, the collections are sorted by `creationDate` `desc`.
   *
   * Note that this method will not include the `parent` collection in the listing.
   * For example, if you need the details of the `root` collection, you can use `GET /v2/collections/root`.
   *
   */
  listCollections(
    req: operations.ListCollectionsRequest,
    security: operations.ListCollectionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListCollectionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListCollectionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/collections";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListCollectionsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListCollectionsResponse =
        new operations.ListCollectionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.collections = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.collections = utils.objectToClass(
              httpRes?.data,
              shared.Collection,
              resFieldDepth
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.flatErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.FlatErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Untrash a collection
   *
   * @remarks
   * This method will restore the collection by removing it from the `trash` and add it back to the `root` collection.
   *
   */
  untrashCollection(
    req: operations.UntrashCollectionRequest,
    security: operations.UntrashCollectionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UntrashCollectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UntrashCollectionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/collections/{collection}/untrash",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UntrashCollectionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UntrashCollectionResponse =
        new operations.UntrashCollectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.flatErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.FlatErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
