// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EmployeesFilterEmploymentStatusEnum - Employment status to filter on
type EmployeesFilterEmploymentStatusEnum string

const (
	EmployeesFilterEmploymentStatusEnumActive     EmployeesFilterEmploymentStatusEnum = "active"
	EmployeesFilterEmploymentStatusEnumInactive   EmployeesFilterEmploymentStatusEnum = "inactive"
	EmployeesFilterEmploymentStatusEnumTerminated EmployeesFilterEmploymentStatusEnum = "terminated"
	EmployeesFilterEmploymentStatusEnumOther      EmployeesFilterEmploymentStatusEnum = "other"
)

func (e EmployeesFilterEmploymentStatusEnum) ToPointer() *EmployeesFilterEmploymentStatusEnum {
	return &e
}

func (e *EmployeesFilterEmploymentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		fallthrough
	case "terminated":
		fallthrough
	case "other":
		*e = EmployeesFilterEmploymentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeesFilterEmploymentStatusEnum: %v", v)
	}
}

// EmployeesFilter - Apply filters
type EmployeesFilter struct {
	// Company ID to filter on
	CompanyID *string `queryParam:"name=company_id"`
	// ID of the department to filter on
	DepartmentID *string `queryParam:"name=department_id"`
	// Email to filter on
	Email *string `queryParam:"name=email"`
	// Employee number to filter on
	EmployeeNumber *string `queryParam:"name=employee_number"`
	// Employment status to filter on
	EmploymentStatus *EmployeesFilterEmploymentStatusEnum `queryParam:"name=employment_status"`
	// First Name to filter on
	FirstName *string `queryParam:"name=first_name"`
	// Last Name to filter on
	LastName *string `queryParam:"name=last_name"`
	// Manager id to filter on
	ManagerID *string `queryParam:"name=manager_id"`
	// Job title to filter on
	Title *string `queryParam:"name=title"`
}
