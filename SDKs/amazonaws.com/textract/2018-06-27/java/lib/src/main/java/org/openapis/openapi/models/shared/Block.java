/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Block - &lt;p&gt;A &lt;code&gt;Block&lt;/code&gt; represents items that are recognized in a document within a group of pixels close to each other. The information returned in a &lt;code&gt;Block&lt;/code&gt; object depends on the type of operation. In text detection for documents (for example &lt;a&gt;DetectDocumentText&lt;/a&gt;), you get information about the detected words and lines of text. In text analysis (for example &lt;a&gt;AnalyzeDocument&lt;/a&gt;), you can also get information about the fields, tables, and selection elements that are detected in the document.&lt;/p&gt; &lt;p&gt;An array of &lt;code&gt;Block&lt;/code&gt; objects is returned by both synchronous and asynchronous operations. In synchronous operations, such as &lt;a&gt;DetectDocumentText&lt;/a&gt;, the array of &lt;code&gt;Block&lt;/code&gt; objects is the entire set of results. In asynchronous operations, such as &lt;a&gt;GetDocumentAnalysis&lt;/a&gt;, the array is returned over one or more responses.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works.html"&gt;How Amazon Textract Works&lt;/a&gt;.&lt;/p&gt;
 */
public class Block {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BlockType")
    public BlockTypeEnum blockType;
    public Block withBlockType(BlockTypeEnum blockType) {
        this.blockType = blockType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ColumnIndex")
    public Long columnIndex;
    public Block withColumnIndex(Long columnIndex) {
        this.columnIndex = columnIndex;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ColumnSpan")
    public Long columnSpan;
    public Block withColumnSpan(Long columnSpan) {
        this.columnSpan = columnSpan;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Confidence")
    public Float confidence;
    public Block withConfidence(Float confidence) {
        this.confidence = confidence;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EntityTypes")
    public EntityTypeEnum[] entityTypes;
    public Block withEntityTypes(EntityTypeEnum[] entityTypes) {
        this.entityTypes = entityTypes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Geometry")
    public Geometry geometry;
    public Block withGeometry(Geometry geometry) {
        this.geometry = geometry;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public String id;
    public Block withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Page")
    public Long page;
    public Block withPage(Long page) {
        this.page = page;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Query")
    public Query query;
    public Block withQuery(Query query) {
        this.query = query;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Relationships")
    public Relationship[] relationships;
    public Block withRelationships(Relationship[] relationships) {
        this.relationships = relationships;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RowIndex")
    public Long rowIndex;
    public Block withRowIndex(Long rowIndex) {
        this.rowIndex = rowIndex;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RowSpan")
    public Long rowSpan;
    public Block withRowSpan(Long rowSpan) {
        this.rowSpan = rowSpan;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SelectionStatus")
    public SelectionStatusEnum selectionStatus;
    public Block withSelectionStatus(SelectionStatusEnum selectionStatus) {
        this.selectionStatus = selectionStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Text")
    public String text;
    public Block withText(String text) {
        this.text = text;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TextType")
    public TextTypeEnum textType;
    public Block withTextType(TextTypeEnum textType) {
        this.textType = textType;
        return this;
    }
    
}
