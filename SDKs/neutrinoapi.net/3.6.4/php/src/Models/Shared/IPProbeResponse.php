<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class IPProbeResponse
{
    /**
     * The age of the autonomous system (AS) in number of years since registration
     * 
     * @var int $asAge
     */
	#[\JMS\Serializer\Annotation\SerializedName('as-age')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $asAge;
    
    /**
     * The autonomous system (AS) CIDR range
     * 
     * @var string $asCidr
     */
	#[\JMS\Serializer\Annotation\SerializedName('as-cidr')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $asCidr;
    
    /**
     * The autonomous system (AS) ISO 2-letter country code
     * 
     * @var string $asCountryCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('as-country-code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $asCountryCode;
    
    /**
     * The autonomous system (AS) ISO 3-letter country code
     * 
     * @var string $asCountryCode3
     */
	#[\JMS\Serializer\Annotation\SerializedName('as-country-code3')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $asCountryCode3;
    
    /**
     * The autonomous system (AS) description / company name
     * 
     * @var string $asDescription
     */
	#[\JMS\Serializer\Annotation\SerializedName('as-description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $asDescription;
    
    /**
     * Array of all the domains associated with the autonomous system (AS)
     * 
     * @var array<string> $asDomains
     */
	#[\JMS\Serializer\Annotation\SerializedName('as-domains')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    public array $asDomains;
    
    /**
     * The autonomous system (AS) number
     * 
     * @var string $asn
     */
	#[\JMS\Serializer\Annotation\SerializedName('asn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $asn;
    
    /**
     * Full city name (if detectable)
     * 
     * @var string $city
     */
	#[\JMS\Serializer\Annotation\SerializedName('city')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $city;
    
    /**
     * ISO 2-letter continent code
     * 
     * @var string $continentCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('continent-code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $continentCode;
    
    /**
     * Full country name
     * 
     * @var string $country
     */
	#[\JMS\Serializer\Annotation\SerializedName('country')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $country;
    
    /**
     * ISO 2-letter country code
     * 
     * @var string $countryCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('country-code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $countryCode;
    
    /**
     * ISO 3-letter country code
     * 
     * @var string $countryCode3
     */
	#[\JMS\Serializer\Annotation\SerializedName('country-code3')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $countryCode3;
    
    /**
     * ISO 4217 currency code associated with the country
     * 
     * @var string $currencyCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('currency-code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $currencyCode;
    
    /**
     * The IPs host domain
     * 
     * @var string $hostDomain
     */
	#[\JMS\Serializer\Annotation\SerializedName('host-domain')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $hostDomain;
    
    /**
     * The IPs full hostname (PTR)
     * 
     * @var string $hostname
     */
	#[\JMS\Serializer\Annotation\SerializedName('hostname')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $hostname;
    
    /**
     * The IP address
     * 
     * @var string $ip
     */
	#[\JMS\Serializer\Annotation\SerializedName('ip')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $ip;
    
    /**
     * True if this is a bogon IP address such as a private network, local network or reserved address
     * 
     * @var bool $isBogon
     */
	#[\JMS\Serializer\Annotation\SerializedName('is-bogon')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isBogon;
    
    /**
     * True if this IP belongs to a hosting company. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types
     * 
     * @var bool $isHosting
     */
	#[\JMS\Serializer\Annotation\SerializedName('is-hosting')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isHosting;
    
    /**
     * True if this IP belongs to an internet service provider. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types
     * 
     * @var bool $isIsp
     */
	#[\JMS\Serializer\Annotation\SerializedName('is-isp')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isIsp;
    
    /**
     * True if this IP ia a proxy
     * 
     * @var bool $isProxy
     */
	#[\JMS\Serializer\Annotation\SerializedName('is-proxy')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isProxy;
    
    /**
     * True if this is a <a href="https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses">IPv4 mapped IPv6 address</a>
     * 
     * @var bool $isV4Mapped
     */
	#[\JMS\Serializer\Annotation\SerializedName('is-v4-mapped')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isV4Mapped;
    
    /**
     * True if this is a IPv6 address. False if IPv4
     * 
     * @var bool $isV6
     */
	#[\JMS\Serializer\Annotation\SerializedName('is-v6')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isV6;
    
    /**
     * True if this IP ia a VPN
     * 
     * @var bool $isVpn
     */
	#[\JMS\Serializer\Annotation\SerializedName('is-vpn')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isVpn;
    
    /**
     * A description of the provider (usually extracted from the providers website)
     * 
     * @var string $providerDescription
     */
	#[\JMS\Serializer\Annotation\SerializedName('provider-description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $providerDescription;
    
    /**
     * The domain name of the provider
     * 
     * @var string $providerDomain
     */
	#[\JMS\Serializer\Annotation\SerializedName('provider-domain')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $providerDomain;
    
    /**
     * The detected provider type, possible values are: <br> <ul> <li>isp - IP belongs to an internet service provider. This includes both mobile, home and business internet providers</li> <li>hosting - IP belongs to a hosting company. This includes website hosting, cloud computing platforms and colocation facilities</li> <li>vpn - IP belongs to a VPN provider</li> <li>proxy - IP belongs to a proxy service. This includes HTTP/SOCKS proxies and browser based proxies</li> <li>university - IP belongs to a university/college/campus</li> <li>government - IP belongs to a government department. This includes military facilities</li> <li>commercial - IP belongs to a commercial entity such as a corporate headquarters or company office</li> <li>unknown - could not identify the provider type</li> </ul>
     * 
     * @var string $providerType
     */
	#[\JMS\Serializer\Annotation\SerializedName('provider-type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $providerType;
    
    /**
     * The website URL for the provider
     * 
     * @var string $providerWebsite
     */
	#[\JMS\Serializer\Annotation\SerializedName('provider-website')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $providerWebsite;
    
    /**
     * Full region name (if detectable)
     * 
     * @var string $region
     */
	#[\JMS\Serializer\Annotation\SerializedName('region')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $region;
    
    /**
     * ISO 3166-2 region code (if detectable)
     * 
     * @var string $regionCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('region-code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $regionCode;
    
    /**
     * True if this is a valid IPv4 or IPv6 address
     * 
     * @var bool $valid
     */
	#[\JMS\Serializer\Annotation\SerializedName('valid')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $valid;
    
    /**
     * The domain of the VPN provider (may be empty if the VPN domain is not detectable)
     * 
     * @var string $vpnDomain
     */
	#[\JMS\Serializer\Annotation\SerializedName('vpn-domain')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $vpnDomain;
    
	public function __construct()
	{
		$this->asAge = 0;
		$this->asCidr = "";
		$this->asCountryCode = "";
		$this->asCountryCode3 = "";
		$this->asDescription = "";
		$this->asDomains = [];
		$this->asn = "";
		$this->city = "";
		$this->continentCode = "";
		$this->country = "";
		$this->countryCode = "";
		$this->countryCode3 = "";
		$this->currencyCode = "";
		$this->hostDomain = "";
		$this->hostname = "";
		$this->ip = "";
		$this->isBogon = false;
		$this->isHosting = false;
		$this->isIsp = false;
		$this->isProxy = false;
		$this->isV4Mapped = false;
		$this->isV6 = false;
		$this->isVpn = false;
		$this->providerDescription = "";
		$this->providerDomain = "";
		$this->providerType = "";
		$this->providerWebsite = "";
		$this->region = "";
		$this->regionCode = "";
		$this->valid = false;
		$this->vpnDomain = "";
	}
}
