<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GoogleCloudRetailV2alphaAttributesConfig - Catalog level attribute config.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GoogleCloudRetailV2alphaAttributesConfig
{
    /**
     * Output only. The AttributeConfigLevel used for this catalog.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GoogleCloudRetailV2alphaAttributesConfigAttributeConfigLevelEnum $attributeConfigLevel
     */
	#[\JMS\Serializer\Annotation\SerializedName('attributeConfigLevel')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\GoogleCloudRetailV2alphaAttributesConfigAttributeConfigLevelEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GoogleCloudRetailV2alphaAttributesConfigAttributeConfigLevelEnum $attributeConfigLevel = null;
    
    /**
     * Enable attribute(s) config at catalog level. For example, indexable, dynamic_facetable, or searchable for each attribute. The key is catalog attribute's name. For example: `color`, `brands`, `attributes.custom_attribute`, such as `attributes.xyz`. The maximum number of catalog attributes allowed in a request is 1000.
     * 
     * @var ?array<string, \OpenAPI\OpenAPI\Models\Shared\GoogleCloudRetailV2alphaCatalogAttribute> $catalogAttributes
     */
	#[\JMS\Serializer\Annotation\SerializedName('catalogAttributes')]
    #[\JMS\Serializer\Annotation\Type('array<string, OpenAPI\OpenAPI\Models\Shared\GoogleCloudRetailV2alphaCatalogAttribute>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $catalogAttributes = null;
    
    /**
     * Required. Immutable. The fully qualified resource name of the attribute config. Format: `projects/* /locations/* /catalogs/* /attributesConfig`
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
	public function __construct()
	{
		$this->attributeConfigLevel = null;
		$this->catalogAttributes = null;
		$this->name = null;
	}
}
