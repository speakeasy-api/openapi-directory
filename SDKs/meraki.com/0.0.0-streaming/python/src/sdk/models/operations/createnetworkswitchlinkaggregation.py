"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSwitchLinkAggregationRequestBodySwitchPorts:
    
    port_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portId') }})
    r"""Port identifier of switch port. For modules, the identifier is \\"SlotNumber_ModuleType_PortNumber\\" (Ex: \\"1_8X10G_1\\"), otherwise it is just the port number (Ex: \\"8\\")."""  
    serial: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial') }})
    r"""Serial number of the switch."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSwitchLinkAggregationRequestBodySwitchProfilePorts:
    
    port_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portId') }})
    r"""Port identifier of switch port. For modules, the identifier is \\"SlotNumber_ModuleType_PortNumber\\" (Ex: \\"1_8X10G_1\\"), otherwise it is just the port number (Ex: \\"8\\")."""  
    profile: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profile') }})
    r"""Profile identifier."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSwitchLinkAggregationRequestBody:
    
    switch_ports: Optional[list[CreateNetworkSwitchLinkAggregationRequestBodySwitchPorts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switchPorts'), 'exclude': lambda f: f is None }})
    r"""Array of switch or stack ports for creating aggregation group. Minimum 2 and maximum 8 ports are supported."""  
    switch_profile_ports: Optional[list[CreateNetworkSwitchLinkAggregationRequestBodySwitchProfilePorts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switchProfilePorts'), 'exclude': lambda f: f is None }})
    r"""Array of switch profile ports for creating aggregation group. Minimum 2 and maximum 8 ports are supported."""  
    

@dataclasses.dataclass
class CreateNetworkSwitchLinkAggregationRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[CreateNetworkSwitchLinkAggregationRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class CreateNetworkSwitchLinkAggregationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_network_switch_link_aggregation_201_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    