/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class CreateSubscriberRequestBody extends SpeakeasyBase {
  /**
   * The Amazon S3 or Lake Formation access type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessTypes" })
  accessTypes?: shared.AccessTypeEnum[];

  /**
   * The Amazon Web Services account ID used to access your data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountId" })
  accountId: string;

  /**
   * The external ID of the subscriber. This lets the user that is assuming the role assert the circumstances in which they are operating. It also provides a way for the account owner to permit the role to be assumed only under specific circumstances.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "externalId" })
  externalId: string;

  /**
   * The supported Amazon Web Services from which logs and events are collected. Security Lake supports log and event collection for natively supported Amazon Web Services.
   */
  @SpeakeasyMetadata({ elemType: shared.SourceType })
  @Expose({ name: "sourceTypes" })
  @Type(() => shared.SourceType)
  sourceTypes: shared.SourceType[];

  /**
   * The description for your subscriber account in Security Lake.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriberDescription" })
  subscriberDescription?: string;

  /**
   * The name of your Security Lake subscriber account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriberName" })
  subscriberName: string;
}

export class CreateSubscriberRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateSubscriberRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateSubscriberResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * AccountNotFoundException
   */
  @SpeakeasyMetadata()
  accountNotFoundException?: any;

  /**
   * BucketNotFoundException
   */
  @SpeakeasyMetadata()
  bucketNotFoundException?: any;

  /**
   * ConflictSubscriptionException
   */
  @SpeakeasyMetadata()
  conflictSubscriptionException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createSubscriberResponse?: shared.CreateSubscriberResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * InvalidInputException
   */
  @SpeakeasyMetadata()
  invalidInputException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
