/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * HttpRedirectAction - Specifies settings for an HTTP redirect.
 */
public class HttpRedirectAction {
    /**
     * The host that is used in the redirect response instead of the one that was supplied in the request. The value must be from 1 to 255 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostRedirect")
    public String hostRedirect;

    public HttpRedirectAction withHostRedirect(String hostRedirect) {
        this.hostRedirect = hostRedirect;
        return this;
    }
    
    /**
     * If set to true, the URL scheme in the redirected request is set to HTTPS. If set to false, the URL scheme of the redirected request remains the same as that of the request. This must only be set for URL maps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("httpsRedirect")
    public Boolean httpsRedirect;

    public HttpRedirectAction withHttpsRedirect(Boolean httpsRedirect) {
        this.httpsRedirect = httpsRedirect;
        return this;
    }
    
    /**
     * The path that is used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pathRedirect")
    public String pathRedirect;

    public HttpRedirectAction withPathRedirect(String pathRedirect) {
        this.pathRedirect = pathRedirect;
        return this;
    }
    
    /**
     * The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefixRedirect")
    public String prefixRedirect;

    public HttpRedirectAction withPrefixRedirect(String prefixRedirect) {
        this.prefixRedirect = prefixRedirect;
        return this;
    }
    
    /**
     * The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method is retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method is retained. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirectResponseCode")
    public HttpRedirectActionRedirectResponseCodeEnum redirectResponseCode;

    public HttpRedirectAction withRedirectResponseCode(HttpRedirectActionRedirectResponseCodeEnum redirectResponseCode) {
        this.redirectResponseCode = redirectResponseCode;
        return this;
    }
    
    /**
     * If set to true, any accompanying query portion of the original URL is removed before redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stripQuery")
    public Boolean stripQuery;

    public HttpRedirectAction withStripQuery(Boolean stripQuery) {
        this.stripQuery = stripQuery;
        return this;
    }
    
    public HttpRedirectAction(){}
}
