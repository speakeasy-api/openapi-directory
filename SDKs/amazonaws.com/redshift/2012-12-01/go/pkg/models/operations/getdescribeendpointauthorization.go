// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeEndpointAuthorizationActionEnum
type GETDescribeEndpointAuthorizationActionEnum string

const (
	GETDescribeEndpointAuthorizationActionEnumDescribeEndpointAuthorization GETDescribeEndpointAuthorizationActionEnum = "DescribeEndpointAuthorization"
)

func (e GETDescribeEndpointAuthorizationActionEnum) ToPointer() *GETDescribeEndpointAuthorizationActionEnum {
	return &e
}

func (e *GETDescribeEndpointAuthorizationActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DescribeEndpointAuthorization":
		*e = GETDescribeEndpointAuthorizationActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeEndpointAuthorizationActionEnum: %v", v)
	}
}

// GETDescribeEndpointAuthorizationVersionEnum
type GETDescribeEndpointAuthorizationVersionEnum string

const (
	GETDescribeEndpointAuthorizationVersionEnumTwoThousandAndTwelve1201 GETDescribeEndpointAuthorizationVersionEnum = "2012-12-01"
)

func (e GETDescribeEndpointAuthorizationVersionEnum) ToPointer() *GETDescribeEndpointAuthorizationVersionEnum {
	return &e
}

func (e *GETDescribeEndpointAuthorizationVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2012-12-01":
		*e = GETDescribeEndpointAuthorizationVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeEndpointAuthorizationVersionEnum: %v", v)
	}
}

type GETDescribeEndpointAuthorizationRequest struct {
	// The Amazon Web Services account ID of either the cluster owner (grantor) or grantee. If <code>Grantee</code> parameter is true, then the <code>Account</code> value is of the grantor.
	Account *string                                    `queryParam:"style=form,explode=true,name=Account"`
	Action  GETDescribeEndpointAuthorizationActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The cluster identifier of the cluster to access.
	ClusterIdentifier *string `queryParam:"style=form,explode=true,name=ClusterIdentifier"`
	// Indicates whether to check authorization from a grantor or grantee point of view. If true, Amazon Redshift returns endpoint authorizations that you've been granted. If false (default), checks authorization from a grantor point of view.
	Grantee *bool `queryParam:"style=form,explode=true,name=Grantee"`
	// An optional pagination token provided by a previous <code>DescribeEndpointAuthorization</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter.
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a <code>Marker</code> is included in the response so that the remaining results can be retrieved.
	MaxRecords        *int64                                      `queryParam:"style=form,explode=true,name=MaxRecords"`
	Version           GETDescribeEndpointAuthorizationVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeEndpointAuthorizationResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
