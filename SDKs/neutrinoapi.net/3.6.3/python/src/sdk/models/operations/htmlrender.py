"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import apierror as shared_apierror
from typing import Optional


@dataclasses.dataclass
class HTMLRenderRequestBody:
    
    content: str = dataclasses.field(metadata={'form': { 'field_name': 'content' }})
    r"""The HTML content. This can be either a URL to load from, a file upload (multipart/form-data) or an HTML content string"""  
    css: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'css' }})
    r"""Inject custom CSS into the HTML. e.g. 'body { background-color: red;}'"""  
    delay: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'delay' }})
    r"""Number of seconds to wait before rendering the page (can be useful for pages with animations etc)"""  
    footer: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'footer' }})
    r"""The footer HTML to insert into each page. The following dynamic tags are supported: {date}, {title}, {url}, {pageNumber}, {totalPages}"""  
    format: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'format' }})
    r"""Which format to output, available options are: PDF, PNG, JPG"""  
    grayscale: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'grayscale' }})
    r"""Render the final document in grayscale"""  
    header: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'header' }})
    r"""The header HTML to insert into each page. The following dynamic tags are supported: {date}, {title}, {url}, {pageNumber}, {totalPages}"""  
    ignore_certificate_errors: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ignore-certificate-errors' }})
    r"""Ignore any TLS/SSL certificate errors"""  
    image_height: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'image-height' }})
    r"""If rendering to an image format (PNG or JPG) use this image height (in pixels). The default is automatic which dynamically sets the image height based on the content"""  
    image_width: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'image-width' }})
    r"""If rendering to an image format (PNG or JPG) use this image width (in pixels)"""  
    landscape: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'landscape' }})
    r"""Set the document to landscape orientation"""  
    margin: Optional[float] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'margin' }})
    r"""The document margin (in mm)"""  
    margin_bottom: Optional[float] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'margin-bottom' }})
    r"""The document bottom margin (in mm)"""  
    margin_left: Optional[float] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'margin-left' }})
    r"""The document left margin (in mm)"""  
    margin_right: Optional[float] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'margin-right' }})
    r"""The document right margin (in mm)"""  
    margin_top: Optional[float] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'margin-top' }})
    r"""The document top margin (in mm)"""  
    page_height: Optional[float] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'page-height' }})
    r"""Set the PDF page height explicitly (in mm)"""  
    page_size: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'page-size' }})
    r"""Set the document page size, can be one of: A0 - A9, B0 - B10, Comm10E, DLE or Letter"""  
    page_width: Optional[float] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'page-width' }})
    r"""Set the PDF page width explicitly (in mm)"""  
    timeout: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'timeout' }})
    r"""Timeout in seconds. Give up if still trying to load the HTML content after this number of seconds"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'title' }})
    r"""The document title"""  
    zoom: Optional[float] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'zoom' }})
    r"""Set the zoom factor when rendering the page (2.0 for double size, 0.5 for half size)"""  
    

@dataclasses.dataclass
class HTMLRenderResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_error: Optional[shared_apierror.APIError] = dataclasses.field(default=None)
    r"""Your API request has been rejected. Check error code for details"""  
    html_render_200_application_json_binary_string: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    