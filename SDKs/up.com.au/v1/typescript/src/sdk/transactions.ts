/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Transactions represent the movement of money into and out of an
 *
 * @remarks
 * account. They have many characteristics that vary depending on
 * the kind of transaction. Transactions may be temporarily `HELD`
 * (pending) or `SETTLED`, typically depending on which payment
 * method was used at the point of sale.
 *
 */
export class Transactions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List transactions by account
   *
   * @remarks
   * Retrieve a list of all transactions for a specific account. The returned
   * list is [paginated](#pagination) and can be scrolled by following the
   * `next` and `prev` links where present. To narrow the results to a
   * specific date range pass one or both of `filter[since]` and
   * `filter[until]` in the query string. These filter parameters
   * **should not** be used for pagination. Results are ordered newest first
   * to oldest last.
   *
   */
  getAccountsAccountIdTransactions(
    req: operations.GetAccountsAccountIdTransactionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountsAccountIdTransactionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountsAccountIdTransactionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/transactions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountsAccountIdTransactionsResponse =
        new operations.GetAccountsAccountIdTransactionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTransactionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTransactionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List transactions
   *
   * @remarks
   * Retrieve a list of all transactions across all accounts for the currently
   * authenticated user. The returned list is [paginated](#pagination) and can
   * be scrolled by following the `next` and `prev` links where present. To
   * narrow the results to a specific date range pass one or both of
   * `filter[since]` and `filter[until]` in the query string. These filter
   * parameters **should not** be used for pagination. Results are ordered
   * newest first to oldest last.
   *
   */
  getTransactions(
    req: operations.GetTransactionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTransactionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTransactionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/transactions";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTransactionsResponse =
        new operations.GetTransactionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTransactionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTransactionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve transaction
   *
   * @remarks
   * Retrieve a specific transaction by providing its unique identifier.
   *
   */
  getTransactionsId(
    req: operations.GetTransactionsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTransactionsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTransactionsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/transactions/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTransactionsIdResponse =
        new operations.GetTransactionsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTransactionResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetTransactionResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
