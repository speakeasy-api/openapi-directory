"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Jobs:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def youtubereporting_jobs_create(self, request: operations.YoutubereportingJobsCreateRequest, security: operations.YoutubereportingJobsCreateSecurity) -> operations.YoutubereportingJobsCreateResponse:
        r"""Creates a job and returns it."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/jobs'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "job", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.YoutubereportingJobsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubereportingJobsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Job])
                res.job = out

        return res

    def youtubereporting_jobs_delete(self, request: operations.YoutubereportingJobsDeleteRequest, security: operations.YoutubereportingJobsDeleteSecurity) -> operations.YoutubereportingJobsDeleteResponse:
        r"""Deletes a job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.YoutubereportingJobsDeleteRequest, base_url, '/v1/jobs/{jobId}', request)
        
        query_params = utils.get_query_params(operations.YoutubereportingJobsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubereportingJobsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def youtubereporting_jobs_get(self, request: operations.YoutubereportingJobsGetRequest, security: operations.YoutubereportingJobsGetSecurity) -> operations.YoutubereportingJobsGetResponse:
        r"""Gets a job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.YoutubereportingJobsGetRequest, base_url, '/v1/jobs/{jobId}', request)
        
        query_params = utils.get_query_params(operations.YoutubereportingJobsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubereportingJobsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Job])
                res.job = out

        return res

    def youtubereporting_jobs_list(self, request: operations.YoutubereportingJobsListRequest, security: operations.YoutubereportingJobsListSecurity) -> operations.YoutubereportingJobsListResponse:
        r"""Lists jobs."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/jobs'
        
        query_params = utils.get_query_params(operations.YoutubereportingJobsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubereportingJobsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListJobsResponse])
                res.list_jobs_response = out

        return res

    def youtubereporting_jobs_reports_get(self, request: operations.YoutubereportingJobsReportsGetRequest, security: operations.YoutubereportingJobsReportsGetSecurity) -> operations.YoutubereportingJobsReportsGetResponse:
        r"""Gets the metadata of a specific report."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.YoutubereportingJobsReportsGetRequest, base_url, '/v1/jobs/{jobId}/reports/{reportId}', request)
        
        query_params = utils.get_query_params(operations.YoutubereportingJobsReportsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubereportingJobsReportsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Report])
                res.report = out

        return res

    def youtubereporting_jobs_reports_list(self, request: operations.YoutubereportingJobsReportsListRequest, security: operations.YoutubereportingJobsReportsListSecurity) -> operations.YoutubereportingJobsReportsListResponse:
        r"""Lists reports created by a specific job. Returns NOT_FOUND if the job does not exist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.YoutubereportingJobsReportsListRequest, base_url, '/v1/jobs/{jobId}/reports', request)
        
        query_params = utils.get_query_params(operations.YoutubereportingJobsReportsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubereportingJobsReportsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListReportsResponse])
                res.list_reports_response = out

        return res

    