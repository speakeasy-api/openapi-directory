/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AccountTaxTaxRule - Tax calculation rule to apply in a state or province (US only).
 */
public class AccountTaxTaxRule {
    /**
     * Country code in which tax is applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;
    public AccountTaxTaxRule withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * Required. State (or province) is which the tax is applicable, described by its location ID (also called criteria ID).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationId")
    public String locationId;
    public AccountTaxTaxRule withLocationId(String locationId) {
        this.locationId = locationId;
        return this;
    }
    
    /**
     * Explicit tax rate in percent, represented as a floating point number without the percentage character. Must not be negative.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratePercent")
    public String ratePercent;
    public AccountTaxTaxRule withRatePercent(String ratePercent) {
        this.ratePercent = ratePercent;
        return this;
    }
    
    /**
     * If true, shipping charges are also taxed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippingTaxed")
    public Boolean shippingTaxed;
    public AccountTaxTaxRule withShippingTaxed(Boolean shippingTaxed) {
        this.shippingTaxed = shippingTaxed;
        return this;
    }
    
    /**
     * Whether the tax rate is taken from a global tax table or specified explicitly.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useGlobalRate")
    public Boolean useGlobalRate;
    public AccountTaxTaxRule withUseGlobalRate(Boolean useGlobalRate) {
        this.useGlobalRate = useGlobalRate;
        return this;
    }
    
}
