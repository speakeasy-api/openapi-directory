"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import offeringclasstype_enum as shared_offeringclasstype_enum
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class DescribeReservedInstancesRequestFilters:
    r"""<p>A filter name and value pair that is used to return a more specific list of results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.</p> <p>If you specify multiple filters, the filters are joined with an <code>AND</code>, and the request returns only results that match all of the specified filters.</p>"""
    
    name: Optional[str] = dataclasses.field(default=None)  
    values: Optional[list[str]] = dataclasses.field(default=None)  
    
class DescribeReservedInstancesRequestOfferingTypeEnum(str, Enum):
    r"""The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the <code>Medium Utilization</code> Reserved Instance offering type."""
    HEAVY_UTILIZATION = 'Heavy Utilization'
    MEDIUM_UTILIZATION = 'Medium Utilization'
    LIGHT_UTILIZATION = 'Light Utilization'
    NO_UPFRONT = 'No Upfront'
    PARTIAL_UPFRONT = 'Partial Upfront'
    ALL_UPFRONT = 'All Upfront'


@dataclasses.dataclass
class DescribeReservedInstancesRequest:
    r"""Contains the parameters for DescribeReservedInstances."""
    
    dry_run: Optional[bool] = dataclasses.field(default=None)  
    filters: Optional[list[DescribeReservedInstancesRequestFilters]] = dataclasses.field(default=None)  
    offering_class: Optional[shared_offeringclasstype_enum.OfferingClassTypeEnum] = dataclasses.field(default=None)  
    offering_type: Optional[DescribeReservedInstancesRequestOfferingTypeEnum] = dataclasses.field(default=None)  
    reserved_instances_ids: Optional[list[str]] = dataclasses.field(default=None)  
    