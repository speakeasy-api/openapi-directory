"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import fixedandvariableclickmodelinfo as shared_fixedandvariableclickmodelinfo
from ..shared import paymentmethod_enum as shared_paymentmethod_enum
from ..shared import variablemodelinfo as shared_variablemodelinfo
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContractCommitmentInfo:
    r"""Describe the commitment information related to the offer."""
    
    commercial_creator_user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commercialCreatorUserId'), 'exclude': lambda f: f is None }})
    r"""The commercial that is responsible of the creation of your account"""  
    commercial_user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commercialUserId'), 'exclude': lambda f: f is None }})
    r"""Your current commercial user id"""  
    commitment_calculated_finish_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commitmentCalculatedFinishDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The commitment end date related to the offer"""  
    commitment_period_in_month: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commitmentPeriodInMonth'), 'exclude': lambda f: f is None }})
    r"""The commitment period in month related to the offer"""  
    contract_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contractType'), 'exclude': lambda f: f is None }})
    r"""Internal usage: Old offer type. Your contract type"""  
    coupon_offer_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('couponOfferCode'), 'exclude': lambda f: f is None }})
    r"""Your special coupon offer identifier"""  
    current_contract_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentContractId'), 'exclude': lambda f: f is None }})
    r"""Your current contract id"""  
    current_contract_termination_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentContractTerminationDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The current contract termination date"""  
    current_customer_payment_method: Optional[shared_paymentmethod_enum.PaymentMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentCustomerPaymentMethod'), 'exclude': lambda f: f is None }})
    r"""Payment method"""  
    fixed_and_variable_click_info: Optional[shared_fixedandvariableclickmodelinfo.FixedAndVariableClickModelInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fixedAndVariableClickInfo'), 'exclude': lambda f: f is None }})
    r"""Internal usage: Old offer type. Describe the fix and variable model information"""  
    is_customer_wants_to_terminate_his_contract: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isCustomerWantsToTerminateHisContract'), 'exclude': lambda f: f is None }})
    r"""If true, this means you want to leave us and that's sad... :'-("""  
    is_model_must_be_transmitted_in_new_contract: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isModelMustBeTransmittedInNewContract'), 'exclude': lambda f: f is None }})
    r"""Internal usage: Old offer type. Is the current contract model needs to be converted into a new contract type"""  
    min_billing_period_in_months: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBillingPeriodInMonths'), 'exclude': lambda f: f is None }})
    r"""The minimum billing period in month authorized for this offer."""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""Interal usage: Old offer type. The model description"""  
    new_contract_start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newContractStartDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start date related to the offer"""  
    offer_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offerId'), 'exclude': lambda f: f is None }})
    r"""The offer id based on /offers. Not a free offer of course."""  
    offer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offerName'), 'exclude': lambda f: f is None }})
    r"""The offer Name"""  
    payment_delay_in_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentDelayInDays'), 'exclude': lambda f: f is None }})
    r"""The payment delay in days related to the offer"""  
    payment_method_authorized: Optional[shared_paymentmethod_enum.PaymentMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentMethodAuthorized'), 'exclude': lambda f: f is None }})
    r"""Payment method"""  
    requested_payment_method: Optional[shared_paymentmethod_enum.PaymentMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestedPaymentMethod'), 'exclude': lambda f: f is None }})
    r"""Payment method"""  
    trial_period_finish_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trialPeriodFinishDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The trial period end date related to the offer"""  
    trial_period_in_month: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trialPeriodInMonth'), 'exclude': lambda f: f is None }})
    r"""The trial period in month related to the offer"""  
    variable_model_info: Optional[shared_variablemodelinfo.VariableModelInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('variableModelInfo'), 'exclude': lambda f: f is None }})
    r"""Internal usage: Old offer type. Describe the fix and variable model information"""  
    