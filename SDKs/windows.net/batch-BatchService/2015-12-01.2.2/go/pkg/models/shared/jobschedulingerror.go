// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// JobSchedulingErrorCategoryEnum - Gets or sets the category of the job scheduling error.
type JobSchedulingErrorCategoryEnum string

const (
	JobSchedulingErrorCategoryEnumUsererror   JobSchedulingErrorCategoryEnum = "usererror"
	JobSchedulingErrorCategoryEnumServererror JobSchedulingErrorCategoryEnum = "servererror"
	JobSchedulingErrorCategoryEnumUnmapped    JobSchedulingErrorCategoryEnum = "unmapped"
)

func (e *JobSchedulingErrorCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "usererror":
		fallthrough
	case "servererror":
		fallthrough
	case "unmapped":
		*e = JobSchedulingErrorCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JobSchedulingErrorCategoryEnum: %s", s)
	}
}

// JobSchedulingError - An error encountered by the Batch service when scheduling a job.
type JobSchedulingError struct {
	// Gets or sets the category of the job scheduling error.
	Category JobSchedulingErrorCategoryEnum `json:"category"`
	// Gets or sets an identifier for the job scheduling error.  Codes are invariant and are intended to be consumed programmatically.
	Code *string `json:"code,omitempty"`
	// Gets or sets a list of additional error details related to the scheduling error.
	Details []NameValuePair `json:"details,omitempty"`
	// Gets or sets a message describing the job scheduling error, intended to be suitable for display in a user interface.
	Message *string `json:"message,omitempty"`
}
