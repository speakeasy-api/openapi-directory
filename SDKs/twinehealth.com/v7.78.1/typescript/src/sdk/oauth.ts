/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Authentication operations
 */
export class Oauth {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create an oauth token
   *
   * @remarks
   * Create an OAuth 2.0 Bearer token. A valid bearer token is required for all other API requests.
   *
   * Be sure to set the header `Content-Type: "application/vnd.api+json"`. Otherwise, you will get an error
   * 403 Forbidden. Using `Content-Type: "application/json"` is permitted (to support older oauth clients) but when
   * using `application/json` the body should have a body in the following format instead of nesting under
   * `data.attributes`:
   * ```
   * {
   *   "grant_type": "client_credentials",
   *   "client_id": "95c78ab2-167f-40b8-8bec-8398d4b87454",
   *   "client_secret": "35d18dc9-a3dd-4948-b787-063a490b9354"
   * }
   * ```
   *
   */
  createToken(
    req: operations.CreateTokenRequest,
    security: operations.CreateTokenSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/oauth/token";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createTokenRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateTokenSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateTokenResponse =
        new operations.CreateTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.createTokenResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateTokenResponse
            );
          }
          break;
        case [401, 403, 409].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.createOrUpdateErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateOrUpdateErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the groups for a token
   *
   * @remarks
   * Get the list of groups a token can be used to access.
   */
  fetchTokenGroups(
    req: operations.FetchTokenGroupsRequest,
    security: operations.FetchTokenGroupsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchTokenGroupsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchTokenGroupsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/oauth/token/{id}/groups",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchTokenGroupsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchTokenGroupsResponse =
        new operations.FetchTokenGroupsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.fetchGroupsResponse = utils.objectToClass(
              httpRes?.data,
              shared.FetchGroupsResponse
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.fetchErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.FetchErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the organization for a token
   *
   * @remarks
   * Get the organization a token can be used to access.
   */
  fetchTokenOrganization(
    req: operations.FetchTokenOrganizationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchTokenOrganizationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchTokenOrganizationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/oauth/token/{id}/organization",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchTokenOrganizationResponse =
        new operations.FetchTokenOrganizationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.fetchOrganizationResponse = utils.objectToClass(
              httpRes?.data,
              shared.FetchOrganizationResponse
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/vnd.api+json`)) {
            res.fetchErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.FetchErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
