// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListKeysQueryParams struct {
	// Pagination limit
	Limit *string `queryParam:"style=form,explode=true,name=Limit"`
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
}

// ListKeysXAmzTargetEnum
type ListKeysXAmzTargetEnum string

const (
	ListKeysXAmzTargetEnumTrentServiceListKeys ListKeysXAmzTargetEnum = "TrentService.ListKeys"
)

func (e *ListKeysXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TrentService.ListKeys":
		*e = ListKeysXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListKeysXAmzTargetEnum: %s", s)
	}
}

type ListKeysHeaders struct {
	XAmzAlgorithm     *string                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListKeysXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListKeysRequest struct {
	QueryParams ListKeysQueryParams
	Headers     ListKeysHeaders
	Request     shared.ListKeysRequest `request:"mediaType=application/json"`
}

type ListKeysResponse struct {
	ContentType string
	// DependencyTimeoutException
	DependencyTimeoutException interface{}
	// InvalidMarkerException
	InvalidMarkerException interface{}
	// KMSInternalException
	KMSInternalException interface{}
	// Success
	ListKeysResponse *shared.ListKeysResponse
	StatusCode       int
	RawResponse      *http.Response
}
