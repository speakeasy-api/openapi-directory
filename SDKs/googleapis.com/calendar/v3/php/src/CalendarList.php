<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CalendarList 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Removes a calendar from the user's calendar list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListDeleteResponse
     */
	public function calendarCalendarListDelete(
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/me/calendarList/{calendarId}', \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns a calendar from the user's calendar list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListGetResponse
     */
	public function calendarCalendarListGet(
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/me/calendarList/{calendarId}', \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calendarListEntry = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CalendarListEntry', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts an existing calendar into the user's calendar list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListInsertResponse
     */
	public function calendarCalendarListInsert(
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/me/calendarList');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "calendarListEntry", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calendarListEntry = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CalendarListEntry', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the calendars on the user's calendar list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListListResponse
     */
	public function calendarCalendarListList(
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/me/calendarList');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calendarList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CalendarList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing calendar on the user's calendar list. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListPatchResponse
     */
	public function calendarCalendarListPatch(
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/me/calendarList/{calendarId}', \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "calendarListEntry", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calendarListEntry = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CalendarListEntry', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing calendar on the user's calendar list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListUpdateResponse
     */
	public function calendarCalendarListUpdate(
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/me/calendarList/{calendarId}', \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "calendarListEntry", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calendarListEntry = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CalendarListEntry', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Watch for changes to CalendarList resources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListWatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListWatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListWatchResponse
     */
	public function calendarCalendarListWatch(
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListWatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListWatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListWatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/me/calendarList/watch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channel", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListWatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarCalendarListWatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Channel', 'json');
            }
        }

        return $response;
    }
}