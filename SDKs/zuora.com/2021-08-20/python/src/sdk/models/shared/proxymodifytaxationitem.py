"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProxyModifyTaxationItem:
    r"""Container for custom fields of a Taxation Item object."""
    
    accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountingCode'), 'exclude': lambda f: f is None }})
    r"""The Chart of Accounts"""  
    exempt_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExemptAmount'), 'exclude': lambda f: f is None }})
    r"""The calculated tax amount excluded due to the exemption.
    **Character limit**: 16 **Values**: a decimal value
    """  
    jurisdiction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Jurisdiction'), 'exclude': lambda f: f is None }})
    r"""The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    **Character limit**: 32 **Values**: a string of 32 characterrs or fewer
    """  
    location_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LocationCode'), 'exclude': lambda f: f is None }})
    r"""The identifier for the location based on the value of the `TaxCode` field.
    **Character limit**: 32 **Values**: automatically generated
    """  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The name of the tax rate, such as sales tax or GST. This name is displayed on invoices.
    **Character limit**: 128 **Values**: a string of 128 characters or fewer
    """  
    tax_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxAmount'), 'exclude': lambda f: f is None }})
    r"""The amount of the tax applied to the charge.
    **Character limit**: 16 **Values**: a decimal value
    """  
    tax_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxCode'), 'exclude': lambda f: f is None }})
    r"""The tax code identifies which tax rules and tax rates to apply to a specific charge.
    **Character limit**: 32 **Values**: a string of 32 characters or fewer
    """  
    tax_code_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxCodeDescription'), 'exclude': lambda f: f is None }})
    r"""The description for the tax code.
    **Character limit**: 255 **Values**: a string of 255 characters or fewer
    """  
    tax_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date that the tax is applied to the charge, in `yyyy-mm-dd` format.
    **Character limit**: 29
    """  
    tax_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxRate'), 'exclude': lambda f: f is None }})
    r"""The tax rate applied to the charge.
    **Character limit**: 16 **Values**: a valid decimal value
    """  
    tax_rate_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxRateDescription'), 'exclude': lambda f: f is None }})
    r"""The description of the tax rate.
    **Character limit**: 255 **Values**: a string of 255 characters or fewer
    """  
    tax_rate_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxRateType'), 'exclude': lambda f: f is None }})
    r"""The type of the tax rate applied to the charge.
    **Character limit**: 10 **Values**: `Percentage`, `FlatFee`
    """  
    