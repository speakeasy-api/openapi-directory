<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Payments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * CancelPayment
     * 
     * Cancels (voids) a payment. You can use this endpoint to cancel a payment with 
     * the APPROVED `status`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelPaymentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelPaymentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CancelPaymentResponse
     */
	public function cancelPayment(
        \OpenAPI\OpenAPI\Models\Operations\CancelPaymentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CancelPaymentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CancelPaymentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/payments/{payment_id}/cancel', \OpenAPI\OpenAPI\Models\Operations\CancelPaymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CancelPaymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cancelPaymentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CancelPaymentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CancelPaymentByIdempotencyKey
     * 
     * Cancels (voids) a payment identified by the idempotency key that is specified in the
     * request.
     * 
     * Use this method when the status of a `CreatePayment` request is unknown (for example, after you send a
     * `CreatePayment` request, a network error occurs and you do not get a response). In this case, you can
     * direct Square to cancel the payment using this endpoint. In the request, you provide the same
     * idempotency key that you provided in your `CreatePayment` request that you want to cancel. After
     * canceling the payment, you can submit your `CreatePayment` request again.
     * 
     * Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint
     * returns successfully.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CancelPaymentByIdempotencyKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelPaymentByIdempotencyKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CancelPaymentByIdempotencyKeyResponse
     */
	public function cancelPaymentByIdempotencyKey(
        \OpenAPI\OpenAPI\Models\Shared\CancelPaymentByIdempotencyKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CancelPaymentByIdempotencyKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CancelPaymentByIdempotencyKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/payments/cancel');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CancelPaymentByIdempotencyKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cancelPaymentByIdempotencyKeyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CancelPaymentByIdempotencyKeyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CompletePayment
     * 
     * Completes (captures) a payment.
     * By default, payments are set to complete immediately after they are created.
     * 
     * You can use this endpoint to complete a payment with the APPROVED `status`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompletePaymentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompletePaymentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompletePaymentResponse
     */
	public function completePayment(
        \OpenAPI\OpenAPI\Models\Operations\CompletePaymentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompletePaymentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompletePaymentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/payments/{payment_id}/complete', \OpenAPI\OpenAPI\Models\Operations\CompletePaymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompletePaymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->completePaymentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CompletePaymentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CreatePayment
     * 
     * Creates a payment using the provided source. You can use this endpoint 
     * to charge a card (credit/debit card or    
     * Square gift card) or record a payment that the seller received outside of Square 
     * (cash payment from a buyer or a payment that an external entity 
     * processed on behalf of the seller).
     * 
     * The endpoint creates a 
     * `Payment` object and returns it in the response.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreatePaymentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePaymentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePaymentResponse
     */
	public function createPayment(
        \OpenAPI\OpenAPI\Models\Shared\CreatePaymentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreatePaymentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePaymentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/payments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePaymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createPaymentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreatePaymentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * GetPayment
     * 
     * Retrieves details for a specific payment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPaymentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPaymentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPaymentResponse
     */
	public function getPayment(
        \OpenAPI\OpenAPI\Models\Operations\GetPaymentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPaymentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPaymentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/payments/{payment_id}', \OpenAPI\OpenAPI\Models\Operations\GetPaymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPaymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPaymentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetPaymentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UpdatePayment
     * 
     * Updates a payment with the APPROVED status.
     * You can update the `amount_money` and `tip_money` using this endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentResponse
     */
	public function updatePayment(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/payments/{payment_id}', \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updatePaymentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updatePaymentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdatePaymentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListPayments
     * 
     * Retrieves a list of payments taken by the account making the request.
     * 
     * Results are eventually consistent, and new payments or changes to payments might take several
     * seconds to appear.
     * 
     * The maximum results per page is 100.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2PaymentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2PaymentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2PaymentsResponse
     */
	public function getV2Payments(
        \OpenAPI\OpenAPI\Models\Operations\GetV2PaymentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetV2PaymentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2PaymentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/payments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV2PaymentsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2PaymentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPaymentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPaymentsResponse', 'json');
            }
        }

        return $response;
    }
}