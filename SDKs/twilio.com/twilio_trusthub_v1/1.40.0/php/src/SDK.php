<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const CREATE_CUSTOMER_PROFILE_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const CREATE_CUSTOMER_PROFILE_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const CREATE_CUSTOMER_PROFILE_ENTITY_ASSIGNMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const CREATE_CUSTOMER_PROFILE_EVALUATION_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const CREATE_END_USER_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const CREATE_SUPPORTING_DOCUMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const CREATE_TRUST_PRODUCT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const CREATE_TRUST_PRODUCT_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const CREATE_TRUST_PRODUCT_ENTITY_ASSIGNMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const CREATE_TRUST_PRODUCT_EVALUATION_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const DELETE_CUSTOMER_PROFILE_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const DELETE_CUSTOMER_PROFILE_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const DELETE_CUSTOMER_PROFILE_ENTITY_ASSIGNMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const DELETE_END_USER_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const DELETE_SUPPORTING_DOCUMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const DELETE_TRUST_PRODUCT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const DELETE_TRUST_PRODUCT_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const DELETE_TRUST_PRODUCT_ENTITY_ASSIGNMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const FETCH_CUSTOMER_PROFILE_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const FETCH_CUSTOMER_PROFILE_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const FETCH_CUSTOMER_PROFILE_ENTITY_ASSIGNMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const FETCH_CUSTOMER_PROFILE_EVALUATION_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const FETCH_END_USER_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const FETCH_END_USER_TYPE_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const FETCH_POLICIES_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const FETCH_SUPPORTING_DOCUMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const FETCH_SUPPORTING_DOCUMENT_TYPE_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const FETCH_TRUST_PRODUCT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const FETCH_TRUST_PRODUCT_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const FETCH_TRUST_PRODUCT_ENTITY_ASSIGNMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const FETCH_TRUST_PRODUCT_EVALUATION_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const LIST_CUSTOMER_PROFILE_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const LIST_CUSTOMER_PROFILE_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const LIST_CUSTOMER_PROFILE_ENTITY_ASSIGNMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const LIST_CUSTOMER_PROFILE_EVALUATION_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const LIST_END_USER_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const LIST_END_USER_TYPE_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const LIST_POLICIES_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const LIST_SUPPORTING_DOCUMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const LIST_SUPPORTING_DOCUMENT_TYPE_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const LIST_TRUST_PRODUCT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const LIST_TRUST_PRODUCT_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const LIST_TRUST_PRODUCT_ENTITY_ASSIGNMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const LIST_TRUST_PRODUCT_EVALUATION_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const UPDATE_CUSTOMER_PROFILE_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const UPDATE_END_USER_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const UPDATE_SUPPORTING_DOCUMENT_SERVERS = [
		'https://trusthub.twilio.com',
	];
	
	public const UPDATE_TRUST_PRODUCT_SERVERS = [
		'https://trusthub.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Create a new Customer-Profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileCreateCustomerProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileResponse
     */
	public function createCustomerProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileCreateCustomerProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileResponse
    {
        $baseUrl = SDK::CREATE_CUSTOMER_PROFILE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CustomerProfiles');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1CustomerProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1CustomerProfile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Assigned Item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileChannelEndpointAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileChannelEndpointAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileChannelEndpointAssignmentResponse
     */
	public function createCustomerProfileChannelEndpointAssignment(
        \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileChannelEndpointAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileChannelEndpointAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileChannelEndpointAssignmentResponse
    {
        $baseUrl = SDK::CREATE_CUSTOMER_PROFILE_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments', \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileChannelEndpointAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileChannelEndpointAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Assigned Item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileEntityAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileEntityAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileEntityAssignmentResponse
     */
	public function createCustomerProfileEntityAssignment(
        \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileEntityAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileEntityAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileEntityAssignmentResponse
    {
        $baseUrl = SDK::CREATE_CUSTOMER_PROFILE_ENTITY_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments', \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileEntityAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileEntityAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1CustomerProfileCustomerProfileEntityAssignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1CustomerProfileCustomerProfileEntityAssignment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Evaluation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileEvaluationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileEvaluationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileEvaluationResponse
     */
	public function createCustomerProfileEvaluation(
        \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileEvaluationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileEvaluationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileEvaluationResponse
    {
        $baseUrl = SDK::CREATE_CUSTOMER_PROFILE_EVALUATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations', \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileEvaluationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCustomerProfileEvaluationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1CustomerProfileCustomerProfileEvaluation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1CustomerProfileCustomerProfileEvaluation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new End User.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEndUserCreateEndUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEndUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEndUserResponse
     */
	public function createEndUser(
        \OpenAPI\OpenAPI\Models\Operations\CreateEndUserCreateEndUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateEndUserSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEndUserResponse
    {
        $baseUrl = SDK::CREATE_END_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/EndUsers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEndUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1EndUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1EndUser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Supporting Document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSupportingDocumentCreateSupportingDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSupportingDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSupportingDocumentResponse
     */
	public function createSupportingDocument(
        \OpenAPI\OpenAPI\Models\Operations\CreateSupportingDocumentCreateSupportingDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSupportingDocumentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSupportingDocumentResponse
    {
        $baseUrl = SDK::CREATE_SUPPORTING_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SupportingDocuments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSupportingDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1SupportingDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1SupportingDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Customer-Profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductCreateTrustProductRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductResponse
     */
	public function createTrustProduct(
        \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductCreateTrustProductRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductResponse
    {
        $baseUrl = SDK::CREATE_TRUST_PRODUCT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/TrustProducts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1TrustProduct = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1TrustProduct', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Assigned Item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductChannelEndpointAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductChannelEndpointAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductChannelEndpointAssignmentResponse
     */
	public function createTrustProductChannelEndpointAssignment(
        \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductChannelEndpointAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductChannelEndpointAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductChannelEndpointAssignmentResponse
    {
        $baseUrl = SDK::CREATE_TRUST_PRODUCT_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments', \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductChannelEndpointAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductChannelEndpointAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1TrustProductTrustProductChannelEndpointAssignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1TrustProductTrustProductChannelEndpointAssignment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Assigned Item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductEntityAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductEntityAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductEntityAssignmentResponse
     */
	public function createTrustProductEntityAssignment(
        \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductEntityAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductEntityAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductEntityAssignmentResponse
    {
        $baseUrl = SDK::CREATE_TRUST_PRODUCT_ENTITY_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/TrustProducts/{TrustProductSid}/EntityAssignments', \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductEntityAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductEntityAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1TrustProductTrustProductEntityAssignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1TrustProductTrustProductEntityAssignment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Evaluation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductEvaluationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductEvaluationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductEvaluationResponse
     */
	public function createTrustProductEvaluation(
        \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductEvaluationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductEvaluationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductEvaluationResponse
    {
        $baseUrl = SDK::CREATE_TRUST_PRODUCT_EVALUATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/TrustProducts/{TrustProductSid}/Evaluations', \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductEvaluationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTrustProductEvaluationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1TrustProductTrustProductEvaluation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1TrustProductTrustProductEvaluation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a specific Customer-Profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileResponse
     */
	public function deleteCustomerProfile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileResponse
    {
        $baseUrl = SDK::DELETE_CUSTOMER_PROFILE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CustomerProfiles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove an Assignment Item Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileChannelEndpointAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileChannelEndpointAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileChannelEndpointAssignmentResponse
     */
	public function deleteCustomerProfileChannelEndpointAssignment(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileChannelEndpointAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileChannelEndpointAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileChannelEndpointAssignmentResponse
    {
        $baseUrl = SDK::DELETE_CUSTOMER_PROFILE_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileChannelEndpointAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileChannelEndpointAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove an Assignment Item Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileEntityAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileEntityAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileEntityAssignmentResponse
     */
	public function deleteCustomerProfileEntityAssignment(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileEntityAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileEntityAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileEntityAssignmentResponse
    {
        $baseUrl = SDK::DELETE_CUSTOMER_PROFILE_ENTITY_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileEntityAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerProfileEntityAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific End User.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEndUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEndUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteEndUserResponse
     */
	public function deleteEndUser(
        \OpenAPI\OpenAPI\Models\Operations\DeleteEndUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteEndUserSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteEndUserResponse
    {
        $baseUrl = SDK::DELETE_END_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/EndUsers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteEndUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteEndUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Supporting Document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSupportingDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSupportingDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSupportingDocumentResponse
     */
	public function deleteSupportingDocument(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSupportingDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSupportingDocumentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSupportingDocumentResponse
    {
        $baseUrl = SDK::DELETE_SUPPORTING_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SupportingDocuments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteSupportingDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSupportingDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Customer-Profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductResponse
     */
	public function deleteTrustProduct(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductResponse
    {
        $baseUrl = SDK::DELETE_TRUST_PRODUCT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/TrustProducts/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove an Assignment Item Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductChannelEndpointAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductChannelEndpointAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductChannelEndpointAssignmentResponse
     */
	public function deleteTrustProductChannelEndpointAssignment(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductChannelEndpointAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductChannelEndpointAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductChannelEndpointAssignmentResponse
    {
        $baseUrl = SDK::DELETE_TRUST_PRODUCT_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductChannelEndpointAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductChannelEndpointAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove an Assignment Item Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductEntityAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductEntityAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductEntityAssignmentResponse
     */
	public function deleteTrustProductEntityAssignment(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductEntityAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductEntityAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductEntityAssignmentResponse
    {
        $baseUrl = SDK::DELETE_TRUST_PRODUCT_ENTITY_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/TrustProducts/{TrustProductSid}/EntityAssignments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductEntityAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTrustProductEntityAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Fetch a specific Customer-Profile instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileResponse
     */
	public function fetchCustomerProfile(
        \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileResponse
    {
        $baseUrl = SDK::FETCH_CUSTOMER_PROFILE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CustomerProfiles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1CustomerProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1CustomerProfile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch specific Assigned Item Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileChannelEndpointAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileChannelEndpointAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileChannelEndpointAssignmentResponse
     */
	public function fetchCustomerProfileChannelEndpointAssignment(
        \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileChannelEndpointAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileChannelEndpointAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileChannelEndpointAssignmentResponse
    {
        $baseUrl = SDK::FETCH_CUSTOMER_PROFILE_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileChannelEndpointAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileChannelEndpointAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch specific Assigned Item Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileEntityAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileEntityAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileEntityAssignmentResponse
     */
	public function fetchCustomerProfileEntityAssignment(
        \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileEntityAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileEntityAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileEntityAssignmentResponse
    {
        $baseUrl = SDK::FETCH_CUSTOMER_PROFILE_ENTITY_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileEntityAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileEntityAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1CustomerProfileCustomerProfileEntityAssignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1CustomerProfileCustomerProfileEntityAssignment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch specific Evaluation Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileEvaluationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileEvaluationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileEvaluationResponse
     */
	public function fetchCustomerProfileEvaluation(
        \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileEvaluationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileEvaluationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileEvaluationResponse
    {
        $baseUrl = SDK::FETCH_CUSTOMER_PROFILE_EVALUATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileEvaluationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCustomerProfileEvaluationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1CustomerProfileCustomerProfileEvaluation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1CustomerProfileCustomerProfileEvaluation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch specific End User Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEndUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEndUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchEndUserResponse
     */
	public function fetchEndUser(
        \OpenAPI\OpenAPI\Models\Operations\FetchEndUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchEndUserSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchEndUserResponse
    {
        $baseUrl = SDK::FETCH_END_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/EndUsers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchEndUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchEndUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1EndUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1EndUser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific End-User Type Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEndUserTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEndUserTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchEndUserTypeResponse
     */
	public function fetchEndUserType(
        \OpenAPI\OpenAPI\Models\Operations\FetchEndUserTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchEndUserTypeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchEndUserTypeResponse
    {
        $baseUrl = SDK::FETCH_END_USER_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/EndUserTypes/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchEndUserTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchEndUserTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1EndUserType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1EndUserType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch specific Policy Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPoliciesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPoliciesSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchPoliciesResponse
     */
	public function fetchPolicies(
        \OpenAPI\OpenAPI\Models\Operations\FetchPoliciesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchPoliciesSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchPoliciesResponse
    {
        $baseUrl = SDK::FETCH_POLICIES_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Policies/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchPoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchPoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1Policies = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1Policies', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch specific Supporting Document Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentResponse
     */
	public function fetchSupportingDocument(
        \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentResponse
    {
        $baseUrl = SDK::FETCH_SUPPORTING_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SupportingDocuments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1SupportingDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1SupportingDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Supporting Document Type Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentTypeResponse
     */
	public function fetchSupportingDocumentType(
        \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentTypeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentTypeResponse
    {
        $baseUrl = SDK::FETCH_SUPPORTING_DOCUMENT_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SupportingDocumentTypes/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSupportingDocumentTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1SupportingDocumentType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1SupportingDocumentType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Customer-Profile instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductResponse
     */
	public function fetchTrustProduct(
        \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductResponse
    {
        $baseUrl = SDK::FETCH_TRUST_PRODUCT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/TrustProducts/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1TrustProduct = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1TrustProduct', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch specific Assigned Item Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductChannelEndpointAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductChannelEndpointAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductChannelEndpointAssignmentResponse
     */
	public function fetchTrustProductChannelEndpointAssignment(
        \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductChannelEndpointAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductChannelEndpointAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductChannelEndpointAssignmentResponse
    {
        $baseUrl = SDK::FETCH_TRUST_PRODUCT_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductChannelEndpointAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductChannelEndpointAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1TrustProductTrustProductChannelEndpointAssignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1TrustProductTrustProductChannelEndpointAssignment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch specific Assigned Item Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductEntityAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductEntityAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductEntityAssignmentResponse
     */
	public function fetchTrustProductEntityAssignment(
        \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductEntityAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductEntityAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductEntityAssignmentResponse
    {
        $baseUrl = SDK::FETCH_TRUST_PRODUCT_ENTITY_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/TrustProducts/{TrustProductSid}/EntityAssignments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductEntityAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductEntityAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1TrustProductTrustProductEntityAssignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1TrustProductTrustProductEntityAssignment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch specific Evaluation Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductEvaluationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductEvaluationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductEvaluationResponse
     */
	public function fetchTrustProductEvaluation(
        \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductEvaluationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductEvaluationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductEvaluationResponse
    {
        $baseUrl = SDK::FETCH_TRUST_PRODUCT_EVALUATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/TrustProducts/{TrustProductSid}/Evaluations/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductEvaluationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTrustProductEvaluationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1TrustProductTrustProductEvaluation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1TrustProductTrustProductEvaluation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Customer-Profiles for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileResponse
     */
	public function listCustomerProfile(
        \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileResponse
    {
        $baseUrl = SDK::LIST_CUSTOMER_PROFILE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CustomerProfiles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCustomerProfileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileListCustomerProfileResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Assigned Items for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileChannelEndpointAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileChannelEndpointAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileChannelEndpointAssignmentResponse
     */
	public function listCustomerProfileChannelEndpointAssignment(
        \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileChannelEndpointAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileChannelEndpointAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileChannelEndpointAssignmentResponse
    {
        $baseUrl = SDK::LIST_CUSTOMER_PROFILE_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments', \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileChannelEndpointAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileChannelEndpointAssignmentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileChannelEndpointAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCustomerProfileChannelEndpointAssignmentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileChannelEndpointAssignmentListCustomerProfileChannelEndpointAssignmentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Assigned Items for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEntityAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEntityAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEntityAssignmentResponse
     */
	public function listCustomerProfileEntityAssignment(
        \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEntityAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEntityAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEntityAssignmentResponse
    {
        $baseUrl = SDK::LIST_CUSTOMER_PROFILE_ENTITY_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments', \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEntityAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEntityAssignmentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEntityAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCustomerProfileEntityAssignmentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEntityAssignmentListCustomerProfileEntityAssignmentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Evaluations associated to the customer_profile resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEvaluationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEvaluationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEvaluationResponse
     */
	public function listCustomerProfileEvaluation(
        \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEvaluationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEvaluationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEvaluationResponse
    {
        $baseUrl = SDK::LIST_CUSTOMER_PROFILE_EVALUATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations', \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEvaluationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEvaluationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEvaluationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCustomerProfileEvaluationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCustomerProfileEvaluationListCustomerProfileEvaluationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all End User for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEndUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEndUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEndUserResponse
     */
	public function listEndUser(
        \OpenAPI\OpenAPI\Models\Operations\ListEndUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListEndUserSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEndUserResponse
    {
        $baseUrl = SDK::LIST_END_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/EndUsers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEndUserRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEndUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEndUserResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListEndUserListEndUserResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all End-User Types.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeResponse
     */
	public function listEndUserType(
        \OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeResponse
    {
        $baseUrl = SDK::LIST_END_USER_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/EndUserTypes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEndUserTypeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListEndUserTypeListEndUserTypeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Policys.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPoliciesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPoliciesSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListPoliciesResponse
     */
	public function listPolicies(
        \OpenAPI\OpenAPI\Models\Operations\ListPoliciesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListPoliciesSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListPoliciesResponse
    {
        $baseUrl = SDK::LIST_POLICIES_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Policies');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListPoliciesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListPoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPoliciesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListPoliciesListPoliciesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Supporting Document for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentResponse
     */
	public function listSupportingDocument(
        \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentResponse
    {
        $baseUrl = SDK::LIST_SUPPORTING_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SupportingDocuments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSupportingDocumentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentListSupportingDocumentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Supporting Document Types.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeResponse
     */
	public function listSupportingDocumentType(
        \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeResponse
    {
        $baseUrl = SDK::LIST_SUPPORTING_DOCUMENT_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SupportingDocumentTypes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSupportingDocumentTypeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSupportingDocumentTypeListSupportingDocumentTypeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Customer-Profiles for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTrustProductRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTrustProductSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTrustProductResponse
     */
	public function listTrustProduct(
        \OpenAPI\OpenAPI\Models\Operations\ListTrustProductRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListTrustProductSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTrustProductResponse
    {
        $baseUrl = SDK::LIST_TRUST_PRODUCT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/TrustProducts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTrustProductRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTrustProductResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTrustProductResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListTrustProductListTrustProductResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Assigned Items for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTrustProductChannelEndpointAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTrustProductChannelEndpointAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTrustProductChannelEndpointAssignmentResponse
     */
	public function listTrustProductChannelEndpointAssignment(
        \OpenAPI\OpenAPI\Models\Operations\ListTrustProductChannelEndpointAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListTrustProductChannelEndpointAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTrustProductChannelEndpointAssignmentResponse
    {
        $baseUrl = SDK::LIST_TRUST_PRODUCT_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments', \OpenAPI\OpenAPI\Models\Operations\ListTrustProductChannelEndpointAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTrustProductChannelEndpointAssignmentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTrustProductChannelEndpointAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTrustProductChannelEndpointAssignmentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListTrustProductChannelEndpointAssignmentListTrustProductChannelEndpointAssignmentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Assigned Items for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTrustProductEntityAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTrustProductEntityAssignmentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTrustProductEntityAssignmentResponse
     */
	public function listTrustProductEntityAssignment(
        \OpenAPI\OpenAPI\Models\Operations\ListTrustProductEntityAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListTrustProductEntityAssignmentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTrustProductEntityAssignmentResponse
    {
        $baseUrl = SDK::LIST_TRUST_PRODUCT_ENTITY_ASSIGNMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/TrustProducts/{TrustProductSid}/EntityAssignments', \OpenAPI\OpenAPI\Models\Operations\ListTrustProductEntityAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTrustProductEntityAssignmentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTrustProductEntityAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTrustProductEntityAssignmentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListTrustProductEntityAssignmentListTrustProductEntityAssignmentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Evaluations associated to the trust_product resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTrustProductEvaluationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTrustProductEvaluationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTrustProductEvaluationResponse
     */
	public function listTrustProductEvaluation(
        \OpenAPI\OpenAPI\Models\Operations\ListTrustProductEvaluationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListTrustProductEvaluationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTrustProductEvaluationResponse
    {
        $baseUrl = SDK::LIST_TRUST_PRODUCT_EVALUATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/TrustProducts/{TrustProductSid}/Evaluations', \OpenAPI\OpenAPI\Models\Operations\ListTrustProductEvaluationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTrustProductEvaluationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTrustProductEvaluationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTrustProductEvaluationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListTrustProductEvaluationListTrustProductEvaluationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Customer-Profile in an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerProfileSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerProfileResponse
     */
	public function updateCustomerProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerProfileSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerProfileResponse
    {
        $baseUrl = SDK::UPDATE_CUSTOMER_PROFILE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/CustomerProfiles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1CustomerProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1CustomerProfile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing End User.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateEndUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateEndUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateEndUserResponse
     */
	public function updateEndUser(
        \OpenAPI\OpenAPI\Models\Operations\UpdateEndUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateEndUserSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateEndUserResponse
    {
        $baseUrl = SDK::UPDATE_END_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/EndUsers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateEndUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateEndUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1EndUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1EndUser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing Supporting Document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSupportingDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSupportingDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSupportingDocumentResponse
     */
	public function updateSupportingDocument(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSupportingDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSupportingDocumentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSupportingDocumentResponse
    {
        $baseUrl = SDK::UPDATE_SUPPORTING_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SupportingDocuments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateSupportingDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSupportingDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1SupportingDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1SupportingDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Customer-Profile in an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTrustProductRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTrustProductSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTrustProductResponse
     */
	public function updateTrustProduct(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTrustProductRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateTrustProductSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTrustProductResponse
    {
        $baseUrl = SDK::UPDATE_TRUST_PRODUCT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/TrustProducts/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateTrustProductRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTrustProductResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trusthubV1TrustProduct = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrusthubV1TrustProduct', 'json');
            }
        }

        return $response;
    }
}