<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GetSchedulesScheduleAEfileRequest
{
    /**
     * 
     * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
     * 
     * 
     * @var string $apiKey
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=api_key')]
    public string $apiKey;
    
    /**
     * 
     * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
     * 
     * 
     * @var ?array<string> $committeeId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=committee_id')]
    public ?array $committeeId = null;
    
    /**
     * City of contributor
     * 
     * @var ?array<string> $contributorCity
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=contributor_city')]
    public ?array $contributorCity = null;
    
    /**
     * Employer of contributor, filers need to make an effort to gather this information
     * 
     * @var ?array<string> $contributorEmployer
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=contributor_employer')]
    public ?array $contributorEmployer = null;
    
    /**
     * Name of contributor
     * 
     * @var ?array<string> $contributorName
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=contributor_name')]
    public ?array $contributorName = null;
    
    /**
     * Occupation of contributor, filers need to make an effort to gather this information
     * 
     * @var ?array<string> $contributorOccupation
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=contributor_occupation')]
    public ?array $contributorOccupation = null;
    
    /**
     * State of contributor
     * 
     * @var ?array<string> $contributorState
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=contributor_state')]
    public ?array $contributorState = null;
    
    /**
     * 
     * An unique identifier for each page where the electronic or paper filing is reported.
     * 
     * 
     * @var ?array<string> $imageNumber
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=image_number')]
    public ?array $imageNumber = null;
    
    /**
     * Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
     * 
     * @var ?string $lineNumber
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=line_number')]
    public ?string $lineNumber = null;
    
    /**
     * Filter for all amounts less than a value.
     * 
     * @var ?string $maxAmount
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=max_amount')]
    public ?string $maxAmount = null;
    
    /**
     * Maximum date
     * 
     * @var ?\DateTime $maxDate
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=max_date,dateTimeFormat=Y-m-d')]
    public ?\DateTime $maxDate = null;
    
    /**
     * Maxium image number of the page where the schedule item is reported
     * 
     * @var ?string $maxImageNumber
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=max_image_number')]
    public ?string $maxImageNumber = null;
    
    /**
     * Filter for all amounts greater than a value.
     * 
     * @var ?string $minAmount
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=min_amount')]
    public ?string $minAmount = null;
    
    /**
     * Minimum date
     * 
     * @var ?\DateTime $minDate
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=min_date,dateTimeFormat=Y-m-d')]
    public ?\DateTime $minDate = null;
    
    /**
     * Minium image number of the page where the schedule item is reported
     * 
     * @var ?string $minImageNumber
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=min_image_number')]
    public ?string $minImageNumber = null;
    
    /**
     * For paginating through results, starting at page 1
     * 
     * @var ?int $page
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=page')]
    public ?int $page = null;
    
    /**
     * The number of results returned per page. Defaults to 20.
     * 
     * @var ?int $perPage
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=per_page')]
    public ?int $perPage = null;
    
    /**
     * Provide a field to sort by. Use `-` for descending order.
     * 
     * 
     * 
     * @var ?string $sort
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort')]
    public ?string $sort = null;
    
    /**
     * Hide null values on sorted column(s).
     * 
     * @var ?bool $sortHideNull
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort_hide_null')]
    public ?bool $sortHideNull = null;
    
    /**
     * Toggle that filters out all rows having sort column that is non-null
     * 
     * @var ?bool $sortNullOnly
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort_null_only')]
    public ?bool $sortNullOnly = null;
    
    /**
     * Toggle that sorts null values last
     * 
     * @var ?bool $sortNullsLast
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort_nulls_last')]
    public ?bool $sortNullsLast = null;
    
	public function __construct()
	{
		$this->apiKey = "";
		$this->committeeId = null;
		$this->contributorCity = null;
		$this->contributorEmployer = null;
		$this->contributorName = null;
		$this->contributorOccupation = null;
		$this->contributorState = null;
		$this->imageNumber = null;
		$this->lineNumber = null;
		$this->maxAmount = null;
		$this->maxDate = null;
		$this->maxImageNumber = null;
		$this->minAmount = null;
		$this->minDate = null;
		$this->minImageNumber = null;
		$this->page = null;
		$this->perPage = null;
		$this->sort = null;
		$this->sortHideNull = null;
		$this->sortNullOnly = null;
		$this->sortNullsLast = null;
	}
}
