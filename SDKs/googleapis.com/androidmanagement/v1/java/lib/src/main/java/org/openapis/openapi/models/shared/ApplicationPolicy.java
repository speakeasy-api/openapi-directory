/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ApplicationPolicy - Policy for an individual app.
 */
public class ApplicationPolicy {
    /**
     * List of the app\u2019s track IDs that a device belonging to the enterprise can access. If the list contains multiple track IDs, devices receive the latest version among all accessible tracks. If the list contains no track IDs, devices only have access to the app\u2019s production track. More details about each track are available in AppTrackInfo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessibleTrackIds")
    public String[] accessibleTrackIds;
    public ApplicationPolicy withAccessibleTrackIds(String[] accessibleTrackIds) {
        this.accessibleTrackIds = accessibleTrackIds;
        return this;
    }
    
    /**
     * Specifies whether the app is allowed networking when the VPN is not connected and alwaysOnVpnPackage.lockdownEnabled is enabled. If set to VPN_LOCKDOWN_ENFORCED, the app is not allowed networking, and if set to VPN_LOCKDOWN_EXEMPTION, the app is allowed networking. Only supported on devices running Android 10 and above. If this is not supported by the device, the device will contain a NonComplianceDetail with non_compliance_reason set to API_LEVEL and a fieldPath. If this is not applicable to the app, the device will contain a NonComplianceDetail with non_compliance_reason set to UNSUPPORTED and a fieldPath. The fieldPath is set to applications[i].alwaysOnVpnLockdownExemption, where i is the index of the package in the applications policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alwaysOnVpnLockdownExemption")
    public ApplicationPolicyAlwaysOnVpnLockdownExemptionEnum alwaysOnVpnLockdownExemption;
    public ApplicationPolicy withAlwaysOnVpnLockdownExemption(ApplicationPolicyAlwaysOnVpnLockdownExemptionEnum alwaysOnVpnLockdownExemption) {
        this.alwaysOnVpnLockdownExemption = alwaysOnVpnLockdownExemption;
        return this;
    }
    
    /**
     * Controls the auto-update mode for the app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoUpdateMode")
    public ApplicationPolicyAutoUpdateModeEnum autoUpdateMode;
    public ApplicationPolicy withAutoUpdateMode(ApplicationPolicyAutoUpdateModeEnum autoUpdateMode) {
        this.autoUpdateMode = autoUpdateMode;
        return this;
    }
    
    /**
     * Controls whether the app can communicate with itself across a device\u2019s work and personal profiles, subject to user consent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectedWorkAndPersonalApp")
    public ApplicationPolicyConnectedWorkAndPersonalAppEnum connectedWorkAndPersonalApp;
    public ApplicationPolicy withConnectedWorkAndPersonalApp(ApplicationPolicyConnectedWorkAndPersonalAppEnum connectedWorkAndPersonalApp) {
        this.connectedWorkAndPersonalApp = connectedWorkAndPersonalApp;
        return this;
    }
    
    /**
     * The default policy for all permissions requested by the app. If specified, this overrides the policy-level default_permission_policy which applies to all apps. It does not override the permission_grants which applies to all apps.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultPermissionPolicy")
    public ApplicationPolicyDefaultPermissionPolicyEnum defaultPermissionPolicy;
    public ApplicationPolicy withDefaultPermissionPolicy(ApplicationPolicyDefaultPermissionPolicyEnum defaultPermissionPolicy) {
        this.defaultPermissionPolicy = defaultPermissionPolicy;
        return this;
    }
    
    /**
     * The scopes delegated to the app from Android Device Policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delegatedScopes")
    public ApplicationPolicyDelegatedScopesEnum[] delegatedScopes;
    public ApplicationPolicy withDelegatedScopes(ApplicationPolicyDelegatedScopesEnum[] delegatedScopes) {
        this.delegatedScopes = delegatedScopes;
        return this;
    }
    
    /**
     * Whether the app is disabled. When disabled, the app data is still preserved.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabled")
    public Boolean disabled;
    public ApplicationPolicy withDisabled(Boolean disabled) {
        this.disabled = disabled;
        return this;
    }
    
    /**
     * Configuration to enable an app as an extension app, with the capability of interacting with Android Device Policy offline. For Android versions 13 and above, extension apps are exempt from battery restrictions so will not be placed into the restricted App Standby Bucket (https://developer.android.com/topic/performance/appstandby#restricted-bucket). Extensions apps are also protected against users clearing their data or force-closing the application, although admins can continue to use the clear app data command (https://developer.android.com/management/reference/rest/v1/enterprises.devices/issueCommand#CommandType) on extension apps if needed for Android 13 and above.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extensionConfig")
    public ExtensionConfig extensionConfig;
    public ApplicationPolicy withExtensionConfig(ExtensionConfig extensionConfig) {
        this.extensionConfig = extensionConfig;
        return this;
    }
    
    /**
     * The type of installation to perform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("installType")
    public ApplicationPolicyInstallTypeEnum installType;
    public ApplicationPolicy withInstallType(ApplicationPolicyInstallTypeEnum installType) {
        this.installType = installType;
        return this;
    }
    
    /**
     * Whether the app is allowed to lock itself in full-screen mode. DEPRECATED. Use InstallType KIOSK or kioskCustomLauncherEnabled to configure a dedicated device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lockTaskAllowed")
    public Boolean lockTaskAllowed;
    public ApplicationPolicy withLockTaskAllowed(Boolean lockTaskAllowed) {
        this.lockTaskAllowed = lockTaskAllowed;
        return this;
    }
    
    /**
     * Managed configuration applied to the app. The format for the configuration is dictated by the ManagedProperty values supported by the app. Each field name in the managed configuration must match the key field of the ManagedProperty. The field value must be compatible with the type of the ManagedProperty: *type* *JSON value* BOOL true or false STRING string INTEGER number CHOICE string MULTISELECT array of strings HIDDEN string BUNDLE_ARRAY array of objects 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("managedConfiguration")
    public java.util.Map<String, Object> managedConfiguration;
    public ApplicationPolicy withManagedConfiguration(java.util.Map<String, Object> managedConfiguration) {
        this.managedConfiguration = managedConfiguration;
        return this;
    }
    
    /**
     * The managed configurations template for the app, saved from the managed configurations iframe.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("managedConfigurationTemplate")
    public ManagedConfigurationTemplate managedConfigurationTemplate;
    public ApplicationPolicy withManagedConfigurationTemplate(ManagedConfigurationTemplate managedConfigurationTemplate) {
        this.managedConfigurationTemplate = managedConfigurationTemplate;
        return this;
    }
    
    /**
     * The minimum version of the app that runs on the device. If set, the device attempts to update the app to at least this version code. If the app is not up-to-date, the device will contain a NonComplianceDetail with non_compliance_reason set to APP_NOT_UPDATED. The app must already be published to Google Play with a version code greater than or equal to this value. At most 20 apps may specify a minimum version code per policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumVersionCode")
    public Integer minimumVersionCode;
    public ApplicationPolicy withMinimumVersionCode(Integer minimumVersionCode) {
        this.minimumVersionCode = minimumVersionCode;
        return this;
    }
    
    /**
     * The package name of the app. For example, com.google.android.youtube for the YouTube app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("packageName")
    public String packageName;
    public ApplicationPolicy withPackageName(String packageName) {
        this.packageName = packageName;
        return this;
    }
    
    /**
     * Explicit permission grants or denials for the app. These values override the default_permission_policy and permission_grants which apply to all apps.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissionGrants")
    public PermissionGrant[] permissionGrants;
    public ApplicationPolicy withPermissionGrants(PermissionGrant[] permissionGrants) {
        this.permissionGrants = permissionGrants;
        return this;
    }
    
    /**
     * Specifies whether the app installed in the work profile is allowed to add widgets to the home screen.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workProfileWidgets")
    public ApplicationPolicyWorkProfileWidgetsEnum workProfileWidgets;
    public ApplicationPolicy withWorkProfileWidgets(ApplicationPolicyWorkProfileWidgetsEnum workProfileWidgets) {
        this.workProfileWidgets = workProfileWidgets;
        return this;
    }
    
}
