/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Contains information about the configuration of the connector being registered.
 */
export class RegisterConnectorRequestBodyConnectorProvisioningConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "lambda" })
  @Type(() => shared.LambdaConnectorProvisioningConfig)
  lambda?: shared.LambdaConnectorProvisioningConfig;
}

/**
 * The type of provisioning that the connector supports, such as Lambda.
 */
export enum RegisterConnectorRequestBodyConnectorProvisioningTypeEnum {
  Lambda = "LAMBDA",
}

export class RegisterConnectorRequestBody extends SpeakeasyBase {
  /**
   *  The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connectorLabel" })
  connectorLabel?: string;

  /**
   * Contains information about the configuration of the connector being registered.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connectorProvisioningConfig" })
  @Type(() => RegisterConnectorRequestBodyConnectorProvisioningConfig)
  connectorProvisioningConfig?: RegisterConnectorRequestBodyConnectorProvisioningConfig;

  /**
   * The type of provisioning that the connector supports, such as Lambda.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connectorProvisioningType" })
  connectorProvisioningType?: RegisterConnectorRequestBodyConnectorProvisioningTypeEnum;

  /**
   * A description about the connector that's being registered.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;
}

export class RegisterConnectorRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: RegisterConnectorRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class RegisterConnectorResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  /**
   * ConnectorAuthenticationException
   */
  @SpeakeasyMetadata()
  connectorAuthenticationException?: any;

  /**
   * ConnectorServerException
   */
  @SpeakeasyMetadata()
  connectorServerException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  registerConnectorResponse?: shared.RegisterConnectorResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
