// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LinkTypeEnum - The relationship of the current span relative to the linked span.
type LinkTypeEnum string

const (
	LinkTypeEnumTypeUnspecified  LinkTypeEnum = "TYPE_UNSPECIFIED"
	LinkTypeEnumChildLinkedSpan  LinkTypeEnum = "CHILD_LINKED_SPAN"
	LinkTypeEnumParentLinkedSpan LinkTypeEnum = "PARENT_LINKED_SPAN"
)

func (e *LinkTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "CHILD_LINKED_SPAN":
		fallthrough
	case "PARENT_LINKED_SPAN":
		*e = LinkTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LinkTypeEnum: %s", s)
	}
}

// Link - A pointer from the current span to another span in the same trace or in a different trace. For example, this can be used in batching operations, where a single batch handler processes multiple requests from different traces or when the handler receives a request from a different project.
type Link struct {
	// A set of attributes as key-value pairs.
	Attributes *Attributes `json:"attributes,omitempty"`
	// The `[SPAN_ID]` for a span within a trace.
	SpanID *string `json:"spanId,omitempty"`
	// The `[TRACE_ID]` for a trace within a project.
	TraceID *string `json:"traceId,omitempty"`
	// The relationship of the current span relative to the linked span.
	Type *LinkTypeEnum `json:"type,omitempty"`
}
