/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses {
    /**
     * When the license was claimed into the organization
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("claimedAt")
    public OffsetDateTime claimedAt;

    public MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses withClaimedAt(OffsetDateTime claimedAt) {
        this.claimedAt = claimedAt;
        return this;
    }
    
    /**
     * The counts of the license by model type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("counts")
    public MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesCounts[] counts;

    public MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses withCounts(MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesCounts[] counts) {
        this.counts = counts;
        return this;
    }
    
    /**
     * The duration (term length) of the license, measured in days
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Long duration;

    public MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses withDuration(Long duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * The editions of the license for each relevant product type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("editions")
    public MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesEditions[] editions;

    public MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses withEditions(MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesEditions[] editions) {
        this.editions = editions;
        return this;
    }
    
    /**
     * Flag to indicate if the license is expired
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expired")
    public Boolean expired;

    public MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses withExpired(Boolean expired) {
        this.expired = expired;
        return this;
    }
    
    /**
     * Flag to indicated that the license is invalidated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invalidated")
    public Boolean invalidated;

    public MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses withInvalidated(Boolean invalidated) {
        this.invalidated = invalidated;
        return this;
    }
    
    /**
     * When the license was invalidated. Will be null for active licenses
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("invalidatedAt")
    public OffsetDateTime invalidatedAt;

    public MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses withInvalidatedAt(OffsetDateTime invalidatedAt) {
        this.invalidatedAt = invalidatedAt;
        return this;
    }
    
    /**
     * The key of the license
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    public String key;

    public MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * The operation mode of the license when it was claimed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    public MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesModeEnum mode;

    public MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses withMode(MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesModeEnum mode) {
        this.mode = mode;
        return this;
    }
    
    /**
     * The ID of the organization that the license is claimed in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizationId")
    public String organizationId;

    public MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses withOrganizationId(String organizationId) {
        this.organizationId = organizationId;
        return this;
    }
    
    /**
     * When the license's term began (approximately the date when the license was created)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startedAt")
    public OffsetDateTime startedAt;

    public MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses withStartedAt(OffsetDateTime startedAt) {
        this.startedAt = startedAt;
        return this;
    }
    
    public MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses(){}
}
