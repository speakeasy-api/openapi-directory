// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RescheduleRescheduleTypeEnum - Required. The type of the reschedule.
type RescheduleRescheduleTypeEnum string

const (
	RescheduleRescheduleTypeEnumRescheduleTypeUnspecified RescheduleRescheduleTypeEnum = "RESCHEDULE_TYPE_UNSPECIFIED"
	RescheduleRescheduleTypeEnumImmediate                 RescheduleRescheduleTypeEnum = "IMMEDIATE"
	RescheduleRescheduleTypeEnumNextAvailableWindow       RescheduleRescheduleTypeEnum = "NEXT_AVAILABLE_WINDOW"
	RescheduleRescheduleTypeEnumSpecificTime              RescheduleRescheduleTypeEnum = "SPECIFIC_TIME"
)

func (e RescheduleRescheduleTypeEnum) ToPointer() *RescheduleRescheduleTypeEnum {
	return &e
}

func (e *RescheduleRescheduleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RESCHEDULE_TYPE_UNSPECIFIED":
		fallthrough
	case "IMMEDIATE":
		fallthrough
	case "NEXT_AVAILABLE_WINDOW":
		fallthrough
	case "SPECIFIC_TIME":
		*e = RescheduleRescheduleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RescheduleRescheduleTypeEnum: %v", v)
	}
}

type Reschedule struct {
	// Required. The type of the reschedule.
	RescheduleType *RescheduleRescheduleTypeEnum `json:"rescheduleType,omitempty"`
	// Optional. Timestamp when the maintenance shall be rescheduled to if reschedule_type=SPECIFIC_TIME, in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
	ScheduleTime *string `json:"scheduleTime,omitempty"`
}
