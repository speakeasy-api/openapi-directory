// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AppsListTestersSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AppsListTestersRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AppsListTestersDefaultApplicationJSONErrorCodeEnum string

const (
	AppsListTestersDefaultApplicationJSONErrorCodeEnumBadRequest          AppsListTestersDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AppsListTestersDefaultApplicationJSONErrorCodeEnumConflict            AppsListTestersDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AppsListTestersDefaultApplicationJSONErrorCodeEnumNotAcceptable       AppsListTestersDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AppsListTestersDefaultApplicationJSONErrorCodeEnumNotFound            AppsListTestersDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AppsListTestersDefaultApplicationJSONErrorCodeEnumInternalServerError AppsListTestersDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AppsListTestersDefaultApplicationJSONErrorCodeEnumUnauthorized        AppsListTestersDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AppsListTestersDefaultApplicationJSONErrorCodeEnumTooManyRequests     AppsListTestersDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e AppsListTestersDefaultApplicationJSONErrorCodeEnum) ToPointer() *AppsListTestersDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AppsListTestersDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AppsListTestersDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsListTestersDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AppsListTestersDefaultApplicationJSONError struct {
	Code    AppsListTestersDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                             `json:"message"`
}

// AppsListTestersDefaultApplicationJSON - Error
type AppsListTestersDefaultApplicationJSON struct {
	Error AppsListTestersDefaultApplicationJSONError `json:"error"`
}

// AppsListTesters200ApplicationJSONOriginEnum - The creation origin of this user
type AppsListTesters200ApplicationJSONOriginEnum string

const (
	AppsListTesters200ApplicationJSONOriginEnumAppcenter AppsListTesters200ApplicationJSONOriginEnum = "appcenter"
	AppsListTesters200ApplicationJSONOriginEnumHockeyapp AppsListTesters200ApplicationJSONOriginEnum = "hockeyapp"
	AppsListTesters200ApplicationJSONOriginEnumCodepush  AppsListTesters200ApplicationJSONOriginEnum = "codepush"
)

func (e AppsListTesters200ApplicationJSONOriginEnum) ToPointer() *AppsListTesters200ApplicationJSONOriginEnum {
	return &e
}

func (e *AppsListTesters200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = AppsListTesters200ApplicationJSONOriginEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsListTesters200ApplicationJSONOriginEnum: %v", v)
	}
}

type AppsListTesters200ApplicationJSONPermissionsEnum string

const (
	AppsListTesters200ApplicationJSONPermissionsEnumManager   AppsListTesters200ApplicationJSONPermissionsEnum = "manager"
	AppsListTesters200ApplicationJSONPermissionsEnumDeveloper AppsListTesters200ApplicationJSONPermissionsEnum = "developer"
	AppsListTesters200ApplicationJSONPermissionsEnumViewer    AppsListTesters200ApplicationJSONPermissionsEnum = "viewer"
	AppsListTesters200ApplicationJSONPermissionsEnumTester    AppsListTesters200ApplicationJSONPermissionsEnum = "tester"
)

func (e AppsListTesters200ApplicationJSONPermissionsEnum) ToPointer() *AppsListTesters200ApplicationJSONPermissionsEnum {
	return &e
}

func (e *AppsListTesters200ApplicationJSONPermissionsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = AppsListTesters200ApplicationJSONPermissionsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsListTesters200ApplicationJSONPermissionsEnum: %v", v)
	}
}

type AppsListTesters200ApplicationJSON struct {
	// The avatar URL of the user
	AvatarURL *string `json:"avatar_url,omitempty"`
	// User is required to send an old password in order to change the password.
	CanChangePassword *bool `json:"can_change_password,omitempty"`
	// The full name of the user. Might for example be first and last name
	DisplayName string `json:"display_name"`
	// The email address of the user
	Email string `json:"email"`
	// The unique id (UUID) of the user
	ID string `json:"id"`
	// The unique name that is used to identify the user.
	Name string `json:"name"`
	// The creation origin of this user
	Origin AppsListTesters200ApplicationJSONOriginEnum `json:"origin"`
	// The permissions the user has for the app
	Permissions []AppsListTesters200ApplicationJSONPermissionsEnum `json:"permissions,omitempty"`
}

type AppsListTestersResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	AppsListTesters200ApplicationJSONObjects []AppsListTesters200ApplicationJSON
	// Error
	AppsListTestersDefaultApplicationJSONObject *AppsListTestersDefaultApplicationJSON
}
