// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListAssociatedApprovalRuleTemplatesForRepositoryXAmzTargetEnum
type ListAssociatedApprovalRuleTemplatesForRepositoryXAmzTargetEnum string

const (
	ListAssociatedApprovalRuleTemplatesForRepositoryXAmzTargetEnumCodeCommit20150413ListAssociatedApprovalRuleTemplatesForRepository ListAssociatedApprovalRuleTemplatesForRepositoryXAmzTargetEnum = "CodeCommit_20150413.ListAssociatedApprovalRuleTemplatesForRepository"
)

func (e ListAssociatedApprovalRuleTemplatesForRepositoryXAmzTargetEnum) ToPointer() *ListAssociatedApprovalRuleTemplatesForRepositoryXAmzTargetEnum {
	return &e
}

func (e *ListAssociatedApprovalRuleTemplatesForRepositoryXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeCommit_20150413.ListAssociatedApprovalRuleTemplatesForRepository":
		*e = ListAssociatedApprovalRuleTemplatesForRepositoryXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAssociatedApprovalRuleTemplatesForRepositoryXAmzTargetEnum: %v", v)
	}
}

type ListAssociatedApprovalRuleTemplatesForRepositoryRequest struct {
	ListAssociatedApprovalRuleTemplatesForRepositoryInput shared.ListAssociatedApprovalRuleTemplatesForRepositoryInput   `request:"mediaType=application/json"`
	XAmzAlgorithm                                         *string                                                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                                     *string                                                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                                        *string                                                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                                              *string                                                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                                     *string                                                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                                         *string                                                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                                     *string                                                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                                            ListAssociatedApprovalRuleTemplatesForRepositoryXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type ListAssociatedApprovalRuleTemplatesForRepositoryResponse struct {
	ContentType string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// InvalidContinuationTokenException
	InvalidContinuationTokenException interface{}
	// InvalidMaxResultsException
	InvalidMaxResultsException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// Success
	ListAssociatedApprovalRuleTemplatesForRepositoryOutput *shared.ListAssociatedApprovalRuleTemplatesForRepositoryOutput
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
}
