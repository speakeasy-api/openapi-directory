// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PurgeSoftware200ApplicationJSONActionEnum - The id of the action
type PurgeSoftware200ApplicationJSONActionEnum string

const (
	PurgeSoftware200ApplicationJSONActionEnumPurgeSoftware PurgeSoftware200ApplicationJSONActionEnum = "purgeSoftware"
)

func (e *PurgeSoftware200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "purgeSoftware":
		*e = PurgeSoftware200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PurgeSoftware200ApplicationJSONActionEnum: %s", s)
	}
}

// PurgeSoftware200ApplicationJSONResultEnum - Result of the request
type PurgeSoftware200ApplicationJSONResultEnum string

const (
	PurgeSoftware200ApplicationJSONResultEnumSuccess PurgeSoftware200ApplicationJSONResultEnum = "success"
	PurgeSoftware200ApplicationJSONResultEnumError   PurgeSoftware200ApplicationJSONResultEnum = "error"
)

func (e *PurgeSoftware200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = PurgeSoftware200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PurgeSoftware200ApplicationJSONResultEnum: %s", s)
	}
}

// PurgeSoftware200ApplicationJSON - Purge Software
type PurgeSoftware200ApplicationJSON struct {
	// The id of the action
	Action PurgeSoftware200ApplicationJSONActionEnum `json:"action"`
	Data   []string                                  `json:"data"`
	// Result of the request
	Result PurgeSoftware200ApplicationJSONResultEnum `json:"result"`
}

type PurgeSoftwareResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Purge Software
	PurgeSoftware200ApplicationJSONObject *PurgeSoftware200ApplicationJSON
}
