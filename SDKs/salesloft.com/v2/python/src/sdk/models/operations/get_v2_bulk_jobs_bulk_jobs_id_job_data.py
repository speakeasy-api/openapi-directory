"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class GetV2BulkJobsBulkJobsIDJobDataRequest:
    
    bulk_jobs_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'bulk_jobs_id', 'style': 'simple', 'explode': False }})
    r"""The id for the bulk job to which the job data relates"""  
    id: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id', 'style': 'form', 'explode': True }})
    r"""Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]=123)"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""How many records to show per page in the range [1, 100]. Defaults to 25"""  
    status: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': False }})
    r"""Filter by result status. Accepts multiple statuses. Each status must be one of pending, success, error, retrying"""  
    

@dataclasses.dataclass
class GetV2BulkJobsBulkJobsIDJobDataResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    