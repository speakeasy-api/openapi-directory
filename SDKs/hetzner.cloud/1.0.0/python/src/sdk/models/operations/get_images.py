"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetImagesSortEnum(str, Enum):
    r"""Can be used multiple times."""
    ID = 'id'
    ID_ASC = 'id:asc'
    ID_DESC = 'id:desc'
    NAME = 'name'
    NAME_ASC = 'name:asc'
    NAME_DESC = 'name:desc'
    CREATED = 'created'
    CREATED_ASC = 'created:asc'
    CREATED_DESC = 'created:desc'

class GetImagesStatusEnum(str, Enum):
    r"""Can be used multiple times. The response will only contain Images matching the status."""
    AVAILABLE = 'available'
    CREATING = 'creating'

class GetImagesTypeEnum(str, Enum):
    r"""Can be used multiple times."""
    SYSTEM = 'system'
    SNAPSHOT = 'snapshot'
    BACKUP = 'backup'
    APP = 'app'


@dataclasses.dataclass
class GetImagesRequest:
    
    bound_to: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bound_to', 'style': 'form', 'explode': True }})
    r"""Can be used multiple times. Server ID linked to the Image. Only available for Images of type `backup`"""  
    include_deprecated: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_deprecated', 'style': 'form', 'explode': True }})
    r"""Can be used multiple times."""  
    label_selector: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'label_selector', 'style': 'form', 'explode': True }})
    r"""Can be used to filter resources by labels. The response will only contain resources matching the label selector."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Can be used to filter resources by their name. The response will only contain the resources matching the specified name"""  
    sort: Optional[GetImagesSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Can be used multiple times."""  
    status: Optional[GetImagesStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Can be used multiple times. The response will only contain Images matching the status."""  
    type: Optional[GetImagesTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Can be used multiple times."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetImages200ApplicationJSONImagesCreatedFrom:
    r"""Information about the Server the Image was created from"""
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Server the Image was created from"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Server name at the time the Image was created"""  
    
class GetImages200ApplicationJSONImagesOsFlavorEnum(str, Enum):
    r"""Flavor of operating system contained in the Image"""
    UBUNTU = 'ubuntu'
    CENTOS = 'centos'
    DEBIAN = 'debian'
    FEDORA = 'fedora'
    UNKNOWN = 'unknown'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetImages200ApplicationJSONImagesProtection:
    r"""Protection configuration for the Resource"""
    
    delete: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete') }})
    r"""If true, prevents the Resource from being deleted"""  
    
class GetImages200ApplicationJSONImagesStatusEnum(str, Enum):
    r"""Whether the Image can be used or if it's still being created or unavailable"""
    AVAILABLE = 'available'
    CREATING = 'creating'
    UNAVAILABLE = 'unavailable'

class GetImages200ApplicationJSONImagesTypeEnum(str, Enum):
    r"""Type of the Image"""
    SYSTEM = 'system'
    APP = 'app'
    SNAPSHOT = 'snapshot'
    BACKUP = 'backup'
    TEMPORARY = 'temporary'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetImages200ApplicationJSONImages:
    
    bound_to: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bound_to') }})
    r"""ID of Server the Image is bound to. Only set for Images of type `backup`."""  
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Resource was created (in ISO-8601 format)"""  
    created_from: GetImages200ApplicationJSONImagesCreatedFrom = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_from') }})
    r"""Information about the Server the Image was created from"""  
    deleted: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted') }})
    r"""Point in time where the Image was deleted (in ISO-8601 format)"""  
    deprecated: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deprecated') }})
    r"""Point in time when the Image is considered to be deprecated (in ISO-8601 format)"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the Image"""  
    disk_size: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disk_size') }})
    r"""Size of the disk contained in the Image in GB"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    image_size: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_size') }})
    r"""Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image."""  
    labels: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""User-defined labels (key-value pairs)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Unique identifier of the Image. This value is only set for system Images."""  
    os_flavor: GetImages200ApplicationJSONImagesOsFlavorEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_flavor') }})
    r"""Flavor of operating system contained in the Image"""  
    os_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_version') }})
    r"""Operating system version"""  
    protection: GetImages200ApplicationJSONImagesProtection = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protection') }})
    r"""Protection configuration for the Resource"""  
    status: GetImages200ApplicationJSONImagesStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Whether the Image can be used or if it's still being created or unavailable"""  
    type: GetImages200ApplicationJSONImagesTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of the Image"""  
    rapid_deploy: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rapid_deploy'), 'exclude': lambda f: f is None }})
    r"""Indicates that rapid deploy of the Image is available"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetImages200ApplicationJSONMetaPagination:
    
    last_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_page') }})
    r"""ID of the last page available. Can be null if the current page is the last one."""  
    next_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page') }})
    r"""ID of the next page. Can be null if the current page is the last one."""  
    page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page') }})
    r"""Current page number"""  
    per_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per_page') }})
    r"""Maximum number of items shown per page in the response"""  
    previous_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_page') }})
    r"""ID of the previous page. Can be null if the current page is the first one."""  
    total_entries: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_entries') }})
    r"""The total number of entries that exist in the database for this query. Nullable if unknown."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetImages200ApplicationJSONMeta:
    
    pagination: GetImages200ApplicationJSONMetaPagination = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pagination') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetImages200ApplicationJSON:
    r"""The `images` key in the reply contains an array of Image objects with this structure"""
    
    images: list[GetImages200ApplicationJSONImages] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('images') }})  
    meta: Optional[GetImages200ApplicationJSONMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetImagesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_images_200_application_json_object: Optional[GetImages200ApplicationJSON] = dataclasses.field(default=None)
    r"""The `images` key in the reply contains an array of Image objects with this structure"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    