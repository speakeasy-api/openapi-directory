"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import betslipleg as shared_betslipleg
from ..shared import freebetdetail as shared_freebetdetail
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Betslipbet:
    
    legs: list[shared_betslipleg.Betslipleg] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legs') }})  
    number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})
    r"""The bet number"""  
    type_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('typeCode') }})
    r"""The bet type code of the bet. For example: TBL (Treble)"""  
    bet_multiplier: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('betMultiplier'), 'exclude': lambda f: f is None }})
    r"""The total aggregated odds, as a decimal, of the multiple bet placed"""  
    free_bets: Optional[list[shared_freebetdetail.FreeBetDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freeBets'), 'exclude': lambda f: f is None }})
    r"""Free bets that can be used with this bet"""  
    max_stake: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxStake'), 'exclude': lambda f: f is None }})
    r"""Maximum stake allowable on the bet. For example: 2500.00 (GBP)"""  
    min_stake: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minStake'), 'exclude': lambda f: f is None }})
    r"""Minumum stake allowable on the bet. For example: 0.05 (GBP)"""  
    num_lines: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numLines'), 'exclude': lambda f: f is None }})
    r"""The number of lines (selections) of a bet"""  
    type_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('typeName'), 'exclude': lambda f: f is None }})
    r"""The TypeCode of the bet. For example: TBL (Treble)"""  
    