"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import loyaltyaccountexpiringpointdeadline as shared_loyaltyaccountexpiringpointdeadline
from ..shared import loyaltyaccountmapping as shared_loyaltyaccountmapping
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LoyaltyAccount:
    r"""Describes a loyalty account. For more information, see
    [Manage Loyalty Accounts Using the Loyalty API](https://developer.squareup.com/docs/loyalty-api/overview).
    """
    
    program_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('program_id') }})
    r"""The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) to which the account belongs."""  
    balance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balance'), 'exclude': lambda f: f is None }})
    r"""The available point balance in the loyalty account. If points are scheduled to expire, they are listed in the `expiring_point_deadlines` field.
    
    Your application should be able to handle loyalty accounts that have a negative point balance (`balance` is less than 0). This might occur if a seller makes a manual adjustment or as a result of a refund or exchange.
    """  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""The timestamp when the loyalty account was created, in RFC 3339 format."""  
    customer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_id'), 'exclude': lambda f: f is None }})
    r"""The Square-assigned ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) that is associated with the account."""  
    enrolled_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enrolled_at'), 'exclude': lambda f: f is None }})
    r"""The timestamp when enrollment occurred, in RFC 3339 format."""  
    expiring_point_deadlines: Optional[list[shared_loyaltyaccountexpiringpointdeadline.LoyaltyAccountExpiringPointDeadline]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiring_point_deadlines'), 'exclude': lambda f: f is None }})
    r"""The schedule for when points expire in the loyalty account balance. This field is present only if the account has points that are scheduled to expire.
    
    The total number of points in this field equals the number of points in the `balance` field.
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The Square-assigned ID of the loyalty account."""  
    lifetime_points: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lifetime_points'), 'exclude': lambda f: f is None }})
    r"""The total points accrued during the lifetime of the account."""  
    mapping: Optional[shared_loyaltyaccountmapping.LoyaltyAccountMapping] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mapping'), 'exclude': lambda f: f is None }})
    r"""Represents the mapping that associates a loyalty account with a buyer.
    
    Currently, a loyalty account can only be mapped to a buyer by phone number. For more information, see 
    [Loyalty Overview](https://developer.squareup.com/docs/loyalty/overview).
    """  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})
    r"""The timestamp when the loyalty account was last updated, in RFC 3339 format."""  
    