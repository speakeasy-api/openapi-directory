/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { UserInfo } from "./userinfo";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Upload Share information
 */
export class UploadShare extends SpeakeasyBase {
  /**
   * Share access key to generate secure link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessKey" })
  accessKey: string;

  /**
   * Total amount of existing files uploaded with this share.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cntFiles" })
  cntFiles?: number;

  /**
   * Total amount of uploads conducted with this share.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cntUploads" })
  cntUploads?: number;

  /**
   * Creation date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  @Type(() => UserInfo)
  createdBy: UserInfo;

  /**
   * Upload Share URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataUrl" })
  dataUrl?: string;

  /**
   * Expiration date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expireAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expireAt?: Date;

  /**
   * Number of days after which uploaded files expire
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filesExpiryPeriod" })
  filesExpiryPeriod?: number;

  /**
   * Share ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * &#128640; Since v4.11.0
   *
   * @remarks
   *
   * Internal notes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "internalNotes" })
  internalNotes?: string;

  /**
   * Encryption state
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isEncrypted" })
  isEncrypted?: boolean;

  /**
   * Is share protected by password
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isProtected" })
  isProtected: boolean;

  /**
   * Maximal total size of uploaded files (in bytes)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxSize" })
  maxSize?: number;

  /**
   * Maximal amount of files to upload
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxSlots" })
  maxSlots?: number;

  /**
   * Alias name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * User notes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;

  /**
   * &#128679; Deprecated since v4.20.0
   *
   * @remarks
   *
   * Notify creator on every upload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notifyCreator" })
  notifyCreator: boolean;

  /**
   * &#128679; Deprecated since v4.11.0
   *
   * @remarks
   *
   * CSV string of recipient email addresses
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recipients" })
  recipients?: string;

  /**
   * &#128640; Since v4.11.0
   *
   * @remarks
   *
   * Show creator first and last name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "showCreatorName" })
  showCreatorName?: boolean;

  /**
   * &#128640; Since v4.11.0
   *
   * @remarks
   *
   * Show creator email address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "showCreatorUsername" })
  showCreatorUsername?: boolean;

  /**
   * Allow display of already uploaded files
   */
  @SpeakeasyMetadata()
  @Expose({ name: "showUploadedFiles" })
  showUploadedFiles?: boolean;

  /**
   * &#128679; Deprecated since v4.11.0
   *
   * @remarks
   *
   * CSV string of recipient MSISDNs
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smsRecipients" })
  smsRecipients?: string;

  /**
   * Target room or folder ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetId" })
  targetId: number;

  /**
   * Path to shared upload node
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetPath" })
  targetPath?: string;

  /**
   * Node type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetType" })
  targetType?: string;

  /**
   * Modification date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedBy" })
  @Type(() => UserInfo)
  updatedBy?: UserInfo;
}
