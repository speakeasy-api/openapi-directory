// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartRunRequestBodyLogLevelEnum - A log level for the run.
type StartRunRequestBodyLogLevelEnum string

const (
	StartRunRequestBodyLogLevelEnumOff   StartRunRequestBodyLogLevelEnum = "OFF"
	StartRunRequestBodyLogLevelEnumFatal StartRunRequestBodyLogLevelEnum = "FATAL"
	StartRunRequestBodyLogLevelEnumError StartRunRequestBodyLogLevelEnum = "ERROR"
	StartRunRequestBodyLogLevelEnumAll   StartRunRequestBodyLogLevelEnum = "ALL"
)

func (e StartRunRequestBodyLogLevelEnum) ToPointer() *StartRunRequestBodyLogLevelEnum {
	return &e
}

func (e *StartRunRequestBodyLogLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OFF":
		fallthrough
	case "FATAL":
		fallthrough
	case "ERROR":
		fallthrough
	case "ALL":
		*e = StartRunRequestBodyLogLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StartRunRequestBodyLogLevelEnum: %v", v)
	}
}

// StartRunRequestBodyWorkflowTypeEnum - The run's workflows type.
type StartRunRequestBodyWorkflowTypeEnum string

const (
	StartRunRequestBodyWorkflowTypeEnumPrivate StartRunRequestBodyWorkflowTypeEnum = "PRIVATE"
)

func (e StartRunRequestBodyWorkflowTypeEnum) ToPointer() *StartRunRequestBodyWorkflowTypeEnum {
	return &e
}

func (e *StartRunRequestBodyWorkflowTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PRIVATE":
		*e = StartRunRequestBodyWorkflowTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StartRunRequestBodyWorkflowTypeEnum: %v", v)
	}
}

type StartRunRequestBody struct {
	// A log level for the run.
	LogLevel *StartRunRequestBodyLogLevelEnum `json:"logLevel,omitempty"`
	// A name for the run.
	Name *string `json:"name,omitempty"`
	// An output URI for the run.
	OutputURI *string `json:"outputUri,omitempty"`
	// Parameters for the run.
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// A priority for the run.
	Priority *int64 `json:"priority,omitempty"`
	// To ensure that requests don't run multiple times, specify a unique ID for each request.
	RequestID string `json:"requestId"`
	// A service role for the run.
	RoleArn string `json:"roleArn"`
	// The run's group ID.
	RunGroupID *string `json:"runGroupId,omitempty"`
	// The run's ID.
	RunID *string `json:"runId,omitempty"`
	// A storage capacity for the run in gigabytes.
	StorageCapacity *int64 `json:"storageCapacity,omitempty"`
	// Tags for the run.
	Tags map[string]string `json:"tags,omitempty"`
	// The run's workflow ID.
	WorkflowID *string `json:"workflowId,omitempty"`
	// The run's workflows type.
	WorkflowType *StartRunRequestBodyWorkflowTypeEnum `json:"workflowType,omitempty"`
}

type StartRunRequest struct {
	RequestBody       StartRunRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type StartRunResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	// RequestTimeoutException
	RequestTimeoutException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// Success
	StartRunResponse *shared.StartRunResponse
	StatusCode       int
	RawResponse      *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
