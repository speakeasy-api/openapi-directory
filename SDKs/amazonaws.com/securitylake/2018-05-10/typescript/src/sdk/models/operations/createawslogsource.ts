/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class CreateAwsLogSourceRequestBody extends SpeakeasyBase {
  /**
   * Enables data collection from specific Amazon Web Services sources in all specific accounts and specific Regions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableAllDimensions" })
  enableAllDimensions?: Record<string, Record<string, string[]>>;

  /**
   * Enables data collection from all Amazon Web Services sources in specific accounts or Regions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableSingleDimension" })
  enableSingleDimension?: string[];

  /**
   * Enables data collection from specific Amazon Web Services sources in specific accounts or Regions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableTwoDimensions" })
  enableTwoDimensions?: Record<string, string[]>;

  /**
   * Specifies the input order to enable dimensions in Security Lake, namely Region, source type, and member account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inputOrder" })
  inputOrder: shared.DimensionEnum[];
}

export class CreateAwsLogSourceRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateAwsLogSourceRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateAwsLogSourceResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * AccountNotFoundException
   */
  @SpeakeasyMetadata()
  accountNotFoundException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createAwsLogSourceResponse?: shared.CreateAwsLogSourceResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * S3Exception
   */
  @SpeakeasyMetadata()
  s3Exception?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
