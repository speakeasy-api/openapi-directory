/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * List of signing profiles that can sign a code package.
 */
export class CreateCodeSigningConfigRequestBodyAllowedPublishers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "SigningProfileVersionArns" })
  signingProfileVersionArns?: string[];
}

/**
 * Code signing configuration <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html#config-codesigning-policies">policies</a> specify the validation failure action for signature mismatch or expiry.
 */
export class CreateCodeSigningConfigRequestBodyCodeSigningPolicies extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "UntrustedArtifactOnDeployment" })
  untrustedArtifactOnDeployment?: shared.CodeSigningPolicyEnum;
}

export class CreateCodeSigningConfigRequestBody extends SpeakeasyBase {
  /**
   * List of signing profiles that can sign a code package.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AllowedPublishers" })
  @Type(() => CreateCodeSigningConfigRequestBodyAllowedPublishers)
  allowedPublishers: CreateCodeSigningConfigRequestBodyAllowedPublishers;

  /**
   * Code signing configuration <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html#config-codesigning-policies">policies</a> specify the validation failure action for signature mismatch or expiry.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CodeSigningPolicies" })
  @Type(() => CreateCodeSigningConfigRequestBodyCodeSigningPolicies)
  codeSigningPolicies?: CreateCodeSigningConfigRequestBodyCodeSigningPolicies;

  /**
   * Descriptive name for this code signing configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;
}

export class CreateCodeSigningConfigRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateCodeSigningConfigRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateCodeSigningConfigResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createCodeSigningConfigResponse?: shared.CreateCodeSigningConfigResponse;

  /**
   * InvalidParameterValueException
   */
  @SpeakeasyMetadata()
  invalidParameterValueException?: any;

  /**
   * ServiceException
   */
  @SpeakeasyMetadata()
  serviceException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
