"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import connectionerrorcodetype_enum as shared_connectionerrorcodetype_enum
from ..shared import connectionstatetype_enum as shared_connectionstatetype_enum
from ..shared import customkeystoretype_enum as shared_customkeystoretype_enum
from ..shared import xksproxyconfigurationtype as shared_xksproxyconfigurationtype
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomKeyStoresListEntry:
    r"""Contains information about each custom key store in the custom key store list."""
    
    cloud_hsm_cluster_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudHsmClusterId'), 'exclude': lambda f: f is None }})  
    connection_error_code: Optional[shared_connectionerrorcodetype_enum.ConnectionErrorCodeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConnectionErrorCode'), 'exclude': lambda f: f is None }})  
    connection_state: Optional[shared_connectionstatetype_enum.ConnectionStateTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConnectionState'), 'exclude': lambda f: f is None }})  
    creation_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    custom_key_store_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomKeyStoreId'), 'exclude': lambda f: f is None }})  
    custom_key_store_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomKeyStoreName'), 'exclude': lambda f: f is None }})  
    custom_key_store_type: Optional[shared_customkeystoretype_enum.CustomKeyStoreTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomKeyStoreType'), 'exclude': lambda f: f is None }})  
    trust_anchor_certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrustAnchorCertificate'), 'exclude': lambda f: f is None }})  
    xks_proxy_configuration: Optional[shared_xksproxyconfigurationtype.XksProxyConfigurationType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('XksProxyConfiguration'), 'exclude': lambda f: f is None }})  
    