"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParameterRanges = void 0;
var utils_1 = require("../../../internal/utils");
var categoricalparameterrange_1 = require("./categoricalparameterrange");
var continuousparameterrange_1 = require("./continuousparameterrange");
var integerparameterrange_1 = require("./integerparameterrange");
var class_transformer_1 = require("class-transformer");
/**
 * <p>Specifies ranges of integer, continuous, and categorical hyperparameters that a hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs with hyperparameter values within these ranges to find the combination of values that result in the training job with the best performance as measured by the objective metric of the hyperparameter tuning job.</p> <note> <p>The maximum number of items specified for <code>Array Members</code> refers to the maximum number of hyperparameters for each range and also the maximum for the hyperparameter tuning job itself. That is, the sum of the number of hyperparameters for all the ranges can't exceed the maximum number specified.</p> </note>
 */
var ParameterRanges = /** @class */ (function (_super) {
    __extends(ParameterRanges, _super);
    function ParameterRanges() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: categoricalparameterrange_1.CategoricalParameterRange }),
        (0, class_transformer_1.Expose)({ name: "CategoricalParameterRanges" }),
        (0, class_transformer_1.Type)(function () { return categoricalparameterrange_1.CategoricalParameterRange; }),
        __metadata("design:type", Array)
    ], ParameterRanges.prototype, "categoricalParameterRanges", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: continuousparameterrange_1.ContinuousParameterRange }),
        (0, class_transformer_1.Expose)({ name: "ContinuousParameterRanges" }),
        (0, class_transformer_1.Type)(function () { return continuousparameterrange_1.ContinuousParameterRange; }),
        __metadata("design:type", Array)
    ], ParameterRanges.prototype, "continuousParameterRanges", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: integerparameterrange_1.IntegerParameterRange }),
        (0, class_transformer_1.Expose)({ name: "IntegerParameterRanges" }),
        (0, class_transformer_1.Type)(function () { return integerparameterrange_1.IntegerParameterRange; }),
        __metadata("design:type", Array)
    ], ParameterRanges.prototype, "integerParameterRanges", void 0);
    return ParameterRanges;
}(utils_1.SpeakeasyBase));
exports.ParameterRanges = ParameterRanges;
