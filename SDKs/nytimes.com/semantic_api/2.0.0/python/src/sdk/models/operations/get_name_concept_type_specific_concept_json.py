"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import concept as shared_concept
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetNameConceptTypeSpecificConceptJSONConceptTypeEnum(str, Enum):
    r"""The type of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined as a name-value pair, as in \\"concept_type=[nytd_geo|nytd_per|nytd_org|nytd_des]\\"."""
    NYTD_GEO = 'nytd_geo'
    NYTD_PER = 'nytd_per'
    NYTD_ORG = 'nytd_org'
    NYTD_DES = 'nytd_des'

class GetNameConceptTypeSpecificConceptJSONFieldsEnum(str, Enum):
    r"""\\"all\\" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query
    
    Optional fields are returned in result_set. They are briefly explained here:
    
    pages: A list of topic pages associated with a specific concept.
    ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol.
    links: A list of links from this concept to external data resources.
    taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts.
    combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts.
    geocodes: For geographic concepts, the full GIS record from geonames.
    article_list: A list of up to 10 articles associated with this concept.
    scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article.
    search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept.
    """
    ALL = 'all'
    PAGES = 'pages'
    TICKER_SYMBOL = 'ticker_symbol'
    LINKS = 'links'
    TAXONOMY = 'taxonomy'
    COMBINATIONS = 'combinations'
    GEOCODES = 'geocodes'
    ARTICLE_LIST = 'article_list'
    SCOPE_NOTES = 'scope_notes'
    SEARCH_API_QUERY = 'search_api_query'


@dataclasses.dataclass
class GetNameConceptTypeSpecificConceptJSONRequest:
    
    concept_type: GetNameConceptTypeSpecificConceptJSONConceptTypeEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'concept-type', 'style': 'simple', 'explode': False }})
    r"""The type of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined as a name-value pair, as in \\"concept_type=[nytd_geo|nytd_per|nytd_org|nytd_des]\\"."""  
    query: str = dataclasses.field(metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""Precedes the search term string. Used in a Search Query. Except for &lt;specific_concept_name&gt;, Search Query will take the required parameters listed above (&lt;concept_type&gt;, &lt;concept_uri&gt;, &lt;article_uri&gt;) as an optional_parameter in addition to the query=&lt;query_term&gt;."""  
    specific_concept: str = dataclasses.field(metadata={'path_param': { 'field_name': 'specific-concept', 'style': 'simple', 'explode': False }})
    r"""The name of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined in the URI path, as the element immediately preceding \\".json\\" like with \\"Baseball.json\\"."""  
    fields_: Optional[GetNameConceptTypeSpecificConceptJSONFieldsEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""\\"all\\" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query
    
    Optional fields are returned in result_set. They are briefly explained here:
    
    pages: A list of topic pages associated with a specific concept.
    ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol.
    links: A list of links from this concept to external data resources.
    taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts.
    combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts.
    geocodes: For geographic concepts, the full GIS record from geonames.
    article_list: A list of up to 10 articles associated with this concept.
    scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article.
    search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNameConceptTypeSpecificConceptJSON200ApplicationJSON:
    r"""An array of Concepts"""
    
    copyright: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copyright'), 'exclude': lambda f: f is None }})  
    num_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_results'), 'exclude': lambda f: f is None }})  
    results: Optional[list[shared_concept.Concept]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetNameConceptTypeSpecificConceptJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_name_concept_type_specific_concept_json_200_application_json_object: Optional[GetNameConceptTypeSpecificConceptJSON200ApplicationJSON] = dataclasses.field(default=None)
    r"""An array of Concepts"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    