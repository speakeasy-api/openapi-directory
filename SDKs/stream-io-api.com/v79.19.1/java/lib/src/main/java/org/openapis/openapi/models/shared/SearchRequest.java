/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class SearchRequest {
    /**
     * Channel filter conditions
     */
    @JsonProperty("filter_conditions")
    public java.util.Map<String, Object> filterConditions;
    public SearchRequest withFilterConditions(java.util.Map<String, Object> filterConditions) {
        this.filterConditions = filterConditions;
        return this;
    }
    
    /**
     * Number of messages to return
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    public Double limit;
    public SearchRequest withLimit(Double limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Message filter conditions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message_filter_conditions")
    public java.util.Map<String, Object> messageFilterConditions;
    public SearchRequest withMessageFilterConditions(java.util.Map<String, Object> messageFilterConditions) {
        this.messageFilterConditions = messageFilterConditions;
        return this;
    }
    
    /**
     * Pagination parameter. Cannot be used with non-zero offset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next")
    public String next;
    public SearchRequest withNext(String next) {
        this.next = next;
        return this;
    }
    
    /**
     * Pagination offset. Cannot be used with sort or next.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    public Double offset;
    public SearchRequest withOffset(Double offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * Search phrase
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    public String query;
    public SearchRequest withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * Sort parameters. Cannot be used with non-zero offset
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sort")
    public SortParam[] sort;
    public SearchRequest withSort(SortParam[] sort) {
        this.sort = sort;
        return this;
    }
    
}
