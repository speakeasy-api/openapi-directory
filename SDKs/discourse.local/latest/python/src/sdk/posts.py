"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Posts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_topic_post_pm(self, request: operations.CreateTopicPostPMRequestBody) -> operations.CreateTopicPostPMResponse:
        r"""Creates a new topic, a new post, or a private message"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/posts.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTopicPostPMResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateTopicPostPM200ApplicationJSON])
                res.create_topic_post_pm_200_application_json_object = out

        return res

    def delete_post(self, request: operations.DeletePostRequest) -> operations.DeletePostResponse:
        r"""delete a single post"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePostRequest, base_url, '/posts/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_post(self, request: operations.GetPostRequest) -> operations.GetPostResponse:
        r"""Retrieve a single post"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPostRequest, base_url, '/posts/{id}.json', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPost200ApplicationJSON])
                res.get_post_200_application_json_object = out

        return res

    def list_posts(self, request: operations.ListPostsRequest) -> operations.ListPostsResponse:
        r"""List latest posts across topics"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/posts.json'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ListPostsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPostsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPosts200ApplicationJSON])
                res.list_posts_200_application_json_object = out

        return res

    def lock_post(self, request: operations.LockPostRequest) -> operations.LockPostResponse:
        r"""Lock a post from being edited"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LockPostRequest, base_url, '/posts/{id}/locked.json', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LockPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.LockPost200ApplicationJSON])
                res.lock_post_200_application_json_object = out

        return res

    def perform_post_action(self, request: operations.PerformPostActionRequest) -> operations.PerformPostActionResponse:
        r"""Like a post and other actions"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/post_actions.json'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PerformPostActionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PerformPostAction200ApplicationJSON])
                res.perform_post_action_200_application_json_object = out

        return res

    def post_replies(self, request: operations.PostRepliesRequest) -> operations.PostRepliesResponse:
        r"""List replies to a post"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRepliesRequest, base_url, '/posts/{id}/replies.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRepliesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.PostReplies200ApplicationJSON]])
                res.post_replies_200_application_json_objects = out

        return res

    def update_post(self, request: operations.UpdatePostRequest) -> operations.UpdatePostResponse:
        r"""Update a single post"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePostRequest, base_url, '/posts/{id}.json', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdatePost200ApplicationJSON])
                res.update_post_200_application_json_object = out

        return res

    