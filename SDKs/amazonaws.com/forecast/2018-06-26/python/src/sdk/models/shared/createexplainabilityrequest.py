"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datasource as shared_datasource
from ..shared import explainabilityconfig as shared_explainabilityconfig
from ..shared import schema as shared_schema
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateExplainabilityRequest:
    
    explainability_config: shared_explainabilityconfig.ExplainabilityConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExplainabilityConfig') }})  
    explainability_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExplainabilityName') }})  
    resource_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceArn') }})  
    data_source: Optional[shared_datasource.DataSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataSource'), 'exclude': lambda f: f is None }})
    r"""The source of your data, an Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an Key Management Service (KMS) key."""  
    enable_visualization: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableVisualization'), 'exclude': lambda f: f is None }})  
    end_date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndDateTime'), 'exclude': lambda f: f is None }})  
    schema: Optional[shared_schema.Schema] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Schema'), 'exclude': lambda f: f is None }})
    r"""Defines the fields of a dataset."""  
    start_date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartDateTime'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    