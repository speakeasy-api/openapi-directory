/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Licenses {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Licenses(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Assign SM seats to a network
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AssignOrganizationLicensesSeatsResponse assignOrganizationLicensesSeats(org.openapis.openapi.models.operations.AssignOrganizationLicensesSeatsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AssignOrganizationLicensesSeatsRequest.class, baseUrl, "/organizations/{organizationId}/licenses/assignSeats", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AssignOrganizationLicensesSeatsResponse res = new org.openapis.openapi.models.operations.AssignOrganizationLicensesSeatsResponse(contentType, httpRes.statusCode()) {{
            assignOrganizationLicensesSeats200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AssignOrganizationLicensesSeats200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AssignOrganizationLicensesSeats200ApplicationJSON.class);
                res.assignOrganizationLicensesSeats200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Display a license
     * Display a license
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetOrganizationLicenseResponse getOrganizationLicense(org.openapis.openapi.models.operations.GetOrganizationLicenseRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetOrganizationLicenseRequest.class, baseUrl, "/organizations/{organizationId}/licenses/{licenseId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetOrganizationLicenseResponse res = new org.openapis.openapi.models.operations.GetOrganizationLicenseResponse(contentType, httpRes.statusCode()) {{
            getOrganizationLicense200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetOrganizationLicense200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetOrganizationLicense200ApplicationJSON.class);
                res.getOrganizationLicense200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List the licenses for an organization
     * List the licenses for an organization
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetOrganizationLicensesResponse getOrganizationLicenses(org.openapis.openapi.models.operations.GetOrganizationLicensesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetOrganizationLicensesRequest.class, baseUrl, "/organizations/{organizationId}/licenses", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetOrganizationLicensesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetOrganizationLicensesResponse res = new org.openapis.openapi.models.operations.GetOrganizationLicensesResponse(contentType, httpRes.statusCode()) {{
            getOrganizationLicenses200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetOrganizationLicenses200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetOrganizationLicenses200ApplicationJSON[].class);
                res.getOrganizationLicenses200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Return an overview of the license state for an organization
     * Return an overview of the license state for an organization
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetOrganizationLicensesOverviewResponse getOrganizationLicensesOverview(org.openapis.openapi.models.operations.GetOrganizationLicensesOverviewRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetOrganizationLicensesOverviewRequest.class, baseUrl, "/organizations/{organizationId}/licenses/overview", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetOrganizationLicensesOverviewResponse res = new org.openapis.openapi.models.operations.GetOrganizationLicensesOverviewResponse(contentType, httpRes.statusCode()) {{
            getOrganizationLicensesOverview200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getOrganizationLicensesOverview200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List the licenses in a coterm organization
     * List the licenses in a coterm organization
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetOrganizationLicensingCotermLicensesResponse getOrganizationLicensingCotermLicenses(org.openapis.openapi.models.operations.GetOrganizationLicensingCotermLicensesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetOrganizationLicensingCotermLicensesRequest.class, baseUrl, "/organizations/{organizationId}/licensing/coterm/licenses", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetOrganizationLicensingCotermLicensesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetOrganizationLicensingCotermLicensesResponse res = new org.openapis.openapi.models.operations.GetOrganizationLicensingCotermLicensesResponse(contentType, httpRes.statusCode()) {{
            getOrganizationLicensingCotermLicenses200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetOrganizationLicensingCotermLicenses200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetOrganizationLicensingCotermLicenses200ApplicationJSON[].class);
                res.getOrganizationLicensingCotermLicenses200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Move licenses to another organization
     * Move licenses to another organization. This will also move any devices that the licenses are assigned to
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.MoveOrganizationLicensesResponse moveOrganizationLicenses(org.openapis.openapi.models.operations.MoveOrganizationLicensesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.MoveOrganizationLicensesRequest.class, baseUrl, "/organizations/{organizationId}/licenses/move", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.MoveOrganizationLicensesResponse res = new org.openapis.openapi.models.operations.MoveOrganizationLicensesResponse(contentType, httpRes.statusCode()) {{
            moveOrganizationLicenses200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.MoveOrganizationLicenses200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.MoveOrganizationLicenses200ApplicationJSON.class);
                res.moveOrganizationLicenses200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Move SM seats to another organization
     * Move SM seats to another organization
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.MoveOrganizationLicensesSeatsResponse moveOrganizationLicensesSeats(org.openapis.openapi.models.operations.MoveOrganizationLicensesSeatsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.MoveOrganizationLicensesSeatsRequest.class, baseUrl, "/organizations/{organizationId}/licenses/moveSeats", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.MoveOrganizationLicensesSeatsResponse res = new org.openapis.openapi.models.operations.MoveOrganizationLicensesSeatsResponse(contentType, httpRes.statusCode()) {{
            moveOrganizationLicensesSeats200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.MoveOrganizationLicensesSeats200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.MoveOrganizationLicensesSeats200ApplicationJSON.class);
                res.moveOrganizationLicensesSeats200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Moves a license to a different organization (coterm only)
     * Moves a license to a different organization (coterm only)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.MoveOrganizationLicensingCotermLicensesResponse moveOrganizationLicensingCotermLicenses(org.openapis.openapi.models.operations.MoveOrganizationLicensingCotermLicensesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.MoveOrganizationLicensingCotermLicensesRequest.class, baseUrl, "/organizations/{organizationId}/licensing/coterm/licenses/move", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.MoveOrganizationLicensingCotermLicensesResponse res = new org.openapis.openapi.models.operations.MoveOrganizationLicensingCotermLicensesResponse(contentType, httpRes.statusCode()) {{
            moveOrganizationLicensingCotermLicenses200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.MoveOrganizationLicensingCotermLicenses200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.MoveOrganizationLicensingCotermLicenses200ApplicationJSON.class);
                res.moveOrganizationLicensingCotermLicenses200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Renew SM seats of a license
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RenewOrganizationLicensesSeatsResponse renewOrganizationLicensesSeats(org.openapis.openapi.models.operations.RenewOrganizationLicensesSeatsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RenewOrganizationLicensesSeatsRequest.class, baseUrl, "/organizations/{organizationId}/licenses/renewSeats", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RenewOrganizationLicensesSeatsResponse res = new org.openapis.openapi.models.operations.RenewOrganizationLicensesSeatsResponse(contentType, httpRes.statusCode()) {{
            renewOrganizationLicensesSeats200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RenewOrganizationLicensesSeats200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.RenewOrganizationLicensesSeats200ApplicationJSON.class);
                res.renewOrganizationLicensesSeats200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update a license
     * Update a license
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateOrganizationLicenseResponse updateOrganizationLicense(org.openapis.openapi.models.operations.UpdateOrganizationLicenseRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateOrganizationLicenseRequest.class, baseUrl, "/organizations/{organizationId}/licenses/{licenseId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateOrganizationLicenseResponse res = new org.openapis.openapi.models.operations.UpdateOrganizationLicenseResponse(contentType, httpRes.statusCode()) {{
            updateOrganizationLicense200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateOrganizationLicense200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateOrganizationLicense200ApplicationJSON.class);
                res.updateOrganizationLicense200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}