/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * How is this user authenticated?
 */
export enum PostUsersRequestBodyAuthenticationMethodEnum {
  Password = "password",
  UnusedFormerLdap = "unused_former_ldap",
  Sso = "sso",
  None = "none",
  EmailSignup = "email_signup",
  PasswordWithImportedHash = "password_with_imported_hash",
}

export class PostUsersRequestBodyAvatarFile extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "multipart_form, name=avatar_file" })
  avatarFile: string;

  @SpeakeasyMetadata({ data: "multipart_form, content=true" })
  content: Uint8Array;
}

/**
 * 2FA required setting
 */
export enum PostUsersRequestBodyRequire2faEnum {
  UseSystemSetting = "use_system_setting",
  AlwaysRequire = "always_require",
  NeverRequire = "never_require",
}

/**
 * SSL required setting
 */
export enum PostUsersRequestBodySslRequiredEnum {
  UseSystemSetting = "use_system_setting",
  AlwaysRequire = "always_require",
  NeverRequire = "never_require",
}

export class PostUsersRequestBody extends SpeakeasyBase {
  /**
   * A list of allowed IPs if applicable.  Newline delimited
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=allowed_ips" })
  allowedIps?: string;

  /**
   * Signifies that the user has read all the announcements in the UI.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=announcements_read" })
  announcementsRead?: boolean;

  /**
   * DEPRECATED: Can the user create Bundles (aka Share Links)? Use the bundle permission instead.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=attachments_permission" })
  attachmentsPermission?: boolean;

  /**
   * Scheduled Date/Time at which user will be deactivated
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=authenticate_until;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  authenticateUntil?: Date;

  /**
   * How is this user authenticated?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=authentication_method" })
  authenticationMethod?: PostUsersRequestBodyAuthenticationMethodEnum;

  /**
   * If true, the avatar will be deleted.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=avatar_delete" })
  avatarDelete?: boolean;

  /**
   * An image file for your user avatar.
   */
  @SpeakeasyMetadata({ data: "multipart_form, file=true" })
  avatarFile?: PostUsersRequestBodyAvatarFile;

  /**
   * Allow this user to perform operations on the account, payments, and invoices?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=billing_permission" })
  billingPermission?: boolean;

  /**
   * Exempt this user from being disabled based on inactivity?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=bypass_inactive_disable" })
  bypassInactiveDisable?: boolean;

  /**
   * Allow this user to skip site-wide IP blacklists?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=bypass_site_allowed_ips" })
  bypassSiteAllowedIps?: boolean;

  /**
   * Used for changing a password on an existing user.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=change_password" })
  changePassword?: string;

  /**
   * Optional, but if provided, we will ensure that it matches the value sent in `change_password`.
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=change_password_confirmation",
  })
  changePasswordConfirmation?: string;

  /**
   * User's company
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=company" })
  company?: string;

  /**
   * Can the user connect with WebDAV?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=dav_permission" })
  davPermission?: boolean;

  /**
   * Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=disabled" })
  disabled?: boolean;

  /**
   * User's email.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=email" })
  email?: string;

  /**
   * Can the user access with FTP/FTPS?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ftp_permission" })
  ftpPermission?: boolean;

  /**
   * Permission to grant on the user root.  Can be blank or `full`, `read`, `write`, `list`, or `history`.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=grant_permission" })
  grantPermission?: string;

  /**
   * Group ID to associate this user with.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=group_id" })
  groupId?: number;

  /**
   * A list of group ids to associate this user with.  Comma delimited.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=group_ids" })
  groupIds?: string;

  /**
   * Text to display to the user in the header of the UI
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=header_text" })
  headerText?: string;

  /**
   * Pre-calculated hash of the user's password. If supplied, this will be used to authenticate the user on first login. Supported hash menthods are MD5, SHA1, and SHA256.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=imported_password_hash" })
  importedPasswordHash?: string;

  /**
   * Preferred language
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=language" })
  language?: string;

  /**
   * User's full name
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=name" })
  name?: string;

  /**
   * Any internal notes on the user
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=notes" })
  notes?: string;

  /**
   * Hour of the day at which daily notifications should be sent. Can be in range 0 to 23
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=notification_daily_send_time",
  })
  notificationDailySendTime?: number;

  /**
   * Enable integration with Office for the web?
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=office_integration_enabled",
  })
  officeIntegrationEnabled?: boolean;

  /**
   * User password.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=password" })
  password?: string;

  /**
   * Optional, but if provided, we will ensure that it matches the value sent in `password`.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=password_confirmation" })
  passwordConfirmation?: string;

  /**
   * Number of days to allow user to use the same password
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=password_validity_days" })
  passwordValidityDays?: number;

  /**
   * Should the user receive admin alerts such a certificate expiration notifications and overages?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=receive_admin_alerts" })
  receiveAdminAlerts?: boolean;

  /**
   * 2FA required setting
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=require_2fa" })
  require2fa?: PostUsersRequestBodyRequire2faEnum;

  /**
   * Is a password change required upon next user login?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=require_password_change" })
  requirePasswordChange?: boolean;

  /**
   * Can this user access the REST API?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=restapi_permission" })
  restapiPermission?: boolean;

  /**
   * Does this user manage it's own credentials or is it a shared/bot user?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=self_managed" })
  selfManaged?: boolean;

  /**
   * Can the user access with SFTP?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=sftp_permission" })
  sftpPermission?: boolean;

  /**
   * Is the user an administrator for this site?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=site_admin" })
  siteAdmin?: boolean;

  /**
   * Skip Welcome page in the UI?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=skip_welcome_screen" })
  skipWelcomeScreen?: boolean;

  /**
   * SSL required setting
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ssl_required" })
  sslRequired?: PostUsersRequestBodySslRequiredEnum;

  /**
   * SSO (Single Sign On) strategy ID for the user, if applicable.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=sso_strategy_id" })
  ssoStrategyId?: number;

  /**
   * Is the user subscribed to the newsletter?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=subscribe_to_newsletter" })
  subscribeToNewsletter?: boolean;

  /**
   * User time zone
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=time_zone" })
  timeZone?: string;

  /**
   * Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=user_root" })
  userRoot?: string;

  /**
   * User's username
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=username" })
  username?: string;
}

export class PostUsersResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The Users object.
   */
  @SpeakeasyMetadata()
  userEntity?: shared.UserEntity;
}
