/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AccessTokenDetails - Access token details that are currently associated with this user
 */
public class AccessTokenDetails {
    /**
     * Client ID that is associated with the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_id")
    public String clientId;

    public AccessTokenDetails withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * Contributor ID that is associated with the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contributor_id")
    public String contributorId;

    public AccessTokenDetails withContributorId(String contributorId) {
        this.contributorId = contributorId;
        return this;
    }
    
    /**
     * Customer ID that is associated with the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    public String customerId;

    public AccessTokenDetails withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }
    
    /**
     * Number of seconds until the access token expires; no expiration if this value is null
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_in")
    public Long expiresIn;

    public AccessTokenDetails withExpiresIn(Long expiresIn) {
        this.expiresIn = expiresIn;
        return this;
    }
    
    /**
     * Organization ID that is associated with the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_id")
    public String organizationId;

    public AccessTokenDetails withOrganizationId(String organizationId) {
        this.organizationId = organizationId;
        return this;
    }
    
    /**
     * Type of access token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("realm")
    public AccessTokenDetailsRealmEnum realm;

    public AccessTokenDetails withRealm(AccessTokenDetailsRealmEnum realm) {
        this.realm = realm;
        return this;
    }
    
    /**
     * Scopes that this access token provides when used as authentication
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    public String[] scopes;

    public AccessTokenDetails withScopes(String[] scopes) {
        this.scopes = scopes;
        return this;
    }
    
    /**
     * User ID that is associated with the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public String userId;

    public AccessTokenDetails withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * User name that is associated with the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;

    public AccessTokenDetails withUsername(String username) {
        this.username = username;
        return this;
    }
    
    public AccessTokenDetails(){}
}
