<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PdfOcr 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Convert a PDF into text lines with location
     * 
     * Converts a PDF into lines/text with location information and other metdata via Optical Character Recognition.  This API is intended to be run on scanned documents.  If you want to OCR photos (e.g. taken with a smart phone camera), be sure to use the photo/toText API instead, as it is designed to unskew the image first.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PdfOcrPdfToLinesWithLocationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PdfOcrPdfToLinesWithLocationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PdfOcrPdfToLinesWithLocationResponse
     */
	public function pdfOcrPdfToLinesWithLocation(
        \OpenAPI\OpenAPI\Models\Operations\PdfOcrPdfToLinesWithLocationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PdfOcrPdfToLinesWithLocationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PdfOcrPdfToLinesWithLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ocr/pdf/to/lines-with-location');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PdfOcrPdfToLinesWithLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pdfToLinesWithLocationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PdfToLinesWithLocationResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pdfToLinesWithLocationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PdfToLinesWithLocationResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Convert a PDF into words with location
     * 
     * Converts a PDF into words/text with location information and other metdata via Optical Character Recognition.  This API is intended to be run on scanned documents.  If you want to OCR photos (e.g. taken with a smart phone camera), be sure to use the photo/toText API instead, as it is designed to unskew the image first.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PdfOcrPdfToWordsWithLocationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PdfOcrPdfToWordsWithLocationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PdfOcrPdfToWordsWithLocationResponse
     */
	public function pdfOcrPdfToWordsWithLocation(
        \OpenAPI\OpenAPI\Models\Operations\PdfOcrPdfToWordsWithLocationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PdfOcrPdfToWordsWithLocationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PdfOcrPdfToWordsWithLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ocr/pdf/to/words-with-location');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PdfOcrPdfToWordsWithLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pdfToWordsWithLocationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PdfToWordsWithLocationResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pdfToWordsWithLocationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PdfToWordsWithLocationResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Converts an uploaded PDF file into text via Optical Character Recognition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PdfOcrPostRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PdfOcrPostSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PdfOcrPostResponse
     */
	public function pdfOcrPost(
        \OpenAPI\OpenAPI\Models\Operations\PdfOcrPostRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PdfOcrPostSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PdfOcrPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ocr/pdf/toText');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PdfOcrPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pdfToTextResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PdfToTextResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pdfToTextResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PdfToTextResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}