"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import pull_request_review_comment as shared_pull_request_review_comment
from datetime import datetime
from enum import Enum
from typing import Optional

class PullsListReviewCommentsForRepoDirectionEnum(str, Enum):
    r"""Can be either `asc` or `desc`. Ignored without `sort` parameter."""
    ASC = 'asc'
    DESC = 'desc'

class PullsListReviewCommentsForRepoSortEnum(str, Enum):
    CREATED = 'created'
    UPDATED = 'updated'
    CREATED_AT = 'created_at'


@dataclasses.dataclass
class PullsListReviewCommentsForRepoRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})  
    direction: Optional[PullsListReviewCommentsForRepoDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""Can be either `asc` or `desc`. Ignored without `sort` parameter."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Results per page (max 100)"""  
    since: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'since', 'style': 'form', 'explode': True }})
    r"""Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."""  
    sort: Optional[PullsListReviewCommentsForRepoSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})  
    

@dataclasses.dataclass
class PullsListReviewCommentsForRepoResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    pull_request_review_comments: Optional[list[shared_pull_request_review_comment.PullRequestReviewComment]] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    