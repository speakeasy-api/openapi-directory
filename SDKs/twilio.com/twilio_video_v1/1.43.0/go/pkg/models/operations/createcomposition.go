// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

var CreateCompositionServerList = []string{
	"https://video.twilio.com",
}

type CreateCompositionSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

// CreateCompositionCreateCompositionRequestStatusCallbackMethodEnum - The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
type CreateCompositionCreateCompositionRequestStatusCallbackMethodEnum string

const (
	CreateCompositionCreateCompositionRequestStatusCallbackMethodEnumHead   CreateCompositionCreateCompositionRequestStatusCallbackMethodEnum = "HEAD"
	CreateCompositionCreateCompositionRequestStatusCallbackMethodEnumGet    CreateCompositionCreateCompositionRequestStatusCallbackMethodEnum = "GET"
	CreateCompositionCreateCompositionRequestStatusCallbackMethodEnumPost   CreateCompositionCreateCompositionRequestStatusCallbackMethodEnum = "POST"
	CreateCompositionCreateCompositionRequestStatusCallbackMethodEnumPatch  CreateCompositionCreateCompositionRequestStatusCallbackMethodEnum = "PATCH"
	CreateCompositionCreateCompositionRequestStatusCallbackMethodEnumPut    CreateCompositionCreateCompositionRequestStatusCallbackMethodEnum = "PUT"
	CreateCompositionCreateCompositionRequestStatusCallbackMethodEnumDelete CreateCompositionCreateCompositionRequestStatusCallbackMethodEnum = "DELETE"
)

func (e CreateCompositionCreateCompositionRequestStatusCallbackMethodEnum) ToPointer() *CreateCompositionCreateCompositionRequestStatusCallbackMethodEnum {
	return &e
}

func (e *CreateCompositionCreateCompositionRequestStatusCallbackMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = CreateCompositionCreateCompositionRequestStatusCallbackMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCompositionCreateCompositionRequestStatusCallbackMethodEnum: %v", v)
	}
}

type CreateCompositionCreateCompositionRequest struct {
	// An array of track names from the same group room to merge into the new composition. Can include zero or more track names. The new composition includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which will match zero or more characters in a track name. For example, `student*` includes `student` as well as `studentTeam`. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request
	AudioSources []string `form:"name=AudioSources"`
	// An array of track names to exclude. The new composition includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which will match zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.
	AudioSourcesExcluded []string                          `form:"name=AudioSourcesExcluded"`
	Format               *shared.CompositionEnumFormatEnum `form:"name=Format"`
	// A string that describes the columns (width) and rows (height) of the generated composed video in pixels. Defaults to `640x480`.
	// The string's format is `{width}x{height}` where:
	//
	// * 16 <= `{width}` <= 1280
	// * 16 <= `{height}` <= 1280
	// * `{width}` * `{height}` <= 921,600
	//
	// Typical values are:
	//
	// * HD = `1280x720`
	// * PAL = `1024x576`
	// * VGA = `640x480`
	// * CIF = `320x240`
	//
	// Note that the `resolution` imposes an aspect ratio to the resulting composition. When the original video tracks are constrained by the aspect ratio, they are scaled to fit. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
	Resolution *string `form:"name=Resolution"`
	// The SID of the Group Room with the media tracks to be used as composition sources.
	RoomSid string `form:"name=RoomSid"`
	// The URL we should call using the `status_callback_method` to send status information to your application on every composition event. If not provided, status callback events will not be dispatched.
	StatusCallback *string `form:"name=StatusCallback"`
	// The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
	StatusCallbackMethod *CreateCompositionCreateCompositionRequestStatusCallbackMethodEnum `form:"name=StatusCallbackMethod"`
	// Whether to clip the intervals where there is no active media in the composition. The default is `true`. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
	Trim *bool `form:"name=Trim"`
	// An object that describes the video layout of the composition in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request
	VideoLayout interface{} `form:"name=VideoLayout"`
}

type CreateCompositionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Created
	VideoV1Composition *shared.VideoV1Composition
}
