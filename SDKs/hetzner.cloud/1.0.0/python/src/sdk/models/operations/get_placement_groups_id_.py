"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetPlacementGroupsIDRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of the resource"""  
    
class GetPlacementGroupsIDPlacementGroupResponsePlacementGroupTypeEnum(str, Enum):
    r"""Type of the Placement Group"""
    SPREAD = 'spread'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPlacementGroupsIDPlacementGroupResponsePlacementGroup:
    
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Resource was created (in ISO-8601 format)"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    labels: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""User-defined labels (key-value pairs)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Resource. Must be unique per Project."""  
    servers: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servers') }})
    r"""Array of IDs of Servers that are part of this Placement Group"""  
    type: GetPlacementGroupsIDPlacementGroupResponsePlacementGroupTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of the Placement Group"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPlacementGroupsIDPlacementGroupResponse:
    r"""The `placement_group` key contains a PlacementGroup object"""
    
    placement_group: GetPlacementGroupsIDPlacementGroupResponsePlacementGroup = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placement_group') }})  
    

@dataclasses.dataclass
class GetPlacementGroupsIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    placement_group_response: Optional[GetPlacementGroupsIDPlacementGroupResponse] = dataclasses.field(default=None)
    r"""The `placement_group` key contains a PlacementGroup object"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    