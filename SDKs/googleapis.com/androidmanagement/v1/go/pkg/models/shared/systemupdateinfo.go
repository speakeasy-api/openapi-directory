// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SystemUpdateInfoUpdateStatusEnum - The status of an update: whether an update exists and what type it is.
type SystemUpdateInfoUpdateStatusEnum string

const (
	SystemUpdateInfoUpdateStatusEnumUpdateStatusUnknown     SystemUpdateInfoUpdateStatusEnum = "UPDATE_STATUS_UNKNOWN"
	SystemUpdateInfoUpdateStatusEnumUpToDate                SystemUpdateInfoUpdateStatusEnum = "UP_TO_DATE"
	SystemUpdateInfoUpdateStatusEnumUnknownUpdateAvailable  SystemUpdateInfoUpdateStatusEnum = "UNKNOWN_UPDATE_AVAILABLE"
	SystemUpdateInfoUpdateStatusEnumSecurityUpdateAvailable SystemUpdateInfoUpdateStatusEnum = "SECURITY_UPDATE_AVAILABLE"
	SystemUpdateInfoUpdateStatusEnumOsUpdateAvailable       SystemUpdateInfoUpdateStatusEnum = "OS_UPDATE_AVAILABLE"
)

func (e SystemUpdateInfoUpdateStatusEnum) ToPointer() *SystemUpdateInfoUpdateStatusEnum {
	return &e
}

func (e *SystemUpdateInfoUpdateStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UPDATE_STATUS_UNKNOWN":
		fallthrough
	case "UP_TO_DATE":
		fallthrough
	case "UNKNOWN_UPDATE_AVAILABLE":
		fallthrough
	case "SECURITY_UPDATE_AVAILABLE":
		fallthrough
	case "OS_UPDATE_AVAILABLE":
		*e = SystemUpdateInfoUpdateStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SystemUpdateInfoUpdateStatusEnum: %v", v)
	}
}

// SystemUpdateInfo - Information about a potential pending system update.
type SystemUpdateInfo struct {
	// The time when the update was first available. A zero value indicates that this field is not set. This field is set only if an update is available (that is, updateStatus is neither UPDATE_STATUS_UNKNOWN nor UP_TO_DATE).
	UpdateReceivedTime *string `json:"updateReceivedTime,omitempty"`
	// The status of an update: whether an update exists and what type it is.
	UpdateStatus *SystemUpdateInfoUpdateStatusEnum `json:"updateStatus,omitempty"`
}
