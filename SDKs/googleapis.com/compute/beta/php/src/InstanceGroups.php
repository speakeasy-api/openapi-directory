<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class InstanceGroups 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds a list of instances to the specified instance group. All of the instances in the instance group must be in the same network/subnetwork. Read Adding instances for more information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAddInstancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAddInstancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAddInstancesResponse
     */
	public function computeInstanceGroupsAddInstances(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAddInstancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAddInstancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAddInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAddInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceGroupsAddInstancesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAddInstancesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAddInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of instance groups and sorts them by zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAggregatedListResponse
     */
	public function computeInstanceGroupsAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/instanceGroups', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instanceGroupAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstanceGroupAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified instance group. The instances in the group are not deleted. Note that instance group must not belong to a backend service. Read Deleting an instance group for more information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsDeleteResponse
     */
	public function computeInstanceGroupsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified zonal instance group. Get a list of available zonal instance groups by making a list() request. For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsGetResponse
     */
	public function computeInstanceGroupsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instanceGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstanceGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an instance group in the specified project using the parameters that are included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsInsertResponse
     */
	public function computeInstanceGroupsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instanceGroups', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceGroup", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of zonal instance group resources contained within the specified zone. For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListResponse
     */
	public function computeInstanceGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instanceGroups', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instanceGroupList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstanceGroupList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the instances in the specified instance group. The orderBy query parameter is not supported. The filter query parameter is supported, but only for expressions that use `eq` (equal) or `ne` (not equal) operators.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListInstancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListInstancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListInstancesResponse
     */
	public function computeInstanceGroupsListInstances(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListInstancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListInstancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceGroupsListInstancesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListInstancesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsListInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instanceGroupsListInstances = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstanceGroupsListInstances', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes one or more instances from the specified instance group, but does not delete those instances. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration before the VM instance is removed or deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsRemoveInstancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsRemoveInstancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsRemoveInstancesResponse
     */
	public function computeInstanceGroupsRemoveInstances(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsRemoveInstancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsRemoveInstancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsRemoveInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsRemoveInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceGroupsRemoveInstancesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsRemoveInstancesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsRemoveInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the named ports for the specified instance group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsSetNamedPortsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsSetNamedPortsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsSetNamedPortsResponse
     */
	public function computeInstanceGroupsSetNamedPorts(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsSetNamedPortsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsSetNamedPortsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsSetNamedPortsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsSetNamedPortsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceGroupsSetNamedPortsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsSetNamedPortsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsSetNamedPortsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsTestIamPermissionsResponse
     */
	public function computeInstanceGroupsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instanceGroups/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstanceGroupsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}