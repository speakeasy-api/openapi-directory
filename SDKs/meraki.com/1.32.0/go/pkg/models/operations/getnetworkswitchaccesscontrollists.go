// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworkSwitchAccessControlListsRequest struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// GetNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnum - IP address version
type GetNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnum string

const (
	GetNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnumAny  GetNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnum = "any"
	GetNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnumIpv4 GetNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnum = "ipv4"
	GetNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnumIpv6 GetNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnum = "ipv6"
)

func (e GetNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnum) ToPointer() *GetNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnum {
	return &e
}

func (e *GetNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = GetNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnum: %v", v)
	}
}

// GetNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnum - 'allow' or 'deny' traffic specified by this rule
type GetNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnum string

const (
	GetNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnumAllow GetNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnum = "allow"
	GetNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnumDeny  GetNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnum = "deny"
)

func (e GetNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnum) ToPointer() *GetNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnum {
	return &e
}

func (e *GetNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "deny":
		*e = GetNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnum: %v", v)
	}
}

// GetNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum - The type of protocol
type GetNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum string

const (
	GetNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnumAny GetNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum = "any"
	GetNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnumTCP GetNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum = "tcp"
	GetNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnumUDP GetNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum = "udp"
)

func (e GetNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum) ToPointer() *GetNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum {
	return &e
}

func (e *GetNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "tcp":
		fallthrough
	case "udp":
		*e = GetNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum: %v", v)
	}
}

type GetNetworkSwitchAccessControlLists200ApplicationJSONRules struct {
	// Description of the rule (optional)
	Comment *string `json:"comment,omitempty"`
	// Destination IP address (in IP or CIDR notation)
	DstCidr *string `json:"dstCidr,omitempty"`
	// Destination port
	DstPort *string `json:"dstPort,omitempty"`
	// IP address version
	IPVersion *GetNetworkSwitchAccessControlLists200ApplicationJSONRulesIPVersionEnum `json:"ipVersion,omitempty"`
	// 'allow' or 'deny' traffic specified by this rule
	Policy *GetNetworkSwitchAccessControlLists200ApplicationJSONRulesPolicyEnum `json:"policy,omitempty"`
	// The type of protocol
	Protocol *GetNetworkSwitchAccessControlLists200ApplicationJSONRulesProtocolEnum `json:"protocol,omitempty"`
	// Source IP address (in IP or CIDR notation)
	SrcCidr *string `json:"srcCidr,omitempty"`
	// Source port
	SrcPort *string `json:"srcPort,omitempty"`
	// ncoming traffic VLAN
	Vlan *string `json:"vlan,omitempty"`
}

// GetNetworkSwitchAccessControlLists200ApplicationJSON - Successful operation
type GetNetworkSwitchAccessControlLists200ApplicationJSON struct {
	// An ordered array of the access control list rules
	Rules []GetNetworkSwitchAccessControlLists200ApplicationJSONRules `json:"rules,omitempty"`
}

type GetNetworkSwitchAccessControlListsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkSwitchAccessControlLists200ApplicationJSONObject *GetNetworkSwitchAccessControlLists200ApplicationJSON
}
