/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TranslateTextResponse - Success
 */
public class TranslateTextResponse {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AppliedSettings")
    public TranslationSettings appliedSettings;

    public TranslateTextResponse withAppliedSettings(TranslationSettings appliedSettings) {
        this.appliedSettings = appliedSettings;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AppliedTerminologies")
    public AppliedTerminology[] appliedTerminologies;

    public TranslateTextResponse withAppliedTerminologies(AppliedTerminology[] appliedTerminologies) {
        this.appliedTerminologies = appliedTerminologies;
        return this;
    }
    
    @JsonProperty("SourceLanguageCode")
    public String sourceLanguageCode;

    public TranslateTextResponse withSourceLanguageCode(String sourceLanguageCode) {
        this.sourceLanguageCode = sourceLanguageCode;
        return this;
    }
    
    @JsonProperty("TargetLanguageCode")
    public String targetLanguageCode;

    public TranslateTextResponse withTargetLanguageCode(String targetLanguageCode) {
        this.targetLanguageCode = targetLanguageCode;
        return this;
    }
    
    @JsonProperty("TranslatedText")
    public String translatedText;

    public TranslateTextResponse withTranslatedText(String translatedText) {
        this.translatedText = translatedText;
        return this;
    }
    
    public TranslateTextResponse(@JsonProperty("SourceLanguageCode") String sourceLanguageCode, @JsonProperty("TargetLanguageCode") String targetLanguageCode, @JsonProperty("TranslatedText") String translatedText) {
        this.sourceLanguageCode = sourceLanguageCode;
        this.targetLanguageCode = targetLanguageCode;
        this.translatedText = translatedText;
  }
}
