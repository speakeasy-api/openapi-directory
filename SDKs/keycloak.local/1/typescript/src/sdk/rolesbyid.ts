/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class RolesByID {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete the role
   */
  deleteRealmRolesByIdRoleId(
    req: operations.DeleteRealmRolesByIdRoleIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmRolesByIdRoleIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRealmRolesByIdRoleIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/roles-by-id/{role-id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmRolesByIdRoleIdResponse =
        new operations.DeleteRealmRolesByIdRoleIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Remove a set of roles from the role’s composite
   */
  deleteRealmRolesByIdRoleIdComposites(
    req: operations.DeleteRealmRolesByIdRoleIdCompositesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmRolesByIdRoleIdCompositesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRealmRolesByIdRoleIdCompositesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/roles-by-id/{role-id}/composites",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmRolesByIdRoleIdCompositesResponse =
        new operations.DeleteRealmRolesByIdRoleIdCompositesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Get a specific role’s representation
   */
  getRealmRolesByIdRoleId(
    req: operations.GetRealmRolesByIdRoleIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmRolesByIdRoleIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmRolesByIdRoleIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/roles-by-id/{role-id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmRolesByIdRoleIdResponse =
        new operations.GetRealmRolesByIdRoleIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentation = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get role’s children   Returns a set of role’s children provided the role is a composite.
   */
  getRealmRolesByIdRoleIdComposites(
    req: operations.GetRealmRolesByIdRoleIdCompositesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmRolesByIdRoleIdCompositesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmRolesByIdRoleIdCompositesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/roles-by-id/{role-id}/composites",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmRolesByIdRoleIdCompositesResponse =
        new operations.GetRealmRolesByIdRoleIdCompositesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get client-level roles for the client that are in the role’s composite
   */
  getRealmRolesByIdRoleIdCompositesClientsClient(
    req: operations.GetRealmRolesByIdRoleIdCompositesClientsClientRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmRolesByIdRoleIdCompositesClientsClientResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmRolesByIdRoleIdCompositesClientsClientRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/roles-by-id/{role-id}/composites/clients/{client}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmRolesByIdRoleIdCompositesClientsClientResponse =
        new operations.GetRealmRolesByIdRoleIdCompositesClientsClientResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get realm-level roles that are in the role’s composite
   */
  getRealmRolesByIdRoleIdCompositesRealm(
    req: operations.GetRealmRolesByIdRoleIdCompositesRealmRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmRolesByIdRoleIdCompositesRealmResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmRolesByIdRoleIdCompositesRealmRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/roles-by-id/{role-id}/composites/realm",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmRolesByIdRoleIdCompositesRealmResponse =
        new operations.GetRealmRolesByIdRoleIdCompositesRealmResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
   */
  getRealmRolesByIdRoleIdManagementPermissions(
    req: operations.GetRealmRolesByIdRoleIdManagementPermissionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmRolesByIdRoleIdManagementPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmRolesByIdRoleIdManagementPermissionsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/roles-by-id/{role-id}/management/permissions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmRolesByIdRoleIdManagementPermissionsResponse =
        new operations.GetRealmRolesByIdRoleIdManagementPermissionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.managementPermissionReference = utils.objectToClass(
              httpRes?.data,
              shared.ManagementPermissionReference
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Make the role a composite role by associating some child roles
   */
  postRealmRolesByIdRoleIdComposites(
    req: operations.PostRealmRolesByIdRoleIdCompositesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmRolesByIdRoleIdCompositesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmRolesByIdRoleIdCompositesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/roles-by-id/{role-id}/composites",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmRolesByIdRoleIdCompositesResponse =
        new operations.PostRealmRolesByIdRoleIdCompositesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Update the role
   */
  putRealmRolesByIdRoleId(
    req: operations.PutRealmRolesByIdRoleIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmRolesByIdRoleIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutRealmRolesByIdRoleIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/roles-by-id/{role-id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "roleRepresentation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmRolesByIdRoleIdResponse =
        new operations.PutRealmRolesByIdRoleIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
   */
  putRealmRolesByIdRoleIdManagementPermissions(
    req: operations.PutRealmRolesByIdRoleIdManagementPermissionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmRolesByIdRoleIdManagementPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutRealmRolesByIdRoleIdManagementPermissionsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/roles-by-id/{role-id}/management/permissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "managementPermissionReference",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmRolesByIdRoleIdManagementPermissionsResponse =
        new operations.PutRealmRolesByIdRoleIdManagementPermissionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.managementPermissionReference = utils.objectToClass(
              httpRes?.data,
              shared.ManagementPermissionReference
            );
          }
          break;
      }

      return res;
    });
  }
}
