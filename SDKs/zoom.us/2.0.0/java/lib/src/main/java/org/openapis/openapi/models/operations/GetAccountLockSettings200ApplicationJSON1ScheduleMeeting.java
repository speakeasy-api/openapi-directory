/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class GetAccountLockSettings200ApplicationJSON1ScheduleMeeting {
    /**
     * Determine how participants can join the audio portion of the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio_type")
    public Boolean audioType;
    public GetAccountLockSettings200ApplicationJSON1ScheduleMeeting withAudioType(Boolean audioType) {
        this.audioType = audioType;
        return this;
    }
    
    /**
     * If the value is set to `true`, the meeting password will be encrypted and included in the join meeting link to allow participants to join with just one click without having to enter the password.
     *  
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("embed_password_in_join_link")
    public Boolean embedPasswordInJoinLink;
    public GetAccountLockSettings200ApplicationJSON1ScheduleMeeting withEmbedPasswordInJoinLink(Boolean embedPasswordInJoinLink) {
        this.embedPasswordInJoinLink = embedPasswordInJoinLink;
        return this;
    }
    
    /**
     * Allow only signed-in users to join meetings.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforce_login")
    public Boolean enforceLogin;
    public GetAccountLockSettings200ApplicationJSON1ScheduleMeeting withEnforceLogin(Boolean enforceLogin) {
        this.enforceLogin = enforceLogin;
        return this;
    }
    
    /**
     * Specify the domains from which users can join a meeting.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforce_login_domains")
    public String enforceLoginDomains;
    public GetAccountLockSettings200ApplicationJSON1ScheduleMeeting withEnforceLoginDomains(String enforceLoginDomains) {
        this.enforceLoginDomains = enforceLoginDomains;
        return this;
    }
    
    /**
     * Allow only signed-in users with specified domains to join meetings.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforce_login_with_domains")
    public Boolean enforceLoginWithDomains;
    public GetAccountLockSettings200ApplicationJSON1ScheduleMeeting withEnforceLoginWithDomains(Boolean enforceLoginWithDomains) {
        this.enforceLoginWithDomains = enforceLoginWithDomains;
        return this;
    }
    
    /**
     * Start meetings with host video on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_video")
    public Boolean hostVideo;
    public GetAccountLockSettings200ApplicationJSON1ScheduleMeeting withHostVideo(Boolean hostVideo) {
        this.hostVideo = hostVideo;
        return this;
    }
    
    /**
     * Allow participants to join the meeting before the host arrives
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("join_before_host")
    public Boolean joinBeforeHost;
    public GetAccountLockSettings200ApplicationJSON1ScheduleMeeting withJoinBeforeHost(Boolean joinBeforeHost) {
        this.joinBeforeHost = joinBeforeHost;
        return this;
    }
    
    /**
     * Only authenticated users can join meetings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meeting_authentication")
    public Boolean meetingAuthentication;
    public GetAccountLockSettings200ApplicationJSON1ScheduleMeeting withMeetingAuthentication(Boolean meetingAuthentication) {
        this.meetingAuthentication = meetingAuthentication;
        return this;
    }
    
    /**
     * Hide actual meeting topic and display "Zoom Meeting" for your scheduled meetings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("not_store_meeting_topic")
    public Boolean notStoreMeetingTopic;
    public GetAccountLockSettings200ApplicationJSON1ScheduleMeeting withNotStoreMeetingTopic(Boolean notStoreMeetingTopic) {
        this.notStoreMeetingTopic = notStoreMeetingTopic;
        return this;
    }
    
    /**
     * Start meetings with participant video on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("participant_video")
    public Boolean participantVideo;
    public GetAccountLockSettings200ApplicationJSON1ScheduleMeeting withParticipantVideo(Boolean participantVideo) {
        this.participantVideo = participantVideo;
        return this;
    }
    
    /**
     * Require password for instant meetings. If you use PMI for your instant meetings, this option will be disabled. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_password_for_instant_meetings")
    public Boolean requirePasswordForInstantMeetings;
    public GetAccountLockSettings200ApplicationJSON1ScheduleMeeting withRequirePasswordForInstantMeetings(Boolean requirePasswordForInstantMeetings) {
        this.requirePasswordForInstantMeetings = requirePasswordForInstantMeetings;
        return this;
    }
    
    /**
     * Require participants to enter password for PMI meetings. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_password_for_pmi_meetings")
    public Boolean requirePasswordForPmiMeetings;
    public GetAccountLockSettings200ApplicationJSON1ScheduleMeeting withRequirePasswordForPmiMeetings(Boolean requirePasswordForPmiMeetings) {
        this.requirePasswordForPmiMeetings = requirePasswordForPmiMeetings;
        return this;
    }
    
    /**
     * This setting applies for regular meetings that do not use PMI. If enabled, a password will be generated while a host schedules a new meeting and participants will be required to enter the password before they can join the meeting. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_password_for_scheduling_new_meetings")
    public Boolean requirePasswordForSchedulingNewMeetings;
    public GetAccountLockSettings200ApplicationJSON1ScheduleMeeting withRequirePasswordForSchedulingNewMeetings(Boolean requirePasswordForSchedulingNewMeetings) {
        this.requirePasswordForSchedulingNewMeetings = requirePasswordForSchedulingNewMeetings;
        return this;
    }
    
}
