<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Partners 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a customer for zero-touch enrollment. After the method returns successfully, admin and owner roles can manage devices and EMM configs by calling API methods or using their zero-touch enrollment portal. The customer receives an email that welcomes them to zero-touch enrollment and explains how to sign into the portal.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersCustomersCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersCustomersCreateResponse
     */
	public function androiddeviceprovisioningPartnersCustomersCreate(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersCustomersCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersCustomersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/customers', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersCustomersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createCustomerRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersCustomersCreateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersCustomersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->company = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Company', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the customers that are enrolled to the reseller identified by the `partnerId` argument. This list includes customers that the reseller created and customers that enrolled themselves using the portal.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersCustomersListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersCustomersListResponse
     */
	public function androiddeviceprovisioningPartnersCustomersList(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersCustomersListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersCustomersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/customers', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersCustomersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersCustomersListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersCustomersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCustomersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCustomersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Claims a device for a customer and adds it to zero-touch enrollment. If the device is already claimed by another customer, the call returns an error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesClaimRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesClaimResponse
     */
	public function androiddeviceprovisioningPartnersDevicesClaim(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesClaimRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesClaimResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/devices:claim', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesClaimRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "claimDeviceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesClaimRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesClaimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->claimDeviceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClaimDeviceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Claims a batch of devices for a customer asynchronously. Adds the devices to zero-touch enrollment. To learn more, read [Longâ€‘running batch operations](/zero-touch/guides/how-it-works#operations).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesClaimAsyncRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesClaimAsyncResponse
     */
	public function androiddeviceprovisioningPartnersDevicesClaimAsync(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesClaimAsyncRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesClaimAsyncResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/devices:claimAsync', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesClaimAsyncRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "claimDevicesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesClaimAsyncRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesClaimAsyncResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Finds devices by hardware identifiers, such as IMEI.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesFindByIdentifierRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesFindByIdentifierResponse
     */
	public function androiddeviceprovisioningPartnersDevicesFindByIdentifier(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesFindByIdentifierRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesFindByIdentifierResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/devices:findByIdentifier', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesFindByIdentifierRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "findDevicesByDeviceIdentifierRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesFindByIdentifierRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesFindByIdentifierResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->findDevicesByDeviceIdentifierResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FindDevicesByDeviceIdentifierResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Finds devices claimed for customers. The results only contain devices registered to the reseller that's identified by the `partnerId` argument. The customer's devices purchased from other resellers don't appear in the results.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesFindByOwnerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesFindByOwnerResponse
     */
	public function androiddeviceprovisioningPartnersDevicesFindByOwner(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesFindByOwnerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesFindByOwnerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/devices:findByOwner', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesFindByOwnerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "findDevicesByOwnerRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesFindByOwnerRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesFindByOwnerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->findDevicesByOwnerResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FindDevicesByOwnerResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesGetResponse
     */
	public function androiddeviceprovisioningPartnersDevicesGet(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->device = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Device', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates reseller metadata associated with the device. Android devices only.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesMetadataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesMetadataResponse
     */
	public function androiddeviceprovisioningPartnersDevicesMetadata(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesMetadataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{metadataOwnerId}/devices/{deviceId}/metadata', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesMetadataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateDeviceMetadataRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesMetadataRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceMetadata = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceMetadata', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unclaims a device from a customer and removes it from zero-touch enrollment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUnclaimRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUnclaimResponse
     */
	public function androiddeviceprovisioningPartnersDevicesUnclaim(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUnclaimRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUnclaimResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/devices:unclaim', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUnclaimRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "unclaimDeviceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUnclaimRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUnclaimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unclaims a batch of devices for a customer asynchronously. Removes the devices from zero-touch enrollment. To learn more, read [Longâ€‘running batch operations](/zero-touch/guides/how-it-works#operations).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUnclaimAsyncRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUnclaimAsyncResponse
     */
	public function androiddeviceprovisioningPartnersDevicesUnclaimAsync(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUnclaimAsyncRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUnclaimAsyncResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/devices:unclaimAsync', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUnclaimAsyncRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "unclaimDevicesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUnclaimAsyncRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUnclaimAsyncResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the reseller metadata attached to a batch of devices. This method updates devices asynchronously and returns an `Operation` that can be used to track progress. Read [Longâ€‘running batch operations](/zero-touch/guides/how-it-works#operations). Android Devices only.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUpdateMetadataAsyncRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUpdateMetadataAsyncResponse
     */
	public function androiddeviceprovisioningPartnersDevicesUpdateMetadataAsync(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUpdateMetadataAsyncRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUpdateMetadataAsyncResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/partners/{partnerId}/devices:updateMetadataAsync', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUpdateMetadataAsyncRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateDeviceMetadataInBatchRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUpdateMetadataAsyncRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersDevicesUpdateMetadataAsyncResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the customers of the vendor.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersVendorsCustomersListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersVendorsCustomersListResponse
     */
	public function androiddeviceprovisioningPartnersVendorsCustomersList(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersVendorsCustomersListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersVendorsCustomersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/customers', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersVendorsCustomersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersVendorsCustomersListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersVendorsCustomersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVendorCustomersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVendorCustomersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the vendors of the partner.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersVendorsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersVendorsListResponse
     */
	public function androiddeviceprovisioningPartnersVendorsList(
        \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersVendorsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersVendorsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/vendors', \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersVendorsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersVendorsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroiddeviceprovisioningPartnersVendorsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVendorsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVendorsResponse', 'json');
            }
        }

        return $response;
    }
}