/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * CommandInvocation - An invocation is a copy of a command sent to a specific managed node. A command can apply to one or more managed nodes. A command invocation applies to one managed node. For example, if a user runs &lt;code&gt;SendCommand&lt;/code&gt; against three managed nodes, then a command invocation is created for each requested managed node ID. A command invocation returns status and detail information about a command you ran. 
 */
public class CommandInvocation {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CloudWatchOutputConfig")
    public CloudWatchOutputConfig cloudWatchOutputConfig;
    public CommandInvocation withCloudWatchOutputConfig(CloudWatchOutputConfig cloudWatchOutputConfig) {
        this.cloudWatchOutputConfig = cloudWatchOutputConfig;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CommandId")
    public String commandId;
    public CommandInvocation withCommandId(String commandId) {
        this.commandId = commandId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CommandPlugins")
    public CommandPlugin[] commandPlugins;
    public CommandInvocation withCommandPlugins(CommandPlugin[] commandPlugins) {
        this.commandPlugins = commandPlugins;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Comment")
    public String comment;
    public CommandInvocation withComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DocumentName")
    public String documentName;
    public CommandInvocation withDocumentName(String documentName) {
        this.documentName = documentName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DocumentVersion")
    public String documentVersion;
    public CommandInvocation withDocumentVersion(String documentVersion) {
        this.documentVersion = documentVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InstanceId")
    public String instanceId;
    public CommandInvocation withInstanceId(String instanceId) {
        this.instanceId = instanceId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InstanceName")
    public String instanceName;
    public CommandInvocation withInstanceName(String instanceName) {
        this.instanceName = instanceName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NotificationConfig")
    public NotificationConfig notificationConfig;
    public CommandInvocation withNotificationConfig(NotificationConfig notificationConfig) {
        this.notificationConfig = notificationConfig;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("RequestedDateTime")
    public OffsetDateTime requestedDateTime;
    public CommandInvocation withRequestedDateTime(OffsetDateTime requestedDateTime) {
        this.requestedDateTime = requestedDateTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ServiceRole")
    public String serviceRole;
    public CommandInvocation withServiceRole(String serviceRole) {
        this.serviceRole = serviceRole;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StandardErrorUrl")
    public String standardErrorUrl;
    public CommandInvocation withStandardErrorUrl(String standardErrorUrl) {
        this.standardErrorUrl = standardErrorUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StandardOutputUrl")
    public String standardOutputUrl;
    public CommandInvocation withStandardOutputUrl(String standardOutputUrl) {
        this.standardOutputUrl = standardOutputUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public CommandInvocationStatusEnum status;
    public CommandInvocation withStatus(CommandInvocationStatusEnum status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StatusDetails")
    public String statusDetails;
    public CommandInvocation withStatusDetails(String statusDetails) {
        this.statusDetails = statusDetails;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TraceOutput")
    public String traceOutput;
    public CommandInvocation withTraceOutput(String traceOutput) {
        this.traceOutput = traceOutput;
        return this;
    }
    
}
