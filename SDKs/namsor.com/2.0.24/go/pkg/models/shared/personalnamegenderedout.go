// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PersonalNameGenderedOutLikelyGenderEnum - Most likely gender
type PersonalNameGenderedOutLikelyGenderEnum string

const (
	PersonalNameGenderedOutLikelyGenderEnumMale    PersonalNameGenderedOutLikelyGenderEnum = "male"
	PersonalNameGenderedOutLikelyGenderEnumFemale  PersonalNameGenderedOutLikelyGenderEnum = "female"
	PersonalNameGenderedOutLikelyGenderEnumUnknown PersonalNameGenderedOutLikelyGenderEnum = "unknown"
)

func (e PersonalNameGenderedOutLikelyGenderEnum) ToPointer() *PersonalNameGenderedOutLikelyGenderEnum {
	return &e
}

func (e *PersonalNameGenderedOutLikelyGenderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "male":
		fallthrough
	case "female":
		fallthrough
	case "unknown":
		*e = PersonalNameGenderedOutLikelyGenderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PersonalNameGenderedOutLikelyGenderEnum: %v", v)
	}
}

// PersonalNameGenderedOut - Classified genderized names
type PersonalNameGenderedOut struct {
	// Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.
	GenderScale *float64 `json:"genderScale,omitempty"`
	ID          *string  `json:"id,omitempty"`
	// Most likely gender
	LikelyGender *PersonalNameGenderedOutLikelyGenderEnum `json:"likelyGender,omitempty"`
	// The input name
	Name *string `json:"name,omitempty"`
	// The calibrated probability for inferred gender to have been guessed correctly. -1 = still calibrating.
	ProbabilityCalibrated *float64 `json:"probabilityCalibrated,omitempty"`
	// Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available.
	Score  *float64 `json:"score,omitempty"`
	Script *string  `json:"script,omitempty"`
}
