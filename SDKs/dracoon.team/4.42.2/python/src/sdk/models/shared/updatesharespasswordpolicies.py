"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import characterrules as shared_characterrules
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateSharesPasswordPolicies:
    r"""Request model for updating shares password policies"""
    
    character_rules: Optional[shared_characterrules.CharacterRules] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('characterRules'), 'exclude': lambda f: f is None }})
    r"""Password character rules"""  
    min_length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minLength'), 'exclude': lambda f: f is None }})
    r"""Minimum number of characters a password must contain"""  
    reject_dictionary_words: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rejectDictionaryWords'), 'exclude': lambda f: f is None }})
    r"""Determines whether a password must NOT contain word(s) from a dictionary"""  
    reject_keyboard_patterns: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rejectKeyboardPatterns'), 'exclude': lambda f: f is None }})
    r"""Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
    
    (min. 4 character pattern)
    """  
    reject_user_info: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rejectUserInfo'), 'exclude': lambda f: f is None }})
    r"""Determines whether a password must NOT contain user info (first name, last name, email, user name)"""  
    