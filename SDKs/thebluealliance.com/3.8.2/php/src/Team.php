<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Team 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Gets a list of team district rankings for the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsResponse
     */
	public function getDistrictRankings(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/rankings', \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->districtRankings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DistrictRanking>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of `Team` objects that competed in events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsResponse
     */
	public function getDistrictTeams(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/teams', \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of `Team` objects that competed in events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysResponse
     */
	public function getDistrictTeamsKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/teams/keys', \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDistrictTeamsKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of `Team` objects that competed in events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleResponse
     */
	public function getDistrictTeamsSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/teams/simple', \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of `Team` objects that competed in the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsResponse
     */
	public function getEventTeams(
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/teams', \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of `Team` keys that competed in the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysResponse
     */
	public function getEventTeamsKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/teams/keys', \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEventTeamsKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of `Team` objects that competed in the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleResponse
     */
	public function getEventTeamsSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/teams/simple', \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a key-value list of the event statuses for teams competing at the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesResponse
     */
	public function getEventTeamsStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/teams/statuses', \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEventTeamsStatuses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, OpenAPI\OpenAPI\Models\Shared\TeamEventStatus>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a `Team` object for the team referenced by the given key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamResponse
     */
	public function getTeam(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}', \OpenAPI\OpenAPI\Models\Operations\GetTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->team = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Team', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of awards the given team has won.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamAwardsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamAwardsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamAwardsResponse
     */
	public function getTeamAwards(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamAwardsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamAwardsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamAwardsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/awards', \OpenAPI\OpenAPI\Models\Operations\GetTeamAwardsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamAwardsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->awards = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Award>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of awards the given team has won in a given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamAwardsByYearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamAwardsByYearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamAwardsByYearResponse
     */
	public function getTeamAwardsByYear(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamAwardsByYearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamAwardsByYearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamAwardsByYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/awards/{year}', \OpenAPI\OpenAPI\Models\Operations\GetTeamAwardsByYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamAwardsByYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->awards = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Award>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamDistrictsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamDistrictsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamDistrictsResponse
     */
	public function getTeamDistricts(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamDistrictsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamDistrictsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamDistrictsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/districts', \OpenAPI\OpenAPI\Models\Operations\GetTeamDistrictsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamDistrictsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->districtLists = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DistrictList>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of awards the given team won at the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventAwardsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventAwardsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventAwardsResponse
     */
	public function getTeamEventAwards(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventAwardsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventAwardsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventAwardsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/event/{event_key}/awards', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventAwardsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventAwardsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->awards = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Award>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of matches for the given team and event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesResponse
     */
	public function getTeamEventMatches(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/event/{event_key}/matches', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matches = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MatchT>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of match keys for matches for the given team and event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysResponse
     */
	public function getTeamEventMatchesKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/event/{event_key}/matches/keys', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamEventMatchesKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of matches for the given team and event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleResponse
     */
	public function getTeamEventMatchesSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/event/{event_key}/matches/simple', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventMatchesSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matches = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MatchT>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets the competition rank and status of the team at the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventStatusResponse
     */
	public function getTeamEventStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/event/{event_key}/status', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamEventStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TeamEventStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of all events this team has competed at.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsResponse
     */
	public function getTeamEvents(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/events', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of events this team has competed at in the given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearResponse
     */
	public function getTeamEventsByYear(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/events/{year}', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of the event keys for events this team has competed at in the given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearKeysResponse
     */
	public function getTeamEventsByYearKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/events/{year}/keys', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamEventsByYearKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of events this team has competed at in the given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSimpleResponse
     */
	public function getTeamEventsByYearSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/events/{year}/simple', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsByYearSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\EventSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of the event keys for all events this team has competed at.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsKeysResponse
     */
	public function getTeamEventsKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/events/keys', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamEventsKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of all events this team has competed at.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSimpleResponse
     */
	public function getTeamEventsSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/events/simple', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\EventSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a key-value list of the event statuses for events this team has competed at in the given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearResponse
     */
	public function getTeamEventsStatusesByYear(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/events/{year}/statuses', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamEventsStatusesByYear200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, OpenAPI\OpenAPI\Models\Shared\TeamEventStatus>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of matches for the given team and year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearResponse
     */
	public function getTeamMatchesByYear(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/matches/{year}', \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matches = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MatchT>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of match keys for matches for the given team and year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearKeysResponse
     */
	public function getTeamMatchesByYearKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/matches/{year}/keys', \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamMatchesByYearKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of matches for the given team and year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSimpleResponse
     */
	public function getTeamMatchesByYearSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/matches/{year}/simple', \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamMatchesByYearSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matchSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MatchSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of Media (videos / pictures) for the given team and tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByTagRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByTagSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByTagResponse
     */
	public function getTeamMediaByTag(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByTagRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByTagSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/media/tag/{media_tag}', \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->media = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Media>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of Media (videos / pictures) for the given team, tag and year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByTagYearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByTagYearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByTagYearResponse
     */
	public function getTeamMediaByTagYear(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByTagYearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByTagYearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByTagYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/media/tag/{media_tag}/{year}', \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByTagYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByTagYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->media = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Media>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of Media (videos / pictures) for the given team and year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByYearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByYearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByYearResponse
     */
	public function getTeamMediaByYear(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByYearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByYearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/media/{year}', \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamMediaByYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->media = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Media>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamRobotsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamRobotsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamRobotsResponse
     */
	public function getTeamRobots(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamRobotsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamRobotsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamRobotsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/robots', \OpenAPI\OpenAPI\Models\Operations\GetTeamRobotsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamRobotsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamRobots = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamRobot>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a `Team_Simple` object for the team referenced by the given key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamSimpleResponse
     */
	public function getTeamSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/simple', \OpenAPI\OpenAPI\Models\Operations\GetTeamSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TeamSimple', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of Media (social media) for the given team.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamSocialMediaRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamSocialMediaSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamSocialMediaResponse
     */
	public function getTeamSocialMedia(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamSocialMediaRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamSocialMediaSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamSocialMediaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/social_media', \OpenAPI\OpenAPI\Models\Operations\GetTeamSocialMediaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamSocialMediaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->media = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Media>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of years in which the team participated in at least one competition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamYearsParticipatedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamYearsParticipatedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamYearsParticipatedResponse
     */
	public function getTeamYearsParticipated(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamYearsParticipatedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamYearsParticipatedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamYearsParticipatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/years_participated', \OpenAPI\OpenAPI\Models\Operations\GetTeamYearsParticipatedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamYearsParticipatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamYearsParticipated200ApplicationJSONIntegers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of `Team` objects, paginated in groups of 500.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamsResponse
     */
	public function getTeams(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teams/{page_num}', \OpenAPI\OpenAPI\Models\Operations\GetTeamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of `Team` objects that competed in the given year, paginated in groups of 500.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearResponse
     */
	public function getTeamsByYear(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teams/{year}/{page_num}', \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list Team Keys that competed in the given year, paginated in groups of 500.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearKeysResponse
     */
	public function getTeamsByYearKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teams/{year}/{page_num}/keys', \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamsByYearKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of short form `Team_Simple` objects that competed in the given year, paginated in groups of 500.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSimpleResponse
     */
	public function getTeamsByYearSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teams/{year}/{page_num}/simple', \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamsKeysResponse
     */
	public function getTeamsKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamsKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teams/{page_num}/keys', \OpenAPI\OpenAPI\Models\Operations\GetTeamsKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamsKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamsKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of short form `Team_Simple` objects, paginated in groups of 500.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamsSimpleResponse
     */
	public function getTeamsSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamsSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teams/{page_num}/simple', \OpenAPI\OpenAPI\Models\Operations\GetTeamsSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamsSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
}