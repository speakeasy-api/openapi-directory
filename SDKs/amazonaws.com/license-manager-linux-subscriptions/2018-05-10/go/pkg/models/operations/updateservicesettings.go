// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateServiceSettingsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoveryEnum - Describes if the discovery of Linux subscriptions is enabled.
type UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoveryEnum string

const (
	UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoveryEnumEnabled  UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoveryEnum = "Enabled"
	UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoveryEnumDisabled UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoveryEnum = "Disabled"
)

func (e *UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoveryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Enabled":
		fallthrough
	case "Disabled":
		*e = UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoveryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoveryEnum: %s", s)
	}
}

// UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoverySettings - Lists the settings defined for discovering Linux subscriptions.
type UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoverySettings struct {
	OrganizationIntegration *shared.OrganizationIntegrationEnum `json:"OrganizationIntegration,omitempty"`
	SourceRegions           []string                            `json:"SourceRegions,omitempty"`
}

type UpdateServiceSettingsRequestBody struct {
	// Describes if updates are allowed to the service settings for Linux subscriptions. If you allow updates, you can aggregate Linux subscription data in more than one home Region.
	AllowUpdate *bool `json:"AllowUpdate,omitempty"`
	// Describes if the discovery of Linux subscriptions is enabled.
	LinuxSubscriptionsDiscovery UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoveryEnum `json:"LinuxSubscriptionsDiscovery"`
	// Lists the settings defined for discovering Linux subscriptions.
	LinuxSubscriptionsDiscoverySettings UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoverySettings `json:"LinuxSubscriptionsDiscoverySettings"`
}

type UpdateServiceSettingsRequest struct {
	Headers UpdateServiceSettingsHeaders
	Request UpdateServiceSettingsRequestBody `request:"mediaType=application/json"`
}

type UpdateServiceSettingsResponse struct {
	ContentType string
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// Success
	UpdateServiceSettingsResponse *shared.UpdateServiceSettingsResponse
	// ValidationException
	ValidationException interface{}
}
