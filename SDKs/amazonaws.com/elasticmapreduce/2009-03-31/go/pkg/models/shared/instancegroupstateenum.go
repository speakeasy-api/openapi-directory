// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InstanceGroupStateEnum string

const (
	InstanceGroupStateEnumProvisioning  InstanceGroupStateEnum = "PROVISIONING"
	InstanceGroupStateEnumBootstrapping InstanceGroupStateEnum = "BOOTSTRAPPING"
	InstanceGroupStateEnumRunning       InstanceGroupStateEnum = "RUNNING"
	InstanceGroupStateEnumReconfiguring InstanceGroupStateEnum = "RECONFIGURING"
	InstanceGroupStateEnumResizing      InstanceGroupStateEnum = "RESIZING"
	InstanceGroupStateEnumSuspended     InstanceGroupStateEnum = "SUSPENDED"
	InstanceGroupStateEnumTerminating   InstanceGroupStateEnum = "TERMINATING"
	InstanceGroupStateEnumTerminated    InstanceGroupStateEnum = "TERMINATED"
	InstanceGroupStateEnumArrested      InstanceGroupStateEnum = "ARRESTED"
	InstanceGroupStateEnumShuttingDown  InstanceGroupStateEnum = "SHUTTING_DOWN"
	InstanceGroupStateEnumEnded         InstanceGroupStateEnum = "ENDED"
)

func (e *InstanceGroupStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROVISIONING":
		fallthrough
	case "BOOTSTRAPPING":
		fallthrough
	case "RUNNING":
		fallthrough
	case "RECONFIGURING":
		fallthrough
	case "RESIZING":
		fallthrough
	case "SUSPENDED":
		fallthrough
	case "TERMINATING":
		fallthrough
	case "TERMINATED":
		fallthrough
	case "ARRESTED":
		fallthrough
	case "SHUTTING_DOWN":
		fallthrough
	case "ENDED":
		*e = InstanceGroupStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InstanceGroupStateEnum: %s", s)
	}
}
