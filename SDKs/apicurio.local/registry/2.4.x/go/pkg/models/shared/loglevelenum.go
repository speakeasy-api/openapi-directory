// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LogLevelEnum string

const (
	LogLevelEnumDebug   LogLevelEnum = "DEBUG"
	LogLevelEnumTrace   LogLevelEnum = "TRACE"
	LogLevelEnumWarn    LogLevelEnum = "WARN"
	LogLevelEnumError   LogLevelEnum = "ERROR"
	LogLevelEnumSevere  LogLevelEnum = "SEVERE"
	LogLevelEnumWarning LogLevelEnum = "WARNING"
	LogLevelEnumInfo    LogLevelEnum = "INFO"
	LogLevelEnumConfig  LogLevelEnum = "CONFIG"
	LogLevelEnumFine    LogLevelEnum = "FINE"
	LogLevelEnumFiner   LogLevelEnum = "FINER"
	LogLevelEnumFinest  LogLevelEnum = "FINEST"
)

func (e LogLevelEnum) ToPointer() *LogLevelEnum {
	return &e
}

func (e *LogLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEBUG":
		fallthrough
	case "TRACE":
		fallthrough
	case "WARN":
		fallthrough
	case "ERROR":
		fallthrough
	case "SEVERE":
		fallthrough
	case "WARNING":
		fallthrough
	case "INFO":
		fallthrough
	case "CONFIG":
		fallthrough
	case "FINE":
		fallthrough
	case "FINER":
		fallthrough
	case "FINEST":
		*e = LogLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogLevelEnum: %v", v)
	}
}
