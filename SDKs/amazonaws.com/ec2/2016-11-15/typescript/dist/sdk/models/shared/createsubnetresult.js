"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateSubnetResult = exports.CreateSubnetResultSubnet = exports.CreateSubnetResultSubnetTags = exports.CreateSubnetResultSubnetStateEnum = exports.CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunch = exports.CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum = exports.CreateSubnetResultSubnetIpv6CidrBlockAssociationSet = exports.CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState = exports.CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The state of a CIDR block.
 */
var CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum;
(function (CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum) {
    CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Associating"] = "associating";
    CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Associated"] = "associated";
    CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Disassociating"] = "disassociating";
    CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Disassociated"] = "disassociated";
    CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Failing"] = "failing";
    CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum["Failed"] = "failed";
})(CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = exports.CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum || (exports.CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = {}));
/**
 * The state of the CIDR block.
 */
var CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState = /** @class */ (function (_super) {
    __extends(CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState, _super);
    function CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState.prototype, "statusMessage", void 0);
    return CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState;
}(utils_1.SpeakeasyBase));
exports.CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState = CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState;
/**
 * Describes an association between a subnet and an IPv6 CIDR block.
 */
var CreateSubnetResultSubnetIpv6CidrBlockAssociationSet = /** @class */ (function (_super) {
    __extends(CreateSubnetResultSubnetIpv6CidrBlockAssociationSet, _super);
    function CreateSubnetResultSubnetIpv6CidrBlockAssociationSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnetIpv6CidrBlockAssociationSet.prototype, "associationId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnetIpv6CidrBlockAssociationSet.prototype, "ipv6CidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState)
    ], CreateSubnetResultSubnetIpv6CidrBlockAssociationSet.prototype, "ipv6CidrBlockState", void 0);
    return CreateSubnetResultSubnetIpv6CidrBlockAssociationSet;
}(utils_1.SpeakeasyBase));
exports.CreateSubnetResultSubnetIpv6CidrBlockAssociationSet = CreateSubnetResultSubnetIpv6CidrBlockAssociationSet;
/**
 * The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID.
 */
var CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum;
(function (CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum) {
    CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum["IpName"] = "ip-name";
    CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum["ResourceName"] = "resource-name";
})(CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum = exports.CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum || (exports.CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunchHostnameTypeEnum = {}));
/**
 * The type of hostnames to assign to instances in the subnet at launch. An instance hostname is based on the IPv4 address or ID of the instance.
 */
var CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunch = /** @class */ (function (_super) {
    __extends(CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunch, _super);
    function CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunch.prototype, "enableResourceNameDnsAAAARecord", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunch.prototype, "enableResourceNameDnsARecord", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunch.prototype, "hostnameType", void 0);
    return CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunch;
}(utils_1.SpeakeasyBase));
exports.CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunch = CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunch;
/**
 * The current state of the subnet.
 */
var CreateSubnetResultSubnetStateEnum;
(function (CreateSubnetResultSubnetStateEnum) {
    CreateSubnetResultSubnetStateEnum["Pending"] = "pending";
    CreateSubnetResultSubnetStateEnum["Available"] = "available";
})(CreateSubnetResultSubnetStateEnum = exports.CreateSubnetResultSubnetStateEnum || (exports.CreateSubnetResultSubnetStateEnum = {}));
/**
 * Describes a tag.
 */
var CreateSubnetResultSubnetTags = /** @class */ (function (_super) {
    __extends(CreateSubnetResultSubnetTags, _super);
    function CreateSubnetResultSubnetTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnetTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnetTags.prototype, "value", void 0);
    return CreateSubnetResultSubnetTags;
}(utils_1.SpeakeasyBase));
exports.CreateSubnetResultSubnetTags = CreateSubnetResultSubnetTags;
/**
 * Information about the subnet.
 */
var CreateSubnetResultSubnet = /** @class */ (function (_super) {
    __extends(CreateSubnetResultSubnet, _super);
    function CreateSubnetResultSubnet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateSubnetResultSubnet.prototype, "assignIpv6AddressOnCreation", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnet.prototype, "availabilityZone", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnet.prototype, "availabilityZoneId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateSubnetResultSubnet.prototype, "availableIpAddressCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnet.prototype, "cidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnet.prototype, "customerOwnedIpv4Pool", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateSubnetResultSubnet.prototype, "defaultForAz", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateSubnetResultSubnet.prototype, "enableDns64", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], CreateSubnetResultSubnet.prototype, "enableLniAtDeviceIndex", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateSubnetResultSubnetIpv6CidrBlockAssociationSet,
        }),
        __metadata("design:type", Array)
    ], CreateSubnetResultSubnet.prototype, "ipv6CidrBlockAssociationSet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateSubnetResultSubnet.prototype, "ipv6Native", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateSubnetResultSubnet.prototype, "mapCustomerOwnedIpOnLaunch", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateSubnetResultSubnet.prototype, "mapPublicIpOnLaunch", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnet.prototype, "outpostArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnet.prototype, "ownerId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateSubnetResultSubnetPrivateDnsNameOptionsOnLaunch)
    ], CreateSubnetResultSubnet.prototype, "privateDnsNameOptionsOnLaunch", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnet.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnet.prototype, "subnetArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnet.prototype, "subnetId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: CreateSubnetResultSubnetTags }),
        __metadata("design:type", Array)
    ], CreateSubnetResultSubnet.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateSubnetResultSubnet.prototype, "vpcId", void 0);
    return CreateSubnetResultSubnet;
}(utils_1.SpeakeasyBase));
exports.CreateSubnetResultSubnet = CreateSubnetResultSubnet;
/**
 * Success
 */
var CreateSubnetResult = /** @class */ (function (_super) {
    __extends(CreateSubnetResult, _super);
    function CreateSubnetResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateSubnetResultSubnet)
    ], CreateSubnetResult.prototype, "subnet", void 0);
    return CreateSubnetResult;
}(utils_1.SpeakeasyBase));
exports.CreateSubnetResult = CreateSubnetResult;
