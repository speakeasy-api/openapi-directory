/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ErrorParameter } from "./errorparameter";
import { Expose, Type } from "class-transformer";

/**
 * This type defines the fields that can be returned in an error.
 */
export class ErrorT extends SpeakeasyBase {
  /**
   * Identifies the type of erro.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: string;

  /**
   * Name for the primary system where the error occurred. This is relevant for application errors.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domain" })
  domain?: string;

  /**
   * A unique number to identify the error.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorId" })
  errorId?: number;

  /**
   * An array of request elements most closely associated to the error.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inputRefIds" })
  inputRefIds?: string[];

  /**
   * A more detailed explanation of the error.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longMessage" })
  longMessage?: string;

  /**
   * Information on how to correct the problem, in the end user's terms and language where applicable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  /**
   * An array of request elements most closely associated to the error.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outputRefIds" })
  outputRefIds?: string[];

  /**
   * An array of name/value pairs that describe details the error condition. These are useful when multiple errors are returned.
   */
  @SpeakeasyMetadata({ elemType: ErrorParameter })
  @Expose({ name: "parameters" })
  @Type(() => ErrorParameter)
  parameters?: ErrorParameter[];

  /**
   * Further helps indicate which subsystem the error is coming from. System subcategories include: Initialization, Serialization, Security, Monitoring, Rate Limiting, etc.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subdomain" })
  subdomain?: string;
}
