/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleChromeManagementV1TelemetryDevice - Telemetry data collected from a managed device. * Granular permission needed: TELEMETRY_API_DEVICE
 */
public class GoogleChromeManagementV1TelemetryDevice {
    /**
     * Output only. Audio reports collected periodically sorted in a decreasing order of report_time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audioStatusReport")
    public GoogleChromeManagementV1AudioStatusReport[] audioStatusReport;

    public GoogleChromeManagementV1TelemetryDevice withAudioStatusReport(GoogleChromeManagementV1AudioStatusReport[] audioStatusReport) {
        this.audioStatusReport = audioStatusReport;
        return this;
    }
    
    /**
     * Output only. Information on battery specs for the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batteryInfo")
    public GoogleChromeManagementV1BatteryInfo[] batteryInfo;

    public GoogleChromeManagementV1TelemetryDevice withBatteryInfo(GoogleChromeManagementV1BatteryInfo[] batteryInfo) {
        this.batteryInfo = batteryInfo;
        return this;
    }
    
    /**
     * Output only. Battery reports collected periodically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batteryStatusReport")
    public GoogleChromeManagementV1BatteryStatusReport[] batteryStatusReport;

    public GoogleChromeManagementV1TelemetryDevice withBatteryStatusReport(GoogleChromeManagementV1BatteryStatusReport[] batteryStatusReport) {
        this.batteryStatusReport = batteryStatusReport;
        return this;
    }
    
    /**
     * Output only. Boot performance reports of the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bootPerformanceReport")
    public GoogleChromeManagementV1BootPerformanceReport[] bootPerformanceReport;

    public GoogleChromeManagementV1TelemetryDevice withBootPerformanceReport(GoogleChromeManagementV1BootPerformanceReport[] bootPerformanceReport) {
        this.bootPerformanceReport = bootPerformanceReport;
        return this;
    }
    
    /**
     * Output only. Information regarding CPU specs for the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpuInfo")
    public GoogleChromeManagementV1CpuInfo[] cpuInfo;

    public GoogleChromeManagementV1TelemetryDevice withCpuInfo(GoogleChromeManagementV1CpuInfo[] cpuInfo) {
        this.cpuInfo = cpuInfo;
        return this;
    }
    
    /**
     * Output only. CPU status reports collected periodically sorted in a decreasing order of report_time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpuStatusReport")
    public GoogleChromeManagementV1CpuStatusReport[] cpuStatusReport;

    public GoogleChromeManagementV1TelemetryDevice withCpuStatusReport(GoogleChromeManagementV1CpuStatusReport[] cpuStatusReport) {
        this.cpuStatusReport = cpuStatusReport;
        return this;
    }
    
    /**
     * Output only. Google Workspace Customer whose enterprise enrolled the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    public String customer;

    public GoogleChromeManagementV1TelemetryDevice withCustomer(String customer) {
        this.customer = customer;
        return this;
    }
    
    /**
     * Output only. The unique Directory API ID of the device. This value is the same as the Admin Console's Directory API ID in the ChromeOS Devices tab
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceId")
    public String deviceId;

    public GoogleChromeManagementV1TelemetryDevice withDeviceId(String deviceId) {
        this.deviceId = deviceId;
        return this;
    }
    
    /**
     * Information of the graphics subsystem. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceGraphicsStatus](https://chromeenterprise.google/policies/#ReportDeviceGraphicsStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_GRAPHICS_INFO
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("graphicsInfo")
    public GoogleChromeManagementV1GraphicsInfo graphicsInfo;

    public GoogleChromeManagementV1TelemetryDevice withGraphicsInfo(GoogleChromeManagementV1GraphicsInfo graphicsInfo) {
        this.graphicsInfo = graphicsInfo;
        return this;
    }
    
    /**
     * Output only. Graphics reports collected periodically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("graphicsStatusReport")
    public GoogleChromeManagementV1GraphicsStatusReport[] graphicsStatusReport;

    public GoogleChromeManagementV1TelemetryDevice withGraphicsStatusReport(GoogleChromeManagementV1GraphicsStatusReport[] graphicsStatusReport) {
        this.graphicsStatusReport = graphicsStatusReport;
        return this;
    }
    
    /**
     * Memory information of a device. * This field has both telemetry and device information: - `totalRamBytes` - Device information - `availableRamBytes` - Telemetry information - `totalMemoryEncryption` - Device information * Data for this field is controlled via policy: [ReportDeviceMemoryInfo](https://chromeenterprise.google/policies/#ReportDeviceMemoryInfo) * Data Collection Frequency: - `totalRamBytes` - Only at upload - `availableRamBytes` - Every 10 minutes - `totalMemoryEncryption` - at device startup * Default Data Reporting Frequency: - `totalRamBytes` - 3 hours - `availableRamBytes` - 3 hours - `totalMemoryEncryption` - at device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: only for `totalMemoryEncryption` * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_MEMORY_INFO
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memoryInfo")
    public GoogleChromeManagementV1MemoryInfo memoryInfo;

    public GoogleChromeManagementV1TelemetryDevice withMemoryInfo(GoogleChromeManagementV1MemoryInfo memoryInfo) {
        this.memoryInfo = memoryInfo;
        return this;
    }
    
    /**
     * Output only. Memory status reports collected periodically sorted decreasing by report_time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memoryStatusReport")
    public GoogleChromeManagementV1MemoryStatusReport[] memoryStatusReport;

    public GoogleChromeManagementV1TelemetryDevice withMemoryStatusReport(GoogleChromeManagementV1MemoryStatusReport[] memoryStatusReport) {
        this.memoryStatusReport = memoryStatusReport;
        return this;
    }
    
    /**
     * Output only. Resource name of the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public GoogleChromeManagementV1TelemetryDevice withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. Network diagnostics collected periodically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkDiagnosticsReport")
    public GoogleChromeManagementV1NetworkDiagnosticsReport[] networkDiagnosticsReport;

    public GoogleChromeManagementV1TelemetryDevice withNetworkDiagnosticsReport(GoogleChromeManagementV1NetworkDiagnosticsReport[] networkDiagnosticsReport) {
        this.networkDiagnosticsReport = networkDiagnosticsReport;
        return this;
    }
    
    /**
     * Network device information. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportNetworkDeviceConfiguration](https://chromeenterprise.google/policies/#ReportNetworkDeviceConfiguration) * Data Collection Frequency: At device startup * Default Data Reporting Frequency: At device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_NETWORK_INFO
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkInfo")
    public GoogleChromeManagementV1NetworkInfo networkInfo;

    public GoogleChromeManagementV1TelemetryDevice withNetworkInfo(GoogleChromeManagementV1NetworkInfo networkInfo) {
        this.networkInfo = networkInfo;
        return this;
    }
    
    /**
     * Output only. Network specs collected periodically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkStatusReport")
    public GoogleChromeManagementV1NetworkStatusReport[] networkStatusReport;

    public GoogleChromeManagementV1TelemetryDevice withNetworkStatusReport(GoogleChromeManagementV1NetworkStatusReport[] networkStatusReport) {
        this.networkStatusReport = networkStatusReport;
        return this;
    }
    
    /**
     * Output only. Organization unit ID of the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orgUnitId")
    public String orgUnitId;

    public GoogleChromeManagementV1TelemetryDevice withOrgUnitId(String orgUnitId) {
        this.orgUnitId = orgUnitId;
        return this;
    }
    
    /**
     * Output only. Contains relevant information regarding ChromeOS update status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("osUpdateStatus")
    public GoogleChromeManagementV1OsUpdateStatus[] osUpdateStatus;

    public GoogleChromeManagementV1TelemetryDevice withOsUpdateStatus(GoogleChromeManagementV1OsUpdateStatus[] osUpdateStatus) {
        this.osUpdateStatus = osUpdateStatus;
        return this;
    }
    
    /**
     * Output only. Peripherals reports collected periodically sorted in a decreasing order of report_time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("peripheralsReport")
    public GoogleChromeManagementV1PeripheralsReport[] peripheralsReport;

    public GoogleChromeManagementV1TelemetryDevice withPeripheralsReport(GoogleChromeManagementV1PeripheralsReport[] peripheralsReport) {
        this.peripheralsReport = peripheralsReport;
        return this;
    }
    
    /**
     * Output only. Device serial number. This value is the same as the Admin Console's Serial Number in the ChromeOS Devices tab.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serialNumber")
    public String serialNumber;

    public GoogleChromeManagementV1TelemetryDevice withSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }
    
    /**
     * Status data for storage. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceStorageStatus](https://chromeenterprise.google/policies/#ReportDeviceStorageStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_STORAGE_INFO
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageInfo")
    public GoogleChromeManagementV1StorageInfo storageInfo;

    public GoogleChromeManagementV1TelemetryDevice withStorageInfo(GoogleChromeManagementV1StorageInfo storageInfo) {
        this.storageInfo = storageInfo;
        return this;
    }
    
    /**
     * Output only. Storage reports collected periodically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageStatusReport")
    public GoogleChromeManagementV1StorageStatusReport[] storageStatusReport;

    public GoogleChromeManagementV1TelemetryDevice withStorageStatusReport(GoogleChromeManagementV1StorageStatusReport[] storageStatusReport) {
        this.storageStatusReport = storageStatusReport;
        return this;
    }
    
    /**
     * Output only. Information on Thunderbolt bus.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thunderboltInfo")
    public GoogleChromeManagementV1ThunderboltInfo[] thunderboltInfo;

    public GoogleChromeManagementV1TelemetryDevice withThunderboltInfo(GoogleChromeManagementV1ThunderboltInfo[] thunderboltInfo) {
        this.thunderboltInfo = thunderboltInfo;
        return this;
    }
    
    public GoogleChromeManagementV1TelemetryDevice(){}
}
