/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CreativeInput - A single Creative.
 */
public class CreativeInput {
    /**
     * Additional dimensions. Applicable when creative_type is one of: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE` * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_LIGHTBOX` * `CREATIVE_TYPE_PUBLISHER_HOSTED` If this field is specified, width_pixels and height_pixels are both required and must be greater than or equal to 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalDimensions")
    public Dimensions[] additionalDimensions;

    public CreativeInput withAdditionalDimensions(Dimensions[] additionalDimensions) {
        this.additionalDimensions = additionalDimensions;
        return this;
    }
    
    /**
     * Third-party HTML tracking tag to be appended to the creative tag.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appendedTag")
    public String appendedTag;

    public CreativeInput withAppendedTag(String appendedTag) {
        this.appendedTag = appendedTag;
        return this;
    }
    
    /**
     * Required. Assets associated to this creative.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assets")
    public AssetAssociation[] assets;

    public CreativeInput withAssets(AssetAssociation[] assets) {
        this.assets = assets;
        return this;
    }
    
    /**
     * A Campaign Manager 360 tracking ad.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cmTrackingAd")
    public CmTrackingAd cmTrackingAd;

    public CreativeInput withCmTrackingAd(CmTrackingAd cmTrackingAd) {
        this.cmTrackingAd = cmTrackingAd;
        return this;
    }
    
    /**
     * The IDs of companion creatives for a video creative. You can assign existing display creatives (with image or HTML5 assets) to serve surrounding the publisher's video player. Companions display around the video player while the video is playing and remain after the video has completed. Creatives contain additional dimensions can not be companion creatives. This field is only supported for following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companionCreativeIds")
    public String[] companionCreativeIds;

    public CreativeInput withCompanionCreativeIds(String[] companionCreativeIds) {
        this.companionCreativeIds = companionCreativeIds;
        return this;
    }
    
    /**
     * Counter events for a rich media creative. Counters track the number of times that a user interacts with any part of a rich media creative in a specified way (mouse-overs, mouse-outs, clicks, taps, data loading, keyboard entries, etc.). Any event that can be captured in the creative can be recorded as a counter. Leave it empty or unset for creatives containing image assets only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("counterEvents")
    public CounterEvent[] counterEvents;

    public CreativeInput withCounterEvents(CounterEvent[] counterEvents) {
        this.counterEvents = counterEvents;
        return this;
    }
    
    /**
     * Required. Immutable. The type of the creative.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creativeType")
    public CreativeCreativeTypeEnum creativeType;

    public CreativeInput withCreativeType(CreativeCreativeTypeEnum creativeType) {
        this.creativeType = creativeType;
        return this;
    }
    
    /**
     * Dimensions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimensions")
    public Dimensions dimensions;

    public CreativeInput withDimensions(Dimensions dimensions) {
        this.dimensions = dimensions;
        return this;
    }
    
    /**
     * Required. The display name of the creative. Must be UTF-8 encoded with a maximum size of 240 bytes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public CreativeInput withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Required. Controls whether or not the creative can serve. Accepted values are: * `ENTITY_STATUS_ACTIVE` * `ENTITY_STATUS_ARCHIVED` * `ENTITY_STATUS_PAUSED`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entityStatus")
    public CreativeEntityStatusEnum entityStatus;

    public CreativeInput withEntityStatus(CreativeEntityStatusEnum entityStatus) {
        this.entityStatus = entityStatus;
        return this;
    }
    
    /**
     * Required. Exit events for this creative. An exit (also known as a click tag) is any area in your creative that someone can click or tap to open an advertiser's landing page. Every creative must include at least one exit. You can add an exit to your creative in any of the following ways: * Use Google Web Designer's tap area. * Define a JavaScript variable called "clickTag". * Use the Enabler (Enabler.exit()) to track exits in rich media formats.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exitEvents")
    public ExitEvent[] exitEvents;

    public CreativeInput withExitEvents(ExitEvent[] exitEvents) {
        this.exitEvents = exitEvents;
        return this;
    }
    
    /**
     * Optional. Indicates the creative will automatically expand on hover. Optional and only valid for third-party expandable creatives. Third-party expandable creatives are creatives with following hosting source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_EXPANDABLE`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expandOnHover")
    public Boolean expandOnHover;

    public CreativeInput withExpandOnHover(Boolean expandOnHover) {
        this.expandOnHover = expandOnHover;
        return this;
    }
    
    /**
     * Optional. Specifies the expanding direction of the creative. Required and only valid for third-party expandable creatives. Third-party expandable creatives are creatives with following hosting source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_EXPANDABLE`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expandingDirection")
    public CreativeExpandingDirectionEnum expandingDirection;

    public CreativeInput withExpandingDirection(CreativeExpandingDirectionEnum expandingDirection) {
        this.expandingDirection = expandingDirection;
        return this;
    }
    
    /**
     * Required. Indicates where the creative is hosted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostingSource")
    public CreativeHostingSourceEnum hostingSource;

    public CreativeInput withHostingSource(CreativeHostingSourceEnum hostingSource) {
        this.hostingSource = hostingSource;
        return this;
    }
    
    /**
     * Indicates whether Integral Ad Science (IAS) campaign monitoring is enabled. To enable this for the creative, make sure the Advertiser.creative_config.ias_client_id has been set to your IAS client ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iasCampaignMonitoring")
    public Boolean iasCampaignMonitoring;

    public CreativeInput withIasCampaignMonitoring(Boolean iasCampaignMonitoring) {
        this.iasCampaignMonitoring = iasCampaignMonitoring;
        return this;
    }
    
    /**
     * ID information used to link this creative to an external system. Must be UTF-8 encoded with a length of no more than 10,000 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integrationCode")
    public String integrationCode;

    public CreativeInput withIntegrationCode(String integrationCode) {
        this.integrationCode = integrationCode;
        return this;
    }
    
    /**
     * JavaScript measurement URL from supported third-party verification providers (ComScore, DoubleVerify, IAS, Moat). HTML script tags are not supported. This field is only writeable in following creative_type: * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_NATIVE_VIDEO`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jsTrackerUrl")
    public String jsTrackerUrl;

    public CreativeInput withJsTrackerUrl(String jsTrackerUrl) {
        this.jsTrackerUrl = jsTrackerUrl;
        return this;
    }
    
    /**
     * User notes for this creative. Must be UTF-8 encoded with a length of no more than 20,000 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;

    public CreativeInput withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * OBA Icon for a Creative
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("obaIcon")
    public ObaIcon obaIcon;

    public CreativeInput withObaIcon(ObaIcon obaIcon) {
        this.obaIcon = obaIcon;
        return this;
    }
    
    /**
     * The length an audio or a video has been played.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("progressOffset")
    public AudioVideoOffset progressOffset;

    public CreativeInput withProgressOffset(AudioVideoOffset progressOffset) {
        this.progressOffset = progressOffset;
        return this;
    }
    
    /**
     * Optional. Indicates that the creative relies on HTML5 to render properly. Optional and only valid for third-party tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requireHtml5")
    public Boolean requireHtml5;

    public CreativeInput withRequireHtml5(Boolean requireHtml5) {
        this.requireHtml5 = requireHtml5;
        return this;
    }
    
    /**
     * Optional. Indicates that the creative requires MRAID (Mobile Rich Media Ad Interface Definitions system). Set this if the creative relies on mobile gestures for interactivity, such as swiping or tapping. Optional and only valid for third-party tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requireMraid")
    public Boolean requireMraid;

    public CreativeInput withRequireMraid(Boolean requireMraid) {
        this.requireMraid = requireMraid;
        return this;
    }
    
    /**
     * Optional. Indicates that the creative will wait for a return ping for attribution. Only valid when using a Campaign Manager 360 tracking ad with a third-party ad server parameter and the ${DC_DBM_TOKEN} macro. Optional and only valid for third-party tag creatives or third-party VAST tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE` Third-party VAST tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requirePingForAttribution")
    public Boolean requirePingForAttribution;

    public CreativeInput withRequirePingForAttribution(Boolean requirePingForAttribution) {
        this.requirePingForAttribution = requirePingForAttribution;
        return this;
    }
    
    /**
     * Review statuses for the creative.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reviewStatus")
    public ReviewStatusInfo reviewStatus;

    public CreativeInput withReviewStatus(ReviewStatusInfo reviewStatus) {
        this.reviewStatus = reviewStatus;
        return this;
    }
    
    /**
     * The length an audio or a video has been played.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skipOffset")
    public AudioVideoOffset skipOffset;

    public CreativeInput withSkipOffset(AudioVideoOffset skipOffset) {
        this.skipOffset = skipOffset;
        return this;
    }
    
    /**
     * Whether the user can choose to skip a video creative. This field is only supported for the following creative_type: * `CREATIVE_TYPE_VIDEO`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skippable")
    public Boolean skippable;

    public CreativeInput withSkippable(Boolean skippable) {
        this.skippable = skippable;
        return this;
    }
    
    /**
     * Optional. The original third-party tag used for the creative. Required and only valid for third-party tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thirdPartyTag")
    public String thirdPartyTag;

    public CreativeInput withThirdPartyTag(String thirdPartyTag) {
        this.thirdPartyTag = thirdPartyTag;
        return this;
    }
    
    /**
     * Tracking URLs from third parties to track interactions with a video creative. This field is only supported for the following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_NATIVE_VIDEO`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thirdPartyUrls")
    public ThirdPartyUrl[] thirdPartyUrls;

    public CreativeInput withThirdPartyUrls(ThirdPartyUrl[] thirdPartyUrls) {
        this.thirdPartyUrls = thirdPartyUrls;
        return this;
    }
    
    /**
     * Timer custom events for a rich media creative. Timers track the time during which a user views and interacts with a specified part of a rich media creative. A creative can have multiple timer events, each timed independently. Leave it empty or unset for creatives containing image assets only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timerEvents")
    public TimerEvent[] timerEvents;

    public CreativeInput withTimerEvents(TimerEvent[] timerEvents) {
        this.timerEvents = timerEvents;
        return this;
    }
    
    /**
     * Tracking URLs for analytics providers or third-party ad technology vendors. The URLs must start with https (except on inventory that doesn't require SSL compliance). If using macros in your URL, use only macros supported by Display &amp; Video 360. Standard URLs only, no IMG or SCRIPT tags. This field is only writeable in following creative_type: * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_NATIVE_VIDEO`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackerUrls")
    public String[] trackerUrls;

    public CreativeInput withTrackerUrls(String[] trackerUrls) {
        this.trackerUrls = trackerUrls;
        return this;
    }
    
    /**
     * A creative identifier provided by a registry that is unique across all platforms. This is part of the VAST 4.0 standard.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("universalAdId")
    public UniversalAdId universalAdId;

    public CreativeInput withUniversalAdId(UniversalAdId universalAdId) {
        this.universalAdId = universalAdId;
        return this;
    }
    
    /**
     * Optional. The URL of the VAST tag for a third-party VAST tag creative. Required and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vastTagUrl")
    public String vastTagUrl;

    public CreativeInput withVastTagUrl(String vastTagUrl) {
        this.vastTagUrl = vastTagUrl;
        return this;
    }
    
    public CreativeInput(){}
}
