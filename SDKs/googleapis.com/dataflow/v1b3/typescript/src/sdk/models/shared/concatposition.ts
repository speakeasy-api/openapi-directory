/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Position } from "./position";
import { Expose, Type } from "class-transformer";

/**
 * A position that encapsulates an inner position and an index for the inner position. A ConcatPosition can be used by a reader of a source that encapsulates a set of other sources.
 */
export class ConcatPosition extends SpeakeasyBase {
  /**
   * Index of the inner source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "index" })
  index?: number;

  /**
   * Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "position" })
  @Type(() => Position)
  position?: Position;
}
