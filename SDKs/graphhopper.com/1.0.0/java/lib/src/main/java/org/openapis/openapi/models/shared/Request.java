/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Request - The request that contains the vehicle routing problem to be solved.
 */
public class Request {
    /**
     * Use `objectives` instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("algorithm")
    public Algorithm algorithm;
    public Request withAlgorithm(Algorithm algorithm) {
        this.algorithm = algorithm;
        return this;
    }
    
    /**
     * Specifies general configurations that are taken into account when solving the vehicle routing problem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuration")
    public Configuration configuration;
    public Request withConfiguration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }
    
    /**
     * Specifies your own tranport time and distance matrices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cost_matrices")
    public CostMatrix[] costMatrices;
    public Request withCostMatrices(CostMatrix[] costMatrices) {
        this.costMatrices = costMatrices;
        return this;
    }
    
    /**
     * Specifies an objective function. The vehicle routing problem is solved in such a way that this objective function is minimized.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectives")
    public Objective[] objectives;
    public Request withObjectives(Objective[] objectives) {
        this.objectives = objectives;
        return this;
    }
    
    /**
     * Defines additional relationships between orders.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relations")
    public Object[] relations;
    public Request withRelations(Object[] relations) {
        this.relations = relations;
        return this;
    }
    
    /**
     * Specifies the orders of the type "service". These are, for example, pick-ups, deliveries or other stops that are to be approached by the specified vehicles. Each of these orders contains only one location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("services")
    public Service[] services;
    public Request withServices(Service[] services) {
        this.services = services;
        return this;
    }
    
    /**
     * Specifies the available shipments. Each shipment contains a pickup and a delivery stop, which must be processed one after the other.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipments")
    public Shipment[] shipments;
    public Request withShipments(Shipment[] shipments) {
        this.shipments = shipments;
        return this;
    }
    
    /**
     * Specifies the available vehicle types. These types can be assigned to vehicles.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vehicle_types")
    public VehicleType[] vehicleTypes;
    public Request withVehicleTypes(VehicleType[] vehicleTypes) {
        this.vehicleTypes = vehicleTypes;
        return this;
    }
    
    /**
     * Specifies the available vehicles.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vehicles")
    public Vehicle[] vehicles;
    public Request withVehicles(Vehicle[] vehicles) {
        this.vehicles = vehicles;
        return this;
    }
    
}
