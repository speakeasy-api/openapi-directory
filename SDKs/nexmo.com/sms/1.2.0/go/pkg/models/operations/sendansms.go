// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SendAnSmsFormatEnum - The format of the response
type SendAnSmsFormatEnum string

const (
	SendAnSmsFormatEnumJSON SendAnSmsFormatEnum = "json"
	SendAnSmsFormatEnumXML  SendAnSmsFormatEnum = "xml"
)

func (e *SendAnSmsFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "xml":
		*e = SendAnSmsFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SendAnSmsFormatEnum: %s", s)
	}
}

type SendAnSmsRequest struct {
	NewMessage shared.NewMessage `request:"mediaType=application/x-www-form-urlencoded"`
	// The format of the response
	Format SendAnSmsFormatEnum `pathParam:"style=simple,explode=false,name=format"`
}

type SendAnSms200TextXMLType string

const (
	SendAnSms200TextXMLTypeSMSXML   SendAnSms200TextXMLType = "SMSXml"
	SendAnSms200TextXMLTypeErrorXML SendAnSms200TextXMLType = "ErrorXml"
)

type SendAnSms200TextXML struct {
	SMSXML   *shared.SMSXML
	ErrorXML *shared.ErrorXML

	Type SendAnSms200TextXMLType
}

func CreateSendAnSms200TextXMLSMSXML(smsXML shared.SMSXML) SendAnSms200TextXML {
	typ := SendAnSms200TextXMLTypeSMSXML

	return SendAnSms200TextXML{
		SMSXML: &smsXML,
		Type:   typ,
	}
}

func CreateSendAnSms200TextXMLErrorXML(errorXML shared.ErrorXML) SendAnSms200TextXML {
	typ := SendAnSms200TextXMLTypeErrorXML

	return SendAnSms200TextXML{
		ErrorXML: &errorXML,
		Type:     typ,
	}
}

func (u *SendAnSms200TextXML) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	smsXML := new(shared.SMSXML)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&smsXML); err == nil {
		u.SMSXML = smsXML
		u.Type = SendAnSms200TextXMLTypeSMSXML
		return nil
	}

	errorXML := new(shared.ErrorXML)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&errorXML); err == nil {
		u.ErrorXML = errorXML
		u.Type = SendAnSms200TextXMLTypeErrorXML
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SendAnSms200TextXML) MarshalJSON() ([]byte, error) {
	if u.SMSXML != nil {
		return json.Marshal(u.SMSXML)
	}

	if u.ErrorXML != nil {
		return json.Marshal(u.ErrorXML)
	}

	return nil, nil
}

type SendAnSms200ApplicationJSONType string

const (
	SendAnSms200ApplicationJSONTypeSms   SendAnSms200ApplicationJSONType = "SMS"
	SendAnSms200ApplicationJSONTypeError SendAnSms200ApplicationJSONType = "Error"
)

type SendAnSms200ApplicationJSON struct {
	Sms   *shared.Sms
	Error *shared.Error

	Type SendAnSms200ApplicationJSONType
}

func CreateSendAnSms200ApplicationJSONSms(sms shared.Sms) SendAnSms200ApplicationJSON {
	typ := SendAnSms200ApplicationJSONTypeSms

	return SendAnSms200ApplicationJSON{
		Sms:  &sms,
		Type: typ,
	}
}

func CreateSendAnSms200ApplicationJSONError(error shared.Error) SendAnSms200ApplicationJSON {
	typ := SendAnSms200ApplicationJSONTypeError

	return SendAnSms200ApplicationJSON{
		Error: &error,
		Type:  typ,
	}
}

func (u *SendAnSms200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sms := new(shared.Sms)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sms); err == nil {
		u.Sms = sms
		u.Type = SendAnSms200ApplicationJSONTypeSms
		return nil
	}

	error := new(shared.Error)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&error); err == nil {
		u.Error = error
		u.Type = SendAnSms200ApplicationJSONTypeError
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SendAnSms200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.Sms != nil {
		return json.Marshal(u.Sms)
	}

	if u.Error != nil {
		return json.Marshal(u.Error)
	}

	return nil, nil
}

type SendAnSmsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	SendAnSms200ApplicationJSONOneOf *SendAnSms200ApplicationJSON
}
