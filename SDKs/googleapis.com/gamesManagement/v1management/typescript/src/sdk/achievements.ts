/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Achievements {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Resets the achievement with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.
   */
  gamesManagementAchievementsReset(
    req: operations.GamesManagementAchievementsResetRequest,
    security: operations.GamesManagementAchievementsResetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesManagementAchievementsResetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesManagementAchievementsResetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1management/achievements/{achievementId}/reset",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesManagementAchievementsResetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesManagementAchievementsResetResponse =
        new operations.GamesManagementAchievementsResetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.achievementResetResponse = utils.objectToClass(
              httpRes?.data,
              shared.AchievementResetResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Resets all achievements for the currently authenticated player for your application. This method is only accessible to whitelisted tester accounts for your application.
   */
  gamesManagementAchievementsResetAll(
    req: operations.GamesManagementAchievementsResetAllRequest,
    security: operations.GamesManagementAchievementsResetAllSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesManagementAchievementsResetAllResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesManagementAchievementsResetAllRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/games/v1management/achievements/reset";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesManagementAchievementsResetAllSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesManagementAchievementsResetAllResponse =
        new operations.GamesManagementAchievementsResetAllResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.achievementResetAllResponse = utils.objectToClass(
              httpRes?.data,
              shared.AchievementResetAllResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Resets all draft achievements for all players. This method is only available to user accounts for your developer console.
   */
  gamesManagementAchievementsResetAllForAllPlayers(
    req: operations.GamesManagementAchievementsResetAllForAllPlayersRequest,
    security: operations.GamesManagementAchievementsResetAllForAllPlayersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesManagementAchievementsResetAllForAllPlayersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GamesManagementAchievementsResetAllForAllPlayersRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/games/v1management/achievements/resetAllForAllPlayers";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GamesManagementAchievementsResetAllForAllPlayersSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesManagementAchievementsResetAllForAllPlayersResponse =
        new operations.GamesManagementAchievementsResetAllForAllPlayersResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Resets the achievement with the given ID for all players. This method is only available to user accounts for your developer console. Only draft achievements can be reset.
   */
  gamesManagementAchievementsResetForAllPlayers(
    req: operations.GamesManagementAchievementsResetForAllPlayersRequest,
    security: operations.GamesManagementAchievementsResetForAllPlayersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesManagementAchievementsResetForAllPlayersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesManagementAchievementsResetForAllPlayersRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1management/achievements/{achievementId}/resetForAllPlayers",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GamesManagementAchievementsResetForAllPlayersSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesManagementAchievementsResetForAllPlayersResponse =
        new operations.GamesManagementAchievementsResetForAllPlayersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Resets achievements with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft achievements may be reset.
   */
  gamesManagementAchievementsResetMultipleForAllPlayers(
    req: operations.GamesManagementAchievementsResetMultipleForAllPlayersRequest,
    security: operations.GamesManagementAchievementsResetMultipleForAllPlayersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesManagementAchievementsResetMultipleForAllPlayersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GamesManagementAchievementsResetMultipleForAllPlayersRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/games/v1management/achievements/resetMultipleForAllPlayers";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "achievementResetMultipleForAllRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GamesManagementAchievementsResetMultipleForAllPlayersSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesManagementAchievementsResetMultipleForAllPlayersResponse =
        new operations.GamesManagementAchievementsResetMultipleForAllPlayersResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }
}
