"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import beezup_common_additionalproductfiltersvalue as shared_beezup_common_additionalproductfiltersvalue
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelCatalogProductFilters:
    
    additional_product_filters: Optional[dict[str, shared_beezup_common_additionalproductfiltersvalue.BeezUPCommonAdditionalProductFiltersValue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalProductFilters'), 'exclude': lambda f: f is None }})
    r"""Describe a filter on a product's column.
    The key is the column identifier of your catalog or a custom column.
    """  
    catalog_eans: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catalogEans'), 'exclude': lambda f: f is None }})
    r"""The catalog product EAN filter (multiple values)"""  
    catalog_mpns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catalogMpns'), 'exclude': lambda f: f is None }})
    r"""The catalog product MPN filter (multiple values)"""  
    catalog_skus: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catalogSkus'), 'exclude': lambda f: f is None }})
    r"""The catalog product SKU filter (multiple values)"""  
    channel_eans: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelEans'), 'exclude': lambda f: f is None }})
    r"""The channel product EAN filter (multiple values)"""  
    channel_mpns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelMpns'), 'exclude': lambda f: f is None }})
    r"""The channel product MPN filter (multiple values)"""  
    channel_skus: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelSkus'), 'exclude': lambda f: f is None }})
    r"""The channel product SKU filter (multiple values)"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The product title filter"""  
    