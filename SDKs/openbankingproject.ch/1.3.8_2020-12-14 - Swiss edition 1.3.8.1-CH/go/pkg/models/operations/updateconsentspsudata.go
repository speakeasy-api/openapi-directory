// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateConsentsPsuDataSecurity struct {
	BearerAuthOAuth *shared.SchemeBearerAuthOAuth `security:"scheme,type=http,subtype=bearer"`
}

type UpdateConsentsPsuDataPathParams struct {
	// Resource identification of the related SCA.
	AuthorisationID string `pathParam:"style=simple,explode=false,name=authorisationId"`
	// ID of the corresponding consent object as returned by an account information consent request.
	//
	ConsentID string `pathParam:"style=simple,explode=false,name=consentId"`
}

type UpdateConsentsPsuDataHeaders struct {
	// Is contained if and only if the "Signature" element is contained in the header of the request.
	Digest *string `header:"style=simple,explode=false,name=Digest"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAccept *string `header:"style=simple,explode=false,name=PSU-Accept"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptCharset *string `header:"style=simple,explode=false,name=PSU-Accept-Charset"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptEncoding *string `header:"style=simple,explode=false,name=PSU-Accept-Encoding"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptLanguage *string `header:"style=simple,explode=false,name=PSU-Accept-Language"`
	// Might be mandated in the ASPSP's documentation. Only used in a corporate context.
	//
	PSUCorporateID *string `header:"style=simple,explode=false,name=PSU-Corporate-ID"`
	// Might be mandated in the ASPSP's documentation. Only used in a corporate context.
	//
	PSUCorporateIDType *string `header:"style=simple,explode=false,name=PSU-Corporate-ID-Type"`
	// UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available.
	// UUID identifies either a device or a device dependant application installation.
	// In case of an installation identification this ID needs to be unaltered until removal from device.
	//
	PSUDeviceID *string `header:"style=simple,explode=false,name=PSU-Device-ID"`
	// The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
	//
	PSUGeoLocation *string `header:"style=simple,explode=false,name=PSU-Geo-Location"`
	// HTTP method used at the PSU ? TPP interface, if available.
	// Valid values are:
	// * GET
	// * POST
	// * PUT
	// * PATCH
	// * DELETE
	//
	PSUHTTPMethod *shared.PSUHTTPMethodEnum `header:"style=simple,explode=false,name=PSU-Http-Method"`
	// Client ID of the PSU in the ASPSP client interface.
	//
	// Might be mandated in the ASPSP's documentation.
	//
	// It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding
	// AIS service in the same session.
	// In this case the ASPSP might check whether PSU-ID and token match,
	// according to ASPSP documentation.
	//
	PsuID *string `header:"style=simple,explode=false,name=PSU-ID"`
	// Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.
	//
	// In this case, the mean and use are then defined in the ASPSP's documentation.
	//
	PSUIDType *string `header:"style=simple,explode=false,name=PSU-ID-Type"`
	// The forwarded IP Address header field consists of the corresponding HTTP request
	// IP Address field between PSU and TPP.
	// It shall be contained if and only if this request was actively initiated by the PSU.
	//
	PSUIPAddress *string `header:"style=simple,explode=false,name=PSU-IP-Address"`
	// The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.
	//
	PSUIPPort *string `header:"style=simple,explode=false,name=PSU-IP-Port"`
	// The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
	//
	PSUUserAgent *string `header:"style=simple,explode=false,name=PSU-User-Agent"`
	// A signature of the request by the TPP on application level. This might be mandated by ASPSP.
	//
	Signature *string `header:"style=simple,explode=false,name=Signature"`
	// The certificate used for signing the request, in base64 encoding.
	// Must be contained if a signature is contained.
	//
	TPPSignatureCertificate *string `header:"style=simple,explode=false,name=TPP-Signature-Certificate"`
	// ID of the request, unique to the call, as determined by the initiating party.
	XRequestID string `header:"style=simple,explode=false,name=X-Request-ID"`
}

type UpdateConsentsPsuDataRequestBodyType string

const (
	UpdateConsentsPsuDataRequestBodyTypeAny                           UpdateConsentsPsuDataRequestBodyType = "any"
	UpdateConsentsPsuDataRequestBodyTypeUpdatePsuAuthentication       UpdateConsentsPsuDataRequestBodyType = "updatePsuAuthentication"
	UpdateConsentsPsuDataRequestBodyTypeSelectPsuAuthenticationMethod UpdateConsentsPsuDataRequestBodyType = "selectPsuAuthenticationMethod"
	UpdateConsentsPsuDataRequestBodyTypeTransactionAuthorisation      UpdateConsentsPsuDataRequestBodyType = "transactionAuthorisation"
	UpdateConsentsPsuDataRequestBodyTypeAuthorisationConfirmation     UpdateConsentsPsuDataRequestBodyType = "authorisationConfirmation"
)

type UpdateConsentsPsuDataRequestBody struct {
	Any                           interface{}
	UpdatePsuAuthentication       *shared.UpdatePsuAuthentication
	SelectPsuAuthenticationMethod *shared.SelectPsuAuthenticationMethod
	TransactionAuthorisation      *shared.TransactionAuthorisation
	AuthorisationConfirmation     *shared.AuthorisationConfirmation

	Type UpdateConsentsPsuDataRequestBodyType
}

func CreateUpdateConsentsPsuDataRequestBodyAny(any interface{}) UpdateConsentsPsuDataRequestBody {
	typ := UpdateConsentsPsuDataRequestBodyTypeAny

	return UpdateConsentsPsuDataRequestBody{
		Any:  &any,
		Type: typ,
	}
}

func CreateUpdateConsentsPsuDataRequestBodyUpdatePsuAuthentication(updatePsuAuthentication shared.UpdatePsuAuthentication) UpdateConsentsPsuDataRequestBody {
	typ := UpdateConsentsPsuDataRequestBodyTypeUpdatePsuAuthentication

	return UpdateConsentsPsuDataRequestBody{
		UpdatePsuAuthentication: &updatePsuAuthentication,
		Type:                    typ,
	}
}

func CreateUpdateConsentsPsuDataRequestBodySelectPsuAuthenticationMethod(selectPsuAuthenticationMethod shared.SelectPsuAuthenticationMethod) UpdateConsentsPsuDataRequestBody {
	typ := UpdateConsentsPsuDataRequestBodyTypeSelectPsuAuthenticationMethod

	return UpdateConsentsPsuDataRequestBody{
		SelectPsuAuthenticationMethod: &selectPsuAuthenticationMethod,
		Type:                          typ,
	}
}

func CreateUpdateConsentsPsuDataRequestBodyTransactionAuthorisation(transactionAuthorisation shared.TransactionAuthorisation) UpdateConsentsPsuDataRequestBody {
	typ := UpdateConsentsPsuDataRequestBodyTypeTransactionAuthorisation

	return UpdateConsentsPsuDataRequestBody{
		TransactionAuthorisation: &transactionAuthorisation,
		Type:                     typ,
	}
}

func CreateUpdateConsentsPsuDataRequestBodyAuthorisationConfirmation(authorisationConfirmation shared.AuthorisationConfirmation) UpdateConsentsPsuDataRequestBody {
	typ := UpdateConsentsPsuDataRequestBodyTypeAuthorisationConfirmation

	return UpdateConsentsPsuDataRequestBody{
		AuthorisationConfirmation: &authorisationConfirmation,
		Type:                      typ,
	}
}

func (u *UpdateConsentsPsuDataRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	any := new(interface{})
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&any); err == nil {
		u.Any = any
		u.Type = UpdateConsentsPsuDataRequestBodyTypeAny
		return nil
	}

	updatePsuAuthentication := new(shared.UpdatePsuAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updatePsuAuthentication); err == nil {
		u.UpdatePsuAuthentication = updatePsuAuthentication
		u.Type = UpdateConsentsPsuDataRequestBodyTypeUpdatePsuAuthentication
		return nil
	}

	selectPsuAuthenticationMethod := new(shared.SelectPsuAuthenticationMethod)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&selectPsuAuthenticationMethod); err == nil {
		u.SelectPsuAuthenticationMethod = selectPsuAuthenticationMethod
		u.Type = UpdateConsentsPsuDataRequestBodyTypeSelectPsuAuthenticationMethod
		return nil
	}

	transactionAuthorisation := new(shared.TransactionAuthorisation)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&transactionAuthorisation); err == nil {
		u.TransactionAuthorisation = transactionAuthorisation
		u.Type = UpdateConsentsPsuDataRequestBodyTypeTransactionAuthorisation
		return nil
	}

	authorisationConfirmation := new(shared.AuthorisationConfirmation)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&authorisationConfirmation); err == nil {
		u.AuthorisationConfirmation = authorisationConfirmation
		u.Type = UpdateConsentsPsuDataRequestBodyTypeAuthorisationConfirmation
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateConsentsPsuDataRequestBody) MarshalJSON() ([]byte, error) {
	if u.Any != nil {
		return json.Marshal(u.Any)
	}

	if u.UpdatePsuAuthentication != nil {
		return json.Marshal(u.UpdatePsuAuthentication)
	}

	if u.SelectPsuAuthenticationMethod != nil {
		return json.Marshal(u.SelectPsuAuthenticationMethod)
	}

	if u.TransactionAuthorisation != nil {
		return json.Marshal(u.TransactionAuthorisation)
	}

	if u.AuthorisationConfirmation != nil {
		return json.Marshal(u.AuthorisationConfirmation)
	}

	return nil, nil
}

type UpdateConsentsPsuDataRequest struct {
	PathParams UpdateConsentsPsuDataPathParams
	Headers    UpdateConsentsPsuDataHeaders
	Request    *UpdateConsentsPsuDataRequestBody `request:"mediaType=application/json"`
	Security   UpdateConsentsPsuDataSecurity
}

type UpdateConsentsPsuData200ApplicationJSONType string

const (
	UpdateConsentsPsuData200ApplicationJSONTypeUpdatePsuIdenticationResponse         UpdateConsentsPsuData200ApplicationJSONType = "updatePsuIdenticationResponse"
	UpdateConsentsPsuData200ApplicationJSONTypeUpdatePsuAuthenticationResponse       UpdateConsentsPsuData200ApplicationJSONType = "updatePsuAuthenticationResponse"
	UpdateConsentsPsuData200ApplicationJSONTypeSelectPsuAuthenticationMethodResponse UpdateConsentsPsuData200ApplicationJSONType = "selectPsuAuthenticationMethodResponse"
	UpdateConsentsPsuData200ApplicationJSONTypeScaStatusResponse                     UpdateConsentsPsuData200ApplicationJSONType = "scaStatusResponse"
	UpdateConsentsPsuData200ApplicationJSONTypeAuthorisationConfirmationResponse     UpdateConsentsPsuData200ApplicationJSONType = "authorisationConfirmationResponse"
)

type UpdateConsentsPsuData200ApplicationJSON struct {
	UpdatePsuIdenticationResponse         *shared.UpdatePsuIdenticationResponse
	UpdatePsuAuthenticationResponse       *shared.UpdatePsuAuthenticationResponse
	SelectPsuAuthenticationMethodResponse *shared.SelectPsuAuthenticationMethodResponse
	ScaStatusResponse                     *shared.ScaStatusResponse
	AuthorisationConfirmationResponse     *shared.AuthorisationConfirmationResponse

	Type UpdateConsentsPsuData200ApplicationJSONType
}

func CreateUpdateConsentsPsuData200ApplicationJSONUpdatePsuIdenticationResponse(updatePsuIdenticationResponse shared.UpdatePsuIdenticationResponse) UpdateConsentsPsuData200ApplicationJSON {
	typ := UpdateConsentsPsuData200ApplicationJSONTypeUpdatePsuIdenticationResponse

	return UpdateConsentsPsuData200ApplicationJSON{
		UpdatePsuIdenticationResponse: &updatePsuIdenticationResponse,
		Type:                          typ,
	}
}

func CreateUpdateConsentsPsuData200ApplicationJSONUpdatePsuAuthenticationResponse(updatePsuAuthenticationResponse shared.UpdatePsuAuthenticationResponse) UpdateConsentsPsuData200ApplicationJSON {
	typ := UpdateConsentsPsuData200ApplicationJSONTypeUpdatePsuAuthenticationResponse

	return UpdateConsentsPsuData200ApplicationJSON{
		UpdatePsuAuthenticationResponse: &updatePsuAuthenticationResponse,
		Type:                            typ,
	}
}

func CreateUpdateConsentsPsuData200ApplicationJSONSelectPsuAuthenticationMethodResponse(selectPsuAuthenticationMethodResponse shared.SelectPsuAuthenticationMethodResponse) UpdateConsentsPsuData200ApplicationJSON {
	typ := UpdateConsentsPsuData200ApplicationJSONTypeSelectPsuAuthenticationMethodResponse

	return UpdateConsentsPsuData200ApplicationJSON{
		SelectPsuAuthenticationMethodResponse: &selectPsuAuthenticationMethodResponse,
		Type:                                  typ,
	}
}

func CreateUpdateConsentsPsuData200ApplicationJSONScaStatusResponse(scaStatusResponse shared.ScaStatusResponse) UpdateConsentsPsuData200ApplicationJSON {
	typ := UpdateConsentsPsuData200ApplicationJSONTypeScaStatusResponse

	return UpdateConsentsPsuData200ApplicationJSON{
		ScaStatusResponse: &scaStatusResponse,
		Type:              typ,
	}
}

func CreateUpdateConsentsPsuData200ApplicationJSONAuthorisationConfirmationResponse(authorisationConfirmationResponse shared.AuthorisationConfirmationResponse) UpdateConsentsPsuData200ApplicationJSON {
	typ := UpdateConsentsPsuData200ApplicationJSONTypeAuthorisationConfirmationResponse

	return UpdateConsentsPsuData200ApplicationJSON{
		AuthorisationConfirmationResponse: &authorisationConfirmationResponse,
		Type:                              typ,
	}
}

func (u *UpdateConsentsPsuData200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	updatePsuIdenticationResponse := new(shared.UpdatePsuIdenticationResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updatePsuIdenticationResponse); err == nil {
		u.UpdatePsuIdenticationResponse = updatePsuIdenticationResponse
		u.Type = UpdateConsentsPsuData200ApplicationJSONTypeUpdatePsuIdenticationResponse
		return nil
	}

	updatePsuAuthenticationResponse := new(shared.UpdatePsuAuthenticationResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updatePsuAuthenticationResponse); err == nil {
		u.UpdatePsuAuthenticationResponse = updatePsuAuthenticationResponse
		u.Type = UpdateConsentsPsuData200ApplicationJSONTypeUpdatePsuAuthenticationResponse
		return nil
	}

	selectPsuAuthenticationMethodResponse := new(shared.SelectPsuAuthenticationMethodResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&selectPsuAuthenticationMethodResponse); err == nil {
		u.SelectPsuAuthenticationMethodResponse = selectPsuAuthenticationMethodResponse
		u.Type = UpdateConsentsPsuData200ApplicationJSONTypeSelectPsuAuthenticationMethodResponse
		return nil
	}

	scaStatusResponse := new(shared.ScaStatusResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&scaStatusResponse); err == nil {
		u.ScaStatusResponse = scaStatusResponse
		u.Type = UpdateConsentsPsuData200ApplicationJSONTypeScaStatusResponse
		return nil
	}

	authorisationConfirmationResponse := new(shared.AuthorisationConfirmationResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&authorisationConfirmationResponse); err == nil {
		u.AuthorisationConfirmationResponse = authorisationConfirmationResponse
		u.Type = UpdateConsentsPsuData200ApplicationJSONTypeAuthorisationConfirmationResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateConsentsPsuData200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.UpdatePsuIdenticationResponse != nil {
		return json.Marshal(u.UpdatePsuIdenticationResponse)
	}

	if u.UpdatePsuAuthenticationResponse != nil {
		return json.Marshal(u.UpdatePsuAuthenticationResponse)
	}

	if u.SelectPsuAuthenticationMethodResponse != nil {
		return json.Marshal(u.SelectPsuAuthenticationMethodResponse)
	}

	if u.ScaStatusResponse != nil {
		return json.Marshal(u.ScaStatusResponse)
	}

	if u.AuthorisationConfirmationResponse != nil {
		return json.Marshal(u.AuthorisationConfirmationResponse)
	}

	return nil, nil
}

type UpdateConsentsPsuDataResponse struct {
	ContentType string
	// Bad Request
	Error400AIS *shared.Error400AIS
	// Bad Request
	Error400NGAIS *shared.Error400NGAIS
	// Unauthorized
	Error401AIS *shared.Error401AIS
	// Unauthorized
	Error401NGAIS *shared.Error401NGAIS
	// Forbidden
	Error403AIS *shared.Error403AIS
	// Forbidden
	Error403NGAIS *shared.Error403NGAIS
	// Not found
	Error404AIS *shared.Error404AIS
	// Not found
	Error404NGAIS *shared.Error404NGAIS
	// Method Not Allowed
	Error405AIS *shared.Error405AIS
	// Method Not Allowed
	Error405NGAIS *shared.Error405NGAIS
	// Not Acceptable
	Error406AIS *shared.Error406AIS
	// Not Acceptable
	Error406NGAIS *shared.Error406NGAIS
	// Conflict
	Error409AIS *shared.Error409AIS
	// Conflict
	Error409NGAIS *shared.Error409NGAIS
	// Too Many Requests
	Error429AIS *shared.Error429AIS
	// Too Many Requests
	Error429NGAIS *shared.Error429NGAIS
	Headers       map[string][]string
	StatusCode    int
	RawResponse   *http.Response
	// OK
	UpdateConsentsPsuData200ApplicationJSONOneOf *UpdateConsentsPsuData200ApplicationJSON
}
