"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import featureflags_enum as shared_featureflags_enum
from ..shared import itemschedulelist as shared_itemschedulelist
from ..shared import serviceerror as shared_serviceerror
from datetime import date
from typing import Optional


@dataclasses.dataclass
class GetSchedulesRequest:
    
    channels: list[str] = dataclasses.field(metadata={'query_param': { 'field_name': 'channels', 'style': 'form', 'explode': False }})
    r"""The list of channel ids to get schedules for."""  
    date_: date = dataclasses.field(metadata={'query_param': { 'field_name': 'date', 'style': 'form', 'explode': True }})
    r"""The date to target in ISO format, e.g. `2017-05-23` (converted to UTC - see main description).
    
    The base hour requested will belong to this date.
    """  
    duration: int = dataclasses.field(metadata={'query_param': { 'field_name': 'duration', 'style': 'form', 'explode': True }})
    r"""The number of hours of schedules to load from the base `hour` parameter.
    
    This may be negative or positive depending on whether you want to load past or future schedules.
    
    Minimum value is -24, maximum is 24. A value of zero is invalid.
    """  
    hour: int = dataclasses.field(metadata={'query_param': { 'field_name': 'hour', 'style': 'form', 'explode': True }})
    r"""The base hour in the day, defined by the `date` parameter, you wish to load schedules for
    (converted to UTC - see main description).
    
    From 0 to 23, where 0 is midnight.
    """  
    device: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'device', 'style': 'form', 'explode': True }})
    r"""The type of device the content is targeting."""  
    ff: Optional[list[shared_featureflags_enum.FeatureFlagsEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ff', 'style': 'form', 'explode': False }})
    r"""The set of opt in feature flags which cause breaking changes to responses.
    
    While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses
    may need to evolve over this time.
    
    These feature flags allow clients to select which response formats they expect and avoid breaking
    clients as these formats evolve under the current major version.
    
    ### Flags
    
    - `all` - Enable all flags. Useful for testing. _Don't use in production_.
    - `idp` - Dynamic item detail pages with schedulable rows.
    - `ldp` - Dynamic list detail pages with schedulable rows.
    - `hb` - Hubble formatted image urls.
    - `rpt` - Updated resume point threshold logic.
    - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results.
    - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page.
    - `cd` - Custom Destination support.
    
    See the `feature-flags.md` for available flag details.
    """  
    intersect: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'intersect', 'style': 'form', 'explode': True }})
    r"""Flag indicating whether schedules should intersect or be contained in the
    provided interval.
    
    If set to `true`, the result will contain all schedules where either
    schedule start time or end time touches the provided interval.
    
    If set to `false`, only schedules fully contained in the given period
    will be returned.
    """  
    lang: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lang', 'style': 'form', 'explode': True }})
    r"""Language code for the preferred language to be returned in the response.
    
    Parameter value is case-insensitive and should be
      - a valid 2 letter language code without region such as en, de
      - or with region such as en_us, en_au
    
    If undefined then defaults to 'en', unless the server has been configured
    with a custom default.
    
    See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
    """  
    segments: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'segments', 'style': 'form', 'explode': False }})
    r"""The list of segments to filter the response by."""  
    sub: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sub', 'style': 'form', 'explode': True }})
    r"""The active subscription code."""  
    

@dataclasses.dataclass
class GetSchedulesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    item_schedule_lists: Optional[list[shared_itemschedulelist.ItemScheduleList]] = dataclasses.field(default=None)
    r"""An array of schedule lists for each channel requested.
    
    The order of the channels will match the order of channel ids passed during the request.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_error: Optional[shared_serviceerror.ServiceError] = dataclasses.field(default=None)
    r"""Bad request."""  
    