/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Condition for the charge to become active.
 *
 * @remarks
 *
 * If the value of this field is `SpecificDate`, use the `specificTriggerDate` field to specify the date when the charge becomes active.
 *
 */
export enum TriggerParamsTriggerEventEnum {
  ContractEffective = "ContractEffective",
  ServiceActivation = "ServiceActivation",
  CustomerAcceptance = "CustomerAcceptance",
}

/**
 * Specifies when a charge becomes active.
 *
 * @remarks
 *
 */
export class TriggerParams extends SpeakeasyBase {
  /**
   * Date in YYYY-MM-DD format. Only applicable if the value of the `triggerEvent` field is `SpecificDate`.
   *
   * @remarks
   *
   * While this field is applicable, if this field is not set, your `CreateSubscription` order action creates a `Pending` order and a `Pending Acceptance` subscription. If at the same time the service activation date is required and not set, a `Pending Activation` subscription is created.
   *
   * While this field is applicable, if this field is not set, the following order actions create a `Pending` order but do not impact the subscription status. **Note**: This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
   *  * AddProduct
   *  * UpdateProduct
   *  * RemoveProduct
   *  * RenewSubscription
   *  * TermsAndConditions
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "specificTriggerDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  specificTriggerDate?: Date;

  /**
   * Condition for the charge to become active.
   *
   * @remarks
   *
   * If the value of this field is `SpecificDate`, use the `specificTriggerDate` field to specify the date when the charge becomes active.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "triggerEvent" })
  triggerEvent?: TriggerParamsTriggerEventEnum;
}
