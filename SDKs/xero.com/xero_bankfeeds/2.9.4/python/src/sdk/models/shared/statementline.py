"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import creditdebitindicator_enum as shared_creditdebitindicator_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StatementLine:
    r"""the lines details for a statement"""
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Transaction amount"""  
    cheque_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chequeNumber'), 'exclude': lambda f: f is None }})
    r"""The cheque/check number"""  
    credit_debit_indicator: Optional[shared_creditdebitindicator_enum.CreditDebitIndicatorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditDebitIndicator'), 'exclude': lambda f: f is None }})
    r"""If the statement balances are credit or debit, the CreditDebitIndicator should be specified from the perspective of the Customer."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Transaction description"""  
    payee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payeeName'), 'exclude': lambda f: f is None }})
    r"""Typically the merchant or payee name"""  
    posted_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postedDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date that the transaction was processed or cleared as seen in internet banking ISO-8601 YYYY-MM-DD"""  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""Optional field to enhance the Description"""  
    transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionId'), 'exclude': lambda f: f is None }})
    r"""Financial institute's internal transaction identifier. If provided this field is factored into duplicate detection."""  
    