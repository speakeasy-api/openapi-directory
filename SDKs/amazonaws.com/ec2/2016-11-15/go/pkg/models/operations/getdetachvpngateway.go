// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDetachVpnGatewayActionEnum
type GETDetachVpnGatewayActionEnum string

const (
	GETDetachVpnGatewayActionEnumDetachVpnGateway GETDetachVpnGatewayActionEnum = "DetachVpnGateway"
)

func (e GETDetachVpnGatewayActionEnum) ToPointer() *GETDetachVpnGatewayActionEnum {
	return &e
}

func (e *GETDetachVpnGatewayActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DetachVpnGateway":
		*e = GETDetachVpnGatewayActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDetachVpnGatewayActionEnum: %v", v)
	}
}

// GETDetachVpnGatewayVersionEnum
type GETDetachVpnGatewayVersionEnum string

const (
	GETDetachVpnGatewayVersionEnumTwoThousandAndSixteen1115 GETDetachVpnGatewayVersionEnum = "2016-11-15"
)

func (e GETDetachVpnGatewayVersionEnum) ToPointer() *GETDetachVpnGatewayVersionEnum {
	return &e
}

func (e *GETDetachVpnGatewayVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETDetachVpnGatewayVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDetachVpnGatewayVersionEnum: %v", v)
	}
}

type GETDetachVpnGatewayRequest struct {
	Action GETDetachVpnGatewayActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun  *bool                          `queryParam:"style=form,explode=true,name=DryRun"`
	Version GETDetachVpnGatewayVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The ID of the VPC.
	VpcID string `queryParam:"style=form,explode=true,name=VpcId"`
	// The ID of the virtual private gateway.
	VpnGatewayID      string  `queryParam:"style=form,explode=true,name=VpnGatewayId"`
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDetachVpnGatewayResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
