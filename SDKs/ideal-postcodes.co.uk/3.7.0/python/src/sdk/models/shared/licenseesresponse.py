"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import licensee as shared_licensee
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LicenseesResponseCodeEnum(str, Enum):
    TWO_THOUSAND = '2000'

class LicenseesResponseMessageEnum(str, Enum):
    SUCCESS = 'Success'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LicenseesResponseResult:
    r"""List of licensees"""
    
    has_more: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasMore'), 'exclude': lambda f: f is None }})
    r"""Returns true if there are more licensees listed after the maximum number of results as implied by `limit`"""  
    licensees: Optional[list[shared_licensee.Licensee]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licensees'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LicenseesResponse:
    r"""Success"""
    
    code: LicenseesResponseCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: LicenseesResponseMessageEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    result: LicenseesResponseResult = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result') }})
    r"""List of licensees"""  
    