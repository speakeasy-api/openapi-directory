"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Achievements:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def games_management_achievements_reset(self, request: operations.GamesManagementAchievementsResetRequest, security: operations.GamesManagementAchievementsResetSecurity) -> operations.GamesManagementAchievementsResetResponse:
        r"""Resets the achievement with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesManagementAchievementsResetRequest, base_url, '/games/v1management/achievements/{achievementId}/reset', request)
        
        query_params = utils.get_query_params(operations.GamesManagementAchievementsResetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesManagementAchievementsResetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AchievementResetResponse])
                res.achievement_reset_response = out

        return res

    def games_management_achievements_reset_all(self, request: operations.GamesManagementAchievementsResetAllRequest, security: operations.GamesManagementAchievementsResetAllSecurity) -> operations.GamesManagementAchievementsResetAllResponse:
        r"""Resets all achievements for the currently authenticated player for your application. This method is only accessible to whitelisted tester accounts for your application."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/games/v1management/achievements/reset'
        
        query_params = utils.get_query_params(operations.GamesManagementAchievementsResetAllRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesManagementAchievementsResetAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AchievementResetAllResponse])
                res.achievement_reset_all_response = out

        return res

    def games_management_achievements_reset_all_for_all_players(self, request: operations.GamesManagementAchievementsResetAllForAllPlayersRequest, security: operations.GamesManagementAchievementsResetAllForAllPlayersSecurity) -> operations.GamesManagementAchievementsResetAllForAllPlayersResponse:
        r"""Resets all draft achievements for all players. This method is only available to user accounts for your developer console."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/games/v1management/achievements/resetAllForAllPlayers'
        
        query_params = utils.get_query_params(operations.GamesManagementAchievementsResetAllForAllPlayersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesManagementAchievementsResetAllForAllPlayersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def games_management_achievements_reset_for_all_players(self, request: operations.GamesManagementAchievementsResetForAllPlayersRequest, security: operations.GamesManagementAchievementsResetForAllPlayersSecurity) -> operations.GamesManagementAchievementsResetForAllPlayersResponse:
        r"""Resets the achievement with the given ID for all players. This method is only available to user accounts for your developer console. Only draft achievements can be reset."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesManagementAchievementsResetForAllPlayersRequest, base_url, '/games/v1management/achievements/{achievementId}/resetForAllPlayers', request)
        
        query_params = utils.get_query_params(operations.GamesManagementAchievementsResetForAllPlayersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesManagementAchievementsResetForAllPlayersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def games_management_achievements_reset_multiple_for_all_players(self, request: operations.GamesManagementAchievementsResetMultipleForAllPlayersRequest, security: operations.GamesManagementAchievementsResetMultipleForAllPlayersSecurity) -> operations.GamesManagementAchievementsResetMultipleForAllPlayersResponse:
        r"""Resets achievements with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft achievements may be reset."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/games/v1management/achievements/resetMultipleForAllPlayers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "achievement_reset_multiple_for_all_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GamesManagementAchievementsResetMultipleForAllPlayersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesManagementAchievementsResetMultipleForAllPlayersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    