// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type OtcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type OtcerRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Aadhaar number
	UID string `json:"UID"`
}

// OtcerRequestBodyFormatEnum - The format of the certificate in response.
type OtcerRequestBodyFormatEnum string

const (
	OtcerRequestBodyFormatEnumPdf OtcerRequestBodyFormatEnum = "pdf"
)

func (e OtcerRequestBodyFormatEnum) ToPointer() *OtcerRequestBodyFormatEnum {
	return &e
}

func (e *OtcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = OtcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OtcerRequestBodyFormatEnum: %v", v)
	}
}

// OtcerRequestBody - Request format
type OtcerRequestBody struct {
	CertificateParameters *OtcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format OtcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Otcer504ApplicationJSONErrorEnum string

const (
	Otcer504ApplicationJSONErrorEnumGatewayTimeout Otcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Otcer504ApplicationJSONErrorEnum) ToPointer() *Otcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Otcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Otcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Otcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Otcer504ApplicationJSONErrorDescriptionEnum string

const (
	Otcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Otcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Otcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Otcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Otcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Otcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Otcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Otcer504ApplicationJSON - Gateway timeout
type Otcer504ApplicationJSON struct {
	Error            *Otcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Otcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Otcer503ApplicationJSONErrorEnum string

const (
	Otcer503ApplicationJSONErrorEnumServiceUnavailable Otcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Otcer503ApplicationJSONErrorEnum) ToPointer() *Otcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Otcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Otcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Otcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Otcer503ApplicationJSONErrorDescriptionEnum string

const (
	Otcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Otcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Otcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Otcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Otcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Otcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Otcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Otcer503ApplicationJSON - Service unavailable
type Otcer503ApplicationJSON struct {
	Error            *Otcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Otcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Otcer502ApplicationJSONErrorEnum string

const (
	Otcer502ApplicationJSONErrorEnumBadGatewy Otcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Otcer502ApplicationJSONErrorEnum) ToPointer() *Otcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Otcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Otcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Otcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Otcer502ApplicationJSONErrorDescriptionEnum string

const (
	Otcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Otcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Otcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Otcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Otcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Otcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Otcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Otcer502ApplicationJSON - Bad gateway
type Otcer502ApplicationJSON struct {
	Error            *Otcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Otcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Otcer500ApplicationJSONErrorEnum string

const (
	Otcer500ApplicationJSONErrorEnumInternalServerError Otcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Otcer500ApplicationJSONErrorEnum) ToPointer() *Otcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Otcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Otcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Otcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Otcer500ApplicationJSONErrorDescriptionEnum string

const (
	Otcer500ApplicationJSONErrorDescriptionEnumInternalServerError Otcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Otcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Otcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Otcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Otcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Otcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Otcer500ApplicationJSON - Internal server error
type Otcer500ApplicationJSON struct {
	Error            *Otcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Otcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Otcer404ApplicationJSONErrorEnum string

const (
	Otcer404ApplicationJSONErrorEnumRecordNotFound Otcer404ApplicationJSONErrorEnum = "record_not_found"
	Otcer404ApplicationJSONErrorEnumURLNotFound    Otcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Otcer404ApplicationJSONErrorEnum) ToPointer() *Otcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Otcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Otcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Otcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Otcer404ApplicationJSONErrorDescriptionEnum string

const (
	Otcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Otcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Otcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Otcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Otcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Otcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Otcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Otcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Otcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Otcer404ApplicationJSON - No record found
type Otcer404ApplicationJSON struct {
	Error            *Otcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Otcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Otcer401ApplicationJSONErrorEnum string

const (
	Otcer401ApplicationJSONErrorEnumInvalidAuthentication Otcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Otcer401ApplicationJSONErrorEnumInvalidAuthorization  Otcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Otcer401ApplicationJSONErrorEnum) ToPointer() *Otcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Otcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Otcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Otcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Otcer401ApplicationJSONErrorDescriptionEnum string

const (
	Otcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Otcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Otcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Otcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Otcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Otcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Otcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Otcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Otcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Otcer401ApplicationJSON - Unauthorized access
type Otcer401ApplicationJSON struct {
	Error            *Otcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Otcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Otcer400ApplicationJSONErrorEnum string

const (
	Otcer400ApplicationJSONErrorEnumMissingParameter Otcer400ApplicationJSONErrorEnum = "missing_parameter"
	Otcer400ApplicationJSONErrorEnumInvalidParameter Otcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Otcer400ApplicationJSONErrorEnumInvalidFormat    Otcer400ApplicationJSONErrorEnum = "invalid_format"
	Otcer400ApplicationJSONErrorEnumInvalidTxnid     Otcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Otcer400ApplicationJSONErrorEnumInvalidConsentid Otcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Otcer400ApplicationJSONErrorEnum) ToPointer() *Otcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Otcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Otcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Otcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Otcer400ApplicationJSONErrorDescriptionEnum string

const (
	Otcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Otcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Otcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Otcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Otcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Otcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Otcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Otcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Otcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Otcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Otcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Otcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Otcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Otcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Otcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Otcer400ApplicationJSON - Bad request
type Otcer400ApplicationJSON struct {
	Error            *Otcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Otcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type OtcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Otcer400ApplicationJSONObject *Otcer400ApplicationJSON
	// Unauthorized access
	Otcer401ApplicationJSONObject *Otcer401ApplicationJSON
	// No record found
	Otcer404ApplicationJSONObject *Otcer404ApplicationJSON
	// Internal server error
	Otcer500ApplicationJSONObject *Otcer500ApplicationJSON
	// Bad gateway
	Otcer502ApplicationJSONObject *Otcer502ApplicationJSON
	// Service unavailable
	Otcer503ApplicationJSONObject *Otcer503ApplicationJSON
	// Gateway timeout
	Otcer504ApplicationJSONObject *Otcer504ApplicationJSON
}
