"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PrepareTransactionRequestBodyVariationEnum(str, Enum):
    GSB = 'gsb'
    ERZEUGUNG = 'erzeugung'
    EIGENSTROM = 'eigenstrom'
    CO2 = 'co2'
    BAEUME = 'baeume'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PrepareTransactionRequestBody:
    
    account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account'), 'exclude': lambda f: f is None }})
    r"""Stromkonto account address of sender"""  
    signature: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signature'), 'exclude': lambda f: f is None }})
    r"""Signature per Stromkonto setting (might be simple email confirmation link)"""  
    to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'exclude': lambda f: f is None }})
    r"""Stromkonto account address of reciever"""  
    value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Amount to transfer (in Watthours for electricity, or pcs for trees)"""  
    variation: Optional[PrepareTransactionRequestBodyVariationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('variation'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PrepareTransactionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    