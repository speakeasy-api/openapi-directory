"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import giftcardactivityactivate as shared_giftcardactivityactivate
from ..shared import giftcardactivityadjustdecrement as shared_giftcardactivityadjustdecrement
from ..shared import giftcardactivityadjustincrement as shared_giftcardactivityadjustincrement
from ..shared import giftcardactivityblock as shared_giftcardactivityblock
from ..shared import giftcardactivityclearbalance as shared_giftcardactivityclearbalance
from ..shared import giftcardactivitydeactivate as shared_giftcardactivitydeactivate
from ..shared import giftcardactivityimport as shared_giftcardactivityimport
from ..shared import giftcardactivityimportreversal as shared_giftcardactivityimportreversal
from ..shared import giftcardactivityload as shared_giftcardactivityload
from ..shared import giftcardactivityredeem as shared_giftcardactivityredeem
from ..shared import giftcardactivityrefund as shared_giftcardactivityrefund
from ..shared import giftcardactivityunblock as shared_giftcardactivityunblock
from ..shared import giftcardactivityunlinkedactivityrefund as shared_giftcardactivityunlinkedactivityrefund
from ..shared import money as shared_money
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GiftCardActivity:
    r"""Represents an action performed on a gift card that affects its state or balance."""
    
    location_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_id') }})
    r"""The ID of the location at which the activity occurred."""  
    type: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    activate_activity_details: Optional[shared_giftcardactivityactivate.GiftCardActivityActivate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activate_activity_details'), 'exclude': lambda f: f is None }})
    r"""Describes a gift card activity of the ACTIVATE type."""  
    adjust_decrement_activity_details: Optional[shared_giftcardactivityadjustdecrement.GiftCardActivityAdjustDecrement] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adjust_decrement_activity_details'), 'exclude': lambda f: f is None }})
    r"""Describes a gift card activity of the ADJUST_DECREMENT type."""  
    adjust_increment_activity_details: Optional[shared_giftcardactivityadjustincrement.GiftCardActivityAdjustIncrement] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adjust_increment_activity_details'), 'exclude': lambda f: f is None }})
    r"""Describes a gift card activity of the ADJUST_INCREMENT type."""  
    block_activity_details: Optional[shared_giftcardactivityblock.GiftCardActivityBlock] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('block_activity_details'), 'exclude': lambda f: f is None }})
    r"""Describes a gift card activity of the BLOCK type."""  
    clear_balance_activity_details: Optional[shared_giftcardactivityclearbalance.GiftCardActivityClearBalance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clear_balance_activity_details'), 'exclude': lambda f: f is None }})
    r"""Describes a gift card activity of the CLEAR_BALANCE type."""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""The timestamp when the gift card activity was created, in RFC 3339 format."""  
    deactivate_activity_details: Optional[shared_giftcardactivitydeactivate.GiftCardActivityDeactivate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deactivate_activity_details'), 'exclude': lambda f: f is None }})
    r"""Describes a gift card activity of the DEACTIVATE type."""  
    gift_card_balance_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gift_card_balance_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    gift_card_gan: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gift_card_gan'), 'exclude': lambda f: f is None }})
    r"""The gift card GAN. The GAN is not required if `gift_card_id` is present."""  
    gift_card_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gift_card_id'), 'exclude': lambda f: f is None }})
    r"""The gift card ID. The ID is not required if a GAN is present."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the gift card activity."""  
    import_activity_details: Optional[shared_giftcardactivityimport.GiftCardActivityImport] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('import_activity_details'), 'exclude': lambda f: f is None }})
    r"""Describes a gift card activity of the IMPORT type and the `GiftCardGANSource` is OTHER
    (a third-party gift card).
    """  
    import_reversal_activity_details: Optional[shared_giftcardactivityimportreversal.GiftCardActivityImportReversal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('import_reversal_activity_details'), 'exclude': lambda f: f is None }})
    r"""Present only when GiftCardActivityType is IMPORT_REVERSAL and GiftCardGANSource is OTHER"""  
    load_activity_details: Optional[shared_giftcardactivityload.GiftCardActivityLoad] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('load_activity_details'), 'exclude': lambda f: f is None }})
    r"""Present only when `GiftCardActivityType` is LOAD."""  
    redeem_activity_details: Optional[shared_giftcardactivityredeem.GiftCardActivityRedeem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redeem_activity_details'), 'exclude': lambda f: f is None }})
    r"""Present only when `GiftCardActivityType` is REDEEM."""  
    refund_activity_details: Optional[shared_giftcardactivityrefund.GiftCardActivityRefund] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refund_activity_details'), 'exclude': lambda f: f is None }})
    r"""Present only when `GiftCardActivityType` is REFUND."""  
    unblock_activity_details: Optional[shared_giftcardactivityunblock.GiftCardActivityUnblock] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unblock_activity_details'), 'exclude': lambda f: f is None }})
    r"""Present only when `GiftCardActivityType` is UNBLOCK."""  
    unlinked_activity_refund_activity_details: Optional[shared_giftcardactivityunlinkedactivityrefund.GiftCardActivityUnlinkedActivityRefund] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unlinked_activity_refund_activity_details'), 'exclude': lambda f: f is None }})
    r"""Present only when `GiftCardActivityType` is UNLINKED_ACTIVITY_REFUND."""  
    