/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AccessToken } from "./accesstoken";
import { Account } from "./account";
import { Actions } from "./actions";
import { AdditionalDeviceInformation } from "./additionaldeviceinformation";
import { CustomDevice } from "./customdevice";
import { DeviceBySerial } from "./devicebyserial";
import { Devices } from "./devices";
import { DevicesByEnergy } from "./devicesbyenergy";
import { DevicesBySubType } from "./devicesbysubtype";
import { FastSendDeviceValues } from "./fastsenddevicevalues";
import { Folder } from "./folder";
import { FolderAssign } from "./folderassign";
import { FolderMenu } from "./foldermenu";
import { FolderSettings } from "./foldersettings";
import { Health } from "./health";
import { MBus } from "./mbus";
import { MeterFolderInformation } from "./meterfolderinformation";
import { MeterValues } from "./metervalues";
import { OAuth } from "./oauth";
import { Pico } from "./pico";
import { PicoCharging } from "./picocharging";
import { PicoChargingHistory } from "./picocharginghistory";
import { PicoEnableFixCableLock } from "./picoenablefixcablelock";
import { PicoLoadmanagementGroup } from "./picoloadmanagementgroup";
import { PicoLoadmanagementSetDynamicCurrent } from "./picoloadmanagementsetdynamiccurrent";
import { PicoSettings } from "./picosettings";
import { RegisterForRealtimeApi } from "./registerforrealtimeapi";
import { SmartMeDeviceConfiguration } from "./smartmedeviceconfiguration";
import { SubUser } from "./subuser";
import { User } from "./user";
import { UserToFolderAssign } from "./usertofolderassign";
import { Values } from "./values";
import { ValuesInPast } from "./valuesinpast";
import { ValuesInPastMultiple } from "./valuesinpastmultiple";
import { VirtualBillingMeterActive } from "./virtualbillingmeteractive";
import { VirtualBillingMeterDeactivate } from "./virtualbillingmeterdeactivate";
import { VirtualBillingMeters } from "./virtualbillingmeters";
import { VirtualMeterCalculateFormula } from "./virtualmetercalculateformula";
import { VirtualTariff } from "./virtualtariff";
import { VirtualTariffConsumption } from "./virtualtariffconsumption";
import { VirtualTariffsForProperty } from "./virtualtariffsforproperty";
import { VirtualTariffsStatusForProperty } from "./virtualtariffsstatusforproperty";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://smart-me.com:443"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 */
export class SDK {
  public accessToken: AccessToken;
  public account: Account;
  public actions: Actions;
  public additionalDeviceInformation: AdditionalDeviceInformation;
  public customDevice: CustomDevice;
  public deviceBySerial: DeviceBySerial;
  public devices: Devices;
  public devicesByEnergy: DevicesByEnergy;
  public devicesBySubType: DevicesBySubType;
  public fastSendDeviceValues: FastSendDeviceValues;
  public folder: Folder;
  public folderAssign: FolderAssign;
  public folderMenu: FolderMenu;
  public folderSettings: FolderSettings;
  public health: Health;
  public mBus: MBus;
  public meterFolderInformation: MeterFolderInformation;
  public meterValues: MeterValues;
  public oAuth: OAuth;
  public pico: Pico;
  public picoCharging: PicoCharging;
  public picoChargingHistory: PicoChargingHistory;
  public picoEnableFixCableLock: PicoEnableFixCableLock;
  public picoLoadmanagementGroup: PicoLoadmanagementGroup;
  public picoLoadmanagementSetDynamicCurrent: PicoLoadmanagementSetDynamicCurrent;
  public picoSettings: PicoSettings;
  public registerForRealtimeApi: RegisterForRealtimeApi;
  public smartMeDeviceConfiguration: SmartMeDeviceConfiguration;
  public subUser: SubUser;
  public user: User;
  public userToFolderAssign: UserToFolderAssign;
  public values: Values;
  public valuesInPast: ValuesInPast;
  public valuesInPastMultiple: ValuesInPastMultiple;
  public virtualBillingMeterActive: VirtualBillingMeterActive;
  public virtualBillingMeterDeactivate: VirtualBillingMeterDeactivate;
  public virtualBillingMeters: VirtualBillingMeters;
  public virtualMeterCalculateFormula: VirtualMeterCalculateFormula;
  public virtualTariff: VirtualTariff;
  public virtualTariffConsumption: VirtualTariffConsumption;
  public virtualTariffsForProperty: VirtualTariffsForProperty;
  public virtualTariffsStatusForProperty: VirtualTariffsStatusForProperty;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.accessToken = new AccessToken(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.account = new Account(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.actions = new Actions(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.additionalDeviceInformation = new AdditionalDeviceInformation(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.customDevice = new CustomDevice(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.deviceBySerial = new DeviceBySerial(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.devices = new Devices(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.devicesByEnergy = new DevicesByEnergy(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.devicesBySubType = new DevicesBySubType(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.fastSendDeviceValues = new FastSendDeviceValues(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.folder = new Folder(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.folderAssign = new FolderAssign(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.folderMenu = new FolderMenu(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.folderSettings = new FolderSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.health = new Health(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mBus = new MBus(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.meterFolderInformation = new MeterFolderInformation(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.meterValues = new MeterValues(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.oAuth = new OAuth(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.pico = new Pico(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.picoCharging = new PicoCharging(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.picoChargingHistory = new PicoChargingHistory(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.picoEnableFixCableLock = new PicoEnableFixCableLock(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.picoLoadmanagementGroup = new PicoLoadmanagementGroup(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.picoLoadmanagementSetDynamicCurrent =
      new PicoLoadmanagementSetDynamicCurrent(
        this._defaultClient,
        this._securityClient,
        this._serverURL,
        this._language,
        this._sdkVersion,
        this._genVersion
      );

    this.picoSettings = new PicoSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.registerForRealtimeApi = new RegisterForRealtimeApi(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.smartMeDeviceConfiguration = new SmartMeDeviceConfiguration(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.subUser = new SubUser(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.user = new User(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.userToFolderAssign = new UserToFolderAssign(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.values = new Values(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.valuesInPast = new ValuesInPast(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.valuesInPastMultiple = new ValuesInPastMultiple(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.virtualBillingMeterActive = new VirtualBillingMeterActive(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.virtualBillingMeterDeactivate = new VirtualBillingMeterDeactivate(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.virtualBillingMeters = new VirtualBillingMeters(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.virtualMeterCalculateFormula = new VirtualMeterCalculateFormula(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.virtualTariff = new VirtualTariff(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.virtualTariffConsumption = new VirtualTariffConsumption(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.virtualTariffsForProperty = new VirtualTariffsForProperty(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.virtualTariffsStatusForProperty = new VirtualTariffsStatusForProperty(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
