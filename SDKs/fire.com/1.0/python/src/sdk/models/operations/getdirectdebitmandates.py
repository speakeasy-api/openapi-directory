"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class GetDirectDebitMandatesMandatesMandateCurrencyCodeEnum(str, Enum):
    r"""The three letter code for the currency - either `EUR` or `GBP`."""
    EUR = 'EUR'
    GBP = 'GBP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDirectDebitMandatesMandatesMandateCurrency:
    r"""The currency."""
    
    code: Optional[GetDirectDebitMandatesMandatesMandateCurrencyCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The three letter code for the currency - either `EUR` or `GBP`."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The name of the currency"""  
    
class GetDirectDebitMandatesMandatesMandateFireRejectionReasonEnum(str, Enum):
    r"""Rejection reason if transaction is rejected"""
    ACCOUNT_DOES_NOT_ACCEPT_DIRECT_DEBITS = 'ACCOUNT_DOES_NOT_ACCEPT_DIRECT_DEBITS'
    DDIC = 'DDIC'
    ACCOUNT_NOT_FOUND = 'ACCOUNT_NOT_FOUND'
    ACCOUNT_NOT_LIVE = 'ACCOUNT_NOT_LIVE'
    CUSTOMER_NOT_FOUND = 'CUSTOMER_NOT_FOUND'
    BUSINESS_NOT_LIVE = 'BUSINESS_NOT_LIVE'
    BUSINESS_NOT_FULL = 'BUSINESS_NOT_FULL'
    PERSONAL_USER_NOT_LIVE = 'PERSONAL_USER_NOT_LIVE'
    PERSONAL_USER_NOT_FULL = 'PERSONAL_USER_NOT_FULL'
    MANDATE_ALREADY_EXISTS = 'MANDATE_ALREADY_EXISTS'
    MANDATE_WITH_DIFERENT_ACCOUNT = 'MANDATE_WITH_DIFERENT_ACCOUNT'
    NULL_MANDATE_REFERENCE = 'NULL_MANDATE_REFERENCE'
    INVALID_ACCOUNT_CURRENCY = 'INVALID_ACCOUNT_CURRENCY'
    INVALID_MANDATE_REFERENCE = 'INVALID_MANDATE_REFERENCE'
    REQUESTED_BY_CUSTOMER_VIA_SUPPORT = 'REQUESTED_BY_CUSTOMER_VIA_SUPPORT'
    CUSTOMER_ACCOUNT_CLOSED = 'CUSTOMER_ACCOUNT_CLOSED'
    CUSTOMER_DECEASED = 'CUSTOMER_DECEASED'
    ACCOUNT_TRANSFERRED = 'ACCOUNT_TRANSFERRED'
    MANDATE_NOT_FOUND = 'MANDATE_NOT_FOUND'
    ACCOUNT_TRANSFERRED_TO_DIFFERENT_ACCOUNT = 'ACCOUNT_TRANSFERRED_TO_DIFFERENT_ACCOUNT'
    INVALID_ACCOUNT_TYPE = 'INVALID_ACCOUNT_TYPE'
    MANDATE_EXPIRED = 'MANDATE_EXPIRED'
    MANDATE_CANCELLED = 'MANDATE_CANCELLED'
    REQUESTED_BY_CUSTOMER = 'REQUESTED_BY_CUSTOMER'

class GetDirectDebitMandatesMandatesMandateStatusEnum(str, Enum):
    r"""The status of the mandate.
    * 'CREATED'
    * 'LIVE'
    * 'REJECT_REQUESTED'
    * 'REJECT_RECORD_IN_PROGRESS'
    * 'REJECT_RECORDED'
    * 'REJECT_FILE_CREATED'
    * 'REJECT_FILE_SENT'
    * 'CANCEL_REQUESTED'
    * 'CANCEL_RECORD_IN_PROGRESS'
    * 'CANCEL_RECORDED'
    * 'CANCEL_FILE_CREATED'
    * 'CANCEL_FILE_SENT'
    * 'COMPLETE'
    * 'DORMANT'
    """
    CREATED = 'CREATED'
    LIVE = 'LIVE'
    REJECT_REQUESTED = 'REJECT_REQUESTED'
    REJECT_RECORD_IN_PROGRESS = 'REJECT_RECORD_IN_PROGRESS'
    REJECT_RECORDED = 'REJECT_RECORDED'
    REJECT_FILE_CREATED = 'REJECT_FILE_CREATED'
    REJECT_FILE_SENT = 'REJECT_FILE_SENT'
    CANCEL_REQUESTED = 'CANCEL_REQUESTED'
    CANCEL_RECORD_IN_PROGRESS = 'CANCEL_RECORD_IN_PROGRESS'
    CANCEL_RECORDED = 'CANCEL_RECORDED'
    CANCEL_FILE_CREATED = 'CANCEL_FILE_CREATED'
    CANCEL_FILE_SENT = 'CANCEL_FILE_SENT'
    COMPLETE = 'COMPLETE'
    DORMANT = 'DORMANT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDirectDebitMandatesMandatesMandate:
    
    alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alias'), 'exclude': lambda f: f is None }})
    r"""The name of the alias"""  
    currency: Optional[GetDirectDebitMandatesMandatesMandateCurrency] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The currency."""  
    date_cancelled: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateCancelled'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date the direct debit was canceled. Milliseconds since the epoch (1970)."""  
    date_completed: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateCompleted'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date the direct debit was completed. Milliseconds since the epoch (1970)."""  
    date_created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateCreated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date the direct debit was created. Milliseconds since the epoch (1970)."""  
    fire_rejection_reason: Optional[GetDirectDebitMandatesMandatesMandateFireRejectionReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fireRejectionReason'), 'exclude': lambda f: f is None }})
    r"""Rejection reason if transaction is rejected"""  
    last_updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date the direct debit was last updated. Milliseconds since the epoch (1970)."""  
    latest_direct_debit_amount: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latestDirectDebitAmount'), 'exclude': lambda f: f is None }})
    r"""The value of largest direct debit collected"""  
    latest_direct_debit_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latestDirectDebitDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date of latest direct debit collected"""  
    mandate_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandateReference'), 'exclude': lambda f: f is None }})
    r"""the reference of the mandate"""  
    mandate_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandateUuid'), 'exclude': lambda f: f is None }})
    r"""The UUID for the mandate"""  
    number_of_direct_debit_collected: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberOfDirectDebitCollected'), 'exclude': lambda f: f is None }})
    r"""The number of direct debits collected"""  
    originator_alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originatorAlias'), 'exclude': lambda f: f is None }})
    r"""The name of the alias"""  
    originator_logo_url_large: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originatorLogoUrlLarge'), 'exclude': lambda f: f is None }})
    r"""Logo url from party who sets up the direct debit."""  
    originator_logo_url_small: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originatorLogoUrlSmall'), 'exclude': lambda f: f is None }})
    r"""Logo url from party who sets up the direct debit."""  
    originator_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originatorName'), 'exclude': lambda f: f is None }})
    r"""The creator of the party who sets up the direct debit."""  
    originator_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originatorReference'), 'exclude': lambda f: f is None }})
    r"""Set by party who sets up the direct debit."""  
    scheme_cancel_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemeCancelReason'), 'exclude': lambda f: f is None }})
    r"""Reason for cancelation"""  
    scheme_cancel_reason_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemeCancelReasonCode'), 'exclude': lambda f: f is None }})
    r"""The cancelation code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason."""  
    status: Optional[GetDirectDebitMandatesMandatesMandateStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the mandate.
    * 'CREATED'
    * 'LIVE'
    * 'REJECT_REQUESTED'
    * 'REJECT_RECORD_IN_PROGRESS'
    * 'REJECT_RECORDED'
    * 'REJECT_FILE_CREATED'
    * 'REJECT_FILE_SENT'
    * 'CANCEL_REQUESTED'
    * 'CANCEL_RECORD_IN_PROGRESS'
    * 'CANCEL_RECORDED'
    * 'CANCEL_FILE_CREATED'
    * 'CANCEL_FILE_SENT'
    * 'COMPLETE'
    * 'DORMANT'
    """  
    target_ican: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetIcan'), 'exclude': lambda f: f is None }})
    r"""Identifier for the fire.com account (assigned by fire.com)"""  
    value_of_direct_debit_collected: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueOfDirectDebitCollected'), 'exclude': lambda f: f is None }})
    r"""The value of direct debits collected"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDirectDebitMandatesMandates:
    r"""List all direct debit mandates."""
    
    mandates: Optional[list[GetDirectDebitMandatesMandatesMandate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandates'), 'exclude': lambda f: f is None }})  
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""Number of direct debits found"""  
    

@dataclasses.dataclass
class GetDirectDebitMandatesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    mandates: Optional[GetDirectDebitMandatesMandates] = dataclasses.field(default=None)
    r"""List all direct debit mandates."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    