// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FlagAppliesToEnum string

const (
	FlagAppliesToEnumSQLDatabaseVersionUnspecified FlagAppliesToEnum = "SQL_DATABASE_VERSION_UNSPECIFIED"
	FlagAppliesToEnumMysql51                       FlagAppliesToEnum = "MYSQL_5_1"
	FlagAppliesToEnumMysql55                       FlagAppliesToEnum = "MYSQL_5_5"
	FlagAppliesToEnumMysql56                       FlagAppliesToEnum = "MYSQL_5_6"
	FlagAppliesToEnumMysql57                       FlagAppliesToEnum = "MYSQL_5_7"
	FlagAppliesToEnumSqlserver2017Standard         FlagAppliesToEnum = "SQLSERVER_2017_STANDARD"
	FlagAppliesToEnumSqlserver2017Enterprise       FlagAppliesToEnum = "SQLSERVER_2017_ENTERPRISE"
	FlagAppliesToEnumSqlserver2017Express          FlagAppliesToEnum = "SQLSERVER_2017_EXPRESS"
	FlagAppliesToEnumSqlserver2017Web              FlagAppliesToEnum = "SQLSERVER_2017_WEB"
	FlagAppliesToEnumPostgres96                    FlagAppliesToEnum = "POSTGRES_9_6"
	FlagAppliesToEnumPostgres10                    FlagAppliesToEnum = "POSTGRES_10"
	FlagAppliesToEnumPostgres11                    FlagAppliesToEnum = "POSTGRES_11"
	FlagAppliesToEnumPostgres12                    FlagAppliesToEnum = "POSTGRES_12"
	FlagAppliesToEnumPostgres13                    FlagAppliesToEnum = "POSTGRES_13"
	FlagAppliesToEnumPostgres14                    FlagAppliesToEnum = "POSTGRES_14"
	FlagAppliesToEnumPostgres15                    FlagAppliesToEnum = "POSTGRES_15"
	FlagAppliesToEnumMysql80                       FlagAppliesToEnum = "MYSQL_8_0"
	FlagAppliesToEnumMysql8018                     FlagAppliesToEnum = "MYSQL_8_0_18"
	FlagAppliesToEnumMysql8026                     FlagAppliesToEnum = "MYSQL_8_0_26"
	FlagAppliesToEnumMysql8027                     FlagAppliesToEnum = "MYSQL_8_0_27"
	FlagAppliesToEnumMysql8028                     FlagAppliesToEnum = "MYSQL_8_0_28"
	FlagAppliesToEnumMysql8029                     FlagAppliesToEnum = "MYSQL_8_0_29"
	FlagAppliesToEnumMysql8030                     FlagAppliesToEnum = "MYSQL_8_0_30"
	FlagAppliesToEnumMysql8031                     FlagAppliesToEnum = "MYSQL_8_0_31"
	FlagAppliesToEnumMysql8032                     FlagAppliesToEnum = "MYSQL_8_0_32"
	FlagAppliesToEnumMysql8033                     FlagAppliesToEnum = "MYSQL_8_0_33"
	FlagAppliesToEnumMysql8034                     FlagAppliesToEnum = "MYSQL_8_0_34"
	FlagAppliesToEnumMysql8035                     FlagAppliesToEnum = "MYSQL_8_0_35"
	FlagAppliesToEnumMysql8036                     FlagAppliesToEnum = "MYSQL_8_0_36"
	FlagAppliesToEnumSqlserver2019Standard         FlagAppliesToEnum = "SQLSERVER_2019_STANDARD"
	FlagAppliesToEnumSqlserver2019Enterprise       FlagAppliesToEnum = "SQLSERVER_2019_ENTERPRISE"
	FlagAppliesToEnumSqlserver2019Express          FlagAppliesToEnum = "SQLSERVER_2019_EXPRESS"
	FlagAppliesToEnumSqlserver2019Web              FlagAppliesToEnum = "SQLSERVER_2019_WEB"
)

func (e FlagAppliesToEnum) ToPointer() *FlagAppliesToEnum {
	return &e
}

func (e *FlagAppliesToEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SQL_DATABASE_VERSION_UNSPECIFIED":
		fallthrough
	case "MYSQL_5_1":
		fallthrough
	case "MYSQL_5_5":
		fallthrough
	case "MYSQL_5_6":
		fallthrough
	case "MYSQL_5_7":
		fallthrough
	case "SQLSERVER_2017_STANDARD":
		fallthrough
	case "SQLSERVER_2017_ENTERPRISE":
		fallthrough
	case "SQLSERVER_2017_EXPRESS":
		fallthrough
	case "SQLSERVER_2017_WEB":
		fallthrough
	case "POSTGRES_9_6":
		fallthrough
	case "POSTGRES_10":
		fallthrough
	case "POSTGRES_11":
		fallthrough
	case "POSTGRES_12":
		fallthrough
	case "POSTGRES_13":
		fallthrough
	case "POSTGRES_14":
		fallthrough
	case "POSTGRES_15":
		fallthrough
	case "MYSQL_8_0":
		fallthrough
	case "MYSQL_8_0_18":
		fallthrough
	case "MYSQL_8_0_26":
		fallthrough
	case "MYSQL_8_0_27":
		fallthrough
	case "MYSQL_8_0_28":
		fallthrough
	case "MYSQL_8_0_29":
		fallthrough
	case "MYSQL_8_0_30":
		fallthrough
	case "MYSQL_8_0_31":
		fallthrough
	case "MYSQL_8_0_32":
		fallthrough
	case "MYSQL_8_0_33":
		fallthrough
	case "MYSQL_8_0_34":
		fallthrough
	case "MYSQL_8_0_35":
		fallthrough
	case "MYSQL_8_0_36":
		fallthrough
	case "SQLSERVER_2019_STANDARD":
		fallthrough
	case "SQLSERVER_2019_ENTERPRISE":
		fallthrough
	case "SQLSERVER_2019_EXPRESS":
		fallthrough
	case "SQLSERVER_2019_WEB":
		*e = FlagAppliesToEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FlagAppliesToEnum: %v", v)
	}
}

// FlagTypeEnum - The type of the flag. Flags are typed to being `BOOLEAN`, `STRING`, `INTEGER` or `NONE`. `NONE` is used for flags which do not take a value, such as `skip_grant_tables`.
type FlagTypeEnum string

const (
	FlagTypeEnumSQLFlagTypeUnspecified FlagTypeEnum = "SQL_FLAG_TYPE_UNSPECIFIED"
	FlagTypeEnumBoolean                FlagTypeEnum = "BOOLEAN"
	FlagTypeEnumString                 FlagTypeEnum = "STRING"
	FlagTypeEnumInteger                FlagTypeEnum = "INTEGER"
	FlagTypeEnumNone                   FlagTypeEnum = "NONE"
	FlagTypeEnumMysqlTimezoneOffset    FlagTypeEnum = "MYSQL_TIMEZONE_OFFSET"
	FlagTypeEnumFloat                  FlagTypeEnum = "FLOAT"
	FlagTypeEnumRepeatedString         FlagTypeEnum = "REPEATED_STRING"
)

func (e FlagTypeEnum) ToPointer() *FlagTypeEnum {
	return &e
}

func (e *FlagTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SQL_FLAG_TYPE_UNSPECIFIED":
		fallthrough
	case "BOOLEAN":
		fallthrough
	case "STRING":
		fallthrough
	case "INTEGER":
		fallthrough
	case "NONE":
		fallthrough
	case "MYSQL_TIMEZONE_OFFSET":
		fallthrough
	case "FLOAT":
		fallthrough
	case "REPEATED_STRING":
		*e = FlagTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FlagTypeEnum: %v", v)
	}
}

// Flag - A flag resource.
type Flag struct {
	// Use this field if only certain integers are accepted. Can be combined with min_value and max_value to add additional values.
	AllowedIntValues []string `json:"allowedIntValues,omitempty"`
	// For `STRING` flags, a list of strings that the value can be set to.
	AllowedStringValues []string `json:"allowedStringValues,omitempty"`
	// The database version this flag applies to. Can be MySQL instances: `MYSQL_8_0`, `MYSQL_8_0_18`, `MYSQL_8_0_26`, `MYSQL_5_7`, or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11` or `POSTGRES_12`. SQL Server instances: `SQLSERVER_2017_STANDARD`, `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`, `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`, or `SQLSERVER_2019_WEB`. See [the complete list](/sql/docs/mysql/admin-api/rest/v1/SqlDatabaseVersion).
	AppliesTo []FlagAppliesToEnum `json:"appliesTo,omitempty"`
	// Whether or not the flag is considered in beta.
	InBeta *bool `json:"inBeta,omitempty"`
	// This is always `sql#flag`.
	Kind *string `json:"kind,omitempty"`
	// For `INTEGER` flags, the maximum allowed value.
	MaxValue *string `json:"maxValue,omitempty"`
	// For `INTEGER` flags, the minimum allowed value.
	MinValue *string `json:"minValue,omitempty"`
	// This is the name of the flag. Flag names always use underscores, not hyphens, for example: `max_allowed_packet`
	Name *string `json:"name,omitempty"`
	// Indicates whether changing this flag will trigger a database restart. Only applicable to Second Generation instances.
	RequiresRestart *bool `json:"requiresRestart,omitempty"`
	// The type of the flag. Flags are typed to being `BOOLEAN`, `STRING`, `INTEGER` or `NONE`. `NONE` is used for flags which do not take a value, such as `skip_grant_tables`.
	Type *FlagTypeEnum `json:"type,omitempty"`
}
