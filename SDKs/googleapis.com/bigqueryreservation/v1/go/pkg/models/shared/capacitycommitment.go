// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CapacityCommitmentEditionEnum - Do not use.
type CapacityCommitmentEditionEnum string

const (
	CapacityCommitmentEditionEnumEditionUnspecified CapacityCommitmentEditionEnum = "EDITION_UNSPECIFIED"
	CapacityCommitmentEditionEnumEnterprise         CapacityCommitmentEditionEnum = "ENTERPRISE"
)

func (e *CapacityCommitmentEditionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EDITION_UNSPECIFIED":
		fallthrough
	case "ENTERPRISE":
		*e = CapacityCommitmentEditionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CapacityCommitmentEditionEnum: %s", s)
	}
}

// CapacityCommitmentPlanEnum - Capacity commitment commitment plan.
type CapacityCommitmentPlanEnum string

const (
	CapacityCommitmentPlanEnumCommitmentPlanUnspecified CapacityCommitmentPlanEnum = "COMMITMENT_PLAN_UNSPECIFIED"
	CapacityCommitmentPlanEnumFlex                      CapacityCommitmentPlanEnum = "FLEX"
	CapacityCommitmentPlanEnumTrial                     CapacityCommitmentPlanEnum = "TRIAL"
	CapacityCommitmentPlanEnumMonthly                   CapacityCommitmentPlanEnum = "MONTHLY"
	CapacityCommitmentPlanEnumAnnual                    CapacityCommitmentPlanEnum = "ANNUAL"
	CapacityCommitmentPlanEnumNone                      CapacityCommitmentPlanEnum = "NONE"
)

func (e *CapacityCommitmentPlanEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "COMMITMENT_PLAN_UNSPECIFIED":
		fallthrough
	case "FLEX":
		fallthrough
	case "TRIAL":
		fallthrough
	case "MONTHLY":
		fallthrough
	case "ANNUAL":
		fallthrough
	case "NONE":
		*e = CapacityCommitmentPlanEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CapacityCommitmentPlanEnum: %s", s)
	}
}

// CapacityCommitmentRenewalPlanEnum - The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
type CapacityCommitmentRenewalPlanEnum string

const (
	CapacityCommitmentRenewalPlanEnumCommitmentPlanUnspecified CapacityCommitmentRenewalPlanEnum = "COMMITMENT_PLAN_UNSPECIFIED"
	CapacityCommitmentRenewalPlanEnumFlex                      CapacityCommitmentRenewalPlanEnum = "FLEX"
	CapacityCommitmentRenewalPlanEnumTrial                     CapacityCommitmentRenewalPlanEnum = "TRIAL"
	CapacityCommitmentRenewalPlanEnumMonthly                   CapacityCommitmentRenewalPlanEnum = "MONTHLY"
	CapacityCommitmentRenewalPlanEnumAnnual                    CapacityCommitmentRenewalPlanEnum = "ANNUAL"
	CapacityCommitmentRenewalPlanEnumNone                      CapacityCommitmentRenewalPlanEnum = "NONE"
)

func (e *CapacityCommitmentRenewalPlanEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "COMMITMENT_PLAN_UNSPECIFIED":
		fallthrough
	case "FLEX":
		fallthrough
	case "TRIAL":
		fallthrough
	case "MONTHLY":
		fallthrough
	case "ANNUAL":
		fallthrough
	case "NONE":
		*e = CapacityCommitmentRenewalPlanEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CapacityCommitmentRenewalPlanEnum: %s", s)
	}
}

// CapacityCommitmentStateEnum - Output only. State of the commitment.
type CapacityCommitmentStateEnum string

const (
	CapacityCommitmentStateEnumStateUnspecified CapacityCommitmentStateEnum = "STATE_UNSPECIFIED"
	CapacityCommitmentStateEnumPending          CapacityCommitmentStateEnum = "PENDING"
	CapacityCommitmentStateEnumActive           CapacityCommitmentStateEnum = "ACTIVE"
	CapacityCommitmentStateEnumFailed           CapacityCommitmentStateEnum = "FAILED"
)

func (e *CapacityCommitmentStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "FAILED":
		*e = CapacityCommitmentStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CapacityCommitmentStateEnum: %s", s)
	}
}

// CapacityCommitment - Capacity commitment is a way to purchase compute capacity for BigQuery jobs (in the form of slots) with some committed period of usage. Annual commitments renew by default. Commitments can be removed after their commitment end time passes. In order to remove annual commitment, its plan needs to be changed to monthly or flex first. A capacity commitment resource exists as a child resource of the admin project.
type CapacityCommitment struct {
	// Output only. The end of the current commitment period. It is applicable only for ACTIVE capacity commitments.
	CommitmentEndTime *string `json:"commitmentEndTime,omitempty"`
	// Output only. The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
	CommitmentStartTime *string `json:"commitmentStartTime,omitempty"`
	// Do not use.
	Edition *CapacityCommitmentEditionEnum `json:"edition,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	FailureStatus *Status `json:"failureStatus,omitempty"`
	// Applicable only for commitments located within one of the BigQuery multi-regions (US or EU). If set to true, this commitment is placed in the organization's secondary region which is designated for disaster recovery purposes. If false, this commitment is placed in the organization's default region.
	MultiRegionAuxiliary *bool `json:"multiRegionAuxiliary,omitempty"`
	// Output only. The resource name of the capacity commitment, e.g., `projects/myproject/locations/US/capacityCommitments/123` The commitment_id must only contain lower case alphanumeric characters or dashes. It must start with a letter and must not end with a dash. Its maximum length is 64 characters.
	Name *string `json:"name,omitempty"`
	// Capacity commitment commitment plan.
	Plan *CapacityCommitmentPlanEnum `json:"plan,omitempty"`
	// The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
	RenewalPlan *CapacityCommitmentRenewalPlanEnum `json:"renewalPlan,omitempty"`
	// Number of slots in this commitment.
	SlotCount *string `json:"slotCount,omitempty"`
	// Output only. State of the commitment.
	State *CapacityCommitmentStateEnum `json:"state,omitempty"`
}

// CapacityCommitmentInput - Capacity commitment is a way to purchase compute capacity for BigQuery jobs (in the form of slots) with some committed period of usage. Annual commitments renew by default. Commitments can be removed after their commitment end time passes. In order to remove annual commitment, its plan needs to be changed to monthly or flex first. A capacity commitment resource exists as a child resource of the admin project.
type CapacityCommitmentInput struct {
	// Do not use.
	Edition *CapacityCommitmentEditionEnum `json:"edition,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	FailureStatus *Status `json:"failureStatus,omitempty"`
	// Applicable only for commitments located within one of the BigQuery multi-regions (US or EU). If set to true, this commitment is placed in the organization's secondary region which is designated for disaster recovery purposes. If false, this commitment is placed in the organization's default region.
	MultiRegionAuxiliary *bool `json:"multiRegionAuxiliary,omitempty"`
	// Capacity commitment commitment plan.
	Plan *CapacityCommitmentPlanEnum `json:"plan,omitempty"`
	// The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
	RenewalPlan *CapacityCommitmentRenewalPlanEnum `json:"renewalPlan,omitempty"`
	// Number of slots in this commitment.
	SlotCount *string `json:"slotCount,omitempty"`
}
