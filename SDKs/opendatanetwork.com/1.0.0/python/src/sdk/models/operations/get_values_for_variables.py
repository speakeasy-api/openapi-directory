"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetValuesForVariablesFormatEnum(str, Enum):
    r"""If format is set to `google`, the data frame will be formatted
    as a [Google Visualizations data table](https://developers.google.com/chart/interactive/docs/reference#datatable-class).
    If the format is not provided or invalid, then the frame
    will be formatted normally.
    """
    GOOGLE = 'google'


@dataclasses.dataclass
class GetValuesForVariablesRequest:
    
    variable: str = dataclasses.field(metadata={'query_param': { 'field_name': 'variable', 'style': 'form', 'explode': True }})
    r"""Comma separated list of variable IDs.
    Defaults to retrieving all variables.
    It is also possible to pass in a topic such as
    `demographics`, or a dataset such as `demographics.population`,
    which would both be equivalent to specifying
    `demographics.population.count` and `demographics.population.change`.
    Note that only variables in the same dataset are allowed.
    """  
    app_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'app_token', 'style': 'form', 'explode': True }})
    r"""The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be
    used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).
    """  
    describe: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'describe', 'style': 'form', 'explode': True }})
    r"""Whether or not to produce a description of the data.
    Set to `true` to produce a description.
    Descriptions are not available if no entities are specified.
    
    + Default `false`
    """  
    entity_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'entity_id', 'style': 'form', 'explode': True }})
    r"""Comma separated list of entity IDs.
    Defaults to retrieving all entities.
    Note that since there is currently no results pagination,
    retrieving values for all entities may produce incomplete results.
    """  
    forecast: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'forecast', 'style': 'form', 'explode': True }})
    r"""Number of steps to forecast.
    Must be an integer between 0 and 20.
    Forecasts are produced using linear extrapolation
    on the data. They are only available when retrieving
    data for a single variable across many numerical
    constraint options.
    
    + Default `0`
    """  
    format: Optional[GetValuesForVariablesFormatEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'format', 'style': 'form', 'explode': True }})
    r"""If format is set to `google`, the data frame will be formatted
    as a [Google Visualizations data table](https://developers.google.com/chart/interactive/docs/reference#datatable-class).
    If the format is not provided or invalid, then the frame
    will be formatted normally.
    """  
    x_app_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-App-Token', 'style': 'simple', 'explode': False }})
    r"""e.g. cQovpGcdUT1CSzgYk0KPYdAI0"""  
    

@dataclasses.dataclass
class GetValuesForVariablesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    