<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Site 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Show site settings
     * 
     * Show site settings
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSiteResponse
     */
	public function getSite(
    ): \OpenAPI\OpenAPI\Models\Operations\GetSiteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/site');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSiteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->siteEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SiteEntity', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * List Api Keys
     * 
     * List Api Keys
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSiteApiKeysRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSiteApiKeysResponse
     */
	public function getSiteApiKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetSiteApiKeysRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSiteApiKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/site/api_keys');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSiteApiKeysRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSiteApiKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKeyEntities = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ApiKeyEntity>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Show site DNS configuration.
     * 
     * Show site DNS configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSiteDnsRecordsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSiteDnsRecordsResponse
     */
	public function getSiteDnsRecords(
        \OpenAPI\OpenAPI\Models\Operations\GetSiteDnsRecordsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSiteDnsRecordsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/site/dns_records');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSiteDnsRecordsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSiteDnsRecordsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dnsRecordEntities = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DnsRecordEntity>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * List IP Addresses associated with the current site
     * 
     * List IP Addresses associated with the current site
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSiteIpAddressesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSiteIpAddressesResponse
     */
	public function getSiteIpAddresses(
        \OpenAPI\OpenAPI\Models\Operations\GetSiteIpAddressesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSiteIpAddressesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/site/ip_addresses');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSiteIpAddressesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSiteIpAddressesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ipAddressEntities = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IpAddressEntity>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Get the most recent usage snapshot (usage data for billing purposes) for a Site.
     * 
     * Get the most recent usage snapshot (usage data for billing purposes) for a Site.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSiteUsageResponse
     */
	public function getSiteUsage(
    ): \OpenAPI\OpenAPI\Models\Operations\GetSiteUsageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/site/usage');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSiteUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usageSnapshotEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UsageSnapshotEntity', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Update site settings.
     * 
     * Update site settings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSiteRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSiteResponse
     */
	public function patchSite(
        \OpenAPI\OpenAPI\Models\Operations\PatchSiteRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSiteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/site');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSiteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->siteEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SiteEntity', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Create Api Key
     * 
     * Create Api Key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSiteApiKeysRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSiteApiKeysResponse
     */
	public function postSiteApiKeys(
        \OpenAPI\OpenAPI\Models\Operations\PostSiteApiKeysRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSiteApiKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/site/api_keys');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSiteApiKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKeyEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiKeyEntity', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Test webhook.
     * 
     * Test webhook.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSiteTestWebhookRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSiteTestWebhookResponse
     */
	public function postSiteTestWebhook(
        \OpenAPI\OpenAPI\Models\Operations\PostSiteTestWebhookRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSiteTestWebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/site/test-webhook');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSiteTestWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statusEntity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StatusEntity', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 412 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 423 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
}