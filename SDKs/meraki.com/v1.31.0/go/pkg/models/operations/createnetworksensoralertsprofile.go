// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CreateNetworkSensorAlertsProfilePathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum - If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum string

const (
	CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnumAbove CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum = "above"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnumBelow CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum = "below"
)

func (e *CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "above":
		fallthrough
	case "below":
		*e = CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum: %s", s)
	}
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum - Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum string

const (
	CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumZero                    CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "0"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumSixty                   CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "60"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumOneHundredAndTwenty     CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "120"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumOneHundredAndEighty     CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "180"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumTwoHundredAndForty      CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "240"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumThreeHundred            CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "300"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumSixHundred              CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "600"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumNineHundred             CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "900"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumOneThousandEightHundred CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "1800"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumThreeThousandSixHundred CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "3600"
)

func (e *CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "60":
		fallthrough
	case "120":
		fallthrough
	case "180":
		fallthrough
	case "240":
		fallthrough
	case "300":
		fallthrough
	case "600":
		fallthrough
	case "900":
		fallthrough
	case "1800":
		fallthrough
	case "3600":
		*e = CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum: %s", s)
	}
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor - Door open threshold. 'open' must be provided and set to true.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor struct {
	// Alerting threshold for a door open event. Must be set to true.
	Open bool `json:"open"`
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum - Alerting threshold as a qualitative humidity level.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum string

const (
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnumFair       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum = "fair"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnumGood       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum = "good"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnumInadequate CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum = "inadequate"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnumPoor       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum = "poor"
)

func (e *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum: %s", s)
	}
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity - Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity struct {
	// Alerting threshold as a qualitative humidity level.
	Quality *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum `json:"quality,omitempty"`
	// Alerting threshold in %RH.
	RelativePercentage *int64 `json:"relativePercentage,omitempty"`
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum - Alerting threshold as a qualitative indoor air quality level.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum string

const (
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnumFair       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum = "fair"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnumGood       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum = "good"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnumInadequate CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum = "inadequate"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnumPoor       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum = "poor"
)

func (e *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum: %s", s)
	}
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality - Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality struct {
	// Alerting threshold as a qualitative indoor air quality level.
	Quality *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum `json:"quality,omitempty"`
	// Alerting threshold as indoor air quality score.
	Score *int64 `json:"score,omitempty"`
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum - Alerting threshold as a qualitative ambient noise level.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum string

const (
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnumFair       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum = "fair"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnumGood       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum = "good"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnumInadequate CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum = "inadequate"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnumPoor       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum = "poor"
)

func (e *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum: %s", s)
	}
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient - Ambient noise threshold. One of 'level' or 'quality' must be provided.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient struct {
	// Alerting threshold as adjusted decibels.
	Level *int64 `json:"level,omitempty"`
	// Alerting threshold as a qualitative ambient noise level.
	Quality *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum `json:"quality,omitempty"`
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise - Noise threshold. 'ambient' must be provided.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise struct {
	// Ambient noise threshold. One of 'level' or 'quality' must be provided.
	Ambient CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient `json:"ambient"`
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum - Alerting threshold as a qualitative PM2.5 level.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum string

const (
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnumFair       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum = "fair"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnumGood       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum = "good"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnumInadequate CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum = "inadequate"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnumPoor       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum = "poor"
)

func (e *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum: %s", s)
	}
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25 - PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25 struct {
	// Alerting threshold as PM2.5 parts per million.
	Concentration *int64 `json:"concentration,omitempty"`
	// Alerting threshold as a qualitative PM2.5 level.
	Quality *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum `json:"quality,omitempty"`
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum - Alerting threshold as a qualitative temperature level.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum string

const (
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnumFair       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum = "fair"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnumGood       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum = "good"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnumInadequate CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum = "inadequate"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnumPoor       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum = "poor"
)

func (e *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum: %s", s)
	}
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature - Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature struct {
	// Alerting threshold in degrees Celsius.
	Celsius *float32 `json:"celsius,omitempty"`
	// Alerting threshold in degrees Fahrenheit.
	Fahrenheit *float32 `json:"fahrenheit,omitempty"`
	// Alerting threshold as a qualitative temperature level.
	Quality *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum `json:"quality,omitempty"`
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum - Alerting threshold as a qualitative TVOC level.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum string

const (
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnumFair       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum = "fair"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnumGood       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum = "good"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnumInadequate CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum = "inadequate"
	CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnumPoor       CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum = "poor"
)

func (e *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum: %s", s)
	}
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc - TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc struct {
	// Alerting threshold as TVOC micrograms per cubic meter.
	Concentration *int64 `json:"concentration,omitempty"`
	// Alerting threshold as a qualitative TVOC level.
	Quality *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum `json:"quality,omitempty"`
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater - Water detection threshold. 'present' must be provided and set to true.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater struct {
	// Alerting threshold for a water detection event. Must be set to true.
	Present bool `json:"present"`
}

// CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold - Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
type CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold struct {
	// Door open threshold. 'open' must be provided and set to true.
	Door *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor `json:"door,omitempty"`
	// Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
	Humidity *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity `json:"humidity,omitempty"`
	// Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
	IndoorAirQuality *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality `json:"indoorAirQuality,omitempty"`
	// Noise threshold. 'ambient' must be provided.
	Noise *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise `json:"noise,omitempty"`
	// PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
	Pm25 *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25 `json:"pm25,omitempty"`
	// Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
	Temperature *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature `json:"temperature,omitempty"`
	// TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
	Tvoc *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc `json:"tvoc,omitempty"`
	// Water detection threshold. 'present' must be provided and set to true.
	Water *CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater `json:"water,omitempty"`
}

type CreateNetworkSensorAlertsProfileRequestBodyConditions struct {
	// If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
	Direction *CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum `json:"direction,omitempty"`
	// Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
	Duration *CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum `json:"duration,omitempty"`
	// The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
	Metric string `json:"metric"`
	// Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
	Threshold CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold `json:"threshold"`
}

// CreateNetworkSensorAlertsProfileRequestBodyRecipients - List of recipients that will recieve the alert.
type CreateNetworkSensorAlertsProfileRequestBodyRecipients struct {
	// A list of emails that will receive information about the alert.
	Emails []string `json:"emails,omitempty"`
	// A list of webhook endpoint IDs that will receive information about the alert.
	HTTPServerIds []string `json:"httpServerIds,omitempty"`
	// A list of SMS numbers that will receive information about the alert.
	SmsNumbers []string `json:"smsNumbers,omitempty"`
}

// CreateNetworkSensorAlertsProfileRequestBodySchedule - The sensor schedule to use with the alert profile.
type CreateNetworkSensorAlertsProfileRequestBodySchedule struct {
	// ID of the sensor schedule to use with the alert profile. If not defined, the alert profile will be active at all times.
	ID *string `json:"id,omitempty"`
}

type CreateNetworkSensorAlertsProfileRequestBody struct {
	// List of conditions that will cause the profile to send an alert.
	Conditions []CreateNetworkSensorAlertsProfileRequestBodyConditions `json:"conditions"`
	// Name of the sensor alert profile.
	Name string `json:"name"`
	// List of recipients that will recieve the alert.
	Recipients *CreateNetworkSensorAlertsProfileRequestBodyRecipients `json:"recipients,omitempty"`
	// The sensor schedule to use with the alert profile.
	Schedule *CreateNetworkSensorAlertsProfileRequestBodySchedule `json:"schedule,omitempty"`
	// List of device serials assigned to this sensor alert profile.
	Serials []string `json:"serials,omitempty"`
}

type CreateNetworkSensorAlertsProfileRequest struct {
	PathParams CreateNetworkSensorAlertsProfilePathParams
	Request    CreateNetworkSensorAlertsProfileRequestBody `request:"mediaType=application/json"`
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum - If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum string

const (
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnumAbove CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum = "above"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnumBelow CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum = "below"
)

func (e *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "above":
		fallthrough
	case "below":
		*e = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum: %s", s)
	}
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum - Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum string

const (
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumZero                    CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "0"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumSixty                   CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "60"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumOneHundredAndTwenty     CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "120"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumOneHundredAndEighty     CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "180"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumTwoHundredAndForty      CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "240"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumThreeHundred            CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "300"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumSixHundred              CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "600"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumNineHundred             CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "900"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumOneThousandEightHundred CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "1800"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumThreeThousandSixHundred CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "3600"
)

func (e *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "60":
		fallthrough
	case "120":
		fallthrough
	case "180":
		fallthrough
	case "240":
		fallthrough
	case "300":
		fallthrough
	case "600":
		fallthrough
	case "900":
		fallthrough
	case "1800":
		fallthrough
	case "3600":
		*e = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum: %s", s)
	}
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor - Door open threshold. 'open' must be provided and set to true.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor struct {
	// Alerting threshold for a door open event. Must be set to true.
	Open bool `json:"open"`
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum - Alerting threshold as a qualitative humidity level.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum string

const (
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnumFair       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = "fair"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnumGood       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = "good"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnumInadequate CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = "inadequate"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnumPoor       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = "poor"
)

func (e *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum: %s", s)
	}
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity - Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity struct {
	// Alerting threshold as a qualitative humidity level.
	Quality *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum `json:"quality,omitempty"`
	// Alerting threshold in %RH.
	RelativePercentage *int64 `json:"relativePercentage,omitempty"`
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum - Alerting threshold as a qualitative indoor air quality level.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum string

const (
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnumFair       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = "fair"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnumGood       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = "good"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnumInadequate CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = "inadequate"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnumPoor       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = "poor"
)

func (e *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum: %s", s)
	}
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality - Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality struct {
	// Alerting threshold as a qualitative indoor air quality level.
	Quality *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum `json:"quality,omitempty"`
	// Alerting threshold as indoor air quality score.
	Score *int64 `json:"score,omitempty"`
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum - Alerting threshold as a qualitative ambient noise level.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum string

const (
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnumFair       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = "fair"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnumGood       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = "good"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnumInadequate CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = "inadequate"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnumPoor       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = "poor"
)

func (e *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum: %s", s)
	}
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient - Ambient noise threshold. One of 'level' or 'quality' must be provided.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient struct {
	// Alerting threshold as adjusted decibels.
	Level *int64 `json:"level,omitempty"`
	// Alerting threshold as a qualitative ambient noise level.
	Quality *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum `json:"quality,omitempty"`
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise - Noise threshold. 'ambient' must be provided.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise struct {
	// Ambient noise threshold. One of 'level' or 'quality' must be provided.
	Ambient CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient `json:"ambient"`
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum - Alerting threshold as a qualitative PM2.5 level.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum string

const (
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnumFair       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = "fair"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnumGood       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = "good"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnumInadequate CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = "inadequate"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnumPoor       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = "poor"
)

func (e *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum: %s", s)
	}
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 - PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 struct {
	// Alerting threshold as PM2.5 parts per million.
	Concentration *int64 `json:"concentration,omitempty"`
	// Alerting threshold as a qualitative PM2.5 level.
	Quality *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum `json:"quality,omitempty"`
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum - Alerting threshold as a qualitative temperature level.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum string

const (
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnumFair       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = "fair"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnumGood       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = "good"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnumInadequate CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = "inadequate"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnumPoor       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = "poor"
)

func (e *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum: %s", s)
	}
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature - Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature struct {
	// Alerting threshold in degrees Celsius.
	Celsius *float32 `json:"celsius,omitempty"`
	// Alerting threshold in degrees Fahrenheit.
	Fahrenheit *float32 `json:"fahrenheit,omitempty"`
	// Alerting threshold as a qualitative temperature level.
	Quality *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum `json:"quality,omitempty"`
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum - Alerting threshold as a qualitative TVOC level.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum string

const (
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnumFair       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = "fair"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnumGood       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = "good"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnumInadequate CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = "inadequate"
	CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnumPoor       CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = "poor"
)

func (e *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum: %s", s)
	}
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc - TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc struct {
	// Alerting threshold as TVOC micrograms per cubic meter.
	Concentration *int64 `json:"concentration,omitempty"`
	// Alerting threshold as a qualitative TVOC level.
	Quality *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum `json:"quality,omitempty"`
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater - Water detection threshold. 'present' must be provided and set to true.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater struct {
	// Alerting threshold for a water detection event. Must be set to true.
	Present bool `json:"present"`
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold - Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
type CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold struct {
	// Door open threshold. 'open' must be provided and set to true.
	Door *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor `json:"door,omitempty"`
	// Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
	Humidity *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity `json:"humidity,omitempty"`
	// Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
	IndoorAirQuality *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality `json:"indoorAirQuality,omitempty"`
	// Noise threshold. 'ambient' must be provided.
	Noise *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise `json:"noise,omitempty"`
	// PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
	Pm25 *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 `json:"pm25,omitempty"`
	// Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
	Temperature *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature `json:"temperature,omitempty"`
	// TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
	Tvoc *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc `json:"tvoc,omitempty"`
	// Water detection threshold. 'present' must be provided and set to true.
	Water *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater `json:"water,omitempty"`
}

type CreateNetworkSensorAlertsProfile200ApplicationJSONConditions struct {
	// If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
	Direction *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum `json:"direction,omitempty"`
	// Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
	Duration *CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum `json:"duration,omitempty"`
	// The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
	Metric string `json:"metric"`
	// Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
	Threshold CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold `json:"threshold"`
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients - List of recipients that will recieve the alert.
type CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients struct {
	// A list of emails that will receive information about the alert.
	Emails []string `json:"emails,omitempty"`
	// A list of webhook endpoint IDs that will receive information about the alert.
	HTTPServerIds []string `json:"httpServerIds,omitempty"`
	// A list of SMS numbers that will receive information about the alert.
	SmsNumbers []string `json:"smsNumbers,omitempty"`
}

// CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule - The sensor schedule to use with the alert profile.
type CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule struct {
	// ID of the sensor schedule to use with the alert profile. If not defined, the alert profile will be active at all times.
	ID *string `json:"id,omitempty"`
	// Name of the sensor schedule to use with the alert profile.
	Name *string `json:"name,omitempty"`
}

// CreateNetworkSensorAlertsProfile200ApplicationJSON - Successful operation
type CreateNetworkSensorAlertsProfile200ApplicationJSON struct {
	// List of conditions that will cause the profile to send an alert.
	Conditions []CreateNetworkSensorAlertsProfile200ApplicationJSONConditions `json:"conditions"`
	// Name of the sensor alert profile.
	Name *string `json:"name,omitempty"`
	// ID of the sensor alert profile.
	ProfileID *string `json:"profileId,omitempty"`
	// List of recipients that will recieve the alert.
	Recipients *CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients `json:"recipients,omitempty"`
	// The sensor schedule to use with the alert profile.
	Schedule *CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule `json:"schedule,omitempty"`
	// List of device serials assigned to this sensor alert profile.
	Serials []string `json:"serials,omitempty"`
}

type CreateNetworkSensorAlertsProfileResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	CreateNetworkSensorAlertsProfile200ApplicationJSONObject *CreateNetworkSensorAlertsProfile200ApplicationJSON
}
