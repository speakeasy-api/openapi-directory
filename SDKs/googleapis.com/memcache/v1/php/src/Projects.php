<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * `ApplyParameters` restarts the set of specified nodes in order to update them to the current set of parameters for the Memcached Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesApplyParametersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesApplyParametersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesApplyParametersResponse
     */
	public function memcacheProjectsLocationsInstancesApplyParameters(
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesApplyParametersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesApplyParametersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesApplyParametersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:applyParameters', \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesApplyParametersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "applyParametersRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesApplyParametersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesApplyParametersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Instance in a given location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesCreateResponse
     */
	public function memcacheProjectsLocationsInstancesCreate(
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/instances', \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Instances in a given location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesListResponse
     */
	public function memcacheProjectsLocationsInstancesList(
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/instances', \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInstancesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInstancesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing Instance in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesPatchResponse
     */
	public function memcacheProjectsLocationsInstancesPatch(
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instanceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reschedules upcoming maintenance event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesRescheduleMaintenanceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesRescheduleMaintenanceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesRescheduleMaintenanceResponse
     */
	public function memcacheProjectsLocationsInstancesRescheduleMaintenance(
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesRescheduleMaintenanceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesRescheduleMaintenanceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesRescheduleMaintenanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{instance}:rescheduleMaintenance', \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesRescheduleMaintenanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rescheduleMaintenanceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesRescheduleMaintenanceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesRescheduleMaintenanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the defined Memcached parameters for an existing instance. This method only stages the parameters, it must be followed by `ApplyParameters` to apply the parameters to nodes of the Memcached instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesUpdateParametersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesUpdateParametersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesUpdateParametersResponse
     */
	public function memcacheProjectsLocationsInstancesUpdateParameters(
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesUpdateParametersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesUpdateParametersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesUpdateParametersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:updateParameters', \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesUpdateParametersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateParametersRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesUpdateParametersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsInstancesUpdateParametersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsListResponse
     */
	public function memcacheProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsCancelResponse
     */
	public function memcacheProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsDeleteResponse
     */
	public function memcacheProjectsLocationsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsGetResponse
     */
	public function memcacheProjectsLocationsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/* /operations`. To override the binding, API services can add a binding such as `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsListResponse
     */
	public function memcacheProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MemcacheProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
}