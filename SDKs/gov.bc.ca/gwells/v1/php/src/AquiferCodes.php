<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AquiferCodes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * return a list of aquifer demand codes
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AquiferCodesDemandListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AquiferCodesDemandListResponse
     */
	public function aquiferCodesDemandList(
        \OpenAPI\OpenAPI\Models\Operations\AquiferCodesDemandListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AquiferCodesDemandListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/aquifer-codes/demand/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AquiferCodesDemandListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AquiferCodesDemandListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->aquiferCodesDemandList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AquiferCodesDemandList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * return a list of aquifer material codes
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AquiferCodesMaterialsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AquiferCodesMaterialsListResponse
     */
	public function aquiferCodesMaterialsList(
        \OpenAPI\OpenAPI\Models\Operations\AquiferCodesMaterialsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AquiferCodesMaterialsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/aquifer-codes/materials/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AquiferCodesMaterialsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AquiferCodesMaterialsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->aquiferCodesMaterialsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AquiferCodesMaterialsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * return a list of aquifer productivity codes
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AquiferCodesProductivityListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AquiferCodesProductivityListResponse
     */
	public function aquiferCodesProductivityList(
        \OpenAPI\OpenAPI\Models\Operations\AquiferCodesProductivityListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AquiferCodesProductivityListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/aquifer-codes/productivity/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AquiferCodesProductivityListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AquiferCodesProductivityListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->aquiferCodesProductivityList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AquiferCodesProductivityList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * return a list of quality concern codes
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AquiferCodesQualityConcernsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AquiferCodesQualityConcernsListResponse
     */
	public function aquiferCodesQualityConcernsList(
        \OpenAPI\OpenAPI\Models\Operations\AquiferCodesQualityConcernsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AquiferCodesQualityConcernsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/aquifer-codes/quality-concerns/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AquiferCodesQualityConcernsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AquiferCodesQualityConcernsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->aquiferCodesQualityConcernsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AquiferCodesQualityConcernsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * return a list of aquifer subtype codes
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AquiferCodesSubtypesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AquiferCodesSubtypesListResponse
     */
	public function aquiferCodesSubtypesList(
        \OpenAPI\OpenAPI\Models\Operations\AquiferCodesSubtypesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AquiferCodesSubtypesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/aquifer-codes/subtypes/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AquiferCodesSubtypesListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AquiferCodesSubtypesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->aquiferCodesSubtypesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AquiferCodesSubtypesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * return a list of aquifer vulnerability codes
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AquiferCodesVulnerabilityListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AquiferCodesVulnerabilityListResponse
     */
	public function aquiferCodesVulnerabilityList(
        \OpenAPI\OpenAPI\Models\Operations\AquiferCodesVulnerabilityListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AquiferCodesVulnerabilityListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/aquifer-codes/vulnerability/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AquiferCodesVulnerabilityListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AquiferCodesVulnerabilityListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->aquiferCodesVulnerabilityList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AquiferCodesVulnerabilityList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * return a list of water use codes
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AquiferCodesWaterUseListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AquiferCodesWaterUseListResponse
     */
	public function aquiferCodesWaterUseList(
        \OpenAPI\OpenAPI\Models\Operations\AquiferCodesWaterUseListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AquiferCodesWaterUseListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/aquifer-codes/water-use/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AquiferCodesWaterUseListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AquiferCodesWaterUseListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->aquiferCodesWaterUseList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AquiferCodesWaterUseList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}