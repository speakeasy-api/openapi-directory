/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CatalogQuery - A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.
 * 
 * Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
 * Any combination of the following types may be used together:
 * - [exact_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryExact)
 * - [prefix_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryPrefix)
 * - [range_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryRange)
 * - [sorted_attribute_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQuerySortedAttribute)
 * - [text_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryText)
 * All other query types cannot be combined with any others.
 * 
 * When a query filter is based on an attribute, the attribute must be searchable.
 * Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.
 * 
 * * Searchable attribute and objects queryable by searchable attributes **
 * - `name`:  `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, 'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`
 * - `description`: `CatalogItem`, `CatalogItemOptionValue`
 * - `abbreviation`: `CatalogItem`
 * - `upc`: `CatalogItemVariation`
 * - `sku`: `CatalogItemVariation`
 * - `caption`: `CatalogImage`
 * - `display_name`: `CatalogItemOption`
 * 
 * For example, to search for [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) objects by searchable attributes, you can use
 * the `"name"`, `"description"`, or `"abbreviation"` attribute in an applicable query filter.
 */
public class CatalogQuery {
    /**
     * The query filter to return the search result by exact match of the specified attribute name and value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exact_query")
    public CatalogQueryExact exactQuery;

    public CatalogQuery withExactQuery(CatalogQueryExact exactQuery) {
        this.exactQuery = exactQuery;
        return this;
    }
    
    /**
     * The query filter to return the item variations containing the specified item option value IDs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_variations_for_item_option_values_query")
    public CatalogQueryItemVariationsForItemOptionValues itemVariationsForItemOptionValuesQuery;

    public CatalogQuery withItemVariationsForItemOptionValuesQuery(CatalogQueryItemVariationsForItemOptionValues itemVariationsForItemOptionValuesQuery) {
        this.itemVariationsForItemOptionValuesQuery = itemVariationsForItemOptionValuesQuery;
        return this;
    }
    
    /**
     * The query filter to return the items containing the specified item option IDs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items_for_item_options_query")
    public CatalogQueryItemsForItemOptions itemsForItemOptionsQuery;

    public CatalogQuery withItemsForItemOptionsQuery(CatalogQueryItemsForItemOptions itemsForItemOptionsQuery) {
        this.itemsForItemOptionsQuery = itemsForItemOptionsQuery;
        return this;
    }
    
    /**
     * The query filter to return the items containing the specified modifier list IDs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items_for_modifier_list_query")
    public CatalogQueryItemsForModifierList itemsForModifierListQuery;

    public CatalogQuery withItemsForModifierListQuery(CatalogQueryItemsForModifierList itemsForModifierListQuery) {
        this.itemsForModifierListQuery = itemsForModifierListQuery;
        return this;
    }
    
    /**
     * The query filter to return the items containing the specified tax IDs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items_for_tax_query")
    public CatalogQueryItemsForTax itemsForTaxQuery;

    public CatalogQuery withItemsForTaxQuery(CatalogQueryItemsForTax itemsForTaxQuery) {
        this.itemsForTaxQuery = itemsForTaxQuery;
        return this;
    }
    
    /**
     * The query filter to return the search result whose named attribute values are prefixed by the specified attribute value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefix_query")
    public CatalogQueryPrefix prefixQuery;

    public CatalogQuery withPrefixQuery(CatalogQueryPrefix prefixQuery) {
        this.prefixQuery = prefixQuery;
        return this;
    }
    
    /**
     * The query filter to return the search result whose named attribute values fall between the specified range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("range_query")
    public CatalogQueryRange rangeQuery;

    public CatalogQuery withRangeQuery(CatalogQueryRange rangeQuery) {
        this.rangeQuery = rangeQuery;
        return this;
    }
    
    /**
     * The query filter to return the search result(s) by exact match of the specified `attribute_name` and any of
     * the `attribute_values`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("set_query")
    public CatalogQuerySet setQuery;

    public CatalogQuery withSetQuery(CatalogQuerySet setQuery) {
        this.setQuery = setQuery;
        return this;
    }
    
    /**
     * The query expression to specify the key to sort search results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sorted_attribute_query")
    public CatalogQuerySortedAttribute sortedAttributeQuery;

    public CatalogQuery withSortedAttributeQuery(CatalogQuerySortedAttribute sortedAttributeQuery) {
        this.sortedAttributeQuery = sortedAttributeQuery;
        return this;
    }
    
    /**
     * The query filter to return the search result whose searchable attribute values contain all of the specified keywords or tokens, independent of the token order or case.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text_query")
    public CatalogQueryText textQuery;

    public CatalogQuery withTextQuery(CatalogQueryText textQuery) {
        this.textQuery = textQuery;
        return this;
    }
    
    public CatalogQuery(){}
}
