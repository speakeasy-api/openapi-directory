/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { UserInfo } from "./userinfo";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Webhook information
 */
export class Webhook extends SpeakeasyBase {
  /**
   * Creation date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  @Type(() => UserInfo)
  createdBy?: UserInfo;

  /**
   * List of names of event types
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventTypeNames" })
  eventTypeNames: string[];

  /**
   * Expiration date / time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expireAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expireAt: Date;

  /**
   * Last HTTP status code when a webhook is disabled due to delivery failures
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failStatus" })
  failStatus?: number;

  /**
   * ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Is enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isEnabled" })
  isEnabled: boolean;

  /**
   * Name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Secret; used for event message signatures
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secret" })
  secret?: string;

  /**
   * Modification date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedBy" })
  @Type(() => UserInfo)
  updatedBy?: UserInfo;

  /**
   * URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}
