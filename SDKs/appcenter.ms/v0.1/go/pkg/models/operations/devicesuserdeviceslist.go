// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type DevicesUserDevicesListSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type DevicesUserDevicesList403ApplicationJSONCodeEnum string

const (
	DevicesUserDevicesList403ApplicationJSONCodeEnumBadRequest          DevicesUserDevicesList403ApplicationJSONCodeEnum = "BadRequest"
	DevicesUserDevicesList403ApplicationJSONCodeEnumConflict            DevicesUserDevicesList403ApplicationJSONCodeEnum = "Conflict"
	DevicesUserDevicesList403ApplicationJSONCodeEnumNotAcceptable       DevicesUserDevicesList403ApplicationJSONCodeEnum = "NotAcceptable"
	DevicesUserDevicesList403ApplicationJSONCodeEnumNotFound            DevicesUserDevicesList403ApplicationJSONCodeEnum = "NotFound"
	DevicesUserDevicesList403ApplicationJSONCodeEnumInternalServerError DevicesUserDevicesList403ApplicationJSONCodeEnum = "InternalServerError"
	DevicesUserDevicesList403ApplicationJSONCodeEnumUnauthorized        DevicesUserDevicesList403ApplicationJSONCodeEnum = "Unauthorized"
	DevicesUserDevicesList403ApplicationJSONCodeEnumTooManyRequests     DevicesUserDevicesList403ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e DevicesUserDevicesList403ApplicationJSONCodeEnum) ToPointer() *DevicesUserDevicesList403ApplicationJSONCodeEnum {
	return &e
}

func (e *DevicesUserDevicesList403ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DevicesUserDevicesList403ApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DevicesUserDevicesList403ApplicationJSONCodeEnum: %v", v)
	}
}

// DevicesUserDevicesList403ApplicationJSON - <b>forbidden</b>: The user is not allowed to view someone else's devices.
type DevicesUserDevicesList403ApplicationJSON struct {
	Code    DevicesUserDevicesList403ApplicationJSONCodeEnum `json:"code"`
	Message string                                           `json:"message"`
}

type DevicesUserDevicesList400ApplicationJSONCodeEnum string

const (
	DevicesUserDevicesList400ApplicationJSONCodeEnumBadRequest          DevicesUserDevicesList400ApplicationJSONCodeEnum = "BadRequest"
	DevicesUserDevicesList400ApplicationJSONCodeEnumConflict            DevicesUserDevicesList400ApplicationJSONCodeEnum = "Conflict"
	DevicesUserDevicesList400ApplicationJSONCodeEnumNotAcceptable       DevicesUserDevicesList400ApplicationJSONCodeEnum = "NotAcceptable"
	DevicesUserDevicesList400ApplicationJSONCodeEnumNotFound            DevicesUserDevicesList400ApplicationJSONCodeEnum = "NotFound"
	DevicesUserDevicesList400ApplicationJSONCodeEnumInternalServerError DevicesUserDevicesList400ApplicationJSONCodeEnum = "InternalServerError"
	DevicesUserDevicesList400ApplicationJSONCodeEnumUnauthorized        DevicesUserDevicesList400ApplicationJSONCodeEnum = "Unauthorized"
	DevicesUserDevicesList400ApplicationJSONCodeEnumTooManyRequests     DevicesUserDevicesList400ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e DevicesUserDevicesList400ApplicationJSONCodeEnum) ToPointer() *DevicesUserDevicesList400ApplicationJSONCodeEnum {
	return &e
}

func (e *DevicesUserDevicesList400ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DevicesUserDevicesList400ApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DevicesUserDevicesList400ApplicationJSONCodeEnum: %v", v)
	}
}

// DevicesUserDevicesList400ApplicationJSON - <b>bad_request</b>: Devices information can only be requested for iOS apps.
type DevicesUserDevicesList400ApplicationJSON struct {
	Code    DevicesUserDevicesList400ApplicationJSONCodeEnum `json:"code"`
	Message string                                           `json:"message"`
}

// DevicesUserDevicesList200ApplicationJSON - The information for a single iOS device
type DevicesUserDevicesList200ApplicationJSON struct {
	// The device description, in the format "iPhone 7 Plus (A1784)"
	DeviceName string `json:"device_name"`
	// A combination of the device model name and the owner name.
	FullDeviceName *string `json:"full_device_name,omitempty"`
	// The device's International Mobile Equipment Identity number. Always empty or undefined at present.
	Imei *string `json:"imei,omitempty"`
	// The model identifier of the device, in the format iDeviceM,N
	Model string `json:"model"`
	// The last known OS version running on the device
	OsBuild string `json:"os_build"`
	// The last known OS version running on the device
	OsVersion string `json:"os_version"`
	// The user ID of the device owner.
	OwnerID *string `json:"owner_id,omitempty"`
	// Timestamp of when the device was registered in ISO format.
	RegisteredAt *string `json:"registered_at,omitempty"`
	// The device's serial number. Always empty or undefined at present.
	Serial *string `json:"serial,omitempty"`
	// The provisioning status of the device.
	Status string `json:"status"`
	// The Unique Device IDentifier of the device
	Udid string `json:"udid"`
}

type DevicesUserDevicesListResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	DevicesUserDevicesList200ApplicationJSONObjects []DevicesUserDevicesList200ApplicationJSON
	// <b>bad_request</b>: Devices information can only be requested for iOS apps.
	//
	DevicesUserDevicesList400ApplicationJSONObject *DevicesUserDevicesList400ApplicationJSON
	// <b>forbidden</b>: The user is not allowed to view someone else's devices.
	//
	DevicesUserDevicesList403ApplicationJSONObject *DevicesUserDevicesList403ApplicationJSON
}
