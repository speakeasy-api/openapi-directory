<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PublicDelegatedPrefixes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Lists all PublicDelegatedPrefix resources owned by the specific project across all scopes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAggregatedListResponse
     */
	public function computePublicDelegatedPrefixesAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/publicDelegatedPrefixes', \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publicDelegatedPrefixAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PublicDelegatedPrefixAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Announces the specified PublicDelegatedPrefix in the given region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAnnounceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAnnounceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAnnounceResponse
     */
	public function computePublicDelegatedPrefixesAnnounce(
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAnnounceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAnnounceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAnnounceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}/announce', \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAnnounceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAnnounceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesAnnounceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified PublicDelegatedPrefix in the given region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesDeleteResponse
     */
	public function computePublicDelegatedPrefixesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}', \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified PublicDelegatedPrefix resource in the given region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesGetResponse
     */
	public function computePublicDelegatedPrefixesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}', \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publicDelegatedPrefix = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PublicDelegatedPrefix', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a PublicDelegatedPrefix in the specified project in the given region using the parameters that are included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesInsertResponse
     */
	public function computePublicDelegatedPrefixesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/publicDelegatedPrefixes', \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "publicDelegatedPrefix", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the PublicDelegatedPrefixes for a project in the given region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesListResponse
     */
	public function computePublicDelegatedPrefixesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/publicDelegatedPrefixes', \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publicDelegatedPrefixList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PublicDelegatedPrefixList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified PublicDelegatedPrefix resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesPatchResponse
     */
	public function computePublicDelegatedPrefixesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}', \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "publicDelegatedPrefix1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Withdraws the specified PublicDelegatedPrefix in the given region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesWithdrawRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesWithdrawSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesWithdrawResponse
     */
	public function computePublicDelegatedPrefixesWithdraw(
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesWithdrawRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesWithdrawSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesWithdrawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}/withdraw', \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesWithdrawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesWithdrawRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePublicDelegatedPrefixesWithdrawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}