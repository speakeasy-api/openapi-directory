"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import avsaddress as shared_avsaddress
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TestCardRangeExpiryMonthEnum(str, Enum):
    r"""Expiry month for the test card range.
    
    Allowed values:
    * JANUARY
    * FEBRUARY
    * MARCH
    * APRIL
    * MAY
    * JUNE
    * JULY
    * AUGUST
    * SEPTEMBER
    * OCTOBER
    * NOVEMBER
    * DECEMBER
    """
    APRIL = 'APRIL'
    AUGUST = 'AUGUST'
    DECEMBER = 'DECEMBER'
    FEBRUARY = 'FEBRUARY'
    JANUARY = 'JANUARY'
    JULY = 'JULY'
    JUNE = 'JUNE'
    MARCH = 'MARCH'
    MAY = 'MAY'
    NOVEMBER = 'NOVEMBER'
    OCTOBER = 'OCTOBER'
    SEPTEMBER = 'SEPTEMBER'

class TestCardRangeThreeDDirectoryServerResponseEnum(str, Enum):
    r"""3D Secure server response. It notifies whether the specified card holder is enrolled in a 3D Secure service. Possible values:
    
    * Y (Authentication available)
    * N (Card holder not enrolled/not participating)
    * U (Unable to authenticate)
    """
    N = 'N'
    U = 'U'
    Y = 'Y'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestCardRange:
    
    card_holder_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardHolderName') }})
    r"""The name of the card holder, as it appears on the card, for the test card range."""  
    expiry_month: TestCardRangeExpiryMonthEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiryMonth') }})
    r"""Expiry month for the test card range.
    
    Allowed values:
    * JANUARY
    * FEBRUARY
    * MARCH
    * APRIL
    * MAY
    * JUNE
    * JULY
    * AUGUST
    * SEPTEMBER
    * OCTOBER
    * NOVEMBER
    * DECEMBER
    """  
    expiry_year: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiryYear') }})
    r"""Expiry year for the test card range.
    
    Example: 2020
    """  
    range_end: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rangeEnd') }})
    r"""The last test card number in the test card range (inclusive):
    
    * Min 6, max 19 digits
    * BIN compliant
    Example: 5432 1234 1234 4321
    """  
    range_start: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rangeStart') }})
    r"""The first test card number in the test card range (inclusive):
    
    * Min 6, max 19 digits
    * BIN compliant
    Example: 5432 1234 1234 1234
    """  
    address: Optional[shared_avsaddress.AvsAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})  
    cvc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cvc'), 'exclude': lambda f: f is None }})
    r"""The test card range security code.
    
    Example: 123
    """  
    three_d_directory_server_response: Optional[TestCardRangeThreeDDirectoryServerResponseEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('threeDDirectoryServerResponse'), 'exclude': lambda f: f is None }})
    r"""3D Secure server response. It notifies whether the specified card holder is enrolled in a 3D Secure service. Possible values:
    
    * Y (Authentication available)
    * N (Card holder not enrolled/not participating)
    * U (Unable to authenticate)
    """  
    three_d_password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('threeDPassword'), 'exclude': lambda f: f is None }})
    r"""The password used for 3D Secure authentication."""  
    three_d_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('threeDUsername'), 'exclude': lambda f: f is None }})
    r"""The username used for 3D Secure authentication."""  
    