<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * HttpRequest - A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class HttpRequest
{
    /**
     * The number of HTTP response bytes inserted into cache. Set only when a cache fill was attempted.
     * 
     * @var ?string $cacheFillBytes
     */
	#[\JMS\Serializer\Annotation\SerializedName('cacheFillBytes')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $cacheFillBytes = null;
    
    /**
     * Whether or not an entity was served from cache (with or without validation).
     * 
     * @var ?bool $cacheHit
     */
	#[\JMS\Serializer\Annotation\SerializedName('cacheHit')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $cacheHit = null;
    
    /**
     * Whether or not a cache lookup was attempted.
     * 
     * @var ?bool $cacheLookup
     */
	#[\JMS\Serializer\Annotation\SerializedName('cacheLookup')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $cacheLookup = null;
    
    /**
     * Whether or not the response was validated with the origin server before being served from cache. This field is only meaningful if `cache_hit` is True.
     * 
     * @var ?bool $cacheValidatedWithOriginServer
     */
	#[\JMS\Serializer\Annotation\SerializedName('cacheValidatedWithOriginServer')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $cacheValidatedWithOriginServer = null;
    
    /**
     * The request processing latency on the server, from the time the request was received until the response was sent.
     * 
     * @var ?string $latency
     */
	#[\JMS\Serializer\Annotation\SerializedName('latency')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $latency = null;
    
    /**
     * Protocol used for the request. Examples: "HTTP/1.1", "HTTP/2", "websocket"
     * 
     * @var ?string $protocol
     */
	#[\JMS\Serializer\Annotation\SerializedName('protocol')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $protocol = null;
    
    /**
     * The referer URL of the request, as defined in [HTTP/1.1 Header Field Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
     * 
     * @var ?string $referer
     */
	#[\JMS\Serializer\Annotation\SerializedName('referer')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $referer = null;
    
    /**
     * The IP address (IPv4 or IPv6) of the client that issued the HTTP request. Examples: `"192.168.1.1"`, `"FE80::0202:B3FF:FE1E:8329"`.
     * 
     * @var ?string $remoteIp
     */
	#[\JMS\Serializer\Annotation\SerializedName('remoteIp')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $remoteIp = null;
    
    /**
     * The request method. Examples: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`.
     * 
     * @var ?string $requestMethod
     */
	#[\JMS\Serializer\Annotation\SerializedName('requestMethod')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $requestMethod = null;
    
    /**
     * The size of the HTTP request message in bytes, including the request headers and the request body.
     * 
     * @var ?string $requestSize
     */
	#[\JMS\Serializer\Annotation\SerializedName('requestSize')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $requestSize = null;
    
    /**
     * The scheme (http, https), the host name, the path, and the query portion of the URL that was requested. Example: `"http://example.com/some/info?color=red"`.
     * 
     * @var ?string $requestUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('requestUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $requestUrl = null;
    
    /**
     * The size of the HTTP response message sent back to the client, in bytes, including the response headers and the response body.
     * 
     * @var ?string $responseSize
     */
	#[\JMS\Serializer\Annotation\SerializedName('responseSize')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $responseSize = null;
    
    /**
     * The IP address (IPv4 or IPv6) of the origin server that the request was sent to.
     * 
     * @var ?string $serverIp
     */
	#[\JMS\Serializer\Annotation\SerializedName('serverIp')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $serverIp = null;
    
    /**
     * The response code indicating the status of the response. Examples: 200, 404.
     * 
     * @var ?int $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $status = null;
    
    /**
     * The user agent sent by the client. Example: `"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)"`.
     * 
     * @var ?string $userAgent
     */
	#[\JMS\Serializer\Annotation\SerializedName('userAgent')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userAgent = null;
    
	public function __construct()
	{
		$this->cacheFillBytes = null;
		$this->cacheHit = null;
		$this->cacheLookup = null;
		$this->cacheValidatedWithOriginServer = null;
		$this->latency = null;
		$this->protocol = null;
		$this->referer = null;
		$this->remoteIp = null;
		$this->requestMethod = null;
		$this->requestSize = null;
		$this->requestUrl = null;
		$this->responseSize = null;
		$this->serverIp = null;
		$this->status = null;
		$this->userAgent = null;
	}
}
