/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AuthorAssociationEnum } from "./authorassociationenum";
import { ReactionRollup } from "./reactionrollup";
import { SimpleUser } from "./simpleuser";
import { Expose, Transform, Type } from "class-transformer";

export class PullRequestReviewCommentLinksHtml extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href: string;
}

export class PullRequestReviewCommentLinksPullRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href: string;
}

export class PullRequestReviewCommentLinksSelf extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href: string;
}

export class PullRequestReviewCommentLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "html" })
  @Type(() => PullRequestReviewCommentLinksHtml)
  html: PullRequestReviewCommentLinksHtml;

  @SpeakeasyMetadata()
  @Expose({ name: "pull_request" })
  @Type(() => PullRequestReviewCommentLinksPullRequest)
  pullRequest: PullRequestReviewCommentLinksPullRequest;

  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  @Type(() => PullRequestReviewCommentLinksSelf)
  self: PullRequestReviewCommentLinksSelf;
}

/**
 * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
 */
export enum PullRequestReviewCommentSideEnum {
  Left = "LEFT",
  Right = "RIGHT",
}

/**
 * The side of the first line of the range for a multi-line comment.
 */
export enum PullRequestReviewCommentStartSideEnum {
  Left = "LEFT",
  Right = "RIGHT",
}

/**
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export class PullRequestReviewComment extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "_links" })
  @Type(() => PullRequestReviewCommentLinks)
  links: PullRequestReviewCommentLinks;

  /**
   * How the author is associated with the repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "author_association" })
  authorAssociation: AuthorAssociationEnum;

  /**
   * The text of the comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body: string;

  @SpeakeasyMetadata()
  @Expose({ name: "body_html" })
  bodyHtml?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "body_text" })
  bodyText?: string;

  /**
   * The SHA of the commit to which the comment applies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commit_id" })
  commitId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * The diff of the line that the comment refers to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "diff_hunk" })
  diffHunk: string;

  /**
   * HTML URL for the pull request review comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  /**
   * The ID of the pull request review comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * The comment ID to reply to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "in_reply_to_id" })
  inReplyToId?: number;

  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line" })
  line?: number;

  /**
   * The node ID of the pull request review comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  /**
   * The SHA of the original commit to which the comment applies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "original_commit_id" })
  originalCommitId: string;

  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "original_line" })
  originalLine?: number;

  /**
   * The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "original_position" })
  originalPosition: number;

  /**
   * The first line of the range for a multi-line comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "original_start_line" })
  originalStartLine?: number;

  /**
   * The relative path of the file to which the comment applies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path: string;

  /**
   * The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "position" })
  position: number;

  /**
   * The ID of the pull request review to which the comment belongs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pull_request_review_id" })
  pullRequestReviewId: number;

  /**
   * URL for the pull request that the review comment belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pull_request_url" })
  pullRequestUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "reactions" })
  @Type(() => ReactionRollup)
  reactions?: ReactionRollup;

  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "side" })
  side?: PullRequestReviewCommentSideEnum;

  /**
   * The first line of the range for a multi-line comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_line" })
  startLine?: number;

  /**
   * The side of the first line of the range for a multi-line comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_side" })
  startSide?: PullRequestReviewCommentStartSideEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  /**
   * URL for the pull request review comment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  /**
   * Simple User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => SimpleUser)
  user: SimpleUser;
}
