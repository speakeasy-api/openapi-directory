/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Address - Represents a postal address in a country. The address format is based 
 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
 * This format has dedicated fields for four address components: postal code, 
 * locality (city), administrative district (state, prefecture, or province), and 
 * sublocality (town or village). These components have dedicated fields in the 
 * `Address` object because software sometimes behaves differently based on them. 
 * For example, sales tax software may charge different amounts of sales tax 
 * based on the postal code, and some software is only available in 
 * certain states due to compliance reasons.
 * 
 * For the remaining address components, the `Address` type provides the 
 * `address_line_1` and `address_line_2` fields for free-form data entry. 
 * These fields are free-form because the remaining address components have 
 * too many variations around the world and typical software does not parse 
 * these components. These fields enable users to enter anything they want. 
 * 
 * Note that, in the current implementation, all other `Address` type fields are blank. 
 * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
 * `administrative_district_level_2`, `administrative_district_level_3`, 
 * `first_name`, `last_name`, and `organization`. 
 * 
 * When it comes to localization, the seller's language preferences 
 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
 * are ignored for addresses. Even though Square products (such as Square Point of Sale 
 * and the Seller Dashboard) mostly use a seller's language preference in 
 * communication, when it comes to addresses, they will use English for a US address, 
 * Japanese for an address in Japan, and so on.
 */
public class Address {
    /**
     * The first line of the address.
     * 
     * Fields that start with `address_line` provide the address's most specific
     * details, like street number, street name, and building name. They do *not*
     * provide less specific details like city, state/province, or country (these
     * details are provided in other fields).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address_line_1")
    public String addressLine1;
    public Address withAddressLine1(String addressLine1) {
        this.addressLine1 = addressLine1;
        return this;
    }
    
    /**
     * The second line of the address, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address_line_2")
    public String addressLine2;
    public Address withAddressLine2(String addressLine2) {
        this.addressLine2 = addressLine2;
        return this;
    }
    
    /**
     * The third line of the address, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address_line_3")
    public String addressLine3;
    public Address withAddressLine3(String addressLine3) {
        this.addressLine3 = addressLine3;
        return this;
    }
    
    /**
     * A civil entity within the address's country. In the US, this
     * is the state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("administrative_district_level_1")
    public String administrativeDistrictLevel1;
    public Address withAdministrativeDistrictLevel1(String administrativeDistrictLevel1) {
        this.administrativeDistrictLevel1 = administrativeDistrictLevel1;
        return this;
    }
    
    /**
     * A civil entity within the address's `administrative_district_level_1`.
     * In the US, this is the county.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("administrative_district_level_2")
    public String administrativeDistrictLevel2;
    public Address withAdministrativeDistrictLevel2(String administrativeDistrictLevel2) {
        this.administrativeDistrictLevel2 = administrativeDistrictLevel2;
        return this;
    }
    
    /**
     * A civil entity within the address's `administrative_district_level_2`,
     * if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("administrative_district_level_3")
    public String administrativeDistrictLevel3;
    public Address withAdministrativeDistrictLevel3(String administrativeDistrictLevel3) {
        this.administrativeDistrictLevel3 = administrativeDistrictLevel3;
        return this;
    }
    
    /**
     * The address's country, in ISO 3166-1-alpha-2 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;
    public Address withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * Optional first name when it's representing recipient.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    public String firstName;
    public Address withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * Optional last name when it's representing recipient.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    public String lastName;
    public Address withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * The city or town of the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locality")
    public String locality;
    public Address withLocality(String locality) {
        this.locality = locality;
        return this;
    }
    
    /**
     * Optional organization name when it's representing recipient.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization")
    public String organization;
    public Address withOrganization(String organization) {
        this.organization = organization;
        return this;
    }
    
    /**
     * The address's postal code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    public String postalCode;
    public Address withPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }
    
    /**
     * A civil region within the address's `locality`, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sublocality")
    public String sublocality;
    public Address withSublocality(String sublocality) {
        this.sublocality = sublocality;
        return this;
    }
    
    /**
     * A civil region within the address's `sublocality`, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sublocality_2")
    public String sublocality2;
    public Address withSublocality2(String sublocality2) {
        this.sublocality2 = sublocality2;
        return this;
    }
    
    /**
     * A civil region within the address's `sublocality_2`, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sublocality_3")
    public String sublocality3;
    public Address withSublocality3(String sublocality3) {
        this.sublocality3 = sublocality3;
        return this;
    }
    
}
