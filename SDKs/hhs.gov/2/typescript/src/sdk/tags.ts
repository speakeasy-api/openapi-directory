/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Information about tags
 */
export class Tags {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Tags
   *
   * @remarks
   * List of Tags
   */
  getResourcesTagsFormat(
    req: operations.GetResourcesTagsFormatRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesTagsFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesTagsFormatRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/resources/tags.{format}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesTagsFormatResponse =
        new operations.GetResourcesTagsFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tagMarshallerWrappeds = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tagMarshallerWrappeds = utils.objectToClass(
              httpRes?.data,
              shared.TagMarshallerWrapped,
              resFieldDepth
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get TagLanguages
   *
   * @remarks
   * List of Tag Languages
   */
  getResourcesTagsTagLanguagesFormat(
    req: operations.GetResourcesTagsTagLanguagesFormatRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesTagsTagLanguagesFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesTagsTagLanguagesFormatRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/resources/tags/tagLanguages.{format}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesTagsTagLanguagesFormatResponse =
        new operations.GetResourcesTagsTagLanguagesFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tagLanguageMarshallerWrappeds = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tagLanguageMarshallerWrappeds = utils.objectToClass(
              httpRes?.data,
              shared.TagLanguageMarshallerWrapped,
              resFieldDepth
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get MediaItems for Tag
   *
   * @remarks
   * List of Types
   */
  getResourcesTagsTagTypesFormat(
    req: operations.GetResourcesTagsTagTypesFormatRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesTagsTagTypesFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesTagsTagTypesFormatRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/resources/tags/tagTypes.{format}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesTagsTagTypesFormatResponse =
        new operations.GetResourcesTagsTagTypesFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tagTypeMarshallerWrappeds = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tagTypeMarshallerWrappeds = utils.objectToClass(
              httpRes?.data,
              shared.TagTypeMarshallerWrapped,
              resFieldDepth
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get Tag by ID
   *
   * @remarks
   * Information about a specific tag
   */
  getResourcesTagsIdFormat(
    req: operations.GetResourcesTagsIdFormatRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesTagsIdFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesTagsIdFormatRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/resources/tags/{id}.{format}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesTagsIdFormatResponse =
        new operations.GetResourcesTagsIdFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tagMarshallerWrappeds = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tagMarshallerWrappeds = utils.objectToClass(
              httpRes?.data,
              shared.TagMarshallerWrapped,
              resFieldDepth
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get MediaItems for Tag
   *
   * @remarks
   * MediaItem
   */
  getResourcesTagsIdMediaFormat(
    req: operations.GetResourcesTagsIdMediaFormatRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesTagsIdMediaFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesTagsIdMediaFormatRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/resources/tags/{id}/media.{format}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesTagsIdMediaFormatResponse =
        new operations.GetResourcesTagsIdMediaFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mediaItemWrappeds = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.mediaItemWrappeds = utils.objectToClass(
              httpRes?.data,
              shared.MediaItemWrapped,
              resFieldDepth
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get related Tags by ID
   *
   * @remarks
   * Information about related tags to a specific tag
   */
  getResourcesTagsIdRelatedFormat(
    req: operations.GetResourcesTagsIdRelatedFormatRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesTagsIdRelatedFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesTagsIdRelatedFormatRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/resources/tags/{id}/related.{format}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesTagsIdRelatedFormatResponse =
        new operations.GetResourcesTagsIdRelatedFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tagMarshallerWrappeds = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tagMarshallerWrappeds = utils.objectToClass(
              httpRes?.data,
              shared.TagMarshallerWrapped,
              resFieldDepth
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get MediaItems for Tag
   *
   * @remarks
   * MediaItem
   */
  getResourcesTagsIdSyndicateFormat(
    req: operations.GetResourcesTagsIdSyndicateFormatRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesTagsIdSyndicateFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesTagsIdSyndicateFormatRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/resources/tags/{id}/syndicate.{format}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesTagsIdSyndicateFormatResponse =
        new operations.GetResourcesTagsIdSyndicateFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getResourcesTagsIdSyndicateFormat200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
