<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Audit 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * 
     * This endpoint contains Final Audit Reports approved by the Commission since inception.
     * The search can be based on information about the audited committee (Name, FEC ID Number, Type, 
     * Election Cycle) or the issues covered in the report.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAuditCaseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAuditCaseResponse
     */
	public function getAuditCase(
        \OpenAPI\OpenAPI\Models\Operations\GetAuditCaseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAuditCaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/audit-case/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAuditCaseRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAuditCaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->auditCasePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AuditCasePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * This lists the options for the categories and subcategories available in the /audit-search/ endpoint.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAuditCategoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAuditCategoryResponse
     */
	public function getAuditCategory(
        \OpenAPI\OpenAPI\Models\Operations\GetAuditCategoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAuditCategoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/audit-category/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAuditCategoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAuditCategoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->auditCategoryPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AuditCategoryPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * This lists the options for the primary categories available in the /audit-search/ endpoint.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAuditPrimaryCategoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAuditPrimaryCategoryResponse
     */
	public function getAuditPrimaryCategory(
        \OpenAPI\OpenAPI\Models\Operations\GetAuditPrimaryCategoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAuditPrimaryCategoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/audit-primary-category/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAuditPrimaryCategoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAuditPrimaryCategoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->auditPrimaryCategoryPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AuditPrimaryCategoryPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Search for candidates or committees by name. If you're looking for information on a
     * particular person or group, using a name to find the `candidate_id` or `committee_id` on
     * this endpoint can be a helpful first step.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamesAuditCandidatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamesAuditCandidatesResponse
     */
	public function getNamesAuditCandidates(
        \OpenAPI\OpenAPI\Models\Operations\GetNamesAuditCandidatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamesAuditCandidatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/names/audit_candidates/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNamesAuditCandidatesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamesAuditCandidatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->auditCandidateSearchList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AuditCandidateSearchList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Search for candidates or committees by name. If you're looking for information on a
     * particular person or group, using a name to find the `candidate_id` or `committee_id` on
     * this endpoint can be a helpful first step.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamesAuditCommitteesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamesAuditCommitteesResponse
     */
	public function getNamesAuditCommittees(
        \OpenAPI\OpenAPI\Models\Operations\GetNamesAuditCommitteesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamesAuditCommitteesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/names/audit_committees/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNamesAuditCommitteesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamesAuditCommitteesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->auditCommitteeSearchList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AuditCommitteeSearchList', 'json');
            }
        }

        return $response;
    }
}