"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class WebinarPanelistsSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class WebinarPanelistsRequest:
    
    webinar_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'webinarId', 'style': 'simple', 'explode': False }})
    r"""The webinar ID in \\"**long**\\" format(represented as int64 data type in JSON)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarPanelistsPanelistListPanelists:
    r"""Panelist base object."""
    
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Panelist's email."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Panelist's ID."""  
    join_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('join_url'), 'exclude': lambda f: f is None }})
    r"""Join URL."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Panelist's full name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarPanelistsPanelistList:
    r"""List of panelists."""
    
    panelists: Optional[list[WebinarPanelistsPanelistListPanelists]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('panelists'), 'exclude': lambda f: f is None }})
    r"""List of panelist objects."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""Total records."""  
    

@dataclasses.dataclass
class WebinarPanelistsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    panelist_list: Optional[WebinarPanelistsPanelistList] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Webinar plan subscription missing. Enable webinar for this user once the subscription is added.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    