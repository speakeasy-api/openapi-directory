/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 *  The location where Audit Manager saves assessment reports for the given assessment.
 */
export class CreateAssessmentRequestBodyAssessmentReportsDestination extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "destination" })
  destination?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "destinationType" })
  destinationType?: shared.AssessmentReportDestinationTypeEnum;
}

/**
 *  The wrapper that contains the Amazon Web Services accounts and services that are in scope for the assessment.
 */
export class CreateAssessmentRequestBodyScope extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.AWSAccount })
  @Expose({ name: "awsAccounts" })
  @Type(() => shared.AWSAccount)
  awsAccounts?: shared.AWSAccount[];

  @SpeakeasyMetadata({ elemType: shared.AWSService })
  @Expose({ name: "awsServices" })
  @Type(() => shared.AWSService)
  awsServices?: shared.AWSService[];
}

export class CreateAssessmentRequestBody extends SpeakeasyBase {
  /**
   *  The location where Audit Manager saves assessment reports for the given assessment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assessmentReportsDestination" })
  @Type(() => CreateAssessmentRequestBodyAssessmentReportsDestination)
  assessmentReportsDestination: CreateAssessmentRequestBodyAssessmentReportsDestination;

  /**
   *  The optional description of the assessment to be created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   *  The identifier for the framework that the assessment will be created from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "frameworkId" })
  frameworkId: string;

  /**
   *  The name of the assessment to be created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   *  The list of roles for the assessment.
   */
  @SpeakeasyMetadata({ elemType: shared.Role })
  @Expose({ name: "roles" })
  @Type(() => shared.Role)
  roles: shared.Role[];

  /**
   *  The wrapper that contains the Amazon Web Services accounts and services that are in scope for the assessment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scope" })
  @Type(() => CreateAssessmentRequestBodyScope)
  scope: CreateAssessmentRequestBodyScope;

  /**
   *  The tags that are associated with the assessment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateAssessmentRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateAssessmentRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateAssessmentResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createAssessmentResponse?: shared.CreateAssessmentResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
