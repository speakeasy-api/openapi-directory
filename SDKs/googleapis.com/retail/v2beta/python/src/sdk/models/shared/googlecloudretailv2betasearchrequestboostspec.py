"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudretailv2betasearchrequestboostspecconditionboostspec as shared_googlecloudretailv2betasearchrequestboostspecconditionboostspec
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudRetailV2betaSearchRequestBoostSpec:
    r"""Boost specification to boost certain items."""
    
    condition_boost_specs: Optional[list[shared_googlecloudretailv2betasearchrequestboostspecconditionboostspec.GoogleCloudRetailV2betaSearchRequestBoostSpecConditionBoostSpec]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conditionBoostSpecs'), 'exclude': lambda f: f is None }})
    r"""Condition boost specifications. If a product matches multiple conditions in the specifictions, boost scores from these specifications are all applied and combined in a non-linear way. Maximum number of specifications is 20."""  
    skip_boost_spec_validation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skipBoostSpecValidation'), 'exclude': lambda f: f is None }})
    r"""Whether to skip boostspec validation. If this field is set to true, invalid BoostSpec.condition_boost_specs will be ignored and valid BoostSpec.condition_boost_specs will still be applied."""  
    