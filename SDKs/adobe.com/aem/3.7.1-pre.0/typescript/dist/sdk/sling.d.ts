import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig } from "axios";
export declare class Sling {
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    _language: string;
    _sdkVersion: string;
    _genVersion: string;
    constructor(defaultClient: AxiosInstance, securityClient: AxiosInstance, serverURL: string, language: string, sdkVersion: string, genVersion: string);
    deleteAgent(req: operations.DeleteAgentRequest, config?: AxiosRequestConfig): Promise<operations.DeleteAgentResponse>;
    deleteNode(req: operations.DeleteNodeRequest, config?: AxiosRequestConfig): Promise<operations.DeleteNodeResponse>;
    getAgent(req: operations.GetAgentRequest, config?: AxiosRequestConfig): Promise<operations.GetAgentResponse>;
    getAgents(req: operations.GetAgentsRequest, config?: AxiosRequestConfig): Promise<operations.GetAgentsResponse>;
    getAuthorizableKeystore(req: operations.GetAuthorizableKeystoreRequest, config?: AxiosRequestConfig): Promise<operations.GetAuthorizableKeystoreResponse>;
    getKeystore(req: operations.GetKeystoreRequest, config?: AxiosRequestConfig): Promise<operations.GetKeystoreResponse>;
    getNode(req: operations.GetNodeRequest, config?: AxiosRequestConfig): Promise<operations.GetNodeResponse>;
    getPackage(req: operations.GetPackageRequest, config?: AxiosRequestConfig): Promise<operations.GetPackageResponse>;
    getPackageFilter(req: operations.GetPackageFilterRequest, config?: AxiosRequestConfig): Promise<operations.GetPackageFilterResponse>;
    getQuery(req: operations.GetQueryRequest, config?: AxiosRequestConfig): Promise<operations.GetQueryResponse>;
    getTruststore(config?: AxiosRequestConfig): Promise<operations.GetTruststoreResponse>;
    getTruststoreInfo(config?: AxiosRequestConfig): Promise<operations.GetTruststoreInfoResponse>;
    postAgent(req: operations.PostAgentRequest, config?: AxiosRequestConfig): Promise<operations.PostAgentResponse>;
    postAuthorizableKeystore(req: operations.PostAuthorizableKeystoreRequest, config?: AxiosRequestConfig): Promise<operations.PostAuthorizableKeystoreResponse>;
    postAuthorizables(req: operations.PostAuthorizablesRequest, config?: AxiosRequestConfig): Promise<operations.PostAuthorizablesResponse>;
    postConfigAdobeGraniteSamlAuthenticationHandler(req: operations.PostConfigAdobeGraniteSamlAuthenticationHandlerRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigAdobeGraniteSamlAuthenticationHandlerResponse>;
    postConfigApacheFelixJettyBasedHttpService(req: operations.PostConfigApacheFelixJettyBasedHttpServiceRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigApacheFelixJettyBasedHttpServiceResponse>;
    postConfigApacheHttpComponentsProxyConfiguration(req: operations.PostConfigApacheHttpComponentsProxyConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigApacheHttpComponentsProxyConfigurationResponse>;
    postConfigApacheSlingDavExServlet(req: operations.PostConfigApacheSlingDavExServletRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigApacheSlingDavExServletResponse>;
    postConfigApacheSlingGetServlet(req: operations.PostConfigApacheSlingGetServletRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigApacheSlingGetServletResponse>;
    postConfigApacheSlingReferrerFilter(req: operations.PostConfigApacheSlingReferrerFilterRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigApacheSlingReferrerFilterResponse>;
    postConfigProperty(req: operations.PostConfigPropertyRequest, config?: AxiosRequestConfig): Promise<operations.PostConfigPropertyResponse>;
    postNode(req: operations.PostNodeRequest, config?: AxiosRequestConfig): Promise<operations.PostNodeResponse>;
    postNodeRw(req: operations.PostNodeRwRequest, config?: AxiosRequestConfig): Promise<operations.PostNodeRwResponse>;
    postPath(req: operations.PostPathRequest, config?: AxiosRequestConfig): Promise<operations.PostPathResponse>;
    postQuery(req: operations.PostQueryRequest, config?: AxiosRequestConfig): Promise<operations.PostQueryResponse>;
    postTreeActivation(req: operations.PostTreeActivationRequest, config?: AxiosRequestConfig): Promise<operations.PostTreeActivationResponse>;
    postTruststore(req: operations.PostTruststoreRequest, config?: AxiosRequestConfig): Promise<operations.PostTruststoreResponse>;
    postTruststorePkcs12(req: operations.PostTruststorePkcs12RequestBody, config?: AxiosRequestConfig): Promise<operations.PostTruststorePkcs12Response>;
}
