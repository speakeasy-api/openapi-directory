/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

export enum GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequestConstraintsSupportedCompressionsEnum {
  CompressionTypeUnspecified = "COMPRESSION_TYPE_UNSPECIFIED",
  Raw = "RAW",
  Rice = "RICE",
}

/**
 * The constraints for this update.
 */
export class GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequestConstraints extends SpeakeasyBase {
  /**
   * A client's physical location, expressed as a ISO 31166-1 alpha-2 region code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deviceLocation" })
  deviceLocation?: string;

  /**
   * Requests the lists for a specific language. Expects ISO 639 alpha-2 format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language?: string;

  /**
   * Sets the maximum number of entries that the client is willing to have in the local database for the specified list. This should be a power of 2 between 2**10 and 2**20. If zero, no database size limit is set.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxDatabaseEntries" })
  maxDatabaseEntries?: number;

  /**
   * The maximum size in number of entries. The update will not contain more entries than this value. This should be a power of 2 between 2**10 and 2**20. If zero, no update size limit is set.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxUpdateEntries" })
  maxUpdateEntries?: number;

  /**
   * Requests the list for a specific geographic location. If not set the server may pick that value based on the user's IP address. Expects ISO 3166-1 alpha-2 format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "region" })
  region?: string;

  /**
   * The compression types supported by the client.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supportedCompressions" })
  supportedCompressions?: GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequestConstraintsSupportedCompressionsEnum[];
}
