"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsec2instanceviolation as shared_awsec2instanceviolation
from ..shared import awsec2networkinterfaceviolation as shared_awsec2networkinterfaceviolation
from ..shared import awsvpcsecuritygroupviolation as shared_awsvpcsecuritygroupviolation
from ..shared import dnsduplicaterulegroupviolation as shared_dnsduplicaterulegroupviolation
from ..shared import dnsrulegrouplimitexceededviolation as shared_dnsrulegrouplimitexceededviolation
from ..shared import dnsrulegrouppriorityconflictviolation as shared_dnsrulegrouppriorityconflictviolation
from ..shared import firewallsubnetisoutofscopeviolation as shared_firewallsubnetisoutofscopeviolation
from ..shared import firewallsubnetmissingvpcendpointviolation as shared_firewallsubnetmissingvpcendpointviolation
from ..shared import networkfirewallblackholeroutedetectedviolation as shared_networkfirewallblackholeroutedetectedviolation
from ..shared import networkfirewallinternettrafficnotinspectedviolation as shared_networkfirewallinternettrafficnotinspectedviolation
from ..shared import networkfirewallinvalidrouteconfigurationviolation as shared_networkfirewallinvalidrouteconfigurationviolation
from ..shared import networkfirewallmissingexpectedroutesviolation as shared_networkfirewallmissingexpectedroutesviolation
from ..shared import networkfirewallmissingexpectedrtviolation as shared_networkfirewallmissingexpectedrtviolation
from ..shared import networkfirewallmissingfirewallviolation as shared_networkfirewallmissingfirewallviolation
from ..shared import networkfirewallmissingsubnetviolation as shared_networkfirewallmissingsubnetviolation
from ..shared import networkfirewallpolicymodifiedviolation as shared_networkfirewallpolicymodifiedviolation
from ..shared import networkfirewallunexpectedfirewallroutesviolation as shared_networkfirewallunexpectedfirewallroutesviolation
from ..shared import networkfirewallunexpectedgatewayroutesviolation as shared_networkfirewallunexpectedgatewayroutesviolation
from ..shared import possibleremediationactions as shared_possibleremediationactions
from ..shared import routehasoutofscopeendpointviolation as shared_routehasoutofscopeendpointviolation
from ..shared import thirdpartyfirewallmissingexpectedroutetableviolation as shared_thirdpartyfirewallmissingexpectedroutetableviolation
from ..shared import thirdpartyfirewallmissingfirewallviolation as shared_thirdpartyfirewallmissingfirewallviolation
from ..shared import thirdpartyfirewallmissingsubnetviolation as shared_thirdpartyfirewallmissingsubnetviolation
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResourceViolation:
    r"""Violation detail based on resource type."""
    
    aws_ec2_instance_violation: Optional[shared_awsec2instanceviolation.AwsEc2InstanceViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwsEc2InstanceViolation'), 'exclude': lambda f: f is None }})  
    aws_ec2_network_interface_violation: Optional[shared_awsec2networkinterfaceviolation.AwsEc2NetworkInterfaceViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwsEc2NetworkInterfaceViolation'), 'exclude': lambda f: f is None }})  
    aws_vpc_security_group_violation: Optional[shared_awsvpcsecuritygroupviolation.AwsVPCSecurityGroupViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwsVPCSecurityGroupViolation'), 'exclude': lambda f: f is None }})  
    dns_duplicate_rule_group_violation: Optional[shared_dnsduplicaterulegroupviolation.DNSDuplicateRuleGroupViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DnsDuplicateRuleGroupViolation'), 'exclude': lambda f: f is None }})  
    dns_rule_group_limit_exceeded_violation: Optional[shared_dnsrulegrouplimitexceededviolation.DNSRuleGroupLimitExceededViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DnsRuleGroupLimitExceededViolation'), 'exclude': lambda f: f is None }})  
    dns_rule_group_priority_conflict_violation: Optional[shared_dnsrulegrouppriorityconflictviolation.DNSRuleGroupPriorityConflictViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DnsRuleGroupPriorityConflictViolation'), 'exclude': lambda f: f is None }})  
    firewall_subnet_is_out_of_scope_violation: Optional[shared_firewallsubnetisoutofscopeviolation.FirewallSubnetIsOutOfScopeViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirewallSubnetIsOutOfScopeViolation'), 'exclude': lambda f: f is None }})  
    firewall_subnet_missing_vpc_endpoint_violation: Optional[shared_firewallsubnetmissingvpcendpointviolation.FirewallSubnetMissingVPCEndpointViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirewallSubnetMissingVPCEndpointViolation'), 'exclude': lambda f: f is None }})  
    network_firewall_black_hole_route_detected_violation: Optional[shared_networkfirewallblackholeroutedetectedviolation.NetworkFirewallBlackHoleRouteDetectedViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkFirewallBlackHoleRouteDetectedViolation'), 'exclude': lambda f: f is None }})
    r"""Violation detail for an internet gateway route with an inactive state in the customer subnet route table or Network Firewall subnet route table."""  
    network_firewall_internet_traffic_not_inspected_violation: Optional[shared_networkfirewallinternettrafficnotinspectedviolation.NetworkFirewallInternetTrafficNotInspectedViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkFirewallInternetTrafficNotInspectedViolation'), 'exclude': lambda f: f is None }})  
    network_firewall_invalid_route_configuration_violation: Optional[shared_networkfirewallinvalidrouteconfigurationviolation.NetworkFirewallInvalidRouteConfigurationViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkFirewallInvalidRouteConfigurationViolation'), 'exclude': lambda f: f is None }})  
    network_firewall_missing_expected_routes_violation: Optional[shared_networkfirewallmissingexpectedroutesviolation.NetworkFirewallMissingExpectedRoutesViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkFirewallMissingExpectedRoutesViolation'), 'exclude': lambda f: f is None }})  
    network_firewall_missing_expected_rt_violation: Optional[shared_networkfirewallmissingexpectedrtviolation.NetworkFirewallMissingExpectedRTViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkFirewallMissingExpectedRTViolation'), 'exclude': lambda f: f is None }})  
    network_firewall_missing_firewall_violation: Optional[shared_networkfirewallmissingfirewallviolation.NetworkFirewallMissingFirewallViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkFirewallMissingFirewallViolation'), 'exclude': lambda f: f is None }})  
    network_firewall_missing_subnet_violation: Optional[shared_networkfirewallmissingsubnetviolation.NetworkFirewallMissingSubnetViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkFirewallMissingSubnetViolation'), 'exclude': lambda f: f is None }})  
    network_firewall_policy_modified_violation: Optional[shared_networkfirewallpolicymodifiedviolation.NetworkFirewallPolicyModifiedViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkFirewallPolicyModifiedViolation'), 'exclude': lambda f: f is None }})  
    network_firewall_unexpected_firewall_routes_violation: Optional[shared_networkfirewallunexpectedfirewallroutesviolation.NetworkFirewallUnexpectedFirewallRoutesViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkFirewallUnexpectedFirewallRoutesViolation'), 'exclude': lambda f: f is None }})  
    network_firewall_unexpected_gateway_routes_violation: Optional[shared_networkfirewallunexpectedgatewayroutesviolation.NetworkFirewallUnexpectedGatewayRoutesViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkFirewallUnexpectedGatewayRoutesViolation'), 'exclude': lambda f: f is None }})  
    possible_remediation_actions: Optional[shared_possibleremediationactions.PossibleRemediationActions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PossibleRemediationActions'), 'exclude': lambda f: f is None }})  
    route_has_out_of_scope_endpoint_violation: Optional[shared_routehasoutofscopeendpointviolation.RouteHasOutOfScopeEndpointViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RouteHasOutOfScopeEndpointViolation'), 'exclude': lambda f: f is None }})  
    third_party_firewall_missing_expected_route_table_violation: Optional[shared_thirdpartyfirewallmissingexpectedroutetableviolation.ThirdPartyFirewallMissingExpectedRouteTableViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThirdPartyFirewallMissingExpectedRouteTableViolation'), 'exclude': lambda f: f is None }})  
    third_party_firewall_missing_firewall_violation: Optional[shared_thirdpartyfirewallmissingfirewallviolation.ThirdPartyFirewallMissingFirewallViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThirdPartyFirewallMissingFirewallViolation'), 'exclude': lambda f: f is None }})  
    third_party_firewall_missing_subnet_violation: Optional[shared_thirdpartyfirewallmissingsubnetviolation.ThirdPartyFirewallMissingSubnetViolation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThirdPartyFirewallMissingSubnetViolation'), 'exclude': lambda f: f is None }})  
    