"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Groups:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_group_members(self, request: operations.AddGroupMembersRequest) -> operations.AddGroupMembersResponse:
        r"""Add group members"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddGroupMembersRequest, base_url, '/groups/{id}/members.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddGroupMembersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AddGroupMembers200ApplicationJSON])
                res.add_group_members_200_application_json_object = out

        return res

    def create_group(self, request: operations.CreateGroupRequestBody) -> operations.CreateGroupResponse:
        r"""Create a group"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/groups.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateGroup200ApplicationJSON])
                res.create_group_200_application_json_object = out

        return res

    def delete_group(self, request: operations.DeleteGroupRequest) -> operations.DeleteGroupResponse:
        r"""Delete a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteGroupRequest, base_url, '/admin/groups/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteGroup200ApplicationJSON])
                res.delete_group_200_application_json_object = out

        return res

    def get_group(self, request: operations.GetGroupRequest) -> operations.GetGroupResponse:
        r"""Get a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGroupRequest, base_url, '/groups/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetGroup200ApplicationJSON])
                res.get_group_200_application_json_object = out

        return res

    def list_group_members(self, request: operations.ListGroupMembersRequest) -> operations.ListGroupMembersResponse:
        r"""List group members"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListGroupMembersRequest, base_url, '/groups/{id}/members.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListGroupMembersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListGroupMembers200ApplicationJSON])
                res.list_group_members_200_application_json_object = out

        return res

    def list_groups(self) -> operations.ListGroupsResponse:
        r"""List groups"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/groups.json'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListGroups200ApplicationJSON])
                res.list_groups_200_application_json_object = out

        return res

    def remove_group_members(self, request: operations.RemoveGroupMembersRequest) -> operations.RemoveGroupMembersResponse:
        r"""Remove group members"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveGroupMembersRequest, base_url, '/groups/{id}/members.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveGroupMembersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RemoveGroupMembers200ApplicationJSON])
                res.remove_group_members_200_application_json_object = out

        return res

    def update_group(self, request: operations.UpdateGroupRequest) -> operations.UpdateGroupResponse:
        r"""Update a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateGroupRequest, base_url, '/groups/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateGroup200ApplicationJSON])
                res.update_group_200_application_json_object = out

        return res

    