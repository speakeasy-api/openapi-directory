/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * An object that specifies the authorization service for a domain.
 */
export class UpdateDomainConfigurationRequestBodyAuthorizerConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "allowAuthorizerOverride" })
  allowAuthorizerOverride?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "defaultAuthorizerName" })
  defaultAuthorizerName?: string;
}

/**
 * The status to which the domain configuration should be updated.
 */
export enum UpdateDomainConfigurationRequestBodyDomainConfigurationStatusEnum {
  Enabled = "ENABLED",
  Disabled = "DISABLED",
}

export class UpdateDomainConfigurationRequestBody extends SpeakeasyBase {
  /**
   * An object that specifies the authorization service for a domain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizerConfig" })
  @Type(() => UpdateDomainConfigurationRequestBodyAuthorizerConfig)
  authorizerConfig?: UpdateDomainConfigurationRequestBodyAuthorizerConfig;

  /**
   * The status to which the domain configuration should be updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domainConfigurationStatus" })
  domainConfigurationStatus?: UpdateDomainConfigurationRequestBodyDomainConfigurationStatusEnum;

  /**
   * Removes the authorization configuration from a domain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "removeAuthorizerConfig" })
  removeAuthorizerConfig?: boolean;
}

export class UpdateDomainConfigurationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateDomainConfigurationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The name of the domain configuration to be updated.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=domainConfigurationName",
  })
  domainConfigurationName: string;
}

export class UpdateDomainConfigurationResponse extends SpeakeasyBase {
  /**
   * CertificateValidationException
   */
  @SpeakeasyMetadata()
  certificateValidationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * UnauthorizedException
   */
  @SpeakeasyMetadata()
  unauthorizedException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateDomainConfigurationResponse?: shared.UpdateDomainConfigurationResponse;
}
