// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

type GameEsrbRatingNameEnum string

const (
	GameEsrbRatingNameEnumEveryone       GameEsrbRatingNameEnum = "Everyone"
	GameEsrbRatingNameEnumEveryone10Plus GameEsrbRatingNameEnum = "Everyone 10+"
	GameEsrbRatingNameEnumTeen           GameEsrbRatingNameEnum = "Teen"
	GameEsrbRatingNameEnumMature         GameEsrbRatingNameEnum = "Mature"
	GameEsrbRatingNameEnumAdultsOnly     GameEsrbRatingNameEnum = "Adults Only"
	GameEsrbRatingNameEnumRatingPending  GameEsrbRatingNameEnum = "Rating Pending"
)

func (e *GameEsrbRatingNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Everyone":
		fallthrough
	case "Everyone 10+":
		fallthrough
	case "Teen":
		fallthrough
	case "Mature":
		fallthrough
	case "Adults Only":
		fallthrough
	case "Rating Pending":
		*e = GameEsrbRatingNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GameEsrbRatingNameEnum: %s", s)
	}
}

type GameEsrbRatingSlugEnum string

const (
	GameEsrbRatingSlugEnumEveryone       GameEsrbRatingSlugEnum = "everyone"
	GameEsrbRatingSlugEnumEveryone10Plus GameEsrbRatingSlugEnum = "everyone-10-plus"
	GameEsrbRatingSlugEnumTeen           GameEsrbRatingSlugEnum = "teen"
	GameEsrbRatingSlugEnumMature         GameEsrbRatingSlugEnum = "mature"
	GameEsrbRatingSlugEnumAdultsOnly     GameEsrbRatingSlugEnum = "adults-only"
	GameEsrbRatingSlugEnumRatingPending  GameEsrbRatingSlugEnum = "rating-pending"
)

func (e *GameEsrbRatingSlugEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "everyone":
		fallthrough
	case "everyone-10-plus":
		fallthrough
	case "teen":
		fallthrough
	case "mature":
		fallthrough
	case "adults-only":
		fallthrough
	case "rating-pending":
		*e = GameEsrbRatingSlugEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GameEsrbRatingSlugEnum: %s", s)
	}
}

type GameEsrbRating struct {
	ID   *int64                  `json:"id,omitempty"`
	Name *GameEsrbRatingNameEnum `json:"name,omitempty"`
	Slug *GameEsrbRatingSlugEnum `json:"slug,omitempty"`
}

type GamePlatformsPlatform struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

type GamePlatformsRequirements struct {
	Minimum     *string `json:"minimum,omitempty"`
	Recommended *string `json:"recommended,omitempty"`
}

type GamePlatforms struct {
	Platform     *GamePlatformsPlatform     `json:"platform,omitempty"`
	ReleasedAt   *string                    `json:"released_at,omitempty"`
	Requirements *GamePlatformsRequirements `json:"requirements,omitempty"`
}

type Game struct {
	Added           *int64                 `json:"added,omitempty"`
	AddedByStatus   map[string]interface{} `json:"added_by_status,omitempty"`
	BackgroundImage *string                `json:"background_image,omitempty"`
	EsrbRating      *GameEsrbRating        `json:"esrb_rating,omitempty"`
	ID              *int64                 `json:"id,omitempty"`
	Metacritic      *int64                 `json:"metacritic,omitempty"`
	Name            *string                `json:"name,omitempty"`
	Platforms       []GamePlatforms        `json:"platforms,omitempty"`
	// in hours
	Playtime         *int64                 `json:"playtime,omitempty"`
	Rating           float64                `json:"rating"`
	RatingTop        *int64                 `json:"rating_top,omitempty"`
	Ratings          map[string]interface{} `json:"ratings,omitempty"`
	RatingsCount     *int64                 `json:"ratings_count,omitempty"`
	Released         *types.Date            `json:"released,omitempty"`
	ReviewsTextCount *string                `json:"reviews_text_count,omitempty"`
	Slug             *string                `json:"slug,omitempty"`
	SuggestionsCount *int64                 `json:"suggestions_count,omitempty"`
	Tba              *bool                  `json:"tba,omitempty"`
	Updated          *time.Time             `json:"updated,omitempty"`
}
