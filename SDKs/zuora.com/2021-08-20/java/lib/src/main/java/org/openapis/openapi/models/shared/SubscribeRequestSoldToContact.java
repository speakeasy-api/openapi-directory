/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * SubscribeRequestSoldToContact - Container for custom fields of a Contact object.
 * 
 */
public class SubscribeRequestSoldToContact {
    /**
     *  The Zuora account ID associated with this contact. This field is not required when you use the subscribe
     * call. This field is required for all other calls.
     * **Character limit: **32 **Values: **a valid account ID 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountId")
    public String accountId;
    public SubscribeRequestSoldToContact withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     *  The first line of the contact's address, which is often a street address or business name.
     * 
     * 
     * **Character limit**: 255
     * 
     * 
     * **Values**: a string of 255 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Address1")
    public String address1;
    public SubscribeRequestSoldToContact withAddress1(String address1) {
        this.address1 = address1;
        return this;
    }
    
    /**
     *  The second line of the contact's address.
     * 
     * 
     * **Character limit**: 255
     * 
     * 
     * **Values**: a string of 255 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Address2")
    public String address2;
    public SubscribeRequestSoldToContact withAddress2(String address2) {
        this.address2 = address2;
        return this;
    }
    
    /**
     *  The city of the contact's address.
     * 
     * 
     * **Character limit**: 40 **Values: **a string of 40 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("City")
    public String city;
    public SubscribeRequestSoldToContact withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     *  The country of the contact's address. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Country")
    public String country;
    public SubscribeRequestSoldToContact withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     *  The country. May optionally be used by [Z-Tax](/C_Zuora_User_Guides/A_Billing_and_Payments/I_Taxes/Z-Tax) to calculate county tax.
     * 
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: a string of 32 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("County")
    public String county;
    public SubscribeRequestSoldToContact withCounty(String county) {
        this.county = county;
        return this;
    }
    
    /**
     * The ID of the Zuora user who created the contact.
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreatedById")
    public String createdById;
    public SubscribeRequestSoldToContact withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     * The date when the contact was created.
     * 
     * **Character limit**: 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreatedDate")
    public OffsetDateTime createdDate;
    public SubscribeRequestSoldToContact withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     *  A description for the contact.
     * 
     * 
     * **Character limit**: 100
     * 
     * 
     * **Values**: a string of 100 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Description")
    public String description;
    public SubscribeRequestSoldToContact withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     *  The contact's fax number.
     * 
     * 
     * **Character limit**: 40
     * 
     * 
     * **Values**: a string of 40 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Fax")
    public String fax;
    public SubscribeRequestSoldToContact withFax(String fax) {
        this.fax = fax;
        return this;
    }
    
    /**
     *  The contact's first name.
     * 
     * 
     * **Character limit**: 100
     * 
     * 
     * **Values**: a string of the contact's first name 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FirstName")
    public String firstName;
    public SubscribeRequestSoldToContact withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     *  The contact's home phone number.
     * 
     * 
     * **Character limit**: 40
     * 
     * 
     * **Values**: a string of 40 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HomePhone")
    public String homePhone;
    public SubscribeRequestSoldToContact withHomePhone(String homePhone) {
        this.homePhone = homePhone;
        return this;
    }
    
    /**
     *  The contact's last name.
     * 
     * 
     * **Character limit**: 100
     * 
     * 
     * **Values**: a string of 100 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LastName")
    public String lastName;
    public SubscribeRequestSoldToContact withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     *  The contact's mobile phone number.
     * 
     * 
     * **Character limit**: 40
     * 
     * 
     * **Values**: a string of 40 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MobilePhone")
    public String mobilePhone;
    public SubscribeRequestSoldToContact withMobilePhone(String mobilePhone) {
        this.mobilePhone = mobilePhone;
        return this;
    }
    
    /**
     *  A nickname for the contact.
     * 
     * 
     * **Character limit**: 100
     * 
     * 
     * **Values**: a string of 100 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NickName")
    public String nickName;
    public SubscribeRequestSoldToContact withNickName(String nickName) {
        this.nickName = nickName;
        return this;
    }
    
    /**
     *  An additional phone number for the contact.
     * 
     * 
     * **Character limit**: 40
     * 
     * 
     * **Values**: a string of 40 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OtherPhone")
    public String otherPhone;
    public SubscribeRequestSoldToContact withOtherPhone(String otherPhone) {
        this.otherPhone = otherPhone;
        return this;
    }
    
    /**
     * The type of the `OtherPhone`.
     * 
     * **Character limit**: 20
     * 
     * 
     * **Values**: `Work`, `Mobile`, `Home`, `Other` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OtherPhoneType")
    public String otherPhoneType;
    public SubscribeRequestSoldToContact withOtherPhoneType(String otherPhoneType) {
        this.otherPhoneType = otherPhoneType;
        return this;
    }
    
    /**
     *  The contact's personal email address.
     * 
     * 
     * **Character limit**: 80
     * 
     * 
     * **Values**: a string of 80 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PersonalEmail")
    public String personalEmail;
    public SubscribeRequestSoldToContact withPersonalEmail(String personalEmail) {
        this.personalEmail = personalEmail;
        return this;
    }
    
    /**
     *  The zip code for the contact's address.
     * **Character limit:** 20 **Values: **a string of 20 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PostalCode")
    public String postalCode;
    public SubscribeRequestSoldToContact withPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }
    
    /**
     *  The state or province of the contact's address. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("State")
    public String state;
    public SubscribeRequestSoldToContact withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * If using [Z-Tax](https://knowledgecenter.zuora.com/CB_Billing/J_Billing_Operations/L_Taxes/A_Z-Tax) tax rules 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TaxRegion")
    public String taxRegion;
    public SubscribeRequestSoldToContact withTaxRegion(String taxRegion) {
        this.taxRegion = taxRegion;
        return this;
    }
    
    /**
     *  The ID of the user who lasted updated the contact.
     * 
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UpdatedById")
    public String updatedById;
    public SubscribeRequestSoldToContact withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     *  The date when the contact was last updated.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("UpdatedDate")
    public OffsetDateTime updatedDate;
    public SubscribeRequestSoldToContact withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
    /**
     *  The contact's business email address.
     * 
     * 
     * **Character limit**: 80
     * 
     * 
     * **Values**: a string of 80 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("WorkEmail")
    public String workEmail;
    public SubscribeRequestSoldToContact withWorkEmail(String workEmail) {
        this.workEmail = workEmail;
        return this;
    }
    
    /**
     *  The contact's business phone number.
     * 
     * 
     * **Character limit**: 40 **notes**: --
     * 
     * 
     * **Values**: a string of 40 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("WorkPhone")
    public String workPhone;
    public SubscribeRequestSoldToContact withWorkPhone(String workPhone) {
        this.workPhone = workPhone;
        return this;
    }
    
}
