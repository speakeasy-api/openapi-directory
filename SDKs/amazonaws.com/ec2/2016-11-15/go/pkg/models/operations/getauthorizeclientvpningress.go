// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETAuthorizeClientVpnIngressActionEnum
type GETAuthorizeClientVpnIngressActionEnum string

const (
	GETAuthorizeClientVpnIngressActionEnumAuthorizeClientVpnIngress GETAuthorizeClientVpnIngressActionEnum = "AuthorizeClientVpnIngress"
)

func (e *GETAuthorizeClientVpnIngressActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AuthorizeClientVpnIngress":
		*e = GETAuthorizeClientVpnIngressActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAuthorizeClientVpnIngressActionEnum: %s", s)
	}
}

// GETAuthorizeClientVpnIngressVersionEnum
type GETAuthorizeClientVpnIngressVersionEnum string

const (
	GETAuthorizeClientVpnIngressVersionEnumTwoThousandAndSixteen1115 GETAuthorizeClientVpnIngressVersionEnum = "2016-11-15"
)

func (e *GETAuthorizeClientVpnIngressVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETAuthorizeClientVpnIngressVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAuthorizeClientVpnIngressVersionEnum: %s", s)
	}
}

type GETAuthorizeClientVpnIngressRequest struct {
	// The ID of the group to grant access to, for example, the Active Directory group or identity provider (IdP) group. Required if <code>AuthorizeAllGroups</code> is <code>false</code> or not specified.
	AccessGroupID *string                                `queryParam:"style=form,explode=true,name=AccessGroupId"`
	Action        GETAuthorizeClientVpnIngressActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Indicates whether to grant access to all clients. Specify <code>true</code> to grant all clients who successfully establish a VPN connection access to the network. Must be set to <code>true</code> if <code>AccessGroupId</code> is not specified.
	AuthorizeAllGroups *bool `queryParam:"style=form,explode=true,name=AuthorizeAllGroups"`
	// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.
	ClientToken *string `queryParam:"style=form,explode=true,name=ClientToken"`
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointID string `queryParam:"style=form,explode=true,name=ClientVpnEndpointId"`
	// A brief description of the authorization rule.
	Description *string `queryParam:"style=form,explode=true,name=Description"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The IPv4 address range, in CIDR notation, of the network for which access is being authorized.
	TargetNetworkCidr string                                  `queryParam:"style=form,explode=true,name=TargetNetworkCidr"`
	Version           GETAuthorizeClientVpnIngressVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETAuthorizeClientVpnIngressResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
