/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * FDXNotification - Provides the base fields of a notification. Clients will read the `type` property to determine the expected notification payload
 */
public class FDXNotification {
    /**
     * Category of Notification
     */
    @JsonProperty("category")
    public FDXNotificationCategoryEnum category;
    public FDXNotification withCategory(FDXNotificationCategoryEnum category) {
        this.category = category;
        return this;
    }
    
    /**
     * Id of notification
     */
    @JsonProperty("notificationId")
    public String notificationId;
    public FDXNotification withNotificationId(String notificationId) {
        this.notificationId = notificationId;
        return this;
    }
    
    /**
     * Custom key-value pairs payload for a notification
     */
    @JsonProperty("notificationPayload")
    public FDXNotificationPayload notificationPayload;
    public FDXNotification withNotificationPayload(FDXNotificationPayload notificationPayload) {
        this.notificationPayload = notificationPayload;
        return this;
    }
    
    /**
     * Priority of notification
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public FDXNotificationPriorityEnum priority;
    public FDXNotification withPriority(FDXNotificationPriorityEnum priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * FDX Participant - an entity or person that is a part of a FDX API transaction
     */
    @JsonProperty("publisher")
    public FDXParty publisher;
    public FDXNotification withPublisher(FDXParty publisher) {
        this.publisher = publisher;
        return this;
    }
    
    /**
     * ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("sentOn")
    public OffsetDateTime sentOn;
    public FDXNotification withSentOn(OffsetDateTime sentOn) {
        this.sentOn = sentOn;
        return this;
    }
    
    /**
     * Severity level of notification
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("severity")
    public FDXNotificationSeverityEnum severity;
    public FDXNotification withSeverity(FDXNotificationSeverityEnum severity) {
        this.severity = severity;
        return this;
    }
    
    /**
     * FDX Participant - an entity or person that is a part of a FDX API transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscriber")
    public FDXParty subscriber;
    public FDXNotification withSubscriber(FDXParty subscriber) {
        this.subscriber = subscriber;
        return this;
    }
    
    /**
     * Type of Notification
     */
    @JsonProperty("type")
    public FDXNotificationTypeEnum type;
    public FDXNotification withType(FDXNotificationTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * REST application constraint (Hypermedia As The Engine Of Application State)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public FDXHateoasLink url;
    public FDXNotification withUrl(FDXHateoasLink url) {
        this.url = url;
        return this;
    }
    
}
