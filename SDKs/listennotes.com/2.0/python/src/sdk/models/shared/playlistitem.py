"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PlaylistItemTypeEnum(str, Enum):
    r"""The type of this playlist item.
    If a playlist is **episode_list**, then an item could be either **episode** or **custom_audio**.
    If it's **podcast_list**, then an item can only be **podcast**.
    """
    EPISODE = 'episode'
    CUSTOM_AUDIO = 'custom_audio'
    PODCAST = 'podcast'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlaylistItem:
    r"""An item in a playlist"""
    
    added_at_ms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_at_ms'), 'exclude': lambda f: f is None }})
    r"""Timestamp (in milliseconds) when this item is added."""  
    data: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Playlist item id."""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Notes for this item."""  
    type: Optional[PlaylistItemTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of this playlist item.
    If a playlist is **episode_list**, then an item could be either **episode** or **custom_audio**.
    If it's **podcast_list**, then an item can only be **podcast**.
    """  
    