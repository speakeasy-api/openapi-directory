<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Permission - This is a permission map that contain two object indexes. It is used to link/unlink objects. Order is important. Example: { deviceId:8, geofenceId: 16 }
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Permission
{
    /**
     * Computed Attribute Id, can be second parameter only
     * 
     * @var ?int $attributeId
     */
	#[\JMS\Serializer\Annotation\SerializedName('attributeId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $attributeId = null;
    
    /**
     * Calendar Id, can be second parameter only and only in combination with userId
     * 
     * @var ?int $calendarId
     */
	#[\JMS\Serializer\Annotation\SerializedName('calendarId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $calendarId = null;
    
    /**
     * Device Id, can be first parameter or second only in combination with userId
     * 
     * @var ?int $deviceId
     */
	#[\JMS\Serializer\Annotation\SerializedName('deviceId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $deviceId = null;
    
    /**
     * Driver Id, can be second parameter only
     * 
     * @var ?int $driverId
     */
	#[\JMS\Serializer\Annotation\SerializedName('driverId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $driverId = null;
    
    /**
     * Geofence Id, can be second parameter only
     * 
     * @var ?int $geofenceId
     */
	#[\JMS\Serializer\Annotation\SerializedName('geofenceId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $geofenceId = null;
    
    /**
     * Group Id, can be first parameter or second only in combination with userId
     * 
     * @var ?int $groupId
     */
	#[\JMS\Serializer\Annotation\SerializedName('groupId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $groupId = null;
    
    /**
     * User Id, can be second parameter only and only in combination with userId
     * 
     * @var ?int $managedUserId
     */
	#[\JMS\Serializer\Annotation\SerializedName('managedUserId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $managedUserId = null;
    
    /**
     * Notification Id, can be second parameter only
     * 
     * @var ?int $notificationId
     */
	#[\JMS\Serializer\Annotation\SerializedName('notificationId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $notificationId = null;
    
    /**
     * User Id, can be only first parameter
     * 
     * @var ?int $userId
     */
	#[\JMS\Serializer\Annotation\SerializedName('userId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $userId = null;
    
	public function __construct()
	{
		$this->attributeId = null;
		$this->calendarId = null;
		$this->deviceId = null;
		$this->driverId = null;
		$this->geofenceId = null;
		$this->groupId = null;
		$this->managedUserId = null;
		$this->notificationId = null;
		$this->userId = null;
	}
}
