"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import collectorhealth_enum as shared_collectorhealth_enum
from ..shared import configurationsummary as shared_configurationsummary
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Collector:
    r"""Process data collector that runs in the environment that you specify."""
    
    collector_health: Optional[shared_collectorhealth_enum.CollectorHealthEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collectorHealth'), 'exclude': lambda f: f is None }})  
    collector_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collectorId'), 'exclude': lambda f: f is None }})  
    collector_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collectorVersion'), 'exclude': lambda f: f is None }})  
    configuration_summary: Optional[shared_configurationsummary.ConfigurationSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configurationSummary'), 'exclude': lambda f: f is None }})  
    host_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hostName'), 'exclude': lambda f: f is None }})  
    ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipAddress'), 'exclude': lambda f: f is None }})  
    last_activity_time_stamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastActivityTimeStamp'), 'exclude': lambda f: f is None }})  
    registered_time_stamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registeredTimeStamp'), 'exclude': lambda f: f is None }})  
    