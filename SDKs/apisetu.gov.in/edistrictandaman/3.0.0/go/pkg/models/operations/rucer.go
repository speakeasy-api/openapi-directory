// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RucerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type RucerRequestBodyCertificateParameters struct {
	// Certificate Number
	CertificateNumber string `json:"CertificateNumber"`
}

// RucerRequestBodyFormatEnum - The format of the certificate in response.
type RucerRequestBodyFormatEnum string

const (
	RucerRequestBodyFormatEnumPdf RucerRequestBodyFormatEnum = "pdf"
)

func (e *RucerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = RucerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RucerRequestBodyFormatEnum: %s", s)
	}
}

// RucerRequestBody - Request format
type RucerRequestBody struct {
	CertificateParameters *RucerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format RucerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Rucer504ApplicationJSONErrorEnum string

const (
	Rucer504ApplicationJSONErrorEnumGatewayTimeout Rucer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Rucer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Rucer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rucer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Rucer504ApplicationJSONErrorDescriptionEnum string

const (
	Rucer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Rucer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Rucer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Rucer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rucer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rucer504ApplicationJSON - Gateway timeout
type Rucer504ApplicationJSON struct {
	Error            *Rucer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rucer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rucer503ApplicationJSONErrorEnum string

const (
	Rucer503ApplicationJSONErrorEnumServiceUnavailable Rucer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Rucer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Rucer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rucer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Rucer503ApplicationJSONErrorDescriptionEnum string

const (
	Rucer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Rucer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Rucer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Rucer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rucer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rucer503ApplicationJSON - Service unavailable
type Rucer503ApplicationJSON struct {
	Error            *Rucer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rucer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rucer502ApplicationJSONErrorEnum string

const (
	Rucer502ApplicationJSONErrorEnumBadGatewy Rucer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Rucer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Rucer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rucer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Rucer502ApplicationJSONErrorDescriptionEnum string

const (
	Rucer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Rucer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Rucer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Rucer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rucer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rucer502ApplicationJSON - Bad gateway
type Rucer502ApplicationJSON struct {
	Error            *Rucer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rucer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rucer500ApplicationJSONErrorEnum string

const (
	Rucer500ApplicationJSONErrorEnumInternalServerError Rucer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Rucer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Rucer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rucer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Rucer500ApplicationJSONErrorDescriptionEnum string

const (
	Rucer500ApplicationJSONErrorDescriptionEnumInternalServerError Rucer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Rucer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Rucer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rucer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rucer500ApplicationJSON - Internal server error
type Rucer500ApplicationJSON struct {
	Error            *Rucer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rucer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rucer404ApplicationJSONErrorEnum string

const (
	Rucer404ApplicationJSONErrorEnumRecordNotFound Rucer404ApplicationJSONErrorEnum = "record_not_found"
	Rucer404ApplicationJSONErrorEnumURLNotFound    Rucer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Rucer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Rucer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rucer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Rucer404ApplicationJSONErrorDescriptionEnum string

const (
	Rucer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Rucer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Rucer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Rucer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Rucer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Rucer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rucer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rucer404ApplicationJSON - No record found
type Rucer404ApplicationJSON struct {
	Error            *Rucer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rucer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rucer401ApplicationJSONErrorEnum string

const (
	Rucer401ApplicationJSONErrorEnumInvalidAuthentication Rucer401ApplicationJSONErrorEnum = "invalid_authentication"
	Rucer401ApplicationJSONErrorEnumInvalidAuthorization  Rucer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Rucer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Rucer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rucer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Rucer401ApplicationJSONErrorDescriptionEnum string

const (
	Rucer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Rucer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Rucer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Rucer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Rucer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Rucer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rucer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rucer401ApplicationJSON - Unauthorized access
type Rucer401ApplicationJSON struct {
	Error            *Rucer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rucer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rucer400ApplicationJSONErrorEnum string

const (
	Rucer400ApplicationJSONErrorEnumMissingParameter Rucer400ApplicationJSONErrorEnum = "missing_parameter"
	Rucer400ApplicationJSONErrorEnumInvalidParameter Rucer400ApplicationJSONErrorEnum = "invalid_parameter"
	Rucer400ApplicationJSONErrorEnumInvalidFormat    Rucer400ApplicationJSONErrorEnum = "invalid_format"
	Rucer400ApplicationJSONErrorEnumInvalidTxnid     Rucer400ApplicationJSONErrorEnum = "invalid_txnid"
	Rucer400ApplicationJSONErrorEnumInvalidConsentid Rucer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Rucer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Rucer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rucer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Rucer400ApplicationJSONErrorDescriptionEnum string

const (
	Rucer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Rucer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Rucer400ApplicationJSONErrorDescriptionEnumBadRequest                              Rucer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Rucer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Rucer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Rucer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Rucer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Rucer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Rucer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Rucer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Rucer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rucer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rucer400ApplicationJSON - Bad request
type Rucer400ApplicationJSON struct {
	Error            *Rucer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rucer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type RucerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Rucer400ApplicationJSONObject *Rucer400ApplicationJSON
	// Unauthorized access
	Rucer401ApplicationJSONObject *Rucer401ApplicationJSON
	// No record found
	Rucer404ApplicationJSONObject *Rucer404ApplicationJSON
	// Internal server error
	Rucer500ApplicationJSONObject *Rucer500ApplicationJSON
	// Bad gateway
	Rucer502ApplicationJSONObject *Rucer502ApplicationJSON
	// Service unavailable
	Rucer503ApplicationJSONObject *Rucer503ApplicationJSON
	// Gateway timeout
	Rucer504ApplicationJSONObject *Rucer504ApplicationJSON
}
