/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RealtimeData - Real time data for a given view (profile).
 */
public class RealtimeData {
    /**
     * Column headers that list dimension names followed by the metric names. The order of dimensions and metrics is same as specified in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("columnHeaders")
    public RealtimeDataColumnHeaders[] columnHeaders;

    public RealtimeData withColumnHeaders(RealtimeDataColumnHeaders[] columnHeaders) {
        this.columnHeaders = columnHeaders;
        return this;
    }
    
    /**
     * Unique ID for this data response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public RealtimeData withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Resource type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public RealtimeData withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Information for the view (profile), for which the real time data was requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileInfo")
    public RealtimeDataProfileInfo profileInfo;

    public RealtimeData withProfileInfo(RealtimeDataProfileInfo profileInfo) {
        this.profileInfo = profileInfo;
        return this;
    }
    
    /**
     * Real time data request query parameters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    public RealtimeDataQuery query;

    public RealtimeData withQuery(RealtimeDataQuery query) {
        this.query = query;
        return this;
    }
    
    /**
     * Real time data rows, where each row contains a list of dimension values followed by the metric values. The order of dimensions and metrics is same as specified in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rows")
    public String[][] rows;

    public RealtimeData withRows(String[][] rows) {
        this.rows = rows;
        return this;
    }
    
    /**
     * Link to this page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;

    public RealtimeData withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * The total number of rows for the query, regardless of the number of rows in the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalResults")
    public Integer totalResults;

    public RealtimeData withTotalResults(Integer totalResults) {
        this.totalResults = totalResults;
        return this;
    }
    
    /**
     * Total values for the requested metrics over all the results, not just the results returned in this response. The order of the metric totals is same as the metric order specified in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalsForAllResults")
    public java.util.Map<String, String> totalsForAllResults;

    public RealtimeData withTotalsForAllResults(java.util.Map<String, String> totalsForAllResults) {
        this.totalsForAllResults = totalsForAllResults;
        return this;
    }
    
    public RealtimeData(){}
}
