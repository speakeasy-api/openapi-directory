"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import taskrouter_v1_workspace_worker_worker_channel as shared_taskrouter_v1_workspace_worker_worker_channel
from typing import Optional

UPDATE_WORKER_CHANNEL_SERVERS = [
	"https://taskrouter.twilio.com",
]


@dataclasses.dataclass
class UpdateWorkerChannelSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class UpdateWorkerChannelUpdateWorkerChannelRequest:
    
    available: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Available' }})
    r"""Whether the WorkerChannel is available. Set to `false` to prevent the Worker from receiving any new Tasks of this TaskChannel type."""  
    capacity: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Capacity' }})
    r"""The total number of Tasks that the Worker should handle for the TaskChannel type. TaskRouter creates reservations for Tasks of this TaskChannel type up to the specified capacity. If the capacity is 0, no new reservations will be created."""  
    

@dataclasses.dataclass
class UpdateWorkerChannelRequest:
    
    sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Sid', 'style': 'simple', 'explode': False }})
    r"""The SID of the WorkerChannel to update."""  
    worker_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'WorkerSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the Worker with the WorkerChannel to update."""  
    workspace_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'WorkspaceSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the Workspace with the WorkerChannel to update."""  
    request_body: Optional[UpdateWorkerChannelUpdateWorkerChannelRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateWorkerChannelResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    taskrouter_v1_workspace_worker_worker_channel: Optional[shared_taskrouter_v1_workspace_worker_worker_channel.TaskrouterV1WorkspaceWorkerWorkerChannel] = dataclasses.field(default=None)
    r"""OK"""  
    