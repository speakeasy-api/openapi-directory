<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PaymentInitationRequestResponse201 - Body of the response for a successful payment initiation request.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PaymentInitationRequestResponse201
{
    /**
     * A list of hyperlinks to be recognised by the TPP.
     * 
     * The actual hyperlinks used in the response depend on the dynamical decisions of the ASPSP when
     * processing the request.
     * 
     * **Remark:** All links can be relative or full links, to be decided by the ASPSP.
     * 
     * Type of links admitted in this response, (further links might be added for ASPSP defined extensions):
     * 
     * * 'scaRedirect':
     *   In case of an SCA Redirect Approach, the ASPSP is transmitting the link to which to redirect the PSU browser.
     * * 'scaOAuth':
     *   In case of a SCA OAuth2 Approach, the ASPSP is transmitting the URI where the configuration of the Authorisation
     *   Server can be retrieved. The configuration follows the OAuth 2.0 Authorisation Server Metadata specification.
     * * 'confirmation': 
     *   Might be added by the ASPSP if either the "scaRedirect" or "scaOAuth" hyperlink is returned 
     *   in the same response message. 
     *   This hyperlink defines the URL to the resource which needs to be updated with 
     *     * a confirmation code as retrieved after the plain redirect authentication process with the ASPSP authentication server or
     *     * an access token as retrieved by submitting an authorization code after the integrated OAuth based authentication process with the ASPSP authentication server. 
     * * 'startAuthorisation': 
     *   In case, where an explicit start of the transaction authorisation is needed, but no more data needs to be updated 
     *   (no authentication method to be selected, no PSU identification nor PSU authentication data to be uploaded).
     * * 'startAuthorisationWithPsuIdentification':
     *   The link to the authorisation end-point, where the authorisation sub-resource has to be generated while
     *   uploading the PSU identification data.
     * * 'startAuthorisationWithPsuAuthentication':
     *   The link to the authorisation end-point, where the authorisation sub-resource has to be generated while
     *   uploading the PSU authentication data.
     *   * 'startAuthorisationWithEncryptedPsuAuthentication':
     *     Same as startAuthorisactionWithPsuAuthentication where the authentication data need to be encrypted on
     *     application layer in uploading.
     * * 'startAuthorisationWithAuthenticationMethodSelection':
     *   The link to the authorisation end-point, where the authorisation sub-resource has to be generated while
     *   selecting the authentication method.
     *   This link is contained under exactly the same conditions as the data element "scaMethods"
     * * 'startAuthorisationWithTransactionAuthorisation':
     *   The link to the authorisation end-point, where the authorisation sub-resource has to be generated while
     *   authorising the transaction e.g. by uploading an OTP received by SMS.
     * * 'self':
     *   The link to the payment initiation resource created by this request.
     *   This link can be used to retrieve the resource data.
     * * 'status':
     *   The link to retrieve the transaction status of the payment initiation.
     * * 'scaStatus':
     *   The link to retrieve the scaStatus of the corresponding authorisation sub-resource.
     *   This link is only contained, if an authorisation sub-resource has been already created.
     * 
     * 
     * @var array<string, \OpenAPI\OpenAPI\Models\Shared\HrefType> $links
     */
	#[\JMS\Serializer\Annotation\SerializedName('_links')]
    #[\JMS\Serializer\Annotation\Type('array<string, OpenAPI\OpenAPI\Models\Shared\HrefType>')]
    public array $links;
    
    /**
     * It is contained in addition to the data element 'chosenScaMethod' if challenge data is needed for SCA.
     * 
     * In rare cases this attribute is also used in the context of the 'startAuthorisationWithPsuAuthentication' link.
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ChallengeData $challengeData
     */
	#[\JMS\Serializer\Annotation\SerializedName('challengeData')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ChallengeData')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ChallengeData $challengeData = null;
    
    /**
     * Authentication object.
     * 
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ChosenScaMethod $chosenScaMethod
     */
	#[\JMS\Serializer\Annotation\SerializedName('chosenScaMethod')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ChosenScaMethod')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ChosenScaMethod $chosenScaMethod = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('currencyConversionFee')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Amount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Amount $currencyConversionFee = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('estimatedInterbankSettlementAmount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Amount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Amount $estimatedInterbankSettlementAmount = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('estimatedTotalAmount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Amount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Amount $estimatedTotalAmount = null;
    
    /**
     * Resource identification of the generated payment initiation resource.
     * 
     * @var string $paymentId
     */
	#[\JMS\Serializer\Annotation\SerializedName('paymentId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $paymentId;
    
    /**
     * Text to be displayed to the PSU.
     * 
     * @var ?string $psuMessage
     */
	#[\JMS\Serializer\Annotation\SerializedName('psuMessage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $psuMessage = null;
    
    /**
     * This data element might be contained, if SCA is required and if the PSU has a choice between different
     * 
     * authentication methods.
     * 
     * Depending on the risk management of the ASPSP this choice might be offered before or after the PSU
     * has been identified with the first relevant factor, or if an access token is transported.
     * 
     * If this data element is contained, then there is also a hyperlink of type 'startAuthorisationWithAuthenticationMethodSelection'
     * contained in the response body.
     * 
     * These methods shall be presented towards the PSU for selection by the TPP.
     * 
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\AuthenticationObject> $scaMethods
     */
	#[\JMS\Serializer\Annotation\SerializedName('scaMethods')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\AuthenticationObject>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $scaMethods = null;
    
    /**
     * $tppMessages
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\TppMessage2XX> $tppMessages
     */
	#[\JMS\Serializer\Annotation\SerializedName('tppMessages')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\TppMessage2XX>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tppMessages = null;
    
    /**
     * If equals 'true', the transaction will involve specific transaction cost as shown by the ASPSP in
     * 
     * their public price list or as agreed between ASPSP and PSU.
     * If equals 'false', the transaction will not involve additional specific transaction costs to the PSU unless the fee amount is given specifically in the data elements transactionFees and/or currencyConversionFees.
     * If this data element is not used, there is no information about transaction fees unless the fee amount is given explicitly in the data element transactionFees and/or currencyConversionFees.
     * 
     * 
     * @var ?bool $transactionFeeIndicator
     */
	#[\JMS\Serializer\Annotation\SerializedName('transactionFeeIndicator')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $transactionFeeIndicator = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('transactionFees')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Amount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Amount $transactionFees = null;
    
    /**
     * The transaction status is filled with codes of the ISO 20022 data table:
     * 
     * - 'ACCC': 'AcceptedSettlementCompleted' -
     *   Settlement on the creditor's account has been completed.
     * - 'ACCP': 'AcceptedCustomerProfile' -
     *   Preceding check of technical validation was successful.
     *   Customer profile check was also successful.
     * - 'ACSC': 'AcceptedSettlementCompleted' -
     *   Settlement on the debtoro?=s account has been completed.
     * 
     *   **Usage:** this can be used by the first agent to report to the debtor that the transaction has been completed.
     * 
     *   **Warning:** this status is provided for transaction status reasons, not for financial information.
     *   It can only be used after bilateral agreement.
     * - 'ACSP': 'AcceptedSettlementInProcess' -
     *   All preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution.
     * - 'ACTC': 'AcceptedTechnicalValidation' -
     *   Authentication and syntactical and semantical validation are successful.
     * - 'ACWC': 'AcceptedWithChange' -
     *   Instruction is accepted but a change will be made, such as date or remittance not sent.
     * - 'ACWP': 'AcceptedWithoutPosting' -
     *   Payment instruction included in the credit transfer is accepted without being posted to the creditor customero?=s account.
     * - 'RCVD': 'Received' -
     *   Payment initiation has been received by the receiving agent.
     * - 'PDNG': 'Pending' -
     *   Payment initiation or individual transaction included in the payment initiation is pending.
     *   Further checks and status update will be performed.
     * - 'RJCT': 'Rejected' -
     *   Payment initiation or individual transaction included in the payment initiation has been rejected.
     * - 'CANC': 'Cancelled'
     *   Payment initiation has been cancelled before execution
     *   Remark: This codeis accepted as new code by ISO20022.
     * - 'ACFC': 'AcceptedFundsChecked' -
     *   Preceding check of technical validation and customer profile was successful and an automatic funds check was positive .
     *   Remark: This code is accepted as new code by ISO20022.
     * - 'PATC': 'PartiallyAcceptedTechnical'
     *   Correct The payment initiation needs multiple authentications, where some but not yet all have been performed. Syntactical and semantical validations are successful.
     *   Remark: This code is accepted as new code by ISO20022.
     * - 'PART': 'PartiallyAccepted' -
     *   A number of transactions have been accepted, whereas another number of transactions have not yet achieved 'accepted' status.
     *   Remark: This code may be used only in case of bulk payments. It is only used in a situation where all mandated authorisations have been applied, but some payments have been rejected.
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\TransactionStatusEnum $transactionStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('transactionStatus')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\TransactionStatusEnum>')]
    public TransactionStatusEnum $transactionStatus;
    
	public function __construct()
	{
		$this->links = [];
		$this->challengeData = null;
		$this->chosenScaMethod = null;
		$this->currencyConversionFee = null;
		$this->estimatedInterbankSettlementAmount = null;
		$this->estimatedTotalAmount = null;
		$this->paymentId = "";
		$this->psuMessage = null;
		$this->scaMethods = null;
		$this->tppMessages = null;
		$this->transactionFeeIndicator = null;
		$this->transactionFees = null;
		$this->transactionStatus = \OpenAPI\OpenAPI\Models\Shared\TransactionStatusEnum::ACCC;
	}
}
