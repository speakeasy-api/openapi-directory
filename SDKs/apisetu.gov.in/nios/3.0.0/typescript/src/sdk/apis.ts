/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class APIs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Class XII Marksheet
   *
   * @remarks
   * API to verify Class XII Marksheet.
   */
  hscer(
    req: operations.HscerRequestBody,
    security: operations.HscerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.HscerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.HscerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/hscer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.HscerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HscerResponse = new operations.HscerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Class XII Migration Certificate
   *
   * @remarks
   * API to verify Class XII Migration Certificate.
   */
  hsmgr(
    req: operations.HsmgrRequestBody,
    security: operations.HsmgrSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.HsmgrResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.HsmgrRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/hsmgr/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.HsmgrSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HsmgrResponse = new operations.HsmgrResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hsmgr400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hsmgr400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hsmgr401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hsmgr401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hsmgr404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hsmgr404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hsmgr500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hsmgr500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hsmgr502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hsmgr502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hsmgr503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hsmgr503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hsmgr504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hsmgr504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Class XII Provisional Certificate
   *
   * @remarks
   * API to verify Class XII Provisional Certificate.
   */
  hvcer(
    req: operations.HvcerRequestBody,
    security: operations.HvcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.HvcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.HvcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/hvcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.HvcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HvcerResponse = new operations.HvcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hvcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hvcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hvcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hvcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hvcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hvcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hvcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hvcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hvcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hvcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hvcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hvcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hvcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hvcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Class X Marksheet
   *
   * @remarks
   * API to verify Class X Marksheet.
   */
  sscer(
    req: operations.SscerRequestBody,
    security: operations.SscerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SscerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SscerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sscer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SscerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SscerResponse = new operations.SscerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Class X Migration Certificate
   *
   * @remarks
   * API to verify Class X Migration Certificate.
   */
  ssmgr(
    req: operations.SsmgrRequestBody,
    security: operations.SsmgrSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SsmgrResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SsmgrRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ssmgr/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SsmgrSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SsmgrResponse = new operations.SsmgrResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssmgr400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ssmgr400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssmgr401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ssmgr401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssmgr404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ssmgr404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssmgr500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ssmgr500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssmgr502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ssmgr502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssmgr503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ssmgr503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssmgr504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Ssmgr504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Class X Provisional Certificate
   *
   * @remarks
   * API to verify Class X Provisional Certificate.
   */
  svcer(
    req: operations.SvcerRequestBody,
    security: operations.SvcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SvcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SvcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/svcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SvcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SvcerResponse = new operations.SvcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.svcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Svcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.svcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Svcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.svcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Svcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.svcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Svcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.svcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Svcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.svcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Svcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.svcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Svcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
