// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ReposCreatePagesSiteRequestBody2BuildTypeEnum - The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
type ReposCreatePagesSiteRequestBody2BuildTypeEnum string

const (
	ReposCreatePagesSiteRequestBody2BuildTypeEnumLegacy   ReposCreatePagesSiteRequestBody2BuildTypeEnum = "legacy"
	ReposCreatePagesSiteRequestBody2BuildTypeEnumWorkflow ReposCreatePagesSiteRequestBody2BuildTypeEnum = "workflow"
)

func (e ReposCreatePagesSiteRequestBody2BuildTypeEnum) ToPointer() *ReposCreatePagesSiteRequestBody2BuildTypeEnum {
	return &e
}

func (e *ReposCreatePagesSiteRequestBody2BuildTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "legacy":
		fallthrough
	case "workflow":
		*e = ReposCreatePagesSiteRequestBody2BuildTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreatePagesSiteRequestBody2BuildTypeEnum: %v", v)
	}
}

// ReposCreatePagesSiteRequestBody2SourcePathEnum - The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
type ReposCreatePagesSiteRequestBody2SourcePathEnum string

const (
	ReposCreatePagesSiteRequestBody2SourcePathEnumRoot     ReposCreatePagesSiteRequestBody2SourcePathEnum = "/"
	ReposCreatePagesSiteRequestBody2SourcePathEnumRootDocs ReposCreatePagesSiteRequestBody2SourcePathEnum = "/docs"
)

func (e ReposCreatePagesSiteRequestBody2SourcePathEnum) ToPointer() *ReposCreatePagesSiteRequestBody2SourcePathEnum {
	return &e
}

func (e *ReposCreatePagesSiteRequestBody2SourcePathEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "/":
		fallthrough
	case "/docs":
		*e = ReposCreatePagesSiteRequestBody2SourcePathEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreatePagesSiteRequestBody2SourcePathEnum: %v", v)
	}
}

// ReposCreatePagesSiteRequestBody2Source - The source branch and directory used to publish your Pages site.
type ReposCreatePagesSiteRequestBody2Source struct {
	// The repository branch used to publish your site's source files.
	Branch string `json:"branch"`
	// The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
	Path *ReposCreatePagesSiteRequestBody2SourcePathEnum `json:"path,omitempty"`
}

// ReposCreatePagesSiteRequestBody2 - The source branch and directory used to publish your Pages site.
type ReposCreatePagesSiteRequestBody2 struct {
	// The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
	BuildType ReposCreatePagesSiteRequestBody2BuildTypeEnum `json:"build_type"`
	// The source branch and directory used to publish your Pages site.
	Source *ReposCreatePagesSiteRequestBody2Source `json:"source,omitempty"`
}

// ReposCreatePagesSiteRequestBody1BuildTypeEnum - The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
type ReposCreatePagesSiteRequestBody1BuildTypeEnum string

const (
	ReposCreatePagesSiteRequestBody1BuildTypeEnumLegacy   ReposCreatePagesSiteRequestBody1BuildTypeEnum = "legacy"
	ReposCreatePagesSiteRequestBody1BuildTypeEnumWorkflow ReposCreatePagesSiteRequestBody1BuildTypeEnum = "workflow"
)

func (e ReposCreatePagesSiteRequestBody1BuildTypeEnum) ToPointer() *ReposCreatePagesSiteRequestBody1BuildTypeEnum {
	return &e
}

func (e *ReposCreatePagesSiteRequestBody1BuildTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "legacy":
		fallthrough
	case "workflow":
		*e = ReposCreatePagesSiteRequestBody1BuildTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreatePagesSiteRequestBody1BuildTypeEnum: %v", v)
	}
}

// ReposCreatePagesSiteRequestBody1SourcePathEnum - The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
type ReposCreatePagesSiteRequestBody1SourcePathEnum string

const (
	ReposCreatePagesSiteRequestBody1SourcePathEnumRoot     ReposCreatePagesSiteRequestBody1SourcePathEnum = "/"
	ReposCreatePagesSiteRequestBody1SourcePathEnumRootDocs ReposCreatePagesSiteRequestBody1SourcePathEnum = "/docs"
)

func (e ReposCreatePagesSiteRequestBody1SourcePathEnum) ToPointer() *ReposCreatePagesSiteRequestBody1SourcePathEnum {
	return &e
}

func (e *ReposCreatePagesSiteRequestBody1SourcePathEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "/":
		fallthrough
	case "/docs":
		*e = ReposCreatePagesSiteRequestBody1SourcePathEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreatePagesSiteRequestBody1SourcePathEnum: %v", v)
	}
}

// ReposCreatePagesSiteRequestBody1Source - The source branch and directory used to publish your Pages site.
type ReposCreatePagesSiteRequestBody1Source struct {
	// The repository branch used to publish your site's source files.
	Branch string `json:"branch"`
	// The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
	Path *ReposCreatePagesSiteRequestBody1SourcePathEnum `json:"path,omitempty"`
}

// ReposCreatePagesSiteRequestBody1 - The source branch and directory used to publish your Pages site.
type ReposCreatePagesSiteRequestBody1 struct {
	// The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
	BuildType *ReposCreatePagesSiteRequestBody1BuildTypeEnum `json:"build_type,omitempty"`
	// The source branch and directory used to publish your Pages site.
	Source ReposCreatePagesSiteRequestBody1Source `json:"source"`
}

type ReposCreatePagesSiteRequest struct {
	RequestBody interface{} `request:"mediaType=application/json"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type ReposCreatePagesSiteResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Conflict
	BasicError *shared.BasicError
	// Response
	Page *shared.Page
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
