"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import alertchart as shared_alertchart
from ..shared import collapsiblegroup as shared_collapsiblegroup
from ..shared import incidentlist as shared_incidentlist
from ..shared import logspanel as shared_logspanel
from ..shared import scorecard as shared_scorecard
from ..shared import text as shared_text
from ..shared import timeseriestable as shared_timeseriestable
from ..shared import xychart as shared_xychart
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Widget:
    r"""Widget contains a single dashboard component and configuration of how to present the component in the dashboard."""
    
    alert_chart: Optional[shared_alertchart.AlertChart] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alertChart'), 'exclude': lambda f: f is None }})
    r"""A chart that displays alert policy data."""  
    blank: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blank'), 'exclude': lambda f: f is None }})
    r"""A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"""  
    collapsible_group: Optional[shared_collapsiblegroup.CollapsibleGroup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collapsibleGroup'), 'exclude': lambda f: f is None }})
    r"""A widget that groups the other widgets. All widgets that are within the area spanned by the grouping widget are considered member widgets."""  
    incident_list: Optional[shared_incidentlist.IncidentList] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('incidentList'), 'exclude': lambda f: f is None }})
    r"""A widget that displays a list of incidents"""  
    logs_panel: Optional[shared_logspanel.LogsPanel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logsPanel'), 'exclude': lambda f: f is None }})
    r"""A widget that displays a stream of log."""  
    scorecard: Optional[shared_scorecard.Scorecard] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scorecard'), 'exclude': lambda f: f is None }})
    r"""A widget showing the latest value of a metric, and how this value relates to one or more thresholds."""  
    text: Optional[shared_text.Text] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""A widget that displays textual content."""  
    time_series_table: Optional[shared_timeseriestable.TimeSeriesTable] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeSeriesTable'), 'exclude': lambda f: f is None }})
    r"""A table that displays time series data."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Optional. The title of the widget."""  
    xy_chart: Optional[shared_xychart.XyChart] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xyChart'), 'exclude': lambda f: f is None }})
    r"""A chart that displays data on a 2D (X and Y axes) plane."""  
    