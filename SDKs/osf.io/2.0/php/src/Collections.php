<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Collections 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add Metadata or Subjects to a Entity in a Collection
     * 
     * List of user created metadata for entities within a collection.
     * #### Permissions
     * To edit this collection a user must have collections write permissions
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of nodes ids.
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsAddMetadataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsAddMetadataResponse
     */
	public function collectionsAddMetadata(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsAddMetadataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsAddMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/collected_metadata/', \OpenAPI\OpenAPI\Models\Operations\CollectionsAddMetadataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsAddMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }

        return $response;
    }
	
    /**
     * Retrieve subject data for a specific piece of metadata info for a collection
     * 
     * 
     * #### Permissions
     * In order to view these subject it must be a public collection or a user must have read permissions for collection.
     * 
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of nodes ids.
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * #### Errors
     * This request should never return an error, other then permissions errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsCollectedMetadataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsCollectedMetadataResponse
     */
	public function collectionsCollectedMetadata(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsCollectedMetadataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsCollectedMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/collected_metadata/{cgm_id}/subjects/', \OpenAPI\OpenAPI\Models\Operations\CollectionsCollectedMetadataRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsCollectedMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Create a Collection
     * 
     * Retrieves a list collections, either public or related to the user
     * #### Permissions
     * Anonymous users are able to see all public collections at this endpoint. Logged in users will only be able to see their own content.
     * 
     * Comments on private nodes are only visible to contributors and administrators on the parent node.
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of comment objects. Each resource in the array is a separate comment object.
     * 
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsCreateResponse
     */
	public function collectionsCreate(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }

        return $response;
    }
	
    /**
     * Delete a Collection
     * 
     * Deletes a collection, if the user has appropriate permissions.
     * #### Permissions
     * Users must have write permissions on a collection in order to delete it
     * #### Returns
     * Nothing is returned in the body
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsDeleteResponse
     */
	public function collectionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/', \OpenAPI\OpenAPI\Models\Operations\CollectionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Retrieve a Collection
     * 
     * Retrieves a collection, if the user has appropriate permissions.
     * 
     * #### Permissions
     * Anonymous users are able to see all public collections at this endpoint. Logged in users will only be able to see their own content.
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsDetailRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsDetailResponse
     */
	public function collectionsDetail(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsDetailRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsDetailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/', \OpenAPI\OpenAPI\Models\Operations\CollectionsDetailRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsDetailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List All Linked Nodes for a Collection
     * 
     * List of all nodes linked to the given collection.
     * #### Permissions
     * This returns all public nodes associated with this collection.
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.
     * 
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesListResponse
     */
	public function collectionsLinkedNodesList(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/linked_nodes', \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Link Nodes to Collection
     * 
     * This endpoint allow users to a add a node to a collection by issuing a POST request.
     * #### Permissions
     * This returns all public nodes associated with this collection.
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of comment objects. Each resource in the array is a separate comment object.
     * 
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsResponse
     */
	public function collectionsLinkedNodesRelationships(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/linked_nodes/relationships/', \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }

        return $response;
    }
	
    /**
     * Give a Sparse List of Node Ids
     * 
     * List of all the node ids linked to the given collection.
     * #### Permissions
     * This returns all public nodes associated with this collection.
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of nodes ids.
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsCreateResponse
     */
	public function collectionsLinkedNodesRelationshipsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/linked_nodes/relationships/', \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Remove Nodes From Collection
     * 
     * 
     * This removes associated nodes from a collection
     * #### Permissions
     * Any user with write permissions on this collection should be to remove nodes from this collection.
     * #### Returns
     * Nothing in the response body.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsDeleteResponse
     */
	public function collectionsLinkedNodesRelationshipsDelete(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/linked_nodes/relationships/', \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedNodesRelationshipsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List All Linked Preprints for a Collection
     * 
     * List of all preprints linked to the given collection.
     * #### Permissions
     * This returns all public preprints associated with this collection.
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.
     * 
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedPreprintsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedPreprintsListResponse
     */
	public function collectionsLinkedPreprintsList(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedPreprintsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedPreprintsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/linked_preprints/', \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedPreprintsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedPreprintsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List All Linked Registrations for a Collection
     * 
     * List of all registrations linked to the given collection.
     * #### Permissions
     * This returns all public registrations associated with this collection.
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.
     * 
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsListResponse
     */
	public function collectionsLinkedRegistrationsList(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/linked_registrations/', \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Link Registrations to Collection
     * 
     * This endpoint allow users to a add a registration to a collection by issuing a POST request.
     * #### Permissions
     * This returns all public registrations associated with this collection.
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of comment objects. Each resource in the array is a separate comment object.
     * 
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsResponse
     */
	public function collectionsLinkedRegistrationsRelationships(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/linked_registrations/relationships/', \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }

        return $response;
    }
	
    /**
     * Give a Sparse List of Registrations Ids
     * 
     * List of all the registration ids linked to the given collection.
     * #### Permissions
     * This returns all public registrations associated with this collection.
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of nodes ids.
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsCreateResponse
     */
	public function collectionsLinkedRegistrationsRelationshipsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/linked_registrations/relationships/', \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Remove Registrations From Collection
     * 
     * 
     * This removes associated registrations from a collection
     * #### Permissions
     * Any user with write permissions on this collection should be to remove registrations from this collection.
     * #### Returns
     * Nothing in the response body.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsDeleteResponse
     */
	public function collectionsLinkedRegistrationsRelationshipsDelete(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/linked_registrations/relationships/', \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsLinkedRegistrationsRelationshipsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List all Collections
     * 
     * Retrieves a list collections, either public or related to the user
     * #### Permissions
     * Anonymous users are able to see all public collections at this endpoint. Logged in users will only be able to see their own content.
     * 
     * Comments on private nodes are only visible to contributors and administrators on the parent node.
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsListResponse
     */
	public function collectionsList(
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Delete Collection Metadata from entitiy
     * 
     * 
     * #### Permissions
     * Only a user with collection admin permissions can delete collected metadata
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of nodes ids.
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataDeleteResponse
     */
	public function collectionsMetadataDelete(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/collected_metadata/{cgm_id}', \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Add Metadata or Subjects to an Entity in a Collection
     * 
     * List of user created metadata for entities within a collection.
     * #### Permissions
     * To edit this collection a user must have collections write permissions
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of nodes ids.
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataDetailRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataDetailResponse
     */
	public function collectionsMetadataDetail(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataDetailRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataDetailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/collected_metadata/{cgm_id}', \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataDetailRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataDetailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }

        return $response;
    }
	
    /**
     * Retrieve Specific Metadata for a Collection
     * 
     * 
     * #### Permissions
     * In order to view this metadata it must be public or a user must have read permissions for collection.
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of nodes ids.
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * #### Errors
     * This request should never return an error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataRegistrationsDetailRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataRegistrationsDetailResponse
     */
	public function collectionsMetadataRegistrationsDetail(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataRegistrationsDetailRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataRegistrationsDetailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/collected_metadata/{cgm_id}', \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataRegistrationsDetailRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataRegistrationsDetailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieve a list of collected metadata for a collection
     * 
     * List of user created metadata for entities within a collection.
     * #### Permissions
     * In order to view this metadata it must be public or a user must have read permissions for collection.
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of nodes ids.
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * #### Errors
     * This request should never return an error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataRegistrationsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataRegistrationsListResponse
     */
	public function collectionsMetadataRegistrationsList(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataRegistrationsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataRegistrationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/collected_metadata/', \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataRegistrationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataRegistrationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieve subject metadata for a specific piece of metadata in a collection
     * 
     * 
     * #### Permissions
     * This is public for a logged out user when an entity is public.
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of nodes ids.
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataSubjectsRelationshipsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataSubjectsRelationshipsResponse
     */
	public function collectionsMetadataSubjectsRelationships(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataSubjectsRelationshipsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataSubjectsRelationshipsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/collected_metadata/{cgm_id}/relationships/subjects/', \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataSubjectsRelationshipsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataSubjectsRelationshipsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update subjects for a specific piece of metadata in a collection
     * 
     * 
     * #### Permissions
     * This is editable for a user with a write permission for this collection.
     * 
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys.
     * 
     * The `data` key contains an array of nodes ids.
     * The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataSubjectsRelationshipsUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataSubjectsRelationshipsUpdateResponse
     */
	public function collectionsMetadataSubjectsRelationshipsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataSubjectsRelationshipsUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataSubjectsRelationshipsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection_id}/collected_metadata/{cgm_id}/relationships/subjects/', \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataSubjectsRelationshipsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CollectionsMetadataSubjectsRelationshipsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }

        return $response;
    }
}