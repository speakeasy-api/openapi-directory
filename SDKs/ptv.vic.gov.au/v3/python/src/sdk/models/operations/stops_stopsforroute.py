"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import v3_errorresponse as shared_v3_errorresponse
from ..shared import v3_stopsonrouteresponse as shared_v3_stopsonrouteresponse
from datetime import datetime
from enum import Enum
from typing import Optional

class StopsStopsForRouteRouteTypeEnum(str, Enum):
    r"""Number identifying transport mode; values returned via RouteTypes API"""
    ZERO = '0'
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'


@dataclasses.dataclass
class StopsStopsForRouteRequest:
    
    route_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'route_id', 'style': 'simple', 'explode': False }})
    r"""Identifier of route; values returned by Routes API - v3/routes"""  
    route_type: StopsStopsForRouteRouteTypeEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'route_type', 'style': 'simple', 'explode': False }})
    r"""Number identifying transport mode; values returned via RouteTypes API"""  
    devid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'devid', 'style': 'form', 'explode': True }})
    r"""Your developer id"""  
    direction_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction_id', 'style': 'form', 'explode': True }})
    r"""An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response."""  
    geopath_utc: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'geopath_utc', 'style': 'form', 'explode': True }})
    r"""Filter geopaths by date (ISO 8601 UTC format) (default = current date)"""  
    include_geopath: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_geopath', 'style': 'form', 'explode': True }})
    r"""Indicates if geopath data will be returned (default = false)"""  
    signature: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'signature', 'style': 'form', 'explode': True }})
    r"""Authentication signature for request"""  
    stop_disruptions: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'stop_disruptions', 'style': 'form', 'explode': True }})
    r"""Indicates if stop disruption information will be returned (default = false)"""  
    token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'token', 'style': 'form', 'explode': True }})
    r"""Please ignore"""  
    

@dataclasses.dataclass
class StopsStopsForRouteResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    v3_error_response: Optional[shared_v3_errorresponse.V3ErrorResponse] = dataclasses.field(default=None)
    r"""Invalid Request"""  
    v3_stops_on_route_response: Optional[shared_v3_stopsonrouteresponse.V3StopsOnRouteResponse] = dataclasses.field(default=None)
    r"""All stops on the specified route."""  
    