"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TransactionProcess:
    r"""This is meant to explain the requests that are necessary to complete a transaction using PCI Gateway."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def one_createanewtransaction(self, request: operations.OneCreateanewtransactionRequest) -> operations.OneCreateanewtransactionResponse:
        r"""1. Starts a new transaction
        This request is the first step to create a new transaction.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/pvt/transactions'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "one_createanewtransaction_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OneCreateanewtransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StartTransactionResponse])
                res.start_transaction_response = out

        return res

    def two_send_payments_public(self, request: operations.TwoSendPaymentsPublicRequest) -> operations.TwoSendPaymentsPublicResponse:
        r"""2.1 Send Payments Information Public
        The second step to create a new transaction. Here, you have the option to send the data in three diferent ways: doing a private request, a public request or a private request that uses a saved Credit Card.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TwoSendPaymentsPublicRequest, base_url, '/api/pub/transactions/{transactionId}/payments', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.TwoSendPaymentsPublicRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TwoSendPaymentsPublicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def two_send_payments_with_saved_credit_card(self, request: operations.TwoSendPaymentsWithSavedCreditCardRequest) -> operations.TwoSendPaymentsWithSavedCreditCardResponse:
        r"""2.2 Send Payments With Saved Credit Card
        The second step to create a new transaction. Here, you have the option to send the data in three diferent ways: doing a private request, a public request or a private request that uses a saved Credit Card.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TwoSendPaymentsWithSavedCreditCardRequest, base_url, '/api/pvt/transactions/{transactionId}/payments', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TwoSendPaymentsWithSavedCreditCardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def three_send_additional_data(self, request: operations.ThreeSendAdditionalDataRequest) -> operations.ThreeSendAdditionalDataResponse:
        r"""3. Send Additional Data
        The third step to create a new transaction. It will send the additional related data to the transaction, like billig and shipping adress.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ThreeSendAdditionalDataRequest, base_url, '/api/pvt/transactions/{transactionId}/additional-data', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ThreeSendAdditionalDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def four_doauthorization(self, request: operations.FourDoauthorizationRequest) -> operations.FourDoauthorizationResponse:
        r"""Do authorization
        The fouth and last step to create a new transaction. It will authorized the new transction creation acorrdint to the data previously informed in the latests requests.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FourDoauthorizationRequest, base_url, '/api/pvt/transactions/{transactionId}/authorization-request', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "four_doauthorization_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FourDoauthorizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def payment_details(self, request: operations.PaymentDetailsRequest) -> operations.PaymentDetailsResponse:
        r"""Payment Details
        Returns associated information details for the specified payment id.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PaymentDetailsRequest, base_url, '/api/pvt/transactions/{transactionId}/payments/{paymentId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PaymentDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentDetailsResponse])
                res.payment_details_response = out

        return res

    def transaction_details(self, request: operations.TransactionDetailsRequest) -> operations.TransactionDetailsResponse:
        r"""Transaction Details
        Returns associated data for the specified transaction id, like value and status, for exemple.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TransactionDetailsRequest, base_url, '/api/pvt/transactions/{transactionId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TransactionDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TransactionDetailsResponse])
                res.transaction_details_response = out

        return res

    def transaction_settlement_details(self, request: operations.TransactionSettlementDetailsRequest) -> operations.TransactionSettlementDetailsResponse:
        r"""Transaction Settlement  Details
        Returns associated settlements data for the specified transaction id.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TransactionSettlementDetailsRequest, base_url, '/api/pvt/transactions/{transactionId}/settlements', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TransactionSettlementDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TransactionSettlementDetails])
                res.transaction_settlement_details = out

        return res

    