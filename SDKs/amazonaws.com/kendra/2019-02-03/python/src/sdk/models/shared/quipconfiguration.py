"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datasourcetoindexfieldmapping as shared_datasourcetoindexfieldmapping
from ..shared import datasourcevpcconfiguration as shared_datasourcevpcconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QuipConfiguration:
    r"""Provides the configuration information to connect to Quip as your data source."""
    
    domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Domain') }})  
    secret_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecretArn') }})  
    attachment_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttachmentFieldMappings'), 'exclude': lambda f: f is None }})  
    crawl_attachments: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CrawlAttachments'), 'exclude': lambda f: f is None }})  
    crawl_chat_rooms: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CrawlChatRooms'), 'exclude': lambda f: f is None }})  
    crawl_file_comments: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CrawlFileComments'), 'exclude': lambda f: f is None }})  
    exclusion_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExclusionPatterns'), 'exclude': lambda f: f is None }})  
    folder_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FolderIds'), 'exclude': lambda f: f is None }})  
    inclusion_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InclusionPatterns'), 'exclude': lambda f: f is None }})  
    message_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MessageFieldMappings'), 'exclude': lambda f: f is None }})  
    thread_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThreadFieldMappings'), 'exclude': lambda f: f is None }})  
    vpc_configuration: Optional[shared_datasourcevpcconfiguration.DataSourceVpcConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcConfiguration'), 'exclude': lambda f: f is None }})  
    