<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CashDrawerShift - This model gives the details of a cash drawer shift.
 * 
 * The cash_payment_money, cash_refund_money, cash_paid_in_money,
 * and cash_paid_out_money fields are all computed by summing their respective
 * event types.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CashDrawerShift
{
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $cashPaidInMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('cash_paid_in_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $cashPaidInMoney = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $cashPaidOutMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('cash_paid_out_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $cashPaidOutMoney = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $cashPaymentMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('cash_payment_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $cashPaymentMoney = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $cashRefundsMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('cash_refunds_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $cashRefundsMoney = null;
    
    /**
     * The time when the shift was closed, in ISO 8601 format.
     * 
     * @var ?string $closedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('closed_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $closedAt = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $closedCashMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('closed_cash_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $closedCashMoney = null;
    
    /**
     * The ID of the employee that closed the cash drawer shift by auditing
     * 
     * the cash drawer contents.
     * 
     * @var ?string $closingEmployeeId
     */
	#[\JMS\Serializer\Annotation\SerializedName('closing_employee_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $closingEmployeeId = null;
    
    /**
     * The free-form text description of a cash drawer by an employee.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('device')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CashDrawerDevice')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CashDrawerDevice $device = null;
    
    /**
     * The IDs of all employees that were logged into Square Point of Sale at any
     * 
     * point while the cash drawer shift was open.
     * 
     * @var ?array<string> $employeeIds
     */
	#[\JMS\Serializer\Annotation\SerializedName('employee_ids')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $employeeIds = null;
    
    /**
     * The time when the shift ended, in ISO 8601 format.
     * 
     * @var ?string $endedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('ended_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $endedAt = null;
    
    /**
     * The ID of the employee that ended the cash drawer shift.
     * 
     * @var ?string $endingEmployeeId
     */
	#[\JMS\Serializer\Annotation\SerializedName('ending_employee_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $endingEmployeeId = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $expectedCashMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('expected_cash_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $expectedCashMoney = null;
    
    /**
     * The shift unique ID.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The time when the shift began, in ISO 8601 format.
     * 
     * @var ?string $openedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('opened_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $openedAt = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $openedCashMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('opened_cash_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $openedCashMoney = null;
    
    /**
     * The ID of the employee that started the cash drawer shift.
     * 
     * @var ?string $openingEmployeeId
     */
	#[\JMS\Serializer\Annotation\SerializedName('opening_employee_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $openingEmployeeId = null;
    
    /**
     * The shift current state.
     * 
     * @var ?string $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $state = null;
    
	public function __construct()
	{
		$this->cashPaidInMoney = null;
		$this->cashPaidOutMoney = null;
		$this->cashPaymentMoney = null;
		$this->cashRefundsMoney = null;
		$this->closedAt = null;
		$this->closedCashMoney = null;
		$this->closingEmployeeId = null;
		$this->description = null;
		$this->device = null;
		$this->employeeIds = null;
		$this->endedAt = null;
		$this->endingEmployeeId = null;
		$this->expectedCashMoney = null;
		$this->id = null;
		$this->openedAt = null;
		$this->openedCashMoney = null;
		$this->openingEmployeeId = null;
		$this->state = null;
	}
}
