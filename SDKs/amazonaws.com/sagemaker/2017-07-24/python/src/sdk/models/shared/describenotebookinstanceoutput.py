"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import directinternetaccess_enum as shared_directinternetaccess_enum
from ..shared import instancemetadataserviceconfiguration as shared_instancemetadataserviceconfiguration
from ..shared import instancetype_enum as shared_instancetype_enum
from ..shared import notebookinstanceacceleratortype_enum as shared_notebookinstanceacceleratortype_enum
from ..shared import notebookinstancestatus_enum as shared_notebookinstancestatus_enum
from ..shared import rootaccess_enum as shared_rootaccess_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeNotebookInstanceOutput:
    r"""Success"""
    
    accelerator_types: Optional[list[shared_notebookinstanceacceleratortype_enum.NotebookInstanceAcceleratorTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AcceleratorTypes'), 'exclude': lambda f: f is None }})  
    additional_code_repositories: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalCodeRepositories'), 'exclude': lambda f: f is None }})  
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    default_code_repository: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultCodeRepository'), 'exclude': lambda f: f is None }})  
    direct_internet_access: Optional[shared_directinternetaccess_enum.DirectInternetAccessEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DirectInternetAccess'), 'exclude': lambda f: f is None }})  
    failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureReason'), 'exclude': lambda f: f is None }})  
    instance_metadata_service_configuration: Optional[shared_instancemetadataserviceconfiguration.InstanceMetadataServiceConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceMetadataServiceConfiguration'), 'exclude': lambda f: f is None }})  
    instance_type: Optional[shared_instancetype_enum.InstanceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceType'), 'exclude': lambda f: f is None }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})  
    last_modified_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    network_interface_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkInterfaceId'), 'exclude': lambda f: f is None }})  
    notebook_instance_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotebookInstanceArn'), 'exclude': lambda f: f is None }})  
    notebook_instance_lifecycle_config_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotebookInstanceLifecycleConfigName'), 'exclude': lambda f: f is None }})  
    notebook_instance_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotebookInstanceName'), 'exclude': lambda f: f is None }})  
    notebook_instance_status: Optional[shared_notebookinstancestatus_enum.NotebookInstanceStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotebookInstanceStatus'), 'exclude': lambda f: f is None }})  
    platform_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlatformIdentifier'), 'exclude': lambda f: f is None }})  
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn'), 'exclude': lambda f: f is None }})  
    root_access: Optional[shared_rootaccess_enum.RootAccessEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RootAccess'), 'exclude': lambda f: f is None }})  
    security_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityGroups'), 'exclude': lambda f: f is None }})  
    subnet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubnetId'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Url'), 'exclude': lambda f: f is None }})  
    volume_size_in_gb: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VolumeSizeInGB'), 'exclude': lambda f: f is None }})  
    