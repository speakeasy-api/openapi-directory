"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetRelatedWordsRelationshipTypesEnum(str, Enum):
    r"""Limits the total results per type of relationship type"""
    SYNONYM = 'synonym'
    ANTONYM = 'antonym'
    VARIANT = 'variant'
    EQUIVALENT = 'equivalent'
    CROSS_REFERENCE = 'cross-reference'
    RELATED_WORD = 'related-word'
    RHYME = 'rhyme'
    FORM = 'form'
    ETYMOLOGICALLY_RELATED_TERM = 'etymologically-related-term'
    HYPERNYM = 'hypernym'
    HYPONYM = 'hyponym'
    INFLECTED_FORM = 'inflected-form'
    PRIMARY = 'primary'
    SAME_CONTEXT = 'same-context'
    VERB_FORM = 'verb-form'
    VERB_STEM = 'verb-stem'
    HAS_TOPIC = 'has_topic'

class GetRelatedWordsUseCanonicalEnum(str, Enum):
    r"""If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested."""
    FALSE = 'false'
    TRUE = 'true'


@dataclasses.dataclass
class GetRelatedWordsRequest:
    
    word: str = dataclasses.field(metadata={'path_param': { 'field_name': 'word', 'style': 'simple', 'explode': False }})
    r"""Word to fetch relationships for"""  
    limit_per_relationship_type: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limitPerRelationshipType', 'style': 'form', 'explode': True }})
    r"""Restrict to the supplied relationship types"""  
    relationship_types: Optional[GetRelatedWordsRelationshipTypesEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'relationshipTypes', 'style': 'form', 'explode': True }})
    r"""Limits the total results per type of relationship type"""  
    use_canonical: Optional[GetRelatedWordsUseCanonicalEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'useCanonical', 'style': 'form', 'explode': True }})
    r"""If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested."""  
    

@dataclasses.dataclass
class GetRelatedWordsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    