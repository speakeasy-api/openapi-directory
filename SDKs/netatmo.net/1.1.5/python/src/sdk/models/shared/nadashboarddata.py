"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NADashboardData:
    
    absolute_pressure: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AbsolutePressure'), 'exclude': lambda f: f is None }})
    r"""Real measured pressure @ time_utc (in mb)"""  
    boiler_off: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BoilerOff'), 'exclude': lambda f: f is None }})  
    boiler_on: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BoilerOn'), 'exclude': lambda f: f is None }})  
    co2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CO2'), 'exclude': lambda f: f is None }})
    r"""Last Co2 measured @ time_utc (in ppm)"""  
    date_max_temp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_max_temp'), 'exclude': lambda f: f is None }})
    r"""Timestamp when max temperature was measured"""  
    date_max_wind_str: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_max_wind_str'), 'exclude': lambda f: f is None }})
    r"""Timestamp when max wind strength was measured"""  
    date_min_temp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_min_temp'), 'exclude': lambda f: f is None }})
    r"""Timestamp when min temperature was measured"""  
    device_id: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_id'), 'exclude': lambda f: f is None }})  
    gust_angle: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GustAngle'), 'exclude': lambda f: f is None }})
    r"""Direction of the last 5 min highest gust wind"""  
    gust_strength: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GustStrength'), 'exclude': lambda f: f is None }})
    r"""Speed of the last 5 min highest gust wind"""  
    health_idx: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('health_idx'), 'exclude': lambda f: f is None }})
    r"""Current health index: 0 = Healthy, 1 = Fine, 2 = Fair, 3 = Poor, 4 = Unhealthy"""  
    humidity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Humidity'), 'exclude': lambda f: f is None }})
    r"""Last humidity measured @ time_utc (in %)"""  
    max_temp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_temp'), 'exclude': lambda f: f is None }})
    r"""Min temperature of the day (measured @ date_min_temp)"""  
    max_wind_str: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_wind_str'), 'exclude': lambda f: f is None }})  
    min_temp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_temp'), 'exclude': lambda f: f is None }})
    r"""Max temperature of the day (measured @ date_max_temp)"""  
    noise: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Noise'), 'exclude': lambda f: f is None }})
    r"""Last noise measured @ time_utc (in db)"""  
    pressure: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Pressure'), 'exclude': lambda f: f is None }})
    r"""Last Sea level pressure measured @ time_utc (in mb)"""  
    pressure_trend: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pressure_trend'), 'exclude': lambda f: f is None }})
    r"""Pressure evolution trend"""  
    rain: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Rain'), 'exclude': lambda f: f is None }})
    r"""Last rain measured (in mm)"""  
    sum_rain_1: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sum_rain_1'), 'exclude': lambda f: f is None }})
    r"""Amount of rain in last hour"""  
    sum_rain_24: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sum_rain_24'), 'exclude': lambda f: f is None }})
    r"""Amount of rain today"""  
    temp_trend: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('temp_trend'), 'exclude': lambda f: f is None }})
    r"""Temperature evolution trend"""  
    temperature: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Temperature'), 'exclude': lambda f: f is None }})
    r"""Last temperature measure @ time_utc (in °C)"""  
    time_utc: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_utc'), 'exclude': lambda f: f is None }})  
    wind_angle: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WindAngle'), 'exclude': lambda f: f is None }})
    r"""Current 5 min average wind direction measured @ time_utc (in °)"""  
    wind_strength: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WindStrength'), 'exclude': lambda f: f is None }})
    r"""Current 5 min average wind speed measured @ time_utc (in km/h)"""  
    