/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class WebinarUpdateJsonSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

/**
 * Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
 */
export enum WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnum {
  Minus1 = "-1",
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
}

/**
 * Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
 *
 * @remarks
 *
 * <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
 */
export enum WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum {
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
  Five = "5",
  Six = "6",
  Seven = "7",
}

/**
 * Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
 */
export enum WebinarUpdateApplicationJSONRecurrenceTypeEnum {
  One = "1",
  Two = "2",
  Three = "3",
}

/**
 * This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
 *
 * @remarks
 *
 *  <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
 */
export enum WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum {
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
  Five = "5",
  Six = "6",
  Seven = "7",
}

/**
 * Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
 */
export class WebinarUpdateApplicationJSONRecurrence extends SpeakeasyBase {
  /**
   * Select the final date on which the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with "end_times".)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_date_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endDateTime?: Date;

  /**
   * Select how many times the meeting should recur before it is canceled. (Cannot be used with "end_date_time".)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_times" })
  endTimes?: number;

  /**
   * Use this field **only if you're scheduling a recurring meeting of type** `3` to state which day in a month, the meeting should recur. The value range is from 1 to 31.
   *
   * @remarks
   *
   * For instance, if you would like the meeting to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the meeting to recur every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "monthly_day" })
  monthlyDay?: number;

  /**
   * Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "monthly_week" })
  monthlyWeek?: WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnum;

  /**
   * Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
   *
   * @remarks
   *
   * <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "monthly_week_day" })
  monthlyWeekDay?: WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum;

  /**
   * Define the interval at which the meeting should recur. For instance, if you would like to schedule a meeting that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
   *
   * @remarks
   *
   * For a daily meeting, the maximum interval you can set is `90` days. For a weekly meeting the maximum interval that you can set is  of `12` weeks. For a monthly meeting, there is a maximum of `3` months.
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repeat_interval" })
  repeatInterval?: number;

  /**
   * Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: WebinarUpdateApplicationJSONRecurrenceTypeEnum;

  /**
   * This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
   *
   * @remarks
   *
   *  <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "weekly_days" })
  weeklyDays?: WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum;
}

/**
 * `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
 */
export enum WebinarUpdateApplicationJSONSettingsApprovalTypeEnum {
  Zero = "0",
  One = "1",
  Two = "2",
}

/**
 * `0` - No plan.<br>`1` - Send 1 hour before webinar.<br>`2` - Send 1 day before webinar.<br>`3` - Send 1 hour and 1 day before webinar.<br>`4` - Send 1 week before webinar.<br>`5` - Send 1 hour and 1 week before webinar.<br>`6` - Send 1 day and 1 week before webinar.<br>`7` - Send 1 hour, 1 day and 1 week before webinar.
 */
export enum WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum {
  Zero = "0",
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
  Five = "5",
  Six = "6",
  Seven = "7",
}

/**
 * Send reminder email to attendees and panelists.
 */
export class WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification extends SpeakeasyBase {
  /**
   * * `true`: Send reminder email to attendees and panelists.
   *
   * @remarks
   *
   * * `false`: Do not send reminder email to attendees and panelists.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enable" })
  enable?: boolean;

  /**
   * `0` - No plan.<br>`1` - Send 1 hour before webinar.<br>`2` - Send 1 day before webinar.<br>`3` - Send 1 hour and 1 day before webinar.<br>`4` - Send 1 week before webinar.<br>`5` - Send 1 hour and 1 week before webinar.<br>`6` - Send 1 day and 1 week before webinar.<br>`7` - Send 1 hour, 1 day and 1 week before webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum;
}

/**
 * Determine how participants can join the audio portion of the webinar.
 */
export enum WebinarUpdateApplicationJSONSettingsAudioEnum {
  Both = "both",
  Telephony = "telephony",
  Voip = "voip",
}

/**
 * Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
 */
export enum WebinarUpdateApplicationJSONSettingsAutoRecordingEnum {
  Local = "local",
  Cloud = "cloud",
  None = "none",
}

/**
 * `0` - No plan.<br>`1` - Send 1 days after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
 */
export enum WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum {
  Zero = "0",
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
  Five = "5",
  Six = "6",
  Seven = "7",
}

/**
 * Send follow-up email to absentees.
 */
export class WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotification extends SpeakeasyBase {
  /**
   * * `true`: Send follow-up email to absentees.
   *
   * @remarks
   *
   * * `false`: Do not send follow-up email to absentees.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enable" })
  enable?: boolean;

  /**
   * `0` - No plan.<br>`1` - Send 1 days after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum;
}

/**
 * `0` - No plan.<br>`1` - Send 1 day after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
 */
export enum WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum {
  Zero = "0",
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
  Five = "5",
  Six = "6",
  Seven = "7",
}

/**
 * Send follow-up email to attendees.
 */
export class WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotification extends SpeakeasyBase {
  /**
   * * `true`: Send follow-up email to attendees.
   *
   * @remarks
   *
   * * `false`: Do not send follow-up email to attendees.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enable" })
  enable?: boolean;

  /**
   * `0` - No plan.<br>`1` - Send 1 day after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum;
}

/**
 * Indicate whether you want attendees to be able to view answered questions only or view all questions.
 *
 * @remarks
 *
 * * `only`: Attendees are able to view answered questions only.
 *
 * *  `all`: Attendees are able to view all questions submitted in the Q&A.
 */
export enum WebinarUpdateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum {
  Only = "only",
  All = "all",
}

/**
 * [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
 */
export class WebinarUpdateApplicationJSONSettingsQuestionAndAnswer extends SpeakeasyBase {
  /**
   * * `true`: Allow participants to send questions without providing their name to the host, co-host, and panelists..
   *
   * @remarks
   *
   * * `false`: Do not allow anonymous questions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_anonymous_questions" })
  allowAnonymousQuestions?: boolean;

  /**
   * Indicate whether you want attendees to be able to view answered questions only or view all questions.
   *
   * @remarks
   *
   * * `only`: Attendees are able to view answered questions only.
   *
   * *  `all`: Attendees are able to view all questions submitted in the Q&A.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "answer_questions" })
  answerQuestions?: WebinarUpdateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum;

  /**
   * * `true`: Attendees can answer questions or leave a comment in the question thread.
   *
   * @remarks
   *
   * * `false`: Attendees can not answer questions or leave a comment in the question thread
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attendees_can_comment" })
  attendeesCanComment?: boolean;

  /**
   * * `true`: Attendees can click the thumbs up button to bring popular questions to the top of the Q&A window.
   *
   * @remarks
   *
   * * `false`: Attendees can not click the thumbs up butoon on questions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attendees_can_upvote" })
  attendeesCanUpvote?: boolean;

  /**
   * * `true`: Enable [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
   *
   * @remarks
   *
   * * `false`: Disable Q&A for webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enable" })
  enable?: boolean;
}

/**
 * Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend.
 */
export enum WebinarUpdateApplicationJSONSettingsRegistrationTypeEnum {
  One = "1",
  Two = "2",
  Three = "3",
}

/**
 * Webinar settings.
 */
export class WebinarUpdateApplicationJSONSettings extends SpeakeasyBase {
  /**
   * Allow attendees to join from multiple devices.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_multiple_devices" })
  allowMultipleDevices?: boolean;

  /**
   * Alternative host emails or IDs. Multiple values separated by comma.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alternative_hosts" })
  alternativeHosts?: string;

  /**
   * `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "approval_type" })
  approvalType?: WebinarUpdateApplicationJSONSettingsApprovalTypeEnum;

  /**
   * Send reminder email to attendees and panelists.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attendees_and_panelists_reminder_email_notification" })
  @Type(
    () =>
      WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification
  )
  attendeesAndPanelistsReminderEmailNotification?: WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification;

  /**
   * Determine how participants can join the audio portion of the webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "audio" })
  audio?: WebinarUpdateApplicationJSONSettingsAudioEnum;

  /**
   * If user has configured ["Sign Into Zoom with Specified Domains"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authentication_domains" })
  authenticationDomains?: string;

  /**
   * Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authentication_name" })
  authenticationName?: string;

  /**
   * Webinar authentication option id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authentication_option" })
  authenticationOption?: string;

  /**
   * Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_recording" })
  autoRecording?: WebinarUpdateApplicationJSONSettingsAutoRecordingEnum;

  /**
   * Close registration after event date.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "close_registration" })
  closeRegistration?: boolean;

  /**
   * Contact email for registration
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contact_email" })
  contactEmail?: string;

  /**
   * Contact name for registration
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contact_name" })
  contactName?: string;

  /**
   * Set the email language to one of the following:
   *
   * @remarks
   * `en-US`,`de-DE`,`es-ES`,`fr-FR`,`jp-JP`,`pt-PT`,`ru-RU`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, `vi-VN`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email_language" })
  emailLanguage?: string;

  /**
   * Only signed in users can join this meeting.
   *
   * @remarks
   *
   * **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enforce_login" })
  enforceLogin?: boolean;

  /**
   * Only signed in users with specified domains can join meetings.
   *
   * @remarks
   *
   * **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enforce_login_domains" })
  enforceLoginDomains?: string;

  /**
   * Send follow-up email to absentees.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "follow_up_absentees_email_notification" })
  @Type(
    () => WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotification
  )
  followUpAbsenteesEmailNotification?: WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotification;

  /**
   * Send follow-up email to attendees.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "follow_up_attendees_email_notification" })
  @Type(
    () => WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotification
  )
  followUpAttendeesEmailNotification?: WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotification;

  /**
   * List of global dial-in countries
   */
  @SpeakeasyMetadata()
  @Expose({ name: "global_dial_in_countries" })
  globalDialInCountries?: string[];

  /**
   * Default to HD video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hd_video" })
  hdVideo?: boolean;

  /**
   * Start video when host joins webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host_video" })
  hostVideo?: boolean;

  /**
   * `true`- Only authenticated users can join Webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meeting_authentication" })
  meetingAuthentication?: boolean;

  /**
   * Send notification email to registrants when the host updates a webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notify_registrants" })
  notifyRegistrants?: boolean;

  /**
   * Make the webinar on-demand
   */
  @SpeakeasyMetadata()
  @Expose({ name: "on_demand" })
  onDemand?: boolean;

  /**
   * * `true`: Send invitation email to panelists.
   *
   * @remarks
   *
   * * `false`: Do not send invitation email to panelists.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "panelists_invitation_email_notification" })
  panelistsInvitationEmailNotification?: boolean;

  /**
   * Start video when panelists join webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "panelists_video" })
  panelistsVideo?: boolean;

  /**
   * Zoom will open a survey page in attendees' browsers after leaving the webinar
   */
  @SpeakeasyMetadata()
  @Expose({ name: "post_webinar_survey" })
  postWebinarSurvey?: boolean;

  /**
   * Enable practice session.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "practice_session" })
  practiceSession?: boolean;

  /**
   * [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "question_and_answer" })
  @Type(() => WebinarUpdateApplicationJSONSettingsQuestionAndAnswer)
  questionAndAnswer?: WebinarUpdateApplicationJSONSettingsQuestionAndAnswer;

  /**
   * Send confirmation email to registrants.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "registrants_confirmation_email" })
  registrantsConfirmationEmail?: boolean;

  /**
   * Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "registrants_email_notification" })
  registrantsEmailNotification?: boolean;

  /**
   * Restrict number of registrants for a webinar. By default, it is set to `0`. A `0` value means that the restriction option is disabled. Provide a number higher than 0 to restrict the webinar registrants by the that number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "registrants_restrict_number" })
  registrantsRestrictNumber?: number;

  /**
   * Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "registration_type" })
  registrationType?: WebinarUpdateApplicationJSONSettingsRegistrationTypeEnum;

  /**
   * Show social share buttons on the registration page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "show_share_button" })
  showShareButton?: boolean;

  /**
   * Survey url for post webinar survey
   */
  @SpeakeasyMetadata()
  @Expose({ name: "survey_url" })
  surveyUrl?: string;
}

export class WebinarUpdateApplicationJSONTrackingFields extends SpeakeasyBase {
  /**
   * Tracking fields type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field" })
  field?: string;

  /**
   * Tracking fields value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * Webinar Types:<br>`5` - webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time.
 */
export enum WebinarUpdateApplicationJSONTypeEnum {
  Five = "5",
  Six = "6",
  Nine = "9",
}

/**
 * Base webinar object for sessions.
 */
export class WebinarUpdateApplicationJSON extends SpeakeasyBase {
  /**
   * Webinar description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "agenda" })
  agenda?: string;

  /**
   * Webinar duration (minutes). Used for scheduled webinar only.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: number;

  /**
   * [Webinar passcode](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords). By default, passcode may only contain the following characters: [a-z A-Z 0-9 @ - _ * !] and can have a maximum of 10 characters.
   *
   * @remarks
   *
   * **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the  [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API.
   *
   * If "**Require a passcode when scheduling new meetings**" setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request. <br><br>
   *
   *
   *
   *
   *
   *
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;

  /**
   * Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recurrence" })
  @Type(() => WebinarUpdateApplicationJSONRecurrence)
  recurrence?: WebinarUpdateApplicationJSONRecurrence;

  @SpeakeasyMetadata()
  @Expose({ name: "settings" })
  @Type(() => WebinarUpdateApplicationJSONSettings)
  settings?: WebinarUpdateApplicationJSONSettings;

  /**
   * Webinar start time, in the format "yyyy-MM-dd'T'HH:mm:ss'Z'." Should be in GMT time. In the format "yyyy-MM-dd'T'HH:mm:ss." This should be in local time and the timezone should be specified. Only used for scheduled webinars and recurring webinars with a fixed time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  /**
   * Time zone to format start_time. For example, "America/Los_Angeles". For scheduled meetings only. Please reference our [time zone](#timezones) list for supported time zones and their formats.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timezone" })
  timezone?: string;

  /**
   * Webinar topic.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "topic" })
  topic?: string;

  /**
   * Tracking fields
   */
  @SpeakeasyMetadata({ elemType: WebinarUpdateApplicationJSONTrackingFields })
  @Expose({ name: "tracking_fields" })
  @Type(() => WebinarUpdateApplicationJSONTrackingFields)
  trackingFields?: WebinarUpdateApplicationJSONTrackingFields[];

  /**
   * Webinar Types:<br>`5` - webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: WebinarUpdateApplicationJSONTypeEnum;
}

export class WebinarUpdateJsonRequest extends SpeakeasyBase {
  /**
   * Webinar.
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: WebinarUpdateApplicationJSON;

  /**
   * Webinar occurrence id. Support change of agenda, start_time, duration, settings: {host_video, panelist_video, hd_video, watermark, auto_recording}
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=occurrence_id",
  })
  occurrenceId?: string;

  /**
   * The webinar ID in "**long**" format(represented as int64 data type in JSON).
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=webinarId",
  })
  webinarId: number;
}

export class WebinarUpdateJsonResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
