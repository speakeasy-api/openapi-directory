/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { BeezUPCommonLinkParameterProperty3 } from "./beezupcommonlinkparameterproperty3";
import { BeezUPCommonLOVLink3 } from "./beezupcommonlovlink3";
import { BeezUPCommonParameterInEnum } from "./beezupcommonparameterinenum";
import { BeezUPCommonParameterTypeEnum } from "./beezupcommonparametertypeenum";
import { Expose, Transform, Type } from "class-transformer";

export class BeezUPCommonLinkParameter3 extends SpeakeasyBase {
  /**
   * description of the parameter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * * path: if the parameter must be pass in the path uri
   *
   * @remarks
   * * header: if the parameter must be passed in http header
   * * query: if the parameter must be passed in querystring
   * * body: if the paramter must be passed in the body
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "in" })
  in: BeezUPCommonParameterInEnum;

  /**
   * The label corresponding to the link parameter. This label is automatically translated based on the Accept-Language http header.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label?: string;

  /**
   * Describe the way you have to follow to get access to the LOV
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lovLink" })
  @Type(() => BeezUPCommonLOVLink3)
  lovLink?: BeezUPCommonLOVLink3;

  /**
   * If true, you MUST indicate a value from the list of values otherwise it's a freetext
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lovRequired" })
  lovRequired?: boolean;

  /**
   * If the parameter is an object with flexible properties (additionProperties/dictionary), we will describe the properties of the object.
   */
  @SpeakeasyMetadata({ elemType: BeezUPCommonLinkParameterProperty3 })
  @Expose({ name: "properties" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, BeezUPCommonLinkParameterProperty3> = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          BeezUPCommonLinkParameterProperty3
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  properties?: Record<string, BeezUPCommonLinkParameterProperty3>;

  @SpeakeasyMetadata()
  @Expose({ name: "required" })
  required?: boolean;

  /**
   * schema of the parameter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schema" })
  schema?: string;

  /**
   * The value type of the parameter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: BeezUPCommonParameterTypeEnum;

  /**
   * The value of the parameter. It can be an integer a string or an object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: Record<string, any>;
}
