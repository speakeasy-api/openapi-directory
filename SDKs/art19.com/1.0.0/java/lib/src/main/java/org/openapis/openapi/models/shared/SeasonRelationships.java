/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class SeasonRelationships {
    /**
     * The cover art for this season. If there is no specific cover for the season,
     * the cover image of the series' cover art will be returned.
     * The `/images` endpoint provideds details to the image.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cascaded_cover_image")
    public SeasonRelationshipsCascadedCoverImage cascadedCoverImage;

    public SeasonRelationships withCascadedCoverImage(SeasonRelationshipsCascadedCoverImage cascadedCoverImage) {
        this.cascadedCoverImage = cascadedCoverImage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classification_inclusions")
    public SeasonRelationshipsAListOfClassificationsAssociatedWithTheSeason classificationInclusions;

    public SeasonRelationships withClassificationInclusions(SeasonRelationshipsAListOfClassificationsAssociatedWithTheSeason classificationInclusions) {
        this.classificationInclusions = classificationInclusions;
        return this;
    }
    
    /**
     * The cover image for the season
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cover_image")
    public SeasonRelationshipsCoverImage coverImage;

    public SeasonRelationships withCoverImage(SeasonRelationshipsCoverImage coverImage) {
        this.coverImage = coverImage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credits")
    public SeasonRelationshipsAListOfCreditsGivenToPeopleInTheSeason credits;

    public SeasonRelationships withCredits(SeasonRelationshipsAListOfCreditsGivenToPeopleInTheSeason credits) {
        this.credits = credits;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("episodes")
    public SeasonRelationshipsAListOfPublishedAndReleasedEpisodesWithAnActualMediaFileWithinTheSeason episodes;

    public SeasonRelationships withEpisodes(SeasonRelationshipsAListOfPublishedAndReleasedEpisodesWithAnActualMediaFileWithinTheSeason episodes) {
        this.episodes = episodes;
        return this;
    }
    
    /**
     * The first released episode within the season
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_released_episode")
    public SeasonRelationshipsFirstReleasedEpisode firstReleasedEpisode;

    public SeasonRelationships withFirstReleasedEpisode(SeasonRelationshipsFirstReleasedEpisode firstReleasedEpisode) {
        this.firstReleasedEpisode = firstReleasedEpisode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    public SeasonRelationshipsBothTheCoverImageAndTheCascadedCoverImageForTheSeason images;

    public SeasonRelationships withImages(SeasonRelationshipsBothTheCoverImageAndTheCascadedCoverImageForTheSeason images) {
        this.images = images;
        return this;
    }
    
    /**
     * The most recently released episode within the season
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_released_episode")
    public SeasonRelationshipsLastReleasedEpisode lastReleasedEpisode;

    public SeasonRelationships withLastReleasedEpisode(SeasonRelationshipsLastReleasedEpisode lastReleasedEpisode) {
        this.lastReleasedEpisode = lastReleasedEpisode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("series")
    public SeasonRelationshipsTheSeriesTheSeasonBelongsTo series;

    public SeasonRelationships withSeries(SeasonRelationshipsTheSeriesTheSeasonBelongsTo series) {
        this.series = series;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taggings")
    public SeasonRelationshipsAListOfAssociationsLinkingTagsToTheSeason taggings;

    public SeasonRelationships withTaggings(SeasonRelationshipsAListOfAssociationsLinkingTagsToTheSeason taggings) {
        this.taggings = taggings;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public SeasonRelationshipsAListOfTagsAssociatedWithTheSeason tags;

    public SeasonRelationships withTags(SeasonRelationshipsAListOfTagsAssociatedWithTheSeason tags) {
        this.tags = tags;
        return this;
    }
    
    public SeasonRelationships(){}
}
