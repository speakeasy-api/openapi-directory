// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AddAttachmentsToSetXAmzTargetEnum
type AddAttachmentsToSetXAmzTargetEnum string

const (
	AddAttachmentsToSetXAmzTargetEnumAwsSupport20130415AddAttachmentsToSet AddAttachmentsToSetXAmzTargetEnum = "AWSSupport_20130415.AddAttachmentsToSet"
)

func (e AddAttachmentsToSetXAmzTargetEnum) ToPointer() *AddAttachmentsToSetXAmzTargetEnum {
	return &e
}

func (e *AddAttachmentsToSetXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSSupport_20130415.AddAttachmentsToSet":
		*e = AddAttachmentsToSetXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddAttachmentsToSetXAmzTargetEnum: %v", v)
	}
}

type AddAttachmentsToSetRequest struct {
	AddAttachmentsToSetRequest shared.AddAttachmentsToSetRequest `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 AddAttachmentsToSetXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AddAttachmentsToSetResponse struct {
	// Success
	AddAttachmentsToSetResponse *shared.AddAttachmentsToSetResponse
	// AttachmentLimitExceeded
	AttachmentLimitExceeded interface{}
	// AttachmentSetExpired
	AttachmentSetExpired interface{}
	// AttachmentSetIdNotFound
	AttachmentSetIDNotFound interface{}
	// AttachmentSetSizeLimitExceeded
	AttachmentSetSizeLimitExceeded interface{}
	ContentType                    string
	// InternalServerError
	InternalServerError interface{}
	StatusCode          int
	RawResponse         *http.Response
}
