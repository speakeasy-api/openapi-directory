/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Account } from "./account";
import { AccountsCustomBatchRequestEntryLinkRequest } from "./accountscustombatchrequestentrylinkrequest";
import { Expose, Type } from "class-transformer";

/**
 * A batch entry encoding a single non-batch accounts request.
 */
export class AccountsCustomBatchRequestEntry extends SpeakeasyBase {
  /**
   * Account data. After the creation of a new account it may take a few minutes before it is fully operational. The methods delete, insert, and update require the admin role.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  @Type(() => Account)
  account?: Account;

  /**
   * The ID of the targeted account. Only defined if the method is not `insert`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountId" })
  accountId?: string;

  /**
   * An entry ID, unique within the batch request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batchId" })
  batchId?: number;

  /**
   * Whether the account should be deleted if the account has offers. Only applicable if the method is `delete`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "force" })
  force?: boolean;

  /**
   * Label IDs for the 'updatelabels' request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labelIds" })
  labelIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "linkRequest" })
  @Type(() => AccountsCustomBatchRequestEntryLinkRequest)
  linkRequest?: AccountsCustomBatchRequestEntryLinkRequest;

  /**
   * The ID of the managing account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantId" })
  merchantId?: string;

  /**
   * The method of the batch entry. Acceptable values are: - "`claimWebsite`" - "`delete`" - "`get`" - "`insert`" - "`link`" - "`update`"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method?: string;

  /**
   * Only applicable if the method is `claimwebsite`. Indicates whether or not to take the claim from another account in case there is a conflict.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "overwrite" })
  overwrite?: boolean;
}
