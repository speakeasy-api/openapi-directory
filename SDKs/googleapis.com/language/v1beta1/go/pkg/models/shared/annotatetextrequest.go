// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AnnotateTextRequestEncodingTypeEnum - The encoding type used by the API to calculate offsets.
type AnnotateTextRequestEncodingTypeEnum string

const (
	AnnotateTextRequestEncodingTypeEnumNone  AnnotateTextRequestEncodingTypeEnum = "NONE"
	AnnotateTextRequestEncodingTypeEnumUTF8  AnnotateTextRequestEncodingTypeEnum = "UTF8"
	AnnotateTextRequestEncodingTypeEnumUtf16 AnnotateTextRequestEncodingTypeEnum = "UTF16"
	AnnotateTextRequestEncodingTypeEnumUtf32 AnnotateTextRequestEncodingTypeEnum = "UTF32"
)

func (e AnnotateTextRequestEncodingTypeEnum) ToPointer() *AnnotateTextRequestEncodingTypeEnum {
	return &e
}

func (e *AnnotateTextRequestEncodingTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "UTF8":
		fallthrough
	case "UTF16":
		fallthrough
	case "UTF32":
		*e = AnnotateTextRequestEncodingTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnnotateTextRequestEncodingTypeEnum: %v", v)
	}
}

// AnnotateTextRequest - The request message for the text annotation API, which can perform multiple analysis types (sentiment, entities, and syntax) in one call.
type AnnotateTextRequest struct {
	// Represents the input to API methods.
	Document *Document `json:"document,omitempty"`
	// The encoding type used by the API to calculate offsets.
	EncodingType *AnnotateTextRequestEncodingTypeEnum `json:"encodingType,omitempty"`
	// All available features for sentiment, syntax, and semantic analysis. Setting each one to true will enable that specific analysis for the input.
	Features *Features `json:"features,omitempty"`
}
