// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type SymbolsGetSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type SymbolsGetRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The ID of the symbol (uuid of the symbol)
	SymbolID string `pathParam:"style=simple,explode=false,name=symbol_id"`
}

// SymbolsGet500ApplicationJSON - Internal error
type SymbolsGet500ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolsGet404ApplicationJSON - Not found
type SymbolsGet404ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolsGet403ApplicationJSON - Unauthorized
type SymbolsGet403ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolsGet200ApplicationJSONOriginEnum - The origin of the symbol file
type SymbolsGet200ApplicationJSONOriginEnum string

const (
	SymbolsGet200ApplicationJSONOriginEnumSystem SymbolsGet200ApplicationJSONOriginEnum = "System"
	SymbolsGet200ApplicationJSONOriginEnumUser   SymbolsGet200ApplicationJSONOriginEnum = "User"
)

func (e *SymbolsGet200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "System":
		fallthrough
	case "User":
		*e = SymbolsGet200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolsGet200ApplicationJSONOriginEnum: %s", s)
	}
}

// SymbolsGet200ApplicationJSONStatusEnum - Whether the symbol is ignored.
type SymbolsGet200ApplicationJSONStatusEnum string

const (
	SymbolsGet200ApplicationJSONStatusEnumAvailable SymbolsGet200ApplicationJSONStatusEnum = "available"
	SymbolsGet200ApplicationJSONStatusEnumIgnored   SymbolsGet200ApplicationJSONStatusEnum = "ignored"
)

func (e *SymbolsGet200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "ignored":
		*e = SymbolsGet200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolsGet200ApplicationJSONStatusEnum: %s", s)
	}
}

// SymbolsGet200ApplicationJSONTypeEnum - The type of the symbol for the current symbol upload
type SymbolsGet200ApplicationJSONTypeEnum string

const (
	SymbolsGet200ApplicationJSONTypeEnumApple           SymbolsGet200ApplicationJSONTypeEnum = "Apple"
	SymbolsGet200ApplicationJSONTypeEnumJavaScript      SymbolsGet200ApplicationJSONTypeEnum = "JavaScript"
	SymbolsGet200ApplicationJSONTypeEnumBreakpad        SymbolsGet200ApplicationJSONTypeEnum = "Breakpad"
	SymbolsGet200ApplicationJSONTypeEnumAndroidProguard SymbolsGet200ApplicationJSONTypeEnum = "AndroidProguard"
	SymbolsGet200ApplicationJSONTypeEnumUwp             SymbolsGet200ApplicationJSONTypeEnum = "UWP"
)

func (e *SymbolsGet200ApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Apple":
		fallthrough
	case "JavaScript":
		fallthrough
	case "Breakpad":
		fallthrough
	case "AndroidProguard":
		fallthrough
	case "UWP":
		*e = SymbolsGet200ApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolsGet200ApplicationJSONTypeEnum: %s", s)
	}
}

// SymbolsGet200ApplicationJSON - Success
type SymbolsGet200ApplicationJSON struct {
	// The other symbols in the same file
	AlternateSymbolIds []string `json:"alternate_symbol_ids"`
	// The application that this symbol belongs to
	AppID string `json:"app_id"`
	// The build number. Optional for Apple. Required for Android.
	Build *string `json:"build,omitempty"`
	// The origin of the symbol file
	Origin SymbolsGet200ApplicationJSONOriginEnum `json:"origin"`
	// The platform that this symbol is associated with
	Platform string `json:"platform"`
	// Whether the symbol is ignored.
	Status SymbolsGet200ApplicationJSONStatusEnum `json:"status"`
	// The unique id for this symbol (uuid)
	SymbolID string `json:"symbol_id"`
	// The id of the symbol upload this symbol belongs to.
	SymbolUploadID string `json:"symbol_upload_id"`
	// The type of the symbol for the current symbol upload
	Type SymbolsGet200ApplicationJSONTypeEnum `json:"type"`
	// The path name of the symbol file in blob storage
	URL string `json:"url"`
	// The version number. Optional for Apple. Required for Android.
	Version *string `json:"version,omitempty"`
}

type SymbolsGetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	SymbolsGet200ApplicationJSONObject *SymbolsGet200ApplicationJSON
	// Unauthorized
	SymbolsGet403ApplicationJSONObject *SymbolsGet403ApplicationJSON
	// Not found
	SymbolsGet404ApplicationJSONObject *SymbolsGet404ApplicationJSON
	// Internal error
	SymbolsGet500ApplicationJSONObject *SymbolsGet500ApplicationJSON
}
