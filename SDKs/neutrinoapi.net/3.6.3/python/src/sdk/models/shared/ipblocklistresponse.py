"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import blocklistsensor as shared_blocklistsensor
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IPBlocklistResponse:
    
    blocklists: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocklists') }})
    r"""An array of strings indicating which blocklist categories this IP is listed on"""  
    cidr: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cidr') }})
    r"""The CIDR address for this listing (only set if the IP is listed)"""  
    ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip') }})
    r"""The IP address"""  
    is_bot: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-bot') }})
    r"""IP is hosting a malicious bot or is part of a botnet. This is a broad category which includes brute-force crackers"""  
    is_dshield: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-dshield') }})
    r"""IP has been flagged as a significant attack source by DShield (dshield.org)"""  
    is_exploit_bot: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-exploit-bot') }})
    r"""IP is hosting an exploit finding bot or is running exploit scanning software"""  
    is_hijacked: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-hijacked') }})
    r"""IP is part of a hijacked netblock or a netblock controlled by a criminal organization"""  
    is_listed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-listed') }})
    r"""Is this IP on a blocklist"""  
    is_malware: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-malware') }})
    r"""IP is involved in distributing or is running malware"""  
    is_proxy: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-proxy') }})
    r"""IP has been detected as an anonymous web proxy or anonymous HTTP proxy"""  
    is_spam_bot: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-spam-bot') }})
    r"""IP address is hosting a spam bot, comment spamming or any other spamming type software"""  
    is_spider: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-spider') }})
    r"""IP is running a hostile web spider / web crawler"""  
    is_spyware: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-spyware') }})
    r"""IP is involved in distributing or is running spyware"""  
    is_tor: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-tor') }})
    r"""IP is a Tor node or running a Tor related service"""  
    is_vpn: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-vpn') }})
    r"""IP belongs to a public VPN provider (only set if the 'vpn-lookup' option is enabled)"""  
    last_seen: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last-seen') }})
    r"""The unix time when this IP was last seen on any blocklist. IPs are automatically removed after 7 days therefor this value will never be older than 7 days"""  
    list_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('list-count') }})
    r"""The number of blocklists the IP is listed on"""  
    sensors: list[shared_blocklistsensor.BlocklistSensor] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sensors') }})
    r"""An array of objects containing details on which specific sensors detected the IP"""  
    