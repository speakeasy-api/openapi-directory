"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import sourcecode as shared_sourcecode
from ..shared import strategy_enum as shared_strategy_enum
from ..shared import targetdestination_enum as shared_targetdestination_enum
from ..shared import transformationtoolname_enum as shared_transformationtoolname_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateApplicationComponentConfigRequestBodyAppTypeEnum(str, Enum):
    r"""The type of known component."""
    DOT_NET_FRAMEWORK = 'DotNetFramework'
    JAVA = 'Java'
    SQL_SERVER = 'SQLServer'
    IIS = 'IIS'
    ORACLE = 'Oracle'
    OTHER = 'Other'
    TOMCAT = 'Tomcat'
    J_BOSS = 'JBoss'
    SPRING = 'Spring'
    MONGO_DB = 'Mongo DB'
    DB2 = 'DB2'
    MARIA_DB = 'Maria DB'
    MY_SQL = 'MySQL'
    SYBASE = 'Sybase'
    POSTGRE_SQL_SERVER = 'PostgreSQLServer'
    CASSANDRA = 'Cassandra'
    IBM_WEB_SPHERE = 'IBM WebSphere'
    ORACLE_WEB_LOGIC = 'Oracle WebLogic'
    VISUAL_BASIC = 'Visual Basic'
    UNKNOWN = 'Unknown'
    DOTNET_CORE = 'DotnetCore'
    DOTNET = 'Dotnet'

class UpdateApplicationComponentConfigRequestBodyInclusionStatusEnum(str, Enum):
    r"""Indicates whether the application component has been included for server recommendation or not."""
    EXCLUDE_FROM_ASSESSMENT = 'excludeFromAssessment'
    INCLUDE_IN_ASSESSMENT = 'includeInAssessment'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateApplicationComponentConfigRequestBodyStrategyOption:
    r"""Information about all the available strategy options for migrating and modernizing an application component."""
    
    is_preferred: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPreferred'), 'exclude': lambda f: f is None }})  
    strategy: Optional[shared_strategy_enum.StrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('strategy'), 'exclude': lambda f: f is None }})  
    target_destination: Optional[shared_targetdestination_enum.TargetDestinationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetDestination'), 'exclude': lambda f: f is None }})  
    tool_name: Optional[shared_transformationtoolname_enum.TransformationToolNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toolName'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateApplicationComponentConfigRequestBody:
    
    application_component_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationComponentId') }})
    r"""The ID of the application component. The ID is unique within an AWS account."""  
    app_type: Optional[UpdateApplicationComponentConfigRequestBodyAppTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appType'), 'exclude': lambda f: f is None }})
    r"""The type of known component."""  
    configure_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configureOnly'), 'exclude': lambda f: f is None }})
    r"""Update the configuration request of an application component. If it is set to true, the source code and/or database credentials are updated. If it is set to false, the source code and/or database credentials are updated and an analysis is initiated."""  
    inclusion_status: Optional[UpdateApplicationComponentConfigRequestBodyInclusionStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inclusionStatus'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the application component has been included for server recommendation or not."""  
    secrets_manager_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secretsManagerKey'), 'exclude': lambda f: f is None }})
    r"""Database credentials."""  
    source_code_list: Optional[list[shared_sourcecode.SourceCode]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceCodeList'), 'exclude': lambda f: f is None }})
    r"""The list of source code configurations to update for the application component."""  
    strategy_option: Optional[UpdateApplicationComponentConfigRequestBodyStrategyOption] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('strategyOption'), 'exclude': lambda f: f is None }})
    r"""Information about all the available strategy options for migrating and modernizing an application component."""  
    

@dataclasses.dataclass
class UpdateApplicationComponentConfigRequest:
    
    request_body: UpdateApplicationComponentConfigRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateApplicationComponentConfigResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_application_component_config_response: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    