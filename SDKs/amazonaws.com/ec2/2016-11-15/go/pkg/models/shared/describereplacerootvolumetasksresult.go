// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTags - Describes a tag.
type DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTags struct {
	Key   *string
	Value *string
}

// DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnum - <p>The state of the task. The task can be in one of the following states:</p> <ul> <li> <p> <code>pending</code> - the replacement volume is being created.</p> </li> <li> <p> <code>in-progress</code> - the original volume is being detached and the replacement volume is being attached.</p> </li> <li> <p> <code>succeeded</code> - the replacement volume has been successfully attached to the instance and the instance is available.</p> </li> <li> <p> <code>failing</code> - the replacement task is in the process of failing.</p> </li> <li> <p> <code>failed</code> - the replacement task has failed but the original root volume is still attached.</p> </li> <li> <p> <code>failing-detached</code> - the replacement task is in the process of failing. The instance might have no root volume attached.</p> </li> <li> <p> <code>failed-detached</code> - the replacement task has failed and the instance has no root volume attached.</p> </li> </ul>
type DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnum string

const (
	DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnumPending        DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnum = "pending"
	DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnumInProgress     DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnum = "in-progress"
	DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnumFailing        DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnum = "failing"
	DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnumSucceeded      DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnum = "succeeded"
	DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnumFailed         DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnum = "failed"
	DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnumFailedDetached DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnum = "failed-detached"
)

func (e DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnum) ToPointer() *DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnum {
	return &e
}

func (e *DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "in-progress":
		fallthrough
	case "failing":
		fallthrough
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "failed-detached":
		*e = DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnum: %v", v)
	}
}

// DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasks - Information about a root volume replacement task.
type DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasks struct {
	CompleteTime             *string
	DeleteReplacedRootVolume *bool
	ImageID                  *string
	InstanceID               *string
	ReplaceRootVolumeTaskID  *string
	SnapshotID               *string
	StartTime                *string
	Tags                     []DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTags
	TaskState                *DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasksTaskStateEnum
}

// DescribeReplaceRootVolumeTasksResult - Success
type DescribeReplaceRootVolumeTasksResult struct {
	NextToken              *string
	ReplaceRootVolumeTasks []DescribeReplaceRootVolumeTasksResultReplaceRootVolumeTasks
}
