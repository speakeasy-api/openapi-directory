// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCreateNetworkInterfacePermissionActionEnum
type GETCreateNetworkInterfacePermissionActionEnum string

const (
	GETCreateNetworkInterfacePermissionActionEnumCreateNetworkInterfacePermission GETCreateNetworkInterfacePermissionActionEnum = "CreateNetworkInterfacePermission"
)

func (e GETCreateNetworkInterfacePermissionActionEnum) ToPointer() *GETCreateNetworkInterfacePermissionActionEnum {
	return &e
}

func (e *GETCreateNetworkInterfacePermissionActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CreateNetworkInterfacePermission":
		*e = GETCreateNetworkInterfacePermissionActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateNetworkInterfacePermissionActionEnum: %v", v)
	}
}

// GETCreateNetworkInterfacePermissionPermissionEnum - The type of permission to grant.
type GETCreateNetworkInterfacePermissionPermissionEnum string

const (
	GETCreateNetworkInterfacePermissionPermissionEnumInstanceAttach GETCreateNetworkInterfacePermissionPermissionEnum = "INSTANCE-ATTACH"
	GETCreateNetworkInterfacePermissionPermissionEnumEipAssociate   GETCreateNetworkInterfacePermissionPermissionEnum = "EIP-ASSOCIATE"
)

func (e GETCreateNetworkInterfacePermissionPermissionEnum) ToPointer() *GETCreateNetworkInterfacePermissionPermissionEnum {
	return &e
}

func (e *GETCreateNetworkInterfacePermissionPermissionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INSTANCE-ATTACH":
		fallthrough
	case "EIP-ASSOCIATE":
		*e = GETCreateNetworkInterfacePermissionPermissionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateNetworkInterfacePermissionPermissionEnum: %v", v)
	}
}

// GETCreateNetworkInterfacePermissionVersionEnum
type GETCreateNetworkInterfacePermissionVersionEnum string

const (
	GETCreateNetworkInterfacePermissionVersionEnumTwoThousandAndSixteen1115 GETCreateNetworkInterfacePermissionVersionEnum = "2016-11-15"
)

func (e GETCreateNetworkInterfacePermissionVersionEnum) ToPointer() *GETCreateNetworkInterfacePermissionVersionEnum {
	return &e
}

func (e *GETCreateNetworkInterfacePermissionVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETCreateNetworkInterfacePermissionVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateNetworkInterfacePermissionVersionEnum: %v", v)
	}
}

type GETCreateNetworkInterfacePermissionRequest struct {
	Action GETCreateNetworkInterfacePermissionActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The Amazon Web Services account ID.
	AwsAccountID *string `queryParam:"style=form,explode=true,name=AwsAccountId"`
	// The Amazon Web Service. Currently not supported.
	AwsService *string `queryParam:"style=form,explode=true,name=AwsService"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the network interface.
	NetworkInterfaceID string `queryParam:"style=form,explode=true,name=NetworkInterfaceId"`
	// The type of permission to grant.
	Permission        GETCreateNetworkInterfacePermissionPermissionEnum `queryParam:"style=form,explode=true,name=Permission"`
	Version           GETCreateNetworkInterfacePermissionVersionEnum    `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCreateNetworkInterfacePermissionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
