<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


/**
 * PostOauthAccessTokenRequestBody - OAuth Parameters
 * 
 * @package OpenAPI\OpenAPI\Models\Operations
 * @access public
 */
class PostOauthAccessTokenRequestBody
{
    /**
     * The 25-character hexadecimal string that was obtained from Interactive Brokers during the OAuth consumer registration process.
     * 
     * @var ?string $oauthConsumerKey
     */
	#[\JMS\Serializer\Annotation\SerializedName('oauth_consumer_key')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $oauthConsumerKey = null;
    
    /**
     * A random string uniquely generated for each request.
     * 
     * @var ?string $oauthNonce
     */
	#[\JMS\Serializer\Annotation\SerializedName('oauth_nonce')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $oauthNonce = null;
    
    /**
     * The signature for the request generated using the method specified in the oauth_signature_method parameter. See section 9 of the OAuth v1.0a specification for more details on signing requests.
     * 
     * @var ?string $oauthSignature
     */
	#[\JMS\Serializer\Annotation\SerializedName('oauth_signature')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $oauthSignature = null;
    
    /**
     * The signature method used to sign the request. Currently only 'RSA-SHA256' is supported.
     * 
     * @var ?string $oauthSignatureMethod
     */
	#[\JMS\Serializer\Annotation\SerializedName('oauth_signature_method')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $oauthSignatureMethod = null;
    
    /**
     * Timestamp expressed in seconds since 1/1/1970 00:00:00 GMT. Must be a positive integer and greater than or equal to any timestamp used in previous requests.
     * 
     * @var ?string $oauthTimestamp
     */
	#[\JMS\Serializer\Annotation\SerializedName('oauth_timestamp')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $oauthTimestamp = null;
    
    /**
     * The request token obtained from IB via /request_token.
     * 
     * @var ?string $oauthToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('oauth_token')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $oauthToken = null;
    
    /**
     * The verification code received from IB after the user has granted authorization.
     * 
     * @var ?string $oauthVerifier
     */
	#[\JMS\Serializer\Annotation\SerializedName('oauth_verifier')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $oauthVerifier = null;
    
	public function __construct()
	{
		$this->oauthConsumerKey = null;
		$this->oauthNonce = null;
		$this->oauthSignature = null;
		$this->oauthSignatureMethod = null;
		$this->oauthTimestamp = null;
		$this->oauthToken = null;
		$this->oauthVerifier = null;
	}
}
