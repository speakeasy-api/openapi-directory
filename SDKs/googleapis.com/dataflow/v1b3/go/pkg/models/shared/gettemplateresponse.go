// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GetTemplateResponseTemplateTypeEnum - Template Type.
type GetTemplateResponseTemplateTypeEnum string

const (
	GetTemplateResponseTemplateTypeEnumUnknown GetTemplateResponseTemplateTypeEnum = "UNKNOWN"
	GetTemplateResponseTemplateTypeEnumLegacy  GetTemplateResponseTemplateTypeEnum = "LEGACY"
	GetTemplateResponseTemplateTypeEnumFlex    GetTemplateResponseTemplateTypeEnum = "FLEX"
)

func (e *GetTemplateResponseTemplateTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNKNOWN":
		fallthrough
	case "LEGACY":
		fallthrough
	case "FLEX":
		*e = GetTemplateResponseTemplateTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTemplateResponseTemplateTypeEnum: %s", s)
	}
}

// GetTemplateResponse - The response to a GetTemplate request.
type GetTemplateResponse struct {
	// Metadata describing a template.
	Metadata *TemplateMetadata `json:"metadata,omitempty"`
	// RuntimeMetadata describing a runtime environment.
	RuntimeMetadata *RuntimeMetadata `json:"runtimeMetadata,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Status *Status `json:"status,omitempty"`
	// Template Type.
	TemplateType *GetTemplateResponseTemplateTypeEnum `json:"templateType,omitempty"`
}
