/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new instance in the specified region. Returns a long running operation which contains an instance on completion. While the long running operation is in progress, any call to `GetInstance` returns an instance in state `CREATING`.
   */
  remotebuildexecutionProjectsInstancesCreate(
    req: operations.RemotebuildexecutionProjectsInstancesCreateRequest,
    security: operations.RemotebuildexecutionProjectsInstancesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemotebuildexecutionProjectsInstancesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemotebuildexecutionProjectsInstancesCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/instances",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleDevtoolsRemotebuildexecutionAdminV1alphaCreateInstanceRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RemotebuildexecutionProjectsInstancesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemotebuildexecutionProjectsInstancesCreateResponse =
        new operations.RemotebuildexecutionProjectsInstancesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists instances in a project.
   */
  remotebuildexecutionProjectsInstancesList(
    req: operations.RemotebuildexecutionProjectsInstancesListRequest,
    security: operations.RemotebuildexecutionProjectsInstancesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemotebuildexecutionProjectsInstancesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemotebuildexecutionProjectsInstancesListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/instances",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RemotebuildexecutionProjectsInstancesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemotebuildexecutionProjectsInstancesListResponse =
        new operations.RemotebuildexecutionProjectsInstancesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleDevtoolsRemotebuildexecutionAdminV1alphaListInstancesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleDevtoolsRemotebuildexecutionAdminV1alphaListInstancesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sends a test notification to the specified instance. Returns a `google.protobuf.Empty` on success.
   */
  remotebuildexecutionProjectsInstancesTestNotify(
    req: operations.RemotebuildexecutionProjectsInstancesTestNotifyRequest,
    security: operations.RemotebuildexecutionProjectsInstancesTestNotifySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemotebuildexecutionProjectsInstancesTestNotifyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.RemotebuildexecutionProjectsInstancesTestNotifyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{name}:testNotify",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RemotebuildexecutionProjectsInstancesTestNotifySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemotebuildexecutionProjectsInstancesTestNotifyResponse =
        new operations.RemotebuildexecutionProjectsInstancesTestNotifyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleProtobufEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new worker pool with a specified size and configuration. Returns a long running operation which contains a worker pool on completion. While the long running operation is in progress, any call to `GetWorkerPool` returns a worker pool in state `CREATING`.
   */
  remotebuildexecutionProjectsInstancesWorkerpoolsCreate(
    req: operations.RemotebuildexecutionProjectsInstancesWorkerpoolsCreateRequest,
    security: operations.RemotebuildexecutionProjectsInstancesWorkerpoolsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemotebuildexecutionProjectsInstancesWorkerpoolsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.RemotebuildexecutionProjectsInstancesWorkerpoolsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/workerpools",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleDevtoolsRemotebuildexecutionAdminV1alphaCreateWorkerPoolRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RemotebuildexecutionProjectsInstancesWorkerpoolsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemotebuildexecutionProjectsInstancesWorkerpoolsCreateResponse =
        new operations.RemotebuildexecutionProjectsInstancesWorkerpoolsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the specified worker pool. Returns a long running operation, which contains a `google.protobuf.Empty` response on completion. While the long running operation is in progress, any call to `GetWorkerPool` returns a worker pool in state `DELETING`.
   */
  remotebuildexecutionProjectsInstancesWorkerpoolsDelete(
    req: operations.RemotebuildexecutionProjectsInstancesWorkerpoolsDeleteRequest,
    security: operations.RemotebuildexecutionProjectsInstancesWorkerpoolsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemotebuildexecutionProjectsInstancesWorkerpoolsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.RemotebuildexecutionProjectsInstancesWorkerpoolsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RemotebuildexecutionProjectsInstancesWorkerpoolsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemotebuildexecutionProjectsInstancesWorkerpoolsDeleteResponse =
        new operations.RemotebuildexecutionProjectsInstancesWorkerpoolsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists worker pools in an instance.
   */
  remotebuildexecutionProjectsInstancesWorkerpoolsList(
    req: operations.RemotebuildexecutionProjectsInstancesWorkerpoolsListRequest,
    security: operations.RemotebuildexecutionProjectsInstancesWorkerpoolsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemotebuildexecutionProjectsInstancesWorkerpoolsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.RemotebuildexecutionProjectsInstancesWorkerpoolsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/workerpools",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RemotebuildexecutionProjectsInstancesWorkerpoolsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemotebuildexecutionProjectsInstancesWorkerpoolsListResponse =
        new operations.RemotebuildexecutionProjectsInstancesWorkerpoolsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing worker pool with a specified size and/or configuration. Returns a long running operation, which contains a worker pool on completion. While the long running operation is in progress, any call to `GetWorkerPool` returns a worker pool in state `UPDATING`.
   */
  remotebuildexecutionProjectsInstancesWorkerpoolsPatch(
    req: operations.RemotebuildexecutionProjectsInstancesWorkerpoolsPatchRequest,
    security: operations.RemotebuildexecutionProjectsInstancesWorkerpoolsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemotebuildexecutionProjectsInstancesWorkerpoolsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.RemotebuildexecutionProjectsInstancesWorkerpoolsPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleDevtoolsRemotebuildexecutionAdminV1alphaUpdateWorkerPoolRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RemotebuildexecutionProjectsInstancesWorkerpoolsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemotebuildexecutionProjectsInstancesWorkerpoolsPatchResponse =
        new operations.RemotebuildexecutionProjectsInstancesWorkerpoolsPatchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
   */
  remotebuildexecutionProjectsOperationsGet(
    req: operations.RemotebuildexecutionProjectsOperationsGetRequest,
    security: operations.RemotebuildexecutionProjectsOperationsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemotebuildexecutionProjectsOperationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemotebuildexecutionProjectsOperationsGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RemotebuildexecutionProjectsOperationsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemotebuildexecutionProjectsOperationsGetResponse =
        new operations.RemotebuildexecutionProjectsOperationsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }
}
