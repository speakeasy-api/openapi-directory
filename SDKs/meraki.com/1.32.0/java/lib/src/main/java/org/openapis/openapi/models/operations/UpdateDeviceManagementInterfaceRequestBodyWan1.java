/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UpdateDeviceManagementInterfaceRequestBodyWan1 - WAN 1 settings
 */
public class UpdateDeviceManagementInterfaceRequestBodyWan1 {
    /**
     * Up to two DNS IPs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("staticDns")
    public String[] staticDns;

    public UpdateDeviceManagementInterfaceRequestBodyWan1 withStaticDns(String[] staticDns) {
        this.staticDns = staticDns;
        return this;
    }
    
    /**
     * The IP of the gateway on the WAN.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("staticGatewayIp")
    public String staticGatewayIp;

    public UpdateDeviceManagementInterfaceRequestBodyWan1 withStaticGatewayIp(String staticGatewayIp) {
        this.staticGatewayIp = staticGatewayIp;
        return this;
    }
    
    /**
     * The IP the device should use on the WAN.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("staticIp")
    public String staticIp;

    public UpdateDeviceManagementInterfaceRequestBodyWan1 withStaticIp(String staticIp) {
        this.staticIp = staticIp;
        return this;
    }
    
    /**
     * The subnet mask for the WAN.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("staticSubnetMask")
    public String staticSubnetMask;

    public UpdateDeviceManagementInterfaceRequestBodyWan1 withStaticSubnetMask(String staticSubnetMask) {
        this.staticSubnetMask = staticSubnetMask;
        return this;
    }
    
    /**
     * Configure the interface to have static IP settings or use DHCP.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usingStaticIp")
    public Boolean usingStaticIp;

    public UpdateDeviceManagementInterfaceRequestBodyWan1 withUsingStaticIp(Boolean usingStaticIp) {
        this.usingStaticIp = usingStaticIp;
        return this;
    }
    
    /**
     * The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vlan")
    public Long vlan;

    public UpdateDeviceManagementInterfaceRequestBodyWan1 withVlan(Long vlan) {
        this.vlan = vlan;
        return this;
    }
    
    /**
     * Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wanEnabled")
    public UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum wanEnabled;

    public UpdateDeviceManagementInterfaceRequestBodyWan1 withWanEnabled(UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum wanEnabled) {
        this.wanEnabled = wanEnabled;
        return this;
    }
    
    public UpdateDeviceManagementInterfaceRequestBodyWan1(){}
}
