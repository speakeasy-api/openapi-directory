"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class DataPoints:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def data_points_batch_delete(self, request: shared.APICoreRequestsDeleteBatch) -> operations.DataPointsBatchDeleteResponse:
        r"""Delete multiple datapoints"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/datapoints/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsBatchDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesModifyBatchItemResponceAPICoreDtoDatapointsDatapointSystemInt64])
                res.api_core_responses_modify_batch_item_responce_api_core_dto_datapoints_datapoint_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesModifyBatchItemResponceAPICoreDtoDatapointsDatapointSystemInt64])
                res.api_core_responses_modify_batch_item_responce_api_core_dto_datapoints_datapoint_system_int64 = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def data_points_batch_post(self, request: shared.APICoreRequestsDatapointsBatch) -> operations.DataPointsBatchPostResponse:
        r"""Update multiple datapoints"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/datapoints/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsBatchPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesModifyBatchItemResponceAPICoreDtoDatapointsDatapointSystemInt64])
                res.api_core_responses_modify_batch_item_responce_api_core_dto_datapoints_datapoint_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesModifyBatchItemResponceAPICoreDtoDatapointsDatapointSystemInt64])
                res.api_core_responses_modify_batch_item_responce_api_core_dto_datapoints_datapoint_system_int64 = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def data_points_batch_put(self, request: shared.APICoreRequestsDatapointsBatch) -> operations.DataPointsBatchPutResponse:
        r"""Create multiple datapoints"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/datapoints/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsBatchPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesModifyBatchItemResponceAPICoreDtoDatapointsDatapointSystemInt64])
                res.api_core_responses_modify_batch_item_responce_api_core_dto_datapoints_datapoint_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesModifyBatchItemResponceAPICoreDtoDatapointsDatapointSystemInt64])
                res.api_core_responses_modify_batch_item_responce_api_core_dto_datapoints_datapoint_system_int64 = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def data_points_count(self, request: operations.DataPointsCountRequest) -> operations.DataPointsCountResponse:
        r"""Count the datapoints associated to the user"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/datapoints/count'
        
        query_params = utils.get_query_params(operations.DataPointsCountRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def data_points_delete(self, request: operations.DataPointsDeleteRequest) -> operations.DataPointsDeleteResponse:
        r"""Delete a datapoint"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataPointsDeleteRequest, base_url, '/datapoints/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def data_points_get(self, request: operations.DataPointsGetRequest) -> operations.DataPointsGetResponse:
        r"""List of all the datapoints associated to the user"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/datapoints'
        
        query_params = utils.get_query_params(operations.DataPointsGetRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entities_response_api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entities_response_api_core_responses_entity_uri_system_int64 = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def data_points_get_hits(self, request: operations.DataPointsGetHitsRequest) -> operations.DataPointsGetHitsResponse:
        r"""Retrieve the list of events related to this datapoint."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataPointsGetHitsRequest, base_url, '/datapoints/{id}/hits', request)
        
        query_params = utils.get_query_params(operations.DataPointsGetHitsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsGetHitsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoClickStreamHitListPage])
                res.api_core_dto_click_stream_hit_list_page = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoClickStreamHitListPage])
                res.api_core_dto_click_stream_hit_list_page = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def data_points_get_statistics_aggregated_single(self, request: operations.DataPointsGetStatisticsAggregatedSingleRequest) -> operations.DataPointsGetStatisticsAggregatedSingleResponse:
        r"""Retrieve statistics about this customer for a timeframe by groups"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/datapoints/aggregated'
        
        query_params = utils.get_query_params(operations.DataPointsGetStatisticsAggregatedSingleRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsGetStatisticsAggregatedSingleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedResult])
                res.api_core_dto_aggregated_aggregated_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedResult])
                res.api_core_dto_aggregated_aggregated_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def data_points_get_statistics_all_list(self, request: operations.DataPointsGetStatisticsAllListRequest) -> operations.DataPointsGetStatisticsAllListResponse:
        r"""Retrieve statistics about all datapoints of this customer for a timeframe grouped by some temporal entity (day/week/month)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/datapoints/aggregated/list'
        
        query_params = utils.get_query_params(operations.DataPointsGetStatisticsAllListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsGetStatisticsAllListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAggregatedAggregatedResult])
                res.api_core_responses_entities_response_api_core_dto_aggregated_aggregated_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAggregatedAggregatedResult])
                res.api_core_responses_entities_response_api_core_dto_aggregated_aggregated_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def data_points_get_statistics_list(self, request: operations.DataPointsGetStatisticsListRequest) -> operations.DataPointsGetStatisticsListResponse:
        r"""Retrieve statistics about this datapoint for a timeframe grouped by some temporal entity (day/week/month)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataPointsGetStatisticsListRequest, base_url, '/datapoints/{id}/aggregated/list', request)
        
        query_params = utils.get_query_params(operations.DataPointsGetStatisticsListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsGetStatisticsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAggregatedAggregatedResult])
                res.api_core_responses_entities_response_api_core_dto_aggregated_aggregated_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAggregatedAggregatedResult])
                res.api_core_responses_entities_response_api_core_dto_aggregated_aggregated_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def data_points_get_statistics_single(self, request: operations.DataPointsGetStatisticsSingleRequest) -> operations.DataPointsGetStatisticsSingleResponse:
        r"""Retrieve statistics about this datapoint for a timeframe"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataPointsGetStatisticsSingleRequest, base_url, '/datapoints/{id}/aggregated', request)
        
        query_params = utils.get_query_params(operations.DataPointsGetStatisticsSingleRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsGetStatisticsSingleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedResult])
                res.api_core_dto_aggregated_aggregated_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedResult])
                res.api_core_dto_aggregated_aggregated_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def data_points_patch_favourite(self, request: operations.DataPointsPatchFavouriteRequest) -> operations.DataPointsPatchFavouriteResponse:
        r"""Fast switch the \\"favourite\\" field of a datapoint"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataPointsPatchFavouriteRequest, base_url, '/datapoints/{id}/favourite', request)
        
        
        client = self._security_client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsPatchFavouriteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def data_points_patch_notes_form(self, request: operations.DataPointsPatchNotesFormRequest) -> operations.DataPointsPatchNotesFormResponse:
        r"""Fast patch the \\"notes\\" field of a datapoint"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataPointsPatchNotesFormRequest, base_url, '/datapoints/{id}/notes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_requests_generic_text_patch", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsPatchNotesFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def data_points_patch_notes_json(self, request: operations.DataPointsPatchNotesJSONRequest) -> operations.DataPointsPatchNotesJSONResponse:
        r"""Fast patch the \\"notes\\" field of a datapoint"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataPointsPatchNotesJSONRequest, base_url, '/datapoints/{id}/notes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_requests_generic_text_patch", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsPatchNotesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def data_points_patch_notes_raw(self, request: operations.DataPointsPatchNotesRawRequest) -> operations.DataPointsPatchNotesRawResponse:
        r"""Fast patch the \\"notes\\" field of a datapoint"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataPointsPatchNotesRawRequest, base_url, '/datapoints/{id}/notes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsPatchNotesRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def data_points_post(self, request: operations.DataPointsPostRequest) -> operations.DataPointsPostResponse:
        r"""Update a datapoint"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataPointsPostRequest, base_url, '/datapoints/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_dto_datapoints_datapoint", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def data_points_put(self, request: shared.APICoreDtoDatapointsDatapoint) -> operations.DataPointsPutResponse:
        r"""Create a datapoint"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/datapoints'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataPointsPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_datapoints_id_(self, request: operations.GetDatapointsIDRequest) -> operations.GetDatapointsIDResponse:
        r"""Get a datapoint"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDatapointsIDRequest, base_url, '/datapoints/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDatapointsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoDatapointsDatapoint])
                res.api_core_dto_datapoints_datapoint = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoDatapointsDatapoint])
                res.api_core_dto_datapoints_datapoint = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    