/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AdvancedShipmentOptions } from "./advancedshipmentoptions";
import { CustomsItemInput } from "./customsitem";
import { OrderSourceNameEnum } from "./ordersourcenameenum";
import { PackageInput } from "./package";
import { ShipmentItem } from "./shipmentitem";
import { ShippingAddress } from "./shippingaddress";
import { TaxIdentifier } from "./taxidentifier";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The possible delivery confirmation values
 */
export enum UpdateShipmentRequestBodyDeliveryConfirmationEnum {
  None = "none",
  Delivery = "delivery",
  Signature = "signature",
  AdultSignature = "adult_signature",
  DirectSignature = "direct_signature",
  DeliveryMailed = "delivery_mailed",
  VerbalConfirmation = "verbal_confirmation",
}

/**
 * The possible package contents values
 */
export enum UpdateShipmentRequestBodyInternationalShipmentOptionsPackageContentsEnum {
  Merchandise = "merchandise",
  Documents = "documents",
  Gift = "gift",
  ReturnedGoods = "returned_goods",
  Sample = "sample",
}

/**
 * The possible non delivery values
 */
export enum UpdateShipmentRequestBodyInternationalShipmentOptionsNonDeliveryEnum {
  ReturnToSender = "return_to_sender",
  TreatAsAbandoned = "treat_as_abandoned",
}

/**
 * Options for international shipments, such as customs declarations.
 */
export class UpdateShipmentRequestBodyInternationalShipmentOptionsInput extends SpeakeasyBase {
  /**
   * The type of contents in this shipment.  This may impact import duties or customs treatment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contents" })
  contents: UpdateShipmentRequestBodyInternationalShipmentOptionsPackageContentsEnum;

  /**
   * Customs declarations for each item in the shipment.
   */
  @SpeakeasyMetadata({ elemType: CustomsItemInput })
  @Expose({ name: "customs_items" })
  @Type(() => CustomsItemInput)
  customsItems?: CustomsItemInput[];

  /**
   * Indicates what to do if a package is unable to be delivered.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "non_delivery" })
  nonDelivery: UpdateShipmentRequestBodyInternationalShipmentOptionsNonDeliveryEnum;
}

/**
 * The possible insurance provider values
 */
export enum UpdateShipmentRequestBodyInsuranceProviderEnum {
  None = "none",
  Shipsurance = "shipsurance",
  Carrier = "carrier",
  ThirdParty = "third_party",
}

/**
 * Indicates if the package will be picked up or dropped off by the carrier
 */
export enum UpdateShipmentRequestBodyOriginTypeEnum {
  Pickup = "pickup",
  DropOff = "drop_off",
}

/**
 * The possible validate address values
 */
export enum UpdateShipmentRequestBodyValidateAddressEnum {
  NoValidation = "no_validation",
  ValidateOnly = "validate_only",
  ValidateAndClean = "validate_and_clean",
}

/**
 * The information necessary to ship a package, such as the origin, the destination, the carrier service, and the package dimensions and weight.
 *
 * @remarks
 *
 */
export class UpdateShipmentRequestBodyInput extends SpeakeasyBase {
  /**
   * Advanced shipment options.  These are entirely optional.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "advanced_options" })
  @Type(() => AdvancedShipmentOptions)
  advancedOptions?: AdvancedShipmentOptions;

  /**
   * The carrier account that is billed for the shipping charges
   */
  @SpeakeasyMetadata()
  @Expose({ name: "carrier_id" })
  carrierId?: string;

  /**
   * The type of delivery confirmation that is required for this shipment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confirmation" })
  confirmation?: UpdateShipmentRequestBodyDeliveryConfirmationEnum;

  /**
   * Customs information.  This is usually only needed for international shipments.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customs" })
  @Type(() => UpdateShipmentRequestBodyInternationalShipmentOptionsInput)
  customs?: UpdateShipmentRequestBodyInternationalShipmentOptionsInput;

  /**
   * ID that the Order Source assigned
   */
  @SpeakeasyMetadata()
  @Expose({ name: "external_order_id" })
  externalOrderId?: string;

  /**
   * A unique user-defined key to identify a shipment.  This can be used to retrieve the shipment.
   *
   * @remarks
   *
   * > **Warning:** The `external_shipment_id` is limited to 50 characters. Any additional characters will be truncated.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "external_shipment_id" })
  externalShipmentId?: string;

  /**
   * The insurance provider to use for any insured packages in the shipment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "insurance_provider" })
  insuranceProvider?: UpdateShipmentRequestBodyInsuranceProviderEnum;

  /**
   * Describe the packages included in this shipment as related to potential metadata that was imported from
   *
   * @remarks
   * external order sources
   *
   */
  @SpeakeasyMetadata({ elemType: ShipmentItem })
  @Expose({ name: "items" })
  @Type(() => ShipmentItem)
  items?: ShipmentItem[];

  @SpeakeasyMetadata()
  @Expose({ name: "order_source_code" })
  orderSourceCode?: OrderSourceNameEnum;

  /**
   * Indicates if the package will be picked up or dropped off by the carrier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "origin_type" })
  originType?: UpdateShipmentRequestBodyOriginTypeEnum;

  /**
   * The packages in the shipment.
   *
   * @remarks
   *
   * > **Note:** Some carriers only allow one package per shipment.  If you attempt to create a multi-package shipment for a carrier that doesn't allow it, an error will be returned.
   *
   */
  @SpeakeasyMetadata({ elemType: PackageInput })
  @Expose({ name: "packages" })
  @Type(() => PackageInput)
  packages?: PackageInput[];

  /**
   * The return address for this shipment.  Defaults to the `ship_from` address.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "return_to" })
  @Type(() => ShippingAddress)
  returnTo?: ShippingAddress;

  /**
   * The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "service_code" })
  serviceCode?: string;

  /**
   * The date that the shipment was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ship_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  shipDate?: Date;

  /**
   * The shipment's origin address. If you frequently ship from the same location, consider [creating a warehouse](https://www.shipengine.com/docs/reference/create-warehouse/).  Then you can simply specify the `warehouse_id` rather than the complete address each time.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ship_from" })
  @Type(() => ShippingAddress)
  shipFrom: ShippingAddress;

  /**
   * The recipient's mailing address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ship_to" })
  @Type(() => ShippingAddress)
  shipTo: ShippingAddress;

  /**
   * A non-unique user-defined number used to identify a shipment.  If undefined, this will match the external_shipment_id of the shipment.
   *
   * @remarks
   *
   * > **Warning:** The `shipment_number` is limited to 50 characters. Any additional characters will be truncated.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shipment_number" })
  shipmentNumber?: string;

  @SpeakeasyMetadata({ elemType: TaxIdentifier })
  @Expose({ name: "tax_identifiers" })
  @Type(() => TaxIdentifier)
  taxIdentifiers?: TaxIdentifier[];

  @SpeakeasyMetadata()
  @Expose({ name: "validate_address" })
  validateAddress?: UpdateShipmentRequestBodyValidateAddressEnum;

  /**
   * The [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) that the shipment is being shipped from.  Either `warehouse_id` or `ship_from` must be specified.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "warehouse_id" })
  warehouseId?: string;
}
