"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import addressinputmodel as shared_addressinputmodel
from ..shared import appointmentremindersinputmodel as shared_appointmentremindersinputmodel
from ..shared import businessdefaultsinputmodel as shared_businessdefaultsinputmodel
from ..shared import businesshoursinputmodel as shared_businesshoursinputmodel
from ..shared import onlinesettingsinputmodel as shared_onlinesettingsinputmodel
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LocationInputModel:
    
    address: Optional[shared_addressinputmodel.AddressInputModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})  
    admin_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adminEmail'), 'exclude': lambda f: f is None }})
    r"""Field is required."""  
    admin_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adminName'), 'exclude': lambda f: f is None }})
    r"""This field is no longer required and has been deprecated."""  
    appointment_reminders: Optional[shared_appointmentremindersinputmodel.AppointmentRemindersInputModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appointmentReminders'), 'exclude': lambda f: f is None }})  
    business_hours: Optional[shared_businesshoursinputmodel.BusinessHoursInputModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessHours'), 'exclude': lambda f: f is None }})  
    defaults: Optional[shared_businessdefaultsinputmodel.BusinessDefaultsInputModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaults'), 'exclude': lambda f: f is None }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    fax: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fax'), 'exclude': lambda f: f is None }})  
    friendly_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('friendlyId'), 'exclude': lambda f: f is None }})
    r"""Use the friendlyId as an alternative to the assigned locationId
    Choose something easy and meaningful. Must be unique within your company.
    FriendlyId's are limited to maximum of 64 characters.
    """  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone'), 'exclude': lambda f: f is None }})
    r"""GroupSize Limits the number of people that can come
    along on a single appointment
    """  
    region_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regionId'), 'exclude': lambda f: f is None }})  
    settings: Optional[shared_onlinesettingsinputmodel.OnlineSettingsInputModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settings'), 'exclude': lambda f: f is None }})  
    timezone_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezoneName'), 'exclude': lambda f: f is None }})
    r"""Field is required. It is in Iana format. e.g. America/New_York. Use moment.js in your client for ease of timezone detection and selection"""  
    website: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('website'), 'exclude': lambda f: f is None }})  
    