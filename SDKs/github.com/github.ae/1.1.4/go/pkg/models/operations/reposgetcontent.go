// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReposGetContentPathParams struct {
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// path parameter
	Path string `pathParam:"style=simple,explode=false,name=path"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type ReposGetContentQueryParams struct {
	// The name of the commit/branch/tag. Default: the repositoryâ€™s default branch (usually `master`)
	Ref *string `queryParam:"style=form,explode=true,name=ref"`
}

type ReposGetContentRequest struct {
	PathParams  ReposGetContentPathParams
	QueryParams ReposGetContentQueryParams
}

type ReposGetContent200ApplicationJSONType string

const (
	ReposGetContent200ApplicationJSONTypeArrayOfcontentDirectory ReposGetContent200ApplicationJSONType = "arrayOfcontent-directory"
	ReposGetContent200ApplicationJSONTypeContentFile             ReposGetContent200ApplicationJSONType = "content-file"
	ReposGetContent200ApplicationJSONTypeContentSymlink          ReposGetContent200ApplicationJSONType = "content-symlink"
	ReposGetContent200ApplicationJSONTypeContentSubmodule        ReposGetContent200ApplicationJSONType = "content-submodule"
)

type ReposGetContent200ApplicationJSON struct {
	ArrayOfcontentDirectory []shared.ContentDirectory
	ContentFile             *shared.ContentFile
	ContentSymlink          *shared.ContentSymlink
	ContentSubmodule        *shared.ContentSubmodule

	Type ReposGetContent200ApplicationJSONType
}

func CreateReposGetContent200ApplicationJSONArrayOfcontentDirectory(arrayOfcontentDirectory []shared.ContentDirectory) ReposGetContent200ApplicationJSON {
	typ := ReposGetContent200ApplicationJSONTypeArrayOfcontentDirectory

	return ReposGetContent200ApplicationJSON{
		ArrayOfcontentDirectory: arrayOfcontentDirectory,
		Type:                    typ,
	}
}

func CreateReposGetContent200ApplicationJSONContentFile(contentFile shared.ContentFile) ReposGetContent200ApplicationJSON {
	typ := ReposGetContent200ApplicationJSONTypeContentFile

	return ReposGetContent200ApplicationJSON{
		ContentFile: &contentFile,
		Type:        typ,
	}
}

func CreateReposGetContent200ApplicationJSONContentSymlink(contentSymlink shared.ContentSymlink) ReposGetContent200ApplicationJSON {
	typ := ReposGetContent200ApplicationJSONTypeContentSymlink

	return ReposGetContent200ApplicationJSON{
		ContentSymlink: &contentSymlink,
		Type:           typ,
	}
}

func CreateReposGetContent200ApplicationJSONContentSubmodule(contentSubmodule shared.ContentSubmodule) ReposGetContent200ApplicationJSON {
	typ := ReposGetContent200ApplicationJSONTypeContentSubmodule

	return ReposGetContent200ApplicationJSON{
		ContentSubmodule: &contentSubmodule,
		Type:             typ,
	}
}

func (u *ReposGetContent200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	arrayOfcontentDirectory := []shared.ContentDirectory{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfcontentDirectory); err == nil {
		u.ArrayOfcontentDirectory = arrayOfcontentDirectory
		u.Type = ReposGetContent200ApplicationJSONTypeArrayOfcontentDirectory
		return nil
	}

	contentFile := new(shared.ContentFile)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&contentFile); err == nil {
		u.ContentFile = contentFile
		u.Type = ReposGetContent200ApplicationJSONTypeContentFile
		return nil
	}

	contentSymlink := new(shared.ContentSymlink)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&contentSymlink); err == nil {
		u.ContentSymlink = contentSymlink
		u.Type = ReposGetContent200ApplicationJSONTypeContentSymlink
		return nil
	}

	contentSubmodule := new(shared.ContentSubmodule)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&contentSubmodule); err == nil {
		u.ContentSubmodule = contentSubmodule
		u.Type = ReposGetContent200ApplicationJSONTypeContentSubmodule
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ReposGetContent200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ArrayOfcontentDirectory != nil {
		return json.Marshal(u.ArrayOfcontentDirectory)
	}

	if u.ContentFile != nil {
		return json.Marshal(u.ContentFile)
	}

	if u.ContentSymlink != nil {
		return json.Marshal(u.ContentSymlink)
	}

	if u.ContentSubmodule != nil {
		return json.Marshal(u.ContentSubmodule)
	}

	return nil, nil
}

type ReposGetContentResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Response
	ReposGetContent200ApplicationJSONOneOf *ReposGetContent200ApplicationJSON
}
