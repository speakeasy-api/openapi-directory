/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CollectdValueError } from "./collectdvalueerror";
import { Status } from "./status";
import { Expose, Type } from "class-transformer";

/**
 * Describes the error status for payloads that were not written.
 */
export class CollectdPayloadError extends SpeakeasyBase {
  /**
   * The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => Status)
  error?: Status;

  /**
   * The zero-based index in CreateCollectdTimeSeriesRequest.collectd_payloads.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "index" })
  index?: number;

  /**
   * Records the error status for values that were not written due to an error.Failed payloads for which nothing is written will not include partial value errors.
   */
  @SpeakeasyMetadata({ elemType: CollectdValueError })
  @Expose({ name: "valueErrors" })
  @Type(() => CollectdValueError)
  valueErrors?: CollectdValueError[];
}
