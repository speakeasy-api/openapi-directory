/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * TaskStatistics - Resource usage statistics for a task.
 */
public class TaskStatistics {
    /**
     * The total kernel mode CPU time (summed across all cores and all compute nodes) consumed by the task.
     */
    @JsonProperty("kernelCPUTime")
    public String kernelCPUTime;

    public TaskStatistics withKernelCPUTime(String kernelCPUTime) {
        this.kernelCPUTime = kernelCPUTime;
        return this;
    }
    
    /**
     * The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdateTime")
    public OffsetDateTime lastUpdateTime;

    public TaskStatistics withLastUpdateTime(OffsetDateTime lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
        return this;
    }
    
    /**
     * The total gibibytes read from disk by the task.
     */
    @JsonProperty("readIOGiB")
    public Double readIOGiB;

    public TaskStatistics withReadIOGiB(Double readIOGiB) {
        this.readIOGiB = readIOGiB;
        return this;
    }
    
    /**
     * The total number of disk read operations made by the task.
     */
    @JsonProperty("readIOps")
    public Long readIOps;

    public TaskStatistics withReadIOps(Long readIOps) {
        this.readIOps = readIOps;
        return this;
    }
    
    /**
     * The start time of the time range covered by the statistics.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;

    public TaskStatistics withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * The URL of the statistics.
     */
    @JsonProperty("url")
    public String url;

    public TaskStatistics withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * The total user mode CPU time (summed across all cores and all compute nodes) consumed by the task.
     */
    @JsonProperty("userCPUTime")
    public String userCPUTime;

    public TaskStatistics withUserCPUTime(String userCPUTime) {
        this.userCPUTime = userCPUTime;
        return this;
    }
    
    /**
     * The total wait time of the task. The wait time for a task is defined as the elapsed time between the creation of the task and the start of task execution. (If the task is retried due to failures, the wait time is the time to the most recent task execution.)
     */
    @JsonProperty("waitTime")
    public String waitTime;

    public TaskStatistics withWaitTime(String waitTime) {
        this.waitTime = waitTime;
        return this;
    }
    
    /**
     * The total wall clock time of the task.
     */
    @JsonProperty("wallClockTime")
    public String wallClockTime;

    public TaskStatistics withWallClockTime(String wallClockTime) {
        this.wallClockTime = wallClockTime;
        return this;
    }
    
    /**
     * The total gibibytes written to disk by the task.
     */
    @JsonProperty("writeIOGiB")
    public Double writeIOGiB;

    public TaskStatistics withWriteIOGiB(Double writeIOGiB) {
        this.writeIOGiB = writeIOGiB;
        return this;
    }
    
    /**
     * The total number of disk write operations made by the task.
     */
    @JsonProperty("writeIOps")
    public Long writeIOps;

    public TaskStatistics withWriteIOps(Long writeIOps) {
        this.writeIOps = writeIOps;
        return this;
    }
    
    public TaskStatistics(@JsonProperty("kernelCPUTime") String kernelCPUTime, @JsonProperty("lastUpdateTime") OffsetDateTime lastUpdateTime, @JsonProperty("readIOGiB") Double readIOGiB, @JsonProperty("readIOps") Long readIOps, @JsonProperty("startTime") OffsetDateTime startTime, @JsonProperty("url") String url, @JsonProperty("userCPUTime") String userCPUTime, @JsonProperty("waitTime") String waitTime, @JsonProperty("wallClockTime") String wallClockTime, @JsonProperty("writeIOGiB") Double writeIOGiB, @JsonProperty("writeIOps") Long writeIOps) {
        this.kernelCPUTime = kernelCPUTime;
        this.lastUpdateTime = lastUpdateTime;
        this.readIOGiB = readIOGiB;
        this.readIOps = readIOps;
        this.startTime = startTime;
        this.url = url;
        this.userCPUTime = userCPUTime;
        this.waitTime = waitTime;
        this.wallClockTime = wallClockTime;
        this.writeIOGiB = writeIOGiB;
        this.writeIOps = writeIOps;
  }
}
