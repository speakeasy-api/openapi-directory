<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Result - Possible result values from the function mock invocation.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Result
{
    /**
     * A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
     * 
     * @var ?array<string, mixed> $undefined
     */
	#[\JMS\Serializer\Annotation\SerializedName('undefined')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $undefined = null;
    
    /**
     * The result is an actual value. The type of the value must match that of the type declared by the service.
     * 
     * @var mixed $value
     */
	#[\JMS\Serializer\Annotation\SerializedName('value')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $value = null;
    
	public function __construct()
	{
		$this->undefined = null;
		$this->value = null;
	}
}
