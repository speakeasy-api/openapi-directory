// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type NodesContributorsReadRequest struct {
	// The unique identifier of the node.
	NodeID string `pathParam:"style=simple,explode=false,name=node_id"`
	// The unique identifier of the user.
	UserID string `pathParam:"style=simple,explode=false,name=user_id"`
}

// NodesContributorsReadContributorAttributesPermissionEnum - The permission level of the contributor. The default value is 'write'.
type NodesContributorsReadContributorAttributesPermissionEnum string

const (
	NodesContributorsReadContributorAttributesPermissionEnumRead  NodesContributorsReadContributorAttributesPermissionEnum = "read"
	NodesContributorsReadContributorAttributesPermissionEnumWrite NodesContributorsReadContributorAttributesPermissionEnum = "write"
	NodesContributorsReadContributorAttributesPermissionEnumAdmin NodesContributorsReadContributorAttributesPermissionEnum = "admin"
)

func (e NodesContributorsReadContributorAttributesPermissionEnum) ToPointer() *NodesContributorsReadContributorAttributesPermissionEnum {
	return &e
}

func (e *NodesContributorsReadContributorAttributesPermissionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "write":
		fallthrough
	case "admin":
		*e = NodesContributorsReadContributorAttributesPermissionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NodesContributorsReadContributorAttributesPermissionEnum: %v", v)
	}
}

// NodesContributorsReadContributorAttributes - The properties of the contributor entity.
type NodesContributorsReadContributorAttributes struct {
	// Whether or not the contributor will be included in citations for the node. The default value is true.
	Bibliographic *bool
	// The position of this contributor in the list of project contributors and in project citations.
	Index *int64
	// The permission level of the contributor. The default value is 'write'.
	Permission *NodesContributorsReadContributorAttributesPermissionEnum
	// The assigned name of the contributor if the contributor has not yet claimed their account.
	UnregisteredContributor *string
}

// NodesContributorsReadContributorLinks - URLs to alternative representations of the contributor entity.
type NodesContributorsReadContributorLinks struct {
	// A link to the the canonical API endpoint for the contributor.
	Self *string
}

// NodesContributorsReadContributorRelationships - URLs to other entities or entity collections that have a relationship to the contributor entity.
type NodesContributorsReadContributorRelationships struct {
	// A relationship to the node that was created for the preprint, or from which the preprint was created.
	Node string
	// A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint.
	User string
}

type NodesContributorsReadContributor struct {
	// The properties of the contributor entity.
	Attributes *NodesContributorsReadContributorAttributes
	// The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}.
	ID *string
	// URLs to alternative representations of the contributor entity.
	Links *NodesContributorsReadContributorLinks
	// URLs to other entities or entity collections that have a relationship to the contributor entity.
	Relationships NodesContributorsReadContributorRelationships
	// The type identifier of the contributor entity (`contributors`).
	Type string
}

type NodesContributorsReadResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
