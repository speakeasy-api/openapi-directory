"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AuthorTypeEnum(str, Enum):
    r"""The type of user the author is."""
    AUTHOR_TYPE_UNSPECIFIED = 'AUTHOR_TYPE_UNSPECIFIED'
    REGULAR_USER = 'REGULAR_USER'
    LOCAL_GUIDE = 'LOCAL_GUIDE'
    MERCHANT = 'MERCHANT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Author:
    r"""Represents the author of a question or answer"""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The display name of the user"""  
    profile_photo_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profilePhotoUrl'), 'exclude': lambda f: f is None }})
    r"""The profile photo URL of the user."""  
    type: Optional[AuthorTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of user the author is."""  
    