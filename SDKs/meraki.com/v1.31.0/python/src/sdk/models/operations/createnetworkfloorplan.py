"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkFloorPlanRequestBodyBottomLeftCorner:
    r"""The longitude and latitude of the bottom left corner of your floor plan."""
    
    lat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lat'), 'exclude': lambda f: f is None }})
    r"""Latitude"""  
    lng: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lng'), 'exclude': lambda f: f is None }})
    r"""Longitude"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkFloorPlanRequestBodyBottomRightCorner:
    r"""The longitude and latitude of the bottom right corner of your floor plan."""
    
    lat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lat'), 'exclude': lambda f: f is None }})
    r"""Latitude"""  
    lng: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lng'), 'exclude': lambda f: f is None }})
    r"""Longitude"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkFloorPlanRequestBodyCenter:
    r"""The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair."""
    
    lat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lat'), 'exclude': lambda f: f is None }})
    r"""Latitude"""  
    lng: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lng'), 'exclude': lambda f: f is None }})
    r"""Longitude"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkFloorPlanRequestBodyTopLeftCorner:
    r"""The longitude and latitude of the top left corner of your floor plan."""
    
    lat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lat'), 'exclude': lambda f: f is None }})
    r"""Latitude"""  
    lng: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lng'), 'exclude': lambda f: f is None }})
    r"""Longitude"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkFloorPlanRequestBodyTopRightCorner:
    r"""The longitude and latitude of the top right corner of your floor plan."""
    
    lat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lat'), 'exclude': lambda f: f is None }})
    r"""Latitude"""  
    lng: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lng'), 'exclude': lambda f: f is None }})
    r"""Longitude"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkFloorPlanRequestBody:
    
    image_contents: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageContents') }})
    r"""The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of your floor plan."""  
    bottom_left_corner: Optional[CreateNetworkFloorPlanRequestBodyBottomLeftCorner] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bottomLeftCorner'), 'exclude': lambda f: f is None }})
    r"""The longitude and latitude of the bottom left corner of your floor plan."""  
    bottom_right_corner: Optional[CreateNetworkFloorPlanRequestBodyBottomRightCorner] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bottomRightCorner'), 'exclude': lambda f: f is None }})
    r"""The longitude and latitude of the bottom right corner of your floor plan."""  
    center: Optional[CreateNetworkFloorPlanRequestBodyCenter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('center'), 'exclude': lambda f: f is None }})
    r"""The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair."""  
    top_left_corner: Optional[CreateNetworkFloorPlanRequestBodyTopLeftCorner] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topLeftCorner'), 'exclude': lambda f: f is None }})
    r"""The longitude and latitude of the top left corner of your floor plan."""  
    top_right_corner: Optional[CreateNetworkFloorPlanRequestBodyTopRightCorner] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topRightCorner'), 'exclude': lambda f: f is None }})
    r"""The longitude and latitude of the top right corner of your floor plan."""  
    

@dataclasses.dataclass
class CreateNetworkFloorPlanRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: CreateNetworkFloorPlanRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class CreateNetworkFloorPlanResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_network_floor_plan_201_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    