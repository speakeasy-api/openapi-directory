"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import booleancondition as shared_booleancondition
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DataValidationRule:
    r"""A data validation rule."""
    
    condition: Optional[shared_booleancondition.BooleanCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('condition'), 'exclude': lambda f: f is None }})
    r"""A condition that can evaluate to true or false. BooleanConditions are used by conditional formatting, data validation, and the criteria in filters."""  
    input_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputMessage'), 'exclude': lambda f: f is None }})
    r"""A message to show the user when adding data to the cell."""  
    show_custom_ui: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showCustomUi'), 'exclude': lambda f: f is None }})
    r"""True if the UI should be customized based on the kind of condition. If true, \\"List\\" conditions will show a dropdown."""  
    strict: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('strict'), 'exclude': lambda f: f is None }})
    r"""True if invalid data should be rejected."""  
    