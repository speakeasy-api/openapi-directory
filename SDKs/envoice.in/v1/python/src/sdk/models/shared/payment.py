"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import invoice as shared_invoice
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class PaymentTypeEnum(str, Enum):
    OTHER = 'Other'
    PAYPAL = 'Paypal'
    STRIPE = 'Stripe'
    PAYONEER = 'Payoneer'
    BANK = 'Bank'
    CASH = 'Cash'
    CHEQUE = 'Cheque'
    ACH = 'Ach'
    SEPA = 'Sepa'
    SQUARE = 'Square'
    KLIK_AND_PAY = 'KlikAndPay'
    RAZORPAY = 'Razorpay'
    WEPAY = 'Wepay'
    HALKBANK = 'Halkbank'
    TWO_CHECKOUT = 'TwoCheckout'
    PAYMENT_WALL = 'PaymentWall'
    BAMBORA_EU = 'BamboraEU'
    BAMBORA_NA = 'BamboraNA'
    NLB = 'Nlb'
    AUTHORIZE_NET = 'AuthorizeNet'
    BRAINTREE = 'Braintree'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Payment:
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    invoice: Optional[shared_invoice.Invoice] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Invoice'), 'exclude': lambda f: f is None }})  
    invoice_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceId'), 'exclude': lambda f: f is None }})  
    is_automatic: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsAutomatic'), 'exclude': lambda f: f is None }})  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Note'), 'exclude': lambda f: f is None }})  
    paid_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaidOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReferenceId'), 'exclude': lambda f: f is None }})  
    type: Optional[PaymentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    