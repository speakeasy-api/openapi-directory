<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class MatrixAPI 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Batch Matrix Endpoint
     * 
     * Prefer the [synchronous endpoint](#operation/postMatrix) and use this Batch endpoint for long running problems only.
     * 
     * The Batch Matrix endpoint allows using matrices with more locations and works asynchronously - similar to the [Batch Route Optimization endpoint](#operation/asyncVRP):
     *  * Create a HTTP POST request against `/matrix/calculate` and add the key in the URL: `/matrix/calculate?key=[YOUR_KEY]`. This will give you the `job_id` from the response json like `{ "job_id": "7ac65787-fb99-4e02-a832-2c3010c70097" }`
     *  * Poll via HTTP GET requests every 500ms against `/matrix/solution/[job_id]`
     * 
     * Here are some full examples via curl:
     * ```bash
     * $ curl -X POST -H "Content-Type: application/json" "https://graphhopper.com/api/1/matrix/calculate?key=[YOUR_KEY]" -d '{"points":[[13.29895,52.48696],[13.370876,52.489575],[13.439026,52.511206]]}'
     * {"job_id":"7ac65787-fb99-4e02-a832-2c3010c70097"}
     * ```
     * 
     * Pick the returned `job_id` and use it in the next GET requests:
     * ```bash
     * $ curl -X GET "https://graphhopper.com/api/1/matrix/solution/7ac65787-fb99-4e02-a832-2c3010c70097?key=[YOUR_KEY]"
     * {"status":"waiting"}
     * ```
     * 
     * When the calculation is finished (`status:finished`) the JSON response will contain the full matrix JSON under `solution`:
     * ```bash
     * $ curl -X GET "https://graphhopper.com/api/1/matrix/solution/7ac65787-fb99-4e02-a832-2c3010c70097?key=[YOUR_KEY]"
     * {"solution":{"weights":[[0.0,470.453,945.414],[503.793,0.0,580.871],[970.49,569.511,0.0]],"info":{"copyrights":["GraphHopper","OpenStreetMap contributors"]}},"status":"finished"}
     * ```
     * 
     * Please note that if an error occured while calculation the JSON will not have a status but contain directly the error message e.g.:
     * ```json
     * {"message":"Cannot find from_points: 1"}
     * ```
     * And the optional `hints` array.
     * 
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CalculateMatrixResponse
     */
	public function calculateMatrix(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CalculateMatrixResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/matrix/calculate');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalculateMatrixResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobId = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobId', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ghError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GHError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * GET Matrix Endpoint
     * 
     * With this Matrix Endpoint you submit the points and parameters via URL parameters and is the most convenient
     * as it works out-of-the-box in the browser. If possible you should
     * prefer using the [POST Matrix Endpoint](#operation/postMatrix) that avoids problems with many locations
     * and can also gzip the **request**. (Note, that all endpoints return gzipped responses).
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMatrixRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMatrixResponse
     */
	public function getMatrix(
        \OpenAPI\OpenAPI\Models\Operations\GetMatrixRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMatrixResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/matrix');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMatrixRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMatrixResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matrixResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MatrixResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ghError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GHError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * GET Batch Matrix Endpoint
     * 
     * This endpoint returns the solution of a JSON submitted to the Batch Matrix endpoint. You can fetch it with the job_id, you have been sent.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMatrixSolutionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMatrixSolutionResponse
     */
	public function getMatrixSolution(
        \OpenAPI\OpenAPI\Models\Operations\GetMatrixSolutionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMatrixSolutionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/matrix/solution/{jobId}', \OpenAPI\OpenAPI\Models\Operations\GetMatrixSolutionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMatrixSolutionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matrixResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MatrixResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ghError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GHError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * POST Matrix Endpoint
     * 
     * 
     * The [GET endpoint](#operation/getMatrix) has an URL length limitation, which hurts for many locations per request.
     * In those cases use this POST endpoint with a JSON as input. The only parameter in the URL will be the key.
     * Both request scenarios are identical except that all singular parameter names are named as their plural for a POST request.
     * The effected parameters are: `points`, `from_points`, `to_points`, and `out_arrays`. For the remaining parameters
     * please refer to the [guide of the GET endpoint](#operation/getMatrix).
     * 
     * **Please note that in contrast to GET endpoint the points have to be specified as `[longitude, latitude]` array (in that order, similar to [GeoJson](http://geojson.org/geojson-spec.html#examples))**.
     * 
     * For example the query `point=10,11&point=20,22&vehicle=car` will be converted to the following JSON:
     * ```json
     * { "points": [[11,10], [22,20]], "vehicle": "car" }
     * ```
     * 
     * A complete curl Example:
     * ```bash
     * curl -X POST -H "Content-Type: application/json" "https://graphhopper.com/api/1/matrix?key=[YOUR_KEY]" -d '{"elevation":false,"out_arrays":["weights", "times"],"from_points":[[-0.087891,51.534377],[-0.090637,51.467697],[-0.171833,51.521241],[-0.211487,51.473685]],"to_points":[[-0.087891,51.534377],[-0.090637,51.467697],[-0.171833,51.521241],[-0.211487,51.473685]],"vehicle":"car"}'
     * ```
     * 
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMatrixResponse
     */
	public function postMatrix(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMatrixResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/matrix');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMatrixResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matrixResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MatrixResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ghError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GHError', 'json');
            }
        }

        return $response;
    }
}