/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://taskrouter.twilio.com",
	};
    /**
	 * CREATE_ACTIVITY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ACTIVITY_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * CREATE_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_TASK_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * CREATE_TASK_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_TASK_CHANNEL_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * CREATE_TASK_QUEUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_TASK_QUEUE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * CREATE_WORKER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_WORKER_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * CREATE_WORKFLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_WORKFLOW_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * CREATE_WORKSPACE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_WORKSPACE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * DELETE_ACTIVITY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ACTIVITY_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * DELETE_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_TASK_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * DELETE_TASK_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_TASK_CHANNEL_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * DELETE_TASK_QUEUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_TASK_QUEUE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * DELETE_WORKER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_WORKER_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * DELETE_WORKFLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_WORKFLOW_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * DELETE_WORKSPACE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_WORKSPACE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_ACTIVITY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ACTIVITY_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_EVENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_EVENT_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_TASK_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_CHANNEL_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_TASK_QUEUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_QUEUE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_TASK_QUEUE_CUMULATIVE_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_QUEUE_CUMULATIVE_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_TASK_QUEUE_REAL_TIME_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_QUEUE_REAL_TIME_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_TASK_QUEUE_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_QUEUE_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_TASK_RESERVATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_RESERVATION_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKER_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKER_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKER_CHANNEL_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKER_INSTANCE_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKER_INSTANCE_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKER_RESERVATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKER_RESERVATION_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKER_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKER_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKERS_CUMULATIVE_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKERS_CUMULATIVE_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKERS_REAL_TIME_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKERS_REAL_TIME_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKFLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKFLOW_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKFLOW_CUMULATIVE_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKFLOW_CUMULATIVE_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKFLOW_REAL_TIME_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKFLOW_REAL_TIME_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKFLOW_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKFLOW_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKSPACE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKSPACE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKSPACE_CUMULATIVE_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKSPACE_CUMULATIVE_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKSPACE_REAL_TIME_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKSPACE_REAL_TIME_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * FETCH_WORKSPACE_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WORKSPACE_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_ACTIVITY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ACTIVITY_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_EVENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_EVENT_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_TASK_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_TASK_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_TASK_CHANNEL_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_TASK_QUEUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_TASK_QUEUE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_TASK_QUEUES_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_TASK_QUEUES_STATISTICS_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_TASK_RESERVATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_TASK_RESERVATION_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_WORKER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_WORKER_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_WORKER_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_WORKER_CHANNEL_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_WORKER_RESERVATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_WORKER_RESERVATION_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_WORKFLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_WORKFLOW_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * LIST_WORKSPACE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_WORKSPACE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_ACTIVITY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ACTIVITY_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_TASK_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_TASK_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_TASK_CHANNEL_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_TASK_QUEUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_TASK_QUEUE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_TASK_RESERVATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_TASK_RESERVATION_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_WORKER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_WORKER_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_WORKER_CHANNEL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_WORKER_CHANNEL_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_WORKER_RESERVATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_WORKER_RESERVATION_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_WORKFLOW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_WORKFLOW_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
    /**
	 * UPDATE_WORKSPACE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_WORKSPACE_SERVERS = {
        "https://taskrouter.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
	}

    public org.openapis.openapi.models.operations.CreateActivityResponse createActivity(org.openapis.openapi.models.operations.CreateActivityRequest request, org.openapis.openapi.models.operations.CreateActivitySecurity security) throws Exception {
        return this.createActivity(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateActivityResponse createActivity(org.openapis.openapi.models.operations.CreateActivityRequest request, org.openapis.openapi.models.operations.CreateActivitySecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_ACTIVITY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateActivityRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Activities", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateActivityResponse res = new org.openapis.openapi.models.operations.CreateActivityResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceActivity = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceActivity out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceActivity.class);
                res.taskrouterV1WorkspaceActivity = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateTaskResponse createTask(org.openapis.openapi.models.operations.CreateTaskRequest request, org.openapis.openapi.models.operations.CreateTaskSecurity security) throws Exception {
        return this.createTask(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateTaskResponse createTask(org.openapis.openapi.models.operations.CreateTaskRequest request, org.openapis.openapi.models.operations.CreateTaskSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_TASK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateTaskRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Tasks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateTaskResponse res = new org.openapis.openapi.models.operations.CreateTaskResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceTask = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTask out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTask.class);
                res.taskrouterV1WorkspaceTask = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateTaskChannelResponse createTaskChannel(org.openapis.openapi.models.operations.CreateTaskChannelRequest request, org.openapis.openapi.models.operations.CreateTaskChannelSecurity security) throws Exception {
        return this.createTaskChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateTaskChannelResponse createTaskChannel(org.openapis.openapi.models.operations.CreateTaskChannelRequest request, org.openapis.openapi.models.operations.CreateTaskChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_TASK_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateTaskChannelRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskChannels", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateTaskChannelResponse res = new org.openapis.openapi.models.operations.CreateTaskChannelResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceTaskChannel = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskChannel.class);
                res.taskrouterV1WorkspaceTaskChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateTaskQueueResponse createTaskQueue(org.openapis.openapi.models.operations.CreateTaskQueueRequest request, org.openapis.openapi.models.operations.CreateTaskQueueSecurity security) throws Exception {
        return this.createTaskQueue(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateTaskQueueResponse createTaskQueue(org.openapis.openapi.models.operations.CreateTaskQueueRequest request, org.openapis.openapi.models.operations.CreateTaskQueueSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_TASK_QUEUE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateTaskQueueRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateTaskQueueResponse res = new org.openapis.openapi.models.operations.CreateTaskQueueResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceTaskQueue = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueue out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueue.class);
                res.taskrouterV1WorkspaceTaskQueue = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateWorkerResponse createWorker(org.openapis.openapi.models.operations.CreateWorkerRequest request, org.openapis.openapi.models.operations.CreateWorkerSecurity security) throws Exception {
        return this.createWorker(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateWorkerResponse createWorker(org.openapis.openapi.models.operations.CreateWorkerRequest request, org.openapis.openapi.models.operations.CreateWorkerSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_WORKER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateWorkerRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateWorkerResponse res = new org.openapis.openapi.models.operations.CreateWorkerResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorker = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorker out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorker.class);
                res.taskrouterV1WorkspaceWorker = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateWorkflowResponse createWorkflow(org.openapis.openapi.models.operations.CreateWorkflowRequest request, org.openapis.openapi.models.operations.CreateWorkflowSecurity security) throws Exception {
        return this.createWorkflow(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateWorkflowResponse createWorkflow(org.openapis.openapi.models.operations.CreateWorkflowRequest request, org.openapis.openapi.models.operations.CreateWorkflowSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_WORKFLOW_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateWorkflowRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workflows", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateWorkflowResponse res = new org.openapis.openapi.models.operations.CreateWorkflowResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkflow = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflow out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflow.class);
                res.taskrouterV1WorkspaceWorkflow = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateWorkspaceResponse createWorkspace(org.openapis.openapi.models.operations.CreateWorkspaceCreateWorkspaceRequest request, org.openapis.openapi.models.operations.CreateWorkspaceSecurity security) throws Exception {
        return this.createWorkspace(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateWorkspaceResponse createWorkspace(org.openapis.openapi.models.operations.CreateWorkspaceCreateWorkspaceRequest request, org.openapis.openapi.models.operations.CreateWorkspaceSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_WORKSPACE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Workspaces");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateWorkspaceResponse res = new org.openapis.openapi.models.operations.CreateWorkspaceResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1Workspace = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1Workspace out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1Workspace.class);
                res.taskrouterV1Workspace = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteActivityResponse deleteActivity(org.openapis.openapi.models.operations.DeleteActivityRequest request, org.openapis.openapi.models.operations.DeleteActivitySecurity security) throws Exception {
        return this.deleteActivity(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteActivityResponse deleteActivity(org.openapis.openapi.models.operations.DeleteActivityRequest request, org.openapis.openapi.models.operations.DeleteActivitySecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_ACTIVITY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteActivityRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteActivityResponse res = new org.openapis.openapi.models.operations.DeleteActivityResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteTaskResponse deleteTask(org.openapis.openapi.models.operations.DeleteTaskRequest request, org.openapis.openapi.models.operations.DeleteTaskSecurity security) throws Exception {
        return this.deleteTask(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteTaskResponse deleteTask(org.openapis.openapi.models.operations.DeleteTaskRequest request, org.openapis.openapi.models.operations.DeleteTaskSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_TASK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteTaskRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteTaskResponse res = new org.openapis.openapi.models.operations.DeleteTaskResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteTaskChannelResponse deleteTaskChannel(org.openapis.openapi.models.operations.DeleteTaskChannelRequest request, org.openapis.openapi.models.operations.DeleteTaskChannelSecurity security) throws Exception {
        return this.deleteTaskChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteTaskChannelResponse deleteTaskChannel(org.openapis.openapi.models.operations.DeleteTaskChannelRequest request, org.openapis.openapi.models.operations.DeleteTaskChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_TASK_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteTaskChannelRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteTaskChannelResponse res = new org.openapis.openapi.models.operations.DeleteTaskChannelResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteTaskQueueResponse deleteTaskQueue(org.openapis.openapi.models.operations.DeleteTaskQueueRequest request, org.openapis.openapi.models.operations.DeleteTaskQueueSecurity security) throws Exception {
        return this.deleteTaskQueue(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteTaskQueueResponse deleteTaskQueue(org.openapis.openapi.models.operations.DeleteTaskQueueRequest request, org.openapis.openapi.models.operations.DeleteTaskQueueSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_TASK_QUEUE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteTaskQueueRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteTaskQueueResponse res = new org.openapis.openapi.models.operations.DeleteTaskQueueResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteWorkerResponse deleteWorker(org.openapis.openapi.models.operations.DeleteWorkerRequest request, org.openapis.openapi.models.operations.DeleteWorkerSecurity security) throws Exception {
        return this.deleteWorker(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteWorkerResponse deleteWorker(org.openapis.openapi.models.operations.DeleteWorkerRequest request, org.openapis.openapi.models.operations.DeleteWorkerSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_WORKER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteWorkerRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteWorkerResponse res = new org.openapis.openapi.models.operations.DeleteWorkerResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteWorkflowResponse deleteWorkflow(org.openapis.openapi.models.operations.DeleteWorkflowRequest request, org.openapis.openapi.models.operations.DeleteWorkflowSecurity security) throws Exception {
        return this.deleteWorkflow(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteWorkflowResponse deleteWorkflow(org.openapis.openapi.models.operations.DeleteWorkflowRequest request, org.openapis.openapi.models.operations.DeleteWorkflowSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_WORKFLOW_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteWorkflowRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteWorkflowResponse res = new org.openapis.openapi.models.operations.DeleteWorkflowResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteWorkspaceResponse deleteWorkspace(org.openapis.openapi.models.operations.DeleteWorkspaceRequest request, org.openapis.openapi.models.operations.DeleteWorkspaceSecurity security) throws Exception {
        return this.deleteWorkspace(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteWorkspaceResponse deleteWorkspace(org.openapis.openapi.models.operations.DeleteWorkspaceRequest request, org.openapis.openapi.models.operations.DeleteWorkspaceSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_WORKSPACE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteWorkspaceRequest.class, baseUrl, "/v1/Workspaces/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteWorkspaceResponse res = new org.openapis.openapi.models.operations.DeleteWorkspaceResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchActivityResponse fetchActivity(org.openapis.openapi.models.operations.FetchActivityRequest request, org.openapis.openapi.models.operations.FetchActivitySecurity security) throws Exception {
        return this.fetchActivity(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchActivityResponse fetchActivity(org.openapis.openapi.models.operations.FetchActivityRequest request, org.openapis.openapi.models.operations.FetchActivitySecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ACTIVITY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchActivityRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchActivityResponse res = new org.openapis.openapi.models.operations.FetchActivityResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceActivity = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceActivity out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceActivity.class);
                res.taskrouterV1WorkspaceActivity = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchEventResponse fetchEvent(org.openapis.openapi.models.operations.FetchEventRequest request, org.openapis.openapi.models.operations.FetchEventSecurity security) throws Exception {
        return this.fetchEvent(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchEventResponse fetchEvent(org.openapis.openapi.models.operations.FetchEventRequest request, org.openapis.openapi.models.operations.FetchEventSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_EVENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchEventRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Events/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchEventResponse res = new org.openapis.openapi.models.operations.FetchEventResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceEvent = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceEvent out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceEvent.class);
                res.taskrouterV1WorkspaceEvent = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTaskResponse fetchTask(org.openapis.openapi.models.operations.FetchTaskRequest request, org.openapis.openapi.models.operations.FetchTaskSecurity security) throws Exception {
        return this.fetchTask(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchTaskResponse fetchTask(org.openapis.openapi.models.operations.FetchTaskRequest request, org.openapis.openapi.models.operations.FetchTaskSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_TASK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskResponse res = new org.openapis.openapi.models.operations.FetchTaskResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceTask = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTask out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTask.class);
                res.taskrouterV1WorkspaceTask = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTaskChannelResponse fetchTaskChannel(org.openapis.openapi.models.operations.FetchTaskChannelRequest request, org.openapis.openapi.models.operations.FetchTaskChannelSecurity security) throws Exception {
        return this.fetchTaskChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchTaskChannelResponse fetchTaskChannel(org.openapis.openapi.models.operations.FetchTaskChannelRequest request, org.openapis.openapi.models.operations.FetchTaskChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_TASK_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskChannelRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskChannelResponse res = new org.openapis.openapi.models.operations.FetchTaskChannelResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceTaskChannel = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskChannel.class);
                res.taskrouterV1WorkspaceTaskChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTaskQueueResponse fetchTaskQueue(org.openapis.openapi.models.operations.FetchTaskQueueRequest request, org.openapis.openapi.models.operations.FetchTaskQueueSecurity security) throws Exception {
        return this.fetchTaskQueue(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchTaskQueueResponse fetchTaskQueue(org.openapis.openapi.models.operations.FetchTaskQueueRequest request, org.openapis.openapi.models.operations.FetchTaskQueueSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_TASK_QUEUE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskQueueRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskQueueResponse res = new org.openapis.openapi.models.operations.FetchTaskQueueResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceTaskQueue = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueue out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueue.class);
                res.taskrouterV1WorkspaceTaskQueue = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTaskQueueCumulativeStatisticsResponse fetchTaskQueueCumulativeStatistics(org.openapis.openapi.models.operations.FetchTaskQueueCumulativeStatisticsRequest request, org.openapis.openapi.models.operations.FetchTaskQueueCumulativeStatisticsSecurity security) throws Exception {
        return this.fetchTaskQueueCumulativeStatistics(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchTaskQueueCumulativeStatisticsResponse fetchTaskQueueCumulativeStatistics(org.openapis.openapi.models.operations.FetchTaskQueueCumulativeStatisticsRequest request, org.openapis.openapi.models.operations.FetchTaskQueueCumulativeStatisticsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_TASK_QUEUE_CUMULATIVE_STATISTICS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskQueueCumulativeStatisticsRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/CumulativeStatistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchTaskQueueCumulativeStatisticsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskQueueCumulativeStatisticsResponse res = new org.openapis.openapi.models.operations.FetchTaskQueueCumulativeStatisticsResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics.class);
                res.taskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTaskQueueRealTimeStatisticsResponse fetchTaskQueueRealTimeStatistics(org.openapis.openapi.models.operations.FetchTaskQueueRealTimeStatisticsRequest request, org.openapis.openapi.models.operations.FetchTaskQueueRealTimeStatisticsSecurity security) throws Exception {
        return this.fetchTaskQueueRealTimeStatistics(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchTaskQueueRealTimeStatisticsResponse fetchTaskQueueRealTimeStatistics(org.openapis.openapi.models.operations.FetchTaskQueueRealTimeStatisticsRequest request, org.openapis.openapi.models.operations.FetchTaskQueueRealTimeStatisticsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_TASK_QUEUE_REAL_TIME_STATISTICS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskQueueRealTimeStatisticsRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/RealTimeStatistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchTaskQueueRealTimeStatisticsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskQueueRealTimeStatisticsResponse res = new org.openapis.openapi.models.operations.FetchTaskQueueRealTimeStatisticsResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics.class);
                res.taskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTaskQueueStatisticsResponse fetchTaskQueueStatistics(org.openapis.openapi.models.operations.FetchTaskQueueStatisticsRequest request, org.openapis.openapi.models.operations.FetchTaskQueueStatisticsSecurity security) throws Exception {
        return this.fetchTaskQueueStatistics(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchTaskQueueStatisticsResponse fetchTaskQueueStatistics(org.openapis.openapi.models.operations.FetchTaskQueueStatisticsRequest request, org.openapis.openapi.models.operations.FetchTaskQueueStatisticsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_TASK_QUEUE_STATISTICS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskQueueStatisticsRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/Statistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchTaskQueueStatisticsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskQueueStatisticsResponse res = new org.openapis.openapi.models.operations.FetchTaskQueueStatisticsResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceTaskQueueTaskQueueStatistics = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics.class);
                res.taskrouterV1WorkspaceTaskQueueTaskQueueStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTaskReservationResponse fetchTaskReservation(org.openapis.openapi.models.operations.FetchTaskReservationRequest request, org.openapis.openapi.models.operations.FetchTaskReservationSecurity security) throws Exception {
        return this.fetchTaskReservation(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchTaskReservationResponse fetchTaskReservation(org.openapis.openapi.models.operations.FetchTaskReservationRequest request, org.openapis.openapi.models.operations.FetchTaskReservationSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_TASK_RESERVATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskReservationRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskReservationResponse res = new org.openapis.openapi.models.operations.FetchTaskReservationResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceTaskTaskReservation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskTaskReservation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskTaskReservation.class);
                res.taskrouterV1WorkspaceTaskTaskReservation = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkerResponse fetchWorker(org.openapis.openapi.models.operations.FetchWorkerRequest request, org.openapis.openapi.models.operations.FetchWorkerSecurity security) throws Exception {
        return this.fetchWorker(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWorkerResponse fetchWorker(org.openapis.openapi.models.operations.FetchWorkerRequest request, org.openapis.openapi.models.operations.FetchWorkerSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WORKER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkerRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkerResponse res = new org.openapis.openapi.models.operations.FetchWorkerResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorker = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorker out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorker.class);
                res.taskrouterV1WorkspaceWorker = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkerChannelResponse fetchWorkerChannel(org.openapis.openapi.models.operations.FetchWorkerChannelRequest request, org.openapis.openapi.models.operations.FetchWorkerChannelSecurity security) throws Exception {
        return this.fetchWorkerChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWorkerChannelResponse fetchWorkerChannel(org.openapis.openapi.models.operations.FetchWorkerChannelRequest request, org.openapis.openapi.models.operations.FetchWorkerChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WORKER_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkerChannelRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkerChannelResponse res = new org.openapis.openapi.models.operations.FetchWorkerChannelResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkerWorkerChannel = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerChannel.class);
                res.taskrouterV1WorkspaceWorkerWorkerChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkerInstanceStatisticsResponse fetchWorkerInstanceStatistics(org.openapis.openapi.models.operations.FetchWorkerInstanceStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkerInstanceStatisticsSecurity security) throws Exception {
        return this.fetchWorkerInstanceStatistics(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWorkerInstanceStatisticsResponse fetchWorkerInstanceStatistics(org.openapis.openapi.models.operations.FetchWorkerInstanceStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkerInstanceStatisticsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WORKER_INSTANCE_STATISTICS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkerInstanceStatisticsRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Statistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkerInstanceStatisticsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkerInstanceStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkerInstanceStatisticsResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkerWorkerInstanceStatistics = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerInstanceStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerInstanceStatistics.class);
                res.taskrouterV1WorkspaceWorkerWorkerInstanceStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkerReservationResponse fetchWorkerReservation(org.openapis.openapi.models.operations.FetchWorkerReservationRequest request, org.openapis.openapi.models.operations.FetchWorkerReservationSecurity security) throws Exception {
        return this.fetchWorkerReservation(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWorkerReservationResponse fetchWorkerReservation(org.openapis.openapi.models.operations.FetchWorkerReservationRequest request, org.openapis.openapi.models.operations.FetchWorkerReservationSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WORKER_RESERVATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkerReservationRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkerReservationResponse res = new org.openapis.openapi.models.operations.FetchWorkerReservationResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkerWorkerReservation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerReservation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerReservation.class);
                res.taskrouterV1WorkspaceWorkerWorkerReservation = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkerStatisticsResponse fetchWorkerStatistics(org.openapis.openapi.models.operations.FetchWorkerStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkerStatisticsSecurity security) throws Exception {
        return this.fetchWorkerStatistics(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWorkerStatisticsResponse fetchWorkerStatistics(org.openapis.openapi.models.operations.FetchWorkerStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkerStatisticsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WORKER_STATISTICS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkerStatisticsRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/Statistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkerStatisticsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkerStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkerStatisticsResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkerWorkerStatistics = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerStatistics.class);
                res.taskrouterV1WorkspaceWorkerWorkerStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkersCumulativeStatisticsResponse fetchWorkersCumulativeStatistics(org.openapis.openapi.models.operations.FetchWorkersCumulativeStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkersCumulativeStatisticsSecurity security) throws Exception {
        return this.fetchWorkersCumulativeStatistics(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWorkersCumulativeStatisticsResponse fetchWorkersCumulativeStatistics(org.openapis.openapi.models.operations.FetchWorkersCumulativeStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkersCumulativeStatisticsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WORKERS_CUMULATIVE_STATISTICS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkersCumulativeStatisticsRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/CumulativeStatistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkersCumulativeStatisticsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkersCumulativeStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkersCumulativeStatisticsResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkerWorkersCumulativeStatistics = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkersCumulativeStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkersCumulativeStatistics.class);
                res.taskrouterV1WorkspaceWorkerWorkersCumulativeStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkersRealTimeStatisticsResponse fetchWorkersRealTimeStatistics(org.openapis.openapi.models.operations.FetchWorkersRealTimeStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkersRealTimeStatisticsSecurity security) throws Exception {
        return this.fetchWorkersRealTimeStatistics(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWorkersRealTimeStatisticsResponse fetchWorkersRealTimeStatistics(org.openapis.openapi.models.operations.FetchWorkersRealTimeStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkersRealTimeStatisticsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WORKERS_REAL_TIME_STATISTICS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkersRealTimeStatisticsRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/RealTimeStatistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkersRealTimeStatisticsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkersRealTimeStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkersRealTimeStatisticsResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkerWorkersRealTimeStatistics = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.class);
                res.taskrouterV1WorkspaceWorkerWorkersRealTimeStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkflowResponse fetchWorkflow(org.openapis.openapi.models.operations.FetchWorkflowRequest request, org.openapis.openapi.models.operations.FetchWorkflowSecurity security) throws Exception {
        return this.fetchWorkflow(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWorkflowResponse fetchWorkflow(org.openapis.openapi.models.operations.FetchWorkflowRequest request, org.openapis.openapi.models.operations.FetchWorkflowSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WORKFLOW_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkflowRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkflowResponse res = new org.openapis.openapi.models.operations.FetchWorkflowResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkflow = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflow out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflow.class);
                res.taskrouterV1WorkspaceWorkflow = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkflowCumulativeStatisticsResponse fetchWorkflowCumulativeStatistics(org.openapis.openapi.models.operations.FetchWorkflowCumulativeStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkflowCumulativeStatisticsSecurity security) throws Exception {
        return this.fetchWorkflowCumulativeStatistics(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWorkflowCumulativeStatisticsResponse fetchWorkflowCumulativeStatistics(org.openapis.openapi.models.operations.FetchWorkflowCumulativeStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkflowCumulativeStatisticsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WORKFLOW_CUMULATIVE_STATISTICS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkflowCumulativeStatisticsRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/CumulativeStatistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkflowCumulativeStatisticsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkflowCumulativeStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkflowCumulativeStatisticsResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics.class);
                res.taskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkflowRealTimeStatisticsResponse fetchWorkflowRealTimeStatistics(org.openapis.openapi.models.operations.FetchWorkflowRealTimeStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkflowRealTimeStatisticsSecurity security) throws Exception {
        return this.fetchWorkflowRealTimeStatistics(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWorkflowRealTimeStatisticsResponse fetchWorkflowRealTimeStatistics(org.openapis.openapi.models.operations.FetchWorkflowRealTimeStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkflowRealTimeStatisticsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WORKFLOW_REAL_TIME_STATISTICS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkflowRealTimeStatisticsRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/RealTimeStatistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkflowRealTimeStatisticsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkflowRealTimeStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkflowRealTimeStatisticsResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics.class);
                res.taskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkflowStatisticsResponse fetchWorkflowStatistics(org.openapis.openapi.models.operations.FetchWorkflowStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkflowStatisticsSecurity security) throws Exception {
        return this.fetchWorkflowStatistics(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWorkflowStatisticsResponse fetchWorkflowStatistics(org.openapis.openapi.models.operations.FetchWorkflowStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkflowStatisticsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WORKFLOW_STATISTICS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkflowStatisticsRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/Statistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkflowStatisticsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkflowStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkflowStatisticsResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkflowWorkflowStatistics = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflowWorkflowStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflowWorkflowStatistics.class);
                res.taskrouterV1WorkspaceWorkflowWorkflowStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkspaceResponse fetchWorkspace(org.openapis.openapi.models.operations.FetchWorkspaceRequest request, org.openapis.openapi.models.operations.FetchWorkspaceSecurity security) throws Exception {
        return this.fetchWorkspace(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWorkspaceResponse fetchWorkspace(org.openapis.openapi.models.operations.FetchWorkspaceRequest request, org.openapis.openapi.models.operations.FetchWorkspaceSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WORKSPACE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkspaceRequest.class, baseUrl, "/v1/Workspaces/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkspaceResponse res = new org.openapis.openapi.models.operations.FetchWorkspaceResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1Workspace = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1Workspace out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1Workspace.class);
                res.taskrouterV1Workspace = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkspaceCumulativeStatisticsResponse fetchWorkspaceCumulativeStatistics(org.openapis.openapi.models.operations.FetchWorkspaceCumulativeStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkspaceCumulativeStatisticsSecurity security) throws Exception {
        return this.fetchWorkspaceCumulativeStatistics(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWorkspaceCumulativeStatisticsResponse fetchWorkspaceCumulativeStatistics(org.openapis.openapi.models.operations.FetchWorkspaceCumulativeStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkspaceCumulativeStatisticsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WORKSPACE_CUMULATIVE_STATISTICS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkspaceCumulativeStatisticsRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/CumulativeStatistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkspaceCumulativeStatisticsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkspaceCumulativeStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkspaceCumulativeStatisticsResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkspaceCumulativeStatistics = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkspaceCumulativeStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkspaceCumulativeStatistics.class);
                res.taskrouterV1WorkspaceWorkspaceCumulativeStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkspaceRealTimeStatisticsResponse fetchWorkspaceRealTimeStatistics(org.openapis.openapi.models.operations.FetchWorkspaceRealTimeStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkspaceRealTimeStatisticsSecurity security) throws Exception {
        return this.fetchWorkspaceRealTimeStatistics(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWorkspaceRealTimeStatisticsResponse fetchWorkspaceRealTimeStatistics(org.openapis.openapi.models.operations.FetchWorkspaceRealTimeStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkspaceRealTimeStatisticsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WORKSPACE_REAL_TIME_STATISTICS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkspaceRealTimeStatisticsRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/RealTimeStatistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkspaceRealTimeStatisticsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkspaceRealTimeStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkspaceRealTimeStatisticsResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkspaceRealTimeStatistics = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkspaceRealTimeStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkspaceRealTimeStatistics.class);
                res.taskrouterV1WorkspaceWorkspaceRealTimeStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWorkspaceStatisticsResponse fetchWorkspaceStatistics(org.openapis.openapi.models.operations.FetchWorkspaceStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkspaceStatisticsSecurity security) throws Exception {
        return this.fetchWorkspaceStatistics(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWorkspaceStatisticsResponse fetchWorkspaceStatistics(org.openapis.openapi.models.operations.FetchWorkspaceStatisticsRequest request, org.openapis.openapi.models.operations.FetchWorkspaceStatisticsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WORKSPACE_STATISTICS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWorkspaceStatisticsRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Statistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWorkspaceStatisticsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWorkspaceStatisticsResponse res = new org.openapis.openapi.models.operations.FetchWorkspaceStatisticsResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkspaceStatistics = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkspaceStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkspaceStatistics.class);
                res.taskrouterV1WorkspaceWorkspaceStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListActivityResponse listActivity(org.openapis.openapi.models.operations.ListActivityRequest request, org.openapis.openapi.models.operations.ListActivitySecurity security) throws Exception {
        return this.listActivity(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListActivityResponse listActivity(org.openapis.openapi.models.operations.ListActivityRequest request, org.openapis.openapi.models.operations.ListActivitySecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_ACTIVITY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListActivityRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Activities", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListActivityRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListActivityResponse res = new org.openapis.openapi.models.operations.ListActivityResponse(contentType, httpRes.statusCode()) {{
            listActivityResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListActivityListActivityResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListActivityListActivityResponse.class);
                res.listActivityResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListEventResponse listEvent(org.openapis.openapi.models.operations.ListEventRequest request, org.openapis.openapi.models.operations.ListEventSecurity security) throws Exception {
        return this.listEvent(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListEventResponse listEvent(org.openapis.openapi.models.operations.ListEventRequest request, org.openapis.openapi.models.operations.ListEventSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_EVENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListEventRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Events", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListEventRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListEventResponse res = new org.openapis.openapi.models.operations.ListEventResponse(contentType, httpRes.statusCode()) {{
            listEventResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListEventListEventResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListEventListEventResponse.class);
                res.listEventResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListTaskResponse listTask(org.openapis.openapi.models.operations.ListTaskRequest request, org.openapis.openapi.models.operations.ListTaskSecurity security) throws Exception {
        return this.listTask(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListTaskResponse listTask(org.openapis.openapi.models.operations.ListTaskRequest request, org.openapis.openapi.models.operations.ListTaskSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_TASK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListTaskRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Tasks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListTaskRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListTaskResponse res = new org.openapis.openapi.models.operations.ListTaskResponse(contentType, httpRes.statusCode()) {{
            listTaskResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListTaskListTaskResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListTaskListTaskResponse.class);
                res.listTaskResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListTaskChannelResponse listTaskChannel(org.openapis.openapi.models.operations.ListTaskChannelRequest request, org.openapis.openapi.models.operations.ListTaskChannelSecurity security) throws Exception {
        return this.listTaskChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListTaskChannelResponse listTaskChannel(org.openapis.openapi.models.operations.ListTaskChannelRequest request, org.openapis.openapi.models.operations.ListTaskChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_TASK_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListTaskChannelRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskChannels", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListTaskChannelRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListTaskChannelResponse res = new org.openapis.openapi.models.operations.ListTaskChannelResponse(contentType, httpRes.statusCode()) {{
            listTaskChannelResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListTaskChannelListTaskChannelResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListTaskChannelListTaskChannelResponse.class);
                res.listTaskChannelResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListTaskQueueResponse listTaskQueue(org.openapis.openapi.models.operations.ListTaskQueueRequest request, org.openapis.openapi.models.operations.ListTaskQueueSecurity security) throws Exception {
        return this.listTaskQueue(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListTaskQueueResponse listTaskQueue(org.openapis.openapi.models.operations.ListTaskQueueRequest request, org.openapis.openapi.models.operations.ListTaskQueueSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_TASK_QUEUE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListTaskQueueRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListTaskQueueRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListTaskQueueResponse res = new org.openapis.openapi.models.operations.ListTaskQueueResponse(contentType, httpRes.statusCode()) {{
            listTaskQueueResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListTaskQueueListTaskQueueResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListTaskQueueListTaskQueueResponse.class);
                res.listTaskQueueResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListTaskQueuesStatisticsResponse listTaskQueuesStatistics(org.openapis.openapi.models.operations.ListTaskQueuesStatisticsRequest request, org.openapis.openapi.models.operations.ListTaskQueuesStatisticsSecurity security) throws Exception {
        return this.listTaskQueuesStatistics(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListTaskQueuesStatisticsResponse listTaskQueuesStatistics(org.openapis.openapi.models.operations.ListTaskQueuesStatisticsRequest request, org.openapis.openapi.models.operations.ListTaskQueuesStatisticsSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_TASK_QUEUES_STATISTICS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListTaskQueuesStatisticsRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/Statistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListTaskQueuesStatisticsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListTaskQueuesStatisticsResponse res = new org.openapis.openapi.models.operations.ListTaskQueuesStatisticsResponse(contentType, httpRes.statusCode()) {{
            listTaskQueuesStatisticsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListTaskQueuesStatisticsListTaskQueuesStatisticsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListTaskQueuesStatisticsListTaskQueuesStatisticsResponse.class);
                res.listTaskQueuesStatisticsResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListTaskReservationResponse listTaskReservation(org.openapis.openapi.models.operations.ListTaskReservationRequest request, org.openapis.openapi.models.operations.ListTaskReservationSecurity security) throws Exception {
        return this.listTaskReservation(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListTaskReservationResponse listTaskReservation(org.openapis.openapi.models.operations.ListTaskReservationRequest request, org.openapis.openapi.models.operations.ListTaskReservationSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_TASK_RESERVATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListTaskReservationRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListTaskReservationRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListTaskReservationResponse res = new org.openapis.openapi.models.operations.ListTaskReservationResponse(contentType, httpRes.statusCode()) {{
            listTaskReservationResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListTaskReservationListTaskReservationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListTaskReservationListTaskReservationResponse.class);
                res.listTaskReservationResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListWorkerResponse listWorker(org.openapis.openapi.models.operations.ListWorkerRequest request, org.openapis.openapi.models.operations.ListWorkerSecurity security) throws Exception {
        return this.listWorker(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListWorkerResponse listWorker(org.openapis.openapi.models.operations.ListWorkerRequest request, org.openapis.openapi.models.operations.ListWorkerSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_WORKER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListWorkerRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWorkerRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWorkerResponse res = new org.openapis.openapi.models.operations.ListWorkerResponse(contentType, httpRes.statusCode()) {{
            listWorkerResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWorkerListWorkerResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWorkerListWorkerResponse.class);
                res.listWorkerResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListWorkerChannelResponse listWorkerChannel(org.openapis.openapi.models.operations.ListWorkerChannelRequest request, org.openapis.openapi.models.operations.ListWorkerChannelSecurity security) throws Exception {
        return this.listWorkerChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListWorkerChannelResponse listWorkerChannel(org.openapis.openapi.models.operations.ListWorkerChannelRequest request, org.openapis.openapi.models.operations.ListWorkerChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_WORKER_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListWorkerChannelRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWorkerChannelRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWorkerChannelResponse res = new org.openapis.openapi.models.operations.ListWorkerChannelResponse(contentType, httpRes.statusCode()) {{
            listWorkerChannelResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWorkerChannelListWorkerChannelResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWorkerChannelListWorkerChannelResponse.class);
                res.listWorkerChannelResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListWorkerReservationResponse listWorkerReservation(org.openapis.openapi.models.operations.ListWorkerReservationRequest request, org.openapis.openapi.models.operations.ListWorkerReservationSecurity security) throws Exception {
        return this.listWorkerReservation(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListWorkerReservationResponse listWorkerReservation(org.openapis.openapi.models.operations.ListWorkerReservationRequest request, org.openapis.openapi.models.operations.ListWorkerReservationSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_WORKER_RESERVATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListWorkerReservationRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWorkerReservationRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWorkerReservationResponse res = new org.openapis.openapi.models.operations.ListWorkerReservationResponse(contentType, httpRes.statusCode()) {{
            listWorkerReservationResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWorkerReservationListWorkerReservationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWorkerReservationListWorkerReservationResponse.class);
                res.listWorkerReservationResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListWorkflowResponse listWorkflow(org.openapis.openapi.models.operations.ListWorkflowRequest request, org.openapis.openapi.models.operations.ListWorkflowSecurity security) throws Exception {
        return this.listWorkflow(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListWorkflowResponse listWorkflow(org.openapis.openapi.models.operations.ListWorkflowRequest request, org.openapis.openapi.models.operations.ListWorkflowSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_WORKFLOW_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListWorkflowRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workflows", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWorkflowRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWorkflowResponse res = new org.openapis.openapi.models.operations.ListWorkflowResponse(contentType, httpRes.statusCode()) {{
            listWorkflowResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWorkflowListWorkflowResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWorkflowListWorkflowResponse.class);
                res.listWorkflowResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListWorkspaceResponse listWorkspace(org.openapis.openapi.models.operations.ListWorkspaceRequest request, org.openapis.openapi.models.operations.ListWorkspaceSecurity security) throws Exception {
        return this.listWorkspace(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListWorkspaceResponse listWorkspace(org.openapis.openapi.models.operations.ListWorkspaceRequest request, org.openapis.openapi.models.operations.ListWorkspaceSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_WORKSPACE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Workspaces");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWorkspaceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWorkspaceResponse res = new org.openapis.openapi.models.operations.ListWorkspaceResponse(contentType, httpRes.statusCode()) {{
            listWorkspaceResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWorkspaceListWorkspaceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWorkspaceListWorkspaceResponse.class);
                res.listWorkspaceResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateActivityResponse updateActivity(org.openapis.openapi.models.operations.UpdateActivityRequest request, org.openapis.openapi.models.operations.UpdateActivitySecurity security) throws Exception {
        return this.updateActivity(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateActivityResponse updateActivity(org.openapis.openapi.models.operations.UpdateActivityRequest request, org.openapis.openapi.models.operations.UpdateActivitySecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_ACTIVITY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateActivityRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateActivityResponse res = new org.openapis.openapi.models.operations.UpdateActivityResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceActivity = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceActivity out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceActivity.class);
                res.taskrouterV1WorkspaceActivity = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateTaskResponse updateTask(org.openapis.openapi.models.operations.UpdateTaskRequest request, org.openapis.openapi.models.operations.UpdateTaskSecurity security) throws Exception {
        return this.updateTask(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateTaskResponse updateTask(org.openapis.openapi.models.operations.UpdateTaskRequest request, org.openapis.openapi.models.operations.UpdateTaskSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_TASK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateTaskRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateTaskResponse res = new org.openapis.openapi.models.operations.UpdateTaskResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceTask = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTask out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTask.class);
                res.taskrouterV1WorkspaceTask = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateTaskChannelResponse updateTaskChannel(org.openapis.openapi.models.operations.UpdateTaskChannelRequest request, org.openapis.openapi.models.operations.UpdateTaskChannelSecurity security) throws Exception {
        return this.updateTaskChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateTaskChannelResponse updateTaskChannel(org.openapis.openapi.models.operations.UpdateTaskChannelRequest request, org.openapis.openapi.models.operations.UpdateTaskChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_TASK_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateTaskChannelRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateTaskChannelResponse res = new org.openapis.openapi.models.operations.UpdateTaskChannelResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceTaskChannel = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskChannel.class);
                res.taskrouterV1WorkspaceTaskChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateTaskQueueResponse updateTaskQueue(org.openapis.openapi.models.operations.UpdateTaskQueueRequest request, org.openapis.openapi.models.operations.UpdateTaskQueueSecurity security) throws Exception {
        return this.updateTaskQueue(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateTaskQueueResponse updateTaskQueue(org.openapis.openapi.models.operations.UpdateTaskQueueRequest request, org.openapis.openapi.models.operations.UpdateTaskQueueSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_TASK_QUEUE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateTaskQueueRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateTaskQueueResponse res = new org.openapis.openapi.models.operations.UpdateTaskQueueResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceTaskQueue = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueue out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskQueue.class);
                res.taskrouterV1WorkspaceTaskQueue = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateTaskReservationResponse updateTaskReservation(org.openapis.openapi.models.operations.UpdateTaskReservationRequest request, org.openapis.openapi.models.operations.UpdateTaskReservationSecurity security) throws Exception {
        return this.updateTaskReservation(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateTaskReservationResponse updateTaskReservation(org.openapis.openapi.models.operations.UpdateTaskReservationRequest request, org.openapis.openapi.models.operations.UpdateTaskReservationSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_TASK_RESERVATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateTaskReservationRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateTaskReservationResponse res = new org.openapis.openapi.models.operations.UpdateTaskReservationResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceTaskTaskReservation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskTaskReservation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceTaskTaskReservation.class);
                res.taskrouterV1WorkspaceTaskTaskReservation = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateWorkerResponse updateWorker(org.openapis.openapi.models.operations.UpdateWorkerRequest request, org.openapis.openapi.models.operations.UpdateWorkerSecurity security) throws Exception {
        return this.updateWorker(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateWorkerResponse updateWorker(org.openapis.openapi.models.operations.UpdateWorkerRequest request, org.openapis.openapi.models.operations.UpdateWorkerSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_WORKER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateWorkerRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateWorkerResponse res = new org.openapis.openapi.models.operations.UpdateWorkerResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorker = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorker out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorker.class);
                res.taskrouterV1WorkspaceWorker = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateWorkerChannelResponse updateWorkerChannel(org.openapis.openapi.models.operations.UpdateWorkerChannelRequest request, org.openapis.openapi.models.operations.UpdateWorkerChannelSecurity security) throws Exception {
        return this.updateWorkerChannel(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateWorkerChannelResponse updateWorkerChannel(org.openapis.openapi.models.operations.UpdateWorkerChannelRequest request, org.openapis.openapi.models.operations.UpdateWorkerChannelSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_WORKER_CHANNEL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateWorkerChannelRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateWorkerChannelResponse res = new org.openapis.openapi.models.operations.UpdateWorkerChannelResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkerWorkerChannel = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerChannel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerChannel.class);
                res.taskrouterV1WorkspaceWorkerWorkerChannel = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateWorkerReservationResponse updateWorkerReservation(org.openapis.openapi.models.operations.UpdateWorkerReservationRequest request, org.openapis.openapi.models.operations.UpdateWorkerReservationSecurity security) throws Exception {
        return this.updateWorkerReservation(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateWorkerReservationResponse updateWorkerReservation(org.openapis.openapi.models.operations.UpdateWorkerReservationRequest request, org.openapis.openapi.models.operations.UpdateWorkerReservationSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_WORKER_RESERVATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateWorkerReservationRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateWorkerReservationResponse res = new org.openapis.openapi.models.operations.UpdateWorkerReservationResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkerWorkerReservation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerReservation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkerWorkerReservation.class);
                res.taskrouterV1WorkspaceWorkerWorkerReservation = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateWorkflowResponse updateWorkflow(org.openapis.openapi.models.operations.UpdateWorkflowRequest request, org.openapis.openapi.models.operations.UpdateWorkflowSecurity security) throws Exception {
        return this.updateWorkflow(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateWorkflowResponse updateWorkflow(org.openapis.openapi.models.operations.UpdateWorkflowRequest request, org.openapis.openapi.models.operations.UpdateWorkflowSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_WORKFLOW_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateWorkflowRequest.class, baseUrl, "/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateWorkflowResponse res = new org.openapis.openapi.models.operations.UpdateWorkflowResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1WorkspaceWorkflow = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflow out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1WorkspaceWorkflow.class);
                res.taskrouterV1WorkspaceWorkflow = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateWorkspaceResponse updateWorkspace(org.openapis.openapi.models.operations.UpdateWorkspaceRequest request, org.openapis.openapi.models.operations.UpdateWorkspaceSecurity security) throws Exception {
        return this.updateWorkspace(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateWorkspaceResponse updateWorkspace(org.openapis.openapi.models.operations.UpdateWorkspaceRequest request, org.openapis.openapi.models.operations.UpdateWorkspaceSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_WORKSPACE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateWorkspaceRequest.class, baseUrl, "/v1/Workspaces/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateWorkspaceResponse res = new org.openapis.openapi.models.operations.UpdateWorkspaceResponse(contentType, httpRes.statusCode()) {{
            taskrouterV1Workspace = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TaskrouterV1Workspace out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TaskrouterV1Workspace.class);
                res.taskrouterV1Workspace = out;
            }
        }

        return res;
    }
}