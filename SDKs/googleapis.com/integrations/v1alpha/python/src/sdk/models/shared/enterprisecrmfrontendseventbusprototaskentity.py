"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import enterprisecrmeventbusprototaskmetadata as shared_enterprisecrmeventbusprototaskmetadata
from ..shared import enterprisecrmeventbusprototaskuiconfig as shared_enterprisecrmeventbusprototaskuiconfig
from ..shared import enterprisecrmeventbusstats as shared_enterprisecrmeventbusstats
from ..shared import enterprisecrmfrontendseventbusprotoparamspecsmessage as shared_enterprisecrmfrontendseventbusprotoparamspecsmessage
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskTypeEnum(str, Enum):
    r"""Defines the type of the task"""
    TASK = 'TASK'
    ASIS_TEMPLATE = 'ASIS_TEMPLATE'
    IO_TEMPLATE = 'IO_TEMPLATE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnterpriseCrmFrontendsEventbusProtoTaskEntity:
    r"""Contains a task's metadata and associated information. Next available id: 7"""
    
    disabled_for_vpc_sc: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabledForVpcSc'), 'exclude': lambda f: f is None }})
    r"""True if the task has conflict with vpcsc"""  
    metadata: Optional[shared_enterprisecrmeventbusprototaskmetadata.EnterpriseCrmEventbusProtoTaskMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""TaskMetadata are attributes that are associated to every common Task we have."""  
    param_specs: Optional[shared_enterprisecrmfrontendseventbusprotoparamspecsmessage.EnterpriseCrmFrontendsEventbusProtoParamSpecsMessage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paramSpecs'), 'exclude': lambda f: f is None }})  
    stats: Optional[shared_enterprisecrmeventbusstats.EnterpriseCrmEventbusStats] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stats'), 'exclude': lambda f: f is None }})
    r"""Stats for the requested dimensions: QPS, duration, and error/warning rate"""  
    task_type: Optional[EnterpriseCrmFrontendsEventbusProtoTaskEntityTaskTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskType'), 'exclude': lambda f: f is None }})
    r"""Defines the type of the task"""  
    ui_config: Optional[shared_enterprisecrmeventbusprototaskuiconfig.EnterpriseCrmEventbusProtoTaskUIConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uiConfig'), 'exclude': lambda f: f is None }})
    r"""Task authors would use this type to configure the UI for a particular task by specifying what UI config modules should be included to compose the UI. Learn more about config module framework:"""  
    