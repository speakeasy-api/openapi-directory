/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * BucketLifecycleRuleCondition - The condition(s) under which the action will be taken.
 */
public class BucketLifecycleRuleCondition {
    /**
     * Age of an object (in days). This condition is satisfied when an object reaches the specified age.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("age")
    public Integer age;
    public BucketLifecycleRuleCondition withAge(Integer age) {
        this.age = age;
        return this;
    }
    
    /**
     * A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when an object is created before midnight of the specified date in UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("createdBefore")
    public LocalDate createdBefore;
    public BucketLifecycleRuleCondition withCreatedBefore(LocalDate createdBefore) {
        this.createdBefore = createdBefore;
        return this;
    }
    
    /**
     * A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when the custom time on an object is before this date in UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("customTimeBefore")
    public LocalDate customTimeBefore;
    public BucketLifecycleRuleCondition withCustomTimeBefore(LocalDate customTimeBefore) {
        this.customTimeBefore = customTimeBefore;
        return this;
    }
    
    /**
     * Number of days elapsed since the user-specified timestamp set on an object. The condition is satisfied if the days elapsed is at least this number. If no custom timestamp is specified on an object, the condition does not apply.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("daysSinceCustomTime")
    public Integer daysSinceCustomTime;
    public BucketLifecycleRuleCondition withDaysSinceCustomTime(Integer daysSinceCustomTime) {
        this.daysSinceCustomTime = daysSinceCustomTime;
        return this;
    }
    
    /**
     * Number of days elapsed since the noncurrent timestamp of an object. The condition is satisfied if the days elapsed is at least this number. This condition is relevant only for versioned objects. The value of the field must be a nonnegative integer. If it's zero, the object version will become eligible for Lifecycle action as soon as it becomes noncurrent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("daysSinceNoncurrentTime")
    public Integer daysSinceNoncurrentTime;
    public BucketLifecycleRuleCondition withDaysSinceNoncurrentTime(Integer daysSinceNoncurrentTime) {
        this.daysSinceNoncurrentTime = daysSinceNoncurrentTime;
        return this;
    }
    
    /**
     * Relevant only for versioned objects. If the value is true, this condition matches live objects; if the value is false, it matches archived objects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isLive")
    public Boolean isLive;
    public BucketLifecycleRuleCondition withIsLive(Boolean isLive) {
        this.isLive = isLive;
        return this;
    }
    
    /**
     * A regular expression that satisfies the RE2 syntax. This condition is satisfied when the name of the object matches the RE2 pattern. Note: This feature is currently in the "Early Access" launch stage and is only available to a whitelisted set of users; that means that this feature may be changed in backward-incompatible ways and that it is not guaranteed to be released.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matchesPattern")
    public String matchesPattern;
    public BucketLifecycleRuleCondition withMatchesPattern(String matchesPattern) {
        this.matchesPattern = matchesPattern;
        return this;
    }
    
    /**
     * List of object name prefixes. This condition will be satisfied when at least one of the prefixes exactly matches the beginning of the object name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matchesPrefix")
    public String[] matchesPrefix;
    public BucketLifecycleRuleCondition withMatchesPrefix(String[] matchesPrefix) {
        this.matchesPrefix = matchesPrefix;
        return this;
    }
    
    /**
     * Objects having any of the storage classes specified by this condition will be matched. Values include MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE, STANDARD, and DURABLE_REDUCED_AVAILABILITY.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matchesStorageClass")
    public String[] matchesStorageClass;
    public BucketLifecycleRuleCondition withMatchesStorageClass(String[] matchesStorageClass) {
        this.matchesStorageClass = matchesStorageClass;
        return this;
    }
    
    /**
     * List of object name suffixes. This condition will be satisfied when at least one of the suffixes exactly matches the end of the object name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matchesSuffix")
    public String[] matchesSuffix;
    public BucketLifecycleRuleCondition withMatchesSuffix(String[] matchesSuffix) {
        this.matchesSuffix = matchesSuffix;
        return this;
    }
    
    /**
     * A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when the noncurrent time on an object is before this date in UTC. This condition is relevant only for versioned objects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("noncurrentTimeBefore")
    public LocalDate noncurrentTimeBefore;
    public BucketLifecycleRuleCondition withNoncurrentTimeBefore(LocalDate noncurrentTimeBefore) {
        this.noncurrentTimeBefore = noncurrentTimeBefore;
        return this;
    }
    
    /**
     * Relevant only for versioned objects. If the value is N, this condition is satisfied when there are at least N versions (including the live version) newer than this version of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numNewerVersions")
    public Integer numNewerVersions;
    public BucketLifecycleRuleCondition withNumNewerVersions(Integer numNewerVersions) {
        this.numNewerVersions = numNewerVersions;
        return this;
    }
    
}
