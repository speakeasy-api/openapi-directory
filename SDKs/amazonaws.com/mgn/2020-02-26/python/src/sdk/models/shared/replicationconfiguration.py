"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import replicationconfigurationdataplanerouting_enum as shared_replicationconfigurationdataplanerouting_enum
from ..shared import replicationconfigurationdefaultlargestagingdisktype_enum as shared_replicationconfigurationdefaultlargestagingdisktype_enum
from ..shared import replicationconfigurationebsencryption_enum as shared_replicationconfigurationebsencryption_enum
from ..shared import replicationconfigurationreplicateddisk as shared_replicationconfigurationreplicateddisk
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReplicationConfiguration:
    r"""Success"""
    
    associate_default_security_group: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associateDefaultSecurityGroup'), 'exclude': lambda f: f is None }})  
    bandwidth_throttling: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandwidthThrottling'), 'exclude': lambda f: f is None }})  
    create_public_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createPublicIP'), 'exclude': lambda f: f is None }})  
    data_plane_routing: Optional[shared_replicationconfigurationdataplanerouting_enum.ReplicationConfigurationDataPlaneRoutingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataPlaneRouting'), 'exclude': lambda f: f is None }})  
    default_large_staging_disk_type: Optional[shared_replicationconfigurationdefaultlargestagingdisktype_enum.ReplicationConfigurationDefaultLargeStagingDiskTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultLargeStagingDiskType'), 'exclude': lambda f: f is None }})  
    ebs_encryption: Optional[shared_replicationconfigurationebsencryption_enum.ReplicationConfigurationEbsEncryptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ebsEncryption'), 'exclude': lambda f: f is None }})  
    ebs_encryption_key_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ebsEncryptionKeyArn'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    replicated_disks: Optional[list[shared_replicationconfigurationreplicateddisk.ReplicationConfigurationReplicatedDisk]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replicatedDisks'), 'exclude': lambda f: f is None }})  
    replication_server_instance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replicationServerInstanceType'), 'exclude': lambda f: f is None }})  
    replication_servers_security_groups_i_ds: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replicationServersSecurityGroupsIDs'), 'exclude': lambda f: f is None }})  
    source_server_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceServerID'), 'exclude': lambda f: f is None }})  
    staging_area_subnet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stagingAreaSubnetId'), 'exclude': lambda f: f is None }})  
    staging_area_tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stagingAreaTags'), 'exclude': lambda f: f is None }})  
    use_dedicated_replication_server: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useDedicatedReplicationServer'), 'exclude': lambda f: f is None }})  
    