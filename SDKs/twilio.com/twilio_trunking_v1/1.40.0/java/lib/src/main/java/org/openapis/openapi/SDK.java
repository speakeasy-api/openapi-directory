/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://trunking.twilio.com",
	};
    /**
	 * CREATE_CREDENTIAL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CREDENTIAL_LIST_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * CREATE_IP_ACCESS_CONTROL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_IP_ACCESS_CONTROL_LIST_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * CREATE_ORIGINATION_URL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ORIGINATION_URL_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * CREATE_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_PHONE_NUMBER_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * CREATE_TRUNK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_TRUNK_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * DELETE_CREDENTIAL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CREDENTIAL_LIST_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * DELETE_IP_ACCESS_CONTROL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_IP_ACCESS_CONTROL_LIST_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * DELETE_ORIGINATION_URL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ORIGINATION_URL_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * DELETE_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_PHONE_NUMBER_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * DELETE_TRUNK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_TRUNK_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * FETCH_CREDENTIAL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CREDENTIAL_LIST_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * FETCH_IP_ACCESS_CONTROL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_IP_ACCESS_CONTROL_LIST_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * FETCH_ORIGINATION_URL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ORIGINATION_URL_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * FETCH_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_PHONE_NUMBER_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * FETCH_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_RECORDING_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * FETCH_TRUNK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TRUNK_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * LIST_CREDENTIAL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CREDENTIAL_LIST_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * LIST_IP_ACCESS_CONTROL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_IP_ACCESS_CONTROL_LIST_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * LIST_ORIGINATION_URL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ORIGINATION_URL_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * LIST_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_PHONE_NUMBER_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * LIST_TRUNK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_TRUNK_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * UPDATE_ORIGINATION_URL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ORIGINATION_URL_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * UPDATE_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_RECORDING_SERVERS = {
        "https://trunking.twilio.com",
    };
	
    /**
	 * UPDATE_TRUNK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_TRUNK_SERVERS = {
        "https://trunking.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    public org.openapis.openapi.models.operations.CreateCredentialListResponse createCredentialList(org.openapis.openapi.models.operations.CreateCredentialListRequest request) throws Exception {
        String baseUrl = CREATE_CREDENTIAL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateCredentialListPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/CredentialLists", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateCredentialListResponse res = new org.openapis.openapi.models.operations.CreateCredentialListResponse() {{
            trunkingV1TrunkCredentialList = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TrunkingV1TrunkCredentialList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TrunkingV1TrunkCredentialList.class);
                res.trunkingV1TrunkCredentialList = out;
            }
        }

        return res;
    }

    /**
     * Associate an IP Access Control List with a Trunk
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateIpAccessControlListResponse createIpAccessControlList(org.openapis.openapi.models.operations.CreateIpAccessControlListRequest request) throws Exception {
        String baseUrl = CREATE_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateIpAccessControlListPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/IpAccessControlLists", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateIpAccessControlListResponse res = new org.openapis.openapi.models.operations.CreateIpAccessControlListResponse() {{
            trunkingV1TrunkIpAccessControlList = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TrunkingV1TrunkIpAccessControlList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TrunkingV1TrunkIpAccessControlList.class);
                res.trunkingV1TrunkIpAccessControlList = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateOriginationUrlResponse createOriginationUrl(org.openapis.openapi.models.operations.CreateOriginationUrlRequest request) throws Exception {
        String baseUrl = CREATE_ORIGINATION_URL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateOriginationUrlPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/OriginationUrls", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateOriginationUrlResponse res = new org.openapis.openapi.models.operations.CreateOriginationUrlResponse() {{
            trunkingV1TrunkOriginationUrl = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TrunkingV1TrunkOriginationUrl out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TrunkingV1TrunkOriginationUrl.class);
                res.trunkingV1TrunkOriginationUrl = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreatePhoneNumberResponse createPhoneNumber(org.openapis.openapi.models.operations.CreatePhoneNumberRequest request) throws Exception {
        String baseUrl = CREATE_PHONE_NUMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreatePhoneNumberPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/PhoneNumbers", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreatePhoneNumberResponse res = new org.openapis.openapi.models.operations.CreatePhoneNumberResponse() {{
            trunkingV1TrunkPhoneNumber = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TrunkingV1TrunkPhoneNumber out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TrunkingV1TrunkPhoneNumber.class);
                res.trunkingV1TrunkPhoneNumber = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateTrunkResponse createTrunk(org.openapis.openapi.models.operations.CreateTrunkRequest request) throws Exception {
        String baseUrl = CREATE_TRUNK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Trunks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateTrunkResponse res = new org.openapis.openapi.models.operations.CreateTrunkResponse() {{
            trunkingV1Trunk = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TrunkingV1Trunk out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TrunkingV1Trunk.class);
                res.trunkingV1Trunk = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteCredentialListResponse deleteCredentialList(org.openapis.openapi.models.operations.DeleteCredentialListRequest request) throws Exception {
        String baseUrl = DELETE_CREDENTIAL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteCredentialListPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/CredentialLists/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteCredentialListResponse res = new org.openapis.openapi.models.operations.DeleteCredentialListResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove an associated IP Access Control List from a Trunk
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteIpAccessControlListResponse deleteIpAccessControlList(org.openapis.openapi.models.operations.DeleteIpAccessControlListRequest request) throws Exception {
        String baseUrl = DELETE_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteIpAccessControlListPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/IpAccessControlLists/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteIpAccessControlListResponse res = new org.openapis.openapi.models.operations.DeleteIpAccessControlListResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteOriginationUrlResponse deleteOriginationUrl(org.openapis.openapi.models.operations.DeleteOriginationUrlRequest request) throws Exception {
        String baseUrl = DELETE_ORIGINATION_URL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteOriginationUrlPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/OriginationUrls/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteOriginationUrlResponse res = new org.openapis.openapi.models.operations.DeleteOriginationUrlResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeletePhoneNumberResponse deletePhoneNumber(org.openapis.openapi.models.operations.DeletePhoneNumberRequest request) throws Exception {
        String baseUrl = DELETE_PHONE_NUMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeletePhoneNumberPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/PhoneNumbers/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeletePhoneNumberResponse res = new org.openapis.openapi.models.operations.DeletePhoneNumberResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteTrunkResponse deleteTrunk(org.openapis.openapi.models.operations.DeleteTrunkRequest request) throws Exception {
        String baseUrl = DELETE_TRUNK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteTrunkPathParams.class, baseUrl, "/v1/Trunks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteTrunkResponse res = new org.openapis.openapi.models.operations.DeleteTrunkResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchCredentialListResponse fetchCredentialList(org.openapis.openapi.models.operations.FetchCredentialListRequest request) throws Exception {
        String baseUrl = FETCH_CREDENTIAL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchCredentialListPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/CredentialLists/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCredentialListResponse res = new org.openapis.openapi.models.operations.FetchCredentialListResponse() {{
            trunkingV1TrunkCredentialList = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TrunkingV1TrunkCredentialList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TrunkingV1TrunkCredentialList.class);
                res.trunkingV1TrunkCredentialList = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchIpAccessControlListResponse fetchIpAccessControlList(org.openapis.openapi.models.operations.FetchIpAccessControlListRequest request) throws Exception {
        String baseUrl = FETCH_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchIpAccessControlListPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/IpAccessControlLists/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchIpAccessControlListResponse res = new org.openapis.openapi.models.operations.FetchIpAccessControlListResponse() {{
            trunkingV1TrunkIpAccessControlList = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TrunkingV1TrunkIpAccessControlList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TrunkingV1TrunkIpAccessControlList.class);
                res.trunkingV1TrunkIpAccessControlList = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchOriginationUrlResponse fetchOriginationUrl(org.openapis.openapi.models.operations.FetchOriginationUrlRequest request) throws Exception {
        String baseUrl = FETCH_ORIGINATION_URL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchOriginationUrlPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/OriginationUrls/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchOriginationUrlResponse res = new org.openapis.openapi.models.operations.FetchOriginationUrlResponse() {{
            trunkingV1TrunkOriginationUrl = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TrunkingV1TrunkOriginationUrl out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TrunkingV1TrunkOriginationUrl.class);
                res.trunkingV1TrunkOriginationUrl = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchPhoneNumberResponse fetchPhoneNumber(org.openapis.openapi.models.operations.FetchPhoneNumberRequest request) throws Exception {
        String baseUrl = FETCH_PHONE_NUMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchPhoneNumberPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/PhoneNumbers/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchPhoneNumberResponse res = new org.openapis.openapi.models.operations.FetchPhoneNumberResponse() {{
            trunkingV1TrunkPhoneNumber = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TrunkingV1TrunkPhoneNumber out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TrunkingV1TrunkPhoneNumber.class);
                res.trunkingV1TrunkPhoneNumber = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchRecordingResponse fetchRecording(org.openapis.openapi.models.operations.FetchRecordingRequest request) throws Exception {
        String baseUrl = FETCH_RECORDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRecordingPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/Recording", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRecordingResponse res = new org.openapis.openapi.models.operations.FetchRecordingResponse() {{
            trunkingV1TrunkRecording = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TrunkingV1TrunkRecording out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TrunkingV1TrunkRecording.class);
                res.trunkingV1TrunkRecording = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTrunkResponse fetchTrunk(org.openapis.openapi.models.operations.FetchTrunkRequest request) throws Exception {
        String baseUrl = FETCH_TRUNK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTrunkPathParams.class, baseUrl, "/v1/Trunks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTrunkResponse res = new org.openapis.openapi.models.operations.FetchTrunkResponse() {{
            trunkingV1Trunk = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TrunkingV1Trunk out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TrunkingV1Trunk.class);
                res.trunkingV1Trunk = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListCredentialListResponse listCredentialList(org.openapis.openapi.models.operations.ListCredentialListRequest request) throws Exception {
        String baseUrl = LIST_CREDENTIAL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListCredentialListPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/CredentialLists", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListCredentialListQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListCredentialListResponse res = new org.openapis.openapi.models.operations.ListCredentialListResponse() {{
            listCredentialListResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListCredentialListListCredentialListResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListCredentialListListCredentialListResponse.class);
                res.listCredentialListResponse = out;
            }
        }

        return res;
    }

    /**
     * List all IP Access Control Lists for a Trunk
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListIpAccessControlListResponse listIpAccessControlList(org.openapis.openapi.models.operations.ListIpAccessControlListRequest request) throws Exception {
        String baseUrl = LIST_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListIpAccessControlListPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/IpAccessControlLists", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListIpAccessControlListQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListIpAccessControlListResponse res = new org.openapis.openapi.models.operations.ListIpAccessControlListResponse() {{
            listIpAccessControlListResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListIpAccessControlListListIpAccessControlListResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListIpAccessControlListListIpAccessControlListResponse.class);
                res.listIpAccessControlListResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListOriginationUrlResponse listOriginationUrl(org.openapis.openapi.models.operations.ListOriginationUrlRequest request) throws Exception {
        String baseUrl = LIST_ORIGINATION_URL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListOriginationUrlPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/OriginationUrls", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListOriginationUrlQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListOriginationUrlResponse res = new org.openapis.openapi.models.operations.ListOriginationUrlResponse() {{
            listOriginationUrlResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListOriginationUrlListOriginationUrlResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListOriginationUrlListOriginationUrlResponse.class);
                res.listOriginationUrlResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListPhoneNumberResponse listPhoneNumber(org.openapis.openapi.models.operations.ListPhoneNumberRequest request) throws Exception {
        String baseUrl = LIST_PHONE_NUMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListPhoneNumberPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/PhoneNumbers", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListPhoneNumberQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListPhoneNumberResponse res = new org.openapis.openapi.models.operations.ListPhoneNumberResponse() {{
            listPhoneNumberResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListPhoneNumberListPhoneNumberResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListPhoneNumberListPhoneNumberResponse.class);
                res.listPhoneNumberResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListTrunkResponse listTrunk(org.openapis.openapi.models.operations.ListTrunkRequest request) throws Exception {
        String baseUrl = LIST_TRUNK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Trunks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListTrunkQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListTrunkResponse res = new org.openapis.openapi.models.operations.ListTrunkResponse() {{
            listTrunkResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListTrunkListTrunkResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListTrunkListTrunkResponse.class);
                res.listTrunkResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateOriginationUrlResponse updateOriginationUrl(org.openapis.openapi.models.operations.UpdateOriginationUrlRequest request) throws Exception {
        String baseUrl = UPDATE_ORIGINATION_URL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateOriginationUrlPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/OriginationUrls/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateOriginationUrlResponse res = new org.openapis.openapi.models.operations.UpdateOriginationUrlResponse() {{
            trunkingV1TrunkOriginationUrl = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TrunkingV1TrunkOriginationUrl out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TrunkingV1TrunkOriginationUrl.class);
                res.trunkingV1TrunkOriginationUrl = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateRecordingResponse updateRecording(org.openapis.openapi.models.operations.UpdateRecordingRequest request) throws Exception {
        String baseUrl = UPDATE_RECORDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateRecordingPathParams.class, baseUrl, "/v1/Trunks/{TrunkSid}/Recording", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateRecordingResponse res = new org.openapis.openapi.models.operations.UpdateRecordingResponse() {{
            trunkingV1TrunkRecording = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 202) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TrunkingV1TrunkRecording out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TrunkingV1TrunkRecording.class);
                res.trunkingV1TrunkRecording = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateTrunkResponse updateTrunk(org.openapis.openapi.models.operations.UpdateTrunkRequest request) throws Exception {
        String baseUrl = UPDATE_TRUNK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateTrunkPathParams.class, baseUrl, "/v1/Trunks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateTrunkResponse res = new org.openapis.openapi.models.operations.UpdateTrunkResponse() {{
            trunkingV1Trunk = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TrunkingV1Trunk out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TrunkingV1Trunk.class);
                res.trunkingV1Trunk = out;
            }
        }

        return res;
    }
}