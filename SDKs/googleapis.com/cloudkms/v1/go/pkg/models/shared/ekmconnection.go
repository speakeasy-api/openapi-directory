// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EkmConnectionKeyManagementModeEnum - Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.
type EkmConnectionKeyManagementModeEnum string

const (
	EkmConnectionKeyManagementModeEnumKeyManagementModeUnspecified EkmConnectionKeyManagementModeEnum = "KEY_MANAGEMENT_MODE_UNSPECIFIED"
	EkmConnectionKeyManagementModeEnumManual                       EkmConnectionKeyManagementModeEnum = "MANUAL"
	EkmConnectionKeyManagementModeEnumCloudKms                     EkmConnectionKeyManagementModeEnum = "CLOUD_KMS"
)

func (e EkmConnectionKeyManagementModeEnum) ToPointer() *EkmConnectionKeyManagementModeEnum {
	return &e
}

func (e *EkmConnectionKeyManagementModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "KEY_MANAGEMENT_MODE_UNSPECIFIED":
		fallthrough
	case "MANUAL":
		fallthrough
	case "CLOUD_KMS":
		*e = EkmConnectionKeyManagementModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EkmConnectionKeyManagementModeEnum: %v", v)
	}
}

// EkmConnection - An EkmConnection represents an individual EKM connection. It can be used for creating CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC, as well as performing cryptographic operations using keys created within the EkmConnection.
type EkmConnection struct {
	// Output only. The time at which the EkmConnection was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
	CryptoSpacePath *string `json:"cryptoSpacePath,omitempty"`
	// Optional. Etag of the currently stored EkmConnection.
	Etag *string `json:"etag,omitempty"`
	// Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.
	KeyManagementMode *EkmConnectionKeyManagementModeEnum `json:"keyManagementMode,omitempty"`
	// Output only. The resource name for the EkmConnection in the format `projects/*/locations/*/ekmConnections/*`.
	Name *string `json:"name,omitempty"`
	// A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.
	ServiceResolvers []ServiceResolver `json:"serviceResolvers,omitempty"`
}

// EkmConnectionInput - An EkmConnection represents an individual EKM connection. It can be used for creating CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC, as well as performing cryptographic operations using keys created within the EkmConnection.
type EkmConnectionInput struct {
	// Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
	CryptoSpacePath *string `json:"cryptoSpacePath,omitempty"`
	// Optional. Etag of the currently stored EkmConnection.
	Etag *string `json:"etag,omitempty"`
	// Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.
	KeyManagementMode *EkmConnectionKeyManagementModeEnum `json:"keyManagementMode,omitempty"`
	// A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.
	ServiceResolvers []ServiceResolverInput `json:"serviceResolvers,omitempty"`
}
