<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * MetricDescriptorMetadata - Additional annotations that can be used to guide the usage of a metric.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class MetricDescriptorMetadata
{
    /**
     * The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
     * 
     * @var ?string $ingestDelay
     */
	#[\JMS\Serializer\Annotation\SerializedName('ingestDelay')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $ingestDelay = null;
    
    /**
     * Deprecated. Must use the MetricDescriptor.launch_stage instead.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\MetricDescriptorMetadataLaunchStageEnum $launchStage
     */
	#[\JMS\Serializer\Annotation\SerializedName('launchStage')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\MetricDescriptorMetadataLaunchStageEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?MetricDescriptorMetadataLaunchStageEnum $launchStage = null;
    
    /**
     * The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
     * 
     * @var ?string $samplePeriod
     */
	#[\JMS\Serializer\Annotation\SerializedName('samplePeriod')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $samplePeriod = null;
    
	public function __construct()
	{
		$this->ingestDelay = null;
		$this->launchStage = null;
		$this->samplePeriod = null;
	}
}
