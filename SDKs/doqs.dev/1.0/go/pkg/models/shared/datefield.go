// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DateFieldFontEnum - An enumeration.
type DateFieldFontEnum string

const (
	DateFieldFontEnumCourier    DateFieldFontEnum = "courier"
	DateFieldFontEnumHelvetica  DateFieldFontEnum = "helvetica"
	DateFieldFontEnumTimesRoman DateFieldFontEnum = "times_roman"
)

func (e DateFieldFontEnum) ToPointer() *DateFieldFontEnum {
	return &e
}

func (e *DateFieldFontEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "courier":
		fallthrough
	case "helvetica":
		fallthrough
	case "times_roman":
		*e = DateFieldFontEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DateFieldFontEnum: %v", v)
	}
}

// DateFieldHorizontalAlignEnum - An enumeration.
type DateFieldHorizontalAlignEnum string

const (
	DateFieldHorizontalAlignEnumL DateFieldHorizontalAlignEnum = "L"
	DateFieldHorizontalAlignEnumC DateFieldHorizontalAlignEnum = "C"
	DateFieldHorizontalAlignEnumR DateFieldHorizontalAlignEnum = "R"
)

func (e DateFieldHorizontalAlignEnum) ToPointer() *DateFieldHorizontalAlignEnum {
	return &e
}

func (e *DateFieldHorizontalAlignEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "L":
		fallthrough
	case "C":
		fallthrough
	case "R":
		*e = DateFieldHorizontalAlignEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DateFieldHorizontalAlignEnum: %v", v)
	}
}

type DateFieldTypeEnum string

const (
	DateFieldTypeEnumDate DateFieldTypeEnum = "date"
)

func (e DateFieldTypeEnum) ToPointer() *DateFieldTypeEnum {
	return &e
}

func (e *DateFieldTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = DateFieldTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DateFieldTypeEnum: %v", v)
	}
}

// DateFieldVerticalAlignEnum - An enumeration.
type DateFieldVerticalAlignEnum string

const (
	DateFieldVerticalAlignEnumT DateFieldVerticalAlignEnum = "T"
	DateFieldVerticalAlignEnumC DateFieldVerticalAlignEnum = "C"
	DateFieldVerticalAlignEnumB DateFieldVerticalAlignEnum = "B"
)

func (e DateFieldVerticalAlignEnum) ToPointer() *DateFieldVerticalAlignEnum {
	return &e
}

func (e *DateFieldVerticalAlignEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "T":
		fallthrough
	case "C":
		fallthrough
	case "B":
		*e = DateFieldVerticalAlignEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DateFieldVerticalAlignEnum: %v", v)
	}
}

type DateField struct {
	Bbox       BoundingBox                   `json:"bbox"`
	CellCount  *int64                        `json:"cell_count,omitempty"`
	CellOffset *int64                        `json:"cell_offset,omitempty"`
	Cells      *bool                         `json:"cells,omitempty"`
	Color      *string                       `json:"color,omitempty"`
	Font       *DateFieldFontEnum            `json:"font,omitempty"`
	FontSize   *int64                        `json:"font_size,omitempty"`
	Format     string                        `json:"format"`
	HAlign     *DateFieldHorizontalAlignEnum `json:"h_align,omitempty"`
	Locale     *string                       `json:"locale,omitempty"`
	Name       string                        `json:"name"`
	Page       int64                         `json:"page"`
	Required   *bool                         `json:"required,omitempty"`
	Type       DateFieldTypeEnum             `json:"type"`
	VAlign     *DateFieldVerticalAlignEnum   `json:"v_align,omitempty"`
}
