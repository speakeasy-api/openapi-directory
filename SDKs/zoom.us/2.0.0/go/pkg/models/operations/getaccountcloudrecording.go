// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type GetAccountCloudRecordingSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type GetAccountCloudRecordingPathParams struct {
	// Unique identifier of the account.
	AccountID string `pathParam:"style=simple,explode=false,name=accountId"`
}

type GetAccountCloudRecordingQueryParams struct {
	// The start date in UTC for the monthly range for which you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date. For example, if you make the API request on June 30, 2020, without providing the “from” and “to” parameters, by default the value of 'from' field will be “2020-06-30” and the value of the 'to' field will be “2020-07-01”.
	From *time.Time `queryParam:"style=form,explode=true,name=from"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// The end date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month.
	To *time.Time `queryParam:"style=form,explode=true,name=to"`
}

type GetAccountCloudRecordingRequest struct {
	PathParams  GetAccountCloudRecordingPathParams
	QueryParams GetAccountCloudRecordingQueryParams
	Security    GetAccountCloudRecordingSecurity
}

// GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum - The recording file type. The value of this field could be one of the following:<br>
// * `MP4`: Video file of the recording.<br>
// * `M4A` Audio-only file of the recording.<br>
// * `TB`: Timestamp file of the recording in JSON format.<br>
// * `TRANSCRIPT`: Transcription file of the recording in VTT format.<br>
// * `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>
// * `CC`: File containing closed captions of the recording in VTT file format.<br>
// * `CSV`: File containing polling data in csv format.
//
// A recording file object with file type of either `CC` or `TB` **does not have** the following properties:<br>
//
//	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
type GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum string

const (
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnumMp4        GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum = "MP4"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnumM4A        GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum = "M4A"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnumChat       GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum = "CHAT"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnumTranscript GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum = "TRANSCRIPT"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnumCc         GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum = "CC"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnumCsv        GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum = "CSV"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnumTb         GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum = "TB"
)

func (e *GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MP4":
		fallthrough
	case "M4A":
		fallthrough
	case "CHAT":
		fallthrough
	case "TRANSCRIPT":
		fallthrough
	case "CC":
		fallthrough
	case "CSV":
		fallthrough
	case "TB":
		*e = GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum: %s", s)
	}
}

// GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum - The recording type. The value of this field can be one of the following:<br>
// * `shared_screen_with_speaker_view(CC)`
// * `shared_screen_with_speaker_view`
// * `shared_screen_with_gallery_view`
// * `shared_screen`
// * `active_speaker`
// * `gallery_view`
// * `audio_only`
// * `audio_transcript`
// * `chat_file`
// * `host_video`
// * `closed_caption`
// * `poll`
// * `timeline`
// * `thumbnail`
type GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum string

const (
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnumSharedScreenWithSpeakerViewCc GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = "shared_screen_with_speaker_view(CC)"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnumSharedScreenWithSpeakerView   GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = "shared_screen_with_speaker_view"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnumSharedScreenWithGalleryView   GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = "shared_screen_with_gallery_view"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnumActiveSpeaker                 GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = "active_speaker"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnumGalleryView                   GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = "gallery_view"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnumSharedScreen                  GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = "shared_screen"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnumAudioOnly                     GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = "audio_only"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnumAudioTranscript               GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = "audio_transcript"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnumChatFile                      GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = "chat_file"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnumPoll                          GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = "poll"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnumHostVideo                     GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = "host_video"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnumClosedCaption                 GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = "closed_caption"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnumTimeline                      GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = "timeline"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnumThumbnail                     GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = "thumbnail"
)

func (e *GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "shared_screen_with_speaker_view(CC)":
		fallthrough
	case "shared_screen_with_speaker_view":
		fallthrough
	case "shared_screen_with_gallery_view":
		fallthrough
	case "active_speaker":
		fallthrough
	case "gallery_view":
		fallthrough
	case "shared_screen":
		fallthrough
	case "audio_only":
		fallthrough
	case "audio_transcript":
		fallthrough
	case "chat_file":
		fallthrough
	case "poll":
		fallthrough
	case "host_video":
		fallthrough
	case "closed_caption":
		fallthrough
	case "timeline":
		fallthrough
	case "thumbnail":
		*e = GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum: %s", s)
	}
}

// GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum - The status of the recording, either `completed` or `processing`.
type GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum string

const (
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnumCompleted  GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum = "completed"
	GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnumProcessing GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum = "processing"
)

func (e *GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "completed":
		fallthrough
	case "processing":
		*e = GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum: %s", s)
	}
}

type GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles struct {
	// The URL using which the recording can be downloaded
	DownloadURL *string
	// The size of the recording file in bytes.
	FileSize *float64
	// The recording file type. The value of this field could be one of the following:<br>
	// * `MP4`: Video file of the recording.<br>
	// * `M4A` Audio-only file of the recording.<br>
	// * `TB`: Timestamp file of the recording in JSON format.<br>
	// * `TRANSCRIPT`: Transcription file of the recording in VTT format.<br>
	// * `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>
	// * `CC`: File containing closed captions of the recording in VTT file format.<br>
	// * `CSV`: File containing polling data in csv format.
	//
	// A recording file object with file type of either `CC` or `TB` **does not have** the following properties:<br>
	// 	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
	FileType *GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum
	// Recording ID. Identifier for the recording.
	ID *string
	// Universally unique identifier of the meeting instance that was being recorded.
	MeetingID *string
	// The URL using which recording can be played.
	PlayURL *string
	// The date and time at which the recording ended.
	RecordingEnd *string
	// The date and time at which the recording started.
	RecordingStart *string
	// The recording type. The value of this field can be one of the following:<br>
	// * `shared_screen_with_speaker_view(CC)`
	// * `shared_screen_with_speaker_view`
	// * `shared_screen_with_gallery_view`
	// * `shared_screen`
	// * `active_speaker`
	// * `gallery_view`
	// * `audio_only`
	// * `audio_transcript`
	// * `chat_file`
	// * `host_video`
	// * `closed_caption`
	// * `poll`
	// * `timeline`
	// * `thumbnail`
	//
	RecordingType *GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum
	// The status of the recording, either `completed` or `processing`.
	Status *GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum
}

type GetAccountCloudRecording200ApplicationXMLMeetings struct {
	// The scheduled duration of the meeting.
	Duration *int64
	// User ID of the user who is set as the host of the meeting.
	HostID *string
	// Meeting ID - Unique Identifier of a meeting, also known as Meeting Number.
	ID *string
	// The total number of recordings retrieved from the account.
	RecordingCount *int64
	// Recording files object
	RecordingFiles []GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles
	// The date and time at which the meeting started.
	StartTime *time.Time
	// Meeting topic.
	Topic *string
	// The total size of the meeting in bytes.
	TotalSize *int64
	// Universally Unique Identifier of a meeting instance. Each meeting instance will have its own meeting UUID.
	UUID *string
}

// GetAccountCloudRecording200ApplicationXML - **Response Error Code:** `200` <br>
// Only available for Paid account.
//
// **HTTP Status Code:** `200` <br>
// Recording(s) listed successfully.
type GetAccountCloudRecording200ApplicationXML struct {
	// The start date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date. For example, if you make the API request on June 30, 2020, without providing the “from” and “to” parameters, by default the value of 'from' field will be “2020-06-30” and the value of the 'to' field will be “2020-07-01”.
	From *time.Time
	// Meetings Object
	Meetings []GetAccountCloudRecording200ApplicationXMLMeetings
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string
	// The number of records returned within a single API call.
	PageSize *int64
	// The end date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month.
	To *time.Time
	// Total number of records found for this request across all pages.
	TotalRecords *int64
}

// GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum - The recording file type. The value of this field could be one of the following:<br>
// * `MP4`: Video file of the recording.<br>
// * `M4A` Audio-only file of the recording.<br>
// * `TB`: Timestamp file of the recording in JSON format.<br>
// * `TRANSCRIPT`: Transcription file of the recording in VTT format.<br>
// * `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>
// * `CC`: File containing closed captions of the recording in VTT file format.<br>
// * `CSV`: File containing polling data in csv format.
//
// A recording file object with file type of either `CC` or `TB` **does not have** the following properties:<br>
//
//	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
type GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum string

const (
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnumMp4        GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum = "MP4"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnumM4A        GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum = "M4A"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnumChat       GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum = "CHAT"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnumTranscript GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum = "TRANSCRIPT"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnumCc         GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum = "CC"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnumCsv        GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum = "CSV"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnumTb         GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum = "TB"
)

func (e *GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MP4":
		fallthrough
	case "M4A":
		fallthrough
	case "CHAT":
		fallthrough
	case "TRANSCRIPT":
		fallthrough
	case "CC":
		fallthrough
	case "CSV":
		fallthrough
	case "TB":
		*e = GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum: %s", s)
	}
}

// GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum - The recording type. The value of this field can be one of the following:<br>
// * `shared_screen_with_speaker_view(CC)`
// * `shared_screen_with_speaker_view`
// * `shared_screen_with_gallery_view`
// * `shared_screen`
// * `active_speaker`
// * `gallery_view`
// * `audio_only`
// * `audio_transcript`
// * `chat_file`
// * `host_video`
// * `closed_caption`
// * `poll`
// * `timeline`
// * `thumbnail`
type GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum string

const (
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnumSharedScreenWithSpeakerViewCc GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = "shared_screen_with_speaker_view(CC)"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnumSharedScreenWithSpeakerView   GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = "shared_screen_with_speaker_view"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnumSharedScreenWithGalleryView   GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = "shared_screen_with_gallery_view"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnumActiveSpeaker                 GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = "active_speaker"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnumGalleryView                   GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = "gallery_view"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnumSharedScreen                  GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = "shared_screen"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnumAudioOnly                     GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = "audio_only"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnumAudioTranscript               GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = "audio_transcript"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnumChatFile                      GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = "chat_file"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnumPoll                          GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = "poll"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnumHostVideo                     GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = "host_video"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnumClosedCaption                 GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = "closed_caption"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnumTimeline                      GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = "timeline"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnumThumbnail                     GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = "thumbnail"
)

func (e *GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "shared_screen_with_speaker_view(CC)":
		fallthrough
	case "shared_screen_with_speaker_view":
		fallthrough
	case "shared_screen_with_gallery_view":
		fallthrough
	case "active_speaker":
		fallthrough
	case "gallery_view":
		fallthrough
	case "shared_screen":
		fallthrough
	case "audio_only":
		fallthrough
	case "audio_transcript":
		fallthrough
	case "chat_file":
		fallthrough
	case "poll":
		fallthrough
	case "host_video":
		fallthrough
	case "closed_caption":
		fallthrough
	case "timeline":
		fallthrough
	case "thumbnail":
		*e = GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum: %s", s)
	}
}

// GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum - The status of the recording, either `completed` or `processing`.
type GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum string

const (
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnumCompleted  GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum = "completed"
	GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnumProcessing GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum = "processing"
)

func (e *GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "completed":
		fallthrough
	case "processing":
		*e = GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum: %s", s)
	}
}

type GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles struct {
	// The URL using which the recording can be downloaded
	DownloadURL *string `json:"download_url,omitempty"`
	// The size of the recording file in bytes.
	FileSize *float64 `json:"file_size,omitempty"`
	// The recording file type. The value of this field could be one of the following:<br>
	// * `MP4`: Video file of the recording.<br>
	// * `M4A` Audio-only file of the recording.<br>
	// * `TB`: Timestamp file of the recording in JSON format.<br>
	// * `TRANSCRIPT`: Transcription file of the recording in VTT format.<br>
	// * `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>
	// * `CC`: File containing closed captions of the recording in VTT file format.<br>
	// * `CSV`: File containing polling data in csv format.
	//
	// A recording file object with file type of either `CC` or `TB` **does not have** the following properties:<br>
	// 	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
	FileType *GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum `json:"file_type,omitempty"`
	// Recording ID. Identifier for the recording.
	ID *string `json:"id,omitempty"`
	// Universally unique identifier of the meeting instance that was being recorded.
	MeetingID *string `json:"meeting_id,omitempty"`
	// The URL using which recording can be played.
	PlayURL *string `json:"play_url,omitempty"`
	// The date and time at which the recording ended.
	RecordingEnd *string `json:"recording_end,omitempty"`
	// The date and time at which the recording started.
	RecordingStart *string `json:"recording_start,omitempty"`
	// The recording type. The value of this field can be one of the following:<br>
	// * `shared_screen_with_speaker_view(CC)`
	// * `shared_screen_with_speaker_view`
	// * `shared_screen_with_gallery_view`
	// * `shared_screen`
	// * `active_speaker`
	// * `gallery_view`
	// * `audio_only`
	// * `audio_transcript`
	// * `chat_file`
	// * `host_video`
	// * `closed_caption`
	// * `poll`
	// * `timeline`
	// * `thumbnail`
	//
	RecordingType *GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum `json:"recording_type,omitempty"`
	// The status of the recording, either `completed` or `processing`.
	Status *GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum `json:"status,omitempty"`
}

type GetAccountCloudRecording200ApplicationJSONMeetings struct {
	// The scheduled duration of the meeting.
	Duration *int64 `json:"duration,omitempty"`
	// User ID of the user who is set as the host of the meeting.
	HostID *string `json:"host_id,omitempty"`
	// Meeting ID - Unique Identifier of a meeting, also known as Meeting Number.
	ID *string `json:"id,omitempty"`
	// The total number of recordings retrieved from the account.
	RecordingCount *int64 `json:"recording_count,omitempty"`
	// Recording files object
	RecordingFiles []GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles `json:"recording_files,omitempty"`
	// The date and time at which the meeting started.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Meeting topic.
	Topic *string `json:"topic,omitempty"`
	// The total size of the meeting in bytes.
	TotalSize *int64 `json:"total_size,omitempty"`
	// Universally Unique Identifier of a meeting instance. Each meeting instance will have its own meeting UUID.
	UUID *string `json:"uuid,omitempty"`
}

// GetAccountCloudRecording200ApplicationJSON - **Response Error Code:** `200` <br>
// Only available for Paid account.
//
// **HTTP Status Code:** `200` <br>
// Recording(s) listed successfully.
type GetAccountCloudRecording200ApplicationJSON struct {
	// The start date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date. For example, if you make the API request on June 30, 2020, without providing the “from” and “to” parameters, by default the value of 'from' field will be “2020-06-30” and the value of the 'to' field will be “2020-07-01”.
	From *time.Time `json:"from,omitempty"`
	// Meetings Object
	Meetings []GetAccountCloudRecording200ApplicationJSONMeetings `json:"meetings,omitempty"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of records returned within a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
	// The end date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month.
	To *time.Time `json:"to,omitempty"`
	// Total number of records found for this request across all pages.
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type GetAccountCloudRecordingResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **Response Error Code:** `200` <br>
	// Only available for Paid account.
	//
	// **HTTP Status Code:** `200` <br>
	// Recording(s) listed successfully.
	//
	//
	GetAccountCloudRecording200ApplicationJSONObject *GetAccountCloudRecording200ApplicationJSON
}
