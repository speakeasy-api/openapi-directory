/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Payment {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Send payment notification
   * 
   * @remarks
   * Send a payment notification of a given order, by order ID and payment ID.
   * 
   * 
> The `Notify payment` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
   * 
   * 
> Learn more about [Transaction Details](https://help.vtex.com/en/tutorial/how-to-view-the-orders-details).
   * 
   * 
   * ## Request body properties
   * 
   * | Attribute    | Type        | Description |
   * | --------------- |:---------:| --------------------------------------:|
   * | `orderId` | string | Order Id |
   * | `paymentId` | string | Payment ID |
   */
  sendPaymentNotification2(
    req: operations.SendPaymentNotification2Request,
    config?: AxiosRequestConfig
  ): Promise<operations.SendPaymentNotification2Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SendPaymentNotification2Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/orders/pvt/document/{orderId}/payment/{paymentId}/notify-payment",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SendPaymentNotification2Response =
        new operations.SendPaymentNotification2Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 400, 403, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
