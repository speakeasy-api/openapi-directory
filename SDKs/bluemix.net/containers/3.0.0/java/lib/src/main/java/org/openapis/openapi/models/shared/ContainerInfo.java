/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ContainerInfo - OK. A list with detailed information about the container is returned. 
 */
public class ContainerInfo {
    /**
     * The name of the Cloud Foundry app that was bound to the container during creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BluemixApp")
    public String bluemixApp;
    public ContainerInfo withBluemixApp(String bluemixApp) {
        this.bluemixApp = bluemixApp;
        return this;
    }
    
    /**
     * The name of the Bluemix service instance that was bound to the container during creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BluemixServices")
    public String bluemixServices;
    public ContainerInfo withBluemixServices(String bluemixServices) {
        this.bluemixServices = bluemixServices;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Config")
    public ContainerConfig config;
    public ContainerInfo withConfig(ContainerConfig config) {
        this.config = config;
        return this;
    }
    
    /**
     * The current status of the container. This state can either be transient, such as BUILDING or NETWORKING, or non-transient, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ContainerState")
    public String containerState;
    public ContainerInfo withContainerState(String containerState) {
        this.containerState = containerState;
        return this;
    }
    
    /**
     * The date and time the container was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("Created")
    public OffsetDateTime created;
    public ContainerInfo withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Group")
    public Group group;
    public ContainerInfo withGroup(Group group) {
        this.group = group;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HostConfig")
    public HostConfig hostConfig;
    public ContainerInfo withHostConfig(HostConfig hostConfig) {
        this.hostConfig = hostConfig;
        return this;
    }
    
    /**
     * The ID representing the physical compute host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HostId")
    public String hostId;
    public ContainerInfo withHostId(String hostId) {
        this.hostId = hostId;
        return this;
    }
    
    /**
     * The name of the container. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Human_Id")
    public String humanId;
    public ContainerInfo withHumanId(String humanId) {
        this.humanId = humanId;
        return this;
    }
    
    /**
     * Unique identifier representing a container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public String id;
    public ContainerInfo withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Unique identifier representing a container image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Image")
    public String image;
    public ContainerInfo withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * A list of volumes that are mounted to the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Mounts")
    public String[] mounts;
    public ContainerInfo withMounts(String[] mounts) {
        this.mounts = mounts;
        return this;
    }
    
    /**
     * The name of the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Name")
    public String name;
    public ContainerInfo withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NetworkSettings")
    public NetworkSetting networkSettings;
    public ContainerInfo withNetworkSettings(NetworkSetting networkSettings) {
        this.networkSettings = networkSettings;
        return this;
    }
    
    /**
     * The environment variable indicating the binary location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Path")
    public String path;
    public ContainerInfo withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * Path to the resolve.conf file inside the container. The resolve.conf file is used to resolve the DNS servers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ResolveConfPath")
    public String resolveConfPath;
    public ContainerInfo withResolveConfPath(String resolveConfPath) {
        this.resolveConfPath = resolveConfPath;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("State")
    public ContainerState state;
    public ContainerInfo withState(ContainerState state) {
        this.state = state;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Volumes")
    public Volume volumes;
    public ContainerInfo withVolumes(Volume volumes) {
        this.volumes = volumes;
        return this;
    }
    
    /**
     * LIst of volumes that is mounted to the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VolumesRW")
    public String[] volumesRW;
    public ContainerInfo withVolumesRW(String[] volumesRW) {
        this.volumesRW = volumesRW;
        return this;
    }
    
}
