/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Conversion - A Conversion represents when a user successfully performs a desired action after seeing an ad.
 */
public class Conversion {
    /**
     * Whether this particular request may come from a user under the age of 13, under COPPA compliance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("childDirectedTreatment")
    public Boolean childDirectedTreatment;
    public Conversion withChildDirectedTreatment(Boolean childDirectedTreatment) {
        this.childDirectedTreatment = childDirectedTreatment;
        return this;
    }
    
    /**
     * Custom floodlight variables. This field may only be used when calling batchinsert; it is not supported by batchupdate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customVariables")
    public CustomFloodlightVariable[] customVariables;
    public Conversion withCustomVariables(CustomFloodlightVariable[] customVariables) {
        this.customVariables = customVariables;
        return this;
    }
    
    /**
     * The alphanumeric encrypted user ID. When set, encryptionInfo should also be specified. This field is mutually exclusive with encryptedUserIdCandidates[], matchId, mobileDeviceId and gclid. This or encryptedUserIdCandidates[] or matchId or mobileDeviceId or gclid is a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptedUserId")
    public String encryptedUserId;
    public Conversion withEncryptedUserId(String encryptedUserId) {
        this.encryptedUserId = encryptedUserId;
        return this;
    }
    
    /**
     * A list of the alphanumeric encrypted user IDs. Any user ID with exposure prior to the conversion timestamp will be used in the inserted conversion. If no such user ID is found then the conversion will be rejected with INVALID_ARGUMENT error. When set, encryptionInfo should also be specified. This field may only be used when calling batchinsert; it is not supported by batchupdate. This field is mutually exclusive with encryptedUserId, matchId, mobileDeviceId and gclid. This or encryptedUserId or matchId or mobileDeviceId or gclid is a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptedUserIdCandidates")
    public String[] encryptedUserIdCandidates;
    public Conversion withEncryptedUserIdCandidates(String[] encryptedUserIdCandidates) {
        this.encryptedUserIdCandidates = encryptedUserIdCandidates;
        return this;
    }
    
    /**
     * Floodlight Activity ID of this conversion. This is a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floodlightActivityId")
    public String floodlightActivityId;
    public Conversion withFloodlightActivityId(String floodlightActivityId) {
        this.floodlightActivityId = floodlightActivityId;
        return this;
    }
    
    /**
     * Floodlight Configuration ID of this conversion. This is a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floodlightConfigurationId")
    public String floodlightConfigurationId;
    public Conversion withFloodlightConfigurationId(String floodlightConfigurationId) {
        this.floodlightConfigurationId = floodlightConfigurationId;
        return this;
    }
    
    /**
     * The Google click ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId and mobileDeviceId. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or mobileDeviceId is a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gclid")
    public String gclid;
    public Conversion withGclid(String gclid) {
        this.gclid = gclid;
        return this;
    }
    
    /**
     * Identifies what kind of resource this is. Value: the fixed string "dfareporting#conversion".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Conversion withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Whether Limit Ad Tracking is enabled. When set to true, the conversion will be used for reporting but not targeting. This will prevent remarketing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limitAdTracking")
    public Boolean limitAdTracking;
    public Conversion withLimitAdTracking(Boolean limitAdTracking) {
        this.limitAdTracking = limitAdTracking;
        return this;
    }
    
    /**
     * The match ID field. A match ID is your own first-party identifier that has been synced with Google using the match ID feature in Floodlight. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[],mobileDeviceId and gclid. This or encryptedUserId or encryptedUserIdCandidates[] or mobileDeviceId or gclid is a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matchId")
    public String matchId;
    public Conversion withMatchId(String matchId) {
        this.matchId = matchId;
        return this;
    }
    
    /**
     * The mobile device ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId and gclid. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or gclid is a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobileDeviceId")
    public String mobileDeviceId;
    public Conversion withMobileDeviceId(String mobileDeviceId) {
        this.mobileDeviceId = mobileDeviceId;
        return this;
    }
    
    /**
     * Whether the conversion was for a non personalized ad.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nonPersonalizedAd")
    public Boolean nonPersonalizedAd;
    public Conversion withNonPersonalizedAd(Boolean nonPersonalizedAd) {
        this.nonPersonalizedAd = nonPersonalizedAd;
        return this;
    }
    
    /**
     * The ordinal of the conversion. Use this field to control how conversions of the same user and day are de-duplicated. This is a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ordinal")
    public String ordinal;
    public Conversion withOrdinal(String ordinal) {
        this.ordinal = ordinal;
        return this;
    }
    
    /**
     * The quantity of the conversion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    public String quantity;
    public Conversion withQuantity(String quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     * The timestamp of conversion, in Unix epoch micros. This is a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestampMicros")
    public String timestampMicros;
    public Conversion withTimestampMicros(String timestampMicros) {
        this.timestampMicros = timestampMicros;
        return this;
    }
    
    /**
     * Whether this particular request may come from a user under the age of 16 (may differ by country), under compliance with the European Union's General Data Protection Regulation (GDPR).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("treatmentForUnderage")
    public Boolean treatmentForUnderage;
    public Conversion withTreatmentForUnderage(Boolean treatmentForUnderage) {
        this.treatmentForUnderage = treatmentForUnderage;
        return this;
    }
    
    /**
     * The value of the conversion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    public Double value;
    public Conversion withValue(Double value) {
        this.value = value;
        return this;
    }
    
}
