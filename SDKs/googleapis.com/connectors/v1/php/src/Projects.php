<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Refresh runtime schema of a connection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsConnectionSchemaMetadataRefreshRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsConnectionSchemaMetadataRefreshSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsConnectionSchemaMetadataRefreshResponse
     */
	public function connectorsProjectsLocationsConnectionsConnectionSchemaMetadataRefresh(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsConnectionSchemaMetadataRefreshRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsConnectionSchemaMetadataRefreshSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsConnectionSchemaMetadataRefreshResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:refresh', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsConnectionSchemaMetadataRefreshRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsConnectionSchemaMetadataRefreshRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsConnectionSchemaMetadataRefreshResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Connection in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsCreateResponse
     */
	public function connectorsProjectsLocationsConnectionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/connections', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "connectionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Connections in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsListResponse
     */
	public function connectorsProjectsLocationsConnectionsList(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/connections', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConnectionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListConnectionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the parameters of a single Connection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsPatchResponse
     */
	public function connectorsProjectsLocationsConnectionsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "connectionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List schema of a runtime actions filtered by action name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeActionSchemasListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeActionSchemasListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeActionSchemasListResponse
     */
	public function connectorsProjectsLocationsConnectionsRuntimeActionSchemasList(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeActionSchemasListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeActionSchemasListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeActionSchemasListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/runtimeActionSchemas', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeActionSchemasListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeActionSchemasListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeActionSchemasListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRuntimeActionSchemasResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRuntimeActionSchemasResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List schema of a runtime entities filtered by entity name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeEntitySchemasListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeEntitySchemasListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeEntitySchemasListResponse
     */
	public function connectorsProjectsLocationsConnectionsRuntimeEntitySchemasList(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeEntitySchemasListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeEntitySchemasListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeEntitySchemasListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/runtimeEntitySchemas', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeEntitySchemasListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeEntitySchemasListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsRuntimeEntitySchemasListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRuntimeEntitySchemasResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRuntimeEntitySchemasResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsListResponse
     */
	public function connectorsProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsCancelResponse
     */
	public function connectorsProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsDeleteResponse
     */
	public function connectorsProjectsLocationsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsListResponse
     */
	public function connectorsProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Connectors in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsListResponse
     */
	public function connectorsProjectsLocationsProvidersConnectorsList(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/connectors', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConnectorsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListConnectorsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets details of a single connector version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsGetResponse
     */
	public function connectorsProjectsLocationsProvidersConnectorsVersionsGet(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connectorVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConnectorVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Connector Versions in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsListResponse
     */
	public function connectorsProjectsLocationsProvidersConnectorsVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersConnectorsVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConnectorVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListConnectorVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersGetIamPolicyResponse
     */
	public function connectorsProjectsLocationsProvidersGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Providers in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersListResponse
     */
	public function connectorsProjectsLocationsProvidersList(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/providers', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listProvidersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListProvidersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersSetIamPolicyResponse
     */
	public function connectorsProjectsLocationsProvidersSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersTestIamPermissionsResponse
     */
	public function connectorsProjectsLocationsProvidersTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsProvidersTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}