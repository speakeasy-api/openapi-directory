// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type VerifyCheckPathParams struct {
	// The response format.
	Format shared.FormatEnum `pathParam:"style=simple,explode=false,name=format"`
}

type VerifyCheckRequest struct {
	PathParams VerifyCheckPathParams
	Request    shared.CheckRequest `request:"mediaType=application/x-www-form-urlencoded"`
}

type VerifyCheck200TextXMLType string

const (
	VerifyCheck200TextXMLTypeCheckResponse      VerifyCheck200TextXMLType = "checkResponse"
	VerifyCheck200TextXMLTypeCheckErrorResponse VerifyCheck200TextXMLType = "checkErrorResponse"
)

type VerifyCheck200TextXML struct {
	CheckResponse      *shared.CheckResponse
	CheckErrorResponse *shared.CheckErrorResponse

	Type VerifyCheck200TextXMLType
}

func CreateVerifyCheck200TextXMLCheckResponse(checkResponse shared.CheckResponse) VerifyCheck200TextXML {
	typ := VerifyCheck200TextXMLTypeCheckResponse

	return VerifyCheck200TextXML{
		CheckResponse: &checkResponse,
		Type:          typ,
	}
}

func CreateVerifyCheck200TextXMLCheckErrorResponse(checkErrorResponse shared.CheckErrorResponse) VerifyCheck200TextXML {
	typ := VerifyCheck200TextXMLTypeCheckErrorResponse

	return VerifyCheck200TextXML{
		CheckErrorResponse: &checkErrorResponse,
		Type:               typ,
	}
}

func (u *VerifyCheck200TextXML) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	checkResponse := new(shared.CheckResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&checkResponse); err == nil {
		u.CheckResponse = checkResponse
		u.Type = VerifyCheck200TextXMLTypeCheckResponse
		return nil
	}

	checkErrorResponse := new(shared.CheckErrorResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&checkErrorResponse); err == nil {
		u.CheckErrorResponse = checkErrorResponse
		u.Type = VerifyCheck200TextXMLTypeCheckErrorResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u VerifyCheck200TextXML) MarshalJSON() ([]byte, error) {
	if u.CheckResponse != nil {
		return json.Marshal(u.CheckResponse)
	}

	if u.CheckErrorResponse != nil {
		return json.Marshal(u.CheckErrorResponse)
	}

	return nil, nil
}

type VerifyCheck200ApplicationJSONType string

const (
	VerifyCheck200ApplicationJSONTypeCheckResponse      VerifyCheck200ApplicationJSONType = "checkResponse"
	VerifyCheck200ApplicationJSONTypeCheckErrorResponse VerifyCheck200ApplicationJSONType = "checkErrorResponse"
)

type VerifyCheck200ApplicationJSON struct {
	CheckResponse      *shared.CheckResponse
	CheckErrorResponse *shared.CheckErrorResponse

	Type VerifyCheck200ApplicationJSONType
}

func CreateVerifyCheck200ApplicationJSONCheckResponse(checkResponse shared.CheckResponse) VerifyCheck200ApplicationJSON {
	typ := VerifyCheck200ApplicationJSONTypeCheckResponse

	return VerifyCheck200ApplicationJSON{
		CheckResponse: &checkResponse,
		Type:          typ,
	}
}

func CreateVerifyCheck200ApplicationJSONCheckErrorResponse(checkErrorResponse shared.CheckErrorResponse) VerifyCheck200ApplicationJSON {
	typ := VerifyCheck200ApplicationJSONTypeCheckErrorResponse

	return VerifyCheck200ApplicationJSON{
		CheckErrorResponse: &checkErrorResponse,
		Type:               typ,
	}
}

func (u *VerifyCheck200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	checkResponse := new(shared.CheckResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&checkResponse); err == nil {
		u.CheckResponse = checkResponse
		u.Type = VerifyCheck200ApplicationJSONTypeCheckResponse
		return nil
	}

	checkErrorResponse := new(shared.CheckErrorResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&checkErrorResponse); err == nil {
		u.CheckErrorResponse = checkErrorResponse
		u.Type = VerifyCheck200ApplicationJSONTypeCheckErrorResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u VerifyCheck200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.CheckResponse != nil {
		return json.Marshal(u.CheckResponse)
	}

	if u.CheckErrorResponse != nil {
		return json.Marshal(u.CheckErrorResponse)
	}

	return nil, nil
}

type VerifyCheckResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	VerifyCheck200ApplicationJSONOneOf *VerifyCheck200ApplicationJSON
}
