"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ChannelStatusLongUploadsStatusEnum(str, Enum):
    r"""The long uploads status of this channel. See https://support.google.com/youtube/answer/71673 for more information."""
    LONG_UPLOADS_UNSPECIFIED = 'longUploadsUnspecified'
    ALLOWED = 'allowed'
    ELIGIBLE = 'eligible'
    DISALLOWED = 'disallowed'

class ChannelStatusPrivacyStatusEnum(str, Enum):
    r"""Privacy status of the channel."""
    PUBLIC = 'public'
    UNLISTED = 'unlisted'
    PRIVATE = 'private'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelStatus:
    r"""JSON template for the status part of a channel."""
    
    is_linked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isLinked'), 'exclude': lambda f: f is None }})
    r"""If true, then the user is linked to either a YouTube username or G+ account. Otherwise, the user doesn't have a public YouTube identity."""  
    long_uploads_status: Optional[ChannelStatusLongUploadsStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longUploadsStatus'), 'exclude': lambda f: f is None }})
    r"""The long uploads status of this channel. See https://support.google.com/youtube/answer/71673 for more information."""  
    made_for_kids: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('madeForKids'), 'exclude': lambda f: f is None }})  
    privacy_status: Optional[ChannelStatusPrivacyStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacyStatus'), 'exclude': lambda f: f is None }})
    r"""Privacy status of the channel."""  
    self_declared_made_for_kids: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selfDeclaredMadeForKids'), 'exclude': lambda f: f is None }})  
    