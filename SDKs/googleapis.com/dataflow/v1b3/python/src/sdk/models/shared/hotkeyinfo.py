"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HotKeyInfo:
    r"""Information about a hot key."""
    
    hot_key_age: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hotKeyAge'), 'exclude': lambda f: f is None }})
    r"""The age of the hot key measured from when it was first detected."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""A detected hot key that is causing limited parallelism. This field will be populated only if the following flag is set to true: \\"--enable_hot_key_logging\\"."""  
    key_truncated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyTruncated'), 'exclude': lambda f: f is None }})
    r"""If true, then the above key is truncated and cannot be deserialized. This occurs if the key above is populated and the key size is >5MB."""  
    