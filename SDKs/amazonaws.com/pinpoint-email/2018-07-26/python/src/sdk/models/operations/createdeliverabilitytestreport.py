"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createdeliverabilitytestreportresponse as shared_createdeliverabilitytestreportresponse
from ..shared import message as shared_message
from ..shared import rawmessage as shared_rawmessage
from ..shared import tag as shared_tag
from ..shared import template as shared_template
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeliverabilityTestReportRequestBodyContent:
    r"""An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers."""
    
    raw: Optional[shared_rawmessage.RawMessage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Raw'), 'exclude': lambda f: f is None }})  
    simple: Optional[shared_message.Message] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Simple'), 'exclude': lambda f: f is None }})  
    template: Optional[shared_template.Template] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Template'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDeliverabilityTestReportRequestBody:
    
    content: CreateDeliverabilityTestReportRequestBodyContent = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Content') }})
    r"""An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers."""  
    from_email_address: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FromEmailAddress') }})
    r"""The email address that the predictive inbox placement test email was sent from."""  
    report_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReportName'), 'exclude': lambda f: f is None }})
    r"""A name that helps you identify a report generated by the Deliverability dashboard."""  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})
    r"""An array of objects that define the tags (keys and values) that you want to associate with the predictive inbox placement test."""  
    

@dataclasses.dataclass
class CreateDeliverabilityTestReportRequest:
    
    request_body: CreateDeliverabilityTestReportRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateDeliverabilityTestReportResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    account_suspended_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccountSuspendedException"""  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    concurrent_modification_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConcurrentModificationException"""  
    create_deliverability_test_report_response: Optional[shared_createdeliverabilitytestreportresponse.CreateDeliverabilityTestReportResponse] = dataclasses.field(default=None)
    r"""Success"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    mail_from_domain_not_verified_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MailFromDomainNotVerifiedException"""  
    message_rejected: Optional[Any] = dataclasses.field(default=None)
    r"""MessageRejected"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    sending_paused_exception: Optional[Any] = dataclasses.field(default=None)
    r"""SendingPausedException"""  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    