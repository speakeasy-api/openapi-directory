// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ItineraryPriceMetricLocation - Description of a particular point or place in physical space
type ItineraryPriceMetricLocation struct {
	// IATA location code
	IataCode *string `json:"iataCode,omitempty"`
}

type ItineraryPriceMetricPriceMetricsQuartileRankingEnum string

const (
	ItineraryPriceMetricPriceMetricsQuartileRankingEnumMinimum ItineraryPriceMetricPriceMetricsQuartileRankingEnum = "MINIMUM"
	ItineraryPriceMetricPriceMetricsQuartileRankingEnumFirst   ItineraryPriceMetricPriceMetricsQuartileRankingEnum = "FIRST"
	ItineraryPriceMetricPriceMetricsQuartileRankingEnumMedium  ItineraryPriceMetricPriceMetricsQuartileRankingEnum = "MEDIUM"
	ItineraryPriceMetricPriceMetricsQuartileRankingEnumThird   ItineraryPriceMetricPriceMetricsQuartileRankingEnum = "THIRD"
	ItineraryPriceMetricPriceMetricsQuartileRankingEnumMaximum ItineraryPriceMetricPriceMetricsQuartileRankingEnum = "MAXIMUM"
)

func (e *ItineraryPriceMetricPriceMetricsQuartileRankingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MINIMUM":
		fallthrough
	case "FIRST":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "THIRD":
		fallthrough
	case "MAXIMUM":
		*e = ItineraryPriceMetricPriceMetricsQuartileRankingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ItineraryPriceMetricPriceMetricsQuartileRankingEnum: %s", s)
	}
}

type ItineraryPriceMetricPriceMetrics struct {
	// Defines the monetary value with decimal position. It can be in cash or miles.
	Amount          *string                                              `json:"amount,omitempty"`
	QuartileRanking *ItineraryPriceMetricPriceMetricsQuartileRankingEnum `json:"quartileRanking,omitempty"`
}

// ItineraryPriceMetricTransportTypeEnum - transportation type
type ItineraryPriceMetricTransportTypeEnum string

const (
	ItineraryPriceMetricTransportTypeEnumFlight ItineraryPriceMetricTransportTypeEnum = "FLIGHT"
)

func (e *ItineraryPriceMetricTransportTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FLIGHT":
		*e = ItineraryPriceMetricTransportTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ItineraryPriceMetricTransportTypeEnum: %s", s)
	}
}

// ItineraryPriceMetric - price metric
type ItineraryPriceMetric struct {
	// currency of the prices.
	//
	// Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// The date on which the traveler will depart from the origin to go to the destination.
	//
	// Dates are specified in the[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format.
	DepartureDate *string `json:"departureDate,omitempty"`
	// Description of a particular point or place in physical space
	Destination *ItineraryPriceMetricLocation `json:"destination,omitempty"`
	// true for a one way trip,
	// false for a round trip
	OneWay *bool `json:"oneWay,omitempty"`
	// Description of a particular point or place in physical space
	Origin       *ItineraryPriceMetricLocation      `json:"origin,omitempty"`
	PriceMetrics []ItineraryPriceMetricPriceMetrics `json:"priceMetrics,omitempty"`
	// transportation type
	TransportType *ItineraryPriceMetricTransportTypeEnum `json:"transportType,omitempty"`
	// ressource type - always price-metrics
	Type *string `json:"type,omitempty"`
}
