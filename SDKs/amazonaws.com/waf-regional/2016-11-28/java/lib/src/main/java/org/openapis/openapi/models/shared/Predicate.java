/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Predicate - &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href="https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html"&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html"&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Specifies the &lt;a&gt;ByteMatchSet&lt;/a&gt;, &lt;a&gt;IPSet&lt;/a&gt;, &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt;, &lt;a&gt;XssMatchSet&lt;/a&gt;, &lt;a&gt;RegexMatchSet&lt;/a&gt;, &lt;a&gt;GeoMatchSet&lt;/a&gt;, and &lt;a&gt;SizeConstraintSet&lt;/a&gt; objects that you want to add to a &lt;code&gt;Rule&lt;/code&gt; and, for each object, indicates whether you want to negate the settings, for example, requests that do NOT originate from the IP address 192.0.2.44. &lt;/p&gt;
 */
public class Predicate {
    @JsonProperty("DataId")
    public String dataId;

    public Predicate withDataId(String dataId) {
        this.dataId = dataId;
        return this;
    }
    
    @JsonProperty("Negated")
    public Boolean negated;

    public Predicate withNegated(Boolean negated) {
        this.negated = negated;
        return this;
    }
    
    @JsonProperty("Type")
    public PredicateTypeEnum type;

    public Predicate withType(PredicateTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public Predicate(@JsonProperty("DataId") String dataId, @JsonProperty("Negated") Boolean negated, @JsonProperty("Type") PredicateTypeEnum type) {
        this.dataId = dataId;
        this.negated = negated;
        this.type = type;
  }
}
