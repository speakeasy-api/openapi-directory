"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleprivacydlpv2kmswrappedcryptokey as shared_googleprivacydlpv2kmswrappedcryptokey
from ..shared import googleprivacydlpv2transientcryptokey as shared_googleprivacydlpv2transientcryptokey
from ..shared import googleprivacydlpv2unwrappedcryptokey as shared_googleprivacydlpv2unwrappedcryptokey
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GooglePrivacyDlpV2CryptoKey:
    r"""This is a data encryption key (DEK) (as opposed to a key encryption key (KEK) stored by Cloud Key Management Service (Cloud KMS). When using Cloud KMS to wrap or unwrap a DEK, be sure to set an appropriate IAM policy on the KEK to ensure an attacker cannot unwrap the DEK."""
    
    kms_wrapped: Optional[shared_googleprivacydlpv2kmswrappedcryptokey.GooglePrivacyDlpV2KmsWrappedCryptoKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsWrapped'), 'exclude': lambda f: f is None }})
    r"""Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key). Note: When you use Cloud KMS for cryptographic operations, [charges apply](https://cloud.google.com/kms/pricing)."""  
    transient: Optional[shared_googleprivacydlpv2transientcryptokey.GooglePrivacyDlpV2TransientCryptoKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transient'), 'exclude': lambda f: f is None }})
    r"""Use this to have a random data crypto key generated. It will be discarded after the request finishes."""  
    unwrapped: Optional[shared_googleprivacydlpv2unwrappedcryptokey.GooglePrivacyDlpV2UnwrappedCryptoKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unwrapped'), 'exclude': lambda f: f is None }})
    r"""Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible."""  
    