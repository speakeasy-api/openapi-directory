/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class AnalyticsDataGaGetRequest {
    /**
     * Data format for the response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;
    public AnalyticsDataGaGetRequest withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * A comma-separated list of Analytics dimensions. E.g., 'ga:browser,ga:city'.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=dimensions")
    public String dimensions;
    public AnalyticsDataGaGetRequest withDimensions(String dimensions) {
        this.dimensions = dimensions;
        return this;
    }
    
    /**
     * End date for fetching Analytics data. Request can should specify an end date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is yesterday.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=end-date")
    public String endDate;
    public AnalyticsDataGaGetRequest withEndDate(String endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;
    public AnalyticsDataGaGetRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * A comma-separated list of dimension or metric filters to be applied to Analytics data.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=filters")
    public String filters;
    public AnalyticsDataGaGetRequest withFilters(String filters) {
        this.filters = filters;
        return this;
    }
    
    /**
     * Unique table ID for retrieving Analytics data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ids")
    public String ids;
    public AnalyticsDataGaGetRequest withIds(String ids) {
        this.ids = ids;
        return this;
    }
    
    /**
     * The response will include empty rows if this parameter is set to true, the default is true
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include-empty-rows")
    public Boolean includeEmptyRows;
    public AnalyticsDataGaGetRequest withIncludeEmptyRows(Boolean includeEmptyRows) {
        this.includeEmptyRows = includeEmptyRows;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;
    public AnalyticsDataGaGetRequest withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * The maximum number of entries to include in this feed.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max-results")
    public Long maxResults;
    public AnalyticsDataGaGetRequest withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * A comma-separated list of Analytics metrics. E.g., 'ga:sessions,ga:pageviews'. At least one metric must be specified.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=metrics")
    public String metrics;
    public AnalyticsDataGaGetRequest withMetrics(String metrics) {
        this.metrics = metrics;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;
    public AnalyticsDataGaGetRequest withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * The selected format for the response. Default format is JSON.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=output")
    public AnalyticsDataGaGetOutputEnum output;
    public AnalyticsDataGaGetRequest withOutput(AnalyticsDataGaGetOutputEnum output) {
        this.output = output;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;
    public AnalyticsDataGaGetRequest withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;
    public AnalyticsDataGaGetRequest withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * The desired sampling level.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=samplingLevel")
    public AnalyticsDataGaGetSamplingLevelEnum samplingLevel;
    public AnalyticsDataGaGetRequest withSamplingLevel(AnalyticsDataGaGetSamplingLevelEnum samplingLevel) {
        this.samplingLevel = samplingLevel;
        return this;
    }
    
    /**
     * An Analytics segment to be applied to data.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=segment")
    public String segment;
    public AnalyticsDataGaGetRequest withSegment(String segment) {
        this.segment = segment;
        return this;
    }
    
    /**
     * A comma-separated list of dimensions or metrics that determine the sort order for Analytics data.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String sort;
    public AnalyticsDataGaGetRequest withSort(String sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Start date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=start-date")
    public String startDate;
    public AnalyticsDataGaGetRequest withStartDate(String startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=start-index")
    public Long startIndex;
    public AnalyticsDataGaGetRequest withStartIndex(Long startIndex) {
        this.startIndex = startIndex;
        return this;
    }
    
    /**
     * Deprecated. Please use quotaUser instead.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=userIp")
    public String userIp;
    public AnalyticsDataGaGetRequest withUserIp(String userIp) {
        this.userIp = userIp;
        return this;
    }
    
}
