"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import enableclientauthenticationrequest as shared_enableclientauthenticationrequest
from enum import Enum
from typing import Any, Optional

class EnableClientAuthenticationXAmzTargetEnum(str, Enum):
    DIRECTORY_SERVICE_20150416_ENABLE_CLIENT_AUTHENTICATION = 'DirectoryService_20150416.EnableClientAuthentication'


@dataclasses.dataclass
class EnableClientAuthenticationRequest:
    
    enable_client_authentication_request: shared_enableclientauthenticationrequest.EnableClientAuthenticationRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: EnableClientAuthenticationXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class EnableClientAuthenticationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    client_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ClientException"""  
    directory_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DirectoryDoesNotExistException"""  
    enable_client_authentication_result: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_client_auth_status_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidClientAuthStatusException"""  
    no_available_certificate_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NoAvailableCertificateException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceException"""  
    unsupported_operation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnsupportedOperationException"""  
    