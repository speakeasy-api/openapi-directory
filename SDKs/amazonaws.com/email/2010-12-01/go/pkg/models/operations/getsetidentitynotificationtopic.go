// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETSetIdentityNotificationTopicActionEnum
type GETSetIdentityNotificationTopicActionEnum string

const (
	GETSetIdentityNotificationTopicActionEnumSetIdentityNotificationTopic GETSetIdentityNotificationTopicActionEnum = "SetIdentityNotificationTopic"
)

func (e GETSetIdentityNotificationTopicActionEnum) ToPointer() *GETSetIdentityNotificationTopicActionEnum {
	return &e
}

func (e *GETSetIdentityNotificationTopicActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SetIdentityNotificationTopic":
		*e = GETSetIdentityNotificationTopicActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetIdentityNotificationTopicActionEnum: %v", v)
	}
}

// GETSetIdentityNotificationTopicNotificationTypeEnum - The type of notifications that will be published to the specified Amazon SNS topic.
type GETSetIdentityNotificationTopicNotificationTypeEnum string

const (
	GETSetIdentityNotificationTopicNotificationTypeEnumBounce    GETSetIdentityNotificationTopicNotificationTypeEnum = "Bounce"
	GETSetIdentityNotificationTopicNotificationTypeEnumComplaint GETSetIdentityNotificationTopicNotificationTypeEnum = "Complaint"
	GETSetIdentityNotificationTopicNotificationTypeEnumDelivery  GETSetIdentityNotificationTopicNotificationTypeEnum = "Delivery"
)

func (e GETSetIdentityNotificationTopicNotificationTypeEnum) ToPointer() *GETSetIdentityNotificationTopicNotificationTypeEnum {
	return &e
}

func (e *GETSetIdentityNotificationTopicNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Bounce":
		fallthrough
	case "Complaint":
		fallthrough
	case "Delivery":
		*e = GETSetIdentityNotificationTopicNotificationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetIdentityNotificationTopicNotificationTypeEnum: %v", v)
	}
}

// GETSetIdentityNotificationTopicVersionEnum
type GETSetIdentityNotificationTopicVersionEnum string

const (
	GETSetIdentityNotificationTopicVersionEnumTwoThousandAndTen1201 GETSetIdentityNotificationTopicVersionEnum = "2010-12-01"
)

func (e GETSetIdentityNotificationTopicVersionEnum) ToPointer() *GETSetIdentityNotificationTopicVersionEnum {
	return &e
}

func (e *GETSetIdentityNotificationTopicVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-12-01":
		*e = GETSetIdentityNotificationTopicVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetIdentityNotificationTopicVersionEnum: %v", v)
	}
}

type GETSetIdentityNotificationTopicRequest struct {
	Action GETSetIdentityNotificationTopicActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
	Identity string `queryParam:"style=form,explode=true,name=Identity"`
	// The type of notifications that will be published to the specified Amazon SNS topic.
	NotificationType GETSetIdentityNotificationTopicNotificationTypeEnum `queryParam:"style=form,explode=true,name=NotificationType"`
	// The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
	SnsTopic          *string                                    `queryParam:"style=form,explode=true,name=SnsTopic"`
	Version           GETSetIdentityNotificationTopicVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETSetIdentityNotificationTopicResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
