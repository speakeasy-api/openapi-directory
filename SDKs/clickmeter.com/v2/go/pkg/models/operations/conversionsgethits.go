// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ConversionsGetHitsFilterEnum - Filter event type ("spiders"/"uniques"/"nonuniques"/"conversions")
type ConversionsGetHitsFilterEnum string

const (
	ConversionsGetHitsFilterEnumSpiders     ConversionsGetHitsFilterEnum = "spiders"
	ConversionsGetHitsFilterEnumUniques     ConversionsGetHitsFilterEnum = "uniques"
	ConversionsGetHitsFilterEnumNonuniques  ConversionsGetHitsFilterEnum = "nonuniques"
	ConversionsGetHitsFilterEnumConversions ConversionsGetHitsFilterEnum = "conversions"
)

func (e ConversionsGetHitsFilterEnum) ToPointer() *ConversionsGetHitsFilterEnum {
	return &e
}

func (e *ConversionsGetHitsFilterEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "spiders":
		fallthrough
	case "uniques":
		fallthrough
	case "nonuniques":
		fallthrough
	case "conversions":
		*e = ConversionsGetHitsFilterEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConversionsGetHitsFilterEnum: %v", v)
	}
}

// ConversionsGetHitsTimeframeEnum - Timeframe of the request. See list at $timeframeList
type ConversionsGetHitsTimeframeEnum string

const (
	ConversionsGetHitsTimeframeEnumYesterday     ConversionsGetHitsTimeframeEnum = "yesterday"
	ConversionsGetHitsTimeframeEnumLast7         ConversionsGetHitsTimeframeEnum = "last7"
	ConversionsGetHitsTimeframeEnumLast30        ConversionsGetHitsTimeframeEnum = "last30"
	ConversionsGetHitsTimeframeEnumLastmonth     ConversionsGetHitsTimeframeEnum = "lastmonth"
	ConversionsGetHitsTimeframeEnumCurrentmonth  ConversionsGetHitsTimeframeEnum = "currentmonth"
	ConversionsGetHitsTimeframeEnumPreviousmonth ConversionsGetHitsTimeframeEnum = "previousmonth"
	ConversionsGetHitsTimeframeEnumLast90        ConversionsGetHitsTimeframeEnum = "last90"
	ConversionsGetHitsTimeframeEnumLast120       ConversionsGetHitsTimeframeEnum = "last120"
	ConversionsGetHitsTimeframeEnumLast180       ConversionsGetHitsTimeframeEnum = "last180"
	ConversionsGetHitsTimeframeEnumCustom        ConversionsGetHitsTimeframeEnum = "custom"
)

func (e ConversionsGetHitsTimeframeEnum) ToPointer() *ConversionsGetHitsTimeframeEnum {
	return &e
}

func (e *ConversionsGetHitsTimeframeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "yesterday":
		fallthrough
	case "last7":
		fallthrough
	case "last30":
		fallthrough
	case "lastmonth":
		fallthrough
	case "currentmonth":
		fallthrough
	case "previousmonth":
		fallthrough
	case "last90":
		fallthrough
	case "last120":
		fallthrough
	case "last180":
		fallthrough
	case "custom":
		*e = ConversionsGetHitsTimeframeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConversionsGetHitsTimeframeEnum: %v", v)
	}
}

type ConversionsGetHitsRequest struct {
	// Id of the conversion
	ConversionID int64 `pathParam:"style=simple,explode=false,name=conversionId"`
	// Filter event type ("spiders"/"uniques"/"nonuniques"/"conversions")
	Filter *ConversionsGetHitsFilterEnum `queryParam:"style=form,explode=true,name=filter"`
	// If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)
	FromDay *string `queryParam:"style=form,explode=true,name=fromDay"`
	// Limit results to this number
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Offset where to start from (it's the lastKey field in the response object)
	Offset *string `queryParam:"style=form,explode=true,name=offset"`
	// Timeframe of the request. See list at $timeframeList
	Timeframe ConversionsGetHitsTimeframeEnum `queryParam:"style=form,explode=true,name=timeframe"`
	// If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)
	ToDay *string `queryParam:"style=form,explode=true,name=toDay"`
}

type ConversionsGetHitsResponse struct {
	APICoreDtoClickStreamHitListPage *shared.APICoreDtoClickStreamHitListPage
	ContentType                      string
	StatusCode                       int
	RawResponse                      *http.Response
}
