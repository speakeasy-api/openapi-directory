/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class SoleProprietorship {
    /**
     * The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the governing country.
     */
    @JsonProperty("countryOfGoverningLaw")
    public String countryOfGoverningLaw;
    public SoleProprietorship withCountryOfGoverningLaw(String countryOfGoverningLaw) {
        this.countryOfGoverningLaw = countryOfGoverningLaw;
        return this;
    }
    
    /**
     * The date when the legal arrangement was incorporated in YYYY-MM-DD format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dateOfIncorporation")
    public String dateOfIncorporation;
    public SoleProprietorship withDateOfIncorporation(String dateOfIncorporation) {
        this.dateOfIncorporation = dateOfIncorporation;
        return this;
    }
    
    /**
     * The registered name, if different from the `name`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("doingBusinessAs")
    public String doingBusinessAs;
    public SoleProprietorship withDoingBusinessAs(String doingBusinessAs) {
        this.doingBusinessAs = doingBusinessAs;
        return this;
    }
    
    /**
     * The legal name.
     */
    @JsonProperty("name")
    public String name;
    public SoleProprietorship withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("principalPlaceOfBusiness")
    public Address principalPlaceOfBusiness;
    public SoleProprietorship withPrincipalPlaceOfBusiness(Address principalPlaceOfBusiness) {
        this.principalPlaceOfBusiness = principalPlaceOfBusiness;
        return this;
    }
    
    @JsonProperty("registeredAddress")
    public Address registeredAddress;
    public SoleProprietorship withRegisteredAddress(Address registeredAddress) {
        this.registeredAddress = registeredAddress;
        return this;
    }
    
    /**
     * The registration number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrationNumber")
    public String registrationNumber;
    public SoleProprietorship withRegistrationNumber(String registrationNumber) {
        this.registrationNumber = registrationNumber;
        return this;
    }
    
    /**
     * The reason for not providing a VAT number.
     * 
     * Possible values: **industryExemption**, **belowTaxThreshold**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatAbsenceReason")
    public SoleProprietorshipVatAbsenceReasonEnum vatAbsenceReason;
    public SoleProprietorship withVatAbsenceReason(SoleProprietorshipVatAbsenceReasonEnum vatAbsenceReason) {
        this.vatAbsenceReason = vatAbsenceReason;
        return this;
    }
    
    /**
     * The VAT number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatNumber")
    public String vatNumber;
    public SoleProprietorship withVatNumber(String vatNumber) {
        this.vatNumber = vatNumber;
        return this;
    }
    
}
