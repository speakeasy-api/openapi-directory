/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * Warning to ignore.
 */
export enum PostNamespacesDeleteImagesRequestIgnoreWarningsWarningEnum {
  IsActive = "is_active",
  CurrentTag = "current_tag",
}

export class PostNamespacesDeleteImagesRequestIgnoreWarnings extends SpeakeasyBase {
  /**
   * Digest of the image to ignore the warning for.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "digest" })
  digest: string;

  /**
   * Name of the repository of the image to ignore the warning for.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repository" })
  repository: string;

  /**
   * Current tags to ignore.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: string[];

  /**
   * Warning to ignore.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "warning" })
  warning: PostNamespacesDeleteImagesRequestIgnoreWarningsWarningEnum;
}

export class PostNamespacesDeleteImagesRequestManifests extends SpeakeasyBase {
  /**
   * Digest of the image to delete.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "digest" })
  digest: string;

  /**
   * Name of the repository to delete the image from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repository" })
  repository: string;
}

/**
 * Delete images request.
 */
export class PostNamespacesDeleteImagesRequest extends SpeakeasyBase {
  /**
   * Sets the time from which an image must have been pushed or pulled to
   *
   * @remarks
   * be counted as active.
   *
   * Defaults to 1 month before the current time.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active_from" })
  activeFrom?: string;

  /**
   * If `true` then will check and return errors and unignored warnings for the deletion request but will not delete any images.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dry_run" })
  dryRun?: boolean;

  /**
   * Warnings to ignore. If a warning is not ignored then no deletions will happen and the
   *
   * @remarks
   * warning is returned in the response.
   *
   * These warnings include:
   *
   * - is_active: warning when attempting to delete an image that is marked as active.
   * - current_tag: warning when attempting to delete an image that has one or more current
   * tags in the repository.
   *
   * Warnings can be copied from the response to the request.
   *
   */
  @SpeakeasyMetadata({
    elemType: PostNamespacesDeleteImagesRequestIgnoreWarnings,
  })
  @Expose({ name: "ignore_warnings" })
  @Type(() => PostNamespacesDeleteImagesRequestIgnoreWarnings)
  ignoreWarnings?: PostNamespacesDeleteImagesRequestIgnoreWarnings[];

  /**
   * Image manifests to delete.
   */
  @SpeakeasyMetadata({ elemType: PostNamespacesDeleteImagesRequestManifests })
  @Expose({ name: "manifests" })
  @Type(() => PostNamespacesDeleteImagesRequestManifests)
  manifests?: PostNamespacesDeleteImagesRequestManifests[];
}
