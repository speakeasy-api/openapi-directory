"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Organizations:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_workspace_slug_organizations(self, request: operations.GetWorkspaceSlugOrganizationsRequest, security: operations.GetWorkspaceSlugOrganizationsSecurity) -> operations.GetWorkspaceSlugOrganizationsResponse:
        r"""List organizations in a workspace"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceSlugOrganizationsRequest, base_url, '/{workspace_slug}/organizations', request)
        
        query_params = utils.get_query_params(operations.GetWorkspaceSlugOrganizationsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceSlugOrganizationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_workspace_slug_organizations_organization_id_(self, request: operations.GetWorkspaceSlugOrganizationsOrganizationIDRequest, security: operations.GetWorkspaceSlugOrganizationsOrganizationIDSecurity) -> operations.GetWorkspaceSlugOrganizationsOrganizationIDResponse:
        r"""Get an organization"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceSlugOrganizationsOrganizationIDRequest, base_url, '/{workspace_slug}/organizations/{organization_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceSlugOrganizationsOrganizationIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_workspace_slug_organizations_organization_id_(self, request: operations.PutWorkspaceSlugOrganizationsOrganizationIDRequest, security: operations.PutWorkspaceSlugOrganizationsOrganizationIDSecurity) -> operations.PutWorkspaceSlugOrganizationsOrganizationIDResponse:
        r"""Update an organization"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutWorkspaceSlugOrganizationsOrganizationIDRequest, base_url, '/{workspace_slug}/organizations/{organization_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "organization", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutWorkspaceSlugOrganizationsOrganizationIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    