// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CircuitTerminationConnectionStatusLabelEnum string

const (
	CircuitTerminationConnectionStatusLabelEnumNotConnected CircuitTerminationConnectionStatusLabelEnum = "Not Connected"
	CircuitTerminationConnectionStatusLabelEnumConnected    CircuitTerminationConnectionStatusLabelEnum = "Connected"
)

func (e *CircuitTerminationConnectionStatusLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Not Connected":
		fallthrough
	case "Connected":
		*e = CircuitTerminationConnectionStatusLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CircuitTerminationConnectionStatusLabelEnum: %s", s)
	}
}

type CircuitTerminationConnectionStatusValueEnum string

const (
	CircuitTerminationConnectionStatusValueEnumFalse CircuitTerminationConnectionStatusValueEnum = "false"
	CircuitTerminationConnectionStatusValueEnumTrue  CircuitTerminationConnectionStatusValueEnum = "true"
)

func (e *CircuitTerminationConnectionStatusValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = CircuitTerminationConnectionStatusValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CircuitTerminationConnectionStatusValueEnum: %s", s)
	}
}

type CircuitTerminationConnectionStatus struct {
	Label CircuitTerminationConnectionStatusLabelEnum `json:"label"`
	Value CircuitTerminationConnectionStatusValueEnum `json:"value"`
}

type CircuitTerminationTerminationEnum string

const (
	CircuitTerminationTerminationEnumA CircuitTerminationTerminationEnum = "A"
	CircuitTerminationTerminationEnumZ CircuitTerminationTerminationEnum = "Z"
)

func (e *CircuitTerminationTerminationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "A":
		fallthrough
	case "Z":
		*e = CircuitTerminationTerminationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CircuitTerminationTerminationEnum: %s", s)
	}
}

type CircuitTermination struct {
	Cable   *NestedCable  `json:"cable,omitempty"`
	Circuit NestedCircuit `json:"circuit"`
	// Return the appropriate serializer for the type of connected object.
	//
	ConnectedEndpoint     map[string]string                   `json:"connected_endpoint,omitempty"`
	ConnectedEndpointType *string                             `json:"connected_endpoint_type,omitempty"`
	ConnectionStatus      *CircuitTerminationConnectionStatus `json:"connection_status,omitempty"`
	Description           *string                             `json:"description,omitempty"`
	ID                    *int64                              `json:"id,omitempty"`
	PortSpeed             int64                               `json:"port_speed"`
	PpInfo                *string                             `json:"pp_info,omitempty"`
	Site                  NestedSite                          `json:"site"`
	TermSide              CircuitTerminationTerminationEnum   `json:"term_side"`
	// Upstream speed, if different from port speed
	UpstreamSpeed *int64  `json:"upstream_speed,omitempty"`
	XconnectID    *string `json:"xconnect_id,omitempty"`
}
