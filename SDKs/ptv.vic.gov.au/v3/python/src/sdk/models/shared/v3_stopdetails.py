"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import v3_stopaccessibility as shared_v3_stopaccessibility
from ..shared import v3_stopamenitydetails as shared_v3_stopamenitydetails
from ..shared import v3_stoplocation as shared_v3_stoplocation
from ..shared import v3_stopstaffing as shared_v3_stopstaffing
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V3StopDetails:
    
    disruption_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disruption_ids'), 'exclude': lambda f: f is None }})
    r"""Disruption information identifier(s)"""  
    route_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('route_type'), 'exclude': lambda f: f is None }})
    r"""Transport mode identifier"""  
    routes: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routes'), 'exclude': lambda f: f is None }})
    r"""Routes travelling through the stop"""  
    station_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('station_description'), 'exclude': lambda f: f is None }})
    r"""The definition applicable to the station_type; returns null for V/Line train"""  
    station_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('station_type'), 'exclude': lambda f: f is None }})
    r"""Type of metropolitan train station (i.e. \\"Premium\\", \\"Host\\" or \\"Unstaffed\\" station); returns null for V/Line train"""  
    stop_accessibility: Optional[shared_v3_stopaccessibility.V3StopAccessibility] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_accessibility'), 'exclude': lambda f: f is None }})  
    stop_amenities: Optional[shared_v3_stopamenitydetails.V3StopAmenityDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_amenities'), 'exclude': lambda f: f is None }})  
    stop_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_id'), 'exclude': lambda f: f is None }})
    r"""Stop identifier"""  
    stop_landmark: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_landmark'), 'exclude': lambda f: f is None }})
    r"""Landmark in proximity of stop"""  
    stop_location: Optional[shared_v3_stoplocation.V3StopLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_location'), 'exclude': lambda f: f is None }})  
    stop_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_name'), 'exclude': lambda f: f is None }})
    r"""Name of stop"""  
    stop_staffing: Optional[shared_v3_stopstaffing.V3StopStaffing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_staffing'), 'exclude': lambda f: f is None }})  
    