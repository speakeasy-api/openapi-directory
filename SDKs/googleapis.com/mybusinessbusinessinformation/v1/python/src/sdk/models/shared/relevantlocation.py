"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RelevantLocationRelationTypeEnum(str, Enum):
    r"""Required. The type of the relationship."""
    RELATION_TYPE_UNSPECIFIED = 'RELATION_TYPE_UNSPECIFIED'
    DEPARTMENT_OF = 'DEPARTMENT_OF'
    INDEPENDENT_ESTABLISHMENT_IN = 'INDEPENDENT_ESTABLISHMENT_IN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RelevantLocation:
    r"""Information about another location that is related to current one. The relation can be any one of DEPARTMENT_OF or INDEPENDENT_ESTABLISHMENT_OF, and the location specified here can be on either side (parent/child) of the location."""
    
    place_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placeId'), 'exclude': lambda f: f is None }})
    r"""Required. Specify the location that is on the other side of the relation by its placeID."""  
    relation_type: Optional[RelevantLocationRelationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationType'), 'exclude': lambda f: f is None }})
    r"""Required. The type of the relationship."""  
    