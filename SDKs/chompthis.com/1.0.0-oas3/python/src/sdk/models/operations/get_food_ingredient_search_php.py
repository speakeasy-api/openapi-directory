"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import ingredientobject as shared_ingredientobject
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class GetFoodIngredientSearchPhpSecurity:
    
    api_key_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'query', 'field_name': 'api_key' }})  
    
class GetFoodIngredientSearchPhpLimitEnum(str, Enum):
    r"""#### Set maximum number of records you want the API to return, per search term. The default value is \\"**1**.\\" 
    
    **Example**
    > ```&limit=3```
    """
    ONE = '1'
    TWO = '2'
    THREE = '3'


@dataclasses.dataclass
class GetFoodIngredientSearchPhpRequest:
    
    find: str = dataclasses.field(metadata={'query_param': { 'field_name': 'find', 'style': 'form', 'explode': True }})
    r"""Search our database for a single ingredient or a specific set of ingredients.
    
    **Example #1: Single Ingredient**
    > ```&find=raw broccoli```
    
    **Example #2: Set of Ingredients**
    > ```&find=raw broccoli,buttermilk waffle,mashed potatoes```
    
    **Important Notes** 
      * Comma-separated lists cannot contain more than **10 ingredients**. You must perform additional API calls if you are looking up more than 10 ingredients.
    """  
    limit: Optional[GetFoodIngredientSearchPhpLimitEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""#### Set maximum number of records you want the API to return, per search term. The default value is \\"**1**.\\" 
    
    **Example**
    > ```&limit=3```
    """  
    

@dataclasses.dataclass
class GetFoodIngredientSearchPhpResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    ingredient_object: Optional[shared_ingredientobject.IngredientObject] = dataclasses.field(default=None)
    r"""**Valid** - Will return an object containing any matching ingredient foods."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    