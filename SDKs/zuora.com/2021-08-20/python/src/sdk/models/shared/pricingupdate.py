"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import chargemodeldataoverride as shared_chargemodeldataoverride
from ..shared import discountpricingupdate as shared_discountpricingupdate
from ..shared import recurringflatfeepricingupdate as shared_recurringflatfeepricingupdate
from ..shared import recurringperunitpricingupdate as shared_recurringperunitpricingupdate
from ..shared import recurringtieredpricingupdate as shared_recurringtieredpricingupdate
from ..shared import recurringvolumepricingupdate as shared_recurringvolumepricingupdate
from ..shared import usageflatfeepricingupdate as shared_usageflatfeepricingupdate
from ..shared import usageoveragepricingupdate as shared_usageoveragepricingupdate
from ..shared import usageperunitpricingupdate as shared_usageperunitpricingupdate
from ..shared import usagetieredpricingupdate as shared_usagetieredpricingupdate
from ..shared import usagetieredwithoveragepricingupdate as shared_usagetieredwithoveragepricingupdate
from ..shared import usagevolumepricingupdate as shared_usagevolumepricingupdate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PricingUpdate:
    
    charge_model_data: Optional[shared_chargemodeldataoverride.ChargeModelDataOverride] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeModelData'), 'exclude': lambda f: f is None }})
    r"""Container for charge model configuration data.
    
    **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. The charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    """  
    discount: Optional[shared_discountpricingupdate.DiscountPricingUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discount'), 'exclude': lambda f: f is None }})  
    recurring_flat_fee: Optional[shared_recurringflatfeepricingupdate.RecurringFlatFeePricingUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurringFlatFee'), 'exclude': lambda f: f is None }})  
    recurring_per_unit: Optional[shared_recurringperunitpricingupdate.RecurringPerUnitPricingUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurringPerUnit'), 'exclude': lambda f: f is None }})  
    recurring_tiered: Optional[shared_recurringtieredpricingupdate.RecurringTieredPricingUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurringTiered'), 'exclude': lambda f: f is None }})  
    recurring_volume: Optional[shared_recurringvolumepricingupdate.RecurringVolumePricingUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurringVolume'), 'exclude': lambda f: f is None }})  
    usage_flat_fee: Optional[shared_usageflatfeepricingupdate.UsageFlatFeePricingUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usageFlatFee'), 'exclude': lambda f: f is None }})  
    usage_overage: Optional[shared_usageoveragepricingupdate.UsageOveragePricingUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usageOverage'), 'exclude': lambda f: f is None }})  
    usage_per_unit: Optional[shared_usageperunitpricingupdate.UsagePerUnitPricingUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usagePerUnit'), 'exclude': lambda f: f is None }})  
    usage_tiered: Optional[shared_usagetieredpricingupdate.UsageTieredPricingUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usageTiered'), 'exclude': lambda f: f is None }})  
    usage_tiered_with_overage: Optional[shared_usagetieredwithoveragepricingupdate.UsageTieredWithOveragePricingUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usageTieredWithOverage'), 'exclude': lambda f: f is None }})  
    usage_volume: Optional[shared_usagevolumepricingupdate.UsageVolumePricingUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usageVolume'), 'exclude': lambda f: f is None }})  
    