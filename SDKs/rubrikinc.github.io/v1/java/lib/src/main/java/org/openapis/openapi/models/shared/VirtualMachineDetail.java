/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * VirtualMachineDetail - Virtual machine details.
 */
public class VirtualMachineDetail {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agentStatus")
    public AgentStatus agentStatus;

    public VirtualMachineDetail withAgentStatus(AgentStatus agentStatus) {
        this.agentStatus = agentStatus;
        return this;
    }
    
    @JsonProperty("blackoutWindowStatus")
    public BlackoutWindowStatus blackoutWindowStatus;

    public VirtualMachineDetail withBlackoutWindowStatus(BlackoutWindowStatus blackoutWindowStatus) {
        this.blackoutWindowStatus = blackoutWindowStatus;
        return this;
    }
    
    @JsonProperty("blackoutWindows")
    public BlackoutWindows blackoutWindows;

    public VirtualMachineDetail withBlackoutWindows(BlackoutWindows blackoutWindows) {
        this.blackoutWindows = blackoutWindows;
        return this;
    }
    
    /**
     * Current CDP State of virtual machine.
     */
    @JsonProperty("cdpState")
    public CdpStateEnum cdpState;

    public VirtualMachineDetail withCdpState(CdpStateEnum cdpState) {
        this.cdpState = cdpState;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudInstantiationSpec")
    public CloudInstantiationSpec cloudInstantiationSpec;

    public VirtualMachineDetail withCloudInstantiationSpec(CloudInstantiationSpec cloudInstantiationSpec) {
        this.cloudInstantiationSpec = cloudInstantiationSpec;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clusterName")
    public String clusterName;

    public VirtualMachineDetail withClusterName(String clusterName) {
        this.clusterName = clusterName;
        return this;
    }
    
    /**
     * The ID of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainId")
    public String configuredSlaDomainId;

    public VirtualMachineDetail withConfiguredSlaDomainId(String configuredSlaDomainId) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        return this;
    }
    
    /**
     * The name of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainName")
    public String configuredSlaDomainName;

    public VirtualMachineDetail withConfiguredSlaDomainName(String configuredSlaDomainName) {
        this.configuredSlaDomainName = configuredSlaDomainName;
        return this;
    }
    
    /**
     * Specifies whether the SLA Domain is used for protection or retention.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuredSlaDomainType")
    public ConfiguredSlaTypeEnum configuredSlaDomainType;

    public VirtualMachineDetail withConfiguredSlaDomainType(ConfiguredSlaTypeEnum configuredSlaDomainType) {
        this.configuredSlaDomainType = configuredSlaDomainType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentHost")
    public VmwareHostSummary currentHost;

    public VirtualMachineDetail withCurrentHost(VmwareHostSummary currentHost) {
        this.currentHost = currentHost;
        return this;
    }
    
    @JsonProperty("effectiveSlaDomain")
    public SlaDomainSummary effectiveSlaDomain;

    public VirtualMachineDetail withEffectiveSlaDomain(SlaDomainSummary effectiveSlaDomain) {
        this.effectiveSlaDomain = effectiveSlaDomain;
        return this;
    }
    
    /**
     * The ID of the SLA Domain that controls the protection of the Rubrik object.
     */
    @JsonProperty("effectiveSlaDomainId")
    public String effectiveSlaDomainId;

    public VirtualMachineDetail withEffectiveSlaDomainId(String effectiveSlaDomainId) {
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        return this;
    }
    
    /**
     * The name of the SLA Domain that controls the protection of the Rubrik object.
     */
    @JsonProperty("effectiveSlaDomainName")
    public String effectiveSlaDomainName;

    public VirtualMachineDetail withEffectiveSlaDomainName(String effectiveSlaDomainName) {
        this.effectiveSlaDomainName = effectiveSlaDomainName;
        return this;
    }
    
    /**
     * Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaDomainPolarisManagedId")
    public String effectiveSlaDomainPolarisManagedId;

    public VirtualMachineDetail withEffectiveSlaDomainPolarisManagedId(String effectiveSlaDomainPolarisManagedId) {
        this.effectiveSlaDomainPolarisManagedId = effectiveSlaDomainPolarisManagedId;
        return this;
    }
    
    /**
     * The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaSourceObjectId")
    public String effectiveSlaSourceObjectId;

    public VirtualMachineDetail withEffectiveSlaSourceObjectId(String effectiveSlaSourceObjectId) {
        this.effectiveSlaSourceObjectId = effectiveSlaSourceObjectId;
        return this;
    }
    
    /**
     * The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaSourceObjectName")
    public String effectiveSlaSourceObjectName;

    public VirtualMachineDetail withEffectiveSlaSourceObjectName(String effectiveSlaSourceObjectName) {
        this.effectiveSlaSourceObjectName = effectiveSlaSourceObjectName;
        return this;
    }
    
    /**
     * Brief info of all the objects in the folder path to this VM.
     */
    @JsonProperty("folderPath")
    public VmPathPoint[] folderPath;

    public VirtualMachineDetail withFolderPath(VmPathPoint[] folderPath) {
        this.folderPath = folderPath;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guestCredential")
    public BaseGuestCredentialDetail guestCredential;

    public VirtualMachineDetail withGuestCredential(BaseGuestCredentialDetail guestCredential) {
        this.guestCredential = guestCredential;
        return this;
    }
    
    /**
     * Status of authentication with a specific virtual machine using guest credentials. Possible values are: SUCCESSFUL, PENDING, or FAILED.
     */
    @JsonProperty("guestCredentialAuthorizationStatus")
    public String guestCredentialAuthorizationStatus;

    public VirtualMachineDetail withGuestCredentialAuthorizationStatus(String guestCredentialAuthorizationStatus) {
        this.guestCredentialAuthorizationStatus = guestCredentialAuthorizationStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guestOsName")
    public String guestOsName;

    public VirtualMachineDetail withGuestOsName(String guestOsName) {
        this.guestOsName = guestOsName;
        return this;
    }
    
    /**
     * Type of operating system used by the VMware virtual machine.
     */
    @JsonProperty("guestOsType")
    public VirtualMachineDetailGuestOsTypeEnum guestOsType;

    public VirtualMachineDetail withGuestOsType(VirtualMachineDetailGuestOsTypeEnum guestOsType) {
        this.guestOsType = guestOsType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostId")
    public String hostId;

    public VirtualMachineDetail withHostId(String hostId) {
        this.hostId = hostId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostName")
    public String hostName;

    public VirtualMachineDetail withHostName(String hostName) {
        this.hostName = hostName;
        return this;
    }
    
    /**
     * The ID of the Rubrik object.
     */
    @JsonProperty("id")
    public String id;

    public VirtualMachineDetail withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Brief info of all the objects in the infrastructure path to this VM.
     */
    @JsonProperty("infraPath")
    public VmPathPoint[] infraPath;

    public VirtualMachineDetail withInfraPath(VmPathPoint[] infraPath) {
        this.infraPath = infraPath;
        return this;
    }
    
    @JsonProperty("ipAddress")
    public String ipAddress;

    public VirtualMachineDetail withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    
    /**
     * Boolean value that indicates whether the Rubrik Backup Service is installed and registered for the specified virtual machine. Set to 'true' when the Rubrik Backup Service is installed and registered and in all other cases set to 'false'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isAgentRegistered")
    public Boolean isAgentRegistered;

    public VirtualMachineDetail withIsAgentRegistered(Boolean isAgentRegistered) {
        this.isAgentRegistered = isAgentRegistered;
        return this;
    }
    
    /**
     * Boolean value that determines whether the available storage array integration is used with the specified virtual machine. Set to 'true' to use storage array integration and set to 'false' to not use storage array integration. Refer to the value of 'isArrayIntegrationPossible' to determine whether storage array integration is available for a virtual machine.
     */
    @JsonProperty("isArrayIntegrationEnabled")
    public Boolean isArrayIntegrationEnabled;

    public VirtualMachineDetail withIsArrayIntegrationEnabled(Boolean isArrayIntegrationEnabled) {
        this.isArrayIntegrationEnabled = isArrayIntegrationEnabled;
        return this;
    }
    
    /**
     * Boolean value that indicates whether the performance enhancements of storage array integration are available for the specified virtual machine object. Storage array integration is available when all of the datastores that are assigned to the virtual machine reside on a qualified storage array. Set to 'true' when storage array integration is available and set to 'false' when storage array integration is not available.
     */
    @JsonProperty("isArrayIntegrationPossible")
    public Boolean isArrayIntegrationPossible;

    public VirtualMachineDetail withIsArrayIntegrationPossible(Boolean isArrayIntegrationPossible) {
        this.isArrayIntegrationPossible = isArrayIntegrationPossible;
        return this;
    }
    
    @JsonProperty("isCdpEnabled")
    public Boolean isCdpEnabled;

    public VirtualMachineDetail withIsCdpEnabled(Boolean isCdpEnabled) {
        this.isCdpEnabled = isCdpEnabled;
        return this;
    }
    
    /**
     * Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isConfiguredSlaDomainRetentionLocked")
    public Boolean isConfiguredSlaDomainRetentionLocked;

    public VirtualMachineDetail withIsConfiguredSlaDomainRetentionLocked(Boolean isConfiguredSlaDomainRetentionLocked) {
        this.isConfiguredSlaDomainRetentionLocked = isConfiguredSlaDomainRetentionLocked;
        return this;
    }
    
    /**
     * Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isEffectiveSlaDomainRetentionLocked")
    public Boolean isEffectiveSlaDomainRetentionLocked;

    public VirtualMachineDetail withIsEffectiveSlaDomainRetentionLocked(Boolean isEffectiveSlaDomainRetentionLocked) {
        this.isEffectiveSlaDomainRetentionLocked = isEffectiveSlaDomainRetentionLocked;
        return this;
    }
    
    /**
     * A Boolean that specifies whether the virtual machine is in a VMC environment.
     */
    @JsonProperty("isInVmc")
    public Boolean isInVmc;

    public VirtualMachineDetail withIsInVmc(Boolean isInVmc) {
        this.isInVmc = isInVmc;
        return this;
    }
    
    @JsonProperty("isRelic")
    public Boolean isRelic;

    public VirtualMachineDetail withIsRelic(Boolean isRelic) {
        this.isRelic = isRelic;
        return this;
    }
    
    @JsonProperty("isReplicationEnabled")
    public Boolean isReplicationEnabled;

    public VirtualMachineDetail withIsReplicationEnabled(Boolean isReplicationEnabled) {
        this.isReplicationEnabled = isReplicationEnabled;
        return this;
    }
    
    /**
     * Whether to pause or resume backups/archival for this VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isVmPaused")
    public Boolean isVmPaused;

    public VirtualMachineDetail withIsVmPaused(Boolean isVmPaused) {
        this.isVmPaused = isVmPaused;
        return this;
    }
    
    /**
     * Latest point in time that we can recover to if this is a CDP enabled VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("latestRecoveryPoint")
    public OffsetDateTime latestRecoveryPoint;

    public VirtualMachineDetail withLatestRecoveryPoint(OffsetDateTime latestRecoveryPoint) {
        this.latestRecoveryPoint = latestRecoveryPoint;
        return this;
    }
    
    /**
     * This returns the sum of all virtual disk sizes in the specified virtual machine.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logicalSize")
    public Long logicalSize;

    public VirtualMachineDetail withLogicalSize(Long logicalSize) {
        this.logicalSize = logicalSize;
        return this;
    }
    
    @JsonProperty("maxNestedVsphereSnapshots")
    public Integer maxNestedVsphereSnapshots;

    public VirtualMachineDetail withMaxNestedVsphereSnapshots(Integer maxNestedVsphereSnapshots) {
        this.maxNestedVsphereSnapshots = maxNestedVsphereSnapshots;
        return this;
    }
    
    @JsonProperty("moid")
    public String moid;

    public VirtualMachineDetail withMoid(String moid) {
        this.moid = moid;
        return this;
    }
    
    /**
     * The name of the Rubrik object.
     */
    @JsonProperty("name")
    public String name;

    public VirtualMachineDetail withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Oldest point in time that we can recover to if this is a CDP enabled VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("oldestRecoveryPoint")
    public OffsetDateTime oldestRecoveryPoint;

    public VirtualMachineDetail withOldestRecoveryPoint(OffsetDateTime oldestRecoveryPoint) {
        this.oldestRecoveryPoint = oldestRecoveryPoint;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentAppInfo")
    public ParentAppInfo parentAppInfo;

    public VirtualMachineDetail withParentAppInfo(ParentAppInfo parentAppInfo) {
        this.parentAppInfo = parentAppInfo;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingSlaDomain")
    public ManagedObjectPendingSlaInfo pendingSlaDomain;

    public VirtualMachineDetail withPendingSlaDomain(ManagedObjectPendingSlaInfo pendingSlaDomain) {
        this.pendingSlaDomain = pendingSlaDomain;
        return this;
    }
    
    @JsonProperty("physicalStorage")
    public Long physicalStorage;

    public VirtualMachineDetail withPhysicalStorage(Long physicalStorage) {
        this.physicalStorage = physicalStorage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postBackupScript")
    public VirtualMachineScriptDetail postBackupScript;

    public VirtualMachineDetail withPostBackupScript(VirtualMachineScriptDetail postBackupScript) {
        this.postBackupScript = postBackupScript;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postSnapScript")
    public VirtualMachineScriptDetail postSnapScript;

    public VirtualMachineDetail withPostSnapScript(VirtualMachineScriptDetail postSnapScript) {
        this.postSnapScript = postSnapScript;
        return this;
    }
    
    /**
     * The power status of VM(ON,OFF,SLEEP etc.).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("powerStatus")
    public String powerStatus;

    public VirtualMachineDetail withPowerStatus(String powerStatus) {
        this.powerStatus = powerStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preBackupScript")
    public VirtualMachineScriptDetail preBackupScript;

    public VirtualMachineDetail withPreBackupScript(VirtualMachineScriptDetail preBackupScript) {
        this.preBackupScript = preBackupScript;
        return this;
    }
    
    /**
     * The ID of the cluster that manages the Rubrik object.
     */
    @JsonProperty("primaryClusterId")
    public String primaryClusterId;

    public VirtualMachineDetail withPrimaryClusterId(String primaryClusterId) {
        this.primaryClusterId = primaryClusterId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("protectionDate")
    public OffsetDateTime protectionDate;

    public VirtualMachineDetail withProtectionDate(OffsetDateTime protectionDate) {
        this.protectionDate = protectionDate;
        return this;
    }
    
    /**
     * The ID of the SLA Domain whose retention policy is in use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retentionSlaDomainId")
    public String retentionSlaDomainId;

    public VirtualMachineDetail withRetentionSlaDomainId(String retentionSlaDomainId) {
        this.retentionSlaDomainId = retentionSlaDomainId;
        return this;
    }
    
    /**
     * The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.
     */
    @JsonProperty("slaAssignment")
    public VirtualMachineDetailSlaAssignmentEnum slaAssignment;

    public VirtualMachineDetail withSlaAssignment(VirtualMachineDetailSlaAssignmentEnum slaAssignment) {
        this.slaAssignment = slaAssignment;
        return this;
    }
    
    /**
     * The UTC time when the SLA Domain was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("slaLastUpdateTime")
    public OffsetDateTime slaLastUpdateTime;

    public VirtualMachineDetail withSlaLastUpdateTime(OffsetDateTime slaLastUpdateTime) {
        this.slaLastUpdateTime = slaLastUpdateTime;
        return this;
    }
    
    /**
     * Consistency level mandated for this VM or empty string for none.
     */
    @JsonProperty("snapshotConsistencyMandate")
    public VirtualMachineDetailSnapshotConsistencyMandateEnum snapshotConsistencyMandate;

    public VirtualMachineDetail withSnapshotConsistencyMandate(VirtualMachineDetailSnapshotConsistencyMandateEnum snapshotConsistencyMandate) {
        this.snapshotConsistencyMandate = snapshotConsistencyMandate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotCount")
    public Integer snapshotCount;

    public VirtualMachineDetail withSnapshotCount(Integer snapshotCount) {
        this.snapshotCount = snapshotCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshots")
    public VmSnapshotSummary[] snapshots;

    public VirtualMachineDetail withSnapshots(VmSnapshotSummary[] snapshots) {
        this.snapshots = snapshots;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("throttlingSettings")
    public VmwareAdaptiveThrottlingSettings throttlingSettings;

    public VirtualMachineDetail withThrottlingSettings(VmwareAdaptiveThrottlingSettings throttlingSettings) {
        this.throttlingSettings = throttlingSettings;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("toolsInstalled")
    public Boolean toolsInstalled;

    public VirtualMachineDetail withToolsInstalled(Boolean toolsInstalled) {
        this.toolsInstalled = toolsInstalled;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vcenterId")
    public String vcenterId;

    public VirtualMachineDetail withVcenterId(String vcenterId) {
        this.vcenterId = vcenterId;
        return this;
    }
    
    /**
     * The name of vCenter that the virtual machine belongs to.
     */
    @JsonProperty("vcenterName")
    public String vcenterName;

    public VirtualMachineDetail withVcenterName(String vcenterName) {
        this.vcenterName = vcenterName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtualDiskIds")
    public String[] virtualDiskIds;

    public VirtualMachineDetail withVirtualDiskIds(String[] virtualDiskIds) {
        this.virtualDiskIds = virtualDiskIds;
        return this;
    }
    
    @JsonProperty("vmwareToolsInstalled")
    public Boolean vmwareToolsInstalled;

    public VirtualMachineDetail withVmwareToolsInstalled(Boolean vmwareToolsInstalled) {
        this.vmwareToolsInstalled = vmwareToolsInstalled;
        return this;
    }
    
    public VirtualMachineDetail(@JsonProperty("blackoutWindowStatus") BlackoutWindowStatus blackoutWindowStatus, @JsonProperty("blackoutWindows") BlackoutWindows blackoutWindows, @JsonProperty("cdpState") CdpStateEnum cdpState, @JsonProperty("configuredSlaDomainId") String configuredSlaDomainId, @JsonProperty("configuredSlaDomainName") String configuredSlaDomainName, @JsonProperty("effectiveSlaDomain") SlaDomainSummary effectiveSlaDomain, @JsonProperty("effectiveSlaDomainId") String effectiveSlaDomainId, @JsonProperty("effectiveSlaDomainName") String effectiveSlaDomainName, @JsonProperty("folderPath") VmPathPoint[] folderPath, @JsonProperty("guestCredentialAuthorizationStatus") String guestCredentialAuthorizationStatus, @JsonProperty("guestOsType") VirtualMachineDetailGuestOsTypeEnum guestOsType, @JsonProperty("id") String id, @JsonProperty("infraPath") VmPathPoint[] infraPath, @JsonProperty("ipAddress") String ipAddress, @JsonProperty("isArrayIntegrationEnabled") Boolean isArrayIntegrationEnabled, @JsonProperty("isArrayIntegrationPossible") Boolean isArrayIntegrationPossible, @JsonProperty("isCdpEnabled") Boolean isCdpEnabled, @JsonProperty("isInVmc") Boolean isInVmc, @JsonProperty("isRelic") Boolean isRelic, @JsonProperty("isReplicationEnabled") Boolean isReplicationEnabled, @JsonProperty("maxNestedVsphereSnapshots") Integer maxNestedVsphereSnapshots, @JsonProperty("moid") String moid, @JsonProperty("name") String name, @JsonProperty("physicalStorage") Long physicalStorage, @JsonProperty("primaryClusterId") String primaryClusterId, @JsonProperty("slaAssignment") VirtualMachineDetailSlaAssignmentEnum slaAssignment, @JsonProperty("snapshotConsistencyMandate") VirtualMachineDetailSnapshotConsistencyMandateEnum snapshotConsistencyMandate, @JsonProperty("vcenterName") String vcenterName, @JsonProperty("vmwareToolsInstalled") Boolean vmwareToolsInstalled) {
        this.blackoutWindowStatus = blackoutWindowStatus;
        this.blackoutWindows = blackoutWindows;
        this.cdpState = cdpState;
        this.configuredSlaDomainId = configuredSlaDomainId;
        this.configuredSlaDomainName = configuredSlaDomainName;
        this.effectiveSlaDomain = effectiveSlaDomain;
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        this.effectiveSlaDomainName = effectiveSlaDomainName;
        this.folderPath = folderPath;
        this.guestCredentialAuthorizationStatus = guestCredentialAuthorizationStatus;
        this.guestOsType = guestOsType;
        this.id = id;
        this.infraPath = infraPath;
        this.ipAddress = ipAddress;
        this.isArrayIntegrationEnabled = isArrayIntegrationEnabled;
        this.isArrayIntegrationPossible = isArrayIntegrationPossible;
        this.isCdpEnabled = isCdpEnabled;
        this.isInVmc = isInVmc;
        this.isRelic = isRelic;
        this.isReplicationEnabled = isReplicationEnabled;
        this.maxNestedVsphereSnapshots = maxNestedVsphereSnapshots;
        this.moid = moid;
        this.name = name;
        this.physicalStorage = physicalStorage;
        this.primaryClusterId = primaryClusterId;
        this.slaAssignment = slaAssignment;
        this.snapshotConsistencyMandate = snapshotConsistencyMandate;
        this.vcenterName = vcenterName;
        this.vmwareToolsInstalled = vmwareToolsInstalled;
  }
}
