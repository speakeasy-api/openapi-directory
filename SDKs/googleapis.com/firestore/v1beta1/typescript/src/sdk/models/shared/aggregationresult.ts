/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Value } from "./value";
import { Expose, Transform } from "class-transformer";

/**
 * The result of a single bucket from a Firestore aggregation query. The keys of `aggregate_fields` are the same for all results in an aggregation query, unlike document queries which can have different fields present for each result.
 */
export class AggregationResult extends SpeakeasyBase {
  /**
   * The result of the aggregation functions, ex: `COUNT(*) AS total_docs`. The key is the alias assigned to the aggregation function on input and the size of this map equals the number of aggregation functions in the query.
   */
  @SpeakeasyMetadata({ elemType: Value })
  @Expose({ name: "aggregateFields" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Value> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Value);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  aggregateFields?: Record<string, Value>;
}
