/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

export enum GeonamesPlaceDatasetEnum {
  Geonames = "geonames",
}

/**
 * GeoNames single letter feature code
 */
export enum GeonamesPlaceFeatureClassEnum {
  A = "A",
  H = "H",
  L = "L",
  P = "P",
  R = "R",
  S = "S",
  T = "T",
  U = "U",
  V = "V",
}

/**
 * Full GeoNames place specification
 */
export class GeonamesPlace extends SpeakeasyBase {
  /**
   * Fipscode (subject to change to iso code)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "admin1_code" })
  admin1Code: string;

  /**
   * GeoName ID for first administrative area
   */
  @SpeakeasyMetadata()
  @Expose({ name: "admin1_geonameid" })
  admin1Geonameid: number;

  /**
   * Name of first administrative area
   */
  @SpeakeasyMetadata()
  @Expose({ name: "admin1_name" })
  admin1Name: string;

  /**
   * Code for the second administrative division
   */
  @SpeakeasyMetadata()
  @Expose({ name: "admin2_code" })
  admin2Code: string;

  /**
   * GeoName ID for second administrative area
   */
  @SpeakeasyMetadata()
  @Expose({ name: "admin2_geonameid" })
  admin2Geonameid: number;

  /**
   * Name of second administrative area
   */
  @SpeakeasyMetadata()
  @Expose({ name: "admin2_name" })
  admin2Name: string;

  /**
   * Code for third level administrative division
   */
  @SpeakeasyMetadata()
  @Expose({ name: "admin3_code" })
  admin3Code: string;

  /**
   * Code for fourth level administrative division
   */
  @SpeakeasyMetadata()
  @Expose({ name: "admin4_code" })
  admin4Code: string;

  /**
   * List of alternate ASCII names
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alternatenames" })
  alternatenames: any[];

  /**
   * Place Name (ASCII)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "asciiname" })
  asciiname: string;

  /**
   * List of other countries codes mapping to this place
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cc2" })
  cc2: any[];

  /**
   * 2 Letter ISO country code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country_code" })
  countryCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "dataset" })
  dataset?: GeonamesPlaceDatasetEnum;

  /**
   * Digital elevation model
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dem" })
  dem: number;

  /**
   * Elevation in meters
   */
  @SpeakeasyMetadata()
  @Expose({ name: "elevation" })
  elevation: number;

  /**
   * GeoNames single letter feature code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "feature_class" })
  featureClass: GeonamesPlaceFeatureClassEnum;

  /**
   * Full GeoNames feature code (http://www.geonames.org/export/codes.html)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "feature_code" })
  featureCode: string;

  /**
   * Unique identifier for GeoNames place
   */
  @SpeakeasyMetadata()
  @Expose({ name: "geonameid" })
  geonameid: number;

  /**
   * Unique place ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The latitude of the postcode (WGS84/ETRS89).
   *
   * @remarks
   *
   * Can be a positive or negative decimal. E.g. `51.5083983`.
   *
   * Returns an empty string if no location data is available.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude: any;

  /**
   * The longitude of the postcode (WGS84/ETRS89).
   *
   * @remarks
   *
   * Can be a positive or negative decimal. E.g. -0.1283983
   *
   * Returns an empty string if no location data is available.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude: any;

  /**
   * Datetime format
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modification_date" })
  modificationDate: string;

  /**
   * Place name (UTF8)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Population at place. Represented as string as it could be a larger than a 32bit integer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "population" })
  population: string;

  /**
   * The IANA timezone ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timezone" })
  timezone: string;
}
