// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDDocumentsJSONSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnum = "permanent"
)

func (e PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnum) ToPointer() *PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnum {
	return &e
}

func (e *PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnum: %v", v)
	}
}

type PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2Accounting struct {
	AccountedOn *string                                                                    `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2AccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                    `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2File struct {
	Content64Encoded *string `json:"Content64Encoded,omitempty"`
	Name             *string `json:"Name,omitempty"`
}

type PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2 struct {
	Accounting *PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2Accounting `json:"Accounting,omitempty"`
	Author     *string                                                        `json:"Author,omitempty"`
	Code       *string                                                        `json:"Code,omitempty"`
	Comment    *string                                                        `json:"Comment,omitempty"`
	Date       *string                                                        `json:"Date,omitempty"`
	File       PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2File        `json:"File"`
	Title      string                                                         `json:"Title"`
}

type PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON1 struct {
	DocumentID *string `json:"DocumentId,omitempty"`
}

type PostSpacesSpaceIDFoldersIDDocumentsApplicationJSONType string

const (
	PostSpacesSpaceIDFoldersIDDocumentsApplicationJSONTypePostSpacesSpaceIDFoldersIDDocumentsApplicationJSON1 PostSpacesSpaceIDFoldersIDDocumentsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/documents_ApplicationJSON_1"
	PostSpacesSpaceIDFoldersIDDocumentsApplicationJSONTypePostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2 PostSpacesSpaceIDFoldersIDDocumentsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/documents_ApplicationJSON_2"
)

type PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON struct {
	PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON1 *PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON1
	PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2 *PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2

	Type PostSpacesSpaceIDFoldersIDDocumentsApplicationJSONType
}

func CreatePostSpacesSpaceIDFoldersIDDocumentsApplicationJSONPostSpacesSpaceIDFoldersIDDocumentsApplicationJSON1(postSpacesSpaceIDFoldersIDDocumentsApplicationJSON1 PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON1) PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDDocumentsApplicationJSONTypePostSpacesSpaceIDFoldersIDDocumentsApplicationJSON1

	return PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON{
		PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON1: &postSpacesSpaceIDFoldersIDDocumentsApplicationJSON1,
		Type: typ,
	}
}

func CreatePostSpacesSpaceIDFoldersIDDocumentsApplicationJSONPostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2(postSpacesSpaceIDFoldersIDDocumentsApplicationJSON2 PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2) PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDDocumentsApplicationJSONTypePostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2

	return PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON{
		PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2: &postSpacesSpaceIDFoldersIDDocumentsApplicationJSON2,
		Type: typ,
	}
}

func (u *PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postSpacesSpaceIDFoldersIDDocumentsApplicationJSON1 := new(PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDDocumentsApplicationJSON1); err == nil {
		u.PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON1 = postSpacesSpaceIDFoldersIDDocumentsApplicationJSON1
		u.Type = PostSpacesSpaceIDFoldersIDDocumentsApplicationJSONTypePostSpacesSpaceIDFoldersIDDocumentsApplicationJSON1
		return nil
	}

	postSpacesSpaceIDFoldersIDDocumentsApplicationJSON2 := new(PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDDocumentsApplicationJSON2); err == nil {
		u.PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2 = postSpacesSpaceIDFoldersIDDocumentsApplicationJSON2
		u.Type = PostSpacesSpaceIDFoldersIDDocumentsApplicationJSONTypePostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON1 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON1)
	}

	if u.PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON2)
	}

	return nil, nil
}

type PostSpacesSpaceIDFoldersIDDocumentsJSONRequest struct {
	// Document to add (either DocumentId either (File,Name,Content64Encoded,Title) is mandatory)
	RequestBody PostSpacesSpaceIDFoldersIDDocumentsApplicationJSON `request:"mediaType=application/json"`
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDDocumentsJSON201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDDocumentsJSON201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDDocumentsJSONResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDDocumentsJSON201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDDocumentsJSON201ApplicationJSON
}
