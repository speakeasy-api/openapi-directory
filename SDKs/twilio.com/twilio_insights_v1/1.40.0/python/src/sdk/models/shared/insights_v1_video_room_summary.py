"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import video_room_summary_enum_codec_enum as shared_video_room_summary_enum_codec_enum
from ..shared import video_room_summary_enum_created_method_enum as shared_video_room_summary_enum_created_method_enum
from ..shared import video_room_summary_enum_edge_location_enum as shared_video_room_summary_enum_edge_location_enum
from ..shared import video_room_summary_enum_end_reason_enum as shared_video_room_summary_enum_end_reason_enum
from ..shared import video_room_summary_enum_processing_state_enum as shared_video_room_summary_enum_processing_state_enum
from ..shared import video_room_summary_enum_room_status_enum as shared_video_room_summary_enum_room_status_enum
from ..shared import video_room_summary_enum_room_type_enum as shared_video_room_summary_enum_room_type_enum
from ..shared import video_room_summary_enum_twilio_realm_enum as shared_video_room_summary_enum_twilio_realm_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class InsightsV1VideoRoomSummaryStatusCallbackMethodEnum(str, Enum):
    r"""HTTP method provided for status callback URL."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InsightsV1VideoRoomSummary:
    r"""OK"""
    
    account_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_sid'), 'exclude': lambda f: f is None }})
    r"""Account SID associated with this room."""  
    codecs: Optional[list[shared_video_room_summary_enum_codec_enum.VideoRoomSummaryEnumCodecEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('codecs'), 'exclude': lambda f: f is None }})
    r"""Codecs used by participants in the room. Can be `VP8`, `H264`, or `VP9`."""  
    concurrent_participants: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concurrent_participants'), 'exclude': lambda f: f is None }})
    r"""Actual number of concurrent participants."""  
    create_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('create_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Creation time of the room."""  
    created_method: Optional[shared_video_room_summary_enum_created_method_enum.VideoRoomSummaryEnumCreatedMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_method'), 'exclude': lambda f: f is None }})  
    duration_sec: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_sec'), 'exclude': lambda f: f is None }})
    r"""Total room duration from create time to end time."""  
    edge_location: Optional[shared_video_room_summary_enum_edge_location_enum.VideoRoomSummaryEnumEdgeLocationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('edge_location'), 'exclude': lambda f: f is None }})  
    end_reason: Optional[shared_video_room_summary_enum_end_reason_enum.VideoRoomSummaryEnumEndReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_reason'), 'exclude': lambda f: f is None }})  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End time for the room."""  
    links: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})
    r"""Room subresources."""  
    max_concurrent_participants: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_concurrent_participants'), 'exclude': lambda f: f is None }})
    r"""Maximum number of participants allowed in the room at the same time allowed by the application settings."""  
    max_participants: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_participants'), 'exclude': lambda f: f is None }})
    r"""Max number of total participants allowed by the application settings."""  
    media_region: Optional[shared_video_room_summary_enum_twilio_realm_enum.VideoRoomSummaryEnumTwilioRealmEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('media_region'), 'exclude': lambda f: f is None }})  
    processing_state: Optional[shared_video_room_summary_enum_processing_state_enum.VideoRoomSummaryEnumProcessingStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processing_state'), 'exclude': lambda f: f is None }})  
    recording_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recording_enabled'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating if recording is enabled for the room."""  
    room_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('room_name'), 'exclude': lambda f: f is None }})
    r"""Room friendly name."""  
    room_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('room_sid'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the room."""  
    room_status: Optional[shared_video_room_summary_enum_room_status_enum.VideoRoomSummaryEnumRoomStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('room_status'), 'exclude': lambda f: f is None }})  
    room_type: Optional[shared_video_room_summary_enum_room_type_enum.VideoRoomSummaryEnumRoomTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('room_type'), 'exclude': lambda f: f is None }})  
    status_callback: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status_callback'), 'exclude': lambda f: f is None }})
    r"""Webhook provided for status callbacks."""  
    status_callback_method: Optional[InsightsV1VideoRoomSummaryStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status_callback_method'), 'exclude': lambda f: f is None }})
    r"""HTTP method provided for status callback URL."""  
    total_participant_duration_sec: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_participant_duration_sec'), 'exclude': lambda f: f is None }})
    r"""Combined amount of participant time in the room."""  
    total_recording_duration_sec: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_recording_duration_sec'), 'exclude': lambda f: f is None }})
    r"""Combined amount of recorded seconds for participants in the room."""  
    unique_participant_identities: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unique_participant_identities'), 'exclude': lambda f: f is None }})
    r"""Unique number of participant identities."""  
    unique_participants: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unique_participants'), 'exclude': lambda f: f is None }})
    r"""Number of participants. May include duplicate identities for participants who left and rejoined."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""URL for the room resource."""  
    