"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AlbumsCustomAlbumLogos:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_album_logo(self, request: operations.CreateAlbumLogoRequest, security: operations.CreateAlbumLogoSecurity) -> operations.CreateAlbumLogoResponse:
        r"""Add a custom album logo"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateAlbumLogoRequest, base_url, '/users/{user_id}/albums/{album_id}/logos', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAlbumLogoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_album_logo(self, request: operations.DeleteAlbumLogoRequest, security: operations.DeleteAlbumLogoSecurity) -> operations.DeleteAlbumLogoResponse:
        r"""Remove a custom album logo
        This method removes a custom logo from the specified album.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAlbumLogoRequest, base_url, '/users/{user_id}/albums/{album_id}/logos/{logo_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAlbumLogoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_album_logo(self, request: operations.GetAlbumLogoRequest) -> operations.GetAlbumLogoResponse:
        r"""Get a specific custom album logo"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAlbumLogoRequest, base_url, '/users/{user_id}/albums/{album_id}/logos/{logo_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAlbumLogoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_album_logos(self, request: operations.GetAlbumLogosRequest) -> operations.GetAlbumLogosResponse:
        r"""Get all the custom logos of an album"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAlbumLogosRequest, base_url, '/users/{user_id}/albums/{album_id}/logos', request)
        
        query_params = utils.get_query_params(operations.GetAlbumLogosRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAlbumLogosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Picture]])
                res.pictures = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def replace_album_logo(self, request: operations.ReplaceAlbumLogoRequest, security: operations.ReplaceAlbumLogoSecurity) -> operations.ReplaceAlbumLogoResponse:
        r"""Replace a custom album logo"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReplaceAlbumLogoRequest, base_url, '/users/{user_id}/albums/{album_id}/logos/{logo_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReplaceAlbumLogoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    