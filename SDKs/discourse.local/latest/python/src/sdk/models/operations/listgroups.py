"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListGroups200ApplicationJSONExtras:
    
    type_filters: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type_filters') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListGroups200ApplicationJSONGroups:
    
    allow_membership_requests: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_membership_requests') }})  
    automatic: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automatic') }})  
    bio_cooked: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio_cooked') }})  
    bio_excerpt: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio_excerpt') }})  
    bio_raw: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio_raw') }})  
    can_admin_group: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_admin_group') }})  
    can_see_members: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_see_members') }})  
    default_notification_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_notification_level') }})  
    display_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name') }})  
    flair_bg_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_bg_color') }})  
    flair_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_color') }})  
    flair_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_url') }})  
    full_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('full_name') }})  
    grant_trust_level: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grant_trust_level') }})  
    has_messages: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_messages') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    incoming_email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('incoming_email') }})  
    members_visibility_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members_visibility_level') }})  
    membership_request_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('membership_request_template') }})  
    mentionable_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mentionable_level') }})  
    messageable_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageable_level') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    primary_group: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_group') }})  
    public_admission: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_admission') }})  
    public_exit: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_exit') }})  
    publish_read_state: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publish_read_state') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    user_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_count') }})  
    visibility_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility_level') }})  
    can_edit_group: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_edit_group'), 'exclude': lambda f: f is None }})  
    is_group_owner: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_group_owner'), 'exclude': lambda f: f is None }})  
    is_group_user: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_group_user'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListGroups200ApplicationJSON:
    r"""response"""
    
    extras: ListGroups200ApplicationJSONExtras = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extras') }})  
    groups: list[ListGroups200ApplicationJSONGroups] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups') }})  
    load_more_groups: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('load_more_groups') }})  
    total_rows_groups: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_rows_groups') }})  
    

@dataclasses.dataclass
class ListGroupsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_groups_200_application_json_object: Optional[ListGroups200ApplicationJSON] = dataclasses.field(default=None)
    r"""response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    