/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { StructuralElement } from "./structuralelement";
import { SuggestedTableCellStyle } from "./suggestedtablecellstyle";
import { TableCellStyle } from "./tablecellstyle";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The contents and style of a cell in a Table.
 */
export class TableCell extends SpeakeasyBase {
  /**
   * The content of the cell.
   */
  @SpeakeasyMetadata({ elemType: StructuralElement })
  @Expose({ name: "content" })
  @Type(() => StructuralElement)
  content?: StructuralElement[];

  /**
   * The zero-based end index of this cell, exclusive, in UTF-16 code units.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endIndex" })
  endIndex?: number;

  /**
   * The zero-based start index of this cell, in UTF-16 code units.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startIndex" })
  startIndex?: number;

  /**
   * The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suggestedDeletionIds" })
  suggestedDeletionIds?: string[];

  /**
   * The suggested insertion IDs. A TableCell may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suggestedInsertionIds" })
  suggestedInsertionIds?: string[];

  /**
   * The suggested changes to the table cell style, keyed by suggestion ID.
   */
  @SpeakeasyMetadata({ elemType: SuggestedTableCellStyle })
  @Expose({ name: "suggestedTableCellStyleChanges" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, SuggestedTableCellStyle> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], SuggestedTableCellStyle);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  suggestedTableCellStyleChanges?: Record<string, SuggestedTableCellStyle>;

  /**
   * The style of a TableCell. Inherited table cell styles are represented as unset fields in this message. A table cell style can inherit from the table's style.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tableCellStyle" })
  @Type(() => TableCellStyle)
  tableCellStyle?: TableCellStyle;
}
