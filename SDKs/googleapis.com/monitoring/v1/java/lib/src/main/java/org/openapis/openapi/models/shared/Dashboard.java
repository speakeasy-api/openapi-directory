/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Dashboard - A Google Stackdriver dashboard. Dashboards define the content and layout of pages in the Stackdriver web application.
 */
public class Dashboard {
    /**
     * A simplified layout that divides the available space into vertical columns and arranges a set of widgets vertically in each column.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("columnLayout")
    public ColumnLayout columnLayout;

    public Dashboard withColumnLayout(ColumnLayout columnLayout) {
        this.columnLayout = columnLayout;
        return this;
    }
    
    /**
     * Filters to reduce the amount of data charted based on the filter criteria.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dashboardFilters")
    public DashboardFilter[] dashboardFilters;

    public Dashboard withDashboardFilters(DashboardFilter[] dashboardFilters) {
        this.dashboardFilters = dashboardFilters;
        return this;
    }
    
    /**
     * Required. The mutable, human-readable name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public Dashboard withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. An etag is returned in the response to GetDashboard, and users are expected to put that etag in the request to UpdateDashboard to ensure that their change will be applied to the same version of the Dashboard configuration. The field should not be passed during dashboard creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public Dashboard withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * A basic layout divides the available space into vertical columns of equal width and arranges a list of widgets using a row-first strategy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gridLayout")
    public GridLayout gridLayout;

    public Dashboard withGridLayout(GridLayout gridLayout) {
        this.gridLayout = gridLayout;
        return this;
    }
    
    /**
     * Labels applied to the dashboard
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public Dashboard withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * A mosaic layout divides the available space into a grid of blocks, and overlays the grid with tiles. Unlike GridLayout, tiles may span multiple grid blocks and can be placed at arbitrary locations in the grid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mosaicLayout")
    public MosaicLayout mosaicLayout;

    public Dashboard withMosaicLayout(MosaicLayout mosaicLayout) {
        this.mosaicLayout = mosaicLayout;
        return this;
    }
    
    /**
     * Immutable. The resource name of the dashboard.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Dashboard withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * A simplified layout that divides the available space into rows and arranges a set of widgets horizontally in each row.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rowLayout")
    public RowLayout rowLayout;

    public Dashboard withRowLayout(RowLayout rowLayout) {
        this.rowLayout = rowLayout;
        return this;
    }
    
    public Dashboard(){}
}
