<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * KernelRootkit - Kernel mode rootkit signatures.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class KernelRootkit
{
    /**
     * Rootkit name when available.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * True when unexpected modifications of kernel code memory are present.
     * 
     * @var ?bool $unexpectedCodeModification
     */
	#[\JMS\Serializer\Annotation\SerializedName('unexpectedCodeModification')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $unexpectedCodeModification = null;
    
    /**
     * True when `ftrace` points are present with callbacks pointing to regions that are not in the expected kernel or module code range.
     * 
     * @var ?bool $unexpectedFtraceHandler
     */
	#[\JMS\Serializer\Annotation\SerializedName('unexpectedFtraceHandler')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $unexpectedFtraceHandler = null;
    
    /**
     * True when interrupt handlers that are are not in the expected kernel or module code regions are present.
     * 
     * @var ?bool $unexpectedInterruptHandler
     */
	#[\JMS\Serializer\Annotation\SerializedName('unexpectedInterruptHandler')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $unexpectedInterruptHandler = null;
    
    /**
     * True when kernel code pages that are not in the expected kernel or module code regions are present.
     * 
     * @var ?bool $unexpectedKernelCodePages
     */
	#[\JMS\Serializer\Annotation\SerializedName('unexpectedKernelCodePages')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $unexpectedKernelCodePages = null;
    
    /**
     * True when `kprobe` points are present with callbacks pointing to regions that are not in the expected kernel or module code range.
     * 
     * @var ?bool $unexpectedKprobeHandler
     */
	#[\JMS\Serializer\Annotation\SerializedName('unexpectedKprobeHandler')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $unexpectedKprobeHandler = null;
    
    /**
     * True when unexpected processes in the scheduler run queue are present. Such processes are in the run queue, but not in the process task list.
     * 
     * @var ?bool $unexpectedProcessesInRunqueue
     */
	#[\JMS\Serializer\Annotation\SerializedName('unexpectedProcessesInRunqueue')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $unexpectedProcessesInRunqueue = null;
    
    /**
     * True when unexpected modifications of kernel read-only data memory are present.
     * 
     * @var ?bool $unexpectedReadOnlyDataModification
     */
	#[\JMS\Serializer\Annotation\SerializedName('unexpectedReadOnlyDataModification')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $unexpectedReadOnlyDataModification = null;
    
    /**
     * True when system call handlers that are are not in the expected kernel or module code regions are present.
     * 
     * @var ?bool $unexpectedSystemCallHandler
     */
	#[\JMS\Serializer\Annotation\SerializedName('unexpectedSystemCallHandler')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $unexpectedSystemCallHandler = null;
    
	public function __construct()
	{
		$this->name = null;
		$this->unexpectedCodeModification = null;
		$this->unexpectedFtraceHandler = null;
		$this->unexpectedInterruptHandler = null;
		$this->unexpectedKernelCodePages = null;
		$this->unexpectedKprobeHandler = null;
		$this->unexpectedProcessesInRunqueue = null;
		$this->unexpectedReadOnlyDataModification = null;
		$this->unexpectedSystemCallHandler = null;
	}
}
