// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type EntitlementDeliveryTypeEnum string

const (
	EntitlementDeliveryTypeEnumStream              EntitlementDeliveryTypeEnum = "Stream"
	EntitlementDeliveryTypeEnumDownload            EntitlementDeliveryTypeEnum = "Download"
	EntitlementDeliveryTypeEnumStreamOrDownload    EntitlementDeliveryTypeEnum = "StreamOrDownload"
	EntitlementDeliveryTypeEnumProgressiveDownload EntitlementDeliveryTypeEnum = "ProgressiveDownload"
	EntitlementDeliveryTypeEnumNone                EntitlementDeliveryTypeEnum = "None"
)

func (e *EntitlementDeliveryTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Stream":
		fallthrough
	case "Download":
		fallthrough
	case "StreamOrDownload":
		fallthrough
	case "ProgressiveDownload":
		fallthrough
	case "None":
		*e = EntitlementDeliveryTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EntitlementDeliveryTypeEnum: %s", s)
	}
}

// EntitlementItemTypeEnum - The type of item this entitlement is for.
type EntitlementItemTypeEnum string

const (
	EntitlementItemTypeEnumMovie       EntitlementItemTypeEnum = "movie"
	EntitlementItemTypeEnumShow        EntitlementItemTypeEnum = "show"
	EntitlementItemTypeEnumSeason      EntitlementItemTypeEnum = "season"
	EntitlementItemTypeEnumEpisode     EntitlementItemTypeEnum = "episode"
	EntitlementItemTypeEnumProgram     EntitlementItemTypeEnum = "program"
	EntitlementItemTypeEnumLink        EntitlementItemTypeEnum = "link"
	EntitlementItemTypeEnumTrailer     EntitlementItemTypeEnum = "trailer"
	EntitlementItemTypeEnumChannel     EntitlementItemTypeEnum = "channel"
	EntitlementItemTypeEnumCustomAsset EntitlementItemTypeEnum = "customAsset"
)

func (e *EntitlementItemTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "movie":
		fallthrough
	case "show":
		fallthrough
	case "season":
		fallthrough
	case "episode":
		fallthrough
	case "program":
		fallthrough
	case "link":
		fallthrough
	case "trailer":
		fallthrough
	case "channel":
		fallthrough
	case "customAsset":
		*e = EntitlementItemTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EntitlementItemTypeEnum: %s", s)
	}
}

type EntitlementOwnershipEnum string

const (
	EntitlementOwnershipEnumSubscription EntitlementOwnershipEnum = "Subscription"
	EntitlementOwnershipEnumFree         EntitlementOwnershipEnum = "Free"
	EntitlementOwnershipEnumRent         EntitlementOwnershipEnum = "Rent"
	EntitlementOwnershipEnumOwn          EntitlementOwnershipEnum = "Own"
	EntitlementOwnershipEnumNone         EntitlementOwnershipEnum = "None"
)

func (e *EntitlementOwnershipEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Subscription":
		fallthrough
	case "Free":
		fallthrough
	case "Rent":
		fallthrough
	case "Own":
		fallthrough
	case "None":
		*e = EntitlementOwnershipEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EntitlementOwnershipEnum: %s", s)
	}
}

type EntitlementResolutionEnum string

const (
	EntitlementResolutionEnumSd       EntitlementResolutionEnum = "SD"
	EntitlementResolutionEnumHd720    EntitlementResolutionEnum = "HD-720"
	EntitlementResolutionEnumHd1080   EntitlementResolutionEnum = "HD-1080"
	EntitlementResolutionEnumHd4K     EntitlementResolutionEnum = "HD-4K"
	EntitlementResolutionEnumExternal EntitlementResolutionEnum = "External"
	EntitlementResolutionEnumUnknown  EntitlementResolutionEnum = "Unknown"
)

func (e *EntitlementResolutionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SD":
		fallthrough
	case "HD-720":
		fallthrough
	case "HD-1080":
		fallthrough
	case "HD-4K":
		fallthrough
	case "External":
		fallthrough
	case "Unknown":
		*e = EntitlementResolutionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EntitlementResolutionEnum: %s", s)
	}
}

// Entitlement - The base type for both Offer and Entitlement.
type Entitlement struct {
	// The date of activation. If no date is defined the entitlement has not be activated.
	ActivationDate *time.Time             `json:"activationDate,omitempty"`
	Classification *ClassificationSummary `json:"classification,omitempty"`
	// The date the entitlement was created.
	CreationDate *time.Time                  `json:"creationDate,omitempty"`
	DeliveryType EntitlementDeliveryTypeEnum `json:"deliveryType"`
	// Any specific playback exclusion rules.
	ExclusionRules []ExclusionRule `json:"exclusionRules,omitempty"`
	// The date the entitlement expires.
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`
	// The id of the item this entitlement is for.
	ItemID *string `json:"itemId,omitempty"`
	// The type of item this entitlement is for.
	ItemType *EntitlementItemTypeEnum `json:"itemType,omitempty"`
	// The maximum number of allowed downloads.
	MaxDownloads *int `json:"maxDownloads,omitempty"`
	// The maximum number of allowed plays.
	MaxPlays *int `json:"maxPlays,omitempty"`
	// The duration of the entitled media.
	MediaDuration *int                     `json:"mediaDuration,omitempty"`
	Ownership     EntitlementOwnershipEnum `json:"ownership"`
	// The id of the plan this entitlement is for.
	PlanID *string `json:"planId,omitempty"`
	// How many times the media has been played.
	PlayCount *int `json:"playCount,omitempty"`
	// The length of time in minutes which the rental will last once played for the first time.
	PlayPeriod *int `json:"playPeriod,omitempty"`
	// How many more downloads of this media are available.
	RemainingDownloads *int `json:"remainingDownloads,omitempty"`
	// The length of time in minutes which the rental will last once purchased.
	RentalPeriod *int                      `json:"rentalPeriod,omitempty"`
	Resolution   EntitlementResolutionEnum `json:"resolution"`
	Scopes       []string                  `json:"scopes"`
}
