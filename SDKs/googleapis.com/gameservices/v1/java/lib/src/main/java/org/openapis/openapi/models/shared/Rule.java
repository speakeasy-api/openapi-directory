/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Rule - A rule to be applied in a Policy.
 */
public class Rule {
    /**
     * Required
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    public RuleActionEnum action;

    public Rule withAction(RuleActionEnum action) {
        this.action = action;
        return this;
    }
    
    /**
     * Additional restrictions that must be met. All conditions must pass for the rule to match.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conditions")
    public Condition[] conditions;

    public Rule withConditions(Condition[] conditions) {
        this.conditions = conditions;
        return this;
    }
    
    /**
     * Human-readable description of the rule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Rule withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("in")
    public String[] in;

    public Rule withIn(String[] in) {
        this.in = in;
        return this;
    }
    
    /**
     * The config returned to callers of CheckPolicy for any entries that match the LOG action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logConfig")
    public LogConfig[] logConfig;

    public Rule withLogConfig(LogConfig[] logConfig) {
        this.logConfig = logConfig;
        return this;
    }
    
    /**
     * If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notIn")
    public String[] notIn;

    public Rule withNotIn(String[] notIn) {
        this.notIn = notIn;
        return this;
    }
    
    /**
     * A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    public String[] permissions;

    public Rule withPermissions(String[] permissions) {
        this.permissions = permissions;
        return this;
    }
    
    public Rule(){}
}
