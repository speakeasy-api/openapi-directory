"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PayoutSettingsMerchantLevel:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_merchants_merchant_id_payout_settings_payout_settings_id(self, request: operations.DeleteMerchantsMerchantIDPayoutSettingsPayoutSettingsIDRequest, security: operations.DeleteMerchantsMerchantIDPayoutSettingsPayoutSettingsIDSecurity) -> operations.DeleteMerchantsMerchantIDPayoutSettingsPayoutSettingsIDResponse:
        r"""Delete a payout setting
        Deletes the payout setting identified in the path.
        
        Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        
        * Management API—Payout account settings read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteMerchantsMerchantIDPayoutSettingsPayoutSettingsIDRequest, base_url, '/merchants/{merchantId}/payoutSettings/{payoutSettingsId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteMerchantsMerchantIDPayoutSettingsPayoutSettingsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_merchants_merchant_id_payout_settings(self, request: operations.GetMerchantsMerchantIDPayoutSettingsRequest, security: operations.GetMerchantsMerchantIDPayoutSettingsSecurity) -> operations.GetMerchantsMerchantIDPayoutSettingsResponse:
        r"""Get a list of payout settings
        Returns the list of payout settings for the merchant account identified in the path.
        
        Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Payout account settings read
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMerchantsMerchantIDPayoutSettingsRequest, base_url, '/merchants/{merchantId}/payoutSettings', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMerchantsMerchantIDPayoutSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayoutSettingsResponse])
                res.payout_settings_response = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_merchants_merchant_id_payout_settings_payout_settings_id(self, request: operations.GetMerchantsMerchantIDPayoutSettingsPayoutSettingsIDRequest, security: operations.GetMerchantsMerchantIDPayoutSettingsPayoutSettingsIDSecurity) -> operations.GetMerchantsMerchantIDPayoutSettingsPayoutSettingsIDResponse:
        r"""Get a payout setting
        Returns the payout setting identified in the path.
        
        Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Payout account settings read
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMerchantsMerchantIDPayoutSettingsPayoutSettingsIDRequest, base_url, '/merchants/{merchantId}/payoutSettings/{payoutSettingsId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMerchantsMerchantIDPayoutSettingsPayoutSettingsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayoutSettings])
                res.payout_settings = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def patch_merchants_merchant_id_payout_settings_payout_settings_id(self, request: operations.PatchMerchantsMerchantIDPayoutSettingsPayoutSettingsIDRequest, security: operations.PatchMerchantsMerchantIDPayoutSettingsPayoutSettingsIDSecurity) -> operations.PatchMerchantsMerchantIDPayoutSettingsPayoutSettingsIDResponse:
        r"""Update a payout setting
        Updates the payout setting identified in the path. You can enable or disable the payout setting.
        
        Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        
        * Management API—Payout account settings read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchMerchantsMerchantIDPayoutSettingsPayoutSettingsIDRequest, base_url, '/merchants/{merchantId}/payoutSettings/{payoutSettingsId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_payout_settings_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchMerchantsMerchantIDPayoutSettingsPayoutSettingsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayoutSettings])
                res.payout_settings = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_merchants_merchant_id_payout_settings(self, request: operations.PostMerchantsMerchantIDPayoutSettingsRequest, security: operations.PostMerchantsMerchantIDPayoutSettingsSecurity) -> operations.PostMerchantsMerchantIDPayoutSettingsResponse:
        r"""Add a payout setting
        Sends a request to add a payout setting for the merchant account specified in the path. A payout setting links the merchant account to the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments) that contains the details of the payout bank account. Adyen verifies the bank account before allowing and enabling the payout setting.
        
        If you're accepting payments in multiple currencies, you may add multiple payout settings for the merchant account.
        
        Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        
        * Management API—Payout account settings read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostMerchantsMerchantIDPayoutSettingsRequest, base_url, '/merchants/{merchantId}/payoutSettings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payout_settings_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMerchantsMerchantIDPayoutSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayoutSettings])
                res.payout_settings = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    