/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import java.time.LocalDate;

/**
 * MeetingSetting - Success
 */
public class MeetingSetting {
    
    public MeetingUrl activeMeetingUrl;
    public MeetingSetting withActiveMeetingUrl(MeetingUrl activeMeetingUrl) {
        this.activeMeetingUrl = activeMeetingUrl;
        return this;
    }
    
    /**
     * Allow other team members to schedule on you behalf.
     */
    
    public Boolean allowBookingOnBehalf;
    public MeetingSetting withAllowBookingOnBehalf(Boolean allowBookingOnBehalf) {
        this.allowBookingOnBehalf = allowBookingOnBehalf;
        return this;
    }
    
    /**
     * Allow team members to insert available time outside your working hours.
     */
    
    public Boolean allowBookingOvertime;
    public MeetingSetting withAllowBookingOvertime(Boolean allowBookingOvertime) {
        this.allowBookingOvertime = allowBookingOvertime;
        return this;
    }
    
    /**
     * Allow team members to double book events on your calendar.
     */
    
    public Boolean allowEventOverlap;
    public MeetingSetting withAllowEventOverlap(Boolean allowEventOverlap) {
        this.allowEventOverlap = allowEventOverlap;
        return this;
    }
    
    /**
     * The number of days out the user allows a prospect to schedule a meeting
     */
    
    public Long availabilityLimit;
    public MeetingSetting withAvailabilityLimit(Long availabilityLimit) {
        this.availabilityLimit = availabilityLimit;
        return this;
    }
    
    /**
     * If Availability Limits have been turned on
     */
    
    public Boolean availabilityLimitEnabled;
    public MeetingSetting withAvailabilityLimitEnabled(Boolean availabilityLimitEnabled) {
        this.availabilityLimitEnabled = availabilityLimitEnabled;
        return this;
    }
    
    /**
     * Default buffer duration in minutes set by a user
     */
    
    public Long bufferTimeDuration;
    public MeetingSetting withBufferTimeDuration(Long bufferTimeDuration) {
        this.bufferTimeDuration = bufferTimeDuration;
        return this;
    }
    
    /**
     * Calendar type
     */
    
    public String calendarType;
    public MeetingSetting withCalendarType(String calendarType) {
        this.calendarType = calendarType;
        return this;
    }
    
    /**
     * Datetime of when the MeetingSetting was created
     */
    
    public LocalDate createdAt;
    public MeetingSetting withCreatedAt(LocalDate createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Default meeting length in minutes set by the user
     */
    
    public Long defaultMeetingLength;
    public MeetingSetting withDefaultMeetingLength(Long defaultMeetingLength) {
        this.defaultMeetingLength = defaultMeetingLength;
        return this;
    }
    
    /**
     * Default description of the meeting
     */
    
    public String description;
    public MeetingSetting withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Calendar owner's email address
     */
    
    public String emailAddress;
    public MeetingSetting withEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }
    
    /**
     * Determines if a user enabled Calendar Sync feature
     */
    
    public Boolean enableCalendarSync;
    public MeetingSetting withEnableCalendarSync(Boolean enableCalendarSync) {
        this.enableCalendarSync = enableCalendarSync;
        return this;
    }
    
    /**
     * Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.)
     */
    
    public Boolean enableDynamicLocation;
    public MeetingSetting withEnableDynamicLocation(Boolean enableDynamicLocation) {
        this.enableDynamicLocation = enableDynamicLocation;
        return this;
    }
    
    /**
     * ID of the MeetingSetting
     */
    
    public Long id;
    public MeetingSetting withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Default location of the meeting
     */
    
    public String location;
    public MeetingSetting withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Gets true when any issue with fetching calendar occurs
     */
    
    public Boolean primaryCalendarConnectionFailed;
    public MeetingSetting withPrimaryCalendarConnectionFailed(Boolean primaryCalendarConnectionFailed) {
        this.primaryCalendarConnectionFailed = primaryCalendarConnectionFailed;
        return this;
    }
    
    /**
     * ID of the primary calendar
     */
    
    public String primaryCalendarId;
    public MeetingSetting withPrimaryCalendarId(String primaryCalendarId) {
        this.primaryCalendarId = primaryCalendarId;
        return this;
    }
    
    /**
     * Display name of the primary calendar
     */
    
    public String primaryCalendarName;
    public MeetingSetting withPrimaryCalendarName(String primaryCalendarName) {
        this.primaryCalendarName = primaryCalendarName;
        return this;
    }
    
    /**
     * Determines if meetings are scheduled with a 15 minute buffer between them
     */
    
    public Boolean scheduleBufferEnabled;
    public MeetingSetting withScheduleBufferEnabled(Boolean scheduleBufferEnabled) {
        this.scheduleBufferEnabled = scheduleBufferEnabled;
        return this;
    }
    
    /**
     * The number of hours in advance a user requires someone to a book a meeting with them
     */
    
    public Long scheduleDelay;
    public MeetingSetting withScheduleDelay(Long scheduleDelay) {
        this.scheduleDelay = scheduleDelay;
        return this;
    }
    
    /**
     * Allow team members to see the details of events on your calendar.
     */
    
    public Boolean shareEventDetail;
    public MeetingSetting withShareEventDetail(Boolean shareEventDetail) {
        this.shareEventDetail = shareEventDetail;
        return this;
    }
    
    /**
     * Time zone for current calendar
     */
    
    public String timeZone;
    public MeetingSetting withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    
    /**
     * Times available set by a user that can be used to book meetings
     */
    
    public java.util.Map<String, Object> timesAvailable;
    public MeetingSetting withTimesAvailable(java.util.Map<String, Object> timesAvailable) {
        this.timesAvailable = timesAvailable;
        return this;
    }
    
    /**
     * Default title of the meeting
     */
    
    public String title;
    public MeetingSetting withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * Datetime of when the MeetingSetting was last updated
     */
    
    public LocalDate updatedAt;
    public MeetingSetting withUpdatedAt(LocalDate updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    
    public EmbeddedResource user;
    public MeetingSetting withUser(EmbeddedResource user) {
        this.user = user;
        return this;
    }
    
    /**
     * User details
     */
    
    public java.util.Map<String, Object> userDetails;
    public MeetingSetting withUserDetails(java.util.Map<String, Object> userDetails) {
        this.userDetails = userDetails;
        return this;
    }
    
    /**
     * User slug generated with a full name of the user
     */
    
    public String userSlug;
    public MeetingSetting withUserSlug(String userSlug) {
        this.userSlug = userSlug;
        return this;
    }
    
}
