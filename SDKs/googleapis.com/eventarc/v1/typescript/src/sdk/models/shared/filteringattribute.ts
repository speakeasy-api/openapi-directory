/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * A representation of the FilteringAttribute resource. Filtering attributes are per event type.
 */
export class FilteringAttribute extends SpeakeasyBase {
  /**
   * Output only. Attribute used for filtering the event type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attribute" })
  attribute?: string;

  /**
   * Output only. Description of the purpose of the attribute.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Output only. If true, the attribute accepts matching expressions in the Eventarc PathPattern format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pathPatternSupported" })
  pathPatternSupported?: boolean;

  /**
   * Output only. If true, the triggers for this provider should always specify a filter on these attributes. Trigger creation will fail otherwise.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required" })
  required?: boolean;
}
