/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://oauth.twilio.com",
	};
    /**
	 * CREATE_DEVICE_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_DEVICE_CODE_SERVERS = {
        "https://oauth.twilio.com",
    };
	
    /**
	 * CREATE_TOKEN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_TOKEN_SERVERS = {
        "https://oauth.twilio.com",
    };
	
    /**
	 * FETCH_CERTS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CERTS_SERVERS = {
        "https://oauth.twilio.com",
    };
	
    /**
	 * FETCH_OPENID_DISCOVERY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_OPENID_DISCOVERY_SERVERS = {
        "https://oauth.twilio.com",
    };
	
    /**
	 * FETCH_USER_INFO_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_USER_INFO_SERVERS = {
        "https://oauth.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * Issues a new Access token (optionally identity_token &amp; refresh_token) in exchange of Oauth grant
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeviceCodeResponse createDeviceCode(org.openapis.openapi.models.operations.CreateDeviceCodeCreateDeviceCodeRequest request, org.openapis.openapi.models.operations.CreateDeviceCodeSecurity security) throws Exception {
        return this.createDeviceCode(request, security, null);
    }

    /**
     * Issues a new Access token (optionally identity_token &amp; refresh_token) in exchange of Oauth grant
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeviceCodeResponse createDeviceCode(org.openapis.openapi.models.operations.CreateDeviceCodeCreateDeviceCodeRequest request, org.openapis.openapi.models.operations.CreateDeviceCodeSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_DEVICE_CODE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/device/code");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateDeviceCodeResponse res = new org.openapis.openapi.models.operations.CreateDeviceCodeResponse() {{
            oauthV1DeviceCode = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.OauthV1DeviceCode out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.OauthV1DeviceCode.class);
                res.oauthV1DeviceCode = out;
            }
        }

        return res;
    }

    /**
     * Issues a new Access token (optionally identity_token &amp; refresh_token) in exchange of Oauth grant
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateTokenResponse createToken(org.openapis.openapi.models.operations.CreateTokenCreateTokenRequest request, org.openapis.openapi.models.operations.CreateTokenSecurity security) throws Exception {
        return this.createToken(request, security, null);
    }

    /**
     * Issues a new Access token (optionally identity_token &amp; refresh_token) in exchange of Oauth grant
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateTokenResponse createToken(org.openapis.openapi.models.operations.CreateTokenCreateTokenRequest request, org.openapis.openapi.models.operations.CreateTokenSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_TOKEN_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/token");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateTokenResponse res = new org.openapis.openapi.models.operations.CreateTokenResponse() {{
            oauthV1Token = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.OauthV1Token out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.OauthV1Token.class);
                res.oauthV1Token = out;
            }
        }

        return res;
    }

    /**
     * Fetches public JWKs
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCertsResponse fetchCerts() throws Exception {
        return this.fetchCerts(null);
    }

    /**
     * Fetches public JWKs
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCertsResponse fetchCerts(String serverURL) throws Exception {
        String baseUrl = FETCH_CERTS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/certs");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCertsResponse res = new org.openapis.openapi.models.operations.FetchCertsResponse() {{
            oauthV1Certs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.OauthV1Certs out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.OauthV1Certs.class);
                res.oauthV1Certs = out;
            }
        }

        return res;
    }

    /**
     * Fetch configuration details about the OpenID Connect Authorization Server
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchOpenidDiscoveryResponse fetchOpenidDiscovery() throws Exception {
        return this.fetchOpenidDiscovery(null);
    }

    /**
     * Fetch configuration details about the OpenID Connect Authorization Server
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchOpenidDiscoveryResponse fetchOpenidDiscovery(String serverURL) throws Exception {
        String baseUrl = FETCH_OPENID_DISCOVERY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/.well-known/openid-configuration");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchOpenidDiscoveryResponse res = new org.openapis.openapi.models.operations.FetchOpenidDiscoveryResponse() {{
            oauthV1OpenidDiscovery = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.OauthV1OpenidDiscovery out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.OauthV1OpenidDiscovery.class);
                res.oauthV1OpenidDiscovery = out;
            }
        }

        return res;
    }

    /**
     * Retrieves the consented UserInfo and other claims about the logged-in subject (end-user).
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchUserInfoResponse fetchUserInfo() throws Exception {
        return this.fetchUserInfo(null);
    }

    /**
     * Retrieves the consented UserInfo and other claims about the logged-in subject (end-user).
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchUserInfoResponse fetchUserInfo(String serverURL) throws Exception {
        String baseUrl = FETCH_USER_INFO_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/userinfo");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUserInfoResponse res = new org.openapis.openapi.models.operations.FetchUserInfoResponse() {{
            oauthV1UserInfo = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.OauthV1UserInfo out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.OauthV1UserInfo.class);
                res.oauthV1UserInfo = out;
            }
        }

        return res;
    }
}