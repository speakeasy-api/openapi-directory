<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Groups 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add group members
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddGroupMembersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddGroupMembersResponse
     */
	public function addGroupMembers(
        \OpenAPI\OpenAPI\Models\Operations\AddGroupMembersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddGroupMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}/members.json', \OpenAPI\OpenAPI\Models\Operations\AddGroupMembersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddGroupMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addGroupMembers200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AddGroupMembers200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateGroupRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateGroupResponse
     */
	public function createGroup(
        \OpenAPI\OpenAPI\Models\Operations\CreateGroupRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/groups.json');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateGroup200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteGroupResponse
     */
	public function deleteGroup(
        \OpenAPI\OpenAPI\Models\Operations\DeleteGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/groups/{id}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeleteGroup200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGroupResponse
     */
	public function getGroup(
        \OpenAPI\OpenAPI\Models\Operations\GetGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}.json', \OpenAPI\OpenAPI\Models\Operations\GetGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetGroup200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List group members
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListGroupMembersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListGroupMembersResponse
     */
	public function listGroupMembers(
        \OpenAPI\OpenAPI\Models\Operations\ListGroupMembersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListGroupMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}/members.json', \OpenAPI\OpenAPI\Models\Operations\ListGroupMembersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListGroupMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listGroupMembers200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListGroupMembers200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List groups
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ListGroupsResponse
     */
	public function listGroups(
    ): \OpenAPI\OpenAPI\Models\Operations\ListGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups.json');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listGroups200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListGroups200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove group members
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveGroupMembersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveGroupMembersResponse
     */
	public function removeGroupMembers(
        \OpenAPI\OpenAPI\Models\Operations\RemoveGroupMembersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveGroupMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}/members.json', \OpenAPI\OpenAPI\Models\Operations\RemoveGroupMembersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveGroupMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->removeGroupMembers200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RemoveGroupMembers200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateGroupResponse
     */
	public function updateGroup(
        \OpenAPI\OpenAPI\Models\Operations\UpdateGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateGroup200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}