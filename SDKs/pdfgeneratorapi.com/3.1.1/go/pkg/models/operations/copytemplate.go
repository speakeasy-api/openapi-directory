// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CopyTemplateQueryParams struct {
	// Name for the copied template. If name is not specified then the original name is used.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Template unique identifier
	TemplateID int64 `queryParam:"style=form,explode=true,name=templateId"`
}

type CopyTemplateRequest struct {
	QueryParams CopyTemplateQueryParams
}

// CopyTemplate500ApplicationJSON - Internal Server Error
type CopyTemplate500ApplicationJSON struct {
	// Error description
	Error *string `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// CopyTemplate422ApplicationJSONErrorEnum - Error description
type CopyTemplate422ApplicationJSONErrorEnum string

const (
	CopyTemplate422ApplicationJSONErrorEnumUnableToParseJSONPleaseCheckFormatting               CopyTemplate422ApplicationJSONErrorEnum = "Unable to parse JSON, please check formatting"
	CopyTemplate422ApplicationJSONErrorEnumRequiredParameterMissing                             CopyTemplate422ApplicationJSONErrorEnum = "Required parameter missing"
	CopyTemplate422ApplicationJSONErrorEnumRequiredParameterMissingTemplateDefinitionNotDefined CopyTemplate422ApplicationJSONErrorEnum = "Required parameter missing: template definition not defined"
	CopyTemplate422ApplicationJSONErrorEnumRequiredParameterMissingTemplateNotDefined           CopyTemplate422ApplicationJSONErrorEnum = "Required parameter missing: template not defined"
)

func (e *CopyTemplate422ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unable to parse JSON, please check formatting":
		fallthrough
	case "Required parameter missing":
		fallthrough
	case "Required parameter missing: template definition not defined":
		fallthrough
	case "Required parameter missing: template not defined":
		*e = CopyTemplate422ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CopyTemplate422ApplicationJSONErrorEnum: %s", s)
	}
}

// CopyTemplate422ApplicationJSON - Unprocessable Entity
type CopyTemplate422ApplicationJSON struct {
	// Error description
	Error *CopyTemplate422ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// CopyTemplate404ApplicationJSONErrorEnum - Error description
type CopyTemplate404ApplicationJSONErrorEnum string

const (
	CopyTemplate404ApplicationJSONErrorEnumEntityNotFound                               CopyTemplate404ApplicationJSONErrorEnum = "Entity not found"
	CopyTemplate404ApplicationJSONErrorEnumResourceNotFound                             CopyTemplate404ApplicationJSONErrorEnum = "Resource not found"
	CopyTemplate404ApplicationJSONErrorEnumNoneOfTheTemplatesIsAvailableForTheWorkspace CopyTemplate404ApplicationJSONErrorEnum = "None of the templates is available for the workspace."
)

func (e *CopyTemplate404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Entity not found":
		fallthrough
	case "Resource not found":
		fallthrough
	case "None of the templates is available for the workspace.":
		*e = CopyTemplate404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CopyTemplate404ApplicationJSONErrorEnum: %s", s)
	}
}

// CopyTemplate404ApplicationJSON - Not Found
type CopyTemplate404ApplicationJSON struct {
	// Error description
	Error *CopyTemplate404ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// CopyTemplate403ApplicationJSONErrorEnum - Error description
type CopyTemplate403ApplicationJSONErrorEnum string

const (
	CopyTemplate403ApplicationJSONErrorEnumYourAccountHasExceededTheMonthlyDocumentGenerationLimit CopyTemplate403ApplicationJSONErrorEnum = "Your account has exceeded the monthly document generation limit."
)

func (e *CopyTemplate403ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Your account has exceeded the monthly document generation limit.":
		*e = CopyTemplate403ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CopyTemplate403ApplicationJSONErrorEnum: %s", s)
	}
}

// CopyTemplate403ApplicationJSON - Forbidden
type CopyTemplate403ApplicationJSON struct {
	// Error description
	Error *CopyTemplate403ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// CopyTemplate401ApplicationJSONErrorEnum - Error description
type CopyTemplate401ApplicationJSONErrorEnum string

const (
	CopyTemplate401ApplicationJSONErrorEnumAuthenticationFailedRequestExpired                        CopyTemplate401ApplicationJSONErrorEnum = "Authentication failed: request expired"
	CopyTemplate401ApplicationJSONErrorEnumAuthenticationFailedSignatureOrSecretMissing              CopyTemplate401ApplicationJSONErrorEnum = "Authentication failed: signature or secret missing"
	CopyTemplate401ApplicationJSONErrorEnumAuthenticationFailedWorkspaceMissing                      CopyTemplate401ApplicationJSONErrorEnum = "Authentication failed: workspace missing"
	CopyTemplate401ApplicationJSONErrorEnumAuthenticationFailedKeyMissing                            CopyTemplate401ApplicationJSONErrorEnum = "Authentication failed: key missing"
	CopyTemplate401ApplicationJSONErrorEnumAuthenticationFailedPropertyIssIssuerMissingInJwt         CopyTemplate401ApplicationJSONErrorEnum = "Authentication failed: property 'iss' (issuer) missing in JWT"
	CopyTemplate401ApplicationJSONErrorEnumAuthenticationFailedPropertySubSubjectMissingInJwt        CopyTemplate401ApplicationJSONErrorEnum = "Authentication failed: property 'sub' (subject) missing in JWT"
	CopyTemplate401ApplicationJSONErrorEnumAuthenticationFailedPropertyExpExpirationTimeMissingInJwt CopyTemplate401ApplicationJSONErrorEnum = "Authentication failed: property 'exp' (expiration time) missing in JWT"
	CopyTemplate401ApplicationJSONErrorEnumAuthenticationFailedInvalidIssIssuer                      CopyTemplate401ApplicationJSONErrorEnum = "Authentication failed: invalid 'iss' (issuer)"
	CopyTemplate401ApplicationJSONErrorEnumAuthenticationFailedIncorrectSignature                    CopyTemplate401ApplicationJSONErrorEnum = "Authentication failed: incorrect signature"
	CopyTemplate401ApplicationJSONErrorEnumAuthenticationFailed                                      CopyTemplate401ApplicationJSONErrorEnum = "Authentication failed"
)

func (e *CopyTemplate401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed: request expired":
		fallthrough
	case "Authentication failed: signature or secret missing":
		fallthrough
	case "Authentication failed: workspace missing":
		fallthrough
	case "Authentication failed: key missing":
		fallthrough
	case "Authentication failed: property 'iss' (issuer) missing in JWT":
		fallthrough
	case "Authentication failed: property 'sub' (subject) missing in JWT":
		fallthrough
	case "Authentication failed: property 'exp' (expiration time) missing in JWT":
		fallthrough
	case "Authentication failed: invalid 'iss' (issuer)":
		fallthrough
	case "Authentication failed: incorrect signature":
		fallthrough
	case "Authentication failed":
		*e = CopyTemplate401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CopyTemplate401ApplicationJSONErrorEnum: %s", s)
	}
}

// CopyTemplate401ApplicationJSON - Unauthorized
type CopyTemplate401ApplicationJSON struct {
	// Error description
	Error *CopyTemplate401ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// CopyTemplate200ApplicationJSON - Template configuration as JSON object
type CopyTemplate200ApplicationJSON struct {
	Response *shared.TemplateDefinition `json:"response,omitempty"`
}

type CopyTemplateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Template configuration as JSON object
	CopyTemplate200ApplicationJSONObject *CopyTemplate200ApplicationJSON
	// Unauthorized
	CopyTemplate401ApplicationJSONObject *CopyTemplate401ApplicationJSON
	// Forbidden
	CopyTemplate403ApplicationJSONObject *CopyTemplate403ApplicationJSON
	// Not Found
	CopyTemplate404ApplicationJSONObject *CopyTemplate404ApplicationJSON
	// Unprocessable Entity
	CopyTemplate422ApplicationJSONObject *CopyTemplate422ApplicationJSON
	// Internal Server Error
	CopyTemplate500ApplicationJSONObject *CopyTemplate500ApplicationJSON
}
