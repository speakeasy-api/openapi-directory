/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Build {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Build(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Configures the branch for build
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BranchConfigurationsCreateResponse branchConfigurationsCreate(org.openapis.openapi.models.operations.BranchConfigurationsCreateRequest request, org.openapis.openapi.models.operations.BranchConfigurationsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BranchConfigurationsCreateRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BranchConfigurationsCreateResponse res = new org.openapis.openapi.models.operations.BranchConfigurationsCreateResponse() {{
            branchConfigurationsCreate200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BranchConfigurationsCreate200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BranchConfigurationsCreate200ApplicationJSON.class);
                res.branchConfigurationsCreate200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Deletes the branch build configuration
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BranchConfigurationsDeleteResponse branchConfigurationsDelete(org.openapis.openapi.models.operations.BranchConfigurationsDeleteRequest request, org.openapis.openapi.models.operations.BranchConfigurationsDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BranchConfigurationsDeleteRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BranchConfigurationsDeleteResponse res = new org.openapis.openapi.models.operations.BranchConfigurationsDeleteResponse() {{
            branchConfigurationsDelete200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BranchConfigurationsDelete200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BranchConfigurationsDelete200ApplicationJSON.class);
                res.branchConfigurationsDelete200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets the branch configuration
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BranchConfigurationsGetResponse branchConfigurationsGet(org.openapis.openapi.models.operations.BranchConfigurationsGetRequest request, org.openapis.openapi.models.operations.BranchConfigurationsGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BranchConfigurationsGetRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BranchConfigurationsGetResponse res = new org.openapis.openapi.models.operations.BranchConfigurationsGetResponse() {{
            branchConfigurationsGet200ApplicationJSONObject = null;
            branchConfigurationsGetDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BranchConfigurationsGet200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BranchConfigurationsGet200ApplicationJSON.class);
                res.branchConfigurationsGet200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BranchConfigurationsGetDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BranchConfigurationsGetDefaultApplicationJSON.class);
                res.branchConfigurationsGetDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Reconfigures the branch for build
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BranchConfigurationsUpdateResponse branchConfigurationsUpdate(org.openapis.openapi.models.operations.BranchConfigurationsUpdateRequest request, org.openapis.openapi.models.operations.BranchConfigurationsUpdateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BranchConfigurationsUpdateRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BranchConfigurationsUpdateResponse res = new org.openapis.openapi.models.operations.BranchConfigurationsUpdateResponse() {{
            branchConfigurationsUpdate200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BranchConfigurationsUpdate200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BranchConfigurationsUpdate200ApplicationJSON.class);
                res.branchConfigurationsUpdate200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets the build configuration in Azure pipeline YAML format
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BuildConfigurationsGetResponse buildConfigurationsGet(org.openapis.openapi.models.operations.BuildConfigurationsGetRequest request, org.openapis.openapi.models.operations.BuildConfigurationsGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BuildConfigurationsGetRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/export_config", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BuildConfigurationsGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BuildConfigurationsGetResponse res = new org.openapis.openapi.models.operations.BuildConfigurationsGetResponse() {{
            buildConfigurationsGet200ApplicationJSONObject = null;
            buildConfigurationsGetDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildConfigurationsGet200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildConfigurationsGet200ApplicationJSON.class);
                res.buildConfigurationsGet200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildConfigurationsGetDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildConfigurationsGetDefaultApplicationJSON.class);
                res.buildConfigurationsGetDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Create a build
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BuildsCreateResponse buildsCreate(org.openapis.openapi.models.operations.BuildsCreateRequest request, org.openapis.openapi.models.operations.BuildsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BuildsCreateRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BuildsCreateResponse res = new org.openapis.openapi.models.operations.BuildsCreateResponse() {{
            buildsCreate200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsCreate200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsCreate200ApplicationJSON.class);
                res.buildsCreate200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Distribute a build
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BuildsDistributeResponse buildsDistribute(org.openapis.openapi.models.operations.BuildsDistributeRequest request, org.openapis.openapi.models.operations.BuildsDistributeSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BuildsDistributeRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/distribute", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BuildsDistributeResponse res = new org.openapis.openapi.models.operations.BuildsDistributeResponse() {{
            buildsDistribute200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsDistribute200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsDistribute200ApplicationJSON.class);
                res.buildsDistribute200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns the build detail for the given build ID
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BuildsGetResponse buildsGet(org.openapis.openapi.models.operations.BuildsGetRequest request, org.openapis.openapi.models.operations.BuildsGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BuildsGetRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BuildsGetResponse res = new org.openapis.openapi.models.operations.BuildsGetResponse() {{
            buildsGet200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsGet200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsGet200ApplicationJSON.class);
                res.buildsGet200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets the download URI
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BuildsGetDownloadUriResponse buildsGetDownloadUri(org.openapis.openapi.models.operations.BuildsGetDownloadUriRequest request, org.openapis.openapi.models.operations.BuildsGetDownloadUriSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BuildsGetDownloadUriRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/downloads/{download_type}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BuildsGetDownloadUriResponse res = new org.openapis.openapi.models.operations.BuildsGetDownloadUriResponse() {{
            buildsGetDownloadUri200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsGetDownloadUri200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsGetDownloadUri200ApplicationJSON.class);
                res.buildsGetDownloadUri200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get the build log
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BuildsGetLogResponse buildsGetLog(org.openapis.openapi.models.operations.BuildsGetLogRequest request, org.openapis.openapi.models.operations.BuildsGetLogSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BuildsGetLogRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/logs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BuildsGetLogResponse res = new org.openapis.openapi.models.operations.BuildsGetLogResponse() {{
            buildsGetLog200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsGetLog200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsGetLog200ApplicationJSON.class);
                res.buildsGetLog200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Application specific build service status
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BuildsGetStatusByAppIdResponse buildsGetStatusByAppId(org.openapis.openapi.models.operations.BuildsGetStatusByAppIdRequest request, org.openapis.openapi.models.operations.BuildsGetStatusByAppIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BuildsGetStatusByAppIdRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/build_service_status", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BuildsGetStatusByAppIdResponse res = new org.openapis.openapi.models.operations.BuildsGetStatusByAppIdResponse() {{
            buildsGetStatusByAppId200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsGetStatusByAppId200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsGetStatusByAppId200ApplicationJSON.class);
                res.buildsGetStatusByAppId200ApplicationJSONObject = out;
            }
        }
        else {
        }

        return res;
    }

    /**
     * Returns the list of Git branches for this application
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BuildsListBranchesResponse buildsListBranches(org.openapis.openapi.models.operations.BuildsListBranchesRequest request, org.openapis.openapi.models.operations.BuildsListBranchesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BuildsListBranchesRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/branches", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BuildsListBranchesResponse res = new org.openapis.openapi.models.operations.BuildsListBranchesResponse() {{
            buildsListBranches200ApplicationJSONObjects = null;
            buildsListBranchesDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsListBranches200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsListBranches200ApplicationJSON[].class);
                res.buildsListBranches200ApplicationJSONObjects = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsListBranchesDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsListBranchesDefaultApplicationJSON.class);
                res.buildsListBranchesDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns the list of builds for the branch
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BuildsListByBranchResponse buildsListByBranch(org.openapis.openapi.models.operations.BuildsListByBranchRequest request, org.openapis.openapi.models.operations.BuildsListByBranchSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BuildsListByBranchRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BuildsListByBranchResponse res = new org.openapis.openapi.models.operations.BuildsListByBranchResponse() {{
            buildsListByBranch200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsListByBranch200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsListByBranch200ApplicationJSON[].class);
                res.buildsListByBranch200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Returns the projects in the repository for the branch, for all toolsets
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BuildsListToolsetProjectsResponse buildsListToolsetProjects(org.openapis.openapi.models.operations.BuildsListToolsetProjectsRequest request, org.openapis.openapi.models.operations.BuildsListToolsetProjectsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BuildsListToolsetProjectsRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/toolset_projects", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BuildsListToolsetProjectsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BuildsListToolsetProjectsResponse res = new org.openapis.openapi.models.operations.BuildsListToolsetProjectsResponse() {{
            buildsListToolsetProjects200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsListToolsetProjects200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsListToolsetProjects200ApplicationJSON.class);
                res.buildsListToolsetProjects200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns available toolsets for application
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BuildsListToolsetsResponse buildsListToolsets(org.openapis.openapi.models.operations.BuildsListToolsetsRequest request, org.openapis.openapi.models.operations.BuildsListToolsetsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BuildsListToolsetsRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/toolsets", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BuildsListToolsetsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BuildsListToolsetsResponse res = new org.openapis.openapi.models.operations.BuildsListToolsetsResponse() {{
            buildsListToolsets200ApplicationJSONObject = null;
            buildsListToolsetsDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsListToolsets200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsListToolsets200ApplicationJSON.class);
                res.buildsListToolsets200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsListToolsetsDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsListToolsetsDefaultApplicationJSON.class);
                res.buildsListToolsetsDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets the Xamarin SDK bundles available to this app
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BuildsListXamarinSDKBundlesResponse buildsListXamarinSDKBundles(org.openapis.openapi.models.operations.BuildsListXamarinSDKBundlesRequest request, org.openapis.openapi.models.operations.BuildsListXamarinSDKBundlesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BuildsListXamarinSDKBundlesRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/xamarin_sdk_bundles", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BuildsListXamarinSDKBundlesResponse res = new org.openapis.openapi.models.operations.BuildsListXamarinSDKBundlesResponse() {{
            buildsListXamarinSDKBundles200ApplicationJSONObjects = null;
            buildsListXamarinSDKBundlesDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsListXamarinSDKBundles200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsListXamarinSDKBundles200ApplicationJSON[].class);
                res.buildsListXamarinSDKBundles200ApplicationJSONObjects = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsListXamarinSDKBundlesDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsListXamarinSDKBundlesDefaultApplicationJSON.class);
                res.buildsListXamarinSDKBundlesDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets the Xcode versions available to this app
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BuildsListXcodeVersionsResponse buildsListXcodeVersions(org.openapis.openapi.models.operations.BuildsListXcodeVersionsRequest request, org.openapis.openapi.models.operations.BuildsListXcodeVersionsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BuildsListXcodeVersionsRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/xcode_versions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BuildsListXcodeVersionsResponse res = new org.openapis.openapi.models.operations.BuildsListXcodeVersionsResponse() {{
            buildsListXcodeVersions200ApplicationJSONObjects = null;
            buildsListXcodeVersionsDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsListXcodeVersions200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsListXcodeVersions200ApplicationJSON[].class);
                res.buildsListXcodeVersions200ApplicationJSONObjects = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsListXcodeVersionsDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsListXcodeVersionsDefaultApplicationJSON.class);
                res.buildsListXcodeVersionsDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Cancels a build
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BuildsUpdateResponse buildsUpdate(org.openapis.openapi.models.operations.BuildsUpdateRequest request, org.openapis.openapi.models.operations.BuildsUpdateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BuildsUpdateRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BuildsUpdateResponse res = new org.openapis.openapi.models.operations.BuildsUpdateResponse() {{
            buildsUpdate200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsUpdate200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsUpdate200ApplicationJSON.class);
                res.buildsUpdate200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Public webhook sink
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BuildsWebhookResponse buildsWebhook(java.util.Map<String, Object> request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v0.1/public/hooks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BuildsWebhookResponse res = new org.openapis.openapi.models.operations.BuildsWebhookResponse() {{
            buildsWebhookDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.BuildsWebhookDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.BuildsWebhookDefaultApplicationJSON.class);
                res.buildsWebhookDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns commit information for a batch of shas
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CommitsListByShaListResponse commitsListByShaList(org.openapis.openapi.models.operations.CommitsListByShaListRequest request, org.openapis.openapi.models.operations.CommitsListByShaListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CommitsListByShaListRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/commits/batch", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.CommitsListByShaListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CommitsListByShaListResponse res = new org.openapis.openapi.models.operations.CommitsListByShaListResponse() {{
            commitsListByShaList200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CommitsListByShaList200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CommitsListByShaList200ApplicationJSON[].class);
                res.commitsListByShaList200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Create a new asset to upload a file
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FileAssetsCreateResponse fileAssetsCreate(org.openapis.openapi.models.operations.FileAssetsCreateRequest request, org.openapis.openapi.models.operations.FileAssetsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FileAssetsCreateRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/file_asset", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FileAssetsCreateResponse res = new org.openapis.openapi.models.operations.FileAssetsCreateResponse() {{
            fileAssetsCreate200ApplicationJSONObject = null;
            fileAssetsCreateDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.FileAssetsCreate200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.FileAssetsCreate200ApplicationJSON.class);
                res.fileAssetsCreate200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.FileAssetsCreateDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.FileAssetsCreateDefaultApplicationJSON.class);
                res.fileAssetsCreateDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets the repositories available from the source code host
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RepositoriesListResponse repositoriesList(org.openapis.openapi.models.operations.RepositoriesListRequest request, org.openapis.openapi.models.operations.RepositoriesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RepositoriesListRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/source_hosts/{source_host}/repositories", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RepositoriesListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RepositoriesListResponse res = new org.openapis.openapi.models.operations.RepositoriesListResponse() {{
            repositoriesList200ApplicationJSONObjects = null;
            repositoriesListDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RepositoriesList200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.RepositoriesList200ApplicationJSON[].class);
                res.repositoriesList200ApplicationJSONObjects = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RepositoriesListDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.RepositoriesListDefaultApplicationJSON.class);
                res.repositoriesListDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Configures the repository for build
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RepositoryConfigurationsCreateOrUpdateResponse repositoryConfigurationsCreateOrUpdate(org.openapis.openapi.models.operations.RepositoryConfigurationsCreateOrUpdateRequest request, org.openapis.openapi.models.operations.RepositoryConfigurationsCreateOrUpdateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RepositoryConfigurationsCreateOrUpdateRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/repo_config", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RepositoryConfigurationsCreateOrUpdateResponse res = new org.openapis.openapi.models.operations.RepositoryConfigurationsCreateOrUpdateResponse() {{
            repositoryConfigurationsCreateOrUpdate200ApplicationJSONObject = null;
            repositoryConfigurationsCreateOrUpdateDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RepositoryConfigurationsCreateOrUpdate200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.RepositoryConfigurationsCreateOrUpdate200ApplicationJSON.class);
                res.repositoryConfigurationsCreateOrUpdate200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RepositoryConfigurationsCreateOrUpdateDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.RepositoryConfigurationsCreateOrUpdateDefaultApplicationJSON.class);
                res.repositoryConfigurationsCreateOrUpdateDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Removes the configuration for the repository
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RepositoryConfigurationsDeleteResponse repositoryConfigurationsDelete(org.openapis.openapi.models.operations.RepositoryConfigurationsDeleteRequest request, org.openapis.openapi.models.operations.RepositoryConfigurationsDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RepositoryConfigurationsDeleteRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/repo_config", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RepositoryConfigurationsDeleteResponse res = new org.openapis.openapi.models.operations.RepositoryConfigurationsDeleteResponse() {{
            repositoryConfigurationsDelete200ApplicationJSONObject = null;
            repositoryConfigurationsDeleteDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RepositoryConfigurationsDelete200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.RepositoryConfigurationsDelete200ApplicationJSON.class);
                res.repositoryConfigurationsDelete200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RepositoryConfigurationsDeleteDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.RepositoryConfigurationsDeleteDefaultApplicationJSON.class);
                res.repositoryConfigurationsDeleteDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns the repository build configuration status of the app
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RepositoryConfigurationsListResponse repositoryConfigurationsList(org.openapis.openapi.models.operations.RepositoryConfigurationsListRequest request, org.openapis.openapi.models.operations.RepositoryConfigurationsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RepositoryConfigurationsListRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/repo_config", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.RepositoryConfigurationsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RepositoryConfigurationsListResponse res = new org.openapis.openapi.models.operations.RepositoryConfigurationsListResponse() {{
            repositoryConfigurationsList200ApplicationJSONAnies = null;
            repositoryConfigurationsListDefaultApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RepositoryConfigurationsList200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.RepositoryConfigurationsList200ApplicationJSON[].class);
                res.repositoryConfigurationsList200ApplicationJSONAnies = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RepositoryConfigurationsListDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.RepositoryConfigurationsListDefaultApplicationJSON.class);
                res.repositoryConfigurationsListDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }
}