/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class DashboardWebinarParticipants200ApplicationJSONParticipants {
    /**
     * Audio quality of the participant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio_quality")
    public DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnum audioQuality;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withAudioQuality(DashboardWebinarParticipants200ApplicationJSONParticipantsAudioQualityEnum audioQuality) {
        this.audioQuality = audioQuality;
        return this;
    }
    
    /**
     * Participant connection type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection_type")
    public String connectionType;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withConnectionType(String connectionType) {
        this.connectionType = connectionType;
        return this;
    }
    
    /**
     * Another identifier for the participant. Can be a number or characters, maximum length of 15 characters. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_key")
    public String customerKey;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withCustomerKey(String customerKey) {
        this.customerKey = customerKey;
        return this;
    }
    
    /**
     * Participant data center.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data_center")
    public String dataCenter;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withDataCenter(String dataCenter) {
        this.dataCenter = dataCenter;
        return this;
    }
    
    /**
     * 
     * The type of device using which the participant joined the webinar. The possible values for this field are:
     * * `Phone`: Participant joined via PSTN.
     * * `H.323/SIP`: Participant joined via an H.323 or SIP device.
     * * `Windows`: Participant joined via VoIP using a Windows device.
     * * `Mac`: Participant joined via VoIP using a Mac device.
     * * `iOS`: Participant joined via VoIP using an iOS device.
     * * `Android`: Participant joined via VoIP using an Android device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device")
    public String device;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withDevice(String device) {
        this.device = device;
        return this;
    }
    
    /**
     * Participant domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    public String domain;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withDomain(String domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * Email address of the participant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Participant hard disk ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("harddisk_id")
    public String harddiskId;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withHarddiskId(String harddiskId) {
        this.harddiskId = harddiskId;
        return this;
    }
    
    /**
     * Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Participant IP address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip_address")
    public String ipAddress;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    
    /**
     * Participant join time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("join_time")
    public OffsetDateTime joinTime;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withJoinTime(OffsetDateTime joinTime) {
        this.joinTime = joinTime;
        return this;
    }
    
    /**
     * Possible reasons for why a participant left the Webinar.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leave_reason")
    public String leaveReason;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withLeaveReason(String leaveReason) {
        this.leaveReason = leaveReason;
        return this;
    }
    
    /**
     * Participant leave time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("leave_time")
    public OffsetDateTime leaveTime;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withLeaveTime(OffsetDateTime leaveTime) {
        this.leaveTime = leaveTime;
        return this;
    }
    
    /**
     * Participant location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Participant MAC address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mac_addr")
    public String macAddr;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withMacAddr(String macAddr) {
        this.macAddr = macAddr;
        return this;
    }
    
    /**
     * Participant microphone.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("microphone")
    public String microphone;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withMicrophone(String microphone) {
        this.microphone = microphone;
        return this;
    }
    
    /**
     * Participant network type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network_type")
    public String networkType;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withNetworkType(String networkType) {
        this.networkType = networkType;
        return this;
    }
    
    /**
     * Participant PC name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pc_name")
    public String pcName;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withPcName(String pcName) {
        this.pcName = pcName;
        return this;
    }
    
    /**
     * Participant record?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording")
    public Boolean recording;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withRecording(Boolean recording) {
        this.recording = recording;
        return this;
    }
    
    /**
     * Unique identifier of the registrant. This field is only returned if you entered "registrant_id" as the value of `include_fields` query parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrant_id")
    public String registrantId;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withRegistrantId(String registrantId) {
        this.registrantId = registrantId;
        return this;
    }
    
    /**
     * Screen share quality of the participant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("screen_share_quality")
    public DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnum screenShareQuality;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withScreenShareQuality(DashboardWebinarParticipants200ApplicationJSONParticipantsScreenShareQualityEnum screenShareQuality) {
        this.screenShareQuality = screenShareQuality;
        return this;
    }
    
    /**
     * Did the participant share an application?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("share_application")
    public Boolean shareApplication;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withShareApplication(Boolean shareApplication) {
        this.shareApplication = shareApplication;
        return this;
    }
    
    /**
     * Did the participant share their desktop?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("share_desktop")
    public Boolean shareDesktop;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withShareDesktop(Boolean shareDesktop) {
        this.shareDesktop = shareDesktop;
        return this;
    }
    
    /**
     * Did the participant share their whiteboard?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("share_whiteboard")
    public Boolean shareWhiteboard;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withShareWhiteboard(Boolean shareWhiteboard) {
        this.shareWhiteboard = shareWhiteboard;
        return this;
    }
    
    /**
     * Participant speaker.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("speaker")
    public String speaker;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withSpeaker(String speaker) {
        this.speaker = speaker;
        return this;
    }
    
    /**
     * Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public String userId;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * Participant display name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_name")
    public String userName;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withUserName(String userName) {
        this.userName = userName;
        return this;
    }
    
    /**
     * Participant version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public String version;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withVersion(String version) {
        this.version = version;
        return this;
    }
    
    /**
     * Video quality of the participant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("video_quality")
    public DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnum videoQuality;
    public DashboardWebinarParticipants200ApplicationJSONParticipants withVideoQuality(DashboardWebinarParticipants200ApplicationJSONParticipantsVideoQualityEnum videoQuality) {
        this.videoQuality = videoQuality;
        return this;
    }
    
}
