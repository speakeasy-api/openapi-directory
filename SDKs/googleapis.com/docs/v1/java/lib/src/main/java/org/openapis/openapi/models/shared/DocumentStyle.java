/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DocumentStyle - The style of the document.
 */
public class DocumentStyle {
    /**
     * Represents the background of a document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("background")
    public Background background;

    public DocumentStyle withBackground(Background background) {
        this.background = background;
        return this;
    }
    
    /**
     * The ID of the default footer. If not set, there's no default footer. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultFooterId")
    public String defaultFooterId;

    public DocumentStyle withDefaultFooterId(String defaultFooterId) {
        this.defaultFooterId = defaultFooterId;
        return this;
    }
    
    /**
     * The ID of the default header. If not set, there's no default header. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultHeaderId")
    public String defaultHeaderId;

    public DocumentStyle withDefaultHeaderId(String defaultHeaderId) {
        this.defaultHeaderId = defaultHeaderId;
        return this;
    }
    
    /**
     * The ID of the footer used only for even pages. The value of use_even_page_header_footer determines whether to use the default_footer_id or this value for the footer on even pages. If not set, there's no even page footer. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("evenPageFooterId")
    public String evenPageFooterId;

    public DocumentStyle withEvenPageFooterId(String evenPageFooterId) {
        this.evenPageFooterId = evenPageFooterId;
        return this;
    }
    
    /**
     * The ID of the header used only for even pages. The value of use_even_page_header_footer determines whether to use the default_header_id or this value for the header on even pages. If not set, there's no even page header. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("evenPageHeaderId")
    public String evenPageHeaderId;

    public DocumentStyle withEvenPageHeaderId(String evenPageHeaderId) {
        this.evenPageHeaderId = evenPageHeaderId;
        return this;
    }
    
    /**
     * The ID of the footer used only for the first page. If not set then a unique footer for the first page does not exist. The value of use_first_page_header_footer determines whether to use the default_footer_id or this value for the footer on the first page. If not set, there's no first page footer. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstPageFooterId")
    public String firstPageFooterId;

    public DocumentStyle withFirstPageFooterId(String firstPageFooterId) {
        this.firstPageFooterId = firstPageFooterId;
        return this;
    }
    
    /**
     * The ID of the header used only for the first page. If not set then a unique header for the first page does not exist. The value of use_first_page_header_footer determines whether to use the default_header_id or this value for the header on the first page. If not set, there's no first page header. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstPageHeaderId")
    public String firstPageHeaderId;

    public DocumentStyle withFirstPageHeaderId(String firstPageHeaderId) {
        this.firstPageHeaderId = firstPageHeaderId;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marginBottom")
    public Dimension marginBottom;

    public DocumentStyle withMarginBottom(Dimension marginBottom) {
        this.marginBottom = marginBottom;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marginFooter")
    public Dimension marginFooter;

    public DocumentStyle withMarginFooter(Dimension marginFooter) {
        this.marginFooter = marginFooter;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marginHeader")
    public Dimension marginHeader;

    public DocumentStyle withMarginHeader(Dimension marginHeader) {
        this.marginHeader = marginHeader;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marginLeft")
    public Dimension marginLeft;

    public DocumentStyle withMarginLeft(Dimension marginLeft) {
        this.marginLeft = marginLeft;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marginRight")
    public Dimension marginRight;

    public DocumentStyle withMarginRight(Dimension marginRight) {
        this.marginRight = marginRight;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marginTop")
    public Dimension marginTop;

    public DocumentStyle withMarginTop(Dimension marginTop) {
        this.marginTop = marginTop;
        return this;
    }
    
    /**
     * The page number from which to start counting the number of pages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageNumberStart")
    public Integer pageNumberStart;

    public DocumentStyle withPageNumberStart(Integer pageNumberStart) {
        this.pageNumberStart = pageNumberStart;
        return this;
    }
    
    /**
     * A width and height.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageSize")
    public Size pageSize;

    public DocumentStyle withPageSize(Size pageSize) {
        this.pageSize = pageSize;
        return this;
    }
    
    /**
     * Indicates whether DocumentStyle margin_header, SectionStyle margin_header and DocumentStyle margin_footer, SectionStyle margin_footer are respected. When false, the default values in the Docs editor for header and footer margin are used. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useCustomHeaderFooterMargins")
    public Boolean useCustomHeaderFooterMargins;

    public DocumentStyle withUseCustomHeaderFooterMargins(Boolean useCustomHeaderFooterMargins) {
        this.useCustomHeaderFooterMargins = useCustomHeaderFooterMargins;
        return this;
    }
    
    /**
     * Indicates whether to use the even page header / footer IDs for the even pages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useEvenPageHeaderFooter")
    public Boolean useEvenPageHeaderFooter;

    public DocumentStyle withUseEvenPageHeaderFooter(Boolean useEvenPageHeaderFooter) {
        this.useEvenPageHeaderFooter = useEvenPageHeaderFooter;
        return this;
    }
    
    /**
     * Indicates whether to use the first page header / footer IDs for the first page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useFirstPageHeaderFooter")
    public Boolean useFirstPageHeaderFooter;

    public DocumentStyle withUseFirstPageHeaderFooter(Boolean useFirstPageHeaderFooter) {
        this.useFirstPageHeaderFooter = useFirstPageHeaderFooter;
        return this;
    }
    
    public DocumentStyle(){}
}
