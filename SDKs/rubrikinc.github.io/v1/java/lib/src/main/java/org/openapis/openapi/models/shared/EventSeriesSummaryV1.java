/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * EventSeriesSummaryV1 - Returns the list of events by event series ID and a summary of the event series.
 */
public class EventSeriesSummaryV1 {
    /**
     * The name of the archive target related to the archival task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archiveTargetName")
    public String archiveTargetName;

    public EventSeriesSummaryV1 withArchiveTargetName(String archiveTargetName) {
        this.archiveTargetName = archiveTargetName;
        return this;
    }
    
    /**
     * The amount of data the job corresponding to the event needs to transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataToTransfer")
    public Long dataToTransfer;

    public EventSeriesSummaryV1 withDataToTransfer(Long dataToTransfer) {
        this.dataToTransfer = dataToTransfer;
        return this;
    }
    
    /**
     * The total amount of data that has been transferred by the event or job to date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataTransferred")
    public Long dataTransferred;

    public EventSeriesSummaryV1 withDataTransferred(Long dataTransferred) {
        this.dataTransferred = dataTransferred;
        return this;
    }
    
    /**
     * The current run time of the job that corresponds to the event series. For completed jobs, this time is equal to the total run time of the job (endTime - startTime). For an in-progress job, this time is equal to the Current Time minus the startTime. This field is empty for event series that do not correspond to a job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public String duration;

    public EventSeriesSummaryV1 withDuration(String duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * For event series that correspond to a job, the time when the job finished. For a completed event series, the time of the last event in the series. This field is empty for jobs that have not completed or for event series that do not correspond to a job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endTime")
    public OffsetDateTime endTime;

    public EventSeriesSummaryV1 withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * The estimated time remaining of the job that corresponds to the event series. This field is empty for event series that do not correspond to a job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("estimatedTimeRemaining")
    public String estimatedTimeRemaining;

    public EventSeriesSummaryV1 withEstimatedTimeRemaining(String estimatedTimeRemaining) {
        this.estimatedTimeRemaining = estimatedTimeRemaining;
        return this;
    }
    
    /**
     * List of the events in the event series.
     */
    @JsonProperty("eventDetailList")
    public EventSummaryV1[] eventDetailList;

    public EventSeriesSummaryV1 withEventDetailList(EventSummaryV1[] eventDetailList) {
        this.eventDetailList = eventDetailList;
        return this;
    }
    
    /**
     * The ID of event series.
     */
    @JsonProperty("eventSeriesId")
    public String eventSeriesId;

    public EventSeriesSummaryV1 withEventSeriesId(String eventSeriesId) {
        this.eventSeriesId = eventSeriesId;
        return this;
    }
    
    /**
     * Status of an event series.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventSeriesStatus")
    public EventSeriesStatusV1Enum eventSeriesStatus;

    public EventSeriesSummaryV1 withEventSeriesStatus(EventSeriesStatusV1Enum eventSeriesStatus) {
        this.eventSeriesStatus = eventSeriesStatus;
        return this;
    }
    
    /**
     * A Boolean value that specifies whether the event series is linked to a job on the backend. When this value is 'true,' the event series is linked to a job on the backend. When this value is 'false,' the event series is not linked to a job on the backend.
     */
    @JsonProperty("hasJob")
    public Boolean hasJob;

    public EventSeriesSummaryV1 withHasJob(Boolean hasJob) {
        this.hasJob = hasJob;
        return this;
    }
    
    /**
     * A Boolean value that determines whether the job associated with the event is a first full snapshot backup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFirstFullSnapshot")
    public Boolean isFirstFullSnapshot;

    public EventSeriesSummaryV1 withIsFirstFullSnapshot(Boolean isFirstFullSnapshot) {
        this.isFirstFullSnapshot = isFirstFullSnapshot;
        return this;
    }
    
    /**
     * Boolean value of true indicates an on demand job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isOnDemand")
    public Boolean isOnDemand;

    public EventSeriesSummaryV1 withIsOnDemand(Boolean isOnDemand) {
        this.isOnDemand = isOnDemand;
        return this;
    }
    
    /**
     * Boolean that indicates whether an SLA Domain is Retention Locked. When the value is true the SLA Domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isSlaRetentionLocked")
    public Boolean isSlaRetentionLocked;

    public EventSeriesSummaryV1 withIsSlaRetentionLocked(Boolean isSlaRetentionLocked) {
        this.isSlaRetentionLocked = isSlaRetentionLocked;
        return this;
    }
    
    /**
     * The host of the object associated with the latest event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;

    public EventSeriesSummaryV1 withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * The logical size of the object related to the event series.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logicalSize")
    public Long logicalSize;

    public EventSeriesSummaryV1 withLogicalSize(Long logicalSize) {
        this.logicalSize = logicalSize;
        return this;
    }
    
    /**
     * The IDs of the nodes where the job associated with the event is running.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeIds")
    public String nodeIds;

    public EventSeriesSummaryV1 withNodeIds(String nodeIds) {
        this.nodeIds = nodeIds;
        return this;
    }
    
    /**
     * The number of times the job has been retried.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfRetries")
    public Long numberOfRetries;

    public EventSeriesSummaryV1 withNumberOfRetries(Long numberOfRetries) {
        this.numberOfRetries = numberOfRetries;
        return this;
    }
    
    /**
     * The ID of the object associated with the latest event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectId")
    public String objectId;

    public EventSeriesSummaryV1 withObjectId(String objectId) {
        this.objectId = objectId;
        return this;
    }
    
    /**
     * The name of the object associated with the latest event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectName")
    public String objectName;

    public EventSeriesSummaryV1 withObjectName(String objectName) {
        this.objectName = objectName;
        return this;
    }
    
    /**
     * Type of the object associated with the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectType")
    public ObjectTypeV1Enum objectType;

    public EventSeriesSummaryV1 withObjectType(ObjectTypeV1Enum objectType) {
        this.objectType = objectType;
        return this;
    }
    
    /**
     * The progress percentage of the event series.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("progressPercentage")
    public String progressPercentage;

    public EventSeriesSummaryV1 withProgressPercentage(String progressPercentage) {
        this.progressPercentage = progressPercentage;
        return this;
    }
    
    /**
     * The name of the remote cluster related to the replication task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remoteClusterName")
    public String remoteClusterName;

    public EventSeriesSummaryV1 withRemoteClusterName(String remoteClusterName) {
        this.remoteClusterName = remoteClusterName;
        return this;
    }
    
    /**
     * The ID of the SLA Domain associated with this job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slaId")
    public String slaId;

    public EventSeriesSummaryV1 withSlaId(String slaId) {
        this.slaId = slaId;
        return this;
    }
    
    /**
     * The name of the SLA Domain associated with the job, if any. This field is empty for jobs that are not driven by a SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slaName")
    public String slaName;

    public EventSeriesSummaryV1 withSlaName(String slaName) {
        this.slaName = slaName;
        return this;
    }
    
    /**
     * The time when the job started. Only applicable to the event series that correspond to a job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;

    public EventSeriesSummaryV1 withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Status of an event.
     */
    @JsonProperty("status")
    public EventStatusV1Enum status;

    public EventSeriesSummaryV1 withStatus(EventStatusV1Enum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Type of the event series. Matches the event type.
     * 
     */
    @JsonProperty("taskType")
    public String taskType;

    public EventSeriesSummaryV1 withTaskType(String taskType) {
        this.taskType = taskType;
        return this;
    }
    
    /**
     * The average rate of data transfer, measured in bytes per second. This rate is the total amount of data transferred divided by the total time required by the transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("throughput")
    public Long throughput;

    public EventSeriesSummaryV1 withThroughput(Long throughput) {
        this.throughput = throughput;
        return this;
    }
    
    /**
     * The username of the user-initiated job. This field is empty for jobs that are not user-initiated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;

    public EventSeriesSummaryV1 withUsername(String username) {
        this.username = username;
        return this;
    }
    
    public EventSeriesSummaryV1(@JsonProperty("eventDetailList") EventSummaryV1[] eventDetailList, @JsonProperty("eventSeriesId") String eventSeriesId, @JsonProperty("hasJob") Boolean hasJob, @JsonProperty("status") EventStatusV1Enum status, @JsonProperty("taskType") String taskType) {
        this.eventDetailList = eventDetailList;
        this.eventSeriesId = eventSeriesId;
        this.hasJob = hasJob;
        this.status = status;
        this.taskType = taskType;
  }
}
