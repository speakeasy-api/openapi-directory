/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { OBRisk1 } from "./obrisk1";
import { OBSCASupportData1 } from "./obscasupportdata1";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Type of authorisation flow requested.
 */
export enum OBWriteDomesticStandingOrderConsent5DataAuthorisationAuthorisationTypeEnum {
  Any = "Any",
  Single = "Single",
}

/**
 * The authorisation type request from the TPP.
 */
export class OBWriteDomesticStandingOrderConsent5DataAuthorisation extends SpeakeasyBase {
  /**
   * Type of authorisation flow requested.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AuthorisationType" })
  authorisationType: OBWriteDomesticStandingOrderConsent5DataAuthorisationAuthorisationTypeEnum;

  /**
   * Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format.
   *
   * @remarks
   * All date-time fields in responses must include the timezone. An example is below:
   * 2017-04-05T10:43:07+00:00
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CompletionDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  completionDateTime?: Date;
}

/**
 * Identification assigned by an institution to identify an account. This identification is known by the account owner.
 */
export class OBWriteDomesticStandingOrderConsent5DataInitiationCreditorAccount extends SpeakeasyBase {
  /**
   * Identification assigned by an institution to identify an account. This identification is known by the account owner.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Identification" })
  identification: string;

  /**
   * The account name is the name or names of the account owner(s) represented at an account level.
   *
   * @remarks
   * Note, the account name is not the product name or the nickname of the account.
   * OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  /**
   * Name of the identification scheme, in a coded form as published in an external list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SchemeName" })
  schemeName: string;

  /**
   * This is secondary identification of the account, as assigned by the account servicing institution.
   *
   * @remarks
   * This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SecondaryIdentification" })
  secondaryIdentification?: string;
}

/**
 * Provides the details to identify the debtor account.
 */
export class OBWriteDomesticStandingOrderConsent5DataInitiationDebtorAccount extends SpeakeasyBase {
  /**
   * Identification assigned by an institution to identify an account. This identification is known by the account owner.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Identification" })
  identification: string;

  /**
   * The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
   *
   * @remarks
   * Note, the account name is not the product name or the nickname of the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  /**
   * Name of the identification scheme, in a coded form as published in an external list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SchemeName" })
  schemeName: string;

  /**
   * This is secondary identification of the account, as assigned by the account servicing institution.
   *
   * @remarks
   * This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SecondaryIdentification" })
  secondaryIdentification?: string;
}

/**
 * The amount of the final Standing Order
 */
export class OBWriteDomesticStandingOrderConsent5DataInitiationFinalPaymentAmount extends SpeakeasyBase {
  /**
   * A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Amount" })
  amount: string;

  /**
   * A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Currency" })
  currency: string;
}

/**
 * The amount of the first Standing Order
 */
export class OBWriteDomesticStandingOrderConsent5DataInitiationFirstPaymentAmount extends SpeakeasyBase {
  /**
   * A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Amount" })
  amount: string;

  /**
   * A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Currency" })
  currency: string;
}

/**
 * The amount of the recurring Standing Order
 */
export class OBWriteDomesticStandingOrderConsent5DataInitiationRecurringPaymentAmount extends SpeakeasyBase {
  /**
   * A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Amount" })
  amount: string;

  /**
   * A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Currency" })
  currency: string;
}

/**
 * The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.
 */
export class OBWriteDomesticStandingOrderConsent5DataInitiation extends SpeakeasyBase {
  /**
   * Identification assigned by an institution to identify an account. This identification is known by the account owner.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CreditorAccount" })
  @Type(() => OBWriteDomesticStandingOrderConsent5DataInitiationCreditorAccount)
  creditorAccount: OBWriteDomesticStandingOrderConsent5DataInitiationCreditorAccount;

  /**
   * Provides the details to identify the debtor account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DebtorAccount" })
  @Type(() => OBWriteDomesticStandingOrderConsent5DataInitiationDebtorAccount)
  debtorAccount?: OBWriteDomesticStandingOrderConsent5DataInitiationDebtorAccount;

  /**
   * The amount of the final Standing Order
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FinalPaymentAmount" })
  @Type(
    () => OBWriteDomesticStandingOrderConsent5DataInitiationFinalPaymentAmount
  )
  finalPaymentAmount?: OBWriteDomesticStandingOrderConsent5DataInitiationFinalPaymentAmount;

  /**
   * The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
   *
   * @remarks
   * All date-time fields in responses must include the timezone. An example is below:
   * 2017-04-05T10:43:07+00:00
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FinalPaymentDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  finalPaymentDateTime?: Date;

  /**
   * The amount of the first Standing Order
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FirstPaymentAmount" })
  @Type(
    () => OBWriteDomesticStandingOrderConsent5DataInitiationFirstPaymentAmount
  )
  firstPaymentAmount: OBWriteDomesticStandingOrderConsent5DataInitiationFirstPaymentAmount;

  /**
   * The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
   *
   * @remarks
   * All date-time fields in responses must include the timezone. An example is below:
   * 2017-04-05T10:43:07+00:00
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FirstPaymentDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  firstPaymentDateTime: Date;

  /**
   * Individual Definitions:
   *
   * @remarks
   * EvryDay - Every day
   * EvryWorkgDay - Every working day
   * IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
   * WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
   * IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)
   * QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED).
   * ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December.
   * SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
   * RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December.
   * Individual Patterns:
   * EvryDay (ScheduleCode)
   * EvryWorkgDay (ScheduleCode)
   * IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
   * WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
   * IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
   * QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
   * The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
   * EvryDay
   * EvryWorkgDay
   * IntrvlWkDay:0[1-9]:0[1-7]
   * WkInMnthDay:0[1-5]:0[1-7]
   * IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
   * QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
   * Full Regular Expression:
   * ^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Frequency" })
  frequency: string;

  /**
   * Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NumberOfPayments" })
  numberOfPayments?: string;

  /**
   * The amount of the recurring Standing Order
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RecurringPaymentAmount" })
  @Type(
    () =>
      OBWriteDomesticStandingOrderConsent5DataInitiationRecurringPaymentAmount
  )
  recurringPaymentAmount?: OBWriteDomesticStandingOrderConsent5DataInitiationRecurringPaymentAmount;

  /**
   * The date on which the first recurring payment for a Standing Order schedule will be made.
   *
   * @remarks
   * Usage: This must be populated only if the first recurring date is different to the first payment date.All dates in the JSON payloads are represented in ISO 8601 date-time format.
   * All date-time fields in responses must include the timezone. An example is below:
   * 2017-04-05T10:43:07+00:00
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RecurringPaymentDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  recurringPaymentDateTime?: Date;

  /**
   * Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
   *
   * @remarks
   * Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
   * If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Reference" })
  reference?: string;

  /**
   * Additional information that can not be captured in the structured fields and/or any other specific block.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SupplementaryData" })
  supplementaryData?: Record<string, any>;
}

/**
 * Specifies the Open Banking service request types.
 */
export enum OBWriteDomesticStandingOrderConsent5DataPermissionEnum {
  Create = "Create",
}

/**
 * Specifies to share the refund account details with PISP
 */
export enum OBWriteDomesticStandingOrderConsent5DataReadRefundAccountEnum {
  No = "No",
  Yes = "Yes",
}

export class OBWriteDomesticStandingOrderConsent5Data extends SpeakeasyBase {
  /**
   * The authorisation type request from the TPP.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Authorisation" })
  @Type(() => OBWriteDomesticStandingOrderConsent5DataAuthorisation)
  authorisation?: OBWriteDomesticStandingOrderConsent5DataAuthorisation;

  /**
   * The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Initiation" })
  @Type(() => OBWriteDomesticStandingOrderConsent5DataInitiation)
  initiation: OBWriteDomesticStandingOrderConsent5DataInitiation;

  /**
   * Specifies the Open Banking service request types.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Permission" })
  permission: OBWriteDomesticStandingOrderConsent5DataPermissionEnum;

  /**
   * Specifies to share the refund account details with PISP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ReadRefundAccount" })
  readRefundAccount?: OBWriteDomesticStandingOrderConsent5DataReadRefundAccountEnum;

  /**
   * Supporting Data provided by TPP, when requesting SCA Exemption.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SCASupportData" })
  @Type(() => OBSCASupportData1)
  scaSupportData?: OBSCASupportData1;
}

export class OBWriteDomesticStandingOrderConsent5 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Data" })
  @Type(() => OBWriteDomesticStandingOrderConsent5Data)
  data: OBWriteDomesticStandingOrderConsent5Data;

  /**
   * The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Risk" })
  @Type(() => OBRisk1)
  risk: OBRisk1;
}
