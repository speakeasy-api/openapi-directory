/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MssqlLogShippingCreateConfig - Object containing the values of a log shipping configuration.
 */
public class MssqlLogShippingCreateConfig {
    /**
     * Maximum number of parallel data streams that can be used to copy data to the target system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxDataStreams")
    public Integer maxDataStreams;

    public MssqlLogShippingCreateConfig withMaxDataStreams(Integer maxDataStreams) {
        this.maxDataStreams = maxDataStreams;
        return this;
    }
    
    /**
     * Specifies whether to automatically disconnect users from a secondary database in standby mode when a restore operation is performed. If this value is set to false and users remain connected, any scheduled restore operations fail. If the "state" field is `RESTORING`, this value can be omitted and is ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shouldDisconnectStandbyUsers")
    public Boolean shouldDisconnectStandbyUsers;

    public MssqlLogShippingCreateConfig withShouldDisconnectStandbyUsers(Boolean shouldDisconnectStandbyUsers) {
        this.shouldDisconnectStandbyUsers = shouldDisconnectStandbyUsers;
        return this;
    }
    
    /**
     * Secondary database states for log shipping configurations with a status of OK.
     */
    @JsonProperty("state")
    public MssqlLogShippingOkStateEnum state;

    public MssqlLogShippingCreateConfig withState(MssqlLogShippingOkStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * The path to the default target location for data file storage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetDataFilePath")
    public String targetDataFilePath;

    public MssqlLogShippingCreateConfig withTargetDataFilePath(String targetDataFilePath) {
        this.targetDataFilePath = targetDataFilePath;
        return this;
    }
    
    /**
     * The name of the secondary database.
     */
    @JsonProperty("targetDatabaseName")
    public String targetDatabaseName;

    public MssqlLogShippingCreateConfig withTargetDatabaseName(String targetDatabaseName) {
        this.targetDatabaseName = targetDatabaseName;
        return this;
    }
    
    /**
     * Array of database file storage paths. Each path is the target storage location for a database file. Values in this array override the values in targetDataFilePath and targetLogFilePath for the specified database files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetFilePaths")
    public MssqlDbFileExportPath[] targetFilePaths;

    public MssqlLogShippingCreateConfig withTargetFilePaths(MssqlDbFileExportPath[] targetFilePaths) {
        this.targetFilePaths = targetFilePaths;
        return this;
    }
    
    /**
     * The ID of the SQL Server instance that hosts the secondary database.
     */
    @JsonProperty("targetInstanceId")
    public String targetInstanceId;

    public MssqlLogShippingCreateConfig withTargetInstanceId(String targetInstanceId) {
        this.targetInstanceId = targetInstanceId;
        return this;
    }
    
    /**
     * The path to the location of the log files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetLogFilePath")
    public String targetLogFilePath;

    public MssqlLogShippingCreateConfig withTargetLogFilePath(String targetLogFilePath) {
        this.targetLogFilePath = targetLogFilePath;
        return this;
    }
    
    public MssqlLogShippingCreateConfig(@JsonProperty("state") MssqlLogShippingOkStateEnum state, @JsonProperty("targetDatabaseName") String targetDatabaseName, @JsonProperty("targetInstanceId") String targetInstanceId) {
        this.state = state;
        this.targetDatabaseName = targetDatabaseName;
        this.targetInstanceId = targetInstanceId;
  }
}
