"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

SERVERS = [
    "http://localhost:5000",
    "https://apispot.io/api",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Domain API (WHOIS, Check, Batch)"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def check_domain(self, request: operations.CheckDomainRequest) -> operations.CheckDomainResponse:
        r"""Check domain availability"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CheckDomainRequest, base_url, '/domains/{domain}/check', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckDomainResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CheckDomain200ApplicationJSON])
                res.check_domain_200_application_json_object = out

        return res

    def create_batch(self, request: operations.CreateBatchRequestBody) -> operations.CreateBatchResponse:
        r"""Create batch. Batch is then being processed until all provided items have been completed. At any time it can be `get` to provide current status with results optionally."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Batch])
                res.batch = out

        return res

    def delete_batch(self, request: operations.DeleteBatchRequest) -> operations.DeleteBatchResponse:
        r"""Delete batch"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteBatchRequest, base_url, '/batch/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def domain_rank(self, request: operations.DomainRankRequest) -> operations.DomainRankResponse:
        r"""Check domain rank (authority)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DomainRankRequest, base_url, '/domains/{domain}/rank', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DomainRankResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DomainRank200ApplicationJSON])
                res.domain_rank_200_application_json_object = out

        return res

    def get_batch(self, request: operations.GetBatchRequest) -> operations.GetBatchResponse:
        r"""Get batch"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBatchRequest, base_url, '/batch/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Batch])
                res.batch = out

        return res

    def get_batches(self) -> operations.GetBatchesResponse:
        r"""Get your batches"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/batch'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBatchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ArrayOfBatch])
                res.array_of_batch = out

        return res

    def query_db(self, request: operations.QueryDbRequest) -> operations.QueryDbResponse:
        r"""Query domain database"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/db'
        
        query_params = utils.get_query_params(operations.QueryDbRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.QueryDbResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.query_db_200_application_json_object = out

        return res

    def whois(self, request: operations.WhoisRequest) -> operations.WhoisResponse:
        r"""WHOIS query for a domain"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WhoisRequest, base_url, '/domains/{domain}/whois', request)
        
        query_params = utils.get_query_params(operations.WhoisRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WhoisResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    