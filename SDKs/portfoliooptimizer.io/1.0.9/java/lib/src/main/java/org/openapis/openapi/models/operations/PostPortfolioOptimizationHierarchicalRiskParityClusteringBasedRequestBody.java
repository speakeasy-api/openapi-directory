/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody {
    /**
     * The allocation method to use across clusters
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acrossClusterAllocationMethod")
    public PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum acrossClusterAllocationMethod;

    public PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody withAcrossClusterAllocationMethod(PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum acrossClusterAllocationMethod) {
        this.acrossClusterAllocationMethod = acrossClusterAllocationMethod;
        return this;
    }
    
    /**
     * The number of assets
     */
    @JsonProperty("assets")
    public Long assets;

    public PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody withAssets(Long assets) {
        this.assets = assets;
        return this;
    }
    
    /**
     * assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j
     */
    @JsonProperty("assetsCovarianceMatrix")
    public Double[][] assetsCovarianceMatrix;

    public PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody withAssetsCovarianceMatrix(Double[][] assetsCovarianceMatrix) {
        this.assetsCovarianceMatrix = assetsCovarianceMatrix;
        return this;
    }
    
    /**
     * The hierarchical clustering method to use
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clusteringMethod")
    public PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum clusteringMethod;

    public PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody withClusteringMethod(PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum clusteringMethod) {
        this.clusteringMethod = clusteringMethod;
        return this;
    }
    
    /**
     * The order to impose on the hierarchical clustering tree leaves
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clusteringOrdering")
    public PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnum clusteringOrdering;

    public PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody withClusteringOrdering(PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnum clusteringOrdering) {
        this.clusteringOrdering = clusteringOrdering;
        return this;
    }
    
    /**
     * The number of clusters to use in the hierarchical clustering tree; if not provided, the number of clusters to use is computed using the gap statistic method, as described in the first reference
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clusters")
    public Long clusters;

    public PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody withClusters(Long clusters) {
        this.clusters = clusters;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("constraints")
    public PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyConstraints constraints;

    public PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody withConstraints(PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyConstraints constraints) {
        this.constraints = constraints;
        return this;
    }
    
    /**
     * The allocation method to use within clusters
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withinClusterAllocationMethod")
    public PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum withinClusterAllocationMethod;

    public PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody withWithinClusterAllocationMethod(PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum withinClusterAllocationMethod) {
        this.withinClusterAllocationMethod = withinClusterAllocationMethod;
        return this;
    }
    
    public PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody(@JsonProperty("assets") Long assets, @JsonProperty("assetsCovarianceMatrix") Double[][] assetsCovarianceMatrix) {
        this.assets = assets;
        this.assetsCovarianceMatrix = assetsCovarianceMatrix;
  }
}
