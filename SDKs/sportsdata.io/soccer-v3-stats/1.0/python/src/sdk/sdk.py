"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "http://azure-api.sportsdata.io/v3/soccer/stats",
    "https://azure-api.sportsdata.io/v3/soccer/stats",
]
"""Contains the list of servers available to the SDK"""

class SDK:

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def areas_countries(self, request: operations.AreasCountriesRequest) -> operations.AreasCountriesResponse:
        r"""Areas (Countries)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AreasCountriesRequest, base_url, '/{format}/Areas', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AreasCountriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Area]])
                res.areas = out

        return res

    def box_score(self, request: operations.BoxScoreRequest) -> operations.BoxScoreResponse:
        r"""Box Score"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BoxScoreRequest, base_url, '/{format}/BoxScore/{gameid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BoxScoreResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BoxScore])
                res.box_score = out

        return res

    def box_scores_by_date(self, request: operations.BoxScoresByDateRequest) -> operations.BoxScoresByDateResponse:
        r"""Box Scores by Date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BoxScoresByDateRequest, base_url, '/{format}/BoxScores/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BoxScoresByDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BoxScore]])
                res.box_scores = out

        return res

    def box_scores_by_date_by_competition(self, request: operations.BoxScoresByDateByCompetitionRequest) -> operations.BoxScoresByDateByCompetitionResponse:
        r"""Box Scores by Date by Competition"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BoxScoresByDateByCompetitionRequest, base_url, '/{format}/BoxScoresByCompetition/{competition}/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BoxScoresByDateByCompetitionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BoxScore]])
                res.box_scores = out

        return res

    def box_scores_by_date_delta(self, request: operations.BoxScoresByDateDeltaRequest) -> operations.BoxScoresByDateDeltaResponse:
        r"""Box Scores by Date Delta"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BoxScoresByDateDeltaRequest, base_url, '/{format}/BoxScoresDelta/{date}/{minutes}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BoxScoresByDateDeltaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BoxScore]])
                res.box_scores = out

        return res

    def box_scores_delta_by_date_by_competition(self, request: operations.BoxScoresDeltaByDateByCompetitionRequest) -> operations.BoxScoresDeltaByDateByCompetitionResponse:
        r"""Box Scores Delta by Date by Competition"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BoxScoresDeltaByDateByCompetitionRequest, base_url, '/{format}/BoxScoresDeltaByCompetition/{competition}/{date}/{minutes}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BoxScoresDeltaByDateByCompetitionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BoxScore]])
                res.box_scores = out

        return res

    def competition_fixtures_league_details(self, request: operations.CompetitionFixturesLeagueDetailsRequest) -> operations.CompetitionFixturesLeagueDetailsResponse:
        r"""Competition Fixtures (League Details)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompetitionFixturesLeagueDetailsRequest, base_url, '/{format}/CompetitionDetails/{competition}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompetitionFixturesLeagueDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompetitionDetail])
                res.competition_detail = out

        return res

    def competition_hierarchy_league_hierarchy(self, request: operations.CompetitionHierarchyLeagueHierarchyRequest) -> operations.CompetitionHierarchyLeagueHierarchyResponse:
        r"""Competition Hierarchy (League Hierarchy)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompetitionHierarchyLeagueHierarchyRequest, base_url, '/{format}/CompetitionHierarchy', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompetitionHierarchyLeagueHierarchyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Area]])
                res.areas = out

        return res

    def competitions_leagues(self, request: operations.CompetitionsLeaguesRequest) -> operations.CompetitionsLeaguesResponse:
        r"""Competitions (Leagues)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompetitionsLeaguesRequest, base_url, '/{format}/Competitions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompetitionsLeaguesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Competition]])
                res.competitions = out

        return res

    def dfs_slates_by_date(self, request: operations.DfsSlatesByDateRequest) -> operations.DfsSlatesByDateResponse:
        r"""Dfs Slates By Date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfsSlatesByDateRequest, base_url, '/{format}/DfsSlatesByDate/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfsSlatesByDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DfsSlate]])
                res.dfs_slates = out

        return res

    def games_by_date(self, request: operations.GamesByDateRequest) -> operations.GamesByDateResponse:
        r"""Games by Date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesByDateRequest, base_url, '/{format}/GamesByDate/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesByDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Game]])
                res.games = out

        return res

    def memberships_active(self, request: operations.MembershipsActiveRequest) -> operations.MembershipsActiveResponse:
        r"""Memberships (Active)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MembershipsActiveRequest, base_url, '/{format}/ActiveMemberships', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MembershipsActiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Membership]])
                res.memberships = out

        return res

    def memberships_by_competition_active(self, request: operations.MembershipsByCompetitionActiveRequest) -> operations.MembershipsByCompetitionActiveResponse:
        r"""Memberships by Competition (Active)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MembershipsByCompetitionActiveRequest, base_url, '/{format}/MembershipsByCompetition/{competition}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MembershipsByCompetitionActiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Membership]])
                res.memberships = out

        return res

    def memberships_by_competition_historical(self, request: operations.MembershipsByCompetitionHistoricalRequest) -> operations.MembershipsByCompetitionHistoricalResponse:
        r"""Memberships by Competition (Historical)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MembershipsByCompetitionHistoricalRequest, base_url, '/{format}/HistoricalMembershipsByCompetition/{competition}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MembershipsByCompetitionHistoricalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Membership]])
                res.memberships = out

        return res

    def memberships_by_team_active(self, request: operations.MembershipsByTeamActiveRequest) -> operations.MembershipsByTeamActiveResponse:
        r"""Memberships by Team (Active)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MembershipsByTeamActiveRequest, base_url, '/{format}/MembershipsByTeam/{teamid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MembershipsByTeamActiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Membership]])
                res.memberships = out

        return res

    def memberships_by_team_historical(self, request: operations.MembershipsByTeamHistoricalRequest) -> operations.MembershipsByTeamHistoricalResponse:
        r"""Memberships by Team (Historical)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MembershipsByTeamHistoricalRequest, base_url, '/{format}/HistoricalMembershipsByTeam/{teamid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MembershipsByTeamHistoricalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Membership]])
                res.memberships = out

        return res

    def memberships_historical(self, request: operations.MembershipsHistoricalRequest) -> operations.MembershipsHistoricalResponse:
        r"""Memberships (Historical)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MembershipsHistoricalRequest, base_url, '/{format}/HistoricalMemberships', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MembershipsHistoricalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Membership]])
                res.memberships = out

        return res

    def memberships_recently_changed(self, request: operations.MembershipsRecentlyChangedRequest) -> operations.MembershipsRecentlyChangedResponse:
        r"""Memberships (Recently Changed)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MembershipsRecentlyChangedRequest, base_url, '/{format}/RecentlyChangedMemberships/{days}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MembershipsRecentlyChangedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Membership]])
                res.memberships = out

        return res

    def player(self, request: operations.PlayerRequest) -> operations.PlayerResponse:
        r"""Player"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerRequest, base_url, '/{format}/Player/{playerid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Player])
                res.player = out

        return res

    def player_game_stats_by_date(self, request: operations.PlayerGameStatsByDateRequest) -> operations.PlayerGameStatsByDateResponse:
        r"""Player Game Stats by Date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerGameStatsByDateRequest, base_url, '/{format}/PlayerGameStatsByDate/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerGameStatsByDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerGame]])
                res.player_games = out

        return res

    def player_game_stats_by_player(self, request: operations.PlayerGameStatsByPlayerRequest) -> operations.PlayerGameStatsByPlayerResponse:
        r"""Player Game Stats by Player"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerGameStatsByPlayerRequest, base_url, '/{format}/PlayerGameStatsByPlayer/{date}/{playerid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerGameStatsByPlayerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerGame]])
                res.player_games = out

        return res

    def player_season_stats(self, request: operations.PlayerSeasonStatsRequest) -> operations.PlayerSeasonStatsResponse:
        r"""Player Season Stats"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerSeasonStatsRequest, base_url, '/{format}/PlayerSeasonStats/{roundid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerSeasonStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerSeason]])
                res.player_seasons = out

        return res

    def player_season_stats_by_player(self, request: operations.PlayerSeasonStatsByPlayerRequest) -> operations.PlayerSeasonStatsByPlayerResponse:
        r"""Player Season Stats by Player"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerSeasonStatsByPlayerRequest, base_url, '/{format}/PlayerSeasonStatsByPlayer/{roundid}/{playerid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerSeasonStatsByPlayerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerSeason]])
                res.player_seasons = out

        return res

    def player_season_stats_by_team(self, request: operations.PlayerSeasonStatsByTeamRequest) -> operations.PlayerSeasonStatsByTeamResponse:
        r"""Player Season Stats by Team"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerSeasonStatsByTeamRequest, base_url, '/{format}/PlayerSeasonStatsByTeam/{roundid}/{team}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerSeasonStatsByTeamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerSeason]])
                res.player_seasons = out

        return res

    def players(self, request: operations.PlayersRequest) -> operations.PlayersResponse:
        r"""Players"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayersRequest, base_url, '/{format}/Players', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Player]])
                res.players = out

        return res

    def players_by_team(self, request: operations.PlayersByTeamRequest) -> operations.PlayersByTeamResponse:
        r"""Players by Team"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayersByTeamRequest, base_url, '/{format}/PlayersByTeam/{teamid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayersByTeamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Player]])
                res.players = out

        return res

    def schedule(self, request: operations.ScheduleRequest) -> operations.ScheduleResponse:
        r"""Schedule"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScheduleRequest, base_url, '/{format}/Schedule/{roundid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScheduleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Game]])
                res.games = out

        return res

    def season_teams(self, request: operations.SeasonTeamsRequest) -> operations.SeasonTeamsResponse:
        r"""Season Teams"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SeasonTeamsRequest, base_url, '/{format}/SeasonTeams/{seasonid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SeasonTeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SeasonTeam]])
                res.season_teams = out

        return res

    def standings(self, request: operations.StandingsRequest) -> operations.StandingsResponse:
        r"""Standings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StandingsRequest, base_url, '/{format}/Standings/{roundid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StandingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Standing]])
                res.standings = out

        return res

    def team_game_stats_by_date(self, request: operations.TeamGameStatsByDateRequest) -> operations.TeamGameStatsByDateResponse:
        r"""Team Game Stats by Date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamGameStatsByDateRequest, base_url, '/{format}/TeamGameStatsByDate/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamGameStatsByDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamGame]])
                res.team_games = out

        return res

    def team_season_stats(self, request: operations.TeamSeasonStatsRequest) -> operations.TeamSeasonStatsResponse:
        r"""Team Season Stats"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamSeasonStatsRequest, base_url, '/{format}/TeamSeasonStats/{roundid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamSeasonStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamSeason]])
                res.team_seasons = out

        return res

    def teams(self, request: operations.TeamsRequest) -> operations.TeamsResponse:
        r"""Teams"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamsRequest, base_url, '/{format}/Teams', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Team]])
                res.teams = out

        return res

    def upcoming_dfs_slates_by_competition(self, request: operations.UpcomingDfsSlatesByCompetitionRequest) -> operations.UpcomingDfsSlatesByCompetitionResponse:
        r"""Upcoming Dfs Slates By Competition"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpcomingDfsSlatesByCompetitionRequest, base_url, '/{format}/UpcomingDfsSlatesByCompetition/{competitionId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpcomingDfsSlatesByCompetitionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DfsSlate]])
                res.dfs_slates = out

        return res

    def upcoming_schedule_by_player(self, request: operations.UpcomingScheduleByPlayerRequest) -> operations.UpcomingScheduleByPlayerResponse:
        r"""Upcoming Schedule By Player"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpcomingScheduleByPlayerRequest, base_url, '/{format}/UpcomingScheduleByPlayer/{playerid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpcomingScheduleByPlayerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Game]])
                res.games = out

        return res

    def venues(self, request: operations.VenuesRequest) -> operations.VenuesResponse:
        r"""Venues"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.VenuesRequest, base_url, '/{format}/Venues', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VenuesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Venue]])
                res.venues = out

        return res

    