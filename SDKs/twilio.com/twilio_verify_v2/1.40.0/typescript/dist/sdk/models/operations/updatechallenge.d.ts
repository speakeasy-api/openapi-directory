import { SpeakeasyBase } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export declare const UpdateChallengeServerList: readonly ["https://verify.twilio.com"];
export declare class UpdateChallengeSecurity extends SpeakeasyBase {
    password: string;
    username: string;
}
export declare class UpdateChallengeUpdateChallengeRequest extends SpeakeasyBase {
    /**
     * The optional payload needed to verify the Challenge. E.g., a TOTP would use the numeric code. For `TOTP` this value must be between 3 and 8 characters long. For `Push` this value can be up to 5456 characters in length
     */
    authPayload?: string;
    /**
     * Custom metadata associated with the challenge. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. `{"os": "Android"}`. Can be up to 1024 characters in length.
     */
    metadata?: any;
}
export declare class UpdateChallengeRequest extends SpeakeasyBase {
    /**
     * Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     */
    identity: string;
    requestBody?: UpdateChallengeUpdateChallengeRequest;
    /**
     * The unique SID identifier of the Service.
     */
    serviceSid: string;
    /**
     * A 34 character string that uniquely identifies this Challenge.
     */
    sid: string;
}
export declare class UpdateChallengeResponse extends SpeakeasyBase {
    contentType: string;
    statusCode: number;
    rawResponse?: AxiosResponse;
    /**
     * OK
     */
    verifyV2ServiceEntityChallenge?: shared.VerifyV2ServiceEntityChallenge;
}
