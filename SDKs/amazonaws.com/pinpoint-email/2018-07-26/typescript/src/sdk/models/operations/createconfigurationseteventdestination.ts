/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
 */
export class CreateConfigurationSetEventDestinationRequestBodyEventDestination extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CloudWatchDestination" })
  @Type(() => shared.CloudWatchDestination)
  cloudWatchDestination?: shared.CloudWatchDestination;

  @SpeakeasyMetadata()
  @Expose({ name: "Enabled" })
  enabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "KinesisFirehoseDestination" })
  @Type(() => shared.KinesisFirehoseDestination)
  kinesisFirehoseDestination?: shared.KinesisFirehoseDestination;

  @SpeakeasyMetadata()
  @Expose({ name: "MatchingEventTypes" })
  matchingEventTypes?: shared.EventTypeEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "PinpointDestination" })
  @Type(() => shared.PinpointDestination)
  pinpointDestination?: shared.PinpointDestination;

  @SpeakeasyMetadata()
  @Expose({ name: "SnsDestination" })
  @Type(() => shared.SnsDestination)
  snsDestination?: shared.SnsDestination;
}

export class CreateConfigurationSetEventDestinationRequestBody extends SpeakeasyBase {
  /**
   * An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EventDestination" })
  @Type(() => CreateConfigurationSetEventDestinationRequestBodyEventDestination)
  eventDestination: CreateConfigurationSetEventDestinationRequestBodyEventDestination;

  /**
   * <p>The name of an event destination.</p> <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EventDestinationName" })
  eventDestinationName: string;
}

export class CreateConfigurationSetEventDestinationRequest extends SpeakeasyBase {
  /**
   * The name of the configuration set that you want to add an event destination to.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ConfigurationSetName",
  })
  configurationSetName: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateConfigurationSetEventDestinationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateConfigurationSetEventDestinationResponse extends SpeakeasyBase {
  /**
   * AlreadyExistsException
   */
  @SpeakeasyMetadata()
  alreadyExistsException?: any;

  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createConfigurationSetEventDestinationResponse?: Record<string, any>;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
