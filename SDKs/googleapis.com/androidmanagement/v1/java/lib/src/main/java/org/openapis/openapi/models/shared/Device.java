/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Device - A device owned by an enterprise. Unless otherwise noted, all fields are read-only and can't be modified by enterprises.devices.patch.
 */
public class Device {
    /**
     * The API level of the Android platform version running on the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apiLevel")
    public Integer apiLevel;

    public Device withApiLevel(Integer apiLevel) {
        this.apiLevel = apiLevel;
        return this;
    }
    
    /**
     * Reports for apps installed on the device. This information is only available when application_reports_enabled is true in the device's policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicationReports")
    public ApplicationReport[] applicationReports;

    public Device withApplicationReports(ApplicationReport[] applicationReports) {
        this.applicationReports = applicationReports;
        return this;
    }
    
    /**
     * The password requirements currently applied to the device. The applied requirements may be slightly different from those specified in passwordPolicies in some cases. fieldPath is set based on passwordPolicies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appliedPasswordPolicies")
    public PasswordRequirements[] appliedPasswordPolicies;

    public Device withAppliedPasswordPolicies(PasswordRequirements[] appliedPasswordPolicies) {
        this.appliedPasswordPolicies = appliedPasswordPolicies;
        return this;
    }
    
    /**
     * The name of the policy currently applied to the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appliedPolicyName")
    public String appliedPolicyName;

    public Device withAppliedPolicyName(String appliedPolicyName) {
        this.appliedPolicyName = appliedPolicyName;
        return this;
    }
    
    /**
     * The version of the policy currently applied to the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appliedPolicyVersion")
    public String appliedPolicyVersion;

    public Device withAppliedPolicyVersion(String appliedPolicyVersion) {
        this.appliedPolicyVersion = appliedPolicyVersion;
        return this;
    }
    
    /**
     * The state currently applied to the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appliedState")
    public DeviceAppliedStateEnum appliedState;

    public Device withAppliedState(DeviceAppliedStateEnum appliedState) {
        this.appliedState = appliedState;
        return this;
    }
    
    /**
     * Information about Common Criteria Mode\u2014security standards defined in the Common Criteria for Information Technology Security Evaluation (https://www.commoncriteriaportal.org/) (CC).This information is only available if statusReportingSettings.commonCriteriaModeEnabled is true in the device's policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commonCriteriaModeInfo")
    public CommonCriteriaModeInfo commonCriteriaModeInfo;

    public Device withCommonCriteriaModeInfo(CommonCriteriaModeInfo commonCriteriaModeInfo) {
        this.commonCriteriaModeInfo = commonCriteriaModeInfo;
        return this;
    }
    
    /**
     * Information about security related device settings on device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceSettings")
    public DeviceSettings deviceSettings;

    public Device withDeviceSettings(DeviceSettings deviceSettings) {
        this.deviceSettings = deviceSettings;
        return this;
    }
    
    /**
     * Provides a user-facing message with locale info. The maximum message length is 4096 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabledReason")
    public UserFacingMessage disabledReason;

    public Device withDisabledReason(UserFacingMessage disabledReason) {
        this.disabledReason = disabledReason;
        return this;
    }
    
    /**
     * Detailed information about displays on the device. This information is only available if displayInfoEnabled is true in the device's policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displays")
    public Display[] displays;

    public Device withDisplays(Display[] displays) {
        this.displays = displays;
        return this;
    }
    
    /**
     * The time of device enrollment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enrollmentTime")
    public String enrollmentTime;

    public Device withEnrollmentTime(String enrollmentTime) {
        this.enrollmentTime = enrollmentTime;
        return this;
    }
    
    /**
     * If the device was enrolled with an enrollment token with additional data provided, this field contains that data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enrollmentTokenData")
    public String enrollmentTokenData;

    public Device withEnrollmentTokenData(String enrollmentTokenData) {
        this.enrollmentTokenData = enrollmentTokenData;
        return this;
    }
    
    /**
     * If the device was enrolled with an enrollment token, this field contains the name of the token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enrollmentTokenName")
    public String enrollmentTokenName;

    public Device withEnrollmentTokenName(String enrollmentTokenName) {
        this.enrollmentTokenName = enrollmentTokenName;
        return this;
    }
    
    /**
     * Information about device hardware. The fields related to temperature thresholds are only available if hardwareStatusEnabled is true in the device's policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hardwareInfo")
    public HardwareInfo hardwareInfo;

    public Device withHardwareInfo(HardwareInfo hardwareInfo) {
        this.hardwareInfo = hardwareInfo;
        return this;
    }
    
    /**
     * Hardware status samples in chronological order. This information is only available if hardwareStatusEnabled is true in the device's policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hardwareStatusSamples")
    public HardwareStatus[] hardwareStatusSamples;

    public Device withHardwareStatusSamples(HardwareStatus[] hardwareStatusSamples) {
        this.hardwareStatusSamples = hardwareStatusSamples;
        return this;
    }
    
    /**
     * Deprecated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastPolicyComplianceReportTime")
    public String lastPolicyComplianceReportTime;

    public Device withLastPolicyComplianceReportTime(String lastPolicyComplianceReportTime) {
        this.lastPolicyComplianceReportTime = lastPolicyComplianceReportTime;
        return this;
    }
    
    /**
     * The last time the device fetched its policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastPolicySyncTime")
    public String lastPolicySyncTime;

    public Device withLastPolicySyncTime(String lastPolicySyncTime) {
        this.lastPolicySyncTime = lastPolicySyncTime;
        return this;
    }
    
    /**
     * The last time the device sent a status report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastStatusReportTime")
    public String lastStatusReportTime;

    public Device withLastStatusReportTime(String lastStatusReportTime) {
        this.lastStatusReportTime = lastStatusReportTime;
        return this;
    }
    
    /**
     * The type of management mode Android Device Policy takes on the device. This influences which policy settings are supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("managementMode")
    public DeviceManagementModeEnum managementMode;

    public Device withManagementMode(DeviceManagementModeEnum managementMode) {
        this.managementMode = managementMode;
        return this;
    }
    
    /**
     * Events related to memory and storage measurements in chronological order. This information is only available if memoryInfoEnabled is true in the device's policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memoryEvents")
    public MemoryEvent[] memoryEvents;

    public Device withMemoryEvents(MemoryEvent[] memoryEvents) {
        this.memoryEvents = memoryEvents;
        return this;
    }
    
    /**
     * Information about device memory and storage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memoryInfo")
    public MemoryInfo memoryInfo;

    public Device withMemoryInfo(MemoryInfo memoryInfo) {
        this.memoryInfo = memoryInfo;
        return this;
    }
    
    /**
     * The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Device withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Device network info.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkInfo")
    public NetworkInfo networkInfo;

    public Device withNetworkInfo(NetworkInfo networkInfo) {
        this.networkInfo = networkInfo;
        return this;
    }
    
    /**
     * Details about policy settings that the device is not compliant with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nonComplianceDetails")
    public NonComplianceDetail[] nonComplianceDetails;

    public Device withNonComplianceDetails(NonComplianceDetail[] nonComplianceDetails) {
        this.nonComplianceDetails = nonComplianceDetails;
        return this;
    }
    
    /**
     * Ownership of the managed device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ownership")
    public DeviceOwnershipEnum ownership;

    public Device withOwnership(DeviceOwnershipEnum ownership) {
        this.ownership = ownership;
        return this;
    }
    
    /**
     * Whether the device is compliant with its policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("policyCompliant")
    public Boolean policyCompliant;

    public Device withPolicyCompliant(Boolean policyCompliant) {
        this.policyCompliant = policyCompliant;
        return this;
    }
    
    /**
     * The name of the policy applied to the device, in the form enterprises/{enterpriseId}/policies/{policyId}. If not specified, the policy_name for the device's user is applied. This field can be modified by a patch request. You can specify only the policyId when calling enterprises.devices.patch, as long as the policyId doesn\u2019t contain any slashes. The rest of the policy name is inferred.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("policyName")
    public String policyName;

    public Device withPolicyName(String policyName) {
        this.policyName = policyName;
        return this;
    }
    
    /**
     * Power management events on the device in chronological order. This information is only available if powerManagementEventsEnabled is true in the device's policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("powerManagementEvents")
    public PowerManagementEvent[] powerManagementEvents;

    public Device withPowerManagementEvents(PowerManagementEvent[] powerManagementEvents) {
        this.powerManagementEvents = powerManagementEvents;
        return this;
    }
    
    /**
     * If the same physical device has been enrolled multiple times, this field contains its previous device names. The serial number is used as the unique identifier to determine if the same physical device has enrolled previously. The names are in chronological order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previousDeviceNames")
    public String[] previousDeviceNames;

    public Device withPreviousDeviceNames(String[] previousDeviceNames) {
        this.previousDeviceNames = previousDeviceNames;
        return this;
    }
    
    /**
     * The security posture of the device, as determined by the current device state and the policies applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("securityPosture")
    public SecurityPosture securityPosture;

    public Device withSecurityPosture(SecurityPosture securityPosture) {
        this.securityPosture = securityPosture;
        return this;
    }
    
    /**
     * Information about device software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softwareInfo")
    public SoftwareInfo softwareInfo;

    public Device withSoftwareInfo(SoftwareInfo softwareInfo) {
        this.softwareInfo = softwareInfo;
        return this;
    }
    
    /**
     * The state to be applied to the device. This field can be modified by a patch request. Note that when calling enterprises.devices.patch, ACTIVE and DISABLED are the only allowable values. To enter the device into a DELETED state, call enterprises.devices.delete.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public DeviceStateEnum state;

    public Device withState(DeviceStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Map of selected system properties name and value related to the device. This information is only available if systemPropertiesEnabled is true in the device's policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("systemProperties")
    public java.util.Map<String, String> systemProperties;

    public Device withSystemProperties(java.util.Map<String, String> systemProperties) {
        this.systemProperties = systemProperties;
        return this;
    }
    
    /**
     * A user belonging to an enterprise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public User user;

    public Device withUser(User user) {
        this.user = user;
        return this;
    }
    
    /**
     * The resource name of the user that owns this device in the form enterprises/{enterpriseId}/users/{userId}.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userName")
    public String userName;

    public Device withUserName(String userName) {
        this.userName = userName;
        return this;
    }
    
    public Device(){}
}
