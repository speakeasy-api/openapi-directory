/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * VmwareVmMountDetailV1 - Detailed information for the specified Live Mount.
 */
public class VmwareVmMountDetailV1 {
    /**
     * An integer value that identifies how many disks are attached.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachingDiskCount")
    public Integer attachingDiskCount;

    public VmwareVmMountDetailV1 withAttachingDiskCount(Integer attachingDiskCount) {
        this.attachingDiskCount = attachingDiskCount;
        return this;
    }
    
    /**
     * This boolean value determines whether or not the mount is created as a datastore only. When 'true,' the mount is created with datastore and not the associated virtual machine. When 'false,' the mount is created with both the datastore and the associated virtual machine.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createDatastoreOnlyMount")
    public Boolean createDatastoreOnlyMount;

    public VmwareVmMountDetailV1 withCreateDatastoreOnlyMount(Boolean createDatastoreOnlyMount) {
        this.createDatastoreOnlyMount = createDatastoreOnlyMount;
        return this;
    }
    
    /**
     * The name of the datastore that contains the mounted VMDK.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datastoreName")
    public String datastoreName;

    public VmwareVmMountDetailV1 withDatastoreName(String datastoreName) {
        this.datastoreName = datastoreName;
        return this;
    }
    
    /**
     * A boolean value that specifies whether the datastore is ready. When 'true,' the datastore is ready. When 'false,' the datastore is not ready.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datastoreReady")
    public Boolean datastoreReady;

    public VmwareVmMountDetailV1 withDatastoreReady(Boolean datastoreReady) {
        this.datastoreReady = datastoreReady;
        return this;
    }
    
    /**
     * A Boolean value that determines whether this job is an attaching disk mount job. When 'true,' this is an attaching disk mount job. When 'false,' this is not an attaching disk mount job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasAttachingDisk")
    public Boolean hasAttachingDisk;

    public VmwareVmMountDetailV1 withHasAttachingDisk(Boolean hasAttachingDisk) {
        this.hasAttachingDisk = hasAttachingDisk;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostId")
    public String hostId;

    public VmwareVmMountDetailV1 withHostId(String hostId) {
        this.hostId = hostId;
        return this;
    }
    
    @JsonProperty("id")
    public String id;

    public VmwareVmMountDetailV1 withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonProperty("isReady")
    public Boolean isReady;

    public VmwareVmMountDetailV1 withIsReady(Boolean isReady) {
        this.isReady = isReady;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mountRequestId")
    public String mountRequestId;

    public VmwareVmMountDetailV1 withMountRequestId(String mountRequestId) {
        this.mountRequestId = mountRequestId;
        return this;
    }
    
    /**
     * Gives the timestamp at which the mount was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("mountTimestamp")
    public OffsetDateTime mountTimestamp;

    public VmwareVmMountDetailV1 withMountTimestamp(OffsetDateTime mountTimestamp) {
        this.mountTimestamp = mountTimestamp;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mountedVmId")
    public String mountedVmId;

    public VmwareVmMountDetailV1 withMountedVmId(String mountedVmId) {
        this.mountedVmId = mountedVmId;
        return this;
    }
    
    /**
     * The power status of the mounted VM(ON,OFF,SLEEP etc.).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("powerStatus")
    public String powerStatus;

    public VmwareVmMountDetailV1 withPowerStatus(String powerStatus) {
        this.powerStatus = powerStatus;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("snapshotDate")
    public OffsetDateTime snapshotDate;

    public VmwareVmMountDetailV1 withSnapshotDate(OffsetDateTime snapshotDate) {
        this.snapshotDate = snapshotDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unmountRequestId")
    public String unmountRequestId;

    public VmwareVmMountDetailV1 withUnmountRequestId(String unmountRequestId) {
        this.unmountRequestId = unmountRequestId;
        return this;
    }
    
    @JsonProperty("vmId")
    public String vmId;

    public VmwareVmMountDetailV1 withVmId(String vmId) {
        this.vmId = vmId;
        return this;
    }
    
    public VmwareVmMountDetailV1(@JsonProperty("id") String id, @JsonProperty("isReady") Boolean isReady, @JsonProperty("snapshotDate") OffsetDateTime snapshotDate, @JsonProperty("vmId") String vmId) {
        this.id = id;
        this.isReady = isReady;
        this.snapshotDate = snapshotDate;
        this.vmId = vmId;
  }
}
