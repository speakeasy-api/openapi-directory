// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UploadContentTypeEnum - Content type representing data being uploaded (e.g. image/vnd.climate.rgb.geotiff)
type UploadContentTypeEnum string

const (
	UploadContentTypeEnumImageVndClimateThermalGeotiff             UploadContentTypeEnum = "image/vnd.climate.thermal.geotiff"
	UploadContentTypeEnumImageVndClimateNdviGeotiff                UploadContentTypeEnum = "image/vnd.climate.ndvi.geotiff"
	UploadContentTypeEnumImageVndClimateRgbGeotiff                 UploadContentTypeEnum = "image/vnd.climate.rgb.geotiff"
	UploadContentTypeEnumImageVndClimateRgbNirGeotiff              UploadContentTypeEnum = "image/vnd.climate.rgb-nir.geotiff"
	UploadContentTypeEnumImageVndClimateRgbCirGeotiff              UploadContentTypeEnum = "image/vnd.climate.rgb-cir.geotiff"
	UploadContentTypeEnumImageVndClimateWaterstressGeotiff         UploadContentTypeEnum = "image/vnd.climate.waterstress.geotiff"
	UploadContentTypeEnumImageVndClimateElevationGeotiff           UploadContentTypeEnum = "image/vnd.climate.elevation.geotiff"
	UploadContentTypeEnumImageVndClimateRawGeotiff                 UploadContentTypeEnum = "image/vnd.climate.raw.geotiff"
	UploadContentTypeEnumApplicationVndClimateFieldGeojson         UploadContentTypeEnum = "application/vnd.climate.field.geojson"
	UploadContentTypeEnumApplicationVndClimateRxPlantingShp        UploadContentTypeEnum = "application/vnd.climate.rx.planting.shp"
	UploadContentTypeEnumApplicationVndClimatePrescriptionZonesShp UploadContentTypeEnum = "application/vnd.climate.prescription.zones.shp"
	UploadContentTypeEnumApplicationVndClimateModusXML             UploadContentTypeEnum = "application/vnd.climate.modus.xml"
	UploadContentTypeEnumApplicationVndClimateStandCountGeojson    UploadContentTypeEnum = "application/vnd.climate.stand-count.geojson"
	UploadContentTypeEnumApplicationVndClimateWeedCountGeojson     UploadContentTypeEnum = "application/vnd.climate.weed-count.geojson"
	UploadContentTypeEnumApplicationVndClimateAsAppliedZip         UploadContentTypeEnum = "application/vnd.climate.as-applied.zip"
	UploadContentTypeEnumApplicationVndClimateAsPlantedZip         UploadContentTypeEnum = "application/vnd.climate.as-planted.zip"
	UploadContentTypeEnumApplicationVndClimateAsHarvestedZip       UploadContentTypeEnum = "application/vnd.climate.as-harvested.zip"
)

func (e UploadContentTypeEnum) ToPointer() *UploadContentTypeEnum {
	return &e
}

func (e *UploadContentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "image/vnd.climate.thermal.geotiff":
		fallthrough
	case "image/vnd.climate.ndvi.geotiff":
		fallthrough
	case "image/vnd.climate.rgb.geotiff":
		fallthrough
	case "image/vnd.climate.rgb-nir.geotiff":
		fallthrough
	case "image/vnd.climate.rgb-cir.geotiff":
		fallthrough
	case "image/vnd.climate.waterstress.geotiff":
		fallthrough
	case "image/vnd.climate.elevation.geotiff":
		fallthrough
	case "image/vnd.climate.raw.geotiff":
		fallthrough
	case "application/vnd.climate.field.geojson":
		fallthrough
	case "application/vnd.climate.rx.planting.shp":
		fallthrough
	case "application/vnd.climate.prescription.zones.shp":
		fallthrough
	case "application/vnd.climate.modus.xml":
		fallthrough
	case "application/vnd.climate.stand-count.geojson":
		fallthrough
	case "application/vnd.climate.weed-count.geojson":
		fallthrough
	case "application/vnd.climate.as-applied.zip":
		fallthrough
	case "application/vnd.climate.as-planted.zip":
		fallthrough
	case "application/vnd.climate.as-harvested.zip":
		*e = UploadContentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadContentTypeEnum: %v", v)
	}
}

// Upload - Client request to upload data for a user.
type Upload struct {
	// Content type representing data being uploaded (e.g. image/vnd.climate.rgb.geotiff)
	ContentType UploadContentTypeEnum `json:"contentType"`
	// Content size in bytes
	Length int64 `json:"length"`
	// Base64 encoded md5 hash of the content
	Md5      string                 `json:"md5"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}
