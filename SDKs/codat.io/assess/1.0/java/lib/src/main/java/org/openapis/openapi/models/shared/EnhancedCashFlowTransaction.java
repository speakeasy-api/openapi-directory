/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class EnhancedCashFlowTransaction {
    /**
     * The bank transaction amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    public Double amount;

    public EnhancedCashFlowTransaction withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;

    public EnhancedCashFlowTransaction withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    public String date;

    public EnhancedCashFlowTransaction withDate(String date) {
        this.date = date;
        return this;
    }
    
    /**
     * The description of the bank transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public EnhancedCashFlowTransaction withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The unique identifier of the bank transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public EnhancedCashFlowTransaction withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * A source reference containing the `sourceType` object "Banking".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceRef")
    public SourceRef sourceRef;

    public EnhancedCashFlowTransaction withSourceRef(SourceRef sourceRef) {
        this.sourceRef = sourceRef;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionCategory")
    public TransactionCategory transactionCategory;

    public EnhancedCashFlowTransaction withTransactionCategory(TransactionCategory transactionCategory) {
        this.transactionCategory = transactionCategory;
        return this;
    }
    
    public EnhancedCashFlowTransaction(){}
}
