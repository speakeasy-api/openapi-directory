// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UntagCertificateAuthorityXAmzTargetEnum
type UntagCertificateAuthorityXAmzTargetEnum string

const (
	UntagCertificateAuthorityXAmzTargetEnumAcmPrivateCaUntagCertificateAuthority UntagCertificateAuthorityXAmzTargetEnum = "ACMPrivateCA.UntagCertificateAuthority"
)

func (e *UntagCertificateAuthorityXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACMPrivateCA.UntagCertificateAuthority":
		*e = UntagCertificateAuthorityXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UntagCertificateAuthorityXAmzTargetEnum: %s", s)
	}
}

type UntagCertificateAuthorityHeaders struct {
	XAmzAlgorithm     *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        UntagCertificateAuthorityXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UntagCertificateAuthorityRequest struct {
	Headers UntagCertificateAuthorityHeaders
	Request shared.UntagCertificateAuthorityRequest `request:"mediaType=application/json"`
}

type UntagCertificateAuthorityResponse struct {
	ContentType string
	// InvalidArnException
	InvalidArnException interface{}
	// InvalidStateException
	InvalidStateException interface{}
	// InvalidTagException
	InvalidTagException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
