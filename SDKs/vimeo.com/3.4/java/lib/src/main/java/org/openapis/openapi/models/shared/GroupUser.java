/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GroupUser - The owner of the group.
 */
public class GroupUser {
    /**
     * The user's account type:
     * 
     * Option descriptions:
     *  * `basic` - The user has a Vimeo Basic subscription.
     *  * `business` - The user has a Vimeo Business subscription.
     *  * `live_business` - The user has a Vimeo Business Live subscription.
     *  * `live_premium` - The user has a Vimeo Premium subscription.
     *  * `live_pro` - The user has a Vimeo PRO Live subscription.
     *  * `plus` - The user has a Vimeo Plus subscription.
     *  * `pro` - The user has a Vimeo Pro subscription.
     *  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
     *  * `producer` - The user has a Vimeo Producer subscription.
     * 
     */
    @JsonProperty("account")
    public GroupUserAccountEnum account;
    public GroupUser withAccount(GroupUserAccountEnum account) {
        this.account = account;
        return this;
    }
    
    /**
     * The user's bio.
     */
    @JsonProperty("bio")
    public String bio;
    public GroupUser withBio(String bio) {
        this.bio = bio;
        return this;
    }
    
    /**
     * The user's content filters:
     * 
     * Option descriptions:
     *  * `drugs` - Drugs or alcohol use.
     *  * `language` - Profanity or sexually suggestive content.
     *  * `nudity` - Nudity.
     *  * `safe` - Suitable for all audiences.
     *  * `unrated` - No rating.
     *  * `violence` - Violent or graphic content.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content_filter")
    public GroupUserContentFilterEnum contentFilter;
    public GroupUser withContentFilter(GroupUserContentFilterEnum contentFilter) {
        this.contentFilter = contentFilter;
        return this;
    }
    
    /**
     * The time in ISO 8601 format when the user account was created.
     */
    @JsonProperty("created_time")
    public String createdTime;
    public GroupUser withCreatedTime(String createdTime) {
        this.createdTime = createdTime;
        return this;
    }
    
    /**
     * The user's email address. This data requires a bearer token with the `email` scope.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;
    public GroupUser withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * The absolute URL of this user's profile page.
     */
    @JsonProperty("link")
    public String link;
    public GroupUser withLink(String link) {
        this.link = link;
        return this;
    }
    
    /**
     * The user's location.
     */
    @JsonProperty("location")
    public String location;
    public GroupUser withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * The user's metadata.
     */
    @JsonProperty("metadata")
    public GroupUserMetadata metadata;
    public GroupUser withMetadata(GroupUserMetadata metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * The user's display name.
     */
    @JsonProperty("name")
    public String name;
    public GroupUser withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The active portrait of this user.
     */
    @JsonProperty("pictures")
    public Picture pictures;
    public GroupUser withPictures(Picture pictures) {
        this.pictures = pictures;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferences")
    public GroupUserPreferences preferences;
    public GroupUser withPreferences(GroupUserPreferences preferences) {
        this.preferences = preferences;
        return this;
    }
    
    /**
     * The user's resource key string.
     */
    @JsonProperty("resource_key")
    public String resourceKey;
    public GroupUser withResourceKey(String resourceKey) {
        this.resourceKey = resourceKey;
        return this;
    }
    
    /**
     * Appears only when the user has upload access and is looking at their own user record.
     */
    @JsonProperty("upload_quota")
    public GroupUserUploadQuota uploadQuota;
    public GroupUser withUploadQuota(GroupUserUploadQuota uploadQuota) {
        this.uploadQuota = uploadQuota;
        return this;
    }
    
    /**
     * The user's canonical relative URI.
     */
    @JsonProperty("uri")
    public String uri;
    public GroupUser withUri(String uri) {
        this.uri = uri;
        return this;
    }
    
    /**
     * The user's websites.
     */
    @JsonProperty("websites")
    public GroupUserWebsites[] websites;
    public GroupUser withWebsites(GroupUserWebsites[] websites) {
        this.websites = websites;
        return this;
    }
    
}
