<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Sling 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * deleteAgent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAgentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAgentResponse
     */
	public function deleteAgent(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAgentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAgentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/etc/replication/agents.{runmode}/{name}', \OpenAPI\OpenAPI\Models\Operations\DeleteAgentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAgentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * deleteNode
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNodeResponse
     */
	public function deleteNode(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{path}/{name}', \OpenAPI\OpenAPI\Models\Operations\DeleteNodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * getAgent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAgentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAgentResponse
     */
	public function getAgent(
        \OpenAPI\OpenAPI\Models\Operations\GetAgentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAgentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/etc/replication/agents.{runmode}/{name}', \OpenAPI\OpenAPI\Models\Operations\GetAgentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAgentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * getAgents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAgentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAgentsResponse
     */
	public function getAgents(
        \OpenAPI\OpenAPI\Models\Operations\GetAgentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAgentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/etc/replication/agents.{runmode}.-1.json', \OpenAPI\OpenAPI\Models\Operations\GetAgentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAgentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getAgentsDefaultApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getAuthorizableKeystore
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAuthorizableKeystoreRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAuthorizableKeystoreResponse
     */
	public function getAuthorizableKeystore(
        \OpenAPI\OpenAPI\Models\Operations\GetAuthorizableKeystoreRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAuthorizableKeystoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{intermediatePath}/{authorizableId}.ks.json', \OpenAPI\OpenAPI\Models\Operations\GetAuthorizableKeystoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAuthorizableKeystoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->keystoreInfo = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->getAuthorizableKeystoreDefaultTextPlainString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getKeystore
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetKeystoreRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetKeystoreResponse
     */
	public function getKeystore(
        \OpenAPI\OpenAPI\Models\Operations\GetKeystoreRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetKeystoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{intermediatePath}/{authorizableId}/keystore/store.p12', \OpenAPI\OpenAPI\Models\Operations\GetKeystoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetKeystoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->getKeystoreDefaultApplicationOctetStreamBinaryString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getNode
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNodeResponse
     */
	public function getNode(
        \OpenAPI\OpenAPI\Models\Operations\GetNodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{path}/{name}', \OpenAPI\OpenAPI\Models\Operations\GetNodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * getPackage
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPackageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPackageResponse
     */
	public function getPackage(
        \OpenAPI\OpenAPI\Models\Operations\GetPackageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPackageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/etc/packages/{group}/{name}-{version}.zip', \OpenAPI\OpenAPI\Models\Operations\GetPackageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPackageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->getPackageDefaultApplicationOctetStreamBinaryString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getPackageFilter
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPackageFilterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPackageFilterResponse
     */
	public function getPackageFilter(
        \OpenAPI\OpenAPI\Models\Operations\GetPackageFilterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPackageFilterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json', \OpenAPI\OpenAPI\Models\Operations\GetPackageFilterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPackageFilterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getPackageFilterDefaultApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getQuery
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQueryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQueryResponse
     */
	public function getQuery(
        \OpenAPI\OpenAPI\Models\Operations\GetQueryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQueryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bin/querybuilder.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetQueryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getQueryDefaultApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getTruststore
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTruststoreResponse
     */
	public function getTruststore(
    ): \OpenAPI\OpenAPI\Models\Operations\GetTruststoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/etc/truststore/truststore.p12');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTruststoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->getTruststoreDefaultApplicationOctetStreamBinaryString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getTruststoreInfo
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTruststoreInfoResponse
     */
	public function getTruststoreInfo(
    ): \OpenAPI\OpenAPI\Models\Operations\GetTruststoreInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/libs/granite/security/truststore.json');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTruststoreInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->truststoreInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TruststoreInfo', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getTruststoreInfoDefaultApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postAgent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAgentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAgentResponse
     */
	public function postAgent(
        \OpenAPI\OpenAPI\Models\Operations\PostAgentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAgentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/etc/replication/agents.{runmode}/{name}', \OpenAPI\OpenAPI\Models\Operations\PostAgentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostAgentRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAgentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * postAuthorizableKeystore
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAuthorizableKeystoreRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAuthorizableKeystoreResponse
     */
	public function postAuthorizableKeystore(
        \OpenAPI\OpenAPI\Models\Operations\PostAuthorizableKeystoreRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAuthorizableKeystoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{intermediatePath}/{authorizableId}.ks.html', \OpenAPI\OpenAPI\Models\Operations\PostAuthorizableKeystoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostAuthorizableKeystoreRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAuthorizableKeystoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->keystoreInfo = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->postAuthorizableKeystoreDefaultTextPlainString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postAuthorizables
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAuthorizablesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAuthorizablesResponse
     */
	public function postAuthorizables(
        \OpenAPI\OpenAPI\Models\Operations\PostAuthorizablesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAuthorizablesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/libs/granite/security/post/authorizables');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostAuthorizablesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAuthorizablesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->postAuthorizablesDefaultTextHTMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postConfigAdobeGraniteSamlAuthenticationHandler
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostConfigAdobeGraniteSamlAuthenticationHandlerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostConfigAdobeGraniteSamlAuthenticationHandlerResponse
     */
	public function postConfigAdobeGraniteSamlAuthenticationHandler(
        \OpenAPI\OpenAPI\Models\Operations\PostConfigAdobeGraniteSamlAuthenticationHandlerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostConfigAdobeGraniteSamlAuthenticationHandlerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostConfigAdobeGraniteSamlAuthenticationHandlerRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostConfigAdobeGraniteSamlAuthenticationHandlerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * postConfigApacheFelixJettyBasedHttpService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheFelixJettyBasedHttpServiceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheFelixJettyBasedHttpServiceResponse
     */
	public function postConfigApacheFelixJettyBasedHttpService(
        \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheFelixJettyBasedHttpServiceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheFelixJettyBasedHttpServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/system/config/org.apache.felix.http');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostConfigApacheFelixJettyBasedHttpServiceRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheFelixJettyBasedHttpServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * postConfigApacheHttpComponentsProxyConfiguration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheHttpComponentsProxyConfigurationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheHttpComponentsProxyConfigurationResponse
     */
	public function postConfigApacheHttpComponentsProxyConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheHttpComponentsProxyConfigurationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheHttpComponentsProxyConfigurationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/system/config/org.apache.http.proxyconfigurator.config');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostConfigApacheHttpComponentsProxyConfigurationRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheHttpComponentsProxyConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * postConfigApacheSlingDavExServlet
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingDavExServletRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingDavExServletResponse
     */
	public function postConfigApacheSlingDavExServlet(
        \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingDavExServletRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingDavExServletResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingDavExServletRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingDavExServletResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * postConfigApacheSlingGetServlet
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingGetServletRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingGetServletResponse
     */
	public function postConfigApacheSlingGetServlet(
        \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingGetServletRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingGetServletResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingGetServletRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingGetServletResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * postConfigApacheSlingReferrerFilter
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingReferrerFilterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingReferrerFilterResponse
     */
	public function postConfigApacheSlingReferrerFilter(
        \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingReferrerFilterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingReferrerFilterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/system/config/org.apache.sling.security.impl.ReferrerFilter');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingReferrerFilterRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostConfigApacheSlingReferrerFilterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * postConfigProperty
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostConfigPropertyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostConfigPropertyResponse
     */
	public function postConfigProperty(
        \OpenAPI\OpenAPI\Models\Operations\PostConfigPropertyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostConfigPropertyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/system/config/{configNodeName}', \OpenAPI\OpenAPI\Models\Operations\PostConfigPropertyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostConfigPropertyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * postNode
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostNodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostNodeResponse
     */
	public function postNode(
        \OpenAPI\OpenAPI\Models\Operations\PostNodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostNodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{path}/{name}', \OpenAPI\OpenAPI\Models\Operations\PostNodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostNodeRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostNodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * postNodeRw
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostNodeRwRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostNodeRwResponse
     */
	public function postNodeRw(
        \OpenAPI\OpenAPI\Models\Operations\PostNodeRwRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostNodeRwResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{path}/{name}.rw.html', \OpenAPI\OpenAPI\Models\Operations\PostNodeRwRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostNodeRwRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostNodeRwResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * postPath
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPathRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPathResponse
     */
	public function postPath(
        \OpenAPI\OpenAPI\Models\Operations\PostPathRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPathResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{path}/', \OpenAPI\OpenAPI\Models\Operations\PostPathRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostPathRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPathResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * postQuery
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQueryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostQueryResponse
     */
	public function postQuery(
        \OpenAPI\OpenAPI\Models\Operations\PostQueryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostQueryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/bin/querybuilder.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostQueryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->postQueryDefaultApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postTreeActivation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTreeActivationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTreeActivationResponse
     */
	public function postTreeActivation(
        \OpenAPI\OpenAPI\Models\Operations\PostTreeActivationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTreeActivationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/libs/replication/treeactivation.html');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostTreeActivationRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTreeActivationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * postTruststore
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTruststoreRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTruststoreResponse
     */
	public function postTruststore(
        \OpenAPI\OpenAPI\Models\Operations\PostTruststoreRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTruststoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/libs/granite/security/post/truststore');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostTruststoreRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTruststoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->postTruststoreDefaultTextPlainString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postTruststorePkcs12
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTruststorePkcs12RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTruststorePkcs12Response
     */
	public function postTruststorePkcs12(
        \OpenAPI\OpenAPI\Models\Operations\PostTruststorePkcs12RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTruststorePkcs12Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/etc/truststore');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTruststorePkcs12Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->postTruststorePkcs12DefaultTextPlainString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}