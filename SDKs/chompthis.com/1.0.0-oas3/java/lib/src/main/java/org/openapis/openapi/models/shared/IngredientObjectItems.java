/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * IngredientObjectItems - An object containing information for this specific item.
 */
public class IngredientObjectItems {
    /**
     * An object containing the multiplication factors to be used when calculating energy from macronutrients for a specific food.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calorie_conversion_factor")
    public IngredientObjectItemsCalorieConversionFactor calorieConversionFactor;
    public IngredientObjectItems withCalorieConversionFactor(IngredientObjectItemsCalorieConversionFactor calorieConversionFactor) {
        this.calorieConversionFactor = calorieConversionFactor;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    public String[] categories;
    public IngredientObjectItems withCategories(String[] categories) {
        this.categories = categories;
        return this;
    }
    
    /**
     * Common name associated with this item. These generally clarify what the item is (e.g. when the brand name is "BRAND's Spicy Enchilada" the common name may be "Chicken enchilada")
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("common_name")
    public String commonName;
    public IngredientObjectItems withCommonName(String commonName) {
        this.commonName = commonName;
        return this;
    }
    
    /**
     * An array of objects containing the constituent parts of a food (e.g. bone is a component of meat)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("components")
    public IngredientObjectItemsComponents[] components;
    public IngredientObjectItems withComponents(IngredientObjectItemsComponents[] components) {
        this.components = components;
        return this;
    }
    
    /**
     * Comments on any unusual aspects of this item. Examples might include unusual aspects of the food overall
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("footnote")
    public String footnote;
    public IngredientObjectItems withFootnote(String footnote) {
        this.footnote = footnote;
        return this;
    }
    
    /**
     * Item name as provided by brand owner or as shown on packaging
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public IngredientObjectItems withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * An array containing nutrient informatio objects for this food item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nutrients")
    public IngredientObjectItemsNutrients[] nutrients;
    public IngredientObjectItems withNutrients(IngredientObjectItemsNutrients[] nutrients) {
        this.nutrients = nutrients;
        return this;
    }
    
    /**
     * An array of objects containing information on discrete amounts of a food found in this item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("portions")
    public IngredientObjectItemsPortions[] portions;
    public IngredientObjectItems withPortions(IngredientObjectItemsPortions[] portions) {
        this.portions = portions;
        return this;
    }
    
    /**
     * The multiplication factor used to calculate protein from nitrogen
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protein_conversion_factor")
    public Double proteinConversionFactor;
    public IngredientObjectItems withProteinConversionFactor(Double proteinConversionFactor) {
        this.proteinConversionFactor = proteinConversionFactor;
        return this;
    }
    
    /**
     * A value that represents how similar the name of this food item is to the original search term. The lower the value the closer this item's name is to the original search term.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("score")
    public String score;
    public IngredientObjectItems withScore(String score) {
        this.score = score;
        return this;
    }
    
    /**
     * The original search term that found this food item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_term")
    public String searchTerm;
    public IngredientObjectItems withSearchTerm(String searchTerm) {
        this.searchTerm = searchTerm;
        return this;
    }
    
}
