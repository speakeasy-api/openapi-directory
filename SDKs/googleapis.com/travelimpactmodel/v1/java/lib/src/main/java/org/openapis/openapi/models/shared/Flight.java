/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Flight - All details related to a single request item for a direct flight emission estimates.
 */
public class Flight {
    /**
     * Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departureDate")
    public Date departureDate;

    public Flight withDepartureDate(Date departureDate) {
        this.departureDate = departureDate;
        return this;
    }
    
    /**
     * Required. IATA airport code for flight destination, e.g. "JFK".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination")
    public String destination;

    public Flight withDestination(String destination) {
        this.destination = destination;
        return this;
    }
    
    /**
     * Required. Flight number, e.g. 324.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flightNumber")
    public Integer flightNumber;

    public Flight withFlightNumber(Integer flightNumber) {
        this.flightNumber = flightNumber;
        return this;
    }
    
    /**
     * Required. IATA carrier code, e.g. "AA".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operatingCarrierCode")
    public String operatingCarrierCode;

    public Flight withOperatingCarrierCode(String operatingCarrierCode) {
        this.operatingCarrierCode = operatingCarrierCode;
        return this;
    }
    
    /**
     * Required. IATA airport code for flight origin, e.g. "LHR".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("origin")
    public String origin;

    public Flight withOrigin(String origin) {
        this.origin = origin;
        return this;
    }
    
    public Flight(){}
}
