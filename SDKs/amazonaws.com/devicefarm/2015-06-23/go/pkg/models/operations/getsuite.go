// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetSuiteXAmzTargetEnum
type GetSuiteXAmzTargetEnum string

const (
	GetSuiteXAmzTargetEnumDeviceFarm20150623GetSuite GetSuiteXAmzTargetEnum = "DeviceFarm_20150623.GetSuite"
)

func (e GetSuiteXAmzTargetEnum) ToPointer() *GetSuiteXAmzTargetEnum {
	return &e
}

func (e *GetSuiteXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DeviceFarm_20150623.GetSuite":
		*e = GetSuiteXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSuiteXAmzTargetEnum: %v", v)
	}
}

type GetSuiteRequest struct {
	GetSuiteRequest   shared.GetSuiteRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetSuiteXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetSuiteResponse struct {
	// ArgumentException
	ArgumentException interface{}
	ContentType       string
	// Success
	GetSuiteResult *shared.GetSuiteResult
	// LimitExceededException
	LimitExceededException interface{}
	// NotFoundException
	NotFoundException interface{}
	// ServiceAccountException
	ServiceAccountException interface{}
	StatusCode              int
	RawResponse             *http.Response
}
