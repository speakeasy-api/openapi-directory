"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class APICoreDtoAccountingPlan:
    
    allowed_personal_domains: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedPersonalDomains'), 'exclude': lambda f: f is None }})  
    allowed_personal_urls: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedPersonalUrls'), 'exclude': lambda f: f is None }})  
    billing_period_end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingPeriodEnd'), 'exclude': lambda f: f is None }})
    r"""(A date in \\"YmdHis\\" format)"""  
    billing_period_start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingPeriodStart'), 'exclude': lambda f: f is None }})
    r"""(A date in \\"YmdHis\\" format)"""  
    bonus_monthly_events: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bonusMonthlyEvents'), 'exclude': lambda f: f is None }})  
    maximum_datapoints: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumDatapoints'), 'exclude': lambda f: f is None }})  
    maximum_guests: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumGuests'), 'exclude': lambda f: f is None }})  
    monthly_events: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthlyEvents'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})  
    profile_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileId'), 'exclude': lambda f: f is None }})  
    recurring: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurring'), 'exclude': lambda f: f is None }})  
    recurring_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurringPeriod'), 'exclude': lambda f: f is None }})  
    used_datapoints: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usedDatapoints'), 'exclude': lambda f: f is None }})  
    used_monthly_events: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usedMonthlyEvents'), 'exclude': lambda f: f is None }})  
    