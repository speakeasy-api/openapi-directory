<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class CreateWorkflowCreateWorkflowRequest
{
    /**
     * The URL from your application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/taskrouter/handle-assignment-callbacks) for more details.
     * 
     * @var ?string $assignmentCallbackUrl
     */
	#[SpeakeasyMetadata('form:name=AssignmentCallbackUrl')]
    public ?string $assignmentCallbackUrl = null;
    
    /**
     * A JSON string that contains the rules to apply to the Workflow. See [Configuring Workflows](https://www.twilio.com/docs/taskrouter/workflow-configuration) for more information.
     * 
     * @var string $configuration
     */
	#[SpeakeasyMetadata('form:name=Configuration')]
    public string $configuration;
    
    /**
     * The URL that we should call when a call to the `assignment_callback_url` fails.
     * 
     * @var ?string $fallbackAssignmentCallbackUrl
     */
	#[SpeakeasyMetadata('form:name=FallbackAssignmentCallbackUrl')]
    public ?string $fallbackAssignmentCallbackUrl = null;
    
    /**
     * A descriptive string that you create to describe the Workflow resource. For example, `Inbound Call Workflow` or `2014 Outbound Campaign`.
     * 
     * @var string $friendlyName
     */
	#[SpeakeasyMetadata('form:name=FriendlyName')]
    public string $friendlyName;
    
    /**
     * How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker. Can be up to `86,400` (24 hours) and the default is `120`.
     * 
     * @var ?int $taskReservationTimeout
     */
	#[SpeakeasyMetadata('form:name=TaskReservationTimeout')]
    public ?int $taskReservationTimeout = null;
    
	public function __construct()
	{
		$this->assignmentCallbackUrl = null;
		$this->configuration = "";
		$this->fallbackAssignmentCallbackUrl = null;
		$this->friendlyName = "";
		$this->taskReservationTimeout = null;
	}
}
