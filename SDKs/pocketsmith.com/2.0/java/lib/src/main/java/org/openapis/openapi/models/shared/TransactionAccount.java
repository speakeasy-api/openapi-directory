/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TransactionAccount - Success
 */
public class TransactionAccount {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;

    public TransactionAccount withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The currency that the account is in. This is determined by the account that the transaction account belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_code")
    public String currencyCode;

    public TransactionAccount withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_balance")
    public Double currentBalance;

    public TransactionAccount withCurrentBalance(Double currentBalance) {
        this.currentBalance = currentBalance;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_balance_date")
    public String currentBalanceDate;

    public TransactionAccount withCurrentBalanceDate(String currentBalanceDate) {
        this.currentBalanceDate = currentBalanceDate;
        return this;
    }
    
    /**
     * The exchange rate between the transaction account's currency and the user's base currency, when different. If the currencies are the same, null is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_balance_exchange_rate")
    public Double currentBalanceExchangeRate;

    public TransactionAccount withCurrentBalanceExchangeRate(Double currentBalanceExchangeRate) {
        this.currentBalanceExchangeRate = currentBalanceExchangeRate;
        return this;
    }
    
    /**
     * The current balance of the transaction account in the user's base currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_balance_in_base_currency")
    public Double currentBalanceInBaseCurrency;

    public TransactionAccount withCurrentBalanceInBaseCurrency(Double currentBalanceInBaseCurrency) {
        this.currentBalanceInBaseCurrency = currentBalanceInBaseCurrency;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;

    public TransactionAccount withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("institution")
    public Institution institution;

    public TransactionAccount withInstitution(Institution institution) {
        this.institution = institution;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public TransactionAccount withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public String number;

    public TransactionAccount withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * The current safe balance, if safe balance is activated and available for the transaction account. If safe balance is not available, then null is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("safe_balance")
    public Double safeBalance;

    public TransactionAccount withSafeBalance(Double safeBalance) {
        this.safeBalance = safeBalance;
        return this;
    }
    
    /**
     * The current safe balance in the user's base currency, if safe balance is activated and available for the transaction account. If safe balance is not available, then null is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("safe_balance_in_base_currency")
    public Double safeBalanceInBaseCurrency;

    public TransactionAccount withSafeBalanceInBaseCurrency(Double safeBalanceInBaseCurrency) {
        this.safeBalanceInBaseCurrency = safeBalanceInBaseCurrency;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("starting_balance")
    public Double startingBalance;

    public TransactionAccount withStartingBalance(Double startingBalance) {
        this.startingBalance = startingBalance;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("starting_balance_date")
    public String startingBalanceDate;

    public TransactionAccount withStartingBalanceDate(String startingBalanceDate) {
        this.startingBalanceDate = startingBalanceDate;
        return this;
    }
    
    /**
     * The type of the transaction account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public TransactionAccountTypeEnum type;

    public TransactionAccount withType(TransactionAccountTypeEnum type) {
        this.type = type;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public String updatedAt;

    public TransactionAccount withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    public TransactionAccount(){}
}
