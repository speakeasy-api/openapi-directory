// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateScheduledAuditRequestBodyDayOfWeekEnum - The day of the week on which the scheduled audit takes place. This can be one of <code>SUN</code>, <code>MON</code>, <code>TUE</code>, <code>WED</code>, <code>THU</code>, <code>FRI</code>, or <code>SAT</code>. This field is required if the "frequency" parameter is set to <code>WEEKLY</code> or <code>BIWEEKLY</code>.
type UpdateScheduledAuditRequestBodyDayOfWeekEnum string

const (
	UpdateScheduledAuditRequestBodyDayOfWeekEnumSun UpdateScheduledAuditRequestBodyDayOfWeekEnum = "SUN"
	UpdateScheduledAuditRequestBodyDayOfWeekEnumMon UpdateScheduledAuditRequestBodyDayOfWeekEnum = "MON"
	UpdateScheduledAuditRequestBodyDayOfWeekEnumTue UpdateScheduledAuditRequestBodyDayOfWeekEnum = "TUE"
	UpdateScheduledAuditRequestBodyDayOfWeekEnumWed UpdateScheduledAuditRequestBodyDayOfWeekEnum = "WED"
	UpdateScheduledAuditRequestBodyDayOfWeekEnumThu UpdateScheduledAuditRequestBodyDayOfWeekEnum = "THU"
	UpdateScheduledAuditRequestBodyDayOfWeekEnumFri UpdateScheduledAuditRequestBodyDayOfWeekEnum = "FRI"
	UpdateScheduledAuditRequestBodyDayOfWeekEnumSat UpdateScheduledAuditRequestBodyDayOfWeekEnum = "SAT"
)

func (e *UpdateScheduledAuditRequestBodyDayOfWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "TUE":
		fallthrough
	case "WED":
		fallthrough
	case "THU":
		fallthrough
	case "FRI":
		fallthrough
	case "SAT":
		*e = UpdateScheduledAuditRequestBodyDayOfWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateScheduledAuditRequestBodyDayOfWeekEnum: %s", s)
	}
}

// UpdateScheduledAuditRequestBodyFrequencyEnum - How often the scheduled audit takes place, either <code>DAILY</code>, <code>WEEKLY</code>, <code>BIWEEKLY</code>, or <code>MONTHLY</code>. The start time of each audit is determined by the system.
type UpdateScheduledAuditRequestBodyFrequencyEnum string

const (
	UpdateScheduledAuditRequestBodyFrequencyEnumDaily    UpdateScheduledAuditRequestBodyFrequencyEnum = "DAILY"
	UpdateScheduledAuditRequestBodyFrequencyEnumWeekly   UpdateScheduledAuditRequestBodyFrequencyEnum = "WEEKLY"
	UpdateScheduledAuditRequestBodyFrequencyEnumBiweekly UpdateScheduledAuditRequestBodyFrequencyEnum = "BIWEEKLY"
	UpdateScheduledAuditRequestBodyFrequencyEnumMonthly  UpdateScheduledAuditRequestBodyFrequencyEnum = "MONTHLY"
)

func (e *UpdateScheduledAuditRequestBodyFrequencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DAILY":
		fallthrough
	case "WEEKLY":
		fallthrough
	case "BIWEEKLY":
		fallthrough
	case "MONTHLY":
		*e = UpdateScheduledAuditRequestBodyFrequencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateScheduledAuditRequestBodyFrequencyEnum: %s", s)
	}
}

type UpdateScheduledAuditRequestBody struct {
	// The day of the month on which the scheduled audit takes place. This can be <code>1</code> through <code>31</code> or <code>LAST</code>. This field is required if the <code>frequency</code> parameter is set to <code>MONTHLY</code>. If days 29-31 are specified, and the month does not have that many days, the audit takes place on the "LAST" day of the month.
	DayOfMonth *string `json:"dayOfMonth,omitempty"`
	// The day of the week on which the scheduled audit takes place. This can be one of <code>SUN</code>, <code>MON</code>, <code>TUE</code>, <code>WED</code>, <code>THU</code>, <code>FRI</code>, or <code>SAT</code>. This field is required if the "frequency" parameter is set to <code>WEEKLY</code> or <code>BIWEEKLY</code>.
	DayOfWeek *UpdateScheduledAuditRequestBodyDayOfWeekEnum `json:"dayOfWeek,omitempty"`
	// How often the scheduled audit takes place, either <code>DAILY</code>, <code>WEEKLY</code>, <code>BIWEEKLY</code>, or <code>MONTHLY</code>. The start time of each audit is determined by the system.
	Frequency *UpdateScheduledAuditRequestBodyFrequencyEnum `json:"frequency,omitempty"`
	// Which checks are performed during the scheduled audit. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
	TargetCheckNames []string `json:"targetCheckNames,omitempty"`
}

type UpdateScheduledAuditRequest struct {
	RequestBody       UpdateScheduledAuditRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The name of the scheduled audit. (Max. 128 chars)
	ScheduledAuditName string `pathParam:"style=simple,explode=false,name=scheduledAuditName"`
}

type UpdateScheduledAuditResponse struct {
	ContentType string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// Success
	UpdateScheduledAuditResponse *shared.UpdateScheduledAuditResponse
}
