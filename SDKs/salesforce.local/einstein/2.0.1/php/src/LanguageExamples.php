<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class LanguageExamples 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get All Examples
     * 
     * Returns all the examples for the specified dataset,
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetExamplesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetExamplesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetExamplesResponse
     */
	public function getExamples(
        \OpenAPI\OpenAPI\Models\Operations\GetExamplesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetExamplesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetExamplesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/language/datasets/{datasetId}/examples', \OpenAPI\OpenAPI\Models\Operations\GetExamplesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetExamplesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetExamplesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exampleList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExampleList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get All Examples for Label
     * 
     * Returns all the examples for the specified label. Returns both uploaded examples and feedback examples.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetExamplesByLabelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetExamplesByLabelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetExamplesByLabelResponse
     */
	public function getExamplesByLabel(
        \OpenAPI\OpenAPI\Models\Operations\GetExamplesByLabelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetExamplesByLabelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetExamplesByLabelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/language/examples');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetExamplesByLabelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetExamplesByLabelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exampleList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExampleList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Feedback Example
     * 
     * Adds a feedback example to the dataset associated with the specified model.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProvideFeedbackRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProvideFeedbackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProvideFeedbackResponse
     */
	public function provideFeedback(
        \OpenAPI\OpenAPI\Models\Operations\ProvideFeedbackRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\ProvideFeedbackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProvideFeedbackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/language/feedback');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProvideFeedbackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Example', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create Examples From a File
     * 
     * Adds examples from a .csv, .tsv, or .json file to a dataset.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsyncRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsyncSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsyncResponse
     */
	public function updateDatasetAsync(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsyncRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsyncSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsyncResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/language/datasets/{datasetId}/upload', \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsyncRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDatasetAsyncResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataset = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Dataset', 'json');
            }
        }

        return $response;
    }
}