// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutResourceConfigXAmzTargetEnum
type PutResourceConfigXAmzTargetEnum string

const (
	PutResourceConfigXAmzTargetEnumStarlingDoveServicePutResourceConfig PutResourceConfigXAmzTargetEnum = "StarlingDoveService.PutResourceConfig"
)

func (e PutResourceConfigXAmzTargetEnum) ToPointer() *PutResourceConfigXAmzTargetEnum {
	return &e
}

func (e *PutResourceConfigXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "StarlingDoveService.PutResourceConfig":
		*e = PutResourceConfigXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutResourceConfigXAmzTargetEnum: %v", v)
	}
}

type PutResourceConfigRequest struct {
	PutResourceConfigRequest shared.PutResourceConfigRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               PutResourceConfigXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutResourceConfigResponse struct {
	ContentType string
	// InsufficientPermissionsException
	InsufficientPermissionsException interface{}
	// MaxActiveResourcesExceededException
	MaxActiveResourcesExceededException interface{}
	// NoRunningConfigurationRecorderException
	NoRunningConfigurationRecorderException interface{}
	StatusCode                              int
	RawResponse                             *http.Response
	// ValidationException
	ValidationException interface{}
}
