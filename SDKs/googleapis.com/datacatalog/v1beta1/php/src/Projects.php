<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * A maximum of 10,000 entry groups may be created per organization across all locations. Users should enable the Data Catalog API in the project identified by the `parent` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/entryGroups', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1beta1EntryGroupInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1EntryGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1EntryGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an entry. Only entries of 'FILESET' type or user-specified type can be created. Users should enable the Data Catalog API in the project identified by the `parent` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information). A maximum of 100,000 entries may be created per entry group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsEntriesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/entries', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1beta1EntryInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1Entry = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1Entry', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists entries.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsEntriesList(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/entries', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsEntriesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1ListEntriesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1ListEntriesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists entry groups.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/entryGroups', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1ListEntryGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1ListEntryGroupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a tag on an Entry. Note: The project identified by the `parent` parameter for the [tag](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be from the same organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsTagsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/tags', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1beta1TagInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1Tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1Tag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists tags assigned to an Entry. The columns in the response are lowercased.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListResponse
     */
	public function datacatalogProjectsLocationsEntryGroupsTagsList(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/tags', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsEntryGroupsTagsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1ListTagsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1ListTagsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a tag template. The user should enable the Data Catalog API in the project identified by the `parent` parameter (see [Data Catalog Resource Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateResponse
     */
	public function datacatalogProjectsLocationsTagTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/tagTemplates', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1beta1TagTemplateInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1TagTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1TagTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a field in a tag template. The user should enable the Data Catalog API in the project identified by the `parent` parameter (see [Data Catalog Resource Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateResponse
     */
	public function datacatalogProjectsLocationsTagTemplatesFieldsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/fields', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1beta1TagTemplateFieldInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1TagTemplateField = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1TagTemplateField', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Renames an enum value in a tag template. The enum values have to be unique within one enum field. Thus, an enum value cannot be renamed with a name used in any other enum value within the same enum field.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameResponse
     */
	public function datacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRename(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:rename', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1beta1RenameTagTemplateFieldEnumValueRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1TagTemplateField = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1TagTemplateField', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a taxonomy in the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/taxonomies', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1beta1TaxonomyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1Taxonomy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1Taxonomy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Exports all taxonomies and their policy tags in a project. This method generates SerializedTaxonomy protos with nested policy tags that can be used as an input for future ImportTaxonomies calls.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesExport(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/taxonomies:export', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1ExportTaxonomiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1ExportTaxonomiesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports all taxonomies and their policy tags to a project as new taxonomies. This method provides a bulk taxonomy / policy tag creation using nested proto structure.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesImport(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/taxonomies:import', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1beta1ImportTaxonomiesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1ImportTaxonomiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1ImportTaxonomiesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all taxonomies in a project in a particular location that the caller has permission to view.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesList(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/taxonomies', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1ListTaxonomiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1ListTaxonomiesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a policy tag in the specified taxonomy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesPolicyTagsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/policyTags', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1beta1PolicyTagInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1PolicyTag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1PolicyTag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a policy tag. Also deletes all of its descendant policy tags.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesPolicyTagsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a policy tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesPolicyTagsGet(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1PolicyTag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1PolicyTag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the IAM policy for a taxonomy or a policy tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all policy tags in a taxonomy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesPolicyTagsList(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/policyTags', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1ListPolicyTagsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1ListPolicyTagsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a policy tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesPolicyTagsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogV1beta1PolicyTagInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogV1beta1PolicyTag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogV1beta1PolicyTag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the IAM policy for a taxonomy or a policy tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the permissions that a caller has on the specified taxonomy or policy tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsResponse
     */
	public function datacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}