"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ChargeStations:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_charge_station(self, request: operations.DeleteChargeStationRequest) -> operations.DeleteChargeStationResponse:
        r"""Use to delete a charge station"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteChargeStationRequest, base_url, '/v1/chargestations/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteChargeStationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_charge_station(self, request: operations.GetChargeStationRequest) -> operations.GetChargeStationResponse:
        r"""Get a single charge station's data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChargeStationRequest, base_url, '/v1/chargestations/{id}', request)
        
        query_params = utils.get_query_params(operations.GetChargeStationRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChargeStationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_charge_station_connectors(self, request: operations.GetChargeStationConnectorsRequest) -> operations.GetChargeStationConnectorsResponse:
        r"""List connectors for a chargestation"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChargeStationConnectorsRequest, base_url, '/v1/chargestations/{id}/connectors', request)
        
        query_params = utils.get_query_params(operations.GetChargeStationConnectorsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChargeStationConnectorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_charge_stations(self, request: operations.GetChargeStationsRequest) -> operations.GetChargeStationsResponse:
        r"""List all Chargestations"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/chargestations'
        
        query_params = utils.get_query_params(operations.GetChargeStationsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChargeStationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_charge_station(self, request: operations.PatchChargeStationRequest) -> operations.PatchChargeStationResponse:
        r"""Update a charge station's data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchChargeStationRequest, base_url, '/v1/chargestations/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "schema1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchChargeStationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatchChargeStation200ApplicationJSON])
                res.patch_charge_station_200_application_json_object = out
        elif http_res.status_code == 400:
            pass

        return res

    def post_charge_stations(self, request: shared.Schema1) -> operations.PostChargeStationsResponse:
        r"""Create a new charge station"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/chargestations'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostChargeStationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostChargeStations201ApplicationJSON])
                res.post_charge_stations_201_application_json_object = out
        elif http_res.status_code == 400:
            pass

        return res

    