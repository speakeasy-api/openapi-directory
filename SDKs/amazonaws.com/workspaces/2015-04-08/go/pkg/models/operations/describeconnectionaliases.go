// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeConnectionAliasesXAmzTargetEnum
type DescribeConnectionAliasesXAmzTargetEnum string

const (
	DescribeConnectionAliasesXAmzTargetEnumWorkspacesServiceDescribeConnectionAliases DescribeConnectionAliasesXAmzTargetEnum = "WorkspacesService.DescribeConnectionAliases"
)

func (e *DescribeConnectionAliasesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WorkspacesService.DescribeConnectionAliases":
		*e = DescribeConnectionAliasesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeConnectionAliasesXAmzTargetEnum: %s", s)
	}
}

type DescribeConnectionAliasesRequest struct {
	DescribeConnectionAliasesRequest shared.DescribeConnectionAliasesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                    *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                   *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                         *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                    *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                       DescribeConnectionAliasesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeConnectionAliasesResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// Success
	DescribeConnectionAliasesResult *shared.DescribeConnectionAliasesResult
	// InvalidParameterValuesException
	InvalidParameterValuesException interface{}
	// OperationNotSupportedException
	OperationNotSupportedException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
}
